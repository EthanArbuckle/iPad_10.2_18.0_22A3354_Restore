uint64_t std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::operator()(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  _BYTE *v3;
  NSObject *v4;
  const char *v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __int128 v38;
  uint8_t buf[8];
  __int128 v40;
  void *v41;

  v2 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v38 = *a2;
  *((_QWORD *)&v38 + 1) = v2;
  *a2 = 0;
  a2[1] = 0;
  v3 = *(_BYTE **)(a1 + 8);
  if (v3[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "S1NARDecoder inference cancelled.", buf, 2u);
    }
    Diagnostics::log(5, "S1NARDecoder inference cancelled.", v5, (_QWORD)v38);
    if (!v2)
      return 1;
LABEL_42:
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    return 1;
  }
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v7->__shared_owners_ = 0u;
  v8 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  *(_OWORD *)&v7[1].__shared_owners_ = 0u;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&v7[1].__shared_owners_;
  v9 = (uint64_t)&v7[1];
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *v10;
  {
    v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)buf = &v41;
    v18 = v17[5];
    if (v18)
    {
      *(_QWORD *)buf = &off_1EA923288;
      *(_QWORD *)&v40 = v14;
      *((_QWORD *)&v40 + 1) = v13;
      if (v13)
      {
        v19 = (unint64_t *)&v13->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v18 + 8, &v40);
      *(_QWORD *)buf = &off_1EA923288;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      v24 = (_QWORD *)operator new();
      *v24 = &off_1EA923288;
      v24[1] = v14;
      v24[2] = v13;
      if (v13)
      {
        v25 = (unint64_t *)&v13->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v17[5];
      v17[5] = (uint64_t)v24;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if (v13)
    {
      v28 = (unint64_t *)&v13->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  Agglomerate::set<std::shared_ptr<SemanticFeature>>(v9, &v38);
  *(_QWORD *)buf = v7 + 1;
  *(_QWORD *)&v40 = v7;
  do
    v30 = __ldxr(v8);
  while (__stxr(v30 + 1, v8));
  (*(void (**)(_BYTE *, uint8_t *))(*(_QWORD *)v3 + 72))(v3, buf);
  v31 = (std::__shared_weak_count *)v40;
  if ((_QWORD)v40)
  {
    v32 = (unint64_t *)(v40 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  do
    v34 = __ldaxr(v8);
  while (__stlxr(v34 - 1, v8));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
    goto LABEL_42;
  return 1;
}

void sub_1DEA04FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::target_type()
{
}

void Agglomerate::set<std::shared_ptr<SemanticFeature>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA9232A8;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<SemanticFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<SemanticFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232A8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::S1NARDecoderIOProcessor>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::S1NARDecoderIOProcessor::~S1NARDecoderIOProcessor((InferenceEngine::S1NARDecoderIOProcessor *)(a1 + 24));
}

void TransliterateImpl::~TransliterateImpl(TransliterateImpl *this)
{
  TransliterateImpl::~TransliterateImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1EA91EFB8;
  v2 = (uint64_t **)((char *)this + 104);
  if (**((_QWORD **)this + 13) != *(_QWORD *)(*((_QWORD *)this + 13) + 8))
  {
    do
    {
      utrans_close();
      v3 = **v2;
      v4 = (*v2)[1] - 8;
      (*v2)[1] = v4;
    }
    while (v3 != v4);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  FrontendModule::~FrontendModule((void **)this);
}

void TransliterateImpl::generate_tokens(TransliterateImpl *this)
{
  std::basic_string<char16_t>::size_type v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::basic_string<char16_t>::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t **v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *p_str;
  std::string::size_type size;
  std::basic_string<char16_t> *v25;
  std::basic_string<char16_t>::value_type v26;
  int data;
  std::basic_string<char16_t> *v28;
  NSObject *v29;
  const char *v30;
  std::string *p_p;
  const char *v32;
  const char *v33;
  std::string *v34;
  std::basic_string<char16_t> *v35;
  int32_t v36;
  std::string::size_type v37;
  __int128 v38;
  uint64_t **v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  std::string::size_type v50;
  __int128 v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  std::string::size_type v64;
  unint64_t v65;
  int *v66;
  _OWORD *v67;
  uint64_t v68;
  std::basic_string<char16_t>::size_type v69;
  std::basic_string<char16_t>::size_type v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  std::basic_string<char16_t>::size_type v79;
  uint64_t v80;
  std::basic_string<char16_t>::size_type v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  std::string::size_type v86;
  _OWORD *v87;
  uint64_t v88;
  std::string::size_type v89;
  uint64_t v90;
  std::string::size_type v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _BYTE *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  __int128 v126;
  std::string v127;
  uint64_t *v128;
  std::__shared_weak_count *v129;
  std::string __str;
  std::string v131;
  __int128 v132[4];
  std::string code;
  std::string __p;
  __int128 v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  __int128 v139;
  std::basic_string<char16_t> v140;
  __int128 v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  char v144;
  std::string buf;
  uint64_t v146;

  v124 = (_QWORD *)((char *)this + 32);
  v146 = *MEMORY[0x1E0C80C00];
  while (!*((_BYTE *)this + 8))
  {
    v2 = *((_QWORD *)this + 2);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v140.__r_.__value_.__r.__words[0] = v2;
    v140.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, std::basic_string<char16_t>::size_type, _QWORD))(*(_QWORD *)v2 + 16))(v132, v2, 0);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v8 = *(_QWORD *)&v132[0];
    if (*(_QWORD *)&v132[0])
    {
      v9 = *((_QWORD *)this + 2);
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v140.__r_.__value_.__r.__words[0] = v9;
      v140.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      (*(void (**)(std::basic_string<char16_t>::size_type))(*(_QWORD *)v9 + 32))(v9);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v15 = *(_QWORD *)&v132[0];
      if ((_QWORD *)(v15 + 8) == v16)
        v17 = 0;
      else
        v17 = v16[5] + 8;
      v18 = (_OWORD *)(v17 + 24);
      v123 = v8;
      if ((*(char *)(v17 + 47) & 0x80000000) == 0)
      {
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = *v18;
        v131.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
        goto LABEL_27;
      }
      std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)(v17 + 24), *(_QWORD *)(v17 + 32));
      if (*(char *)(v17 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v17 + 24), *(_QWORD *)(v17 + 32));
      }
      else
      {
LABEL_27:
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v18;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
      }
      v128 = 0;
      v129 = 0;
      v19 = (unint64_t **)*((_QWORD *)this + 13);
      v21 = *v19;
      v20 = v19[1];
      if (*v19 == v20)
      {
        v49 = 0;
      }
      else
      {
        do
        {
          v22 = *v21;
          std::string::operator=(&v131, &__str);
          LODWORD(code.__r_.__value_.__l.__data_) = 0;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          UTFString::to_utf16(&v140, (const char *)p_str, size);
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v140;
          else
            v25 = (std::basic_string<char16_t> *)v140.__r_.__value_.__r.__words[0];
          LODWORD(v139) = u_strlen((const UChar *)v25);
          LODWORD(v138) = v139;
          utrans_transUChars();
          std::basic_string<char16_t>::resize(&v140, (int)v139, v26);
          data = (int)code.__r_.__value_.__l.__data_;
          if (LODWORD(code.__r_.__value_.__l.__data_) == 15)
          {
            LODWORD(code.__r_.__value_.__l.__data_) = 0;
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = &v140;
            else
              v28 = (std::basic_string<char16_t> *)v140.__r_.__value_.__r.__words[0];
            LODWORD(v139) = u_strlen((const UChar *)v28);
            LODWORD(v138) = v139;
            utrans_transUChars();
            data = (int)code.__r_.__value_.__l.__data_;
          }
          if (data < 1)
          {
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v140;
            else
              v35 = (std::basic_string<char16_t> *)v140.__r_.__value_.__r.__words[0];
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v36 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
            else
              v36 = v140.__r_.__value_.__r.__words[1];
            UTFString::to_utf8(&__p, (const UChar *)v35, v36);
            v37 = __p.__r_.__value_.__r.__words[2];
            v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            __p = __str;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
            __str.__r_.__value_.__r.__words[2] = v37;
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v30 = u_errorName((UErrorCode)code.__r_.__value_.__l.__data_);
              Censor::global_plaintext(&__p, (uint64_t)&__str);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
              _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_ERROR, "Error transliterate: %s, '%s' ", (uint8_t *)&buf, 0x16u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            v32 = u_errorName((UErrorCode)code.__r_.__value_.__l.__data_);
            Censor::global_plaintext(&__p, (uint64_t)&__str);
            v34 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
            Diagnostics::log(3, "Error transliterate: %s, '%s' ", v33, v32, v34);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          v39 = (uint64_t **)*((_QWORD *)this + 15);
          do
          {
            v39 = (uint64_t **)v39[1];
            if (!v39)
LABEL_212:
              std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            while (1)
            {
              v40 = (unint64_t)v39[4];
              if (v22 >= v40)
                break;
              v39 = (uint64_t **)*v39;
              if (!v39)
                goto LABEL_212;
            }
          }
          while (v40 < v22);
          ((void (*)(std::basic_string<char16_t> *__return_ptr, std::string *, std::string *))v39[5])(&v140, &v131, &__str);
          if (*(char *)(v17 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(v17 + 24), *(_QWORD *)(v17 + 32));
          }
          else
          {
            *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *v18;
            v127.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
          }
          v126 = *(_OWORD *)&v140.__r_.__value_.__l.__data_;
          if (v140.__r_.__value_.__l.__size_)
          {
            v41 = (unint64_t *)(v140.__r_.__value_.__l.__size_ + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          (*(void (**)(TransliterateImpl *, std::string *, uint64_t **, __int128 *))(*(_QWORD *)this + 56))(this, &v127, &v128, &v126);
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
          if (*((_QWORD *)&v126 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          v46 = (std::__shared_weak_count *)v140.__r_.__value_.__l.__size_;
          if (v140.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(v140.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          ++v21;
        }
        while (v21 != v20);
        v49 = v128;
      }
      v50 = __str.__r_.__value_.__r.__words[2];
      v51 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v18;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 40);
      *v18 = v51;
      *(_QWORD *)(v17 + 40) = v50;
      if (!v49 || *v49 == v49[1])
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v124, v132);
        v8 = v123;
      }
      else
      {
        v52 = v132[0];
        if (*((_QWORD *)&v132[0] + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v132[0] + 1) + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        v55 = v129;
        v125 = v49;
        if (v129)
        {
          v56 = (unint64_t *)&v129->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v122 = v55;
        if ((_QWORD *)(v52 + 8) == v58)
          v59 = 0;
        else
          v59 = v58[5] + 8;
        if ((_QWORD *)(v52 + 8) == v60)
          v121 = 0;
        else
          v121 = (_BYTE *)(v60[5] + 8);
        if (*(char *)(v59 + 47) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v59 + 24), *(_QWORD *)(v59 + 32));
        else
          buf = *(std::string *)(v59 + 24);
        v62 = v49;
        v61 = *v49;
        if (v62[1] != v61)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = (int *)(v61 + 56 * v63);
            if (v65 < *v66)
            {
              v67 = operator new(0x30uLL);
              *(_OWORD *)((char *)v67 + 8) = 0u;
              v67[2] = 0u;
              *(_QWORD *)v67 = &off_1EA932198;
              *((_QWORD *)v67 + 3) = v67 + 2;
              v68 = (uint64_t)v67 + 24;
              code.__r_.__value_.__r.__words[0] = (std::string::size_type)v67 + 24;
              code.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
              v143 = 0;
              v141 = 0u;
              v142 = 0u;
              LODWORD(v140.__r_.__value_.__l.__data_) = 1952807028;
              std::string::basic_string(&__p, &buf, v64, *v66 - v65, (std::allocator<char> *)&v139);
              if (SBYTE7(v142) < 0)
                operator delete((void *)v141);
              v141 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)&v142 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v142 + 1, *(_QWORD *)(v59 + 48), *(_QWORD *)(v59 + 56));
              v69 = BYTE7(v142);
              if (SBYTE7(v142) < 0)
                v69 = *((_QWORD *)&v141 + 1);
              v140.__r_.__value_.__r.__words[2] = v69;
              v140.__r_.__value_.__l.__size_ = *(_QWORD *)(v59 + 8) + v65;
              Agglomerate::set<TokenBasicItem>(v68, (__int128 *)&v140);
              v70 = v140.__r_.__value_.__r.__words[2];
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v124, (__int128 *)&code);
              v71 = v143;
              if (v143)
              {
                v72 = (unint64_t *)&v143->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              if (SBYTE7(v142) < 0)
                operator delete((void *)v141);
              v74 = (std::__shared_weak_count *)code.__r_.__value_.__l.__size_;
              if (code.__r_.__value_.__l.__size_)
              {
                v75 = (unint64_t *)(code.__r_.__value_.__l.__size_ + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v64 += v70;
              v65 += v70;
            }
            v77 = operator new(0x30uLL);
            *(_OWORD *)((char *)v77 + 8) = 0u;
            v77[2] = 0u;
            *(_QWORD *)v77 = &off_1EA932198;
            *((_QWORD *)v77 + 3) = v77 + 2;
            *(_QWORD *)&v139 = (char *)v77 + 24;
            *((_QWORD *)&v139 + 1) = v77;
            v143 = 0;
            v141 = 0u;
            v142 = 0u;
            LODWORD(v140.__r_.__value_.__l.__data_) = 1952807028;
            std::string::operator=((std::string *)&v141, (const std::string *)(v61 + 56 * v63 + 8));
            std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v142 + 1, *(_QWORD *)(v59 + 48), *(_QWORD *)(v59 + 56));
            v78 = v61 + 56 * v63;
            if (*(char *)(v78 + 55) < 0)
              v79 = *(_QWORD *)(v78 + 40);
            else
              v79 = *(unsigned __int8 *)(v78 + 55);
            v140.__r_.__value_.__r.__words[2] = v79;
            v140.__r_.__value_.__l.__size_ = *(_QWORD *)(v59 + 8) + *v66;
            v80 = v139;
            Agglomerate::set<TokenBasicItem>(v139, (__int128 *)&v140);
            v81 = v140.__r_.__value_.__r.__words[2];
            if ((SBYTE7(v142) & 0x80u) == 0)
              v82 = BYTE7(v142);
            else
              v82 = *((_QWORD *)&v141 + 1);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&code;
            if (!v83[5])
            {
              v84 = (_QWORD *)operator new();
              *v84 = &off_1EA923108;
              v85 = v83[5];
              v83[5] = (uint64_t)v84;
              if (v85)
                (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
            }
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v124, &v139);
            v65 += v81;
            v64 += v82;
            if (0x6DB6DB6DB6DB6DB7 * ((v125[1] - *v125) >> 3) - 1 == v63)
            {
              v86 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v86 = buf.__r_.__value_.__l.__size_;
              if (v64 < v86)
              {
                v87 = operator new(0x30uLL);
                *(_OWORD *)((char *)v87 + 8) = 0u;
                *(_QWORD *)v87 = &off_1EA932198;
                v87[2] = 0u;
                *((_QWORD *)v87 + 3) = v87 + 2;
                v88 = (uint64_t)v87 + 24;
                *(_QWORD *)&v138 = (char *)v87 + 24;
                *((_QWORD *)&v138 + 1) = v87;
                v137 = 0;
                v135 = 0u;
                v136 = 0u;
                LODWORD(__p.__r_.__value_.__l.__data_) = 1952807028;
                std::string::basic_string(&code, &buf, v64, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v144);
                if (SBYTE7(v136) < 0)
                  operator delete((void *)v135);
                v135 = *(_OWORD *)&code.__r_.__value_.__l.__data_;
                *(_QWORD *)&v136 = *((_QWORD *)&code.__r_.__value_.__l + 2);
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v136 + 1, *(_QWORD *)(v59 + 48), *(_QWORD *)(v59 + 56));
                v89 = BYTE7(v136);
                if (SBYTE7(v136) < 0)
                  v89 = *((_QWORD *)&v135 + 1);
                __p.__r_.__value_.__r.__words[2] = v89;
                __p.__r_.__value_.__l.__size_ = *(_QWORD *)(v59 + 8) + v65;
                Agglomerate::set<TokenBasicItem>(v88, (__int128 *)&__p);
                v90 = BYTE7(v136);
                v91 = __p.__r_.__value_.__r.__words[2];
                v92 = *((_QWORD *)&v135 + 1);
                std::deque<std::shared_ptr<Agglomerate>>::push_back(v124, &v138);
                if ((v90 & 0x80u) != 0)
                  v90 = v92;
                v93 = v137;
                if (v137)
                {
                  v94 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                    std::__shared_weak_count::__release_weak(v93);
                  }
                }
                if (SBYTE7(v136) < 0)
                  operator delete((void *)v135);
                v96 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
                if (*((_QWORD *)&v138 + 1))
                {
                  v97 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v64 += v90;
                v65 += v91;
              }
            }
            v99 = v143;
            if (v143)
            {
              v100 = (unint64_t *)&v143->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            if (SBYTE7(v142) < 0)
              operator delete((void *)v141);
            v102 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
            if (*((_QWORD *)&v139 + 1))
            {
              v103 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            ++v63;
            v61 = *v125;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((v125[1] - *v125) >> 3) > v63);
        }
        v8 = v123;
        if (v121)
        {
          v105 = *((_QWORD *)this + 9);
          if (v105)
          {
            v106 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)
                                         + (((unint64_t)(v105 + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                             + 16 * (v105 + *((_BYTE *)this + 64) - 1));
            v140.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&__p;
            v108 = v107[5];
            if (v108)
            {
              *(_BYTE *)(v108 + 8) = *v121;
            }
            else
            {
              v109 = operator new();
              *(_QWORD *)v109 = &off_1EA923128;
              *(_BYTE *)(v109 + 8) = *v121;
              v110 = v107[5];
              v107[5] = v109;
              if (v110)
                (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
            }
          }
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if (!v122)
            goto LABEL_190;
        }
        else if (!v122)
        {
          goto LABEL_190;
        }
        v111 = (unint64_t *)&v122->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
LABEL_190:
        if (*((_QWORD *)&v52 + 1))
        {
          v113 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v52 + 1) + 16))(*((_QWORD *)&v52 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
          }
        }
      }
      v115 = v129;
      if (v129)
      {
        v116 = (unint64_t *)&v129->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      goto LABEL_204;
    }
    *((_BYTE *)this + 8) = 1;
LABEL_204:
    v118 = (std::__shared_weak_count *)*((_QWORD *)&v132[0] + 1);
    if (!*((_QWORD *)&v132[0] + 1))
      goto LABEL_208;
    v119 = (unint64_t *)(*((_QWORD *)&v132[0] + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
      if (!v8)
        return;
    }
    else
    {
LABEL_208:
      if (!v8)
        return;
    }
  }
}

void sub_1DEA06118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a48 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void TransliterateImpl::merge_transliteration(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v6;
  NSObject *v7;
  const char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  unsigned __int8 *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  std::string *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  int v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  const char *v125;
  std::string::size_type v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  std::string *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  __int128 v154;
  void **v155;
  uint64_t v156;
  __int128 v157;
  std::string *v158;
  std::string *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  unsigned __int8 *v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  const std::string *v177;
  std::string *v178;
  uint64_t v179;
  const std::string::value_type *v180;
  uint64_t v181;
  const std::string::value_type *v182;
  int v183;
  uint64_t *v184;
  const std::string::value_type *v185;
  std::string::size_type v186;
  std::string *v187;
  std::string::size_type v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  std::string *v192;
  std::string::size_type v193;
  std::string *v194;
  uint64_t v195;
  _DWORD *v196;
  unint64_t v197;
  std::string *v198;
  std::string::size_type v199;
  const std::string *v200;
  std::string *v201;
  uint64_t v202;
  uint64_t v203;
  const std::string::value_type *v204;
  const std::string::value_type *v205;
  int v206;
  const std::string::value_type *v207;
  std::string::size_type v208;
  std::string *v209;
  std::string::size_type v210;
  char v211;
  std::string *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  unint64_t v217;
  int *v218;
  int *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  std::string *v225;
  unint64_t v226;
  uint64_t v227;
  const std::string::value_type *v228;
  uint64_t v229;
  const std::string::value_type *v230;
  int v231;
  const std::string::value_type *v232;
  std::string::size_type v233;
  std::string *v234;
  std::string::size_type v235;
  char v236;
  int v237;
  int v238;
  uint64_t v239;
  const std::string *v240;
  std::string::size_type size;
  unint64_t v242;
  unint64_t v243;
  std::string *p_buf;
  std::string::size_type v245;
  unint64_t v246;
  std::string *v247;
  char *v248;
  char *v249;
  __int128 v250;
  uint64_t v251;
  char *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t i;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  unint64_t v268;
  std::string *v269;
  uint64_t v270;
  uint64_t v271;
  const std::string::value_type *v272;
  const std::string::value_type *v273;
  int v274;
  const std::string::value_type *v275;
  std::string::size_type v276;
  std::string *v277;
  __int128 v278;
  std::string *v279;
  std::string::size_type v280;
  std::string *v281;
  std::string::size_type v282;
  char v283;
  std::string *v284;
  std::string *v285;
  uint64_t v286;
  uint64_t v287;
  const std::string::value_type *v288;
  const std::string::value_type *v289;
  int v290;
  const std::string::value_type *v291;
  std::string::size_type v292;
  std::string *v293;
  std::string::size_type v294;
  char v295;
  std::string *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  std::string::size_type v302;
  std::string::size_type v303;
  char *v304;
  __int128 v305;
  __int128 v306;
  int64x2_t v307;
  std::string::size_type v308;
  char *v309;
  std::string::size_type v310;
  uint64_t v311;
  std::string::size_type v312;
  __int128 v313;
  __int128 v314;
  std::string::size_type v315;
  std::string::size_type v316;
  std::string::size_type v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  int v323;
  int v324;
  int v325;
  _DWORD *v326;
  int *v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int __str;
  std::string *__stra;
  std::string *__strb;
  std::string *__strc;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  std::__shared_weak_count *v347;
  uint64_t *v348;
  std::__shared_weak_count *v349;
  std::string v350;
  uint64_t *v351;
  std::__shared_weak_count *v352;
  uint64_t *v353;
  std::__shared_weak_count *v354;
  std::string v355;
  uint64_t *v356;
  std::__shared_weak_count *v357;
  uint64_t *v358;
  std::__shared_weak_count *v359;
  uint64_t *v360;
  std::__shared_weak_count *v361;
  uint64_t *v362;
  std::__shared_weak_count *v363;
  unint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  char v368;
  _BYTE v369[15];
  std::string v370;
  char *v371;
  uint64_t *v372;
  std::string buf;
  char *v374;
  uint64_t *v375;
  uint64_t v376;

  v376 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  if (!*a3)
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](a3, *a4, a4[1]);
    return;
  }
  if (*v6 != v6[1])
  {
    if (*(_QWORD *)*a4 == *(_QWORD *)(*a4 + 8))
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](a3, *a4, a4[1]);
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_DEBUG, "Transliterator alignment is overriden by non-aligned transliterator", (uint8_t *)&buf, 2u);
      }
      Diagnostics::log(7, "Transliterator alignment is overriden by non-aligned transliterator", v8);
      return;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v350, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v6 = *a3;
    }
    else
    {
      v350 = *(std::string *)a2;
    }
    v9 = (std::__shared_weak_count *)a3[1];
    v348 = v6;
    v349 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (_QWORD *)*a4;
    v13 = (std::__shared_weak_count *)a4[1];
    v346 = (uint64_t *)*a4;
    v347 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v365 = 0;
    v366 = 0;
    v367 = 0;
    v364 = 0;
    v17 = v12;
    v16 = *v12;
    if (v17[1] == v16)
      goto LABEL_423;
    v18 = 0;
    while (1)
    {
      v19 = (int *)(v16 + 56 * v18);
      v20 = *v19;
      v21 = v19[1] + *v19;
      v22 = v364;
      v23 = v6 + 1;
      v334 = v20;
      if (v20 <= v21)
        v24 = v21;
      else
        v24 = v20;
      if (v364 >= 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3))
        goto LABEL_143;
      LOBYTE(v25) = 0;
      __str = v24;
      do
      {
        v362 = v6;
        v363 = v349;
        if (v349)
        {
          v26 = (unint64_t *)&v349->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (!v22)
        {
          v28 = 0;
          if (!v349)
            goto LABEL_46;
LABEL_42:
          v32 = (unint64_t *)&v349->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
          }
          goto LABEL_46;
        }
        if (0x6DB6DB6DB6DB6DB7 * ((*v23 - *v6) >> 3) <= v22 - 1)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v28 = 0;
        v29 = (unsigned __int8 *)(*v6 + 31);
        do
        {
          if ((char)v29[24] < 0)
            v30 = *(_QWORD *)(v29 + 9);
          else
            LODWORD(v30) = v29[24];
          if ((char)*v29 < 0)
            v31 = *(_QWORD *)(v29 - 15);
          else
            LODWORD(v31) = *v29;
          v28 = v28 + v30 - v31;
          v29 += 56;
          --v22;
        }
        while (v22);
        if (v349)
          goto LABEL_42;
LABEL_46:
        v6 = v348;
        v34 = v364;
        v35 = *v348;
        v36 = 0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3);
        if (v36 <= v364)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v37 = (int *)(v35 + 56 * v364);
        if (*((char *)v37 + 31) < 0)
          v38 = *((_QWORD *)v37 + 2);
        else
          v38 = *((unsigned __int8 *)v37 + 31);
        v39 = *v37 - (uint64_t)v28;
        v40 = v38 + v39;
        if ((v25 & 1) == 0)
        {
          if ((int)v39 > v24)
          {
            v41 = operator new(0x18uLL);
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v41 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v41 + 3);
            *v41 = 1;
            v41[1] = v34;
            v41[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v365, (uint64_t)&buf);
            goto LABEL_94;
          }
          if (v21 <= (int)v39)
          {
            v67 = operator new(0x18uLL);
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v67 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v67 + 3);
            *v67 = 2;
            v67[1] = v34;
            v67[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v365, (uint64_t)&buf);
            goto LABEL_94;
          }
          v42 = v364 + 1;
          if (v364 + 1 >= v36)
          {
            v53 = 0;
          }
          else
          {
            v43 = *(_DWORD *)(v35 + 56 * v42);
            v360 = v348;
            v361 = v349;
            if (v349)
            {
              v44 = (unint64_t *)&v349->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
              v35 = *v348;
              v36 = 0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3);
            }
            if (v36 <= v34)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v46 = 0;
            v47 = v34 + 1;
            v48 = (unsigned __int8 *)(v35 + 31);
            do
            {
              if ((char)v48[24] < 0)
                v49 = *(_QWORD *)(v48 + 9);
              else
                LODWORD(v49) = v48[24];
              if ((char)*v48 < 0)
                v50 = *(_QWORD *)(v48 - 15);
              else
                LODWORD(v50) = *v48;
              v46 = v46 + v49 - v50;
              v48 += 56;
              --v47;
            }
            while (v47);
            if (v349)
            {
              v51 = (unint64_t *)&v349->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                std::__shared_weak_count::__release_weak(v349);
              }
            }
            v6 = v348;
            v34 = v364;
            v42 = v364 + 1;
            v36 = 0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3);
            if (v36 <= v364 + 1)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v53 = v43 - v46;
          }
          if (v42 >= v36 || v21 < v53)
          {
            if (v40 < v334)
            {
              v72 = operator new(0x18uLL);
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v72 + 3);
              buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v72 + 3);
              *v72 = 1;
              v72[1] = v42;
              v72[2] = v18;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
              std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v365, (uint64_t)&buf);
              v68 = (void *)buf.__r_.__value_.__r.__words[0];
              v24 = __str;
              if (!buf.__r_.__value_.__r.__words[0])
                goto LABEL_96;
LABEL_95:
              operator delete(v68);
LABEL_96:
              v25 = 0;
              goto LABEL_97;
            }
            v77 = operator new(0x18uLL);
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v77 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v77 + 3);
            *v77 = 2;
            v77[1] = v34;
            v77[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v365, (uint64_t)&buf);
            v24 = __str;
LABEL_94:
            v68 = (void *)buf.__r_.__value_.__r.__words[0];
            if (buf.__r_.__value_.__r.__words[0])
              goto LABEL_95;
            goto LABEL_96;
          }
          if (v40 >= v334)
          {
            v78 = operator new(0x18uLL);
            v24 = __str;
            buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v78 + 3);
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v78 + 3);
            *v78 = 3;
            v78[1] = v34;
            v78[2] = v18;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
            std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](&v365, (uint64_t)&buf);
            if (buf.__r_.__value_.__r.__words[0])
              operator delete(buf.__r_.__value_.__l.__data_);
LABEL_53:
            v25 = 1;
            goto LABEL_97;
          }
          v25 = 0;
          goto LABEL_122;
        }
        if (v21 <= (int)v39)
          goto LABEL_96;
        if (v40 < v21)
          goto LABEL_53;
        v54 = v366;
        v56 = *((_QWORD *)v366 - 3);
        v55 = (char *)*((_QWORD *)v366 - 2);
        v57 = ((unint64_t)&v55[-v56] >> 3) - 1;
        if ((int)v57 <= 1)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v57;
            _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_ERROR, "Invalid position for merging: %d", (uint8_t *)&buf, 8u);
          }
          Diagnostics::log(3, "Invalid position for merging: %d", v59, v57);
          v54 = v366;
          v56 = *((_QWORD *)v366 - 3);
          v55 = (char *)*((_QWORD *)v366 - 2);
        }
        v61 = (uint64_t)(v54 - 8);
        v60 = *((_QWORD *)v54 - 1);
        v62 = (char *)(v56 + 8 * (int)v57);
        if ((unint64_t)v55 >= v60)
        {
          v73 = ((uint64_t)&v55[-v56] >> 3) + 1;
          if (v73 >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v74 = v60 - v56;
          if (v74 >> 2 > v73)
            v73 = v74 >> 2;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v73;
          v375 = (uint64_t *)(v54 - 8);
          if (v75)
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v61, v75);
          else
            v76 = 0;
          v79 = 8 * (int)v57;
          v80 = v79 >> 3;
          v81 = (unint64_t *)&v76[8 * (v79 >> 3)];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v81;
          v374 = &v76[8 * v75];
          if (v79 >> 3 == v75)
          {
            if (v79 < 1)
            {
              if ((_DWORD)v57)
                v83 = v79 >> 2;
              else
                v83 = 1;
              v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v61, v83);
              v81 = (unint64_t *)&v84[8 * (v83 >> 2)];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
              v374 = &v84[8 * v85];
              if (v76)
                operator delete(v76);
            }
            else
            {
              if (v80 >= -1)
                v82 = v80 + 1;
              else
                v82 = v80 + 2;
              v81 -= v82 >> 1;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
            }
          }
          *v81 = v364;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v81 + 1);
          std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)v54 - 3, (uint64_t)&buf, v62);
          v24 = __str;
          if (buf.__r_.__value_.__r.__words[2] != buf.__r_.__value_.__l.__size_)
            buf.__r_.__value_.__r.__words[2] += (buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[2] + 7) & 0xFFFFFFFFFFFFFFF8;
          if (buf.__r_.__value_.__r.__words[0])
            operator delete(buf.__r_.__value_.__l.__data_);
          v25 = 0;
          v6 = v348;
        }
        else
        {
          if (v62 == v55)
          {
            v25 = 0;
            *(_QWORD *)v55 = v364;
            *((_QWORD *)v54 - 2) = v55 + 8;
LABEL_122:
            v24 = __str;
            goto LABEL_97;
          }
          v63 = v55 - 8;
          v64 = v55;
          v24 = __str;
          if ((unint64_t)v55 >= 8)
          {
            do
            {
              v65 = *(_QWORD *)v63;
              v63 += 8;
              *(_QWORD *)v64 = v65;
              v64 += 8;
            }
            while (v63 < v55);
          }
          *((_QWORD *)v54 - 2) = v64;
          if (v55 != v62 + 8)
            memmove(&v55[-8 * ((v55 - (v62 + 8)) >> 3)], v62, v55 - (v62 + 8));
          v66 = &v364;
          if (v62 <= (char *)&v364)
            v66 = &v364 + (*((_QWORD *)v54 - 2) > (unint64_t)&v364);
          v25 = 0;
          *(_QWORD *)v62 = *v66;
        }
LABEL_97:
        v22 = v364 + 1;
        v23 = v6 + 1;
        v69 = v6[1];
        v364 = v22;
        v70 = 0x6DB6DB6DB6DB6DB7 * ((v69 - *v6) >> 3);
      }
      while (v22 < v70);
      if (v25 && **((_QWORD **)v366 - 3) == 3)
      {
        v86 = (char *)(*((_QWORD *)v366 - 2) - 8);
        buf.__r_.__value_.__r.__words[0] = v70 - 1;
        std::vector<unsigned long>::insert((uint64_t)(v366 - 24), v86, &buf);
      }
LABEL_143:
      ++v18;
      v16 = *v346;
      if (v18 >= 0x6DB6DB6DB6DB6DB7 * ((v346[1] - *v346) >> 3))
      {
        v87 = v365;
        v88 = v366;
        if (v365 != v366)
        {
          v89 = 0;
          v328 = v366;
          do
          {
            v90 = *(uint64_t **)v87;
            v91 = *((_QWORD *)v87 + 1);
            v92 = v91 - *(_QWORD *)v87;
            if (v92 <= 8)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v93 = *v90;
            v94 = v90[1];
            v95 = v94 + v89;
            if (*v90 == 3)
            {
              v113 = *(_QWORD *)(v91 - 8);
              v114 = *v346;
              if (0x6DB6DB6DB6DB6DB7 * ((v346[1] - *v346) >> 3) <= v113)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v115 = (std::string *)*v348;
              v116 = 0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3);
              if (v116 <= v94)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v117 = v90[((uint64_t)v92 >> 3) - 2];
              if (v116 <= v117)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v353 = v348;
              v354 = v349;
              if (v349)
              {
                v118 = (unint64_t *)&v349->__shared_owners_;
                do
                  v119 = __ldxr(v118);
                while (__stxr(v119 + 1, v118));
              }
              if (v95)
              {
                if (0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3) <= (unint64_t)(v95 - 1))
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v120 = 0;
                v121 = (unsigned __int8 *)(*v348 + 31);
                do
                {
                  if ((char)v121[24] < 0)
                    v122 = *(_QWORD *)(v121 + 9);
                  else
                    LODWORD(v122) = v121[24];
                  if ((char)*v121 < 0)
                    v123 = *(_QWORD *)(v121 - 15);
                  else
                    LODWORD(v123) = *v121;
                  v120 = v120 + v122 - v123;
                  v121 += 56;
                  --v95;
                }
                while (v95);
              }
              else
              {
                v120 = 0;
              }
              __strb = v115;
              if (v349)
              {
                v160 = (unint64_t *)&v349->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  v162 = v89;
                  v163 = v88;
                  v164 = v117;
                  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                  std::__shared_weak_count::__release_weak(v349);
                  v117 = v164;
                  v88 = v163;
                  v89 = v162;
                  v115 = __strb;
                }
              }
              v351 = v348;
              v352 = v349;
              if (v349)
              {
                v165 = (unint64_t *)&v349->__shared_owners_;
                do
                  v166 = __ldxr(v165);
                while (__stxr(v166 + 1, v165));
              }
              if (*((_QWORD *)v87 + 1) - *(_QWORD *)v87 <= 8uLL)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v167 = *(_QWORD *)(*((_QWORD *)v87 + 1) - 16) + v89;
              if (v167)
              {
                if (0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3) <= (unint64_t)(v167 - 1))
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v168 = 0;
                v169 = (unsigned __int8 *)(*v348 + 31);
                do
                {
                  if ((char)v169[24] < 0)
                    v170 = *(_QWORD *)(v169 + 9);
                  else
                    LODWORD(v170) = v169[24];
                  if ((char)*v169 < 0)
                    v171 = *(_QWORD *)(v169 - 15);
                  else
                    LODWORD(v171) = *v169;
                  v168 = v168 + v170 - v171;
                  v169 += 56;
                  --v167;
                }
                while (v167);
              }
              else
              {
                v168 = 0;
              }
              v345 = v89;
              if (v349)
              {
                v214 = (unint64_t *)&v349->__shared_owners_;
                do
                  v215 = __ldaxr(v214);
                while (__stlxr(v215 - 1, v214));
                if (!v215)
                {
                  v216 = v88;
                  v217 = v117;
                  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                  std::__shared_weak_count::__release_weak(v349);
                  v117 = v217;
                  v88 = v216;
                  v115 = __strb;
                }
              }
              v338 = v114;
              v218 = (int *)(v114 + 56 * v113);
              v219 = (int *)((char *)v115 + 56 * v117);
              v220 = *v218;
              v221 = *v218 + v120;
              v222 = *v219;
              v223 = v219[1];
              v333 = (int *)((char *)v115 + 56 * v94);
              v224 = *v333;
              if (v221 <= *v333)
              {
                v237 = *v219;
                v224 = v221;
              }
              else
              {
                v323 = HIDWORD(v115->__r_.__value_.__r.__words[7 * v117]);
                v325 = *v219;
                v327 = v218;
                v330 = v117;
                v225 = std::string::basic_string(&buf, (const std::string *)&v115->__r_.__value_.__r.__words[7 * v94 + 1], 0, v221 - *v333, (std::allocator<char> *)v369);
                v226 = v113;
                v227 = v338 + 56 * v113;
                v230 = *(const std::string::value_type **)(v227 + 8);
                v229 = v227 + 8;
                v228 = v230;
                v231 = *(char *)(v229 + 23);
                if (v231 >= 0)
                  v232 = (const std::string::value_type *)v229;
                else
                  v232 = v228;
                if (v231 >= 0)
                  v233 = *(unsigned __int8 *)(v229 + 23);
                else
                  v233 = *(_QWORD *)(v229 + 8);
                v234 = std::string::append(v225, v232, v233);
                v235 = v234->__r_.__value_.__r.__words[0];
                v370.__r_.__value_.__r.__words[0] = v234->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v234->__r_.__value_.__r.__words[1] + 7);
                v236 = HIBYTE(v234->__r_.__value_.__r.__words[2]);
                v234->__r_.__value_.__l.__size_ = 0;
                v234->__r_.__value_.__r.__words[2] = 0;
                v234->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(v229 + 23) < 0)
                  operator delete(*(void **)v229);
                *(_QWORD *)v229 = v235;
                *(_QWORD *)(v229 + 8) = v370.__r_.__value_.__r.__words[0];
                *(_QWORD *)(v229 + 15) = *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7);
                *(_BYTE *)(v229 + 23) = v236;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                v117 = v330;
                v220 = *v333;
                v237 = *v219;
                v218 = v327;
                v88 = v328;
                v113 = v226;
                v115 = __strb;
                v223 = v323;
                v222 = v325;
              }
              v238 = v223 + v222;
              v239 = v237 - v168;
              size = (std::string::size_type)v115 + 56 * v117;
              v240 = (const std::string *)(size + 8);
              LODWORD(size) = *(char *)(size + 31);
              if ((size & 0x80000000) != 0)
              {
                size = v240->__r_.__value_.__l.__size_;
                v246 = size + v239;
                v243 = *(int *)(v338 + 56 * v113 + 4) + (uint64_t)*v218;
                if (v246 > v243)
                  goto LABEL_324;
              }
              else
              {
                LODWORD(size) = size;
                v242 = size + v239;
                v243 = *(int *)(v338 + 56 * v113 + 4) + (uint64_t)*v218;
                if (v242 > v243)
                {
LABEL_324:
                  std::string::basic_string(&buf, v240, v168 - v237 + (int)v243, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v370);
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_buf = &buf;
                  else
                    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v245 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                  else
                    v245 = buf.__r_.__value_.__l.__size_;
                  std::string::append((std::string *)(v338 + 56 * v113 + 8), (const std::string::value_type *)p_buf, v245);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  goto LABEL_334;
                }
              }
              v238 = v238 + v168 + v243 - (v237 + size);
LABEL_334:
              std::string::basic_string(&buf, &v350, v224, v238 - v224, (std::allocator<char> *)&v370);
              v247 = __strb;
              v89 = v345;
              v248 = (char *)__strb + 56 * v94;
              v249 = v248 + 32;
              if (v248[55] < 0)
              {
                operator delete(*(void **)v249);
                v247 = __strb;
              }
              v250 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *((_QWORD *)v249 + 2) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v249 = v250;
              if (v249[23] < 0)
                v251 = *((_QWORD *)v249 + 1);
              else
                LODWORD(v251) = v249[23];
              v252 = (char *)v247 + 56 * v94;
              *((_DWORD *)v252 + 1) = v251;
              std::string::operator=((std::string *)(v252 + 8), (const std::string *)(v338 + 56 * v113 + 8));
              *v333 = v220;
              v253 = *(uint64_t **)v87;
              v254 = *((_QWORD *)v87 + 1) - *(_QWORD *)v87;
              if ((unint64_t)v254 >= 0x19)
              {
                v255 = *v348 + 56 * v253[2];
                v256 = *v348 + 56 * *(uint64_t *)((char *)v253 + v254 - 16) + 56;
                if (v255 != v256)
                {
                  v257 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Alignment::ReplChunk *,Alignment::ReplChunk *,Alignment::ReplChunk *>(v256, v348[1], v255);
                  for (i = v348[1]; i != v257; std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](i))
                    i -= 56;
                  v348[1] = v257;
                  v254 = *((_QWORD *)v87 + 1) - *(_QWORD *)v87;
                }
                v89 = v345 - (v254 >> 3) + 3;
              }
              goto LABEL_422;
            }
            if (v93 == 2)
            {
              if (v92 <= 0x10)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v105 = v90[2];
              v106 = *v346;
              if (0x6DB6DB6DB6DB6DB7 * ((v346[1] - *v346) >> 3) <= v105)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v356 = v348;
              v357 = v349;
              if (v349)
              {
                v107 = (unint64_t *)&v349->__shared_owners_;
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              if (v95)
              {
                if (0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3) <= (unint64_t)(v95 - 1))
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v109 = 0;
                v110 = (unsigned __int8 *)(*v348 + 31);
                do
                {
                  if ((char)v110[24] < 0)
                    v111 = *(_QWORD *)(v110 + 9);
                  else
                    LODWORD(v111) = v110[24];
                  if ((char)*v110 < 0)
                    v112 = *(_QWORD *)(v110 - 15);
                  else
                    LODWORD(v112) = *v110;
                  v109 = v109 + v111 - v112;
                  v110 += 56;
                  --v95;
                }
                while (v95);
              }
              else
              {
                v109 = 0;
              }
              if (v349)
              {
                v127 = (unint64_t *)&v349->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  v129 = v105;
                  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                  std::__shared_weak_count::__release_weak(v349);
                  v105 = v129;
                }
              }
              if (*((_QWORD *)v87 + 1) - *(_QWORD *)v87 <= 8uLL)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v130 = *(_QWORD *)(*(_QWORD *)v87 + 8);
              v131 = *v348;
              if (0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3) <= v130)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v132 = (int *)(v131 + 56 * v130);
              v133 = *((unsigned __int8 *)v132 + 31);
              if (*((char *)v132 + 31) < 0)
                v134 = *((_QWORD *)v132 + 2);
              else
                v134 = *((unsigned __int8 *)v132 + 31);
              v172 = (int *)(v106 + 56 * v105);
              v173 = *v172;
              v174 = v173 + v109;
              v175 = *v132;
              v176 = v134 + v175 - v109;
              __strc = (std::string *)(v132 + 2);
              v344 = v89;
              if ((int)v175 <= (int)v173 + v109)
              {
                v195 = *(int *)(v106 + 56 * v105 + 4);
                if (v176 >= v195 + v173)
                {
                  v268 = v105;
                  if ((v133 & 0x80) != 0)
                    v133 = *((_QWORD *)v132 + 2);
                  v269 = std::string::basic_string(&v370, (const std::string *)(v132 + 2), 0, v174 - (int)v175, (std::allocator<char> *)&v368);
                  v270 = v106 + 56 * v268;
                  v273 = *(const std::string::value_type **)(v270 + 8);
                  v271 = v270 + 8;
                  v272 = v273;
                  v274 = *(char *)(v271 + 23);
                  if (v274 >= 0)
                    v275 = (const std::string::value_type *)v271;
                  else
                    v275 = v272;
                  if (v274 >= 0)
                    v276 = *(unsigned __int8 *)(v271 + 23);
                  else
                    v276 = *(_QWORD *)(v271 + 8);
                  v277 = std::string::append(v269, v275, v276);
                  v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
                  buf.__r_.__value_.__r.__words[2] = v277->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v278;
                  v277->__r_.__value_.__l.__size_ = 0;
                  v277->__r_.__value_.__r.__words[2] = 0;
                  v277->__r_.__value_.__r.__words[0] = 0;
                  std::string::basic_string(&v355, __strc, v173 - v176 + v195 + v133, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v368);
                  if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v279 = &v355;
                  else
                    v279 = (std::string *)v355.__r_.__value_.__r.__words[0];
                  if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v280 = HIBYTE(v355.__r_.__value_.__r.__words[2]);
                  else
                    v280 = v355.__r_.__value_.__l.__size_;
                  v281 = std::string::append(&buf, (const std::string::value_type *)v279, v280);
                  v89 = v344;
                  v282 = v281->__r_.__value_.__r.__words[0];
                  *(_QWORD *)v369 = v281->__r_.__value_.__l.__size_;
                  *(_QWORD *)&v369[7] = *(std::string::size_type *)((char *)&v281->__r_.__value_.__r.__words[1] + 7);
                  v283 = HIBYTE(v281->__r_.__value_.__r.__words[2]);
                  v281->__r_.__value_.__l.__size_ = 0;
                  v281->__r_.__value_.__r.__words[2] = 0;
                  v281->__r_.__value_.__r.__words[0] = 0;
                  v284 = __strc;
                  if (SHIBYTE(__strc->__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__strc->__r_.__value_.__l.__data_);
                    v284 = __strc;
                  }
                  v284->__r_.__value_.__r.__words[0] = v282;
                  v284->__r_.__value_.__l.__size_ = *(_QWORD *)v369;
                  *(std::string::size_type *)((char *)&v284->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v369[7];
                  *((_BYTE *)&v284->__r_.__value_.__s + 23) = v283;
                  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v355.__r_.__value_.__l.__data_);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v370.__r_.__value_.__l.__data_);
                  goto LABEL_422;
                }
                v337 = *(_QWORD *)(*(_QWORD *)v87 + 8);
                v332 = *v348;
                v196 = (_DWORD *)(v131 + 56 * v130);
                if ((v133 & 0x80) != 0)
                  v133 = *((_QWORD *)v132 + 2);
                v89 = v344;
                v197 = v105;
                std::string::basic_string(&buf, (const std::string *)(v106 + 56 * v105 + 32), v175 - v174 + v133, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v370);
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v198 = &buf;
                else
                  v198 = (std::string *)buf.__r_.__value_.__r.__words[0];
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v199 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                else
                  v199 = buf.__r_.__value_.__l.__size_;
                std::string::append((std::string *)(v332 + 56 * v337 + 32), (const std::string::value_type *)v198, v199);
                v200 = __strc;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  v200 = __strc;
                }
                v201 = std::string::basic_string(&buf, v200, 0, *v172 + v109 - *v196, (std::allocator<char> *)v369);
                v202 = v106 + 56 * v197;
                v205 = *(const std::string::value_type **)(v202 + 8);
                v203 = v202 + 8;
                v204 = v205;
                v206 = *(char *)(v203 + 23);
                if (v206 >= 0)
                  v207 = (const std::string::value_type *)v203;
                else
                  v207 = v204;
                if (v206 >= 0)
                  v208 = *(unsigned __int8 *)(v203 + 23);
                else
                  v208 = *(_QWORD *)(v203 + 8);
                v209 = std::string::append(v201, v207, v208);
                v210 = v209->__r_.__value_.__r.__words[0];
                v370.__r_.__value_.__r.__words[0] = v209->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v209->__r_.__value_.__r.__words[1] + 7);
                v211 = HIBYTE(v209->__r_.__value_.__r.__words[2]);
                v209->__r_.__value_.__l.__size_ = 0;
                v209->__r_.__value_.__r.__words[2] = 0;
                v209->__r_.__value_.__r.__words[0] = 0;
                v212 = __strc;
                if (SHIBYTE(__strc->__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__strc->__r_.__value_.__l.__data_);
                  v212 = __strc;
                }
                v212->__r_.__value_.__r.__words[0] = v210;
                v212->__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)&v212->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7);
                *((_BYTE *)&v212->__r_.__value_.__s + 23) = v211;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                if (*(char *)(v332 + 56 * v337 + 55) < 0)
                  v213 = *(_QWORD *)(v332 + 56 * v337 + 40);
                else
                  LODWORD(v213) = *(unsigned __int8 *)(v332 + 56 * v337 + 55);
                v297 = v332 + 56 * v337;
              }
              else
              {
                v326 = (_DWORD *)(v131 + 56 * v130);
                v329 = v105;
                v331 = *v348;
                v336 = *(_QWORD *)(*(_QWORD *)v87 + 8);
                v177 = (const std::string *)(v106 + 56 * v105 + 32);
                v324 = v173 + v109;
                v178 = std::string::basic_string(&buf, v177, 0, (int)v175 - v174, (std::allocator<char> *)v369);
                v179 = v331 + 56 * v336;
                v182 = *(const std::string::value_type **)(v179 + 32);
                v181 = v179 + 32;
                v180 = v182;
                v183 = *(char *)(v181 + 23);
                v184 = (uint64_t *)(v181 + 8);
                if (v183 >= 0)
                  v185 = (const std::string::value_type *)v181;
                else
                  v185 = v180;
                if (v183 >= 0)
                  v186 = *(unsigned __int8 *)(v181 + 23);
                else
                  v186 = *(_QWORD *)(v181 + 8);
                v187 = std::string::append(v178, v185, v186);
                v188 = v187->__r_.__value_.__r.__words[0];
                v370.__r_.__value_.__r.__words[0] = v187->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v187->__r_.__value_.__r.__words[1] + 7);
                v189 = HIBYTE(v187->__r_.__value_.__r.__words[2]);
                v187->__r_.__value_.__l.__size_ = 0;
                v187->__r_.__value_.__r.__words[2] = 0;
                v187->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(v181 + 23) < 0)
                  operator delete(*(void **)v181);
                *(_QWORD *)v181 = v188;
                *v184 = v370.__r_.__value_.__r.__words[0];
                *(_QWORD *)(v181 + 15) = *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7);
                *(_BYTE *)(v181 + 23) = v189;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
                v190 = *v172;
                v88 = v328;
                v191 = *(int *)(v106 + 56 * v329 + 4);
                if (v176 >= v191 + v190)
                {
                  v285 = std::string::basic_string(&buf, __strc, (int)v190 + v109 + (int)v191 - *v326, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v369);
                  v286 = v106 + 56 * v329;
                  v289 = *(const std::string::value_type **)(v286 + 8);
                  v287 = v286 + 8;
                  v288 = v289;
                  v290 = *(char *)(v287 + 23);
                  if (v290 >= 0)
                    v291 = (const std::string::value_type *)v287;
                  else
                    v291 = v288;
                  if (v290 >= 0)
                    v292 = *(unsigned __int8 *)(v287 + 23);
                  else
                    v292 = *(_QWORD *)(v287 + 8);
                  v293 = std::string::insert(v285, 0, v291, v292);
                  v294 = v293->__r_.__value_.__r.__words[0];
                  v370.__r_.__value_.__r.__words[0] = v293->__r_.__value_.__l.__size_;
                  *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v293->__r_.__value_.__r.__words[1] + 7);
                  v295 = HIBYTE(v293->__r_.__value_.__r.__words[2]);
                  v293->__r_.__value_.__l.__size_ = 0;
                  v293->__r_.__value_.__r.__words[2] = 0;
                  v293->__r_.__value_.__r.__words[0] = 0;
                  v296 = __strc;
                  if (SHIBYTE(__strc->__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__strc->__r_.__value_.__l.__data_);
                    v296 = __strc;
                  }
                  v296->__r_.__value_.__r.__words[0] = v294;
                  v296->__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)&v296->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v370.__r_.__value_.__r.__words + 7);
                  *((_BYTE *)&v296->__r_.__value_.__s + 23) = v295;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf.__r_.__value_.__l.__data_);
                }
                else
                {
                  std::string::basic_string(&buf, v177, v176 - v190, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v370);
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v192 = &buf;
                  else
                    v192 = (std::string *)buf.__r_.__value_.__r.__words[0];
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v193 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                  else
                    v193 = buf.__r_.__value_.__l.__size_;
                  std::string::append((std::string *)v181, (const std::string::value_type *)v192, v193);
                  v194 = __strc;
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(buf.__r_.__value_.__l.__data_);
                    v194 = __strc;
                  }
                  std::string::operator=(v194, (const std::string *)(v106 + 56 * v329 + 8));
                }
                *v326 = v324;
                if (*(char *)(v181 + 23) < 0)
                  v213 = *v184;
                else
                  LODWORD(v213) = *(unsigned __int8 *)(v181 + 23);
                v89 = v344;
                v297 = v331 + 56 * v336;
              }
              *(_DWORD *)(v297 + 4) = v213;
            }
            else if (v93 == 1)
            {
              if (v92 <= 0x10)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v96 = v90[2];
              v97 = *v346;
              if (0x6DB6DB6DB6DB6DB7 * ((v346[1] - *v346) >> 3) <= v96)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v358 = v348;
              v359 = v349;
              if (v349)
              {
                v98 = (unint64_t *)&v349->__shared_owners_;
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              if (v95)
              {
                if (0x6DB6DB6DB6DB6DB7 * ((v348[1] - *v348) >> 3) <= (unint64_t)(v95 - 1))
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v100 = 0;
                v101 = (unsigned __int8 *)(*v348 + 31);
                v102 = v94 + v89;
                do
                {
                  if ((char)v101[24] < 0)
                    v103 = *(_QWORD *)(v101 + 9);
                  else
                    LODWORD(v103) = v101[24];
                  if ((char)*v101 < 0)
                    v104 = *(_QWORD *)(v101 - 15);
                  else
                    LODWORD(v104) = *v101;
                  v100 = v100 + v103 - v104;
                  v101 += 56;
                  --v102;
                }
                while (v102);
              }
              else
              {
                v100 = 0;
              }
              v135 = (std::string *)(v97 + 56 * v96);
              LODWORD(v135->__r_.__value_.__l.__data_) += v100;
              if (v349)
              {
                v136 = (unint64_t *)&v349->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                  std::__shared_weak_count::__release_weak(v349);
                }
              }
              v138 = *v348;
              v139 = v348[1];
              v140 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v139 - *v348) >> 3);
              if (v95 == v140)
              {
                v141 = v348[2];
                if (v139 >= v141)
                {
                  v259 = v95 + 1;
                  if ((unint64_t)(v95 + 1) > 0x492492492492492)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v260 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v141 - v138) >> 3);
                  if (2 * v260 > v259)
                    v259 = 2 * v260;
                  if (v260 >= 0x249249249249249)
                    v261 = 0x492492492492492;
                  else
                    v261 = v259;
                  v375 = v348 + 2;
                  if (v261)
                    v261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v261);
                  else
                    v262 = 0;
                  buf.__r_.__value_.__r.__words[0] = v261;
                  buf.__r_.__value_.__l.__size_ = v261 + 56 * v95;
                  buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
                  v374 = (char *)(v261 + 56 * v262);
                  std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(buf.__r_.__value_.__l.__size_, (uint64_t)v135);
                  buf.__r_.__value_.__r.__words[2] += 56;
                  std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(v348, &buf);
                  v142 = v348[1];
                  std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&buf);
                }
                else
                {
                  std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v348[1], (uint64_t)v135);
                  v142 = v139 + 56;
                  v348[1] = v139 + 56;
                }
                v348[1] = v142;
              }
              else
              {
                __stra = v135;
                v143 = v138 + 56 * v95;
                v144 = v348[2];
                if (v139 >= v144)
                {
                  v263 = v140 + 1;
                  if (v263 > 0x492492492492492)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v264 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v144 - v138) >> 3);
                  if (2 * v264 > v263)
                    v263 = 2 * v264;
                  if (v264 >= 0x249249249249249)
                    v265 = 0x492492492492492;
                  else
                    v265 = v263;
                  v372 = v348 + 2;
                  if (v265)
                  {
                    v267 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v265);
                  }
                  else
                  {
                    v267 = 0;
                    v266 = 0;
                  }
                  v298 = (uint64_t)&v267[56 * v95];
                  v370.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
                  v370.__r_.__value_.__l.__size_ = v298;
                  v370.__r_.__value_.__r.__words[2] = v298;
                  v371 = &v267[56 * v266];
                  if (v95 == v266)
                  {
                    if (v95 < 1)
                    {
                      if (v95)
                        v299 = 2 * v95;
                      else
                        v299 = 1;
                      v375 = v372;
                      v300 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v299);
                      v302 = v370.__r_.__value_.__l.__size_;
                      if (v370.__r_.__value_.__r.__words[2] == v370.__r_.__value_.__l.__size_)
                      {
                        v307 = vdupq_n_s64(v370.__r_.__value_.__l.__size_);
                        v303 = (std::string::size_type)&v300[56 * (v299 >> 2)];
                      }
                      else
                      {
                        v303 = (std::string::size_type)&v300[56 * (v299 >> 2)
                                                           + v370.__r_.__value_.__r.__words[2]
                                                           - v370.__r_.__value_.__l.__size_];
                        v304 = &v300[56 * (v299 >> 2)];
                        do
                        {
                          *(_QWORD *)v304 = *(_QWORD *)v302;
                          v305 = *(_OWORD *)(v302 + 8);
                          *((_QWORD *)v304 + 3) = *(_QWORD *)(v302 + 24);
                          *(_OWORD *)(v304 + 8) = v305;
                          *(_QWORD *)(v302 + 16) = 0;
                          *(_QWORD *)(v302 + 24) = 0;
                          *(_QWORD *)(v302 + 8) = 0;
                          v306 = *(_OWORD *)(v302 + 32);
                          *((_QWORD *)v304 + 6) = *(_QWORD *)(v302 + 48);
                          *((_OWORD *)v304 + 2) = v306;
                          *(_QWORD *)(v302 + 40) = 0;
                          *(_QWORD *)(v302 + 48) = 0;
                          *(_QWORD *)(v302 + 32) = 0;
                          v304 += 56;
                          v302 += 56;
                        }
                        while (v304 != (char *)v303);
                        v307 = *(int64x2_t *)&v370.__r_.__value_.__r.__words[1];
                      }
                      v308 = v370.__r_.__value_.__r.__words[0];
                      v309 = v371;
                      v370.__r_.__value_.__r.__words[0] = (std::string::size_type)v300;
                      v370.__r_.__value_.__l.__size_ = (std::string::size_type)&v300[56 * (v299 >> 2)];
                      *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v307;
                      v370.__r_.__value_.__r.__words[2] = v303;
                      v371 = &v300[56 * v301];
                      buf.__r_.__value_.__r.__words[0] = v308;
                      v374 = v309;
                      std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&buf);
                      v298 = v370.__r_.__value_.__r.__words[2];
                    }
                    else
                    {
                      v298 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Alignment::ReplChunk *,Alignment::ReplChunk *,Alignment::ReplChunk *>(v298, v298, v298 - 56 * ((v95 + 1) >> 1));
                      v370.__r_.__value_.__l.__size_ -= 56 * ((v95 + 1) >> 1);
                      v370.__r_.__value_.__r.__words[2] = v298;
                    }
                  }
                  std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v298, (uint64_t)__stra);
                  v370.__r_.__value_.__r.__words[2] += 56;
                  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>((uint64_t)(v348 + 2), v143, v143, *v348, *v348, v370.__r_.__value_.__l.__size_, v370.__r_.__value_.__l.__size_);
                  v370.__r_.__value_.__l.__size_ = v310;
                  v311 = v348[1];
                  v312 = v370.__r_.__value_.__r.__words[2];
                  while (v143 != v311)
                  {
                    *(_QWORD *)v312 = *(_QWORD *)v143;
                    v313 = *(_OWORD *)(v143 + 8);
                    *(_QWORD *)(v312 + 24) = *(_QWORD *)(v143 + 24);
                    *(_OWORD *)(v312 + 8) = v313;
                    *(_QWORD *)(v143 + 16) = 0;
                    *(_QWORD *)(v143 + 24) = 0;
                    *(_QWORD *)(v143 + 8) = 0;
                    v314 = *(_OWORD *)(v143 + 32);
                    *(_QWORD *)(v312 + 48) = *(_QWORD *)(v143 + 48);
                    *(_OWORD *)(v312 + 32) = v314;
                    *(_QWORD *)(v143 + 40) = 0;
                    *(_QWORD *)(v143 + 48) = 0;
                    *(_QWORD *)(v143 + 32) = 0;
                    v312 += 56;
                    v143 += 56;
                  }
                  v370.__r_.__value_.__r.__words[2] = v312;
                  v315 = *v348;
                  *v348 = v370.__r_.__value_.__l.__size_;
                  v370.__r_.__value_.__l.__size_ = v315;
                  v316 = v348[1];
                  v348[1] = v370.__r_.__value_.__r.__words[2];
                  v317 = v370.__r_.__value_.__l.__size_;
                  v370.__r_.__value_.__r.__words[2] = v316;
                  v318 = v348[2];
                  v348[2] = (uint64_t)v371;
                  v371 = (char *)v318;
                  v370.__r_.__value_.__r.__words[0] = v317;
                  std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)&v370);
                }
                else if (v143 == v139)
                {
                  std::allocator<Alignment::ReplChunk>::construct[abi:ne180100]<Alignment::ReplChunk,Alignment::ReplChunk const&>(v139, (uint64_t)__stra);
                  v348[1] = v139 + 56;
                }
                else
                {
                  v335 = *v348;
                  v343 = v89;
                  v145 = v139 - 56;
                  v146 = v348[1];
                  v147 = v139 - 56;
                  if (v139 >= 0x38)
                  {
                    do
                    {
                      *(_QWORD *)v146 = *(_QWORD *)v147;
                      v148 = *(_OWORD *)(v147 + 8);
                      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v147 + 24);
                      *(_OWORD *)(v146 + 8) = v148;
                      *(_QWORD *)(v147 + 16) = 0;
                      *(_QWORD *)(v147 + 24) = 0;
                      *(_QWORD *)(v147 + 8) = 0;
                      v149 = *(_OWORD *)(v147 + 32);
                      *(_QWORD *)(v146 + 48) = *(_QWORD *)(v147 + 48);
                      *(_OWORD *)(v146 + 32) = v149;
                      *(_QWORD *)(v147 + 40) = 0;
                      *(_QWORD *)(v147 + 48) = 0;
                      *(_QWORD *)(v147 + 32) = 0;
                      v146 += 56;
                      v147 += 56;
                    }
                    while (v147 < v139);
                  }
                  v348[1] = v146;
                  if (v139 != v143 + 56)
                  {
                    v150 = 0;
                    do
                    {
                      v151 = v145 + v150;
                      v152 = v139 + v150;
                      *(_QWORD *)(v139 + v150 - 56) = *(_QWORD *)(v145 + v150 - 56);
                      v153 = (void **)(v139 + v150 - 48);
                      if (*(char *)(v139 + v150 - 25) < 0)
                        operator delete(*v153);
                      v154 = *(_OWORD *)(v151 - 48);
                      *(_QWORD *)(v139 + v150 - 32) = *(_QWORD *)(v151 - 32);
                      *(_OWORD *)v153 = v154;
                      *(_BYTE *)(v151 - 25) = 0;
                      *(_BYTE *)(v151 - 48) = 0;
                      v155 = (void **)(v152 - 24);
                      if (*(char *)(v152 - 1) < 0)
                        operator delete(*v155);
                      v156 = v145 + v150;
                      v157 = *(_OWORD *)(v145 + v150 - 24);
                      *(_QWORD *)(v152 - 8) = *(_QWORD *)(v145 + v150 - 8);
                      *(_OWORD *)v155 = v157;
                      *(_BYTE *)(v156 - 1) = 0;
                      *(_BYTE *)(v156 - 24) = 0;
                      v150 -= 56;
                    }
                    while (-8 * ((uint64_t)(v139 - (v143 + 56)) >> 3) != v150);
                  }
                  v158 = __stra;
                  if (v143 <= (unint64_t)__stra)
                    v158 = (std::string *)((char *)__stra + 56 * (v348[1] > (unint64_t)__stra));
                  v159 = v158;
                  *(_QWORD *)v143 = v158->__r_.__value_.__r.__words[0];
                  std::string::operator=((std::string *)(v335 + 56 * v95 + 8), (const std::string *)&v158->__r_.__value_.__r.__words[1]);
                  v88 = v328;
                  v89 = v343;
                  std::string::operator=((std::string *)(v335 + 56 * v95 + 32), (std::string *)((char *)v159 + 32));
                }
              }
              ++v89;
            }
            else
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v124 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                v126 = **(_QWORD **)v87;
                LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v126;
                _os_log_impl(&dword_1DE3F6000, v124, OS_LOG_TYPE_ERROR, "Unknown operation in alignment, ignore: %lu", (uint8_t *)&buf, 0xCu);
              }
              Diagnostics::log(3, "Unknown operation in alignment, ignore: %lu", v125, **(_QWORD **)v87);
            }
LABEL_422:
            v87 += 24;
          }
          while (v87 != v88);
        }
LABEL_423:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
        std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (v347)
        {
          v319 = (unint64_t *)&v347->__shared_owners_;
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (!v320)
          {
            ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
            std::__shared_weak_count::__release_weak(v347);
          }
        }
        if (v349)
        {
          v321 = (unint64_t *)&v349->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
          }
        }
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v350.__r_.__value_.__l.__data_);
        return;
      }
    }
  }
}

void sub_1DEA08014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)(v48 + 8) = v47;
  a37 = (void *)(v49 - 232);
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *align_default@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1EA9366B8;
  v2[4] = 0;
  v2[5] = 0;
  a1[1] = v2;
  v2[3] = 0;
  result = v2 + 3;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9366B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9366B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<Alignment::ReplChunk>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void align_full_2_half(const std::string *a1@<X0>, const std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  const std::string *v11;
  const std::string *i;
  std::string::size_type v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const std::string *v26;
  unint64_t v27;
  const std::string *v28;
  uint64_t v29;
  const std::string *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  const std::string *v37;
  unint64_t v38;
  const std::string *v39;
  uint64_t v40;
  const std::string *v41;
  uint64_t v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  std::string::size_type v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  NSObject *v70;
  const char *v71;
  std::string::size_type v72;
  int v73;
  int v74;
  std::string::size_type v75;
  int v76;
  int v77;
  _QWORD *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint8_t buf[8];
  std::string v82;
  std::string __p;
  std::string v84;
  std::string v85;
  _QWORD v86[6];

  v6 = operator new(0x30uLL);
  v6[3] = 0;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA9366B8;
  v6[4] = 0;
  v6[5] = 0;
  v79 = v6 + 3;
  *a3 = v6 + 3;
  a3[1] = v6;
  v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = a1->__r_.__value_.__l.__size_;
  if (size != v9)
    goto LABEL_16;
  if (v10 >= 0)
    v11 = a1;
  else
    v11 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(a2->__r_.__value_.__l.__data_, v11, a2->__r_.__value_.__l.__size_) && size != 0)
    {
LABEL_24:
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v80 = v6;
      v78 = v6 + 5;
      while (1)
      {
        v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((v18 & 0x80u) != 0)
          v18 = a2->__r_.__value_.__l.__size_;
        if (v18 <= v16)
          return;
        v19 = *std::string::at(a1, v14);
        if ((v19 & 0x80000000) == 0 || (v19 + 62) <= 0x32u)
          break;
        v20 = 1;
LABEL_57:
        v31 = *std::string::at(a2, v16);
        if ((v31 & 0x80000000) == 0 || (v31 + 62) <= 0x32u)
        {
          v33 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            LODWORD(v34) = v16 + 1;
            v35 = a2->__r_.__value_.__s.__data_[v16];
            if ((v35 + 11) >= 0xCDu)
            {
              v36 = (int)v34;
              if (v33 != (int)v34)
              {
                v37 = a2;
                goto LABEL_67;
              }
            }
            goto LABEL_83;
          }
          v37 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          LODWORD(v34) = v16 + 1;
          v35 = *(unsigned __int8 *)(a2->__r_.__value_.__r.__words[0] + v16);
          if ((v35 + 62) >= 0x33u || a2->__r_.__value_.__l.__size_ == (int)v34)
            goto LABEL_83;
          v36 = (int)v34;
LABEL_67:
          v38 = v37->__r_.__value_.__s.__data_[v36];
          if ((v35 & 0xF0) == 0xE0)
          {
            if (((a00000000000000[v35 & 0xF] >> (v38 >> 5)) & 1) == 0)
              goto LABEL_83;
            v34 = v16 + 2;
            if ((v33 & 0x80) != 0)
            {
              if (a2->__r_.__value_.__l.__size_ == v34)
                goto LABEL_83;
              v39 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            }
            else
            {
              v39 = a2;
              if (v33 == v34)
                goto LABEL_83;
            }
            v76 = v39->__r_.__value_.__s.__data_[v34];
            v77 = v16 + 3;
          }
          else
          {
            if (v35 <= 0xDF)
            {
              if ((char)v38 < -64)
                LODWORD(v34) = v16 + 2;
              goto LABEL_83;
            }
            if (((byte_1DED166DF[v38 >> 4] >> (v35 & 7)) & 1) == 0)
            {
LABEL_83:
              v32 = v34 - v16;
              goto LABEL_84;
            }
            v34 = v16 + 2;
            if ((v33 & 0x80) != 0)
            {
              v75 = a2->__r_.__value_.__l.__size_;
              if (v75 == v34)
                goto LABEL_83;
              v41 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              if (*(char *)(a2->__r_.__value_.__r.__words[0] + v34) > -65)
                goto LABEL_83;
              LODWORD(v34) = v16 + 3;
              if (v75 == v16 + 3)
                goto LABEL_83;
              v40 = (int)v34;
            }
            else
            {
              if (v33 == v34)
                goto LABEL_83;
              if (a2->__r_.__value_.__s.__data_[v34] >= -64)
                goto LABEL_83;
              LODWORD(v34) = v16 + 3;
              if (v33 == v16 + 3)
                goto LABEL_83;
              v40 = (int)v34;
              v41 = a2;
            }
            v76 = v41->__r_.__value_.__s.__data_[v40];
            v77 = v16 + 4;
          }
          if (v76 < -64)
            LODWORD(v34) = v77;
          goto LABEL_83;
        }
        v32 = 1;
LABEL_84:
        std::string::basic_string(&v85, a1, v14, v20, (std::allocator<char> *)buf);
        std::string::basic_string(&v84, a2, v16, v32, (std::allocator<char> *)buf);
        if (v20 != v32)
          goto LABEL_104;
        v42 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        else
          v43 = v85.__r_.__value_.__l.__size_;
        v44 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = v84.__r_.__value_.__l.__size_;
        if (v43 != v44)
          goto LABEL_104;
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v85.__r_.__value_.__l.__data_, v45, v85.__r_.__value_.__l.__size_))
            goto LABEL_104;
        }
        else if (*((_BYTE *)&v85.__r_.__value_.__s + 23))
        {
          v46 = &v85;
          v47 = v45;
          v48 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          while (v46->__r_.__value_.__s.__data_[0] == v47->__r_.__value_.__s.__data_[0])
          {
            v46 = (std::string *)((char *)v46 + 1);
            v47 = (std::string *)((char *)v47 + 1);
            if (!--v48)
            {
              v49 = &v85;
              while (v49->__r_.__value_.__s.__data_[0] == v45->__r_.__value_.__s.__data_[0])
              {
                v49 = (std::string *)((char *)v49 + 1);
                v45 = (std::string *)((char *)v45 + 1);
                if (!--v42)
                  goto LABEL_134;
              }
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1DE3F6000, v70, OS_LOG_TYPE_ERROR, "unexpected case for full-half transliterator", buf, 2u);
              }
              Diagnostics::log(3, "unexpected case for full-half transliterator", v71);
              goto LABEL_142;
            }
          }
LABEL_104:
          if ((v15 & 1) != 0)
          {
            v50 = v80[4];
            *(_DWORD *)(v50 - 52) += v20;
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = &v85;
            else
              v51 = (std::string *)v85.__r_.__value_.__r.__words[0];
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            else
              v52 = v85.__r_.__value_.__l.__size_;
            std::string::append((std::string *)(v50 - 24), (const std::string::value_type *)v51, v52);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = &v84;
            else
              v53 = (std::string *)v84.__r_.__value_.__r.__words[0];
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v54 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            else
              v54 = v84.__r_.__value_.__l.__size_;
            std::string::append((std::string *)(v50 - 48), (const std::string::value_type *)v53, v54);
          }
          else
          {
            *(_DWORD *)buf = v17;
            *(_DWORD *)&buf[4] = v20;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v82, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
            else
              v82 = v84;
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__p, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
            else
              __p = v85;
            v55 = v80[4];
            v56 = v80[5];
            if (v55 >= v56)
            {
              v59 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v55 - *v79) >> 3);
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) > 0x492492492492492)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v56 - *v79) >> 3);
              if (2 * v61 > v60)
                v60 = 2 * v61;
              if (v61 >= 0x249249249249249)
                v62 = 0x492492492492492;
              else
                v62 = v60;
              v86[4] = v78;
              if (v62)
                v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v62);
              else
                v63 = 0;
              v64 = v62 + 56 * v59;
              v86[0] = v62;
              v86[1] = v64;
              v86[3] = v62 + 56 * v63;
              *(_QWORD *)v64 = *(_QWORD *)buf;
              v65 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
              *(_QWORD *)(v64 + 24) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
              *(_OWORD *)(v64 + 8) = v65;
              memset(&v82, 0, sizeof(v82));
              v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v64 + 48) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)(v64 + 32) = v66;
              memset(&__p, 0, sizeof(__p));
              v86[2] = v64 + 56;
              std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(v79, v86);
              v67 = v80[4];
              std::__split_buffer<Alignment::ReplChunk>::~__split_buffer((uint64_t)v86);
              v68 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v80[4] = v67;
              if (v68 < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              *(_QWORD *)v55 = *(_QWORD *)buf;
              v57 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
              *(_QWORD *)(v55 + 24) = *((_QWORD *)&v82.__r_.__value_.__l + 2);
              *(_OWORD *)(v55 + 8) = v57;
              memset(&v82, 0, sizeof(v82));
              v58 = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)(v55 + 32) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v55 + 48) = v58;
              memset(&__p, 0, sizeof(__p));
              v80[4] = v55 + 56;
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
          }
          v17 += v20;
          v16 += v32;
          v15 = 1;
          goto LABEL_142;
        }
LABEL_134:
        v17 += v20;
        v16 += v20;
        if ((v15 & 1) != 0)
          v15 = 0;
LABEL_142:
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v14 = v17;
        v69 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v69 & 0x80u) != 0)
          v69 = a1->__r_.__value_.__l.__size_;
        if (v69 <= v17)
          return;
      }
      v21 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = (const std::string *)a1->__r_.__value_.__r.__words[0];
        LODWORD(v22) = v17 + 1;
        v24 = *(unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + v14);
        if ((v24 + 62) >= 0x33u || a1->__r_.__value_.__l.__size_ == (int)v22)
          goto LABEL_56;
        v23 = (int)v22;
      }
      else
      {
        LODWORD(v22) = v17 + 1;
        v23 = v17 + 1;
        v24 = a1->__r_.__value_.__s.__data_[v14];
        if ((v24 + 11) < 0xCDu || v21 == (int)v22)
          goto LABEL_56;
        v26 = a1;
      }
      v27 = v26->__r_.__value_.__s.__data_[v23];
      if ((v24 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v24 & 0xF] >> (v27 >> 5)) & 1) != 0)
        {
          v22 = v17 + 2;
          if ((v21 & 0x80) != 0)
          {
            if (a1->__r_.__value_.__l.__size_ != v22)
            {
              v28 = (const std::string *)a1->__r_.__value_.__r.__words[0];
LABEL_161:
              v73 = v28->__r_.__value_.__s.__data_[v22];
              v74 = v17 + 3;
LABEL_162:
              if (v73 < -64)
                LODWORD(v22) = v74;
            }
          }
          else
          {
            v28 = a1;
            if (v21 != v22)
              goto LABEL_161;
          }
        }
      }
      else
      {
        if (v24 <= 0xDF)
        {
          if ((char)v27 < -64)
            LODWORD(v22) = v17 + 2;
          goto LABEL_56;
        }
        if (((byte_1DED166DF[v27 >> 4] >> (v24 & 7)) & 1) != 0)
        {
          v22 = v17 + 2;
          if ((v21 & 0x80) != 0)
          {
            v72 = a1->__r_.__value_.__l.__size_;
            if (v72 == v22)
              goto LABEL_56;
            v30 = (const std::string *)a1->__r_.__value_.__r.__words[0];
            if (*(char *)(a1->__r_.__value_.__r.__words[0] + v22) > -65)
              goto LABEL_56;
            LODWORD(v22) = v17 + 3;
            if (v72 == v17 + 3)
              goto LABEL_56;
            v29 = (int)v22;
          }
          else
          {
            if (v21 == v22)
              goto LABEL_56;
            if (a1->__r_.__value_.__s.__data_[v22] >= -64)
              goto LABEL_56;
            LODWORD(v22) = v17 + 3;
            if (v21 == v17 + 3)
              goto LABEL_56;
            v29 = (int)v22;
            v30 = a1;
          }
          v73 = v30->__r_.__value_.__s.__data_[v29];
          v74 = v17 + 4;
          goto LABEL_162;
        }
      }
LABEL_56:
      v20 = v22 - v17;
      goto LABEL_57;
    }
  }
  else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    for (i = a2;
          i->__r_.__value_.__s.__data_[0] == v11->__r_.__value_.__s.__data_[0];
          i = (const std::string *)((char *)i + 1))
    {
      v11 = (const std::string *)((char *)v11 + 1);
      if (!--v7)
        return;
    }
LABEL_16:
    if (!v9)
      return;
    goto LABEL_24;
  }
}

void sub_1DEA08C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  fst::FstHeader::~FstHeader(&a15);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void std::vector<Alignment::ReplChunk>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<Alignment::ReplChunk>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<Alignment::ReplChunk>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Alignment::ReplChunk>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>,std::reverse_iterator<Alignment::ReplChunk*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __int128 v9;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_QWORD *)(a3 - 56);
    a3 -= 56;
    *(_QWORD *)(a7 - 56) = v8;
    a7 -= 56;
    v9 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a7 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    result = *(__n128 *)(a3 + 32);
    *(_QWORD *)(a7 + 48) = *(_QWORD *)(a3 + 48);
    *(__n128 *)(a7 + 32) = result;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::__map_value_compare<void **,std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>,std::less<void **>,true>,std::allocator<std::__value_type<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>::__emplace_unique_key_args<void **,std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>(uint64_t *result, unint64_t a2, _OWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x30uLL);
    v9[2] = *a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::map<void **,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&),std::less<void **>,std::allocator<std::pair<void ** const,std::shared_ptr<std::vector<Alignment::ReplChunk>> (*)(std::string const&,std::string const&)>>>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<std::vector<void **>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9369C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<void **>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9369C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<void **>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void TransliteratePersistentModule::~TransliteratePersistentModule(void **this)
{
  *this = &off_1EA921B10;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921B10;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<TransliterateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TransliterateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TransliterateImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void fr_matching_threads(void)
{
  NSObject *v0;
  const char *v1;
  uint8_t buf[4];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v3 = fr_matching_threads(void)::matching_threads;
      _os_log_impl(&dword_1DE3F6000, v0, OS_LOG_TYPE_DEBUG, ">>>> Matching Threads: %u", buf, 8u);
    }
    Diagnostics::log(7, ">>>> Matching Threads: %u", v1, fr_matching_threads(void)::matching_threads);
  }
}

void fr_group_buffer_count(void)
{
  NSObject *v0;
  const char *v1;
  uint8_t buf[4];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v3 = fr_group_buffer_count(void)::group_buf_cnt;
      _os_log_impl(&dword_1DE3F6000, v0, OS_LOG_TYPE_DEBUG, ">>>> Group Buffer Count: %u", buf, 8u);
    }
    Diagnostics::log(7, ">>>> Group Buffer Count: %u", v1, fr_group_buffer_count(void)::group_buf_cnt);
  }
}

void InternalSettings::get_string_for_key(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  id v8;

  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.voiceservices"));
  objc_msgSend(v4, "stringForKey:", v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    v7 = (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
  else
    v7 = &byte_1DEBD87CE;
  std::string::basic_string[abi:ne180100]<0>(a1, v7);

}

void sub_1DEA09290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t InternalSettings::get_BOOL_for_key(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.voiceservices"));
  v4 = objc_msgSend(v3, "BOOLForKey:", v2);

  return v4;
}

void sub_1DEA09338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TokenAttributes::create_nested(_QWORD *a1, uint64_t *a2, int a3)
{
  _QWORD *v6;

  std::allocate_shared[abi:ne180100]<TokenAttributes,std::allocator<TokenAttributes>,TokenAttributes&,void>(a1, *a2);
  v6 = (_QWORD *)*a1;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)*a1, *a2, a2[1]);
  *((_DWORD *)v6 + 8) = a3;
  MEMORY[0x1DF0ECA80](v6 + 9, &byte_1DEBD87CE);
  *((_DWORD *)v6 + 54) = 0;
  *((_DWORD *)v6 + 56) = 0;
  *((_DWORD *)v6 + 58) = 0;
  *((_DWORD *)v6 + 60) = 0;
  if (*((char *)v6 + 271) < 0)
  {
    *(_BYTE *)v6[31] = 0;
    v6[32] = 0;
  }
  else
  {
    *((_BYTE *)v6 + 248) = 0;
    *((_BYTE *)v6 + 271) = 0;
  }
  *((float *)v6 + 68) = nanf(&byte_1DEBD87CE);
}

void sub_1DEA093EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void UnitFeature::UnitFeature(UnitFeature *this)
{
  __int128 v2;
  _OWORD *v3;
  int32x4_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)((char *)this + 28) = v2;
  *(_OWORD *)((char *)this + 44) = v2;
  *(_QWORD *)((char *)this + 60) = 0x8000000080000000;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_OWORD *)this + 9) = v2;
  *((_OWORD *)this + 10) = v2;
  *((_OWORD *)this + 11) = v2;
  *((_OWORD *)this + 12) = v2;
  *((_QWORD *)this + 26) = 0x8000000080000000;
  *((_QWORD *)this + 27) = 0;
  v3 = (_OWORD *)((char *)this + 216);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 30, "*");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 33, "*");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 36, "*");
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  v4 = vdupq_n_s32(0x7F7FFFFFu);
  v3[15] = v4;
  v3[16] = v4;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  v3[23] = v4;
  *((_DWORD *)this + 150) = 0x7FFFFFFF;
}

void sub_1DEA0950C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 287) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 263) < 0)
    operator delete(*v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 143) < 0)
    operator delete(*(void **)(v2 + 120));
  if (*(char *)(v2 + 119) < 0)
    operator delete(*(void **)(v2 + 96));
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>(uint64_t a1, unsigned __int8 *a2, const void **a3, const void ***a4)
{
  int v7;
  unsigned __int8 *v8;
  nlohmann::detail::exception *exception;
  unint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v20;

  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = *a2;
    if (v10 > 9)
      v11 = "number";
    else
      v11 = off_1EA94C758[v10];
    std::string::basic_string[abi:ne180100]<0>(&v14, v11);
    v12 = std::string::insert(&v14, 0, "cannot use value() with ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18 = v12->__r_.__value_.__r.__words[2];
    v17 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v17, exception);
  }
  *(_QWORD *)&v17 = a2;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
  *((_QWORD *)&v17 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), a3);
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v14.__r_.__value_.__r.__words[2] = 0;
  v15 = 0;
  v16 = 0x8000000000000000;
  v7 = *a2;
  if (v7 == 2)
  {
    v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v14.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v16 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v17, (unsigned __int8 **)&v14))
  {
    std::set<std::string>::set[abi:ne180100](a1, a4);
  }
  else
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>(a1, v8);
  }
}

void sub_1DEA09704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t *v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1DEA097F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  result = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  if (!*result)
  {
    v7 = (uint64_t **)result;
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    return std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v7, v8);
  }
  return result;
}

void GrammaticalNumberRules::~GrammaticalNumberRules(GrammaticalNumberRules *this)
{
  if (*((_QWORD *)this + 12))
    uplrules_close();
  if (*((_QWORD *)this + 13))
    unum_close();
  UTFNumberFormatter::~UTFNumberFormatter((GrammaticalNumberRules *)((char *)this + 112));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<std::string>::destroy((uint64_t)this + 48, *((char **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

void GrammaticalNumberRules::update_number(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(_QWORD);
  int v8;
  std::basic_string<char16_t> *v9;
  uint64_t v10;
  char v11;
  std::basic_string<char16_t> *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  const char *v17;
  std::basic_string<char16_t> *v18;
  std::basic_string<char16_t>::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t j;
  unint64_t v29;
  int32_t v30;
  unint64_t v31;
  std::string *v32;
  std::string::const_iterator v33;
  std::string::size_type v34;
  char v35;
  std::string *v36;
  std::string::size_type size;
  NSObject *v38;
  std::basic_string<char16_t> *v39;
  uint64_t v40;
  const char *v41;
  std::basic_string<char16_t> *v42;
  void *v43;
  std::string v44;
  char v45;
  _BYTE buf[22];
  UChar v47[32];
  std::basic_string<char16_t> v48;
  std::basic_string<char16_t> *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  memset(&v44, 0, sizeof(v44));
  v48.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA92E280;
  v7 = MEMORY[0x1E0DE5A30];
  v48.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)MEMORY[0x1E0DE5A30];
  v49 = &v48;
  v8 = UTFString::for_all<std::string>(a3, &v48);
  v9 = v49;
  if (v49 == &v48)
  {
    v10 = 4;
    v9 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(v9->__r_.__value_.__r.__words[0] + 8 * v10))();
LABEL_6:
  if (!v8)
    goto LABEL_60;
  v48.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&off_1EA92E280;
  v48.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)v7;
  v49 = &v48;
  v11 = UTFString::for_all<std::string>(a4, &v48);
  v12 = v49;
  if (v49 == &v48)
  {
    v13 = 4;
    v12 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(v12->__r_.__value_.__r.__words[0] + 8 * v13))();
LABEL_12:
  if ((v11 & 1) == 0)
  {
LABEL_60:
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    goto LABEL_103;
  }
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (!v14)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      v31 = *(_QWORD *)(a3 + 8);
      if (v31 > 0x10)
      {
LABEL_65:
        v32 = std::string::basic_string((std::string *)&v48, (const std::string *)a3, v31 - 15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v45);
        if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v48;
        else
          v33.__i_ = (std::__wrap_iter<const char *>::iterator_type)v48.__r_.__value_.__r.__words[0];
        std::string::insert(v32, v33, 57);
        *(_QWORD *)buf = v48.__r_.__value_.__l.__size_;
        v34 = v48.__r_.__value_.__r.__words[0];
        *(_QWORD *)&buf[7] = *(std::basic_string<char16_t>::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7);
        v35 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
        memset(&v48, 0, sizeof(v48));
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v44.__r_.__value_.__l.__data_);
          v44.__r_.__value_.__r.__words[0] = v34;
          v44.__r_.__value_.__l.__size_ = *(_QWORD *)buf;
          *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&buf[7];
          *((_BYTE *)&v44.__r_.__value_.__s + 23) = v35;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
        }
        else
        {
          v44.__r_.__value_.__r.__words[0] = v34;
          v44.__r_.__value_.__l.__size_ = *(_QWORD *)buf;
          *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&buf[7];
          *((_BYTE *)&v44.__r_.__value_.__s + 23) = v35;
        }
        goto LABEL_73;
      }
    }
    else
    {
      v31 = *(unsigned __int8 *)(a3 + 23);
      if (v31 > 0x10)
        goto LABEL_65;
    }
    std::string::operator=(&v44, (const std::string *)a3);
LABEL_73:
    *(_DWORD *)buf = 0;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v44;
    else
      v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    UTFString::to_utf16(&v48, (const char *)v36, size);
    unum_parseInt64();
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    goto LABEL_81;
  }
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const char *)a3;
  else
    v16 = *(const char **)a3;
  if (v15 >= 0)
    v17 = (const char *)a4;
  else
    v17 = *(const char **)a4;
  StringFormatter::StringFormatter((StringFormatter *)&v48, "%s.%s", v16, v17);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v48;
  else
    v18 = (std::basic_string<char16_t> *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    v19 = v48.__r_.__value_.__l.__size_;
  MEMORY[0x1DF0ECA8C](&v44, v18, v19);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  *(_DWORD *)buf = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v44;
  else
    v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v21 = v44.__r_.__value_.__l.__size_;
  UTFString::to_utf16(&v48, (const char *)v20, v21);
  unum_parseDouble();
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v22 = *(unsigned __int8 *)(a4 + 23);
  if ((v22 & 0x80u) == 0)
    v23 = (const char *)a4;
  else
    v23 = *(const char **)a4;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a4 + 8);
  if (v23[v22 - 1] == 48)
  {
    memset(&v48, 0, sizeof(v48));
    v24 = *(unsigned __int8 *)(a3 + 23);
    if ((v24 & 0x80u) != 0)
      v24 = *(_QWORD *)(a3 + 8);
    if (v24)
    {
      for (i = 0; i < v26; ++i)
      {
        std::basic_string<char16_t>::push_back(&v48, 48);
        v26 = *(unsigned __int8 *)(a3 + 23);
        if ((v26 & 0x80u) != 0)
          v26 = *(_QWORD *)(a3 + 8);
      }
    }
    std::basic_string<char16_t>::push_back(&v48, 46);
    v27 = *(unsigned __int8 *)(a4 + 23);
    if ((v27 & 0x80u) != 0)
      v27 = *(_QWORD *)(a4 + 8);
    if (v27)
    {
      for (j = 0; j < v29; ++j)
      {
        std::basic_string<char16_t>::push_back(&v48, 48);
        v29 = *(unsigned __int8 *)(a4 + 23);
        if ((v29 & 0x80u) != 0)
          v29 = *(_QWORD *)(a4 + 8);
      }
    }
    unum_applyPattern();
    v30 = uplrules_selectWithFormat();
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    goto LABEL_82;
  }
LABEL_81:
  v30 = uplrules_select();
LABEL_82:
  UTFString::to_utf8((std::string *)&v48, v47, v30);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::basic_string<char16_t> *)a2 = v48;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext((std::string *)&v48, (uint64_t)&v44);
    v39 = (v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v48
        : (std::basic_string<char16_t> *)v48.__r_.__value_.__r.__words[0];
    v40 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v39;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v40;
    _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s [%s]", buf, 0x16u);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext((std::string *)&v48, (uint64_t)&v44);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v48;
  else
    v42 = (std::basic_string<char16_t> *)v48.__r_.__value_.__r.__words[0];
  if (*(char *)(a2 + 23) >= 0)
    v43 = (void *)a2;
  else
    v43 = *(void **)a2;
  Diagnostics::log(7, "GrammaticalNumber %s [%s]", v41, v42, v43);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
LABEL_103:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1DEA09F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GrammaticalNumberRules::update_word(uint64_t a1, const void **a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  std::string *v8;
  std::string::size_type v9;
  const char *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  char v23;
  std::string *p_buf;
  unsigned __int8 *v25;
  NSObject *v26;
  std::string *v27;
  std::string *v28;
  uint64_t *v29;
  const char *v30;
  std::string *p_p;
  std::string *v32;
  uint64_t *v33;
  std::string v34;
  std::string v35;
  std::string __p;
  uint64_t *v37;
  std::string buf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = *((char *)a2 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    v35 = *(std::string *)a2;
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)*a2, (std::string::size_type)a2[1]);
  v6 = *((char *)a2 + 23);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_4:
    if (!(_BYTE)v6)
      goto LABEL_83;
    goto LABEL_5;
  }
  if (!a2[1])
    goto LABEL_83;
LABEL_5:
  if (!std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1 + 48, (const void **)a3))
  {
    v13 = *(_QWORD *)(a1 + 80);
    if (!v13)
      goto LABEL_80;
    v14 = a1 + 80;
    do
    {
      v15 = std::less<std::string>::operator()[abi:ne180100](a1 + 88, (const void **)(v13 + 32), (const void **)a3);
      v16 = (uint64_t *)(v13 + 8);
      if (!v15)
      {
        v16 = (uint64_t *)v13;
        v14 = v13;
      }
      v13 = *v16;
    }
    while (*v16);
    if (v14 == a1 + 80
      || std::less<std::string>::operator()[abi:ne180100](a1 + 88, (const void **)a3, (const void **)(v14 + 32)))
    {
      goto LABEL_80;
    }
    v17 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &__p, a2);
    if (!v17)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    v18 = *(_QWORD *)(v14 + 56) + 24 * *(int *)(v17 + 56);
    if (*(char *)(v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
    }
    else
    {
      v19 = *(_OWORD *)v18;
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v19;
    }
    v20 = *(unsigned __int8 *)(a3 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    v23 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = buf.__r_.__value_.__l.__size_;
    if (v21 != size)
      goto LABEL_54;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, p_buf, *(_QWORD *)(a3 + 8)))
      {
LABEL_54:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          Censor::global_plaintext(&v34, a3);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v34;
          else
            v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
          v28 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = (std::string *)buf.__r_.__value_.__r.__words[0];
          if (*((char *)a2 + 23) >= 0)
            v29 = (uint64_t *)a2;
          else
            v29 = (uint64_t *)*a2;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
          v37 = v29;
          _os_log_impl(&dword_1DE3F6000, v26, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s -> %s [%s]", (uint8_t *)&__p, 0x20u);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
        }
        Censor::global_plaintext(&__p, a3);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v32 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v32 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if (*((char *)a2 + 23) >= 0)
          v33 = (uint64_t *)a2;
        else
          v33 = (uint64_t *)*a2;
        Diagnostics::log(7, "GrammaticalNumber %s -> %s [%s]", v30, p_p, v32, v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::operator=((std::string *)a3, &buf);
        v23 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      v25 = (unsigned __int8 *)a3;
      while (*v25 == p_buf->__r_.__value_.__s.__data_[0])
      {
        ++v25;
        p_buf = (std::string *)((char *)p_buf + 1);
        if (!--v20)
          goto LABEL_78;
      }
      goto LABEL_54;
    }
LABEL_78:
    if (v23 < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_80:
    if (*((char *)a2 + 23) < 0)
    {
      *(_BYTE *)*a2 = 0;
      a2[1] = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *((_BYTE *)a2 + 23) = 0;
    }
    goto LABEL_83;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext(&__p, a3);
    v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v9 = *((char *)a2 + 23) >= 0 ? (std::string::size_type)a2 : (std::string::size_type)*a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
    _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_DEBUG, "GrammaticalNumber %s [%s]", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &__p;
  else
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (*((char *)a2 + 23) >= 0)
    v12 = (uint64_t *)a2;
  else
    v12 = (uint64_t *)*a2;
  Diagnostics::log(7, "GrammaticalNumber %s [%s]", v10, v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_83:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_1DEA0A4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 73) < 0)
    operator delete(*(void **)(v20 - 96));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FrontendEnvironment::~FrontendEnvironment(FrontendEnvironment *this)
{
  std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*((_QWORD **)this + 21));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 19, *((unsigned __int8 *)this + 144));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void FrontendEnvironment::load_configuration(FrontendEnvironment *this)
{
  int v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  char has_sane_pipeline;
  uint64_t *v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  _BOOL4 is_fe_module;
  _BOOL4 v11;
  size_t size;
  char *p_p;
  std::string *v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  std::string *v24;
  uint64_t *v25;
  int v26;
  std::string::size_type v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  void **v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE v41[8];
  uint64_t *v42;
  void *__p;
  uint64_t *v44;
  unsigned __int8 v45;
  std::string __s;
  std::string v47;
  uint64_t v48;
  unint64_t v49;
  std::string v50;
  uint64_t v51;
  unint64_t v52;
  std::string v53;
  _BYTE v54[8];
  std::string::size_type *v55;
  _BYTE v56[8];
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 72))(&v39, *((_QWORD *)this + 12), 1717790311, 2);
  v2 = *((unsigned __int8 *)this + 144);
  *((_BYTE *)this + 144) = v39;
  LOBYTE(v39) = v2;
  v3 = (uint64_t *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v40;
  v40 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v2);
  if (*((_BYTE *)this + 144))
    goto LABEL_61;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 72))(&v58, *((_QWORD *)this + 12), 1734567527, 2);
  v4 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v56, (uint64_t)&v58);
  has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v57, v56[0]);
  if ((has_sane_pipeline & 1) == 0)
  {
    v37 = 0;
    v38 = 0;
    goto LABEL_60;
  }
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v58, "pipeline");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v54, (uint64_t)v6);
  if (!v54[0])
  {
    v7 = 0;
    v37 = 0;
    v38 = 0;
    goto LABEL_59;
  }
  memset(&v53, 0, sizeof(v53));
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
  v51 = 0;
  v52 = 0x8000000000000000;
  if (v54[0] == 2)
  {
    v50.__r_.__value_.__r.__words[2] = *v55;
  }
  else if (v54[0] == 1)
  {
    v50.__r_.__value_.__l.__size_ = *v55;
  }
  else
  {
    v52 = 0;
  }
  while (1)
  {
    v48 = 0;
    *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = 0uLL;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v49 = 0x8000000000000000;
    if (v54[0] == 2)
    {
      v47.__r_.__value_.__r.__words[2] = v55[1];
    }
    else if (v54[0] == 1)
    {
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)(v55 + 1);
    }
    else
    {
      v49 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v50, (unsigned __int8 **)&v47))
    {
      break;
    }
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v50);
    v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v8, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v9, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__s, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    else
      __s = v47;
    is_fe_module = GryphonPipelineFactory::is_fe_module(&__s);
    v11 = is_fe_module;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__s.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_47;
    }
    else if (!is_fe_module)
    {
      goto LABEL_47;
    }
    std::string::erase(&v47, 0, 3uLL);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
    if ((v45 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (size)
    {
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v47;
      else
        v14 = (std::string *)v47.__r_.__value_.__r.__words[0];
      memmove(p_p, v14, size);
    }
    *(_WORD *)&p_p[size] = 44;
    if ((v45 & 0x80u) == 0)
      v15 = (const std::string::value_type *)&__p;
    else
      v15 = (const std::string::value_type *)__p;
    if ((v45 & 0x80u) == 0)
      v16 = v45;
    else
      v16 = (std::string::size_type)v44;
    std::string::append(&v53, v15, v16);
    if ((char)v45 < 0)
      operator delete(__p);
    v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v50);
    v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, (uint64_t)v18);
    if ((_BYTE)__p)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v41, (uint64_t)&__p);
      v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)&v58, (const void **)&v47.__r_.__value_.__l.__data_);
      v20 = *(unsigned __int8 *)v19;
      *(_BYTE *)v19 = v41[0];
      v41[0] = v20;
      v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v42;
      v42 = v21;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v20);
      v22 = __p;
    }
    else
    {
      v22 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v22);
LABEL_47:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v50);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v53.__r_.__value_.__r.__words[0] + v53.__r_.__value_.__l.__size_ - 1) == 44)
    {
      v23 = --v53.__r_.__value_.__l.__size_;
LABEL_55:
      v24->__r_.__value_.__s.__data_[v23] = 0;
    }
  }
  else if (v53.__r_.__value_.__s.__data_[HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1] == 44)
  {
    v23 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = (*((_BYTE *)&v53.__r_.__value_.__s + 23) - 1) & 0x7F;
    v24 = &v53;
    goto LABEL_55;
  }
  v50.__r_.__value_.__l.__size_ = 0;
  v50.__r_.__value_.__s.__data_[0] = 3;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&v53);
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v58, "pipeline");
  v26 = *(unsigned __int8 *)v25;
  *(_BYTE *)v25 = v50.__r_.__value_.__s.__data_[0];
  v50.__r_.__value_.__s.__data_[0] = v26;
  v27 = v25[1];
  v25[1] = v50.__r_.__value_.__l.__size_;
  v50.__r_.__value_.__l.__size_ = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v50.__r_.__value_.__l.__size_, v26);
  v37 = v58;
  v38 = v59;
  LOBYTE(v58) = 0;
  v59 = 0;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  v7 = v54[0];
LABEL_59:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55, v7);
LABEL_60:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, v58);
  v28 = *((unsigned __int8 *)this + 144);
  *((_BYTE *)this + 144) = v37;
  v29 = (uint64_t *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v38;
  v38 = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, v28);
  if (*((_BYTE *)this + 144))
  {
LABEL_61:
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)this + 144, "locale");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v30, &v50);
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
    *(std::string *)this = v50;
    std::string::basic_string[abi:ne180100]<0>(&v47, "phoneme_encoding");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)this + 144, (const void **)&v47.__r_.__value_.__l.__data_, &v50);
    v31 = (void **)((char *)this + 24);
    if (*((char *)this + 47) < 0)
      operator delete(*v31);
    *(_OWORD *)v31 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 5) = *((_QWORD *)&v50.__r_.__value_.__l + 2);
    *((_BYTE *)&v50.__r_.__value_.__s + 23) = 0;
    v50.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v50, "rebuild");
    v47.__r_.__value_.__s.__data_[0] = 1;
    *((_BYTE *)this + 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)this + 144, (const void **)&v50.__r_.__value_.__l.__data_, (unsigned __int8 *)&v47);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v47, "multilingual");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)this + 144, (const void **)&v47.__r_.__value_.__l.__data_, &v50);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = v50.__r_.__value_.__l.__size_;
    if (v32)
    {
      UTFString::split(&v47, &v50, 0x2Cu, 0);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 72, (__int128 *)&v47);
      v33 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
      if (v47.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
LABEL_81:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    else
    {
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 72, (__int128 *)&v47);
      v33 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
      if (v47.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v36);
        while (__stlxr(v35 - 1, v36));
        goto LABEL_81;
      }
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_1DEA0AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t **v40;
  uint64_t v41;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v40, __p);
  if (*(char *)(v41 - 145) < 0)
    operator delete(*(void **)(v41 - 168));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a10, *(unsigned __int8 *)(v41 - 144));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v41 - 104), *(unsigned __int8 *)(v41 - 112));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  uint64_t *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = (std::string *)(v10 + 4);
    v12 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v14 = (uint64_t *)**a1;
    v15 = v10;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

void sub_1DEA0AE60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EnvironmentBroker::~EnvironmentBroker(EnvironmentBroker *this)
{
  FrontendEnvironment **v2;
  FrontendEnvironment **v3;

  **((_QWORD **)this + 3) = 0;
  v2 = (FrontendEnvironment **)*((_QWORD *)this + 3);
  v3 = (FrontendEnvironment **)*((_QWORD *)this + 4);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        FrontendEnvironment::~FrontendEnvironment(*v2);
        MEMORY[0x1DF0ED014]();
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (FrontendEnvironment **)*((_QWORD *)this + 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 1));
}

__int128 *EnvironmentBroker::get_environment(uint64_t **a1, __int128 *a2)
{
  __int128 *environment;
  uint64_t v5;
  __int128 *v7;

  environment = (__int128 *)EnvironmentBroker::find_environment((uint64_t)a1, (std::string::size_type)a2, 0);
  if (!environment)
  {
    environment = (__int128 *)*a1[3];
    v7 = environment;
    v5 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)environment, &v7)[7];
    v7 = a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, &v7)[7] = v5;
  }
  return environment;
}

char *EnvironmentBroker::find_environment(uint64_t a1, std::string::size_type a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t i;
  std::string::size_type v16;
  uint64_t v17;
  char *environment;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char **v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  std::string::size_type v42;
  std::string::size_type size;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  int v50;
  void *v52;
  int v53;
  std::string::size_type v54;
  std::string *v55;
  const void **v56;
  const void **v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  const char *v61;
  std::string *p_str;
  std::string *v63;
  char **v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::string __str;
  char v74[8];
  std::string::size_type *v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  std::string buf;
  uint64_t v82;
  unint64_t v83;
  char v84;
  std::string v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = a1 + 8;
    do
    {
      v9 = std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v7 + 32), (const void **)a2);
      v10 = (uint64_t *)(v7 + 8);
      if (!v9)
      {
        v10 = (uint64_t *)v7;
        v8 = v7;
      }
      v7 = *v10;
    }
    while (*v10);
    if (v8 != v6
      && !std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)a2, (const void **)(v8 + 32)))
    {
      return *(char **)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(v8 + 56));
    }
  }
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) == 0)
    v12 = (unsigned __int8 *)a2;
  else
    v12 = *(unsigned __int8 **)a2;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v13 = &v12[v11];
    v14 = v12;
    while (2)
    {
      for (i = 0; i != 2; ++i)
      {
        if (*v14 == asc_1DEC2FE74[i])
        {
          if (v14 != v13)
          {
            v16 = v14 - v12;
            if (v14 - v12 != -1)
            {
              v17 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 96);
              (*(void (**)(char **__return_ptr, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v17 + 64))(&v76, v17, a2, 2);
              if (v76)
              {
                environment = (char *)operator new();
                v19 = **(char ***)(a1 + 24);
                *(_OWORD *)environment = 0u;
                *((_OWORD *)environment + 1) = 0u;
                *((_OWORD *)environment + 2) = 0u;
                *((_OWORD *)environment + 3) = 0u;
                *((_OWORD *)environment + 4) = 0u;
                *((_QWORD *)environment + 10) = 0;
                *((_OWORD *)environment + 7) = 0u;
                *((_OWORD *)environment + 8) = 0u;
                *((_OWORD *)environment + 6) = 0u;
                environment[144] = 0;
                *((_QWORD *)environment + 21) = 0;
                *((_QWORD *)environment + 19) = 0;
                *((_QWORD *)environment + 20) = environment + 168;
                if (!v19)
                  v19 = environment;
                *((_QWORD *)environment + 22) = 0;
                *((_QWORD *)environment + 23) = v19;
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)environment + 12, (uint64_t)v76, (uint64_t)v77);
                FrontendEnvironment::load_configuration((FrontendEnvironment *)environment);
                v21 = *(_QWORD *)(a1 + 24);
                v20 = *(_QWORD *)(a1 + 32);
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)environment;
                std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)environment, (__int128 **)&buf)[7] = (v20 - v21) >> 3;
                v23 = *(_QWORD *)(a1 + 24);
                v22 = *(_QWORD *)(a1 + 32);
                buf.__r_.__value_.__r.__words[0] = a2;
                std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (__int128 **)&buf)[7] = (v22 - v23) >> 3;
                v25 = *(char ***)(a1 + 32);
                v24 = *(_QWORD *)(a1 + 40);
                if ((unint64_t)v25 >= v24)
                {
                  v35 = *(_QWORD *)(a1 + 24);
                  v36 = ((uint64_t)v25 - v35) >> 3;
                  if ((unint64_t)(v36 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v37 = v24 - v35;
                  v38 = v37 >> 2;
                  if (v37 >> 2 <= (unint64_t)(v36 + 1))
                    v38 = v36 + 1;
                  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v38;
                  if (v39)
                    v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v39);
                  else
                    v40 = 0;
                  v64 = (char **)(v39 + 8 * v36);
                  v65 = v39 + 8 * v40;
                  *v64 = environment;
                  v26 = v64 + 1;
                  v67 = *(char **)(a1 + 24);
                  v66 = *(char **)(a1 + 32);
                  if (v66 != v67)
                  {
                    do
                    {
                      v68 = (char *)*((_QWORD *)v66 - 1);
                      v66 -= 8;
                      *--v64 = v68;
                    }
                    while (v66 != v67);
                    v66 = *(char **)(a1 + 24);
                  }
                  *(_QWORD *)(a1 + 24) = v64;
                  *(_QWORD *)(a1 + 32) = v26;
                  *(_QWORD *)(a1 + 40) = v65;
                  if (v66)
                    operator delete(v66);
                }
                else
                {
                  *v25 = environment;
                  v26 = v25 + 1;
                }
                *(_QWORD *)(a1 + 32) = v26;
              }
              else if ((a3 & 1) != 0)
              {
                environment = 0;
              }
              else
              {
                std::string::basic_string(&buf, (const std::string *)a2, 0, v16, (std::allocator<char> *)&__str);
                environment = (char *)EnvironmentBroker::find_environment(a1, &buf, 0);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
              }
              v69 = (std::__shared_weak_count *)v77;
              if (v77)
              {
                v70 = (unint64_t *)(v77 + 1);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              return environment;
            }
          }
          goto LABEL_27;
        }
      }
      if (++v14 != v13)
        continue;
      break;
    }
  }
LABEL_27:
  v27 = *(uint64_t **)(a1 + 24);
  v28 = *v27;
  v29 = *(unsigned __int8 *)(*v27 + 144);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)(*v27 + 144);
  buf.__r_.__value_.__r.__words[2] = 0;
  v82 = 0;
  v83 = 0x8000000000000000;
  if (v29 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*(_QWORD *)(v28 + 152), "languages");
    v27 = *(uint64_t **)(a1 + 24);
  }
  else if (v29 == 2)
  {
    buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)(v28 + 152) + 8);
  }
  else
  {
    v83 = 1;
  }
  v30 = *v27;
  v31 = *(unsigned __int8 *)(v30 + 144);
  v76 = (char *)(v30 + 144);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0x8000000000000000;
  if (v31 == 2)
  {
    v78 = *(_QWORD *)(*(_QWORD *)(v30 + 152) + 8);
  }
  else if (v31 == 1)
  {
    v77 = (uint64_t *)(*(_QWORD *)(v30 + 152) + 8);
  }
  else
  {
    v80 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v76))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    return 0;
  }
  v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(**(_QWORD **)(a1 + 24) + 144, "languages");
  environment = v74;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, v34);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  v82 = 0;
  v83 = 0x8000000000000000;
  if (v74[0])
  {
    if (v74[0] == 2)
    {
      buf.__r_.__value_.__r.__words[2] = *v75;
      v76 = v74;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0x8000000000000000;
      v78 = v75[1];
      goto LABEL_62;
    }
    if (v74[0] == 1)
    {
      buf.__r_.__value_.__l.__size_ = *v75;
      v78 = 0;
      v79 = 0;
      v80 = 0x8000000000000000;
      v76 = v74;
      v77 = (uint64_t *)(v75 + 1);
      goto LABEL_62;
    }
    v83 = 0;
  }
  else
  {
    v83 = 1;
  }
  v76 = v74;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 1;
LABEL_62:
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v76))
  {
    v41 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v41, &__str);
    if (*(char *)(a2 + 23) >= 0)
      v42 = *(unsigned __int8 *)(a2 + 23);
    else
      v42 = *(_QWORD *)(a2 + 8);
    std::string::basic_string(&v85, &__str, 0, v42, (std::allocator<char> *)&v84);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      size = v85.__r_.__value_.__l.__size_;
    v44 = *(char *)(a2 + 23);
    v45 = *(unsigned __int8 *)(a2 + 23);
    v46 = *(_QWORD *)(a2 + 8);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a2 + 23);
    if (size != v46)
    {
      if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      goto LABEL_111;
    }
    if (v44 >= 0)
      v47 = (unsigned __int8 *)a2;
    else
      v47 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v52 = (void *)v85.__r_.__value_.__r.__words[0];
      v53 = memcmp(v85.__r_.__value_.__l.__data_, v47, v85.__r_.__value_.__l.__size_);
      operator delete(v52);
      if (v53)
        goto LABEL_111;
      v45 = *(unsigned __int8 *)(a2 + 23);
    }
    else if (*((_BYTE *)&v85.__r_.__value_.__s + 23))
    {
      v48 = 0;
      do
      {
        v49 = v85.__r_.__value_.__s.__data_[v48];
        v50 = v47[v48];
      }
      while (v49 == v50 && HIBYTE(v85.__r_.__value_.__r.__words[2]) - 1 != v48++);
      if (v49 != v50)
        goto LABEL_111;
    }
    v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = __str.__r_.__value_.__l.__size_;
    if ((v45 & 0x80) != 0)
      v45 = *(_QWORD *)(a2 + 8);
    if (v54 == v45
      || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v55 = &__str)
        : (v55 = (std::string *)__str.__r_.__value_.__r.__words[0]),
          memchr("-_", v55->__r_.__value_.__s.__data_[v45], 3uLL)))
    {
      v56 = (const void **)EnvironmentBroker::find_environment(a1, &__str, 1);
      v57 = v56;
      if (v56)
      {
        v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        v58 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v56, (__int128 **)&v85)[7];
        v85.__r_.__value_.__r.__words[0] = a2;
        v59 = 0;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)a2, (__int128 **)&v85)[7] = v58;
        environment = (char *)v57;
        goto LABEL_112;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        LODWORD(v85.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &__str;
      else
        v63 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
LABEL_111:
    v59 = 1;
LABEL_112:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (!v59)
      goto LABEL_117;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&buf);
  }
  environment = 0;
LABEL_117:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v75, v74[0]);
  return environment;
}

void sub_1DEA0B760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void ClassifySentenceImpl_fr::~ClassifySentenceImpl_fr(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t ClassifySentenceImpl_fr::clear(ClassifySentenceImpl_fr *this)
{
  uint64_t result;

  *((_WORD *)this + 52) = 0;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void ClassifySentenceImpl_fr::generate_tokens(ClassifySentenceImpl_fr *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  char *v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void *exception;
  uint64_t v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  void *__p[2];
  char v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52[3];
  uint64_t v53[3];
  uint64_t v54[3];
  uint64_t v55[3];
  uint64_t v56[3];
  uint64_t v57[3];
  uint64_t v58[3];
  uint64_t v59[3];
  uint64_t v60[3];
  uint64_t v61[3];
  uint64_t v62[3];
  uint64_t v63[3];
  uint64_t v64[3];
  uint64_t v65[3];
  uint64_t v66[3];
  uint64_t v67[3];
  uint64_t v68[3];
  _QWORD v69[4];

  v69[3] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "qui");
    std::string::basic_string[abi:ne180100]<0>(v52, "quoi");
    std::string::basic_string[abi:ne180100]<0>(v53, "quel");
    std::string::basic_string[abi:ne180100]<0>(v54, "quels");
    std::string::basic_string[abi:ne180100]<0>(v55, "quand");
    std::string::basic_string[abi:ne180100]<0>(v56, "où");
    std::string::basic_string[abi:ne180100]<0>(v57, "d'où");
    std::string::basic_string[abi:ne180100]<0>(v58, "pourquoi");
    std::string::basic_string[abi:ne180100]<0>(v59, "comment");
    std::string::basic_string[abi:ne180100]<0>(v60, "combien");
    std::string::basic_string[abi:ne180100]<0>(v61, "lequel");
    std::string::basic_string[abi:ne180100]<0>(v62, "lequels");
    std::string::basic_string[abi:ne180100]<0>(v63, "duquel");
    std::string::basic_string[abi:ne180100]<0>(v64, "duquels");
    std::string::basic_string[abi:ne180100]<0>(v65, "quelle");
    std::string::basic_string[abi:ne180100]<0>(v66, "quelles");
    std::string::basic_string[abi:ne180100]<0>(v67, "laquelle");
    std::string::basic_string[abi:ne180100]<0>(v68, "laquelles");
    std::string::basic_string[abi:ne180100]<0>(v69, "ou");
    std::set<std::string>::set[abi:ne180100]((uint64_t)__p, (const void **)&v49, 19);
    NeverDestructed<std::set<std::string>>::NeverDestructed<>(&ClassifySentenceImpl_fr::generate_tokens(void)::WH_WORDS, (const void ***)__p);
    std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
    v41 = 57;
    do
    {
      if (*((char *)&v49 + v41 * 8 - 1) < 0)
        operator delete(__p[v41]);
      v41 -= 3;
    }
    while (v41 * 8);
  }
  if (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v46, *((_QWORD *)this + 2), 0);
    v3 = v46;
    if (!(_QWORD)v46)
    {
      *((_BYTE *)this + 8) = 1;
      goto LABEL_74;
    }
    if ((_QWORD *)(v3 + 8) == v4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v49, "Token missing TokenBasicItem");
      MEMORY[0x1DF0EC99C](exception, &v49);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v5 = v4[5];
    v6 = *(_DWORD *)(v5 + 8);
    if (v6 != 1886809699)
    {
LABEL_26:
      if (v6 == 1952807028)
      {
        UTFString_Impl::to_lower((UTFString_Impl *)&v49, v5 + 32);
        if ((char)v51 < 0)
        {
          if (v50 != 3)
            goto LABEL_36;
          v17 = (unsigned __int16 *)v49;
        }
        else
        {
          if (v51 != 3)
            goto LABEL_36;
          v17 = (unsigned __int16 *)&v49;
        }
        v18 = *v17;
        v19 = *((unsigned __int8 *)v17 + 2);
        if (v18 == 29541 && v19 == 116)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&v44, *((_QWORD *)this + 2), 1);
          v27 = v44;
          if (v44)
          {
            if ((_QWORD *)(v27 + 8) != v28)
            {
              v29 = v28[5];
              if (*(_DWORD *)(v29 + 8) == 1952807028)
              {
                UTFString_Impl::to_lower((UTFString_Impl *)__p, v29 + 32);
                v30 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "ce");
                if (v48 < 0)
                  operator delete(__p[0]);
                if (v30)
                {
                  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(v43, *((_QWORD *)this + 2), 2);
                  v31 = v43[0];
                  if (v43[0])
                  {
                    if ((_QWORD *)(v31 + 8) != v32)
                    {
                      v33 = v32[5];
                      if (*(_DWORD *)(v33 + 8) == 1952807028)
                      {
                        UTFString_Impl::to_lower((UTFString_Impl *)__p, v33 + 32);
                        v34 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "que");
                        if (v48 < 0)
                          operator delete(__p[0]);
                        if (v34)
                          *((_BYTE *)this + 105) = 1;
                      }
                    }
                  }
                  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v43);
                }
              }
            }
          }
          v35 = v45;
          if (v45)
          {
            p_shared_owners = (unint64_t *)&v45->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
LABEL_71:
          if ((char)v51 < 0)
            operator delete(v49);
          goto LABEL_73;
        }
LABEL_36:
        v21 = (char *)&v49;
        if (ClassifySentenceImpl_fr::generate_tokens(void)::WH_WORDS + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(ClassifySentenceImpl_fr::generate_tokens(void)::WH_WORDS, (const void **)&v49))
        {
          v22 = v51;
          if ((v51 & 0x80u) != 0)
          {
            v22 = v50;
            v21 = (char *)v49;
          }
          if (v22 >= 3)
          {
            v23 = &v21[v22];
            v24 = v21;
            while (1)
            {
              v25 = (char *)memchr(v24, 113, v22 - 2);
              if (!v25)
                break;
              if (*(_WORD *)v25 == 30065 && v25[2] == 39)
              {
                if (v25 != v23 && v25 == v21)
                  goto LABEL_37;
                goto LABEL_71;
              }
              v24 = v25 + 1;
              v22 = v23 - (_BYTE *)v24;
              if (v23 - (_BYTE *)v24 < 3)
                goto LABEL_71;
            }
          }
        }
        else
        {
LABEL_37:
          *((_BYTE *)this + 104) = 1;
        }
        goto LABEL_71;
      }
LABEL_73:
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v46);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
LABEL_74:
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      return;
    }
    if ((_QWORD *)(v3 + 8) == v7)
      goto LABEL_73;
    v8 = v7[5];
    if (!*(_BYTE *)(v8 + 9))
      goto LABEL_73;
    v9 = (_QWORD *)(v5 + 32);
    v10 = *(char *)(v5 + 55);
    if (v10 < 0)
    {
      if (*(_QWORD *)(v5 + 40) != 1)
        goto LABEL_20;
      v9 = (_QWORD *)*v9;
    }
    else if (v10 != 1)
    {
      goto LABEL_20;
    }
    if (*(_BYTE *)v9 == 63)
    {
      if (*((_BYTE *)this + 104))
      {
        if (*((_BYTE *)this + 105))
          v11 = 2;
        else
          v11 = 1;
      }
      else
      {
        v11 = 2;
      }
      goto LABEL_21;
    }
LABEL_20:
    v11 = 0;
LABEL_21:
    v12 = *(_QWORD *)(v8 + 32);
    v49 = __p;
    v14 = v13[5];
    if (v14)
    {
      *(_DWORD *)(v14 + 8) = v11;
    }
    else
    {
      v15 = operator new();
      *(_QWORD *)v15 = &off_1EA922EA8;
      *(_DWORD *)(v15 + 8) = v11;
      v16 = v13[5];
      v13[5] = v15;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    *((_WORD *)this + 52) = 0;
    v6 = *(_DWORD *)(v5 + 8);
    goto LABEL_26;
  }
}

void sub_1DEA0BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, char *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v25;

  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  v25 = 456;
  while (1)
  {
    if (*((char *)&__p + v25 - 1) < 0)
      operator delete(*(void **)(&a16 + v25));
    v25 -= 24;
    if (!v25)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1DEA0C0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *NeverDestructed<std::set<std::string>>::NeverDestructed<>(uint64_t *a1, const void ***a2)
{
  uint64_t v4;

  v4 = operator new();
  std::set<std::string>::set[abi:ne180100](v4, a2);
  *a1 = v4;
  return a1;
}

void sub_1DEA0C110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ClassifySentenceImpl_fr>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA0C1C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA0C208(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA0C250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(unsigned __int8 *a1, char *a2)
{
  uint64_t *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  nlohmann::detail::exception *exception;
  unint64_t v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t *v25;

  if (*a1)
  {
    if (*a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v17 = *a1;
      if (v17 > 9)
        v18 = "number";
      else
        v18 = off_1EA94C758[v17];
      std::string::basic_string[abi:ne180100]<0>(&v21, v18);
      v19 = std::string::insert(&v21, 0, "cannot use push_back() with ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v23 = (char *)v19->__r_.__value_.__r.__words[2];
      v22 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(308, (uint64_t)&v22, exception);
    }
    v4 = (uint64_t *)*((_QWORD *)a1 + 1);
  }
  else
  {
    *a1 = 2;
    v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *((_QWORD *)a1 + 1) = v4;
  }
  result = (uint64_t)(v4 + 2);
  v6 = v4[2];
  v7 = v4[1];
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - *v4;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v25 = v4 + 2;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(result, v12);
    v14 = &v13[16 * v9];
    *(_QWORD *)&v22 = v13;
    *((_QWORD *)&v22 + 1) = v14;
    v24 = &v13[16 * v15];
    *v14 = *a2;
    *((_QWORD *)v14 + 1) = *((_QWORD *)a2 + 1);
    *a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v23 = v14 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v4, &v22);
    v8 = v4[1];
    result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_BYTE *)v7 = *a2;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)a2 + 1);
    *a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v8 = v7 + 16;
    v4[1] = v7 + 16;
  }
  v4[1] = v8;
  return result;
}

void sub_1DEA0C430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&__p);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA0C4D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::pipeline_from_config(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, const void **a6)
{
  NSObject *v8;
  const char *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t **v14;
  _BYTE *v15;
  uint64_t *v16;
  BOOL is_fe_module;
  BOOL v18;
  uint64_t **v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  size_t size;
  const void *v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  std::string *v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  std::string *p_s;
  _QWORD *v37;
  _QWORD *v38;
  std::string *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  NSObject *v45;
  const char *v46;
  std::string *v47;
  std::string *v48;
  void (***v49)(void **__return_ptr, _QWORD, std::string *, void **, uint64_t *);
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  BOOL v59;
  char *v60;
  unsigned __int8 *v61;
  char *v62;
  void *v63;
  char *v64;
  std::string::size_type v66;
  void *v67;
  std::string::size_type v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t *v77;
  std::string *v78;
  std::string::size_type v79;
  std::string::size_type v80;
  int v81;
  BOOL v82;
  std::__shared_weak_count *v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  char *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::recursive_mutex *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  uint64_t v141;
  uint64_t *p_shared_weak_owners;
  uint64_t **v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  __int128 v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  _BYTE *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  NSObject *v175;
  const char *v176;
  std::string *v177;
  std::string *v178;
  std::string *p_p;
  std::string *v180;
  std::string *v181;
  std::string *v182;
  std::string *v183;
  std::string *v184;
  std::string *v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  unint64_t *v192;
  unint64_t v193;
  void (***v194)(uint64_t *__return_ptr, _QWORD, std::string *, __int128 *, __int128 *, unsigned __int8 *, uint64_t *);
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  GryphonAnalysis *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  GryphonAnalysis *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  const void *v262;
  _QWORD *v263;
  _QWORD *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  const void *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t *v271;
  int v272;
  uint64_t *v273;
  _QWORD *v274;
  std::string::size_type v275;
  std::string::size_type v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  const void *v284;
  _QWORD *v285;
  _QWORD *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  const void *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  const void *v294;
  _QWORD *v295;
  _QWORD *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  const void *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  const void *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  const void *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  const void *v324;
  _QWORD *v325;
  _QWORD *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  const void *v330;
  unint64_t *v331;
  unint64_t v332;
  const void *v333;
  void *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t *v400;
  unint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  void *v411;
  std::string *v412;
  void *v413;
  std::string *v414;
  void *exception;
  uint8_t *v416;
  void *v417;
  uint8_t *v418;
  void *v419;
  uint8_t *v420;
  _QWORD *v421;
  uint64_t v425;
  __int128 v427;
  char v428;
  uint64_t *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  void *v432[2];
  char v433;
  void *v434;
  uint64_t *v435;
  char v436;
  _QWORD v437[2];
  uint64_t v438;
  std::__shared_weak_count *v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  __int128 v442;
  __int128 v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  __int128 v446;
  __int128 v447;
  char v448[8];
  uint64_t *v449;
  char v450[8];
  uint64_t *v451;
  void (***v452)(uint64_t *__return_ptr, _QWORD, std::string *, __int128 *, __int128 *, unsigned __int8 *, uint64_t *);
  std::__shared_weak_count *v453;
  __int128 v454;
  char v455;
  std::string *v456;
  std::string __p;
  uint64_t v458;
  std::__shared_weak_count *v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  char v462;
  std::string *v463;
  char v464;
  std::string *v465;
  std::string v466;
  std::string __s;
  std::string v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  std::string *v472;
  unint64_t v473;
  void *v474;
  std::__shared_weak_count *v475;
  void *v476;
  std::__shared_weak_count *v477;
  void (***v478)(void **__return_ptr, _QWORD, std::string *, void **, uint64_t *);
  std::__shared_weak_count *v479;
  _QWORD *v480;
  std::__shared_weak_count *v481;
  char v482[8];
  std::string::size_type *v483;
  uint8_t v484[24];
  std::string *v485;
  unint64_t v486;
  void *v487;
  char v488;
  void *v489;
  char v490;
  _BYTE buf[24];
  _BYTE *v492;
  unint64_t v493;
  uint64_t v494;
  void *v495;
  char v496;
  void *v497;
  char v498;
  uint64_t v499;

  v499 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3 != 1
    || *(_QWORD *)(a3 + 8) + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(_QWORD *)(a3 + 8), (const void **)a5))
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v421 = a1;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a5 + 23) >= 0)
      v10 = (const void *)a5;
    else
      v10 = *(const void **)a5;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_INFO, "Initializing pipeline: %s", buf, 0xCu);
  }
  if (*(char *)(a5 + 23) >= 0)
    v11 = (const void *)a5;
  else
    v11 = *(const void **)a5;
  Diagnostics::log(6, "Initializing pipeline: %s", v9, v11);
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at((unsigned __int8 *)a3, (const void **)a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v482, v12);
  v13 = operator new(0x88uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_1EA933740;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  v13[16] = 0;
  v13[3] = off_1EA91EE60;
  v480 = v13 + 3;
  v481 = (std::__shared_weak_count *)v13;
  SharedObjectPool::get<ModuleFactory>(&v478, *a2);
  v477 = 0;
  v476 = 0;
  v475 = 0;
  v474 = 0;
  v472 = 0;
  v471 = 0;
  v473 = 0;
  v468.__r_.__value_.__r.__words[0] = (std::string::size_type)v482;
  *(_OWORD *)&v468.__r_.__value_.__r.__words[1] = 0uLL;
  v469 = 0;
  v470 = 0x8000000000000000;
  if (v482[0])
  {
    if (v482[0] == 2)
    {
      v468.__r_.__value_.__r.__words[2] = *v483;
    }
    else if (v482[0] == 1)
    {
      v468.__r_.__value_.__l.__size_ = *v483;
    }
    else
    {
      v470 = 0;
    }
  }
  else
  {
    v470 = 1;
  }
  v14 = (uint64_t **)&v484[8];
LABEL_22:
  *(_QWORD *)&buf[16] = 0;
  v492 = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = v482;
  v493 = 0x8000000000000000;
  if (v482[0] == 2)
  {
    *(_QWORD *)&buf[16] = v483[1];
  }
  else if (v482[0] == 1)
  {
    *(_QWORD *)&buf[8] = v483 + 1;
  }
  else
  {
    v493 = 1;
  }
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v468, (unsigned __int8 **)buf))
  {
    v15 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v468);
    v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v15, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v16, &__s);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v466, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v466 = __s;
    is_fe_module = GryphonPipelineFactory::is_fe_module(&v466);
    v18 = is_fe_module;
    if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v466.__r_.__value_.__l.__data_);
      if (v18)
        goto LABEL_231;
    }
    else if (is_fe_module)
    {
      goto LABEL_231;
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v484, 0, 0, 0, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v15, (const void **)buf, v484, (uint64_t)&v434);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v14, v484[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v465 = 0;
    v464 = 3;
    v19 = v14;
    v465 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&__s);
    v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v434, "id");
    v21 = *(unsigned __int8 *)v20;
    *(_BYTE *)v20 = v464;
    v464 = v21;
    v22 = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v465;
    v465 = (std::string *)v22;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v465, v21);
    v23 = *a4;
    v24 = a4[1];
    if (*a4 == v24)
      goto LABEL_73;
    v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    size = __s.__r_.__value_.__l.__size_;
    v27 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v28 = __s.__r_.__value_.__l.__size_;
    while (1)
    {
      v29 = v23[23];
      v30 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v29 = *((_QWORD *)v23 + 1);
      if (v28 == v29)
      {
        if (v30 >= 0)
          v31 = v23;
        else
          v31 = *(unsigned __int8 **)v23;
        if ((v25 & 0x80) != 0)
        {
          if (!memcmp(v27, v31, size))
          {
LABEL_56:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v34 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
            {
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s = &__s;
              v37 = v23 + 24;
              if ((char)v23[47] < 0)
                v37 = (_QWORD *)*v37;
              v38 = v23 + 48;
              if ((char)v23[71] < 0)
                v38 = (_QWORD *)*v38;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = p_s;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v37;
              *(_WORD *)&buf[22] = 2080;
              v492 = v38;
              _os_log_impl(&dword_1DE3F6000, v34, OS_LOG_TYPE_INFO, "Overriding module params module:%s, key=%s, value=%s", buf, 0x20u);
            }
            v39 = &__s;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v39 = (std::string *)__s.__r_.__value_.__r.__words[0];
            v40 = v23 + 24;
            if ((char)v23[47] < 0)
              v40 = (unsigned __int8 *)*((_QWORD *)v23 + 3);
            v41 = v23 + 48;
            if ((char)v23[71] < 0)
              v41 = (unsigned __int8 *)*((_QWORD *)v23 + 6);
            Diagnostics::log(6, "Overriding module params module:%s, key=%s, value=%s", v35, v39, v40, v41);
            v463 = 0;
            v462 = 3;
            v463 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)(v23 + 48));
            v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)&v434, (const void **)v23 + 3);
            v43 = *(unsigned __int8 *)v42;
            *(_BYTE *)v42 = v462;
            v462 = v43;
            v44 = (uint64_t *)v42[1];
            v42[1] = (uint64_t)v463;
            v463 = (std::string *)v44;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v463, v43);
LABEL_73:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v47 = &__s;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v47 = (std::string *)__s.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v47;
              _os_log_impl(&dword_1DE3F6000, v45, OS_LOG_TYPE_DEBUG, "Creating module %s", buf, 0xCu);
            }
            v48 = &__s;
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v48 = (std::string *)__s.__r_.__value_.__r.__words[0];
            Diagnostics::log(7, "Creating module %s", v46, v48);
            v49 = v478;
            v50 = a2[1];
            v460 = *a2;
            v461 = (std::__shared_weak_count *)v50;
            v14 = v19;
            if (v50)
            {
              v51 = (unint64_t *)(v50 + 8);
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            (**v49)(v432, v49, &__s, &v434, &v460);
            v53 = v461;
            if (v461)
            {
              p_shared_owners = (unint64_t *)&v461->__shared_owners_;
              do
                v55 = __ldaxr(p_shared_owners);
              while (__stlxr(v55 - 1, p_shared_owners));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)buf, v15);
            nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v484, v15);
            while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v484))
            {
              v56 = nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)buf);
              v57 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
              v58 = *(unsigned __int8 *)(v56 + 23);
              v59 = (v58 & 0x80u) != 0;
              if ((v58 & 0x80u) != 0)
                v58 = *(_QWORD *)(v56 + 8);
              if (v59)
                v60 = *(char **)v56;
              else
                v60 = (char *)v56;
              if (v58 >= 7)
              {
                v61 = v57;
                v62 = &v60[v58];
                v63 = v60;
                do
                {
                  v64 = (char *)memchr(v63, 95, v58 - 6);
                  if (!v64)
                    break;
                  if (*(_DWORD *)v64 == 1918988383 && *(_DWORD *)(v64 + 3) == 1936548210)
                  {
                    if (v64 == v62)
                      v66 = -1;
                    else
                      v66 = v64 - v60;
                    if (v66 + 1 >= 2)
                    {
                      v67 = v432[0];
                      if (!*((_QWORD *)v432[0] + 12))
                      {
                        v68 = *a2;
                        v69 = (std::__shared_weak_count *)a2[1];
                        v458 = *a2;
                        v459 = v69;
                        if (v69)
                        {
                          v70 = (unint64_t *)&v69->__shared_owners_;
                          do
                            v71 = __ldxr(v70);
                          while (__stxr(v71 + 1, v70));
                        }
                        Module::enable_hot_plugging((uint64_t)v67, (uint64_t)&__s, v68, v69);
                        if (v69)
                        {
                          v72 = (unint64_t *)&v69->__shared_owners_;
                          do
                            v73 = __ldaxr(v72);
                          while (__stlxr(v73 - 1, v72));
                          if (!v73)
                          {
                            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                            std::__shared_weak_count::__release_weak(v69);
                          }
                        }
                        v74 = *((_QWORD *)v432[0] + 12);
                        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
                        ModuleBuilder::add_config(v74, (uint64_t)&__p, (uint64_t)&v434);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      std::string::basic_string(&__p, (const std::string *)v56, 0, v66, (std::allocator<char> *)&v452);
                      v456 = 0;
                      v455 = 3;
                      v456 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)&__s);
                      v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v61, "id");
                      v76 = *(unsigned __int8 *)v75;
                      *(_BYTE *)v75 = v455;
                      v455 = v76;
                      v77 = (uint64_t *)v75[1];
                      v75[1] = (uint64_t)v456;
                      v456 = (std::string *)v77;
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v456, v76);
                      ModuleBuilder::add_config(*((_QWORD *)v432[0] + 12), (uint64_t)&__p, (uint64_t)v61);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    break;
                  }
                  v63 = v64 + 1;
                  v58 = v62 - (_BYTE *)v63;
                }
                while (v62 - (_BYTE *)v63 >= 7);
              }
              nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
              ++v494;
            }
            if (v490 < 0)
              operator delete(v489);
            if (v488 < 0)
              operator delete(v487);
            if (v498 < 0)
              operator delete(v497);
            if (v496 < 0)
              operator delete(v495);
            if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (__s.__r_.__value_.__l.__size_ != 5)
              {
                if (__s.__r_.__value_.__l.__size_ == 20)
                {
                  v78 = (std::string *)__s.__r_.__value_.__r.__words[0];
                  goto LABEL_138;
                }
                goto LABEL_172;
              }
              if (*(_DWORD *)__s.__r_.__value_.__l.__data_ != 1819243376
                || *(_BYTE *)(__s.__r_.__value_.__r.__words[0] + 4) != 97)
              {
                goto LABEL_172;
              }
            }
            else
            {
              if (HIBYTE(__s.__r_.__value_.__r.__words[2]) != 5)
              {
                if (HIBYTE(__s.__r_.__value_.__r.__words[2]) == 20)
                {
                  v78 = &__s;
LABEL_138:
                  v79 = v78->__r_.__value_.__r.__words[0];
                  v80 = v78->__r_.__value_.__l.__size_;
                  v81 = v78->__r_.__value_.__r.__words[2];
                  v82 = v79 == 0x6165665F74696E75 && v80 == 0x6572705F65727574;
                  if (v82 && v81 == 1952672100)
                  {
                    v85 = v432[0];
                    v84 = (std::__shared_weak_count *)v432[1];
                    if (v432[1])
                    {
                      v86 = (unint64_t *)((char *)v432[1] + 8);
                      do
                        v87 = __ldxr(v86);
                      while (__stxr(v87 + 1, v86));
                    }
                    v88 = v477;
                    v476 = v85;
                    v477 = v84;
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
LABEL_170:
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                  }
                }
                goto LABEL_172;
              }
              if (LODWORD(__s.__r_.__value_.__l.__data_) != 1819243376 || __s.__r_.__value_.__s.__data_[4] != 97)
                goto LABEL_172;
            }
            v94 = v432[0];
            v93 = (std::__shared_weak_count *)v432[1];
            if (v432[1])
            {
              v95 = (unint64_t *)((char *)v432[1] + 8);
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            v88 = v475;
            v474 = v94;
            v475 = v93;
            if (v88)
            {
              v97 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v97);
              while (__stlxr(v90 - 1, v97));
              goto LABEL_170;
            }
LABEL_172:
            *(_QWORD *)&buf[16] = 0;
            v492 = 0;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)buf = v15;
            v493 = 0x8000000000000000;
            v98 = *v15;
            if (v98 == 1)
            {
              v99 = *((_QWORD *)v15 + 1);
              *(_QWORD *)&buf[8] = v99 + 8;
              *(_QWORD *)&buf[8] = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(v99, "async");
            }
            else if (v98 == 2)
            {
              *(_QWORD *)&buf[16] = *(_QWORD *)(*((_QWORD *)v15 + 1) + 8);
            }
            else
            {
              v493 = 1;
            }
            v19[1] = 0;
            v19[2] = 0;
            *v19 = 0;
            *(_QWORD *)v484 = v15;
            v486 = 0x8000000000000000;
            v100 = *v15;
            if (v100 == 2)
            {
              *(_QWORD *)&v484[16] = *(_QWORD *)(*((_QWORD *)v15 + 1) + 8);
            }
            else if (v100 == 1)
            {
              *(_QWORD *)&v484[8] = *((_QWORD *)v15 + 1) + 8;
            }
            else
            {
              v486 = 1;
            }
            if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v484))
            {
              v101 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v15, "async");
              __p.__r_.__value_.__s.__data_[0] = 0;
              nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v101, &__p);
              if (__p.__r_.__value_.__s.__data_[0])
              {
                v102 = operator new(0x208uLL);
                v103 = v102;
                v102[1] = 0;
                v102[2] = 0;
                *v102 = &off_1EA933D28;
                v104 = v432[0];
                v105 = (char *)v432[1];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v432;
                if (v432[1])
                {
                  v106 = (unint64_t *)((char *)v432[1] + 8);
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                Module::Module((Module *)(v102 + 3));
                v103[3] = &off_1EA91F938;
                v103[37] = v104;
                v103[38] = v105;
                if (v105)
                {
                  v108 = (unint64_t *)(v105 + 8);
                  do
                    v109 = __ldxr(v108);
                  while (__stxr(v109 + 1, v108));
                  v104 = (void *)v103[37];
                }
                v103[39] = 0;
                v103[40] = 850045863;
                *(_OWORD *)(v103 + 41) = 0u;
                *(_OWORD *)(v103 + 43) = 0u;
                *(_OWORD *)(v103 + 45) = 0u;
                v103[47] = 0;
                v103[48] = 850045863;
                *(_OWORD *)(v103 + 49) = 0u;
                *(_OWORD *)(v103 + 51) = 0u;
                *(_OWORD *)(v103 + 53) = 0u;
                v103[55] = 0;
                v103[56] = 1018212795;
                v103[63] = 0;
                *(_OWORD *)(v103 + 57) = 0u;
                *(_OWORD *)(v103 + 59) = 0u;
                *(_OWORD *)(v103 + 61) = 0u;
                *(_QWORD *)buf = &off_1EA92F930;
                *(_QWORD *)&buf[8] = v103 + 3;
                v492 = buf;
                Observable::on_event((uint64_t)v104 + 8, "cache", buf, (std::string **)v484);
                std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v103 + 62), (__int128 *)v484);
                v110 = *(std::__shared_weak_count **)&v484[8];
                if (*(_QWORD *)&v484[8])
                {
                  v111 = (unint64_t *)(*(_QWORD *)&v484[8] + 8);
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                }
                v113 = v492;
                if (v492 == buf)
                {
                  v113 = buf;
                  v114 = 4;
LABEL_200:
                  (*(void (**)(void))(*v113 + 8 * v114))();
                }
                else if (v492)
                {
                  v114 = 5;
                  goto LABEL_200;
                }
                v103[64] = dispatch_queue_create("AsyncContainerModule", 0);
                v115 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_)
                {
                  v116 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                *(_QWORD *)&v118 = v103 + 3;
                *((_QWORD *)&v118 + 1) = v103;
                v119 = (std::__shared_weak_count *)v432[1];
                *(_OWORD *)v432 = v118;
                if (v119)
                {
                  v120 = (unint64_t *)&v119->__shared_owners_;
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
              }
            }
            v122 = v480;
            v123 = (std::__shared_weak_count *)v432[1];
            v454 = *(_OWORD *)v432;
            if (v432[1])
            {
              v124 = (unint64_t *)((char *)v432[1] + 8);
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
            }
            Pipeline::push_back_module(v122, &v454);
            if (v123)
            {
              v126 = (unint64_t *)&v123->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
            v128 = v472;
            if ((unint64_t)v472 >= v473)
            {
              v130 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v471, (__int128 *)&__s);
            }
            else
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v472, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else
              {
                v129 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                v472->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v128->__r_.__value_.__l.__data_ = v129;
              }
              v130 = v128 + 1;
            }
            v472 = v130;
            v131 = (std::__shared_weak_count *)v432[1];
            if (v432[1])
            {
              v132 = (unint64_t *)((char *)v432[1] + 8);
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v435, v434);
LABEL_231:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v468);
            goto LABEL_22;
          }
        }
        else
        {
          if (!(_DWORD)v25)
            goto LABEL_56;
          v32 = &__s;
          v33 = v25;
          while (v32->__r_.__value_.__s.__data_[0] == *v31)
          {
            v32 = (std::string *)((char *)v32 + 1);
            ++v31;
            if (!--v33)
              goto LABEL_56;
          }
        }
      }
      v23 += 72;
      if (v23 == v24)
        goto LABEL_73;
    }
  }
  v425 = (*(uint64_t (**)(_QWORD *))(*v480 + 64))(v480);
  v134 = *a2;
  v135 = (std::recursive_mutex *)(*a2 + 56);
  std::recursive_mutex::lock(v135);
  v136 = v134 + 32;
  v138 = (uint64_t *)v425;
  if (v137)
    goto LABEL_281;
  v139 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v139->__shared_owners_ = 0u;
  v140 = (unint64_t *)&v139->__shared_owners_;
  v139->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9335F0;
  v139[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91EC00;
  v141 = (uint64_t)&v139[1];
  *(_OWORD *)&v139[1].__shared_weak_owners_ = 0u;
  p_shared_weak_owners = &v139[1].__shared_weak_owners_;
  v139[1].__shared_owners_ = (uint64_t)&v139[1].__shared_weak_owners_;
  v143 = (uint64_t **)&v139[1].__shared_owners_;
  std::string::basic_string[abi:ne180100]<0>(v484, "neural_fallback_connection");
  if (&v139[1].__shared_weak_owners_ != (uint64_t *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v139[1].__shared_owners_, (const void **)v484))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v484[23] & 0x80u) == 0)
      v416 = v484;
    else
      v416 = *(uint8_t **)v484;
    StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v416);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_QWORD *)buf = v484;
  v144 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, (const void **)v484, (__int128 **)buf);
  *(_QWORD *)buf = &off_1EA92F720;
  v492 = buf;
  std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v144 + 7);
  v145 = v492;
  if (v492 == buf)
  {
    v146 = 4;
    v145 = buf;
LABEL_240:
    (*(void (**)(void))(*v145 + 8 * v146))();
  }
  else if (v492)
  {
    v146 = 5;
    goto LABEL_240;
  }
  if ((char)v484[23] < 0)
    operator delete(*(void **)v484);
  std::string::basic_string[abi:ne180100]<0>(buf, "neural_blacklist_connection");
  ConnectionFactory::register_connection<NeuralFallbacklistConnection>(v141, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(buf, "neural_fallbacklist_connection");
  ConnectionFactory::register_connection<NeuralFallbacklistConnection>(v141, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  std::string::basic_string[abi:ne180100]<0>(v484, "audio_connection");
  if (p_shared_weak_owners != (uint64_t *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v143, (const void **)v484))
  {
    v417 = __cxa_allocate_exception(0x10uLL);
    if ((v484[23] & 0x80u) == 0)
      v418 = v484;
    else
      v418 = *(uint8_t **)v484;
    StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v418);
    MEMORY[0x1DF0EC99C](v417, buf);
    __cxa_throw(v417, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_QWORD *)buf = v484;
  v147 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, (const void **)v484, (__int128 **)buf);
  *(_QWORD *)buf = &off_1EA92F6C8;
  v492 = buf;
  std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v147 + 7);
  v148 = v492;
  if (v492 == buf)
  {
    v149 = 4;
    v148 = buf;
LABEL_252:
    (*(void (**)(void))(*v148 + 8 * v149))();
  }
  else if (v492)
  {
    v149 = 5;
    goto LABEL_252;
  }
  if ((char)v484[23] < 0)
    operator delete(*(void **)v484);
  std::string::basic_string[abi:ne180100]<0>(v484, "neural_thermal_fallback_connection");
  if (p_shared_weak_owners != (uint64_t *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v143, (const void **)v484))
  {
    v419 = __cxa_allocate_exception(0x10uLL);
    if ((v484[23] & 0x80u) == 0)
      v420 = v484;
    else
      v420 = *(uint8_t **)v484;
    StringFormatter::StringFormatter((StringFormatter *)buf, "Connection name '%s' is registered already.", (const char *)v420);
    MEMORY[0x1DF0EC99C](v419, buf);
    __cxa_throw(v419, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_QWORD *)buf = v484;
  v150 = std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, (const void **)v484, (__int128 **)buf);
  *(_QWORD *)buf = &off_1EA92F7D0;
  v492 = buf;
  std::__function::__value_func<std::shared_ptr<Connection> ()(std::shared_ptr<Module>,std::shared_ptr<Module>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>::swap[abi:ne180100](buf, v150 + 7);
  v151 = v492;
  if (v492 == buf)
  {
    v152 = 4;
    v151 = buf;
    v138 = (uint64_t *)v425;
LABEL_260:
    (*(void (**)(void))(*v151 + 8 * v152))();
  }
  else
  {
    v138 = (uint64_t *)v425;
    if (v492)
    {
      v152 = 5;
      goto LABEL_260;
    }
  }
  if ((char)v484[23] < 0)
    operator delete(*(void **)v484);
  v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139[1];
  v468.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
  *(_QWORD *)buf = v484;
  v154 = v153[5];
  if (!v154)
  {
    v160 = (_QWORD *)operator new();
    *v160 = &off_1EA923348;
    v160[1] = v141;
    v160[2] = v139;
    do
      v161 = __ldxr(v140);
    while (__stxr(v161 + 1, v140));
    v162 = v153[5];
    v153[5] = (uint64_t)v160;
    if (v162)
      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
    goto LABEL_277;
  }
  *(_QWORD *)&v155 = v139 + 1;
  *((_QWORD *)&v155 + 1) = v139;
  do
    v156 = __ldxr(v140);
  while (__stxr(v156 + 1, v140));
  v157 = *(std::__shared_weak_count **)(v154 + 16);
  *(_OWORD *)(v154 + 8) = v155;
  if (v157)
  {
    v158 = (unint64_t *)&v157->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v139 = (std::__shared_weak_count *)v468.__r_.__value_.__l.__size_;
  if (v468.__r_.__value_.__l.__size_)
  {
LABEL_277:
    v163 = (unint64_t *)&v139->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
LABEL_281:
  v166 = *(std::__shared_weak_count **)(*(_QWORD *)v165 + 16);
  v452 = *(void (****)(uint64_t *__return_ptr, _QWORD, std::string *, __int128 *, __int128 *, unsigned __int8 *, uint64_t *))(*(_QWORD *)v165 + 8);
  v453 = v166;
  if (v166)
  {
    v167 = (unint64_t *)&v166->__shared_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
  }
  std::recursive_mutex::unlock(v135);
  if (*(_BYTE *)a3 == 1
    && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*(_QWORD *)(a3 + 8), a6))
  {
    v169 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a3, a6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v450, v169);
    *(_QWORD *)buf = v450;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v492 = 0;
    v493 = 0x8000000000000000;
    if (v450[0])
    {
      if (v450[0] == 2)
      {
        *(_QWORD *)&buf[16] = *v451;
      }
      else if (v450[0] == 1)
      {
        *(_QWORD *)&buf[8] = *v451;
      }
      else
      {
        v493 = 0;
      }
      goto LABEL_292;
    }
  }
  else
  {
    v450[0] = 0;
    v451 = 0;
    *(_QWORD *)buf = v450;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v492 = 0;
    v493 = 0x8000000000000000;
  }
  v493 = 1;
LABEL_292:
  while (1)
  {
    *(_QWORD *)&v484[16] = 0;
    v485 = 0;
    *(_QWORD *)&v484[8] = 0;
    *(_QWORD *)v484 = v450;
    v486 = 0x8000000000000000;
    if (v450[0] == 2)
    {
      *(_QWORD *)&v484[16] = v451[1];
    }
    else if (v450[0] == 1)
    {
      *(_QWORD *)&v484[8] = v451 + 1;
    }
    else
    {
      v486 = 1;
    }
    v170 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, (unsigned __int8 **)v484);
    if (v170)
      break;
    v171 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
    v172 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v171, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v172, &v468);
    v173 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v171, "from");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v173, &__s);
    v174 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v171, "to");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v174, &__p);
    std::string::basic_string[abi:ne180100]<0>(v484, "params");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v434, 0, 0, 0, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v171, (const void **)v484, (unsigned __int8 *)&v434, (uint64_t)v448);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v435, v434);
    if ((char)v484[23] < 0)
      operator delete(*(void **)v484);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v175 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v177 = &v468;
      if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v177 = (std::string *)v468.__r_.__value_.__r.__words[0];
      v178 = &__s;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v178 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v484 = 136315650;
      *(_QWORD *)&v484[4] = v177;
      *(_WORD *)&v484[12] = 2080;
      *(_QWORD *)&v484[14] = v178;
      *(_WORD *)&v484[22] = 2080;
      v485 = p_p;
      _os_log_impl(&dword_1DE3F6000, v175, OS_LOG_TYPE_DEBUG, "Creating connection '%s' from '%s' to '%s'", v484, 0x20u);
    }
    v180 = &v468;
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v180 = (std::string *)v468.__r_.__value_.__r.__words[0];
    v181 = &__s;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v181 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v182 = &__p;
    else
      v182 = (std::string *)__p.__r_.__value_.__r.__words[0];
    Diagnostics::log(7, "Creating connection '%s' from '%s' to '%s'", v176, v180, v181, v182);
    v183 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v471, (uint64_t)v472, (unsigned __int8 **)&__s);
    if (v183 == v472)
    {
      v411 = __cxa_allocate_exception(0x10uLL);
      v412 = &__s;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v412 = (std::string *)__s.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)v484, "Unfound from module id '%s'", (const char *)v412);
      MEMORY[0x1DF0EC99C](v411, v484);
      __cxa_throw(v411, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v184 = v183;
    v185 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v471, (uint64_t)v472, (unsigned __int8 **)&__p);
    if (v185 == v472)
    {
      v413 = __cxa_allocate_exception(0x10uLL);
      v414 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v414 = (std::string *)__p.__r_.__value_.__r.__words[0];
      StringFormatter::StringFormatter((StringFormatter *)v484, "Unfound to module id '%s'", (const char *)v414);
      MEMORY[0x1DF0EC99C](v413, v484);
      __cxa_throw(v413, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v186 = v471;
    v187 = *v138;
    v188 = *(_OWORD *)(*v138 - 0x5555555555555550 * (((unint64_t)v184 - v471) >> 3));
    v447 = v188;
    if (*((_QWORD *)&v188 + 1))
    {
      v189 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
      do
        v190 = __ldxr(v189);
      while (__stxr(v190 + 1, v189));
      v187 = *v138;
    }
    v191 = *(_OWORD *)(v187 - 0x5555555555555550 * (((unint64_t)v185 - v186) >> 3));
    v446 = v191;
    if (*((_QWORD *)&v191 + 1))
    {
      v192 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    v194 = v452;
    v443 = v188;
    if (*((_QWORD *)&v188 + 1))
    {
      v195 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
      do
        v196 = __ldxr(v195);
      while (__stxr(v196 + 1, v195));
    }
    v442 = v191;
    if (*((_QWORD *)&v191 + 1))
    {
      v197 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    v199 = a2[1];
    v440 = *a2;
    v441 = (std::__shared_weak_count *)v199;
    if (v199)
    {
      v200 = (unint64_t *)(v199 + 8);
      do
        v201 = __ldxr(v200);
      while (__stxr(v201 + 1, v200));
    }
    (**v194)(&v444, v194, &v468, &v443, &v442, (unsigned __int8 *)v448, &v440);
    v202 = v441;
    if (v441)
    {
      v203 = (unint64_t *)&v441->__shared_owners_;
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    v205 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
    if (*((_QWORD *)&v442 + 1))
    {
      v206 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    v208 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    if (*((_QWORD *)&v443 + 1))
    {
      v209 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    if (*v171 == 1
      && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v171 + 1), "pipeline"))
    {
      v211 = (std::__shared_weak_count *)a2[1];
      v437[0] = *a2;
      v437[1] = v211;
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
      }
      memset(v484, 0, sizeof(v484));
      std::string::basic_string[abi:ne180100]<0>(&v434, "pipeline");
      std::string::basic_string[abi:ne180100]<0>(v432, "connection");
      GryphonPipelineFactory::pipeline_from_config(&v438, v437, v171, v484, &v434, v432);
      if (v433 < 0)
        operator delete(v432[0]);
      if (v436 < 0)
        operator delete(v434);
      v434 = v484;
      std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
      if (v211)
      {
        v214 = (unint64_t *)&v211->__shared_owners_;
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v216 = (std::__shared_weak_count *)operator new(0x138uLL);
      v217 = v216;
      v216->__shared_owners_ = 0;
      v218 = (unint64_t *)&v216->__shared_owners_;
      v216->__shared_weak_owners_ = 0;
      v216->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B00;
      v219 = v438;
      v220 = v439;
      *(_QWORD *)v484 = v438;
      *(_QWORD *)&v484[8] = v439;
      if (v439)
      {
        v221 = (unint64_t *)&v439->__shared_owners_;
        do
          v222 = __ldxr(v221);
        while (__stxr(v222 + 1, v221));
      }
      Module::Module((Module *)&v216[1]);
      v217[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91DA40;
      v217[12].__shared_owners_ = v219;
      v217[12].__shared_weak_owners_ = (uint64_t)v220;
      v138 = (uint64_t *)v425;
      if (v220)
      {
        v223 = (unint64_t *)&v220->__shared_owners_;
        do
          v224 = __ldxr(v223);
        while (__stxr(v224 + 1, v223));
        do
          v225 = __ldaxr(v223);
        while (__stlxr(v225 - 1, v223));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      v226 = v444;
      do
        v227 = __ldxr(v218);
      while (__stxr(v227 + 1, v218));
      v228 = *(std::__shared_weak_count **)(v226 + 48);
      *(_QWORD *)(v226 + 40) = v217 + 1;
      *(_QWORD *)(v226 + 48) = v217;
      if (v228)
      {
        v229 = (unint64_t *)&v228->__shared_owners_;
        do
          v230 = __ldaxr(v229);
        while (__stlxr(v230 - 1, v229));
        if (!v230)
        {
          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
          std::__shared_weak_count::__release_weak(v228);
        }
      }
      do
        v231 = __ldaxr(v218);
      while (__stlxr(v231 - 1, v218));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
      v232 = v439;
      if (v439)
      {
        v233 = (unint64_t *)&v439->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
    }
    v235 = v480;
    v430 = v444;
    v431 = v445;
    if (v445)
    {
      v236 = (unint64_t *)&v445->__shared_owners_;
      do
        v237 = __ldxr(v236);
      while (__stxr(v237 + 1, v236));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*v235 + 24))(v235, &v430);
    v238 = v431;
    if (v431)
    {
      v239 = (unint64_t *)&v431->__shared_owners_;
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    v241 = v445;
    if (v445)
    {
      v242 = (unint64_t *)&v445->__shared_owners_;
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    v244 = (std::__shared_weak_count *)*((_QWORD *)&v446 + 1);
    if (*((_QWORD *)&v446 + 1))
    {
      v245 = (unint64_t *)(*((_QWORD *)&v446 + 1) + 8);
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    v247 = (std::__shared_weak_count *)*((_QWORD *)&v447 + 1);
    if (*((_QWORD *)&v447 + 1))
    {
      v248 = (unint64_t *)(*((_QWORD *)&v447 + 1) + 8);
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v449, v448[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v468.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
  }
  if (*(_BYTE *)GryphonAnalysis::Storage((GryphonAnalysis *)v170))
  {
    SharedObjectPool::get<MDN>(buf, *a2);
    v250 = *(_QWORD *)buf;
    *(_QWORD *)(GryphonAnalysis::Storage(v251) + 40) = v250;
    v252 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v253 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    SharedObjectPool::get<Database>(buf, *a2);
    v255 = *(_QWORD *)buf;
    *(_QWORD *)(GryphonAnalysis::Storage(v256) + 32) = v255;
    v257 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v258 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
  }
  v260 = v480;
  v261 = v480[1];
  if (v261 != v480[2])
  {
    while (1)
    {
      v262 = *(const void **)v261;
      if (*(_QWORD *)v261)
      {
        if (!v263)
          goto LABEL_702;
        v264 = v263;
        v265 = *(std::__shared_weak_count **)(v261 + 8);
        if (v265)
        {
          v266 = (unint64_t *)&v265->__shared_owners_;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
        v268 = (const void *)v263[34];
        if (v268
        {
          v381 = (std::__shared_weak_count *)v264[35];
          if (v381)
          {
            v382 = (unint64_t *)&v381->__shared_owners_;
            do
              v383 = __ldxr(v382);
            while (__stxr(v383 + 1, v382));
            do
              v384 = __ldaxr(v382);
            while (__stlxr(v384 - 1, v382));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
              std::__shared_weak_count::__release_weak(v381);
            }
          }
          if (v265)
          {
            v385 = (unint64_t *)&v265->__shared_owners_;
            do
              v386 = __ldaxr(v385);
            while (__stlxr(v386 - 1, v385));
            if (!v386)
              goto LABEL_634;
          }
          goto LABEL_446;
        }
        if (v265)
        {
          v269 = (unint64_t *)&v265->__shared_owners_;
          do
            v270 = __ldaxr(v269);
          while (__stlxr(v270 - 1, v269));
          if (!v270)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        v262 = *(const void **)v261;
        if (*(_QWORD *)v261)
        {
LABEL_702:
          {
            break;
          }
        }
      }
      v261 += 16;
      if (v261 == v260[2])
        goto LABEL_446;
    }
    v265 = *(std::__shared_weak_count **)(v261 + 8);
    if (v265)
    {
      v375 = (unint64_t *)&v265->__shared_owners_;
      do
        v376 = __ldxr(v375);
      while (__stxr(v376 + 1, v375));
      do
        v377 = __ldaxr(v375);
      while (__stlxr(v377 - 1, v375));
      if (!v377)
      {
LABEL_634:
        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
        std::__shared_weak_count::__release_weak(v265);
      }
    }
  }
LABEL_446:
  if (v138[1] == v261)
  {
    v484[0] = 0;
    *(_QWORD *)&v484[8] = 0;
    v428 = 4;
    v429 = 0;
    v271 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v484, "enable_print");
    v272 = *(unsigned __int8 *)v271;
    *(_BYTE *)v271 = 4;
    v428 = v272;
    v273 = (uint64_t *)v271[1];
    v271[1] = (uint64_t)v429;
    v429 = v273;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v429, v272);
    v274 = operator new(0x130uLL);
    v275 = (std::string::size_type)v274;
    v274[1] = 0;
    v274[2] = 0;
    *v274 = &off_1EA934738;
    v276 = (std::string::size_type)(v274 + 3);
    v277 = *a2;
    v278 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)buf = *a2;
    *(_QWORD *)&buf[8] = v278;
    if (v278)
    {
      v279 = (unint64_t *)&v278->__shared_owners_;
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
    }
    FrontendFeatureLogModule::FrontendFeatureLogModule((uint64_t)(v274 + 3), (char *)v484, v277, v278);
    if (v278)
    {
      v281 = (unint64_t *)&v278->__shared_owners_;
      do
        v282 = __ldaxr(v281);
      while (__stlxr(v282 - 1, v281));
      if (!v282)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    v468.__r_.__value_.__r.__words[0] = v276;
    v468.__r_.__value_.__l.__size_ = v275;
    v283 = v260[1];
    if (v283 != v260[2])
    {
      while (1)
      {
        v284 = *(const void **)v283;
        if (*(_QWORD *)v283)
        {
          if (!v285)
            goto LABEL_703;
          v286 = v285;
          v287 = *(std::__shared_weak_count **)(v283 + 8);
          if (v287)
          {
            v288 = (unint64_t *)&v287->__shared_owners_;
            do
              v289 = __ldxr(v288);
            while (__stxr(v289 + 1, v288));
          }
          v290 = (const void *)v285[34];
          if (v290
          {
            v396 = (std::__shared_weak_count *)v286[35];
            if (v396)
            {
              v397 = (unint64_t *)&v396->__shared_owners_;
              do
                v398 = __ldxr(v397);
              while (__stxr(v398 + 1, v397));
              do
                v399 = __ldaxr(v397);
              while (__stlxr(v399 - 1, v397));
              if (!v399)
              {
                ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                std::__shared_weak_count::__release_weak(v396);
              }
            }
            if (v287)
            {
              v400 = (unint64_t *)&v287->__shared_owners_;
              do
                v401 = __ldaxr(v400);
              while (__stlxr(v401 - 1, v400));
              if (!v401)
                goto LABEL_664;
            }
            goto LABEL_471;
          }
          if (v287)
          {
            v291 = (unint64_t *)&v287->__shared_owners_;
            do
              v292 = __ldaxr(v291);
            while (__stlxr(v292 - 1, v291));
            if (!v292)
            {
              ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
              std::__shared_weak_count::__release_weak(v287);
            }
          }
          v284 = *(const void **)v283;
          if (*(_QWORD *)v283)
          {
LABEL_703:
            {
              break;
            }
          }
        }
        v283 += 16;
        if (v283 == v260[2])
          goto LABEL_471;
      }
      v287 = *(std::__shared_weak_count **)(v283 + 8);
      if (v287)
      {
        v393 = (unint64_t *)&v287->__shared_owners_;
        do
          v394 = __ldxr(v393);
        while (__stxr(v394 + 1, v393));
        do
          v395 = __ldaxr(v393);
        while (__stlxr(v395 - 1, v393));
        if (!v395)
        {
LABEL_664:
          ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
          std::__shared_weak_count::__release_weak(v287);
        }
      }
    }
LABEL_471:
    v293 = *(_QWORD *)(v425 + 8);
    if (v293 == v283)
    {
      v283 = v260[1];
      if (v283 != v260[2])
      {
        while (1)
        {
          v294 = *(const void **)v283;
          if (*(_QWORD *)v283)
          {
            if (!v295)
              goto LABEL_704;
            v296 = v295;
            v297 = *(std::__shared_weak_count **)(v283 + 8);
            if (v297)
            {
              v298 = (unint64_t *)&v297->__shared_owners_;
              do
                v299 = __ldxr(v298);
              while (__stxr(v299 + 1, v298));
            }
            v300 = (const void *)v295[34];
            if (v300
            {
              v405 = (std::__shared_weak_count *)v296[35];
              if (v405)
              {
                v406 = (unint64_t *)&v405->__shared_owners_;
                do
                  v407 = __ldxr(v406);
                while (__stxr(v407 + 1, v406));
                do
                  v408 = __ldaxr(v406);
                while (__stlxr(v408 - 1, v406));
                if (!v408)
                {
                  ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                  std::__shared_weak_count::__release_weak(v405);
                }
              }
              if (v297)
              {
                v409 = (unint64_t *)&v297->__shared_owners_;
                do
                  v410 = __ldaxr(v409);
                while (__stlxr(v410 - 1, v409));
                if (!v410)
                  goto LABEL_681;
              }
              goto LABEL_488;
            }
            if (v297)
            {
              v301 = (unint64_t *)&v297->__shared_owners_;
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
            v294 = *(const void **)v283;
            if (*(_QWORD *)v283)
            {
LABEL_704:
              {
                break;
              }
            }
          }
          v283 += 16;
          if (v283 == v260[2])
            goto LABEL_488;
        }
        v297 = *(std::__shared_weak_count **)(v283 + 8);
        if (v297)
        {
          v402 = (unint64_t *)&v297->__shared_owners_;
          do
            v403 = __ldxr(v402);
          while (__stxr(v403 + 1, v402));
          do
            v404 = __ldaxr(v402);
          while (__stlxr(v404 - 1, v402));
          if (!v404)
          {
LABEL_681:
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
          }
        }
      }
LABEL_488:
      v293 = *(_QWORD *)(v425 + 8);
    }
    if (v283 != v293)
    {
      v427 = *(_OWORD *)&v468.__r_.__value_.__l.__data_;
      if (v468.__r_.__value_.__l.__size_)
      {
        v303 = (unint64_t *)(v468.__r_.__value_.__l.__size_ + 8);
        do
          v304 = __ldxr(v303);
        while (__stxr(v304 + 1, v303));
      }
      Pipeline::insert_module(v260, (uint64_t *)v283, (uint64_t *)&v427);
      v305 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
      if (*((_QWORD *)&v427 + 1))
      {
        v306 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
        do
          v307 = __ldaxr(v306);
        while (__stlxr(v307 - 1, v306));
        if (!v307)
        {
          ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
          std::__shared_weak_count::__release_weak(v305);
        }
      }
    }
    v308 = (std::__shared_weak_count *)v468.__r_.__value_.__l.__size_;
    if (v468.__r_.__value_.__l.__size_)
    {
      v309 = (unint64_t *)(v468.__r_.__value_.__l.__size_ + 8);
      do
        v310 = __ldaxr(v309);
      while (__stlxr(v310 - 1, v309));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v484[8], v484[0]);
    v260 = v480;
  }
  v311 = v260[4];
  v312 = v260[5];
  if (v311 != v312)
  {
    while (1)
    {
      v313 = *(const void **)v311;
      v314 = *(std::__shared_weak_count **)(v311 + 8);
      if (v314)
      {
        v315 = (unint64_t *)&v314->__shared_owners_;
        do
          v316 = __ldxr(v315);
        while (__stxr(v316 + 1, v315));
      }
      if (v313
      {
        break;
      }
      if (v314)
      {
        v317 = (unint64_t *)&v314->__shared_owners_;
        do
          v318 = __ldaxr(v317);
        while (__stlxr(v318 - 1, v317));
        if (!v318)
        {
          ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
          std::__shared_weak_count::__release_weak(v314);
        }
      }
      v311 += 16;
      if (v311 == v312)
      {
        v311 = v312;
        goto LABEL_517;
      }
    }
    if (v314)
    {
      v371 = (unint64_t *)&v314->__shared_owners_;
      do
        v372 = __ldxr(v371);
      while (__stxr(v372 + 1, v371));
      do
        v373 = __ldaxr(v371);
      while (__stlxr(v373 - 1, v371));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
      do
        v374 = __ldaxr(v371);
      while (__stlxr(v374 - 1, v371));
      if (!v374)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
    }
  }
LABEL_517:
  if (v311 == v260[5])
  {
    v320 = 0;
    v319 = 0;
  }
  else
  {
    v320 = *(const void **)v311;
    v319 = *(std::__shared_weak_count **)(v311 + 8);
    if (v319)
    {
      v321 = (unint64_t *)&v319->__shared_owners_;
      do
        v322 = __ldxr(v321);
      while (__stxr(v322 + 1, v321));
    }
  }
  v323 = v260[1];
  if (v323 != v260[2])
  {
    while (1)
    {
      v324 = *(const void **)v323;
      if (*(_QWORD *)v323)
      {
        if (!v325)
          goto LABEL_705;
        v326 = v325;
        v327 = *(std::__shared_weak_count **)(v323 + 8);
        if (v327)
        {
          v328 = (unint64_t *)&v327->__shared_owners_;
          do
            v329 = __ldxr(v328);
          while (__stxr(v329 + 1, v328));
        }
        v330 = (const void *)v325[34];
        if (v330
        {
          v387 = (std::__shared_weak_count *)v326[35];
          if (v387)
          {
            v388 = (unint64_t *)&v387->__shared_owners_;
            do
              v389 = __ldxr(v388);
            while (__stxr(v389 + 1, v388));
            do
              v390 = __ldaxr(v388);
            while (__stlxr(v390 - 1, v388));
            if (!v390)
            {
              ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
              std::__shared_weak_count::__release_weak(v387);
            }
          }
          if (v327)
          {
            v391 = (unint64_t *)&v327->__shared_owners_;
            do
              v392 = __ldaxr(v391);
            while (__stlxr(v392 - 1, v391));
            if (!v392)
              goto LABEL_645;
          }
          goto LABEL_539;
        }
        if (v327)
        {
          v331 = (unint64_t *)&v327->__shared_owners_;
          do
            v332 = __ldaxr(v331);
          while (__stlxr(v332 - 1, v331));
          if (!v332)
          {
            ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
            std::__shared_weak_count::__release_weak(v327);
          }
        }
        v324 = *(const void **)v323;
        if (*(_QWORD *)v323)
        {
LABEL_705:
          {
            break;
          }
        }
      }
      v323 += 16;
      if (v323 == v260[2])
        goto LABEL_539;
    }
    v327 = *(std::__shared_weak_count **)(v323 + 8);
    if (v327)
    {
      v378 = (unint64_t *)&v327->__shared_owners_;
      do
        v379 = __ldxr(v378);
      while (__stxr(v379 + 1, v378));
      do
        v380 = __ldaxr(v378);
      while (__stlxr(v380 - 1, v378));
      if (!v380)
      {
LABEL_645:
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
    }
  }
LABEL_539:
  if (v260[2] == v323)
  {
    v353 = v481;
    *v421 = v260;
    v421[1] = v353;
    v481 = 0;
    v480 = 0;
  }
  else
  {
    v333 = *(const void **)v323;
    if (*(_QWORD *)v323
    {
      v335 = *(std::__shared_weak_count **)(v323 + 8);
      if (v335)
      {
        v336 = (unint64_t *)&v335->__shared_owners_;
        do
          v337 = __ldxr(v336);
        while (__stxr(v337 + 1, v336));
      }
      v333 = (const void *)*((_QWORD *)v334 + 34);
      v338 = (std::__shared_weak_count *)*((_QWORD *)v334 + 35);
      if (v338)
      {
        v339 = (unint64_t *)&v338->__shared_owners_;
        do
          v340 = __ldxr(v339);
        while (__stxr(v340 + 1, v339));
      }
      if (v335)
      {
        v341 = (unint64_t *)&v335->__shared_owners_;
        do
          v342 = __ldaxr(v341);
        while (__stlxr(v342 - 1, v341));
        if (!v342)
        {
          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
          std::__shared_weak_count::__release_weak(v335);
        }
      }
    }
    else
    {
      v338 = *(std::__shared_weak_count **)(v323 + 8);
      if (v338)
      {
        v343 = (unint64_t *)&v338->__shared_owners_;
        do
          v344 = __ldxr(v343);
        while (__stxr(v344 + 1, v343));
      }
    }
    if (v333 && v320)
    {
      if (v319)
      {
        v345 = (unint64_t *)&v319->__shared_owners_;
        do
          v346 = __ldxr(v345);
        while (__stxr(v346 + 1, v345));
      }
      v347 = (std::__shared_weak_count *)*((_QWORD *)v333 + 35);
      *((_QWORD *)v333 + 34) = v320;
      *((_QWORD *)v333 + 35) = v319;
      if (v347)
      {
        v348 = (unint64_t *)&v347->__shared_owners_;
        do
          v349 = __ldaxr(v348);
        while (__stlxr(v349 - 1, v348));
        if (!v349)
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
      }
    }
    v350 = v481;
    *v421 = v260;
    v421[1] = v350;
    v481 = 0;
    v480 = 0;
    if (v338)
    {
      v351 = (unint64_t *)&v338->__shared_owners_;
      do
        v352 = __ldaxr(v351);
      while (__stlxr(v352 - 1, v351));
      if (!v352)
      {
        ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
        std::__shared_weak_count::__release_weak(v338);
      }
    }
  }
  if (v319)
  {
    v354 = (unint64_t *)&v319->__shared_owners_;
    do
      v355 = __ldaxr(v354);
    while (__stlxr(v355 - 1, v354));
    if (!v355)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v451, v450[0]);
  v356 = v453;
  if (v453)
  {
    v357 = (unint64_t *)&v453->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  *(_QWORD *)buf = &v471;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v359 = v475;
  if (v475)
  {
    v360 = (unint64_t *)&v475->__shared_owners_;
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
  v362 = v477;
  if (v477)
  {
    v363 = (unint64_t *)&v477->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  v365 = v479;
  if (v479)
  {
    v366 = (unint64_t *)&v479->__shared_owners_;
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  v368 = v481;
  if (v481)
  {
    v369 = (unint64_t *)&v481->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
      std::__shared_weak_count::__release_weak(v368);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v483, v482[0]);
}

void sub_1DEA0EF80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v7;

  if (*(char *)(v5 - 185) < 0)
  {
    operator delete(*(void **)(v5 - 208));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      if (SLOBYTE(STACK[0x307]) < 0)
        operator delete((void *)STACK[0x2F0]);
      std::__tree<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<std::shared_ptr<Module> ()(nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const&,std::shared_ptr<SharedObjectPool>)>>>>::destroy(*(_QWORD **)(v3 + 40));
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v3);
      operator delete(v7);
      std::recursive_mutex::unlock(v1);
      STACK[0x260] = (unint64_t)&STACK[0x288];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2D0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&STACK[0x2E8], LOBYTE(STACK[0x2E0]));
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v2);
  goto LABEL_6;
}

void std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        if (*((char *)v4 - 49) < 0)
          operator delete(*(v4 - 9));
        v4 -= 9;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL GryphonPipelineFactory::is_fe_module(_QWORD *__s)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;

  v1 = __s;
  if (*((char *)__s + 23) < 0)
  {
    v1 = (_QWORD *)*__s;
    v2 = __s[1];
  }
  else
  {
    v2 = *((unsigned __int8 *)__s + 23);
  }
  v3 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    v4 = v1;
    do
    {
      v5 = (char *)memchr(v4, 102, v2 - 2);
      if (!v5)
        break;
      if (*(_WORD *)v5 == 25958 && v5[2] == 47)
        return v5 != v3 && v5 - (char *)v1 != -1;
      v4 = v5 + 1;
      v2 = v3 - (_BYTE *)v4;
    }
    while (v3 - (_BYTE *)v4 > 2);
  }
  v5 = v3;
  return v5 != v3 && v5 - (char *)v1 != -1;
}

void std::__shared_ptr_emplace<FrontendFeatureLogModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FrontendFeatureLogModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FrontendFeatureLogModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PipelineModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PipelineModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PipelineModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<ConnectionFactory>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923348;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<ConnectionFactory>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923348;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<AsyncContainerModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AsyncContainerModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933D28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AsyncContainerModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<StreamingPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StreamingPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<StreamingPipeline>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;

  *(_QWORD *)(a1 + 24) = off_1EA922A48;
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((_QWORD *)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
        v3 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3 - 16);
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v5 = (void **)(a1 + 32);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void GryphonPipelineFactory::nashvilleFE_backend_pipeline(_QWORD *a1, uint64_t *a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44[2];
  uint64_t v45[2];
  _BYTE v46[8];
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49[4];
  _BYTE v50[8];
  uint64_t *v51;
  _BYTE v52[8];
  uint64_t *v53;
  char v54;
  uint64_t *v55;
  unsigned __int8 v56[8];
  uint64_t *v57;
  _BYTE v58[8];
  uint64_t *v59;
  _BYTE v60[8];
  uint64_t *v61;
  void *__p;
  _QWORD *v63;
  void **p_p;
  char v65;
  _BYTE v66[8];
  uint64_t *v67;
  _BYTE *v68;
  char v69;
  unsigned __int8 **v70;
  _QWORD *v71;
  void ***v72;
  char v73;
  _BYTE v74[8];
  _QWORD *v75;
  _BYTE *v76;
  char v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unsigned __int8 **v80;
  char v81;
  _BYTE v82[16];
  _BYTE *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v60[0] = 0;
  v61 = 0;
  GryphonPipelineFactory::shared_gryphon_backend_pipeline((GryphonPipelineFactory *)v58);
  v4 = v60[0];
  v60[0] = v58[0];
  v58[0] = v4;
  v5 = v61;
  v61 = v59;
  v59 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, v4);
  v71 = 0;
  LOBYTE(v70) = 3;
  v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v72 = (void ***)&v70;
  v73 = 1;
  v75 = 0;
  v74[0] = 3;
  v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
  v76 = v74;
  v77 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v78, (uint64_t)&v70, 2, 1, 2);
  v80 = (unsigned __int8 **)&v78;
  v81 = 1;
  v63 = 0;
  LOBYTE(__p) = 3;
  v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v65 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v48, 0, 0, 0, 1);
  v66[0] = v48;
  v6 = v49[0];
  LOBYTE(v48) = 0;
  v49[0] = 0;
  v67 = v6;
  v68 = v66;
  v69 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v82, (uint64_t)&__p, 2, 1, 2);
  v83 = v82;
  v84 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v56, (uint64_t)&v78, 2, 1, 2);
  for (i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[i + 8], v82[i]);
  for (j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v67)[j], v66[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v49, v48);
  for (k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v75)[k], v74[k * 8]);
  v54 = 4;
  v55 = 0;
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "params");
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "enable_print");
  v12 = *(unsigned __int8 *)v11;
  *(_BYTE *)v11 = v54;
  v54 = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v55;
  v55 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v55, v12);
  if (v60[0] == 2)
    v14 = (_BYTE *)*v61;
  else
    v14 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v78, v60, (uint64_t)v60, v14, (uint64_t)v56);
  if (v60[0] == 2)
    v15 = (_BYTE *)*v61;
  else
    v15 = 0;
  v71 = 0;
  LOBYTE(v70) = 3;
  v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v72 = (void ***)&v70;
  v73 = 1;
  v75 = 0;
  v74[0] = 3;
  v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
  v76 = v74;
  v77 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v78, (uint64_t)&v70, 2, 1, 2);
  v80 = (unsigned __int8 **)&v78;
  v81 = 1;
  v63 = 0;
  LOBYTE(__p) = 3;
  v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v65 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v50, 0, 0, 0, 1);
  v66[0] = v50[0];
  v16 = v51;
  v50[0] = 0;
  v51 = 0;
  v67 = v16;
  v68 = v66;
  v69 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v82, (uint64_t)&__p, 2, 1, 2);
  v83 = v82;
  v84 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v52, (uint64_t)&v78, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v48, v60, (uint64_t)v60, v15, (uint64_t)v52);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v53, v52[0]);
  for (m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[m + 8], v82[m]);
  for (n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v67)[n], v66[n * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v51, v50[0]);
  for (ii = 0; ii != -8; ii -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v75)[ii], v74[ii * 8]);
  if (v60[0] == 2)
    v20 = (_BYTE *)*v61;
  else
    v20 = 0;
  v71 = 0;
  LOBYTE(v70) = 3;
  v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v72 = (void ***)&v70;
  v73 = 1;
  v75 = 0;
  v74[0] = 3;
  v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
  v76 = v74;
  v77 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v78, (uint64_t)&v70, 2, 1, 2);
  v80 = (unsigned __int8 **)&v78;
  v81 = 1;
  v63 = 0;
  LOBYTE(__p) = 3;
  v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v65 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v50, 0, 0, 0, 1);
  v66[0] = v50[0];
  v21 = v51;
  v50[0] = 0;
  v51 = 0;
  v67 = v21;
  v68 = v66;
  v69 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v82, (uint64_t)&__p, 2, 1, 2);
  v83 = v82;
  v84 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v52, (uint64_t)&v78, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v48, v60, (uint64_t)v60, v20, (uint64_t)v52);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v53, v52[0]);
  for (jj = 0; jj != -64; jj -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[jj + 8], v82[jj]);
  for (kk = 0; kk != -8; kk -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v67)[kk], v66[kk * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v51, v50[0]);
  for (mm = 0; mm != -8; mm -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v75)[mm], v74[mm * 8]);
  LOBYTE(v48) = 0;
  v49[0] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v46, (uint64_t)v60);
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v48, "pipeline");
  v26 = *(unsigned __int8 *)v25;
  *(_BYTE *)v25 = v46[0];
  v46[0] = v26;
  v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v47;
  v47 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v47, v26);
  v28 = *a2;
  v78 = 0;
  v79 = 0;
  v29 = *(std::__shared_weak_count **)(v28 + 24);
  if (v29)
  {
    v29 = std::__shared_weak_count::lock(v29);
    v79 = v29;
    if (v29)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 16);
      v78 = v29;
    }
  }
  v30 = (std::__shared_weak_count *)a2[1];
  v45[0] = *a2;
  v45[1] = (uint64_t)v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  PersistentModuleFactory::load_from_config(v29, (uint64_t)&v48, v45);
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v35 = v79;
  if (v79)
  {
    v36 = (unint64_t *)&v79->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *a2;
  v39 = (std::__shared_weak_count *)a2[1];
  v44[0] = v38;
  v44[1] = (uint64_t)v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v70, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
  GryphonPipelineFactory::pipeline_from_config(a1, v44, (uint64_t)&v48, (unsigned __int8 **)&v78, (uint64_t)&v70, (const void **)&__p);
  if (SHIBYTE(p_p) < 0)
    operator delete(__p);
  if (SHIBYTE(v72) < 0)
    operator delete(v70);
  v70 = (unsigned __int8 **)&v78;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v49, v48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v57, v56[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v61, v60[0]);
}

void sub_1DEA100B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t **v37;
  uint64_t **v38;
  uint64_t v39;

  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 193) < 0)
    operator delete(*(void **)(v39 - 216));
  *(_QWORD *)(v39 - 216) = v39 - 152;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 216));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v38, a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a27, a26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v37, a30);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::shared_gryphon_backend_pipeline(GryphonPipelineFactory *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  _BYTE v39[8];
  uint64_t *v40;
  _BYTE v41[8];
  uint64_t *v42;
  _BYTE v43[8];
  uint64_t *v44;
  _BYTE v45[8];
  uint64_t *v46;
  _BYTE v47[8];
  uint64_t *v48;
  _BYTE v49[8];
  uint64_t *v50;
  _BYTE v51[8];
  uint64_t *v52;
  _BYTE v53[8];
  uint64_t *v54;
  _BYTE v55[8];
  uint64_t *v56;
  char v57[8];
  _QWORD *v58;
  char *v59;
  char v60;
  _BYTE v61[8];
  _QWORD v62[2];
  char v63;
  char v64[8];
  _QWORD *v65;
  char *v66;
  char v67;
  _BYTE v68[8];
  _QWORD v69[2];
  char v70;
  _BYTE v71[16];
  _BYTE *v72;
  char v73;
  _BYTE v74[16];
  _BYTE *v75;
  char v76;
  char v77[8];
  _QWORD *v78;
  char *v79;
  char v80;
  _BYTE v81[8];
  _QWORD v82[2];
  char v83;
  char v84[8];
  _QWORD *v85;
  char *v86;
  char v87;
  _BYTE v88[8];
  _QWORD v89[2];
  char v90;
  _BYTE v91[16];
  _BYTE *v92;
  char v93;
  _BYTE v94[16];
  _BYTE *v95;
  char v96;
  char v97[8];
  _QWORD *v98;
  char *v99;
  char v100;
  _BYTE v101[8];
  _QWORD v102[2];
  char v103;
  char v104[8];
  _QWORD *v105;
  char *v106;
  char v107;
  _BYTE v108[8];
  _QWORD v109[2];
  char v110;
  _BYTE v111[16];
  _BYTE *v112;
  char v113;
  _BYTE v114[16];
  _BYTE *v115;
  char v116;
  char v117[8];
  _QWORD *v118;
  char *v119;
  char v120;
  _BYTE v121[8];
  _QWORD v122[2];
  char v123;
  char v124[8];
  _QWORD *v125;
  char *v126;
  char v127;
  _BYTE v128[8];
  _QWORD v129[2];
  char v130;
  _BYTE v131[16];
  _BYTE *v132;
  char v133;
  _BYTE v134[16];
  _BYTE *v135;
  char v136;
  char v137[8];
  _QWORD *v138;
  char *v139;
  char v140;
  _BYTE v141[8];
  _QWORD v142[2];
  char v143;
  char v144[8];
  _QWORD *v145;
  char *v146;
  char v147;
  _BYTE v148[8];
  _QWORD v149[2];
  char v150;
  _BYTE v151[16];
  _BYTE *v152;
  char v153;
  _BYTE v154[16];
  _BYTE *v155;
  char v156;
  char v157[8];
  _QWORD *v158;
  char *v159;
  char v160;
  _BYTE v161[8];
  _QWORD v162[2];
  char v163;
  char v164[8];
  _QWORD *v165;
  char *v166;
  char v167;
  _BYTE v168[8];
  _QWORD v169[2];
  char v170;
  _BYTE v171[16];
  _BYTE *v172;
  char v173;
  _BYTE v174[16];
  _BYTE *v175;
  char v176;
  char v177[8];
  _QWORD *v178;
  char *v179;
  char v180;
  _BYTE v181[8];
  _QWORD v182[2];
  char v183;
  char v184[8];
  _QWORD *v185;
  char *v186;
  char v187;
  _BYTE v188[8];
  _QWORD v189[2];
  char v190;
  _BYTE v191[16];
  _BYTE *v192;
  char v193;
  _BYTE v194[16];
  _BYTE *v195;
  char v196;
  char v197[8];
  _QWORD *v198;
  char *v199;
  char v200;
  _BYTE v201[8];
  _QWORD v202[2];
  char v203;
  char v204[8];
  _QWORD *v205;
  char *v206;
  char v207;
  _BYTE v208[8];
  _QWORD v209[2];
  char v210;
  _BYTE v211[16];
  _BYTE *v212;
  char v213;
  _BYTE v214[16];
  _BYTE *v215;
  char v216;
  char v217[8];
  _QWORD *v218;
  char *v219;
  char v220;
  _BYTE v221[8];
  _QWORD v222[2];
  char v223;
  char v224[8];
  _QWORD *v225;
  char *v226;
  char v227;
  _BYTE v228[8];
  _QWORD v229[2];
  char v230;
  _BYTE v231[16];
  _BYTE *v232;
  char v233;
  _BYTE v234[16];
  _BYTE *v235;
  char v236;
  _BYTE v237[16];
  _BYTE *v238;
  char v239;
  _QWORD v240[3];
  char v241;
  _QWORD v242[3];
  char v243;
  _QWORD v244[3];
  char v245;
  _QWORD v246[3];
  char v247;
  _QWORD v248[3];
  char v249;
  _QWORD v250[3];
  char v251;
  _QWORD v252[3];
  char v253;
  _QWORD v254[3];
  char v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  v224[0] = 3;
  v225 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v226 = v224;
  v227 = 1;
  v229[0] = 0;
  v228[0] = 3;
  v229[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("unit_feature_predict");
  v229[1] = v228;
  v230 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v231, (uint64_t)v224, 2, 1, 2);
  v232 = v231;
  v233 = 1;
  v217[0] = 3;
  v218 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v219 = v217;
  v220 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, 0, 0, 0, 1);
  v221[0] = v55[0];
  v2 = v56;
  v55[0] = 0;
  v56 = 0;
  v222[0] = v2;
  v222[1] = v221;
  v223 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v234, (uint64_t)v217, 2, 1, 2);
  v235 = v234;
  v236 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v237, (uint64_t)v231, 2, 1, 2);
  v238 = v237;
  v239 = 1;
  v205 = 0;
  v204[0] = 3;
  v205 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v206 = v204;
  v207 = 1;
  v209[0] = 0;
  v208[0] = 3;
  v209[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>("unit_preselect");
  v209[1] = v208;
  v210 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v211, (uint64_t)v204, 2, 1, 2);
  v212 = v211;
  v213 = 1;
  v198 = 0;
  v197[0] = 3;
  v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v199 = v197;
  v200 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v53, 0, 0, 0, 1);
  v201[0] = v53[0];
  v3 = v54;
  v53[0] = 0;
  v54 = 0;
  v202[0] = v3;
  v202[1] = v201;
  v203 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v214, (uint64_t)v197, 2, 1, 2);
  v215 = v214;
  v216 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v240, (uint64_t)v211, 2, 1, 2);
  v240[2] = v240;
  v241 = 1;
  v185 = 0;
  v184[0] = 3;
  v185 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v186 = v184;
  v187 = 1;
  v189[0] = 0;
  v188[0] = 3;
  v189[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>("viterbi");
  v189[1] = v188;
  v190 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v191, (uint64_t)v184, 2, 1, 2);
  v192 = v191;
  v193 = 1;
  v178 = 0;
  v177[0] = 3;
  v178 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v179 = v177;
  v180 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, 0, 0, 0, 1);
  v181[0] = v51[0];
  v4 = v52;
  v51[0] = 0;
  v52 = 0;
  v182[0] = v4;
  v182[1] = v181;
  v183 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v194, (uint64_t)v177, 2, 1, 2);
  v195 = v194;
  v196 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v242, (uint64_t)v191, 2, 1, 2);
  v242[2] = v242;
  v243 = 1;
  v165 = 0;
  v164[0] = 3;
  v165 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v166 = v164;
  v167 = 1;
  v169[0] = 0;
  v168[0] = 3;
  v169[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("unit_segment");
  v169[1] = v168;
  v170 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v171, (uint64_t)v164, 2, 1, 2);
  v172 = v171;
  v173 = 1;
  v158 = 0;
  v157[0] = 3;
  v158 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v159 = v157;
  v160 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v49, 0, 0, 0, 1);
  v161[0] = v49[0];
  v5 = v50;
  v49[0] = 0;
  v50 = 0;
  v162[0] = v5;
  v162[1] = v161;
  v163 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v174, (uint64_t)v157, 2, 1, 2);
  v175 = v174;
  v176 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v244, (uint64_t)v171, 2, 1, 2);
  v244[2] = v244;
  v245 = 1;
  v145 = 0;
  v144[0] = 3;
  v145 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v146 = v144;
  v147 = 1;
  v149[0] = 0;
  v148[0] = 3;
  v149[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>("psola");
  v149[1] = v148;
  v150 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v151, (uint64_t)v144, 2, 1, 2);
  v152 = v151;
  v153 = 1;
  v138 = 0;
  v137[0] = 3;
  v138 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v139 = v137;
  v140 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, 0, 0, 0, 1);
  v141[0] = v47[0];
  v6 = v48;
  v47[0] = 0;
  v48 = 0;
  v142[0] = v6;
  v142[1] = v141;
  v143 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v154, (uint64_t)v137, 2, 1, 2);
  v155 = v154;
  v156 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v246, (uint64_t)v151, 2, 1, 2);
  v246[2] = v246;
  v247 = 1;
  v125 = 0;
  v124[0] = 3;
  v125 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v126 = v124;
  v127 = 1;
  v129[0] = 0;
  v128[0] = 3;
  v129[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>("wsola");
  v129[1] = v128;
  v130 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v131, (uint64_t)v124, 2, 1, 2);
  v132 = v131;
  v133 = 1;
  v118 = 0;
  v117[0] = 3;
  v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v119 = v117;
  v120 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v45, 0, 0, 0, 1);
  v121[0] = v45[0];
  v7 = v46;
  v45[0] = 0;
  v46 = 0;
  v122[0] = v7;
  v122[1] = v121;
  v123 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v134, (uint64_t)v117, 2, 1, 2);
  v135 = v134;
  v136 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v248, (uint64_t)v131, 2, 1, 2);
  v248[2] = v248;
  v249 = 1;
  v105 = 0;
  v104[0] = 3;
  v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v106 = v104;
  v107 = 1;
  v109[0] = 0;
  v108[0] = 3;
  v8 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v8, "silence_trimming");
  v109[0] = v8;
  v109[1] = v108;
  v110 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v111, (uint64_t)v104, 2, 1, 2);
  v112 = v111;
  v113 = 1;
  v98 = 0;
  v97[0] = 3;
  v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v99 = v97;
  v100 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v43, 0, 0, 0, 1);
  v101[0] = v43[0];
  v9 = v44;
  v43[0] = 0;
  v44 = 0;
  v102[0] = v9;
  v102[1] = v101;
  v103 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v114, (uint64_t)v97, 2, 1, 2);
  v115 = v114;
  v116 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v250, (uint64_t)v111, 2, 1, 2);
  v250[2] = v250;
  v251 = 1;
  v85 = 0;
  v84[0] = 3;
  v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v86 = v84;
  v87 = 1;
  v89[0] = 0;
  v88[0] = 3;
  v89[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>("whisper");
  v89[1] = v88;
  v90 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v91, (uint64_t)v84, 2, 1, 2);
  v92 = v91;
  v93 = 1;
  v78 = 0;
  v77[0] = 3;
  v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v79 = v77;
  v80 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v41, 0, 0, 0, 1);
  v81[0] = v41[0];
  v10 = v42;
  v41[0] = 0;
  v42 = 0;
  v82[0] = v10;
  v82[1] = v81;
  v83 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v94, (uint64_t)v77, 2, 1, 2);
  v95 = v94;
  v96 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v252, (uint64_t)v91, 2, 1, 2);
  v252[2] = v252;
  v253 = 1;
  v65 = 0;
  v64[0] = 3;
  v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v66 = v64;
  v67 = 1;
  v69[0] = 0;
  v68[0] = 3;
  v69[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("audio_marker");
  v69[1] = v68;
  v70 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)v64, 2, 1, 2);
  v72 = v71;
  v73 = 1;
  v58 = 0;
  v57[0] = 3;
  v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  v59 = v57;
  v60 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v39, 0, 0, 0, 1);
  v61[0] = v39[0];
  v11 = v40;
  v39[0] = 0;
  v40 = 0;
  v62[0] = v11;
  v62[1] = v61;
  v63 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, (uint64_t)v57, 2, 1, 2);
  v75 = v74;
  v76 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v254, (uint64_t)v71, 2, 1, 2);
  v254[2] = v254;
  v255 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)this, (uint64_t)v237, 9, 1, 2);
  v12 = 288;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v234[v12 + 8], v234[v12]);
    v12 -= 32;
  }
  while (v12);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v74[v12 + 8], v74[v12]);
    v12 -= 32;
  }
  while (v12 != -64);
  for (i = 0; i != -8; i -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v62[i], v61[i * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v39[0]);
  for (j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v69[j], v68[j * 8]);
  for (k = 0; k != -64; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v94[k + 8], v94[k]);
  for (m = 0; m != -8; m -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[m], v81[m * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v41[0]);
  for (n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v89[n], v88[n * 8]);
  for (ii = 0; ii != -64; ii -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v114[ii + 8], v114[ii]);
  for (jj = 0; jj != -8; jj -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v102[jj], v101[jj * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
  for (kk = 0; kk != -8; kk -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v109[kk], v108[kk * 8]);
  for (mm = 0; mm != -64; mm -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v134[mm + 8], v134[mm]);
  for (nn = 0; nn != -8; nn -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v122[nn], v121[nn * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
  for (i1 = 0; i1 != -8; i1 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v129[i1], v128[i1 * 8]);
  for (i2 = 0; i2 != -64; i2 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v154[i2 + 8], v154[i2]);
  for (i3 = 0; i3 != -8; i3 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v142[i3], v141[i3 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
  for (i4 = 0; i4 != -8; i4 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v149[i4], v148[i4 * 8]);
  for (i5 = 0; i5 != -64; i5 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v174[i5 + 8], v174[i5]);
  for (i6 = 0; i6 != -8; i6 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v162[i6], v161[i6 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  for (i7 = 0; i7 != -8; i7 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v169[i7], v168[i7 * 8]);
  for (i8 = 0; i8 != -64; i8 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v194[i8 + 8], v194[i8]);
  for (i9 = 0; i9 != -8; i9 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v182[i9], v181[i9 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  for (i10 = 0; i10 != -8; i10 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v189[i10], v188[i10 * 8]);
  for (i11 = 0; i11 != -64; i11 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v214[i11 + 8], v214[i11]);
  for (i12 = 0; i12 != -8; i12 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v202[i12], v201[i12 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  for (i13 = 0; i13 != -8; i13 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v209[i13], v208[i13 * 8]);
  for (i14 = 0; i14 != -64; i14 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v234[i14 + 8], v234[i14]);
  for (i15 = 0; i15 != -8; i15 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v222[i15], v221[i15 * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
  for (i16 = 0; i16 != -8; i16 -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v229[i16], v228[i16 * 8]);
}

void sub_1DEA114C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t **a13, uint64_t **a14, _Unwind_Exception *exception_objecta, uint64_t **a16, uint64_t **a17, uint64_t **a18, uint64_t **a19, uint64_t **a20,uint64_t **a21,uint64_t **a22,unsigned __int8 a23,uint64_t a24,unsigned __int8 a25,uint64_t a26,unsigned __int8 a27,uint64_t a28,unsigned __int8 a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,uint64_t a36,unsigned __int8 a37,uint64_t a38,unsigned __int8 a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;

  v66 = 288;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v65 + v66 - 24), *(unsigned __int8 *)(v65 + v66 - 32));
    v66 -= 32;
  }
  while (v66);
  for (i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a57 + i + 40), *(&a57 + i + 32));
  for (j = 0; j != -64; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a41 + j + 40), *(&a41 + j + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a13, a23);
  for (k = 0; k != -64; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a49 + k + 40), *(&a49 + k + 32));
  for (m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x240] + m + 40), *((unsigned __int8 *)&STACK[0x240] + m + 32));
  for (n = 0; n != -64; n -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a65 + n + 40), *(&a65 + n + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a14, a25);
  for (ii = 0; ii != -64; ii -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x200] + ii + 40), *((unsigned __int8 *)&STACK[0x200] + ii + 32));
  for (jj = 0; jj != -64; jj -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x300] + jj + 40), *((unsigned __int8 *)&STACK[0x300] + jj + 32));
  for (kk = 0; kk != -64; kk -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x280] + kk + 40), *((unsigned __int8 *)&STACK[0x280] + kk + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a16, a27);
  for (mm = 0; mm != -64; mm -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x2C0] + mm + 40), *((unsigned __int8 *)&STACK[0x2C0] + mm + 32));
  for (nn = 0; nn != -64; nn -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x3C0] + nn + 40), *((unsigned __int8 *)&STACK[0x3C0] + nn + 32));
  for (i1 = 0; i1 != -64; i1 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x340] + i1 + 40), *((unsigned __int8 *)&STACK[0x340] + i1 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a17, a29);
  for (i2 = 0; i2 != -64; i2 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x380] + i2 + 40), *((unsigned __int8 *)&STACK[0x380] + i2 + 32));
  for (i3 = 0; i3 != -64; i3 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x480] + i3 + 40), *((unsigned __int8 *)&STACK[0x480] + i3 + 32));
  for (i4 = 0; i4 != -64; i4 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x400] + i4 + 40), *((unsigned __int8 *)&STACK[0x400] + i4 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a18, a31);
  for (i5 = 0; i5 != -64; i5 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x440] + i5 + 40), *((unsigned __int8 *)&STACK[0x440] + i5 + 32));
  for (i6 = 0; i6 != -64; i6 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x540] + i6 + 40), *((unsigned __int8 *)&STACK[0x540] + i6 + 32));
  for (i7 = 0; i7 != -64; i7 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x4C0] + i7 + 40), *((unsigned __int8 *)&STACK[0x4C0] + i7 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a19, a33);
  for (i8 = 0; i8 != -64; i8 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x500] + i8 + 40), *((unsigned __int8 *)&STACK[0x500] + i8 + 32));
  for (i9 = 0; i9 != -64; i9 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x600] + i9 + 40), *((unsigned __int8 *)&STACK[0x600] + i9 + 32));
  for (i10 = 0; i10 != -64; i10 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x580] + i10 + 40), *((unsigned __int8 *)&STACK[0x580] + i10 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a20, a35);
  for (i11 = 0; i11 != -64; i11 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x5C0] + i11 + 40), *((unsigned __int8 *)&STACK[0x5C0] + i11 + 32));
  for (i12 = 0; i12 != -64; i12 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x6C0] + i12 + 40), *((unsigned __int8 *)&STACK[0x6C0] + i12 + 32));
  for (i13 = 0; i13 != -64; i13 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x640] + i13 + 40), *((unsigned __int8 *)&STACK[0x640] + i13 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a21, a37);
  for (i14 = 0; i14 != -64; i14 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x680] + i14 + 40), *((unsigned __int8 *)&STACK[0x680] + i14 + 32));
  for (i15 = 0; i15 != -64; i15 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x780] + i15 + 40), *((unsigned __int8 *)&STACK[0x780] + i15 + 32));
  for (i16 = 0; i16 != -64; i16 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x700] + i16 + 40), *((unsigned __int8 *)&STACK[0x700] + i16 + 32));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a22, a39);
  for (i17 = 0; i17 != -64; i17 -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x740] + i17 + 40), *((unsigned __int8 *)&STACK[0x740] + i17 + 32));
  _Unwind_Resume(a1);
}

void sub_1DEA11C64()
{
  JUMPOUT(0x1DEA11878);
}

void sub_1DEA11C74()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x340]));
  JUMPOUT(0x1DEA118A8);
}

void sub_1DEA11C98()
{
  JUMPOUT(0x1DEA118A8);
}

void sub_1DEA11CAC()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x380]));
  JUMPOUT(0x1DEA118F4);
}

void sub_1DEA11CD0()
{
  JUMPOUT(0x1DEA1191CLL);
}

void sub_1DEA11CE0()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x400]));
  JUMPOUT(0x1DEA1194CLL);
}

void sub_1DEA11D04()
{
  JUMPOUT(0x1DEA1194CLL);
}

void sub_1DEA11D18()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x440]));
  JUMPOUT(0x1DEA11998);
}

void sub_1DEA11D3C()
{
  JUMPOUT(0x1DEA119C0);
}

void sub_1DEA11D4C()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x4C0]));
  JUMPOUT(0x1DEA119F0);
}

void sub_1DEA11D70()
{
  JUMPOUT(0x1DEA119F0);
}

void sub_1DEA11D84()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x500]));
  JUMPOUT(0x1DEA11A3CLL);
}

void sub_1DEA11DA8()
{
  JUMPOUT(0x1DEA11A64);
}

void sub_1DEA11DB8()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x580]));
  JUMPOUT(0x1DEA11A94);
}

void sub_1DEA11DDC()
{
  JUMPOUT(0x1DEA11A94);
}

void sub_1DEA11DF0()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x5C0]));
  JUMPOUT(0x1DEA11AE0);
}

void sub_1DEA11E14()
{
  JUMPOUT(0x1DEA11B08);
}

void sub_1DEA11E24()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x640]));
  JUMPOUT(0x1DEA11B38);
}

void sub_1DEA11E48()
{
  JUMPOUT(0x1DEA11B38);
}

void sub_1DEA11E60()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x680]));
  JUMPOUT(0x1DEA11B8CLL);
}

void sub_1DEA11E80()
{
  JUMPOUT(0x1DEA11B8CLL);
}

void sub_1DEA11E90()
{
  JUMPOUT(0x1DEA11BB4);
}

void sub_1DEA11EA4()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x700]));
  JUMPOUT(0x1DEA11BE4);
}

void sub_1DEA11ECC()
{
  JUMPOUT(0x1DEA11BE4);
}

void sub_1DEA11EE8()
{
  uint64_t **v0;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v0, LOBYTE(STACK[0x740]));
  JUMPOUT(0x1DEA11C5CLL);
}

void sub_1DEA11EFC()
{
  JUMPOUT(0x1DEA11C5CLL);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(_QWORD *a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  std::string::size_type size;
  std::string::size_type v33;
  char *v34;
  int64x2_t v35;
  char *v36;
  nlohmann::detail::exception *exception;
  unint64_t v38;
  char *v39;
  nlohmann::detail::exception *v40;
  std::string *v41;
  __int128 v42;
  std::string v43;
  char *v44;
  uint64_t v45;
  _BYTE v46[24];
  char *v47;
  uint64_t v48;

  if (*a2 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v38 = *a2;
    if (v38 > 9)
      v39 = "number";
    else
      v39 = off_1EA94C758[v38];
    std::string::basic_string[abi:ne180100]<0>(&v43, v39);
    v41 = std::string::insert(&v43, 0, "cannot use insert() with ");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    *(_QWORD *)&v46[16] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)v46 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(309, (uint64_t)v46, exception);
  }
  if ((_BYTE *)a3 != a2)
  {
    v40 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v46, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)v46, v40);
  }
  v7 = a5;
  *a1 = a3;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0x8000000000000000;
  v10 = *(uint64_t **)(a3 + 8);
  v12 = *v10;
  v11 = v10[1];
  v13 = (uint64_t)&a4[-*v10];
  v14 = v13 >> 4;
  v15 = *(_QWORD *)(a3 + 8);
  v18 = *(_QWORD *)(v15 + 16);
  v17 = v15 + 16;
  v16 = v18;
  if (v11 >= v18)
  {
    v22 = ((uint64_t)(v11 - v12) >> 4) + 1;
    if (v22 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v23 = v16 - v12;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    v45 = v17;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v17, v24);
    else
      v25 = 0;
    v26 = (std::string::size_type)&v25[16 * v14];
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    v43.__r_.__value_.__l.__size_ = v26;
    v43.__r_.__value_.__r.__words[2] = v26;
    v44 = &v25[16 * v24];
    if (v14 == v24)
    {
      if (v13 < 1)
      {
        if ((_BYTE *)v12 == a4)
          v29 = 1;
        else
          v29 = v13 >> 3;
        v48 = v17;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v17, v29);
        size = v43.__r_.__value_.__l.__size_;
        if (v43.__r_.__value_.__r.__words[2] == v43.__r_.__value_.__l.__size_)
        {
          v35 = vdupq_n_s64(v43.__r_.__value_.__l.__size_);
          v33 = (std::string::size_type)&v30[16 * (v29 >> 2)];
        }
        else
        {
          v33 = (std::string::size_type)&v30[16 * (v29 >> 2)
                                           + v43.__r_.__value_.__r.__words[2]
                                           - v43.__r_.__value_.__l.__size_];
          v34 = &v30[16 * (v29 >> 2)];
          do
          {
            *v34 = *(_BYTE *)size;
            *((_QWORD *)v34 + 1) = *(_QWORD *)(size + 8);
            *(_BYTE *)size = 0;
            *(_QWORD *)(size + 8) = 0;
            v34 += 16;
            size += 16;
          }
          while (v34 != (char *)v33);
          v35 = *(int64x2_t *)&v43.__r_.__value_.__r.__words[1];
        }
        v36 = v44;
        *(_QWORD *)v46 = v43.__r_.__value_.__r.__words[0];
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        v43.__r_.__value_.__l.__size_ = (std::string::size_type)&v30[16 * (v29 >> 2)];
        *(int64x2_t *)&v46[8] = v35;
        v43.__r_.__value_.__r.__words[2] = v33;
        v44 = &v30[16 * v31];
        v47 = v36;
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v46);
        v26 = v43.__r_.__value_.__r.__words[2];
      }
      else
      {
        if (v14 >= -1)
          v27 = v14 + 1;
        else
          v27 = v14 + 2;
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)v46, v26, v26, v26 - 16 * (v27 >> 1));
        v26 = v28;
        v43.__r_.__value_.__l.__size_ -= 16 * (v27 >> 1);
        v43.__r_.__value_.__r.__words[2] = v28;
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v26, v7);
    v43.__r_.__value_.__r.__words[2] += 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v10, &v43, (uint64_t)a4);
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v43);
  }
  else if (a4 == (_BYTE *)v11)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)a4, a5);
    v10[1] = (uint64_t)(a4 + 16);
  }
  else
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__move_range(*(_QWORD *)(a3 + 8), (uint64_t)a4, v11, (uint64_t)(a4 + 16));
    if ((unint64_t)a4 <= v7)
      v7 += 16 * (v10[1] > v7);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v46, v7);
    v19 = *a4;
    *a4 = v46[0];
    v46[0] = v19;
    v20 = v12 + 16 * v14;
    v21 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = *(_QWORD *)&v46[8];
    *(_QWORD *)&v46[8] = v21;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v46[8], v19);
  }
  a1[2] = **(_QWORD **)(a3 + 8) + 16 * v14;
}

void sub_1DEA12294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 + 8) = v23;
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA1235C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA123A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DEA123EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void GryphonPipelineFactory::gryphonFE_backend_pipeline(_QWORD *a1, uint64_t *a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  _BYTE *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34[2];
  uint64_t v35[2];
  _BYTE v36[8];
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  unsigned __int8 v40[8];
  uint64_t *v41;
  unsigned __int8 v42[8];
  uint64_t *v43;
  _BYTE v44[8];
  uint64_t *v45;
  _BYTE v46[8];
  uint64_t *v47;
  void *__p;
  _QWORD *v49;
  void **p_p;
  char v51;
  _BYTE v52[8];
  _QWORD v53[2];
  char v54;
  void *v55;
  _QWORD *v56;
  void **v57;
  char v58;
  _BYTE v59[8];
  _QWORD v60[2];
  char v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unsigned __int8 **v64;
  char v65;
  _BYTE v66[16];
  _BYTE *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v46[0] = 0;
  v47 = 0;
  GryphonPipelineFactory::shared_gryphon_backend_pipeline((GryphonPipelineFactory *)v44);
  v4 = v46[0];
  v46[0] = v44[0];
  v44[0] = v4;
  v5 = v47;
  v47 = v45;
  v45 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v4);
  v56 = 0;
  LOBYTE(v55) = 3;
  v56 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v57 = &v55;
  v58 = 1;
  v60[0] = 0;
  v59[0] = 3;
  v60[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>("frontend_feature_log");
  v60[1] = v59;
  v61 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v62, (uint64_t)&v55, 2, 1, 2);
  v64 = (unsigned __int8 **)&v62;
  v65 = 1;
  v49 = 0;
  LOBYTE(__p) = 3;
  v49 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v51 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, 0, 0, 0, 1);
  v52[0] = v40[0];
  v6 = v41;
  v40[0] = 0;
  v41 = 0;
  v53[0] = v6;
  v53[1] = v52;
  v54 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v66, (uint64_t)&__p, 2, 1, 2);
  v67 = v66;
  v68 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v42, (uint64_t)&v62, 2, 1, 2);
  for (i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v66[i + 8], v66[i]);
  for (j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v53[j], v52[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
  for (k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v60[k], v59[k * 8]);
  v38 = 4;
  v39 = 0;
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "params");
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "enable_print");
  v12 = *(unsigned __int8 *)v11;
  *(_BYTE *)v11 = 4;
  v38 = v12;
  v13 = (uint64_t *)v11[1];
  v11[1] = (uint64_t)v39;
  v39 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v39, v12);
  if (v46[0] == 2)
    v14 = (_BYTE *)*v47;
  else
    v14 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(&v62, v46, (uint64_t)v46, v14, (uint64_t)v42);
  v40[0] = 0;
  v41 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v46);
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v40, "pipeline");
  v16 = *(unsigned __int8 *)v15;
  *(_BYTE *)v15 = v36[0];
  v36[0] = v16;
  v17 = (uint64_t *)v15[1];
  v15[1] = (uint64_t)v37;
  v37 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v16);
  v18 = *a2;
  v62 = 0;
  v63 = 0;
  v19 = *(std::__shared_weak_count **)(v18 + 24);
  if (v19)
  {
    v19 = std::__shared_weak_count::lock(v19);
    v63 = v19;
    if (v19)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 16);
      v62 = v19;
    }
  }
  v20 = (std::__shared_weak_count *)a2[1];
  v35[0] = *a2;
  v35[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  PersistentModuleFactory::load_from_config(v19, (uint64_t)v40, v35);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v25 = v63;
  if (v63)
  {
    v26 = (unint64_t *)&v63->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *a2;
  v29 = (std::__shared_weak_count *)a2[1];
  v34[0] = v28;
  v34[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v55, "pipeline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "connection");
  GryphonPipelineFactory::pipeline_from_config(a1, v34, (uint64_t)v40, (unsigned __int8 **)&v62, (uint64_t)&v55, (const void **)&__p);
  if (SHIBYTE(p_p) < 0)
    operator delete(__p);
  if (SHIBYTE(v57) < 0)
    operator delete(v55);
  v55 = &v62;
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (v29)
  {
    v32 = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v41, v40[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v47, v46[0]);
}

void sub_1DEA128D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, unsigned __int8 a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t **v42;
  uint64_t **v43;
  uint64_t v44;

  if (a31 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  a37 = (void *)(v44 - 136);
  std::vector<TTSSynthesizer::EngineParamsOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v43, a18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a21, a20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v42, a24);
  _Unwind_Resume(a1);
}

uint64_t GryphonPipelineFactory::has_sane_pipeline(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BOOL8 v3;
  unsigned __int8 *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  const char *v10;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t buf[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[8];
  uint64_t *v23;

  if (!*a1)
    return 1;
  if (*a1 == 1)
  {
    v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v1);
    if (v22[0] != 2 || (v2 = *v23, *v23 == v23[1]))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_ERROR, "pipeline isn't a non-empty array: gryphon config has a wrong format", buf, 2u);
      }
      Diagnostics::log(3, "pipeline isn't a non-empty array: gryphon config has a wrong format", v8);
      v3 = 0;
    }
    else
    {
      *(_QWORD *)buf = v22;
      v18 = 0;
      v20 = 0;
      v21 = 0x8000000000000000;
      v19 = v2;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v13 = 0;
        v12 = v22;
        v16 = 0x8000000000000000;
        if (v22[0] == 2)
        {
          v14 = v23[1];
        }
        else if (v22[0] == 1)
        {
          v13 = v23 + 1;
        }
        else
        {
          v16 = 1;
        }
        v3 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)buf, &v12);
        if (v3)
          break;
        v4 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)buf);
        if (*v4 != 1
          || *(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v4, "id") != 3)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v12) = 0;
            _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_ERROR, "pipeline element isn't an object with a string id: gryphon config has a wrong format", (uint8_t *)&v12, 2u);
          }
          Diagnostics::log(3, "pipeline element isn't an object with a string id: gryphon config has a wrong format", v10, v12, v13, v14, v15, v16);
          break;
        }
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)buf);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_ERROR, "gryphon config isn't an object: gryphon config has a wrong format", buf, 2u);
    }
    Diagnostics::log(3, "gryphon config isn't an object: gryphon config has a wrong format", v6);
    return 0;
  }
  return v3;
}

void sub_1DEA12D70(_Unwind_Exception *a1)
{
  uint64_t **v1;
  uint64_t v2;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v1, *(unsigned __int8 *)(v2 - 80));
  _Unwind_Resume(a1);
}

void PhoneTransformModule::~PhoneTransformModule(void **this)
{
  void **v2;

  *this = off_1EA91FAB0;
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  v2 = this + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(this + 34), this[35]);
  Module::~Module((Module *)this);
}

{
  void **v2;

  *this = off_1EA91FAB0;
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 47), this[48]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  v2 = this + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(this + 34), this[35]);
  Module::~Module((Module *)this);
  MEMORY[0x1DF0ED014]();
}

void PhoneTransformModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  int **v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  _QWORD *v10;
  std::string **v11;
  std::string::size_type *v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  std::string::size_type v46;
  char v47;
  std::string *p_buf;
  __int128 v49;
  int data;
  int v51;
  NSObject *v53;
  const char *v54;
  NSObject *v55;
  const char *v56;
  __int128 v57;
  NSObject *v58;
  const char *v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  const std::string::value_type *v62;
  int *v63;
  int v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  char *v69;
  const void **v70;
  _BOOL4 v71;
  void **v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  int *v76;
  NSObject *v77;
  const char *v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  int *v90;
  int v91;
  uint64_t v92;
  char v93;
  int64_t v94;
  std::string *v95;
  char *v96;
  int64_t v97;
  int64_t size;
  std::string *v99;
  char *v100;
  int v101;
  int64_t v102;
  char *v103;
  char *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  std::string::size_type v107;
  NSObject *v108;
  const char *v109;
  std::string *v110;
  std::string *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  int **v119;
  std::string::size_type *v120;
  uint64_t *v121;
  std::string *__str;
  uint64_t **v123;
  int v124;
  int *v125;
  int **v126;
  const void **v127;
  std::string *__s;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  std::string *v134;
  std::string *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::string v140;
  std::string v141;
  std::string v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  std::string v145;
  _BYTE v146[44];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::string __p;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  std::vector<std::string> v156;
  std::string v157;
  int **v158;
  std::__shared_weak_count *v159;
  std::string v160;
  std::string buf;
  uint64_t v162;

  v2 = a2;
  v162 = *MEMORY[0x1E0C80C00];
  v6 = *(int ***)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v158 = v6;
  v159 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  memset(&v157, 0, sizeof(v157));
  memset(&v156, 0, sizeof(v156));
  memset(&v145, 0, sizeof(v145));
  v146[0] = 0;
  *(_QWORD *)&v9 = 0x8000000080000000;
  *((_QWORD *)&v9 + 1) = 0x8000000080000000;
  *(_OWORD *)&v146[4] = v9;
  *(_OWORD *)&v146[20] = v9;
  *(_QWORD *)&v146[36] = 0x8000000080000000;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  memset(&__p, 0, sizeof(__p));
  v151 = v9;
  v152 = v9;
  v153 = v9;
  v154 = v9;
  v155 = 0x7FFFFFFF;
  v10 = operator new(0x30uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1EA936530;
  v10[3] = 0;
  v11 = (std::string **)(v10 + 3);
  v10[4] = 0;
  v10[5] = 0;
  v143 = v10 + 3;
  v144 = (std::__shared_weak_count *)v10;
  if (*(char *)(a1 + 423) < 0)
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
  else
    v142 = *(std::string *)(a1 + 400);
  v12 = (std::string::size_type *)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    v14 = *(_QWORD *)(a1 + 304);
    if (v14 != 5)
    {
      if (v14 != 8)
        goto LABEL_24;
      v13 = (_QWORD *)*v12;
LABEL_14:
      if (*v13 == 0x656C62616C6C7973)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_ERROR, "mapping_level at syllable is under the construction", (uint8_t *)&buf, 2u);
        }
        v17 = "mapping_level at syllable is under the construction";
        goto LABEL_33;
      }
LABEL_24:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        v20 = a1 + 296;
        if (*(char *)(a1 + 319) < 0)
          v20 = *v12;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
        _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_ERROR, "mapping_level at %s is under the construction", (uint8_t *)&buf, 0xCu);
      }
      if (*(char *)(a1 + 319) < 0)
        v12 = (std::string::size_type *)*v12;
      v120 = v12;
      v17 = "mapping_level at %s is under the construction";
LABEL_33:
      Diagnostics::log(3, v17, v16, v120);
      goto LABEL_34;
    }
    if (*(_DWORD *)*v12 != 1852794992 || *(_BYTE *)(*v12 + 4) != 101)
      goto LABEL_24;
  }
  else
  {
    if (*(_BYTE *)(a1 + 319) != 5)
    {
      v13 = (_QWORD *)(a1 + 296);
      if (*(_BYTE *)(a1 + 319) != 8)
        goto LABEL_24;
      goto LABEL_14;
    }
    if (*(_DWORD *)v12 != 1852794992 || *(_BYTE *)(a1 + 300) != 101)
      goto LABEL_24;
  }
  __str = (std::string *)(a1 + 400);
  v34 = *v6;
  v125 = v6[1];
  if (*v6 == v125)
  {
    v119 = v6;
    goto LABEL_261;
  }
  v126 = v6;
  v121 = v2;
  v35 = 0;
  v36 = 0;
  v124 = 0;
  v123 = (uint64_t **)(a1 + 272);
  v127 = (const void **)(a1 + 280);
  v37 = (std::string *)((char *)&v148 + 8);
  v131 = a1 + 384;
  v132 = a1 + 376;
  v38 = a1 + 288;
  v129 = (char **)(a1 + 344);
  v137 = a1;
  v130 = a1 + 288;
  do
  {
    v136 = v34 + 6;
    if (*((_BYTE *)v34 + 24))
      v39 = 1;
    else
      v39 = v34[39] == 0;
    if (!v39)
    {
      v126[3][34 * (int)v35] = v36;
      v124 = v36;
    }
    v135 = (std::string *)(v34 + 24);
    std::string::operator=(&v157, (const std::string *)v34 + 4);
    if (*(_BYTE *)(a1 + 368))
    {
      if (!*(_QWORD *)(a1 + 392))
      {
        if (*((char *)v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v34, *((_QWORD *)v34 + 1));
        }
        else
        {
          v49 = *(_OWORD *)v34;
          v141.__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 2);
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v49;
        }
LABEL_148:
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        v157 = v141;
        goto LABEL_151;
      }
      memset(&buf, 0, sizeof(buf));
      v40 = *((_QWORD *)v34 + 9);
      v41 = *((_QWORD *)v34 + 10);
      if (v40 == v41)
      {
        v47 = 0;
        goto LABEL_104;
      }
      do
      {
        if (*(_DWORD *)v40 == 13)
        {
          v42 = (std::string::size_type *)(v40 + 8);
          v43 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v132, (const void **)(v40 + 8));
          if (v131 == v43)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v46 = v40 + 8;
              if (*(char *)(v40 + 31) < 0)
                v46 = *v42;
              LODWORD(v160.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v160.__r_.__value_.__r.__words + 4) = v46;
              _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_DEBUG, "Unknown language marker from Nasvhille FE: %s, Ignored!", (uint8_t *)&v160, 0xCu);
            }
            if (*(char *)(v40 + 31) < 0)
              v42 = (std::string::size_type *)*v42;
            Diagnostics::log(7, "Unknown language marker from Nasvhille FE: %s, Ignored!", v45, v42);
          }
          else
          {
            std::string::operator=(&buf, (const std::string *)(v43 + 56));
            std::string::operator=(&v142, &buf);
          }
        }
        v40 += 56;
      }
      while (v40 != v41);
      v47 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        if (buf.__r_.__value_.__l.__size_ != 6)
          goto LABEL_112;
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 6)
          goto LABEL_104;
        p_buf = &buf;
      }
      data = (int)p_buf->__r_.__value_.__l.__data_;
      v51 = WORD2(p_buf->__r_.__value_.__r.__words[0]);
      if (data == 1836216174 && v51 == 27745)
      {
        std::string::operator=(&buf, __str);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v53 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v160.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v53, OS_LOG_TYPE_INFO, "Set current_lang to default!", (uint8_t *)&v160, 2u);
        }
        Diagnostics::log(6, "Set current_lang to default!", v54);
        std::string::operator=(&v142, __str);
        v47 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((*((_BYTE *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_104:
          if (!v47)
            goto LABEL_113;
          goto LABEL_118;
        }
      }
      else if ((*((_BYTE *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        goto LABEL_104;
      }
LABEL_112:
      if (!buf.__r_.__value_.__l.__size_)
      {
LABEL_113:
        std::string::operator=(&buf, &v142);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v55 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v160.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v55, OS_LOG_TYPE_INFO, "Set to previous lang", (uint8_t *)&v160, 2u);
        }
        Diagnostics::log(6, "Set to previous lang", v56);
      }
LABEL_118:
      std::string::operator=((std::string *)v34 + 5, &buf);
      if (*(_BYTE *)v136)
      {
        if (*((char *)v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v34, *((_QWORD *)v34 + 1));
        }
        else
        {
          v57 = *(_OWORD *)v34;
          v141.__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 2);
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v57;
        }
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          if (*((char *)v34 + 23) >= 0)
            v60 = (const std::string::value_type *)v34;
          else
            v60 = *(const std::string::value_type **)v34;
          if (*((char *)v34 + 143) >= 0)
            v61 = (std::string::size_type)(v34 + 30);
          else
            v61 = *((_QWORD *)v34 + 15);
          LODWORD(v160.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v160.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
          WORD2(v160.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v160.__r_.__value_.__r.__words[1] + 6) = v61;
          _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_INFO, "Language for phone %s is %s", (uint8_t *)&v160, 0x16u);
        }
        if (*((char *)v34 + 23) >= 0)
          v62 = (const std::string::value_type *)v34;
        else
          v62 = *(const std::string::value_type **)v34;
        if (*((char *)v34 + 143) >= 0)
          v63 = v34 + 30;
        else
          v63 = (int *)*((_QWORD *)v34 + 15);
        Diagnostics::log(6, "Language for phone %s is %s", v59, v62, v63);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&buf.__r_.__value_.__l.__data_, 59, (uint64_t)&v160);
        v64 = *((char *)v34 + 23);
        if (v64 >= 0)
          v65 = (const std::string::value_type *)v34;
        else
          v65 = *(const std::string::value_type **)v34;
        if (v64 >= 0)
          v66 = *((unsigned __int8 *)v34 + 23);
        else
          v66 = *((_QWORD *)v34 + 1);
        v67 = std::string::append(&v160, v65, v66);
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_148;
    }
LABEL_151:
    v69 = (char *)*v127;
    if (!*v127)
      goto LABEL_158;
    v70 = v127;
    do
    {
      v71 = std::less<std::string>::operator()[abi:ne180100](v38, (const void **)v69 + 4, (const void **)&v157.__r_.__value_.__l.__data_);
      v72 = (void **)(v69 + 8);
      if (!v71)
      {
        v72 = (void **)v69;
        v70 = (const void **)v69;
      }
      v69 = (char *)*v72;
    }
    while (*v72);
    if (v70 == v127
      || std::less<std::string>::operator()[abi:ne180100](v38, (const void **)&v157.__r_.__value_.__l.__data_, v70 + 4))
    {
LABEL_158:
      v73 = v143;
      v74 = v143[1];
      if (v74 >= v143[2])
      {
        v75 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(v143, (const PhoneFeature *)v34);
      }
      else
      {
        PhoneFeature::PhoneFeature((std::string *)v143[1], (const PhoneFeature *)v34);
        v75 = v74 + 216;
        v73[1] = v74 + 216;
      }
      v73[1] = v75;
      goto LABEL_162;
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
    v80 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, (const void **)&v157.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    if (&v156 != (std::vector<std::string> *)(v80 + 7))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v156, (std::string *)v80[7], (__int128 *)v80[8], 0xAAAAAAAAAAAAAAABLL * ((v80[8] - v80[7]) >> 3));
    if (v156.__end_ != v156.__begin_)
    {
      v81 = 0;
      v133 = v34 + 36;
      v134 = (std::string *)(v34 + 30);
      do
      {
        std::string::operator=(&v145, (const std::string *)v34);
        v82 = *(_OWORD *)v136;
        v83 = *((_OWORD *)v136 + 1);
        *(_OWORD *)&v146[28] = *(_OWORD *)(v136 + 7);
        *(_OWORD *)v146 = v82;
        *(_OWORD *)&v146[16] = v83;
        if (&v145 != (std::string *)v34)
          std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&v147, *((_QWORD *)v34 + 9), *((_QWORD *)v34 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v34 + 10) - *((_QWORD *)v34 + 9)) >> 3));
        std::string::operator=(v37, v135);
        std::string::operator=(&__p, v134);
        v151 = *(_OWORD *)v133;
        v84 = *((_OWORD *)v133 + 1);
        v85 = *((_OWORD *)v133 + 2);
        v86 = *((_OWORD *)v133 + 3);
        v155 = v133[16];
        v153 = v85;
        v154 = v86;
        v152 = v84;
        v87 = &v156.__begin_[v81];
        if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v140, v87->__r_.__value_.__l.__data_, v87->__r_.__value_.__l.__size_);
        }
        else
        {
          v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v88;
        }
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&buf, v140.__r_.__value_.__l.__data_, v140.__r_.__value_.__l.__size_);
        else
          buf = v140;
        v89 = v37;
        v90 = v34;
        v91 = v36;
        v92 = v35;
        v93 = *(_BYTE *)(a1 + 367);
        if (v93 < 0)
        {
          v94 = *(_QWORD *)(a1 + 352);
          if (v94)
            goto LABEL_189;
        }
        else if (*(_BYTE *)(a1 + 367))
        {
          v94 = *(_QWORD *)(v137 + 352);
LABEL_189:
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &buf;
          else
            v95 = (std::string *)buf.__r_.__value_.__r.__words[0];
          if (v93 >= 0)
            v96 = (char *)v129;
          else
            v96 = *v129;
          if (v93 >= 0)
            v97 = *(unsigned __int8 *)(a1 + 367);
          else
            v97 = v94;
          if (v97)
          {
            __s = v95;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            else
              size = buf.__r_.__value_.__l.__size_;
            if (size >= v97)
            {
              v99 = v95;
              v100 = (char *)v95 + size;
              v101 = *v96;
              do
              {
                v102 = size - v97;
                if (v102 == -1)
                  break;
                v103 = (char *)memchr(v99, v101, v102 + 1);
                if (!v103)
                  break;
                v104 = v103;
                if (!memcmp(v103, v96, v97))
                {
                  if (v104 != v100)
                  {
                    v105 = v104 - (char *)__s;
                    if (v104 - (char *)__s != -1)
                      goto LABEL_210;
                  }
                  break;
                }
                v99 = (std::string *)(v104 + 1);
                size = v100 - (v104 + 1);
              }
              while (size >= v97);
            }
          }
          else
          {
            v105 = 0;
LABEL_210:
            std::string::replace(&buf, v105, v97, &byte_1DEBD87CE);
          }
        }
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
        v145 = buf;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
        buf.__r_.__value_.__s.__data_[0] = 0;
        a1 = v137;
        v35 = v92;
        v36 = v91;
        v34 = v90;
        v37 = v89;
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        v38 = v130;
        if (*(_BYTE *)(v137 + 369))
        {
          v106 = std::string::find(&v145, 59, 0);
          if (v106 != -1)
          {
            v107 = v106;
            std::string::basic_string(&buf, &v145, 0, v106, (std::allocator<char> *)&v160);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = buf;
            if (v107 == -2)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v108 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v110 = &v157;
                if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v110 = (std::string *)v157.__r_.__value_.__r.__words[0];
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
                _os_log_impl(&dword_1DE3F6000, v108, OS_LOG_TYPE_DEBUG, "Is phone mapping missing for %s", (uint8_t *)&buf, 0xCu);
              }
              v111 = &v157;
              if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v111 = (std::string *)v157.__r_.__value_.__r.__words[0];
              Diagnostics::log(7, "Is phone mapping missing for %s", v109, v111);
              MEMORY[0x1DF0ECA80](&v145, &byte_1DEBD87CE);
            }
            else
            {
              std::string::basic_string(&buf, &v145, v107 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v160);
              if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v145.__r_.__value_.__l.__data_);
              v145 = buf;
            }
          }
        }
        std::string::operator=(v37, &v156.__begin_[v81]);
        if (v81)
        {
          v113 = *((_QWORD *)&v147 + 1);
          v112 = v147;
          while (v113 != v112)
          {
            if (*(char *)(v113 - 25) < 0)
              operator delete(*(void **)(v113 - 48));
            v113 -= 56;
          }
          *((_QWORD *)&v147 + 1) = v112;
          if (v90[41])
            DWORD1(v152) = 0;
        }
        if (v90[43]
          && !v81
          && (v114 = (char *)&v152 + 12, 0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_ - (char *)v156.__begin_) >> 3) > 1)
          || v81 && (v114 = (char *)&v151 + 12, v90[39]))
        {
          *(_DWORD *)v114 = 0;
        }
        v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_ - (char *)v156.__begin_) >> 3);
        if (v90[40] && !v81 && v115 >= 2)
          LODWORD(v152) = 0;
        *(_DWORD *)&v146[4] = v90[7] / v115;
        v116 = v143;
        v117 = v143[1];
        if (v117 >= v143[2])
        {
          v118 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(v143, (const PhoneFeature *)&v145);
        }
        else
        {
          PhoneFeature::PhoneFeature((std::string *)v143[1], (const PhoneFeature *)&v145);
          v118 = v117 + 216;
          v116[1] = v117 + 216;
        }
        v116[1] = v118;
        if (v81)
          ++v36;
        ++v81;
      }
      while (0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_ - (char *)v156.__begin_) >> 3) > v81);
    }
LABEL_162:
    if (!*((_BYTE *)v34 + 24) && v34[40])
    {
      v76 = v126[3];
      if (0xF0F0F0F0F0F0F0F1 * (((char *)v126[4] - (char *)v76) >> 3) <= (int)v35)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v79 = 0xF0F0F0F0F0F0F0F1 * (((char *)v126[4] - (char *)v126[3]) >> 3);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v35;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v79;
          _os_log_impl(&dword_1DE3F6000, v77, OS_LOG_TYPE_ERROR, "word index (%d) is larger than word_feature size ('%lu') ", (uint8_t *)&buf, 0x12u);
        }
        Diagnostics::log(3, "word index (%d) is larger than word_feature size ('%lu') ", v78, v35, 0xF0F0F0F0F0F0F0F1 * (((char *)v126[4] - (char *)v126[3]) >> 3));
      }
      else
      {
        v76[34 * (int)v35 + 1] = v36 - v124 + 1;
        v35 = (v35 + 1);
      }
    }
    ++v36;
    v34 += 54;
  }
  while (v34 != v125);
  v6 = v158;
  v11 = (std::string **)v143;
  v2 = v121;
  v119 = v126;
LABEL_261:
  std::vector<PhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<PhoneFeature*>,std::__wrap_iter<PhoneFeature*>>((uint64_t)v6, *v11, v11[1], 0x84BDA12F684BDA13 * (((char *)v11[1] - (char *)*v11) >> 3));
  std::vector<WordFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<WordFeature*>,std::__wrap_iter<WordFeature*>>((uint64_t)(v6 + 3), (uint64_t)v119[3], (uint64_t)v119[4], 0xF0F0F0F0F0F0F0F1 * (((char *)v119[4] - (char *)v119[3]) >> 3));
LABEL_34:
  v21 = (std::__shared_weak_count *)v2[1];
  v138 = *v2;
  v139 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v138);
  v24 = v139;
  if (v139)
  {
    v25 = (unint64_t *)&v139->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  v27 = v144;
  if (v144)
  {
    v28 = (unint64_t *)&v144->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149) < 0)
    operator delete(*((void **)&v148 + 1));
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  v30 = v159;
  if (v159)
  {
    v31 = (unint64_t *)&v159->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1DEA14018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;

  if (a58 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  PhoneFeature::~PhoneFeature((void **)&a62);
  a62 = v62 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (*(char *)(v62 - 185) < 0)
    operator delete(*(void **)(v62 - 208));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v62 - 176);
  _Unwind_Resume(a1);
}

void std::vector<PhoneFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<PhoneFeature*>,std::__wrap_iter<PhoneFeature*>>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<PhoneFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x12F684BDA12F684)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x97B425ED097B426 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x97B425ED097B42)
      v11 = 0x12F684BDA12F684;
    else
      v11 = v10;
    std::vector<PhoneFeature>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(__str, a3, v9);
  for (i = *(_QWORD *)(a1 + 8); (std::string *)i != v14; std::allocator<PhoneFeature>::destroy[abi:ne180100](i))
    i -= 216;
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1DEA14294(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DEA1429C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<WordFeature>::__assign_with_size[abi:ne180100]<std::__wrap_iter<WordFeature*>,std::__wrap_iter<WordFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<WordFeature>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    std::vector<WordFeature>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(a2, a3, (uint64_t)v9);
  for (i = *(_QWORD *)(a1 + 8); i != v14; std::allocator<WordFeature>::destroy[abi:ne180100](i))
    i -= 136;
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1DEA143FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DEA14404(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<PhoneFeature>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void PipelineModule::~PipelineModule(PipelineModule *this)
{
  *(_QWORD *)this = &off_1EA91DA40;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91DA40;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t PipelineModule::cancel(PipelineModule *this)
{
  std::recursive_mutex *v2;

  v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((_BYTE *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 34) + 40))(*((_QWORD *)this + 34));
}

void PipelineModule::process_data(_QWORD **a1, uint64_t *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  (*(void (**)(_QWORD *))(*a1[34] + 48))(a1[34]);
  v4 = a1[34];
  v5 = (std::__shared_weak_count *)a2[1];
  v29 = *a2;
  v30 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *, uint64_t *))(*v4 + 32))(v4, &v29);
  v8 = v30;
  if (v30)
  {
    v9 = (unint64_t *)&v30->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*a1[34] + 56))(&v28);
  while ((_QWORD)v28)
  {
    v27 = v28;
    if (*((_QWORD *)&v28 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    ((void (*)(_QWORD **, __int128 *))(*a1)[9])(a1, &v27);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*a1[34] + 56))(&v26);
    v16 = v26;
    v26 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    v28 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1DEA14730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void UTFNumberFormatter::UTFNumberFormatter(UTFNumberFormatter *this, std::string *a2, const char *a3)
{
  const char *v3;
  std::string *v4;
  const std::string::value_type *v6;
  uint64_t v7;
  size_t v8;
  void *exception;
  void *v10;
  const char *v11;
  void *v12;
  _BYTE v13[24];
  std::basic_string<char16_t> __p;
  std::string v15;
  int v16;

  v3 = a3;
  v4 = a2;
  v16 = 0;
  memset(&v15, 0, sizeof(v15));
  if (a3 && !a2 && *a3)
  {
    MEMORY[0x1DF0ECA80](&v15, "@numbers=");
    v6 = *v3 == 37 ? v3 + 1 : v3;
    v4 = &v15;
    std::string::append(&v15, v6);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  v7 = unum_open();
  *(_QWORD *)this = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Illegal locale for number formatter %s\n", (const char *)v4);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v3 && *v3)
  {
    if (!strcmp(v3, "%roman"))
      v3 = "%roman-upper";
    v8 = strlen(v3);
    UTFString::to_utf16(&__p, v3, v8);
    unum_setTextAttribute();
    if (v16 >= 1)
    {
      v10 = __cxa_allocate_exception(0x10uLL);
      v11 = v3;
      v12 = v10;
      StringFormatter::StringFormatter((StringFormatter *)v13, "Illegal ruleSet %s for locale %s\n", v11, (const char *)v4);
      MEMORY[0x1DF0EC99C](v12, v13);
      __cxa_throw(v12, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1DEA1495C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v28;
  void *v29;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0)
        operator delete(a17);
      if (a28 < 0)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void UTFNumberFormatter::~UTFNumberFormatter(UTFNumberFormatter *this)
{
  if (*(_QWORD *)this)
    unum_close();
}

uint64_t std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v5 = a4;
  v6 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v7, &v6, &v5);
}

void UTFString_Impl::formatNumberAsUTF8(std::string *a1, _QWORD *a2)
{
  _QWORD *v3;
  _OWORD *v4;
  unsigned int v5;
  std::basic_string<char16_t>::value_type v6;
  std::basic_string<char16_t> *v7;
  std::basic_string<char16_t>::size_type size;
  _BYTE *v9;
  uint64_t v10;
  std::basic_string<char16_t> *v11;
  int32_t v12;
  std::basic_string<char16_t> v13;
  int v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v16 = 0;
  }
  v14 = 0;
  v4 = operator new(0x88uLL);
  v13.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v4;
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_1DED16BF0;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  *((_WORD *)v4 + 64) = 0;
  v5 = std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()((uint64_t)v16, (uint64_t)v4, 64, (uint64_t)&v14);
  if (v5 >= 0x41)
  {
    std::basic_string<char16_t>::resize(&v13, (int)(v5 + 1), v6);
    v14 = 0;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v13;
    else
      v7 = (std::basic_string<char16_t> *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v5 = std::function<int ()(char16_t *,unsigned long,UErrorCode *)>::operator()((uint64_t)v16, (uint64_t)v7, size, (uint64_t)&v14);
  }
  if (v14 <= 0)
  {
    std::basic_string<char16_t>::resize(&v13, (int)v5, v6);
  }
  else if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    *v13.__r_.__value_.__l.__data_ = 0;
    v13.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v13.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = 0;
  }
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_24;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_24:
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v13;
  else
    v11 = (std::basic_string<char16_t> *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v12 = v13.__r_.__value_.__r.__words[1];
  UTFString::to_utf8(a1, (const UChar *)v11, v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1DEA14C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(exception_object);
}

void ClassifySentenceImpl::~ClassifySentenceImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t ClassifySentenceImpl::clear(ClassifySentenceImpl *this)
{
  uint64_t result;

  *((_WORD *)this + 52) = 1;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void ClassifySentenceImpl::generate_tokens(ClassifySentenceImpl *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  void *v14;
  void **v15;

  if (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v13, *((_QWORD *)this + 2), 0);
    v2 = v13;
    if ((_QWORD)v13)
    {
      if ((_QWORD *)(v2 + 8) != v3)
      {
        v4 = v3[5];
        if (*(_BYTE *)(v4 + 9))
        {
          v5 = *(_QWORD *)(v4 + 32);
          v15 = &v14;
          v7 = v6[5];
          if (v7)
          {
            *(_DWORD *)(v7 + 8) = 0;
          }
          else
          {
            v8 = operator new();
            *(_QWORD *)v8 = &off_1EA922EA8;
            *(_DWORD *)(v8 + 8) = 0;
            v9 = v6[5];
            v6[5] = v8;
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          }
        }
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v13);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1DEA14E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ClassifySentence::ClassifySentence(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)a1 = off_1EA91D8E0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = a3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1EA91D8E0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1EA91E5B0;
  return a1;
}

void std::__shared_ptr_emplace<ClassifySentenceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ClassifySentenceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ClassifySentenceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ClassifySentencePersistentModule::~ClassifySentencePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void NeuralAdapterModule::~NeuralAdapterModule(NeuralAdapterModule *this)
{
  NeuralAdapterModule::~NeuralAdapterModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1EA91F708;
  v2 = (void *)*((_QWORD *)this + 126);
  if (v2)
  {
    *((_QWORD *)this + 127) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 976);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 975) < 0)
    operator delete(*((void **)this + 119));
  v4 = (void **)((char *)this + 928);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 904);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 840);
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 100));
  v3 = (void *)*((_QWORD *)this + 96);
  if (v3)
  {
    *((_QWORD *)this + 97) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 93));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 720);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 88));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 85));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((_QWORD **)this + 82));
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  std::__tree<std::string>::destroy((uint64_t)this + 536, *((char **)this + 68));
  std::__tree<std::string>::destroy((uint64_t)this + 504, *((char **)this + 64));
  std::__tree<std::string>::destroy((uint64_t)this + 472, *((char **)this + 60));
  std::__tree<std::string>::destroy((uint64_t)this + 448, *((char **)this + 57));
  std::__tree<std::string>::destroy((uint64_t)this + 424, *((char **)this + 54));
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*((char **)this + 35));
  Module::~Module(this);
}

void NeuralAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::string *p_buf;
  unint64_t v36;
  std::string *v37;
  std::string *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  int v43;
  __int128 *v44;
  std::string *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  uint64_t v53;
  size_t v54;
  std::string::size_type v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  std::string *v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  char v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v87;
  std::string::size_type v88;
  uint64_t v89;
  int v90;
  __int128 *v91;
  std::string *v92;
  int v93;
  uint64_t v94;
  __int128 *v95;
  unsigned __int8 *v96;
  std::string *v97;
  std::string *v98;
  uint64_t v99;
  size_t v100;
  std::string::size_type v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  void *v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  const void *v110;
  unint64_t v111;
  size_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  uint64_t v141;
  int *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  size_t v160;
  _BYTE *v161;
  const void *v162;
  const std::string::value_type *v163;
  std::string::size_type v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  size_t v199;
  _BYTE *v200;
  __int128 *v201;
  const std::string::value_type *v202;
  std::string::size_type v203;
  unint64_t v204;
  unint64_t v205;
  __int128 v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  __int128 v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  __int128 v217;
  unint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 *v223;
  __int128 v224;
  uint64_t v225;
  int *v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  size_t v244;
  _BYTE *v245;
  const void *v246;
  const std::string::value_type *v247;
  std::string::size_type v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  __int128 v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  __int128 v260;
  uint64_t v261;
  int v262;
  unint64_t v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  unint64_t v267;
  unint64_t v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  size_t v283;
  _BYTE *v284;
  __int128 *v285;
  const std::string::value_type *v286;
  std::string::size_type v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  int v292;
  int v293;
  NSObject *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  NSObject *v298;
  const char *v299;
  uint64_t v300;
  __int128 *v301;
  int v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  __int128 *v306;
  uint64_t v307;
  unint64_t v308;
  __int128 *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  char *v321;
  std::string::size_type v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  size_t v327;
  _BYTE *v328;
  __int128 *v329;
  const std::string::value_type *v330;
  std::string::size_type v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  _DWORD *v337;
  _DWORD *v338;
  uint64_t *v339;
  unint64_t v340;
  __int128 v341;
  uint64_t v342;
  __int128 *v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  __int128 v350;
  uint64_t v351;
  __int128 v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  std::string::size_type v359;
  uint64_t v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  size_t size;
  _BYTE *v369;
  std::string *v370;
  const std::string::value_type *v371;
  std::string::size_type v372;
  int v373;
  std::string *v374;
  NSObject *v375;
  const char *v376;
  std::string *v377;
  std::string *v378;
  uint64_t v379;
  NSObject *v380;
  const char *v381;
  unint64_t v382;
  NSObject *v383;
  const char *v384;
  NSObject *v385;
  const char *v386;
  uint64_t *v387;
  uint64_t v388;
  std::vector<std::string>::size_type v389;
  std::string::size_type v390;
  uint64_t *v391;
  uint64_t v392;
  __int128 *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  uint64_t v398;
  unsigned __int8 *v399;
  uint64_t v400;
  uint64_t v401;
  unsigned __int8 *v402;
  __int128 *v403;
  __int128 *v404;
  __int128 *v405;
  __int128 *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  std::vector<std::string>::size_type v421;
  unint64_t v422;
  std::string::size_type v423;
  std::string::size_type i;
  std::string::size_type v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  NSObject *v429;
  const char *v430;
  __int128 v431;
  std::string::size_type v432;
  __int128 v433;
  std::string::size_type v434;
  __int128 v435;
  std::string::size_type v436;
  __int128 v437;
  std::string::size_type v438;
  __int128 v439;
  std::string::size_type v440;
  uint64_t *v441;
  uint64_t *v442;
  std::vector<std::string>::size_type v443;
  NSObject *v444;
  const char *v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  NSObject *v456;
  const char *v457;
  _BYTE *v458;
  _BYTE *v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __int128 v463;
  unint64_t v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  __int128 v468;
  unint64_t v469;
  __int128 v470;
  uint64_t v471;
  size_t v472;
  _BYTE *v473;
  __int128 *v474;
  const std::string::value_type *v475;
  std::string::size_type v476;
  unint64_t v477;
  unint64_t v478;
  __int128 v479;
  uint64_t v480;
  __int128 v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  std::string::size_type v488;
  uint64_t v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  NSObject *v493;
  const char *v494;
  unint64_t v495;
  __int128 v496;
  uint64_t v497;
  unint64_t v498;
  __int128 *v499;
  uint64_t v500;
  unint64_t v501;
  __int128 *v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  __int128 v506;
  uint64_t v507;
  __int128 v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  char *v514;
  std::string::size_type v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  size_t v520;
  _BYTE *v521;
  std::string *v522;
  const std::string::value_type *v523;
  std::string::size_type v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  __int128 *v528;
  uint64_t v529;
  unint64_t v530;
  __int128 *v531;
  uint64_t v532;
  unint64_t v533;
  unint64_t v534;
  __int128 v535;
  uint64_t v536;
  __int128 v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  char *v543;
  std::string::size_type v544;
  uint64_t v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  size_t v549;
  _BYTE *v550;
  __int128 *v551;
  const std::string::value_type *v552;
  std::string::size_type v553;
  int v554;
  NSObject *v555;
  const char *v556;
  std::string *v557;
  std::string *v558;
  NSObject *v559;
  const char *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  size_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  std::string *__str;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  const void **v580;
  int v581;
  __int128 *v582;
  int v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t *v587;
  int v588;
  uint64_t v589;
  int v590;
  uint64_t *v591;
  int *v592;
  int v593;
  uint64_t *v594;
  uint64_t *v595;
  uint64_t **v596;
  int v597;
  std::string *v598;
  int v599;
  uint64_t v600;
  std::string *v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  std::string v604;
  std::string v605;
  std::string v606;
  std::string v607;
  std::string v608;
  std::string v609;
  std::string v610;
  std::string v611;
  std::string v612;
  _BYTE __p[104];
  __int128 v614;
  __int128 v615;
  _BYTE v616[40];
  uint64_t v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  uint64_t v621;
  std::string buf;
  char *v623;
  uint64_t v624;
  uint64_t v625;

  v625 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a1 + 856;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 856));
  v595 = (uint64_t *)(a1 + 880);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 880));
  v594 = (uint64_t *)(a1 + 904);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 904));
  v10 = *(_QWORD *)(a1 + 936);
  v11 = *(_QWORD *)(a1 + 928);
  while (v10 != v11)
  {
    v10 -= 104;
    std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v10);
  }
  *(_QWORD *)(a1 + 936) = v11;
  if (*(char *)(a1 + 975) < 0)
  {
    **(_BYTE **)(a1 + 952) = 0;
    *(_QWORD *)(a1 + 960) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 952) = 0;
    *(_BYTE *)(a1 + 975) = 0;
  }
  v579 = (uint64_t *)(a1 + 976);
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)(a1 + 976));
  v596 = (uint64_t **)(a1 + 840);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 840), v7, (uint64_t)v6);
  *(_BYTE *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a1 + 1008);
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v602, *(_QWORD *)(a1 + 168));
  if (v602)
    v14 = *(_DWORD *)(v602 + 60) == 3;
  else
    v14 = 0;
  NeuralAdapterModule::process_markers(a1, *(_DWORD **)(**(_QWORD **)(a1 + 840) + 72), *(_DWORD **)(**(_QWORD **)(a1 + 840) + 80));
  v15 = *v596;
  if (v14 && 0x84BDA12F684BDA13 * ((v15[1] - *v15) >> 3) >= 2)
  {
    NeuralAdapterModule::process_markers(a1, *(_DWORD **)(*v15 + 288), *(_DWORD **)(*v15 + 296));
    v15 = *v596;
  }
  if (v15[1] == *v15)
  {
    v597 = 0;
    v581 = 0;
    goto LABEL_1015;
  }
  v590 = 0;
  v16 = 0;
  v597 = 0;
  v591 = (uint64_t *)(a1 + 928);
  v601 = (std::string *)(a1 + 952);
  v581 = 0;
  v17 = (__int128 *)(a1 + 400);
  __str = (std::string *)(a1 + 616);
  v569 = a1 + 896;
  v587 = (uint64_t *)(a1 + 944);
  v570 = a1 + 544;
  v571 = a1 + 536;
  v565 = a1 + 512;
  v566 = a1 + 504;
  v580 = (const void **)(a1 + 592);
  v576 = a1 + 272;
  v582 = (__int128 *)(a1 + 304);
  v585 = a1 + 432;
  v586 = a1 + 424;
  v577 = a1 + 456;
  v578 = a1 + 448;
  v572 = a1 + 480;
  v573 = a1 + 472;
  v575 = a1 + 280;
  v18 = *(uint64_t **)(a1 + 840);
  v19 = *v18;
  v598 = (std::string *)(a1 + 400);
  do
  {
    v20 = (int)v16;
    if (!*(_BYTE *)(v19 + 216 * (int)v16 + 24))
    {
      v291 = v18 + 3;
      v290 = v18[3];
      if (0xF0F0F0F0F0F0F0F1 * ((v291[1] - v290) >> 3) <= v581)
      {
        *(_QWORD *)__p = 0x8000000080000000;
        memset(&__p[8], 0, 96);
        v292 = 0x7FFFFFFF;
        v614 = 0u;
        v615 = 0u;
      }
      else
      {
        WordFeature::WordFeature((uint64_t)__p, v290 + 136 * v581);
        v292 = *(_DWORD *)__p;
      }
      v293 = v16;
      if ((_DWORD)v16 != v292)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v294 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v616 = 67109376;
          *(_DWORD *)&v616[4] = v16;
          *(_WORD *)&v616[8] = 1024;
          *(_DWORD *)&v616[10] = *(_DWORD *)__p;
          _os_log_impl(&dword_1DE3F6000, v294, OS_LOG_TYPE_ERROR, "Phoneme index %d != word phoneme offset %d", v616, 0xEu);
        }
        Diagnostics::log(3, "Phoneme index %d != word phoneme offset %d", v295, v16, *(unsigned int *)__p);
        v293 = *(_DWORD *)__p;
      }
      v296 = (*(_DWORD *)&__p[4] + v293);
      v297 = 1749801491 * ((unint64_t)((*v596)[1] - **v596) >> 3);
      if ((v296 & 0x80000000) != 0 || (int)v296 > (int)v297)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v298 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v616 = 67109376;
          *(_DWORD *)&v616[4] = v296;
          *(_WORD *)&v616[8] = 1024;
          *(_DWORD *)&v616[10] = v297;
          _os_log_impl(&dword_1DE3F6000, v298, OS_LOG_TYPE_ERROR, "word phoneme end %d > limit %d", v616, 0xEu);
        }
        Diagnostics::log(3, "word phoneme end %d > limit %d", v299, v296, v297);
        LODWORD(v296) = v297;
      }
      if ((int)v16 >= (int)v296)
      {
        v20 = v16;
        goto LABEL_757;
      }
      v593 = -1;
      v584 = v296;
      while (1)
      {
        v300 = **v596;
        v600 = v20;
        v301 = (__int128 *)(v300 + 216 * v20);
        if (*((_DWORD *)v301 + 37) == v593)
        {
          v302 = v593;
        }
        else if (v593 < 0)
        {
          v302 = *((_DWORD *)v301 + 37);
        }
        else
        {
          v303 = *(_QWORD *)(a1 + 864);
          if (v303 >= *(_QWORD *)(a1 + 872))
          {
            v304 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, v17);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, v17);
            v304 = v303 + 24;
          }
          *(_QWORD *)(a1 + 864) = v304;
          v305 = *(_QWORD *)(a1 + 888);
          v306 = (__int128 *)(v305 - 24);
          if (v305 >= *(_QWORD *)(a1 + 896))
          {
            v307 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v595, v306);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v595, v306);
            v307 = v305 + 24;
          }
          *(_QWORD *)(a1 + 888) = v307;
          v308 = *(_QWORD *)(a1 + 912);
          v309 = (__int128 *)(v308 - 24);
          if (v308 >= *(_QWORD *)(a1 + 920))
          {
            v310 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, v309);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v594, v309);
            v310 = v308 + 24;
          }
          *(_QWORD *)(a1 + 912) = v310;
          if (*(char *)(a1 + 423) < 0)
            std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
          else
            v608 = *(std::string *)v17;
          if ((__p[63] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
          else
            v607 = *(std::string *)&__p[40];
          TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v616, (__int128 *)&v608, (__int128 *)&v607, *(int *)&__p[8], *(int *)&__p[12], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
          v311 = *(_QWORD *)(a1 + 936);
          v312 = *(_QWORD *)(a1 + 944);
          if (v311 >= v312)
          {
            v317 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v311 - *v591) >> 3);
            v318 = v317 + 1;
            if ((unint64_t)(v317 + 1) > 0x276276276276276)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v319 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v312 - *v591) >> 3);
            if (2 * v319 > v318)
              v318 = 2 * v319;
            if (v319 >= 0x13B13B13B13B13BLL)
              v320 = 0x276276276276276;
            else
              v320 = v318;
            v624 = a1 + 944;
            v321 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v320);
            v322 = (std::string::size_type)&v321[104 * v317];
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
            buf.__r_.__value_.__l.__size_ = v322;
            v623 = &v321[104 * v323];
            v324 = *(_OWORD *)v616;
            *(_QWORD *)(v322 + 16) = *(_QWORD *)&v616[16];
            *(_OWORD *)v322 = v324;
            memset(v616, 0, 24);
            v325 = *(_OWORD *)&v616[24];
            *(_QWORD *)(v322 + 40) = v617;
            *(_OWORD *)(v322 + 24) = v325;
            *(_QWORD *)&v616[32] = 0;
            v617 = 0;
            *(_QWORD *)&v616[24] = 0;
            v326 = v619;
            *(_OWORD *)(v322 + 48) = v618;
            *(_OWORD *)(v322 + 64) = v326;
            *(_QWORD *)(v322 + 88) = 0;
            *(_QWORD *)(v322 + 96) = 0;
            *(_QWORD *)(v322 + 80) = 0;
            *(_OWORD *)(v322 + 80) = v620;
            *(_QWORD *)(v322 + 96) = v621;
            v620 = 0uLL;
            v621 = 0;
            buf.__r_.__value_.__r.__words[2] = v322 + 104;
            std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, &buf);
            v316 = *(_QWORD *)(a1 + 936);
            std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            v313 = *(_OWORD *)v616;
            *(_QWORD *)(v311 + 16) = *(_QWORD *)&v616[16];
            *(_OWORD *)v311 = v313;
            memset(v616, 0, 24);
            v314 = v617;
            *(_OWORD *)(v311 + 24) = *(_OWORD *)&v616[24];
            *(_QWORD *)(v311 + 40) = v314;
            *(_QWORD *)&v616[32] = 0;
            v617 = 0;
            *(_QWORD *)&v616[24] = 0;
            v315 = v619;
            *(_OWORD *)(v311 + 48) = v618;
            *(_OWORD *)(v311 + 64) = v315;
            *(_QWORD *)(v311 + 80) = 0;
            *(_QWORD *)(v311 + 88) = 0;
            *(_QWORD *)(v311 + 96) = 0;
            *(_OWORD *)(v311 + 80) = v620;
            *(_QWORD *)(v311 + 96) = v621;
            v620 = 0uLL;
            v621 = 0;
            v316 = v311 + 104;
          }
          *(_QWORD *)(a1 + 936) = v316;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620;
          std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (SHIBYTE(v617) < 0)
            operator delete(*(void **)&v616[24]);
          if ((v616[23] & 0x80000000) != 0)
            operator delete(*(void **)v616);
          if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v607.__r_.__value_.__l.__data_);
          if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v608.__r_.__value_.__l.__data_);
          if (*(char *)(a1 + 423) >= 0)
            v327 = *(unsigned __int8 *)(a1 + 423);
          else
            v327 = *(_QWORD *)(a1 + 408);
          std::string::basic_string[abi:ne180100]((uint64_t)v616, v327 + 1);
          if (v616[23] >= 0)
            v328 = v616;
          else
            v328 = *(_BYTE **)v616;
          if (v327)
          {
            if (*(char *)(a1 + 423) >= 0)
              v329 = v17;
            else
              v329 = *(__int128 **)(a1 + 400);
            memmove(v328, v329, v327);
          }
          *(_WORD *)&v328[v327] = 32;
          if (v616[23] >= 0)
            v330 = v616;
          else
            v330 = *(const std::string::value_type **)v616;
          if (v616[23] >= 0)
            v331 = v616[23];
          else
            v331 = *(_QWORD *)&v616[8];
          std::string::append(v601, v330, v331);
          if ((v616[23] & 0x80000000) != 0)
            operator delete(*(void **)v616);
          v302 = *((_DWORD *)v301 + 37);
        }
        if (*((char *)v301 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v606, *(const std::string::value_type **)v301, *((_QWORD *)v301 + 1));
        }
        else
        {
          v332 = *v301;
          v606.__r_.__value_.__r.__words[2] = *((_QWORD *)v301 + 2);
          *(_OWORD *)&v606.__r_.__value_.__l.__data_ = v332;
        }
        if (*(char *)(a1 + 615) < 0)
        {
          if (!*(_QWORD *)(a1 + 600))
            goto LABEL_579;
        }
        else if (!*(_BYTE *)(a1 + 615))
        {
          goto LABEL_579;
        }
        if (!*(_DWORD *)(v300 + 216 * v600 + 152))
          goto LABEL_579;
        if (*(_BYTE *)(a1 + 644))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v580, (const void **)&v606.__r_.__value_.__l.__data_, (uint64_t)v616);
          v333 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v576, (const void **)v616);
          if ((v616[23] & 0x80000000) != 0)
            operator delete(*(void **)v616);
          if (v575 != v333)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v580, (const void **)&v606.__r_.__value_.__l.__data_, (uint64_t)v616);
LABEL_576:
            if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v606.__r_.__value_.__l.__data_);
            v606 = *(std::string *)v616;
          }
        }
        else
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v606.__r_.__value_.__l.__data_, v580, (uint64_t)v616);
          v334 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v576, (const void **)v616);
          if ((v616[23] & 0x80000000) != 0)
            operator delete(*(void **)v616);
          if (v575 != v334)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v606.__r_.__value_.__l.__data_, v580, (uint64_t)v616);
            goto LABEL_576;
          }
        }
LABEL_579:
        v335 = *(_BYTE *)(a1 + 1000);
        v336 = v300 + 216 * v600;
        v337 = *(_DWORD **)(v336 + 72);
        v338 = *(_DWORD **)(v336 + 80);
        v339 = (uint64_t *)(v336 + 72);
        NeuralAdapterModule::process_markers(a1, v337, v338);
        *(_BYTE *)(a1 + 1000) = v335;
        v340 = *(_QWORD *)(a1 + 864);
        if (v340 >= *(_QWORD *)(a1 + 872))
        {
          v342 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, (__int128 *)&v606);
        }
        else
        {
          if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a1 + 864), v606.__r_.__value_.__l.__data_, v606.__r_.__value_.__l.__size_);
          }
          else
          {
            v341 = *(_OWORD *)&v606.__r_.__value_.__l.__data_;
            *(_QWORD *)(v340 + 16) = *((_QWORD *)&v606.__r_.__value_.__l + 2);
            *(_OWORD *)v340 = v341;
          }
          v342 = v340 + 24;
          *(_QWORD *)(a1 + 864) = v340 + 24;
        }
        *(_QWORD *)(a1 + 864) = v342;
        v343 = (__int128 *)(v300 + 216 * v600 + 120);
        v344 = *(_QWORD *)(a1 + 888);
        if (v344 >= *(_QWORD *)(a1 + 896))
        {
          v345 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v595, v343);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v595, v343);
          v345 = v344 + 24;
        }
        *(_QWORD *)(a1 + 888) = v345;
        v346 = *(_QWORD *)(a1 + 912);
        if (v346 >= *(_QWORD *)(a1 + 920))
        {
          v347 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, v582);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v594, v582);
          v347 = v346 + 24;
        }
        *(_QWORD *)(a1 + 912) = v347;
        if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v605, v606.__r_.__value_.__l.__data_, v606.__r_.__value_.__l.__size_);
        else
          v605 = v606;
        if ((__p[63] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v604, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
        else
          v604 = *(std::string *)&__p[40];
        TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v616, (__int128 *)&v605, (__int128 *)&v604, *(int *)&__p[8], *(int *)&__p[12], 0, 0, *(_BYTE *)(a1 + 1000), *(float *)(a1 + 296), *(float *)(a1 + 300));
        v348 = *(_QWORD *)(a1 + 936);
        v349 = *(_QWORD *)(a1 + 944);
        v593 = v302;
        if (v348 >= v349)
        {
          v354 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v348 - *v591) >> 3);
          v355 = v354 + 1;
          if ((unint64_t)(v354 + 1) > 0x276276276276276)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v356 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v349 - *v591) >> 3);
          if (2 * v356 > v355)
            v355 = 2 * v356;
          if (v356 >= 0x13B13B13B13B13BLL)
            v357 = 0x276276276276276;
          else
            v357 = v355;
          v624 = a1 + 944;
          v358 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v357);
          v359 = (std::string::size_type)&v358[104 * v354];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v358;
          buf.__r_.__value_.__l.__size_ = v359;
          v623 = &v358[104 * v360];
          v361 = *(_OWORD *)v616;
          *(_QWORD *)(v359 + 16) = *(_QWORD *)&v616[16];
          *(_OWORD *)v359 = v361;
          memset(v616, 0, 24);
          v362 = *(_OWORD *)&v616[24];
          *(_QWORD *)(v359 + 40) = v617;
          *(_OWORD *)(v359 + 24) = v362;
          *(_QWORD *)&v616[32] = 0;
          v617 = 0;
          *(_QWORD *)&v616[24] = 0;
          v363 = v619;
          *(_OWORD *)(v359 + 48) = v618;
          *(_OWORD *)(v359 + 64) = v363;
          *(_QWORD *)(v359 + 88) = 0;
          *(_QWORD *)(v359 + 96) = 0;
          *(_QWORD *)(v359 + 80) = 0;
          *(_OWORD *)(v359 + 80) = v620;
          *(_QWORD *)(v359 + 96) = v621;
          v620 = 0uLL;
          v621 = 0;
          buf.__r_.__value_.__r.__words[2] = v359 + 104;
          std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, &buf);
          v353 = *(_QWORD *)(a1 + 936);
          std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          v350 = *(_OWORD *)v616;
          *(_QWORD *)(v348 + 16) = *(_QWORD *)&v616[16];
          *(_OWORD *)v348 = v350;
          memset(v616, 0, 24);
          v351 = v617;
          *(_OWORD *)(v348 + 24) = *(_OWORD *)&v616[24];
          *(_QWORD *)(v348 + 40) = v351;
          *(_QWORD *)&v616[32] = 0;
          v617 = 0;
          *(_QWORD *)&v616[24] = 0;
          v352 = v619;
          *(_OWORD *)(v348 + 48) = v618;
          *(_OWORD *)(v348 + 64) = v352;
          *(_QWORD *)(v348 + 80) = 0;
          *(_QWORD *)(v348 + 88) = 0;
          *(_QWORD *)(v348 + 96) = 0;
          *(_OWORD *)(v348 + 80) = v620;
          *(_QWORD *)(v348 + 96) = v621;
          v620 = 0uLL;
          v621 = 0;
          v353 = v348 + 104;
        }
        *(_QWORD *)(a1 + 936) = v353;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620;
        std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (SHIBYTE(v617) < 0)
          operator delete(*(void **)&v616[24]);
        if ((v616[23] & 0x80000000) != 0)
          operator delete(*(void **)v616);
        if (SHIBYTE(v604.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v604.__r_.__value_.__l.__data_);
        if (SHIBYTE(v605.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v605.__r_.__value_.__l.__data_);
        v364 = *(_DWORD *)(v300 + 216 * v600 + 28);
        if (!v364)
          v364 = 200;
        v365 = *(_QWORD *)(a1 + 936);
        *(_DWORD *)(v365 - 48) = v364;
        if ((uint64_t *)(v365 - 24) != v339)
          std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(v365 - 24), *v339, *(_QWORD *)(v300 + 216 * v600 + 80), 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v300 + 216 * v600 + 80) - *v339) >> 3));
        v366 = *(_QWORD *)(a1 + 976);
        v367 = *(_QWORD *)(a1 + 984);
        if (v366 != v367)
        {
          std::vector<MarkerRecord>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MarkerRecord*>,std::__wrap_iter<MarkerRecord*>>((uint64_t *)(*(_QWORD *)(a1 + 936) - 24), *(_QWORD *)(*(_QWORD *)(a1 + 936) - 16), v366, v367, 0x6DB6DB6DB6DB6DB7 * ((v367 - v366) >> 3));
          std::vector<MarkerRecord>::__clear[abi:ne180100](v579);
        }
        if (*(_BYTE *)(a1 + 1000))
          *(_BYTE *)(a1 + 1000) = 0;
        if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v606.__r_.__value_.__r.__words[2]);
        else
          size = v606.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)v616, size + 1);
        if (v616[23] >= 0)
          v369 = v616;
        else
          v369 = *(_BYTE **)v616;
        if (size)
        {
          if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v370 = &v606;
          else
            v370 = (std::string *)v606.__r_.__value_.__r.__words[0];
          memmove(v369, v370, size);
        }
        *(_WORD *)&v369[size] = 32;
        if (v616[23] >= 0)
          v371 = v616;
        else
          v371 = *(const std::string::value_type **)v616;
        if (v616[23] >= 0)
          v372 = v616[23];
        else
          v372 = *(_QWORD *)&v616[8];
        std::string::append(v601, v371, v372);
        if ((v616[23] & 0x80000000) != 0)
          operator delete(*(void **)v616);
        if (v585 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v586, (const void **)&v606.__r_.__value_.__l.__data_))
        {
          if (v577 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v578, (const void **)&v606.__r_.__value_.__l.__data_))
          {
            if (v572 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v573, (const void **)&v606.__r_.__value_.__l.__data_))
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v375 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                v377 = &v606;
                if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v377 = (std::string *)v606.__r_.__value_.__r.__words[0];
                *(_DWORD *)v616 = 136315138;
                *(_QWORD *)&v616[4] = v377;
              }
              v378 = &v606;
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v378 = (std::string *)v606.__r_.__value_.__r.__words[0];
            }
            v373 = 44;
          }
          else
          {
            v373 = 46;
          }
          goto LABEL_662;
        }
        if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v606.__r_.__value_.__l.__size_ != 1)
            goto LABEL_663;
          v374 = (std::string *)v606.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) != 1)
            goto LABEL_663;
          v374 = &v606;
        }
        if (v374->__r_.__value_.__s.__data_[0] == 35)
        {
          v373 = 35;
LABEL_662:
          NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v373, v590, v597);
        }
LABEL_663:
        v379 = (v590 - v597);
        if ((int)v379 >= *(_DWORD *)(a1 + 560))
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v385 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v616 = 67109120;
            *(_DWORD *)&v616[4] = v590 - v597;
            _os_log_impl(&dword_1DE3F6000, v385, OS_LOG_TYPE_INFO, "Max word limit reached. word count = %d", v616, 8u);
          }
          Diagnostics::log(6, "Max word limit reached. word count = %d", v386, v379);
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3) < *(int *)(a1 + 564))
            goto LABEL_752;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v380 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            v382 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3);
            *(_DWORD *)v616 = 134217984;
            *(_QWORD *)&v616[4] = v382;
            _os_log_impl(&dword_1DE3F6000, v380, OS_LOG_TYPE_INFO, "Max phone limit reached. phone count = %ld", v616, 0xCu);
          }
          Diagnostics::log(6, "Max phone limit reached. phone count = %ld", v381, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3));
          if (*(_QWORD *)(a1 + 1008) == *(_QWORD *)(a1 + 1016))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v383 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v616 = 0;
              _os_log_impl(&dword_1DE3F6000, v383, OS_LOG_TYPE_INFO, "No proper stop position found in phone vector, do hard split", v616, 2u);
            }
            Diagnostics::log(6, "No proper stop position found in phone vector, do hard split", v384);
            NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, 35, v590, v597);
          }
        }
        v387 = *(uint64_t **)(a1 + 1008);
        v388 = *v387;
        v389 = v387[1];
        v390 = v387[2];
        v589 = *((char *)v387 + 24);
        v391 = *(uint64_t **)(a1 + 1016);
        v392 = (char *)v391 - (char *)(v387 + 4);
        if (v391 != v387 + 4)
          memmove(v387, v387 + 4, v392 - 7);
        *(_QWORD *)(a1 + 1016) = (char *)v387 + v392;
        v393 = *(__int128 **)(a1 + 864);
        v394 = *(_QWORD *)(a1 + 856);
        v395 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v393 - v394) >> 3);
        v396 = v389;
        if (v389 >= v395)
          goto LABEL_703;
        v397 = *(char *)(a1 + 423);
        if (v397 >= 0)
          v398 = *(unsigned __int8 *)(a1 + 423);
        else
          v398 = *(_QWORD *)(a1 + 408);
        v396 = v389;
        while (1)
        {
          v399 = (unsigned __int8 *)(v394 + 24 * v396);
          v400 = v399[23];
          if ((v400 & 0x80u) == 0)
            v401 = v399[23];
          else
            v401 = *((_QWORD *)v399 + 1);
          if (v401 != v398)
            goto LABEL_702;
          if (v397 >= 0)
            v402 = (unsigned __int8 *)(a1 + 400);
          else
            v402 = (unsigned __int8 *)v598->__r_.__value_.__r.__words[0];
          if ((v400 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v399, v402, *((_QWORD *)v399 + 1)))
              goto LABEL_702;
            goto LABEL_700;
          }
          if (v399[23])
            break;
LABEL_700:
          if (++v396 == v395)
          {
            v396 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v393 - v394) >> 3);
            goto LABEL_702;
          }
        }
        while (*v399 == *v402)
        {
          ++v399;
          ++v402;
          if (!--v400)
            goto LABEL_700;
        }
LABEL_702:
        v4 = a1 + 856;
LABEL_703:
        memset(&buf, 0, sizeof(buf));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&buf, (__int128 *)(v394 + 24 * v396), v393, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v393 - v394 + -24 * v396) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v4, v389);
        v403 = (__int128 *)(*(_QWORD *)(a1 + 880) + 24 * v396);
        v404 = *(__int128 **)(a1 + 888);
        memset(&v612, 0, sizeof(v612));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v612, v403, v404, 0xAAAAAAAAAAAAAAABLL * (((char *)v404 - (char *)v403) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v595, v389);
        v405 = (__int128 *)(*(_QWORD *)(a1 + 904) + 24 * v396);
        v406 = *(__int128 **)(a1 + 912);
        memset(&v611, 0, sizeof(v611));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v611, v405, v406, 0xAAAAAAAAAAAAAAABLL * (((char *)v406 - (char *)v405) >> 3));
        std::vector<std::string>::resize((std::vector<std::string> *)v594, v389);
        v407 = *(_QWORD *)(a1 + 928);
        v408 = *(_QWORD *)(a1 + 936);
        v409 = v407 + 104 * v396;
        memset(&v610, 0, sizeof(v610));
        *(_QWORD *)v616 = &v610;
        v616[8] = 0;
        if (v408 != v409)
        {
          v410 = 0x4EC4EC4EC4EC4EC5 * ((v408 - v409) >> 3);
          if (v410 > 0x276276276276276)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v610.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v410);
          v610.__r_.__value_.__l.__size_ = v610.__r_.__value_.__r.__words[0];
          v610.__r_.__value_.__r.__words[2] = v610.__r_.__value_.__r.__words[0] + 104 * v411;
          v610.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TacotronPhoneFeature>,TacotronPhoneFeature*,TacotronPhoneFeature*,TacotronPhoneFeature*>((uint64_t)&v610.__r_.__value_.__r.__words[2], v409, v408, (uint64_t)v610.__r_.__value_.__l.__data_);
          v409 = *(_QWORD *)(a1 + 936);
          v407 = *(_QWORD *)(a1 + 928);
        }
        v412 = 0x4EC4EC4EC4EC4EC5 * ((v409 - v407) >> 3);
        v413 = v389 - v412;
        if (v389 <= v412)
        {
          if (v389 < v412)
          {
            v421 = v407 + 104 * v389;
            while (v409 != v421)
            {
              v409 -= 104;
              std::allocator<TacotronPhoneFeature>::destroy[abi:ne180100](v409);
            }
            *(_QWORD *)(a1 + 936) = v421;
          }
        }
        else
        {
          v414 = *v587;
          if (0x4EC4EC4EC4EC4EC5 * ((*v587 - v409) >> 3) >= v413)
          {
            v422 = v409 + 104 * v413;
            do
            {
              *(_OWORD *)(v409 + 16) = 0uLL;
              *(_OWORD *)(v409 + 32) = 0uLL;
              *(_OWORD *)v409 = 0uLL;
              *(_QWORD *)(v409 + 48) = 0x8000000080000000;
              *(_DWORD *)(v409 + 56) = 0;
              *(_DWORD *)(v409 + 59) = 0;
              *(_OWORD *)(v409 + 64) = xmmword_1DED16C00;
              *(_QWORD *)(v409 + 88) = 0;
              *(_QWORD *)(v409 + 96) = 0;
              *(_QWORD *)(v409 + 80) = 0;
              v409 += 104;
            }
            while (v409 != v422);
            *(_QWORD *)(a1 + 936) = v422;
          }
          else
          {
            if (v389 > 0x276276276276276)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            *(_QWORD *)&v616[32] = a1 + 944;
            v415 = 0x4EC4EC4EC4EC4EC5 * ((v414 - v407) >> 3);
            v416 = 2 * v415;
            if (2 * v415 <= v389)
              v416 = v389;
            if (v415 >= 0x13B13B13B13B13BLL)
              v417 = 0x276276276276276;
            else
              v417 = v416;
            v418 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v417);
            v419 = &v418[104 * v412];
            *(_QWORD *)v616 = v418;
            *(_QWORD *)&v616[8] = v419;
            *(_QWORD *)&v616[24] = &v418[104 * v420];
            do
            {
              *((_OWORD *)v419 + 1) = 0uLL;
              *((_OWORD *)v419 + 2) = 0uLL;
              *(_OWORD *)v419 = 0uLL;
              *((_QWORD *)v419 + 6) = 0x8000000080000000;
              *((_DWORD *)v419 + 14) = 0;
              *(_DWORD *)(v419 + 59) = 0;
              *((_OWORD *)v419 + 4) = xmmword_1DED16C00;
              *((_QWORD *)v419 + 11) = 0;
              *((_QWORD *)v419 + 12) = 0;
              *((_QWORD *)v419 + 10) = 0;
              v419 += 104;
            }
            while (v419 != &v418[104 * v389]);
            *(_QWORD *)&v616[16] = &v418[104 * v389];
            std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, v616);
            std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v616);
          }
        }
        v423 = *(unsigned __int8 *)(a1 + 975);
        for (i = v390; ; ++i)
        {
          v425 = v423;
          if ((v423 & 0x80) != 0)
            v425 = *(_QWORD *)(a1 + 960);
          if (i >= v425)
            goto LABEL_737;
          v426 = *std::string::at(v601, i);
          if (v426 != *std::string::at(v598, 0) && *std::string::at(v601, i) != 32)
            break;
          v423 = *(unsigned __int8 *)(a1 + 975);
          if (*(char *)(a1 + 975) < 0)
            v427 = *(_QWORD *)(a1 + 960);
          else
            v427 = *(unsigned __int8 *)(a1 + 975);
          if (i >= v427 - 1)
            goto LABEL_737;
        }
        v423 = *(unsigned __int8 *)(a1 + 975);
LABEL_737:
        v428 = a1 + 952;
        if ((v423 & 0x80) != 0)
        {
          v428 = *(_QWORD *)(a1 + 952);
          v423 = *(_QWORD *)(a1 + 960);
        }
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v609, (char *)(v428 + i), (char *)(v428 + v423), v423 - i);
        std::string::resize(v601, v390, 0);
        UTFString::rstrip(v601);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v429 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v616 = 67109632;
          *(_DWORD *)&v616[4] = v589;
          *(_WORD *)&v616[8] = 2048;
          *(_QWORD *)&v616[10] = v388 + 1;
          *(_WORD *)&v616[18] = 2048;
          *(_QWORD *)&v616[20] = v389;
          _os_log_impl(&dword_1DE3F6000, v429, OS_LOG_TYPE_INFO, "Break [%c] %zu words %zu phones", v616, 0x1Cu);
        }
        Diagnostics::log(6, "Break [%c] %zu words %zu phones", v430, v589, v388 + 1, v389);
        NeuralAdapterModule::dump_features((NeuralAdapterModule *)a1);
        v431 = *(_OWORD *)v4;
        *(_OWORD *)v4 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v431;
        v432 = *(_QWORD *)(a1 + 872);
        *(_QWORD *)(a1 + 872) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
        buf.__r_.__value_.__r.__words[2] = v432;
        v433 = *(_OWORD *)(a1 + 880);
        *(_OWORD *)(a1 + 880) = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
        *(_OWORD *)&v612.__r_.__value_.__l.__data_ = v433;
        v434 = *(_QWORD *)(a1 + 896);
        *(_QWORD *)(a1 + 896) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
        v612.__r_.__value_.__r.__words[2] = v434;
        v435 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v4 + 48) = *(_OWORD *)&v611.__r_.__value_.__l.__data_;
        *(_OWORD *)&v611.__r_.__value_.__l.__data_ = v435;
        v436 = *(_QWORD *)(a1 + 920);
        *(_QWORD *)(a1 + 920) = *((_QWORD *)&v611.__r_.__value_.__l + 2);
        v611.__r_.__value_.__r.__words[2] = v436;
        v437 = *(_OWORD *)(a1 + 928);
        *(_OWORD *)(a1 + 928) = *(_OWORD *)&v610.__r_.__value_.__l.__data_;
        *(_OWORD *)&v610.__r_.__value_.__l.__data_ = v437;
        v438 = *(_QWORD *)(a1 + 944);
        *(_QWORD *)(a1 + 944) = *((_QWORD *)&v610.__r_.__value_.__l + 2);
        v610.__r_.__value_.__r.__words[2] = v438;
        *(_OWORD *)v616 = *(_OWORD *)&v601->__r_.__value_.__l.__data_;
        v439 = *(_OWORD *)v616;
        *(_QWORD *)&v616[16] = *(_QWORD *)(a1 + 968);
        v440 = *(_QWORD *)&v616[16];
        *(_OWORD *)&v601->__r_.__value_.__l.__data_ = *(_OWORD *)&v609.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 968) = *((_QWORD *)&v609.__r_.__value_.__l + 2);
        v609.__r_.__value_.__r.__words[2] = v440;
        *(_OWORD *)&v609.__r_.__value_.__l.__data_ = v439;
        v441 = *(uint64_t **)(a1 + 1008);
        v442 = *(uint64_t **)(a1 + 1016);
        while (v441 != v442)
        {
          v443 = v441[1] - v389;
          *v441 += ~v388;
          v441[1] = v443;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v444 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            v446 = *((char *)v441 + 24);
            v447 = v441[1];
            v448 = *v441 + 1;
            *(_DWORD *)v616 = 67109632;
            *(_DWORD *)&v616[4] = v446;
            *(_WORD *)&v616[8] = 2048;
            *(_QWORD *)&v616[10] = v448;
            *(_WORD *)&v616[18] = 2048;
            *(_QWORD *)&v616[20] = v447;
            _os_log_impl(&dword_1DE3F6000, v444, OS_LOG_TYPE_INFO, "Potential break [%c] %zu words %zu phones", v616, 0x1Cu);
          }
          v449 = *((char *)v441 + 24);
          v450 = *v441;
          v451 = v441[1];
          v441 += 4;
          Diagnostics::log(6, "Potential break [%c] %zu words %zu phones", v445, v449, v450 + 1, v451);
        }
        if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v609.__r_.__value_.__l.__data_);
        v597 += v388 + 1;
        *(_QWORD *)v616 = &v610;
        std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
        *(_QWORD *)v616 = &v611;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
        *(_QWORD *)v616 = &v612;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
        *(_QWORD *)v616 = &buf;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
        v17 = (__int128 *)(a1 + 400);
LABEL_752:
        if (SHIBYTE(v606.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v606.__r_.__value_.__l.__data_);
        v20 = v600 + 1;
        if (v584 == (_DWORD)v600 + 1)
        {
LABEL_757:
          v16 = v20;
          if (*(_QWORD *)(a1 + 1008) == *(_QWORD *)(a1 + 1016) || *(_BYTE *)(a1 + 645))
          {
            v454 = v581;
            if (!*(_BYTE *)(a1 + 645))
              goto LABEL_763;
            NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, 35, v581, v597);
LABEL_787:
            v460 = *(_QWORD *)(a1 + 864);
            if (v460 >= *(_QWORD *)(a1 + 872))
            {
              v461 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, v17);
              v461 = v460 + 24;
            }
            *(_QWORD *)(a1 + 864) = v461;
            v462 = *(_QWORD *)(a1 + 888);
            if (v462 == *(_QWORD *)(a1 + 880))
            {
              std::string::basic_string[abi:ne180100]<0>(&v611, "-");
            }
            else if (*(char *)(v462 - 1) < 0)
            {
              std::string::__init_copy_ctor_external(&v611, *(const std::string::value_type **)(v462 - 24), *(_QWORD *)(v462 - 16));
            }
            else
            {
              v463 = *(_OWORD *)(v462 - 24);
              v611.__r_.__value_.__r.__words[2] = *(_QWORD *)(v462 - 8);
              *(_OWORD *)&v611.__r_.__value_.__l.__data_ = v463;
            }
            v464 = *(_QWORD *)(a1 + 888);
            if (v464 >= *(_QWORD *)(a1 + 896))
            {
              v466 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v595, (__int128 *)&v611);
            }
            else
            {
              if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 888), v611.__r_.__value_.__l.__data_, v611.__r_.__value_.__l.__size_);
              }
              else
              {
                v465 = *(_OWORD *)&v611.__r_.__value_.__l.__data_;
                *(_QWORD *)(v464 + 16) = *((_QWORD *)&v611.__r_.__value_.__l + 2);
                *(_OWORD *)v464 = v465;
              }
              v466 = v464 + 24;
              *(_QWORD *)(a1 + 888) = v464 + 24;
            }
            *(_QWORD *)(a1 + 888) = v466;
            v467 = *(_QWORD *)(a1 + 912);
            if (v467 == *(_QWORD *)(a1 + 904))
            {
              std::string::basic_string[abi:ne180100]<0>(&v610, "narrator");
            }
            else if (*(char *)(v467 - 1) < 0)
            {
              std::string::__init_copy_ctor_external(&v610, *(const std::string::value_type **)(v467 - 24), *(_QWORD *)(v467 - 16));
            }
            else
            {
              v468 = *(_OWORD *)(v467 - 24);
              v610.__r_.__value_.__r.__words[2] = *(_QWORD *)(v467 - 8);
              *(_OWORD *)&v610.__r_.__value_.__l.__data_ = v468;
            }
            v469 = *(_QWORD *)(a1 + 912);
            if (v469 >= *(_QWORD *)(a1 + 920))
            {
              v471 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, (__int128 *)&v610);
            }
            else
            {
              if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v610.__r_.__value_.__l.__data_, v610.__r_.__value_.__l.__size_);
              }
              else
              {
                v470 = *(_OWORD *)&v610.__r_.__value_.__l.__data_;
                *(_QWORD *)(v469 + 16) = *((_QWORD *)&v610.__r_.__value_.__l + 2);
                *(_OWORD *)v469 = v470;
              }
              v471 = v469 + 24;
              *(_QWORD *)(a1 + 912) = v469 + 24;
            }
            *(_QWORD *)(a1 + 912) = v471;
            if (*(char *)(a1 + 423) >= 0)
              v472 = *(unsigned __int8 *)(a1 + 423);
            else
              v472 = *(_QWORD *)(a1 + 408);
            std::string::basic_string[abi:ne180100]((uint64_t)v616, v472 + 1);
            if (v616[23] >= 0)
              v473 = v616;
            else
              v473 = *(_BYTE **)v616;
            if (v472)
            {
              if (*(char *)(a1 + 423) >= 0)
                v474 = v17;
              else
                v474 = *(__int128 **)(a1 + 400);
              memmove(v473, v474, v472);
            }
            *(_WORD *)&v473[v472] = 32;
            if (v616[23] >= 0)
              v475 = v616;
            else
              v475 = *(const std::string::value_type **)v616;
            if (v616[23] >= 0)
              v476 = v616[23];
            else
              v476 = *(_QWORD *)&v616[8];
            std::string::append(v601, v475, v476);
            if ((v616[23] & 0x80000000) != 0)
              operator delete(*(void **)v616);
            if (*(char *)(a1 + 423) < 0)
              std::string::__init_copy_ctor_external(&v609, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
            else
              v609 = *(std::string *)v17;
            if ((__p[63] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
            else
              v608 = *(std::string *)&__p[40];
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v616, (__int128 *)&v609, (__int128 *)&v608, *(int *)&__p[8], *(int *)&__p[12], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
            v477 = *(_QWORD *)(a1 + 936);
            v478 = *(_QWORD *)(a1 + 944);
            if (v477 >= v478)
            {
              v483 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v477 - *v591) >> 3);
              v484 = v483 + 1;
              if ((unint64_t)(v483 + 1) > 0x276276276276276)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v485 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v478 - *v591) >> 3);
              if (2 * v485 > v484)
                v484 = 2 * v485;
              if (v485 >= 0x13B13B13B13B13BLL)
                v486 = 0x276276276276276;
              else
                v486 = v484;
              v624 = a1 + 944;
              v487 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v486);
              v488 = (std::string::size_type)&v487[104 * v483];
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v487;
              buf.__r_.__value_.__l.__size_ = v488;
              v623 = &v487[104 * v489];
              v490 = *(_OWORD *)v616;
              *(_QWORD *)(v488 + 16) = *(_QWORD *)&v616[16];
              *(_OWORD *)v488 = v490;
              memset(v616, 0, 24);
              v491 = *(_OWORD *)&v616[24];
              *(_QWORD *)(v488 + 40) = v617;
              *(_OWORD *)(v488 + 24) = v491;
              *(_QWORD *)&v616[32] = 0;
              v617 = 0;
              *(_QWORD *)&v616[24] = 0;
              v492 = v619;
              *(_OWORD *)(v488 + 48) = v618;
              *(_OWORD *)(v488 + 64) = v492;
              *(_QWORD *)(v488 + 88) = 0;
              *(_QWORD *)(v488 + 96) = 0;
              *(_QWORD *)(v488 + 80) = 0;
              *(_OWORD *)(v488 + 80) = v620;
              *(_QWORD *)(v488 + 96) = v621;
              v620 = 0uLL;
              v621 = 0;
              buf.__r_.__value_.__r.__words[2] = v488 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, &buf);
              v482 = *(_QWORD *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              v479 = *(_OWORD *)v616;
              *(_QWORD *)(v477 + 16) = *(_QWORD *)&v616[16];
              *(_OWORD *)v477 = v479;
              memset(v616, 0, 24);
              v480 = v617;
              *(_OWORD *)(v477 + 24) = *(_OWORD *)&v616[24];
              *(_QWORD *)(v477 + 40) = v480;
              *(_QWORD *)&v616[32] = 0;
              v617 = 0;
              *(_QWORD *)&v616[24] = 0;
              v481 = v619;
              *(_OWORD *)(v477 + 48) = v618;
              *(_OWORD *)(v477 + 64) = v481;
              *(_QWORD *)(v477 + 80) = 0;
              *(_QWORD *)(v477 + 88) = 0;
              *(_QWORD *)(v477 + 96) = 0;
              *(_OWORD *)(v477 + 80) = v620;
              *(_QWORD *)(v477 + 96) = v621;
              v620 = 0uLL;
              v621 = 0;
              v482 = v477 + 104;
            }
            *(_QWORD *)(a1 + 936) = v482;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620;
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
            if (SHIBYTE(v617) < 0)
              operator delete(*(void **)&v616[24]);
            if ((v616[23] & 0x80000000) != 0)
              operator delete(*(void **)v616);
            if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v608.__r_.__value_.__l.__data_);
            if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v609.__r_.__value_.__l.__data_);
            if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v610.__r_.__value_.__l.__data_);
            if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v611.__r_.__value_.__l.__data_);
            v452 = (*v596)[3];
            v453 = 0xF0F0F0F0F0F0F0F1 * (((*v596)[4] - v452) >> 3);
          }
          else
          {
            v452 = (*v596)[3];
            v453 = 0xF0F0F0F0F0F0F0F1 * (((*v596)[4] - v452) >> 3);
            v454 = v581;
            if (v453 - 1 > v581)
            {
LABEL_763:
              if (*(char *)(a1 + 975) < 0)
              {
                std::string::__init_copy_ctor_external(&v612, *(const std::string::value_type **)(a1 + 952), *(_QWORD *)(a1 + 960));
              }
              else
              {
                *(_OWORD *)&v612.__r_.__value_.__l.__data_ = *(_OWORD *)&v601->__r_.__value_.__l.__data_;
                v612.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 968);
              }
              UTFString::rstrip(&v612);
              buf = v612;
              memset(&v612, 0, sizeof(v612));
              NeuralAdapterModule::find_last_char((uint64_t)v616, (uint64_t)&buf, 1);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v612.__r_.__value_.__l.__data_);
              if (v585 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v586, (const void **)v616))
              {
                v455 = 35;
              }
              else if (v577 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v578, (const void **)v616))
              {
                if (v572 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v573, (const void **)v616))
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v456 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                  {
                    v458 = v616;
                    if (v616[23] < 0)
                      v458 = *(_BYTE **)v616;
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v458;
                  }
                  v459 = v616;
                  if (v616[23] < 0)
                    v459 = *(_BYTE **)v616;
                }
                v455 = 44;
              }
              else
              {
                v455 = 46;
              }
              NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v455, v581, v597);
              if ((v616[23] & 0x80000000) != 0)
                operator delete(*(void **)v616);
              goto LABEL_787;
            }
          }
          if (v453 > v454)
          {
            if (*(_BYTE *)(a1 + 645))
            {
              NeuralAdapterModule::find_last_char((uint64_t)&v612, v452 + 136 * (int)v454 + 40, 0);
              if ((-1 - 0xF0F0F0F0F0F0F0FLL * (((*v596)[4] - (*v596)[3]) >> 3) == v454
                 || *(_QWORD *)(a1 + 1008) == *(_QWORD *)(a1 + 1016)
                 && (v581 - v597 + 1 == *(_DWORD *)(a1 + 560)
                  || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3) >= *(int *)(a1 + 564)))
                && v585 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v586, (const void **)&v612.__r_.__value_.__l.__data_))
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v493 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)v616 = 0;
                  _os_log_impl(&dword_1DE3F6000, v493, OS_LOG_TYPE_DEBUG, "Append period in the end of utterance.", v616, 2u);
                }
                Diagnostics::log(7, "Append period in the end of utterance.", v494);
                std::string::operator=(&v612, (const std::string *)(a1 + 568));
              }
              if (v585 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v586, (const void **)&v612.__r_.__value_.__l.__data_))
              {
                v495 = *(_QWORD *)(a1 + 864);
                if (v495 >= *(_QWORD *)(a1 + 872))
                {
                  v497 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, (__int128 *)&v612);
                }
                else
                {
                  if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 864), v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v496 = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v495 + 16) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
                    *(_OWORD *)v495 = v496;
                  }
                  v497 = v495 + 24;
                  *(_QWORD *)(a1 + 864) = v495 + 24;
                }
                *(_QWORD *)(a1 + 864) = v497;
                v498 = *(_QWORD *)(a1 + 888);
                v499 = (__int128 *)(v498 - 24);
                if (v498 >= *(_QWORD *)(a1 + 896))
                {
                  v500 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v595, v499);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v595, v499);
                  v500 = v498 + 24;
                }
                *(_QWORD *)(a1 + 888) = v500;
                v501 = *(_QWORD *)(a1 + 912);
                v502 = (__int128 *)(v501 - 24);
                if (v501 >= *(_QWORD *)(a1 + 920))
                {
                  v503 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, v502);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v594, v502);
                  v503 = v501 + 24;
                }
                *(_QWORD *)(a1 + 912) = v503;
                if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v611, v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
                else
                  v611 = v612;
                if ((__p[63] & 0x80000000) != 0)
                  std::string::__init_copy_ctor_external(&v610, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
                else
                  v610 = *(std::string *)&__p[40];
                TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v616, (__int128 *)&v611, (__int128 *)&v610, *(int *)&__p[8], *(int *)&__p[12], 0, 1, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
                v504 = *(_QWORD *)(a1 + 936);
                v505 = *(_QWORD *)(a1 + 944);
                if (v504 >= v505)
                {
                  v510 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v504 - *v591) >> 3);
                  v511 = v510 + 1;
                  if ((unint64_t)(v510 + 1) > 0x276276276276276)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v512 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v505 - *v591) >> 3);
                  if (2 * v512 > v511)
                    v511 = 2 * v512;
                  if (v512 >= 0x13B13B13B13B13BLL)
                    v513 = 0x276276276276276;
                  else
                    v513 = v511;
                  v624 = a1 + 944;
                  v514 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v513);
                  v515 = (std::string::size_type)&v514[104 * v510];
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v514;
                  buf.__r_.__value_.__l.__size_ = v515;
                  v623 = &v514[104 * v516];
                  v517 = *(_OWORD *)v616;
                  *(_QWORD *)(v515 + 16) = *(_QWORD *)&v616[16];
                  *(_OWORD *)v515 = v517;
                  memset(v616, 0, 24);
                  v518 = *(_OWORD *)&v616[24];
                  *(_QWORD *)(v515 + 40) = v617;
                  *(_OWORD *)(v515 + 24) = v518;
                  *(_QWORD *)&v616[32] = 0;
                  v617 = 0;
                  *(_QWORD *)&v616[24] = 0;
                  v519 = v619;
                  *(_OWORD *)(v515 + 48) = v618;
                  *(_OWORD *)(v515 + 64) = v519;
                  *(_QWORD *)(v515 + 88) = 0;
                  *(_QWORD *)(v515 + 96) = 0;
                  *(_QWORD *)(v515 + 80) = 0;
                  *(_OWORD *)(v515 + 80) = v620;
                  *(_QWORD *)(v515 + 96) = v621;
                  v620 = 0uLL;
                  v621 = 0;
                  buf.__r_.__value_.__r.__words[2] = v515 + 104;
                  std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, &buf);
                  v509 = *(_QWORD *)(a1 + 936);
                  std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
                }
                else
                {
                  v506 = *(_OWORD *)v616;
                  *(_QWORD *)(v504 + 16) = *(_QWORD *)&v616[16];
                  *(_OWORD *)v504 = v506;
                  memset(v616, 0, 24);
                  v507 = v617;
                  *(_OWORD *)(v504 + 24) = *(_OWORD *)&v616[24];
                  *(_QWORD *)(v504 + 40) = v507;
                  *(_QWORD *)&v616[32] = 0;
                  v617 = 0;
                  *(_QWORD *)&v616[24] = 0;
                  v508 = v619;
                  *(_OWORD *)(v504 + 48) = v618;
                  *(_OWORD *)(v504 + 64) = v508;
                  *(_QWORD *)(v504 + 80) = 0;
                  *(_QWORD *)(v504 + 88) = 0;
                  *(_QWORD *)(v504 + 96) = 0;
                  *(_OWORD *)(v504 + 80) = v620;
                  *(_QWORD *)(v504 + 96) = v621;
                  v620 = 0uLL;
                  v621 = 0;
                  v509 = v504 + 104;
                }
                *(_QWORD *)(a1 + 936) = v509;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620;
                std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                if (SHIBYTE(v617) < 0)
                  operator delete(*(void **)&v616[24]);
                if ((v616[23] & 0x80000000) != 0)
                  operator delete(*(void **)v616);
                if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v610.__r_.__value_.__l.__data_);
                if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v611.__r_.__value_.__l.__data_);
                *(_DWORD *)(*(_QWORD *)(a1 + 936) - 48) = 200;
                if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v520 = HIBYTE(v612.__r_.__value_.__r.__words[2]);
                else
                  v520 = v612.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)v616, v520 + 1);
                if (v616[23] >= 0)
                  v521 = v616;
                else
                  v521 = *(_BYTE **)v616;
                if (v520)
                {
                  if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v522 = &v612;
                  else
                    v522 = (std::string *)v612.__r_.__value_.__r.__words[0];
                  memmove(v521, v522, v520);
                }
                *(_WORD *)&v521[v520] = 32;
                if (v616[23] >= 0)
                  v523 = v616;
                else
                  v523 = *(const std::string::value_type **)v616;
                if (v616[23] >= 0)
                  v524 = v616[23];
                else
                  v524 = *(_QWORD *)&v616[8];
                std::string::append(v601, v523, v524);
                if ((v616[23] & 0x80000000) != 0)
                  operator delete(*(void **)v616);
                if (-1 - 0xF0F0F0F0F0F0F0FLL * (((*v596)[4] - (*v596)[3]) >> 3) > v454)
                {
                  if (*(_QWORD *)(a1 + 1008) == *(_QWORD *)(a1 + 1016))
                  {
                    if (v581 - v597 + 1 != *(_DWORD *)(a1 + 560))
                    {
                      v525 = *(_QWORD *)(a1 + 864);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v525 - *(_QWORD *)(a1 + 856)) >> 3) < *(int *)(a1 + 564))
                        goto LABEL_930;
                    }
                  }
                  else
                  {
                    v525 = *(_QWORD *)(a1 + 864);
LABEL_930:
                    if (v525 >= *(_QWORD *)(a1 + 872))
                    {
                      v526 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, v17);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, v17);
                      v526 = v525 + 24;
                    }
                    *(_QWORD *)(a1 + 864) = v526;
                    v527 = *(_QWORD *)(a1 + 888);
                    v528 = (__int128 *)(v527 - 24);
                    if (v527 >= *(_QWORD *)(a1 + 896))
                    {
                      v529 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v595, v528);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v595, v528);
                      v529 = v527 + 24;
                    }
                    *(_QWORD *)(a1 + 888) = v529;
                    v530 = *(_QWORD *)(a1 + 912);
                    v531 = (__int128 *)(v530 - 24);
                    if (v530 >= *(_QWORD *)(a1 + 920))
                    {
                      v532 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, v531);
                    }
                    else
                    {
                      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v594, v531);
                      v532 = v530 + 24;
                    }
                    *(_QWORD *)(a1 + 912) = v532;
                    if (*(char *)(a1 + 423) < 0)
                      std::string::__init_copy_ctor_external(&v609, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
                    else
                      v609 = *(std::string *)v17;
                    if ((__p[63] & 0x80000000) != 0)
                      std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)&__p[40], *(std::string::size_type *)&__p[48]);
                    else
                      v608 = *(std::string *)&__p[40];
                    TacotronPhoneFeature::TacotronPhoneFeature((std::string *)v616, (__int128 *)&v609, (__int128 *)&v608, *(int *)&__p[8], *(int *)&__p[12], 0, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
                    v533 = *(_QWORD *)(a1 + 936);
                    v534 = *(_QWORD *)(a1 + 944);
                    if (v533 >= v534)
                    {
                      v539 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v533 - *v591) >> 3);
                      v540 = v539 + 1;
                      if ((unint64_t)(v539 + 1) > 0x276276276276276)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v541 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v534 - *v591) >> 3);
                      if (2 * v541 > v540)
                        v540 = 2 * v541;
                      if (v541 >= 0x13B13B13B13B13BLL)
                        v542 = 0x276276276276276;
                      else
                        v542 = v540;
                      v624 = a1 + 944;
                      v543 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v542);
                      v544 = (std::string::size_type)&v543[104 * v539];
                      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v543;
                      buf.__r_.__value_.__l.__size_ = v544;
                      v623 = &v543[104 * v545];
                      v546 = *(_OWORD *)v616;
                      *(_QWORD *)(v544 + 16) = *(_QWORD *)&v616[16];
                      *(_OWORD *)v544 = v546;
                      memset(v616, 0, 24);
                      v547 = *(_OWORD *)&v616[24];
                      *(_QWORD *)(v544 + 40) = v617;
                      *(_OWORD *)(v544 + 24) = v547;
                      *(_QWORD *)&v616[32] = 0;
                      v617 = 0;
                      *(_QWORD *)&v616[24] = 0;
                      v548 = v619;
                      *(_OWORD *)(v544 + 48) = v618;
                      *(_OWORD *)(v544 + 64) = v548;
                      *(_QWORD *)(v544 + 88) = 0;
                      *(_QWORD *)(v544 + 96) = 0;
                      *(_QWORD *)(v544 + 80) = 0;
                      *(_OWORD *)(v544 + 80) = v620;
                      *(_QWORD *)(v544 + 96) = v621;
                      v620 = 0uLL;
                      v621 = 0;
                      buf.__r_.__value_.__r.__words[2] = v544 + 104;
                      std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, &buf);
                      v538 = *(_QWORD *)(a1 + 936);
                      std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)&buf);
                    }
                    else
                    {
                      v535 = *(_OWORD *)v616;
                      *(_QWORD *)(v533 + 16) = *(_QWORD *)&v616[16];
                      *(_OWORD *)v533 = v535;
                      memset(v616, 0, 24);
                      v536 = v617;
                      *(_OWORD *)(v533 + 24) = *(_OWORD *)&v616[24];
                      *(_QWORD *)(v533 + 40) = v536;
                      *(_QWORD *)&v616[32] = 0;
                      v617 = 0;
                      *(_QWORD *)&v616[24] = 0;
                      v537 = v619;
                      *(_OWORD *)(v533 + 48) = v618;
                      *(_OWORD *)(v533 + 64) = v537;
                      *(_QWORD *)(v533 + 80) = 0;
                      *(_QWORD *)(v533 + 88) = 0;
                      *(_QWORD *)(v533 + 96) = 0;
                      *(_OWORD *)(v533 + 80) = v620;
                      *(_QWORD *)(v533 + 96) = v621;
                      v620 = 0uLL;
                      v621 = 0;
                      v538 = v533 + 104;
                    }
                    *(_QWORD *)(a1 + 936) = v538;
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v620;
                    std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
                    if (SHIBYTE(v617) < 0)
                      operator delete(*(void **)&v616[24]);
                    if ((v616[23] & 0x80000000) != 0)
                      operator delete(*(void **)v616);
                    if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v608.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v609.__r_.__value_.__l.__data_);
                    if (*(char *)(a1 + 423) >= 0)
                      v549 = *(unsigned __int8 *)(a1 + 423);
                    else
                      v549 = *(_QWORD *)(a1 + 408);
                    std::string::basic_string[abi:ne180100]((uint64_t)v616, v549 + 1);
                    if (v616[23] >= 0)
                      v550 = v616;
                    else
                      v550 = *(_BYTE **)v616;
                    if (v549)
                    {
                      if (*(char *)(a1 + 423) >= 0)
                        v551 = v17;
                      else
                        v551 = *(__int128 **)(a1 + 400);
                      memmove(v550, v551, v549);
                    }
                    *(_WORD *)&v550[v549] = 32;
                    if (v616[23] >= 0)
                      v552 = v616;
                    else
                      v552 = *(const std::string::value_type **)v616;
                    if (v616[23] >= 0)
                      v553 = v616[23];
                    else
                      v553 = *(_QWORD *)&v616[8];
                    std::string::append(v601, v552, v553);
                    if ((v616[23] & 0x80000000) != 0)
                      operator delete(*(void **)v616);
                  }
                }
                if (v577 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v578, (const void **)&v612.__r_.__value_.__l.__data_))
                {
                  if (v572 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v573, (const void **)&v612.__r_.__value_.__l.__data_))
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                    v555 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                    {
                      v557 = &v612;
                      if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v557 = (std::string *)v612.__r_.__value_.__r.__words[0];
                      *(_DWORD *)v616 = 136315138;
                      *(_QWORD *)&v616[4] = v557;
                    }
                    v558 = &v612;
                    if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v558 = (std::string *)v612.__r_.__value_.__r.__words[0];
                  }
                  v554 = 44;
                }
                else
                {
                  v554 = 46;
                }
                NeuralAdapterModule::save_break((NeuralAdapterModule *)a1, v554, v581, v597);
              }
              if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v612.__r_.__value_.__l.__data_);
            }
            v590 = ++v581;
          }
          if (SHIBYTE(v615) < 0)
            operator delete(*((void **)&v614 + 1));
          if (SBYTE7(v614) < 0)
            operator delete(*(void **)&__p[88]);
          if ((__p[87] & 0x80000000) != 0)
            operator delete(*(void **)&__p[64]);
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if ((__p[39] & 0x80000000) != 0)
            operator delete(*(void **)&__p[16]);
          v18 = *v596;
          goto LABEL_1012;
        }
      }
    }
    v599 = v16;
    v21 = v19 + 216 * (int)v16;
    v22 = *(int **)(v21 + 72);
    v23 = *(int **)(v21 + 80);
    if (v22 == v23)
      goto LABEL_482;
    v583 = v16;
    v592 = *(int **)(v21 + 80);
    do
    {
      v24 = *(unsigned __int8 *)(a1 + 639);
      if (*(char *)(a1 + 639) < 0)
      {
        if (!*(_QWORD *)(a1 + 624))
        {
LABEL_65:
          v27 = *v22;
LABEL_66:
          if (v27 == 10)
            NeuralAdapterModule::process_bookmark(a1, (uint64_t)v22);
          goto LABEL_68;
        }
      }
      else if (!*(_BYTE *)(a1 + 639))
      {
        goto LABEL_65;
      }
      v25 = (*v596)[3];
      v26 = (*v596)[4];
      v27 = *v22;
      v28 = v25 != v26 && v27 == 7;
      if (!v28)
        goto LABEL_66;
      if ((int)(-1 - 252645135 * ((unint64_t)(v26 - v25) >> 3)) >= v581)
        v29 = v581;
      else
        v29 = -1 - 252645135 * ((unint64_t)(v26 - v25) >> 3);
      v30 = v22[1];
      if (v30 < 2)
        goto LABEL_68;
      v31 = (float)v30;
      if (*(_DWORD *)(a1 + 640) == 2)
      {
        v32 = *(_QWORD *)(a1 + 864);
        v33 = *(_QWORD *)(a1 + 856);
        v34 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 3);
        p_buf = (std::string *)(v32 - 48);
        v36 = v34 - 1;
        if (v34 <= 1)
          p_buf = &buf;
        if (v32 == v33)
          v37 = &buf;
        else
          v37 = p_buf;
        if (v32 == v33)
          v38 = &buf;
        else
          v38 = (std::string *)(v32 - 24);
        if (*(float *)(a1 + 496) > v31)
          v31 = *(float *)(a1 + 496);
        v39 = v34 - 2;
        memset(&buf, 0, sizeof(buf));
        v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
        if ((v40 & 0x80u) == 0)
          v41 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
        else
          v41 = v38->__r_.__value_.__l.__size_;
        v42 = *(unsigned __int8 *)(a1 + 423);
        v43 = (char)v42;
        if ((v42 & 0x80u) != 0)
          v42 = *(_QWORD *)(a1 + 408);
        if (v41 != v42)
          goto LABEL_117;
        if (v43 >= 0)
          v44 = v17;
        else
          v44 = *(__int128 **)v17;
        if ((v40 & 0x80) != 0)
        {
          if (memcmp(v38->__r_.__value_.__l.__data_, v44, v38->__r_.__value_.__l.__size_))
            goto LABEL_117;
        }
        else if (*((_BYTE *)&v38->__r_.__value_.__s + 23))
        {
          v45 = v38;
          while (v45->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v44)
          {
            v45 = (std::string *)((char *)v45 + 1);
            v44 = (__int128 *)((char *)v44 + 1);
            if (!--v40)
              goto LABEL_95;
          }
LABEL_117:
          if (v570 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v571, (const void **)&v38->__r_.__value_.__l.__data_))
          {
            std::operator+<char>();
            v75 = std::string::append(&v611, "->");
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v612.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v612.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            v77 = *(char *)(a1 + 639);
            if (v77 >= 0)
              v78 = (const std::string::value_type *)(a1 + 616);
            else
              v78 = *(const std::string::value_type **)(a1 + 616);
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(a1 + 639);
            else
              v79 = *(_QWORD *)(a1 + 624);
            v80 = std::string::append(&v612, v78, v79);
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            *(_QWORD *)&v616[16] = *((_QWORD *)&v80->__r_.__value_.__l + 2);
            *(_OWORD *)v616 = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            v82 = std::string::append((std::string *)v616, ") ");
            v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v82->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            if (__p[23] >= 0)
              v84 = __p;
            else
              v84 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v85 = __p[23];
            else
              v85 = *(_QWORD *)&__p[8];
            std::string::append(v601, v84, v85);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if ((v616[23] & 0x80000000) != 0)
              operator delete(*(void **)v616);
            if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v612.__r_.__value_.__l.__data_);
            if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v611.__r_.__value_.__l.__data_);
            std::string::operator=(v38, __str);
            v86 = *v591;
            std::string::operator=((std::string *)(*v591 + 104 * v36), __str);
            v73 = *(_DWORD *)(a1 + 500);
            v74 = v86 + 104 * v36;
            goto LABEL_139;
          }
          v87 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
          if ((v87 & 0x80u) == 0)
            v88 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
          else
            v88 = v38->__r_.__value_.__l.__size_;
          v89 = *(unsigned __int8 *)(a1 + 423);
          v90 = (char)v89;
          if ((v89 & 0x80u) != 0)
            v89 = *(_QWORD *)(a1 + 408);
          if (v88 == v89)
          {
            if (v90 >= 0)
              v91 = v17;
            else
              v91 = *(__int128 **)v17;
            if ((v87 & 0x80) != 0)
            {
              if (memcmp(v38->__r_.__value_.__l.__data_, v91, v38->__r_.__value_.__l.__size_))
                goto LABEL_187;
            }
            else if (*((_BYTE *)&v38->__r_.__value_.__s + 23))
            {
              v92 = v38;
              while (v92->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v91)
              {
                v92 = (std::string *)((char *)v92 + 1);
                v91 = (__int128 *)((char *)v91 + 1);
                if (!--v87)
                  goto LABEL_185;
              }
              goto LABEL_187;
            }
LABEL_185:
            if (v565 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v566, (const void **)&v37->__r_.__value_.__l.__data_))goto LABEL_187;
            v104 = *(_DWORD *)(a1 + 528);
            v105 = *(_QWORD *)(a1 + 928) + 104 * v39;
LABEL_189:
            *(_DWORD *)(v105 + 72) = v104;
LABEL_190:
            v23 = v592;
          }
          else
          {
LABEL_187:
            if (v565 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v566, (const void **)&v38->__r_.__value_.__l.__data_))
            {
              v104 = *(_DWORD *)(a1 + 528);
              v105 = *(_QWORD *)(a1 + 928) + 104 * v36;
              goto LABEL_189;
            }
            v107 = v29;
            v108 = *(_QWORD *)(a1 + 864);
            if (v108 >= *(_QWORD *)(a1 + 872))
            {
              v109 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, (__int128 *)__str);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, (__int128 *)__str);
              v109 = v108 + 24;
            }
            *(_QWORD *)(a1 + 864) = v109;
            std::string::basic_string[abi:ne180100]<0>(v616, "-");
            v204 = *(_QWORD *)(a1 + 888);
            v205 = *(_QWORD *)(a1 + 896);
            if (v204 >= v205)
            {
              v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - *v595) >> 3);
              v208 = v207 + 1;
              if (v207 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v205 - *v595) >> 3);
              if (2 * v209 > v208)
                v208 = 2 * v209;
              if (v209 >= 0x555555555555555)
                v210 = 0xAAAAAAAAAAAAAAALL;
              else
                v210 = v208;
              *(_QWORD *)&__p[32] = a1 + 896;
              if (v210)
                v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v569, v210);
              else
                v211 = 0;
              v212 = &v211[24 * v207];
              *(_QWORD *)__p = v211;
              *(_QWORD *)&__p[8] = v212;
              *(_QWORD *)&__p[24] = &v211[24 * v210];
              v213 = *(_OWORD *)v616;
              *((_QWORD *)v212 + 2) = *(_QWORD *)&v616[16];
              *(_OWORD *)v212 = v213;
              memset(v616, 0, 24);
              *(_QWORD *)&__p[16] = v212 + 24;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v595, (std::__split_buffer<std::string> *)__p);
              v214 = *(_QWORD *)(a1 + 888);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
              v215 = v616[23];
              *(_QWORD *)(a1 + 888) = v214;
              if (v215 < 0)
                operator delete(*(void **)v616);
            }
            else
            {
              v206 = *(_OWORD *)v616;
              *(_QWORD *)(v204 + 16) = *(_QWORD *)&v616[16];
              *(_OWORD *)v204 = v206;
              *(_QWORD *)(a1 + 888) = v204 + 24;
            }
            v216 = *(_QWORD *)(a1 + 912);
            if (v216 == *(_QWORD *)(a1 + 904))
            {
              std::string::basic_string[abi:ne180100]<0>(&v612, "narrator");
            }
            else if (*(char *)(v216 - 1) < 0)
            {
              std::string::__init_copy_ctor_external(&v612, *(const std::string::value_type **)(v216 - 24), *(_QWORD *)(v216 - 16));
            }
            else
            {
              v217 = *(_OWORD *)(v216 - 24);
              v612.__r_.__value_.__r.__words[2] = *(_QWORD *)(v216 - 8);
              *(_OWORD *)&v612.__r_.__value_.__l.__data_ = v217;
            }
            v218 = *(_QWORD *)(a1 + 912);
            if (v218 >= *(_QWORD *)(a1 + 920))
            {
              v220 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, (__int128 *)&v612);
            }
            else
            {
              if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
              }
              else
              {
                v219 = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
                *(_QWORD *)(v218 + 16) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
                *(_OWORD *)v218 = v219;
              }
              v220 = v218 + 24;
              *(_QWORD *)(a1 + 912) = v218 + 24;
            }
            *(_QWORD *)(a1 + 912) = v220;
            v221 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 24);
            if (*(char *)(a1 + 639) < 0)
            {
              std::string::__init_copy_ctor_external(&v611, *(const std::string::value_type **)(a1 + 616), *(_QWORD *)(a1 + 624));
            }
            else
            {
              *(_OWORD *)&v611.__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
              v611.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 632);
            }
            v222 = v221 + 136 * v107;
            v223 = (__int128 *)(v222 + 40);
            if (*(char *)(v222 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&v610, *(const std::string::value_type **)(v222 + 40), *(_QWORD *)(v222 + 48));
            }
            else
            {
              v224 = *v223;
              v610.__r_.__value_.__r.__words[2] = *(_QWORD *)(v222 + 56);
              *(_OWORD *)&v610.__r_.__value_.__l.__data_ = v224;
            }
            v225 = v221 + 136 * v107;
            v227 = *(_DWORD *)(v225 + 8);
            v226 = (int *)(v225 + 8);
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (__int128 *)&v611, (__int128 *)&v610, v227, v226[1], (int)v31, *(float *)(a1 + 296), *(float *)(a1 + 300));
            v228 = *(_QWORD *)(a1 + 936);
            v229 = *(_QWORD *)(a1 + 944);
            if (v228 >= v229)
            {
              v234 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v228 - *v591) >> 3);
              v235 = v234 + 1;
              if ((unint64_t)(v234 + 1) > 0x276276276276276)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v236 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v229 - *v591) >> 3);
              if (2 * v236 > v235)
                v235 = 2 * v236;
              if (v236 >= 0x13B13B13B13B13BLL)
                v237 = 0x276276276276276;
              else
                v237 = v235;
              *(_QWORD *)&v616[32] = a1 + 944;
              v238 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v237);
              v239 = &v238[104 * v234];
              *(_QWORD *)v616 = v238;
              *(_QWORD *)&v616[8] = v239;
              *(_QWORD *)&v616[24] = &v238[104 * v240];
              v241 = *(_OWORD *)__p;
              *((_QWORD *)v239 + 2) = *(_QWORD *)&__p[16];
              *(_OWORD *)v239 = v241;
              memset(__p, 0, 24);
              v242 = *(_OWORD *)&__p[24];
              *((_QWORD *)v239 + 5) = *(_QWORD *)&__p[40];
              *(_OWORD *)(v239 + 24) = v242;
              memset(&__p[24], 0, 24);
              v243 = *(_OWORD *)&__p[64];
              *((_OWORD *)v239 + 3) = *(_OWORD *)&__p[48];
              *((_OWORD *)v239 + 4) = v243;
              *((_QWORD *)v239 + 11) = 0;
              *((_QWORD *)v239 + 12) = 0;
              *((_QWORD *)v239 + 10) = 0;
              *((_OWORD *)v239 + 5) = *(_OWORD *)&__p[80];
              *((_QWORD *)v239 + 12) = *(_QWORD *)&__p[96];
              memset(&__p[80], 0, 24);
              *(_QWORD *)&v616[16] = v239 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, v616);
              v233 = *(_QWORD *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v616);
            }
            else
            {
              v230 = *(_OWORD *)__p;
              *(_QWORD *)(v228 + 16) = *(_QWORD *)&__p[16];
              *(_OWORD *)v228 = v230;
              memset(__p, 0, 24);
              v231 = *(_QWORD *)&__p[40];
              *(_OWORD *)(v228 + 24) = *(_OWORD *)&__p[24];
              *(_QWORD *)(v228 + 40) = v231;
              memset(&__p[24], 0, 24);
              v232 = *(_OWORD *)&__p[64];
              *(_OWORD *)(v228 + 48) = *(_OWORD *)&__p[48];
              *(_OWORD *)(v228 + 64) = v232;
              *(_QWORD *)(v228 + 80) = 0;
              *(_QWORD *)(v228 + 88) = 0;
              *(_QWORD *)(v228 + 96) = 0;
              *(_OWORD *)(v228 + 80) = *(_OWORD *)&__p[80];
              *(_QWORD *)(v228 + 96) = *(_QWORD *)&__p[96];
              memset(&__p[80], 0, 24);
              v233 = v228 + 104;
            }
            *(_QWORD *)(a1 + 936) = v233;
            *(_QWORD *)v616 = &__p[80];
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
            if ((__p[47] & 0x80000000) != 0)
              operator delete(*(void **)&__p[24]);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v610.__r_.__value_.__l.__data_);
            if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v611.__r_.__value_.__l.__data_);
            *(_DWORD *)(*(_QWORD *)(a1 + 936) - 28) = *(_DWORD *)(a1 + 500);
            if (*(char *)(a1 + 639) >= 0)
              v244 = *(unsigned __int8 *)(a1 + 639);
            else
              v244 = *(_QWORD *)(a1 + 624);
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v244 + 1);
            if (__p[23] >= 0)
              v245 = __p;
            else
              v245 = *(_BYTE **)__p;
            if (v244)
            {
              if (*(char *)(a1 + 639) >= 0)
                v246 = (const void *)(a1 + 616);
              else
                v246 = *(const void **)(a1 + 616);
              memmove(v245, v246, v244);
            }
            *(_WORD *)&v245[v244] = 32;
            if (__p[23] >= 0)
              v247 = __p;
            else
              v247 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v248 = __p[23];
            else
              v248 = *(_QWORD *)&__p[8];
            std::string::append(v601, v247, v248);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v249 = *(_QWORD *)(a1 + 864);
            if (v249 >= *(_QWORD *)(a1 + 872))
            {
              v250 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, (__int128 *)v598);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, (__int128 *)v598);
              v250 = v249 + 24;
            }
            *(_QWORD *)(a1 + 864) = v250;
            std::string::basic_string[abi:ne180100]<0>(v616, "-");
            v251 = *(_QWORD *)(a1 + 888);
            v252 = *(_QWORD *)(a1 + 896);
            if (v251 >= v252)
            {
              v254 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251 - *v595) >> 3);
              v255 = v254 + 1;
              if (v254 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v256 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - *v595) >> 3);
              if (2 * v256 > v255)
                v255 = 2 * v256;
              if (v256 >= 0x555555555555555)
                v257 = 0xAAAAAAAAAAAAAAALL;
              else
                v257 = v255;
              *(_QWORD *)&__p[32] = a1 + 896;
              if (v257)
                v258 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v569, v257);
              else
                v258 = 0;
              v259 = &v258[24 * v254];
              *(_QWORD *)__p = v258;
              *(_QWORD *)&__p[8] = v259;
              *(_QWORD *)&__p[24] = &v258[24 * v257];
              v260 = *(_OWORD *)v616;
              *((_QWORD *)v259 + 2) = *(_QWORD *)&v616[16];
              *(_OWORD *)v259 = v260;
              memset(v616, 0, 24);
              *(_QWORD *)&__p[16] = v259 + 24;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v595, (std::__split_buffer<std::string> *)__p);
              v261 = *(_QWORD *)(a1 + 888);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
              v262 = v616[23];
              *(_QWORD *)(a1 + 888) = v261;
              if (v262 < 0)
                operator delete(*(void **)v616);
            }
            else
            {
              v253 = *(_OWORD *)v616;
              *(_QWORD *)(v251 + 16) = *(_QWORD *)&v616[16];
              *(_OWORD *)v251 = v253;
              *(_QWORD *)(a1 + 888) = v251 + 24;
            }
            v263 = *(_QWORD *)(a1 + 912);
            if (v263 >= *(_QWORD *)(a1 + 920))
            {
              v265 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, (__int128 *)&v612);
              v17 = (__int128 *)(a1 + 400);
            }
            else
            {
              v17 = (__int128 *)(a1 + 400);
              if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
              }
              else
              {
                v264 = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
                *(_QWORD *)(v263 + 16) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
                *(_OWORD *)v263 = v264;
              }
              v265 = v263 + 24;
              *(_QWORD *)(a1 + 912) = v263 + 24;
            }
            *(_QWORD *)(a1 + 912) = v265;
            if (*(char *)(a1 + 423) < 0)
              std::string::__init_copy_ctor_external(&v609, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
            else
              v609 = *(std::string *)v17;
            if (*((char *)v223 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)v223, *((_QWORD *)v223 + 1));
            }
            else
            {
              v266 = *v223;
              v608.__r_.__value_.__r.__words[2] = *((_QWORD *)v223 + 2);
              *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v266;
            }
            TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (__int128 *)&v609, (__int128 *)&v608, *v226, v226[1], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
            v267 = *(_QWORD *)(a1 + 936);
            v268 = *(_QWORD *)(a1 + 944);
            if (v267 >= v268)
            {
              v273 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v267 - *v591) >> 3);
              v274 = v273 + 1;
              if ((unint64_t)(v273 + 1) > 0x276276276276276)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v275 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v268 - *v591) >> 3);
              if (2 * v275 > v274)
                v274 = 2 * v275;
              if (v275 >= 0x13B13B13B13B13BLL)
                v276 = 0x276276276276276;
              else
                v276 = v274;
              *(_QWORD *)&v616[32] = a1 + 944;
              v277 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v276);
              v278 = &v277[104 * v273];
              *(_QWORD *)v616 = v277;
              *(_QWORD *)&v616[8] = v278;
              *(_QWORD *)&v616[24] = &v277[104 * v279];
              v280 = *(_OWORD *)__p;
              *((_QWORD *)v278 + 2) = *(_QWORD *)&__p[16];
              *(_OWORD *)v278 = v280;
              memset(__p, 0, 24);
              v281 = *(_OWORD *)&__p[24];
              *((_QWORD *)v278 + 5) = *(_QWORD *)&__p[40];
              *(_OWORD *)(v278 + 24) = v281;
              memset(&__p[24], 0, 24);
              v282 = *(_OWORD *)&__p[64];
              *((_OWORD *)v278 + 3) = *(_OWORD *)&__p[48];
              *((_OWORD *)v278 + 4) = v282;
              *((_QWORD *)v278 + 11) = 0;
              *((_QWORD *)v278 + 12) = 0;
              *((_QWORD *)v278 + 10) = 0;
              *((_OWORD *)v278 + 5) = *(_OWORD *)&__p[80];
              *((_QWORD *)v278 + 12) = *(_QWORD *)&__p[96];
              memset(&__p[80], 0, 24);
              *(_QWORD *)&v616[16] = v278 + 104;
              std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, v616);
              v272 = *(_QWORD *)(a1 + 936);
              std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v616);
            }
            else
            {
              v269 = *(_OWORD *)__p;
              *(_QWORD *)(v267 + 16) = *(_QWORD *)&__p[16];
              *(_OWORD *)v267 = v269;
              memset(__p, 0, 24);
              v270 = *(_QWORD *)&__p[40];
              *(_OWORD *)(v267 + 24) = *(_OWORD *)&__p[24];
              *(_QWORD *)(v267 + 40) = v270;
              memset(&__p[24], 0, 24);
              v271 = *(_OWORD *)&__p[64];
              *(_OWORD *)(v267 + 48) = *(_OWORD *)&__p[48];
              *(_OWORD *)(v267 + 64) = v271;
              *(_QWORD *)(v267 + 80) = 0;
              *(_QWORD *)(v267 + 88) = 0;
              *(_QWORD *)(v267 + 96) = 0;
              *(_OWORD *)(v267 + 80) = *(_OWORD *)&__p[80];
              *(_QWORD *)(v267 + 96) = *(_QWORD *)&__p[96];
              memset(&__p[80], 0, 24);
              v272 = v267 + 104;
            }
            *(_QWORD *)(a1 + 936) = v272;
            *(_QWORD *)v616 = &__p[80];
            std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
            if ((__p[47] & 0x80000000) != 0)
              operator delete(*(void **)&__p[24]);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v608.__r_.__value_.__l.__data_);
            if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v609.__r_.__value_.__l.__data_);
            if (*(char *)(a1 + 423) >= 0)
              v283 = *(unsigned __int8 *)(a1 + 423);
            else
              v283 = *(_QWORD *)(a1 + 408);
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v283 + 1);
            if (__p[23] >= 0)
              v284 = __p;
            else
              v284 = *(_BYTE **)__p;
            if (v283)
            {
              if (*(char *)(a1 + 423) >= 0)
                v285 = v17;
              else
                v285 = *(__int128 **)(a1 + 400);
              memmove(v284, v285, v283);
            }
            *(_WORD *)&v284[v283] = 32;
            if (__p[23] >= 0)
              v286 = __p;
            else
              v286 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v287 = __p[23];
            else
              v287 = *(_QWORD *)&__p[8];
            std::string::append(v601, v286, v287);
            v23 = v592;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v612.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_68;
          v106 = (void *)buf.__r_.__value_.__r.__words[0];
          goto LABEL_347;
        }
LABEL_95:
        if (v570 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v571, (const void **)&v37->__r_.__value_.__l.__data_))goto LABEL_117;
        std::operator+<char>();
        v61 = std::string::append(&v611, "->");
        v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v612.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v612.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        v63 = *(_BYTE *)(a1 + 639);
        if (v63 >= 0)
          v64 = (const std::string::value_type *)(a1 + 616);
        else
          v64 = *(const std::string::value_type **)(a1 + 616);
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(a1 + 639);
        else
          v65 = *(_QWORD *)(a1 + 624);
        v66 = std::string::append(&v612, v64, v65);
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(_QWORD *)&v616[16] = *((_QWORD *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)v616 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v68 = std::string::append((std::string *)v616, ") ");
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0)
          v70 = __p;
        else
          v70 = *(const std::string::value_type **)__p;
        if (__p[23] >= 0)
          v71 = __p[23];
        else
          v71 = *(_QWORD *)&__p[8];
        std::string::append(v601, v70, v71);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v616[23] & 0x80000000) != 0)
          operator delete(*(void **)v616);
        if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v612.__r_.__value_.__l.__data_);
        if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v611.__r_.__value_.__l.__data_);
        std::string::operator=(v37, __str);
        v72 = *v591;
        std::string::operator=((std::string *)(*v591 + 104 * v39), __str);
        v73 = *(_DWORD *)(a1 + 500);
        v74 = v72 + 104 * v39;
LABEL_139:
        *(float *)(v74 + 72) = v31;
        *(_DWORD *)(v74 + 76) = v73;
        goto LABEL_190;
      }
      v588 = v29;
      v46 = *(_QWORD *)(a1 + 864);
      v47 = *(_QWORD *)(a1 + 856);
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v47) >> 3);
      v49 = v48 - 1;
      if (v48 <= 1)
        v50 = &buf;
      else
        v50 = (std::string *)(v46 - 48);
      if (v46 == v47)
        v51 = &buf;
      else
        v51 = v50;
      if (v46 == v47)
        v52 = &buf;
      else
        v52 = (std::string *)(v46 - 24);
      memset(&buf, 0, sizeof(buf));
      v53 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      v54 = v52->__r_.__value_.__l.__size_;
      if ((v53 & 0x80u) == 0)
        v55 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      else
        v55 = v52->__r_.__value_.__l.__size_;
      v56 = *(unsigned __int8 *)(a1 + 423);
      v57 = (char)v56;
      if ((v56 & 0x80u) != 0)
        v56 = *(_QWORD *)(a1 + 408);
      if (v55 != v56)
        goto LABEL_196;
      if (v57 >= 0)
        v58 = (unsigned __int8 *)(a1 + 400);
      else
        v58 = (unsigned __int8 *)v598->__r_.__value_.__r.__words[0];
      if ((v53 & 0x80) != 0)
      {
        v567 = v52->__r_.__value_.__l.__size_;
        v568 = v48 - 1;
        v93 = memcmp(v52->__r_.__value_.__l.__data_, v58, v567);
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v47) >> 3);
        v54 = v567;
        v49 = v568;
        if (v93)
        {
          if ((v24 & 0x80u) == 0)
            v94 = v24;
          else
            v94 = *(_QWORD *)(a1 + 624);
          v28 = v55 == v94;
          v4 = a1 + 856;
          v17 = (__int128 *)(a1 + 400);
          v95 = (__int128 *)(a1 + 616);
          v23 = v592;
          if (!v28)
            goto LABEL_211;
          if ((v24 & 0x80u) == 0)
            v96 = (unsigned __int8 *)(a1 + 616);
          else
            v96 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
          goto LABEL_210;
        }
LABEL_164:
        v97 = &buf;
        if (v48 <= 1)
          v98 = &buf;
        else
          v98 = (std::string *)(v46 - 48);
        if (v46 != v47)
          v97 = v98;
        v99 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
        v100 = v97->__r_.__value_.__l.__size_;
        if ((v99 & 0x80u) == 0)
          v101 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
        else
          v101 = v97->__r_.__value_.__l.__size_;
        if ((v24 & 0x80u) == 0)
          v102 = v24;
        else
          v102 = *(_QWORD *)(a1 + 624);
        if (v101 == v102)
        {
          if ((v24 & 0x80u) == 0)
            v103 = (unsigned __int8 *)(a1 + 616);
          else
            v103 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
          if ((v99 & 0x80) != 0)
          {
            v110 = (const void *)v51->__r_.__value_.__r.__words[0];
            v111 = v49;
            v112 = v54;
            v113 = v48;
            v114 = memcmp(v110, v103, v100);
            v48 = v113;
            v54 = v112;
            v49 = v111;
            if (!v114)
            {
LABEL_348:
              v23 = v592;
              *(float *)(*v591 + 104 * (v48 - 2) + 72) = v31;
              v4 = a1 + 856;
              v17 = (__int128 *)(a1 + 400);
              goto LABEL_68;
            }
          }
          else
          {
            if (!(_DWORD)v99)
              goto LABEL_348;
            while (v51->__r_.__value_.__s.__data_[0] == *v103)
            {
              v51 = (std::string *)((char *)v51 + 1);
              ++v103;
              if (!--v99)
                goto LABEL_348;
            }
          }
        }
        goto LABEL_196;
      }
      if (!*((_BYTE *)&v52->__r_.__value_.__s + 23))
        goto LABEL_164;
      v59 = v52;
      v60 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      while (v59->__r_.__value_.__s.__data_[0] == *v58)
      {
        v59 = (std::string *)((char *)v59 + 1);
        ++v58;
        if (!--v60)
          goto LABEL_164;
      }
LABEL_196:
      if ((v24 & 0x80u) == 0)
        v115 = v24;
      else
        v115 = *(_QWORD *)(a1 + 624);
      v28 = v55 == v115;
      v4 = a1 + 856;
      v17 = (__int128 *)(a1 + 400);
      v95 = (__int128 *)(a1 + 616);
      v23 = v592;
      if (!v28)
        goto LABEL_211;
      if ((v24 & 0x80u) == 0)
        v96 = (unsigned __int8 *)(a1 + 616);
      else
        v96 = (unsigned __int8 *)__str->__r_.__value_.__r.__words[0];
      if ((v53 & 0x80) == 0)
      {
        if (!(_DWORD)v53)
          goto LABEL_224;
        while (v52->__r_.__value_.__s.__data_[0] == *v96)
        {
          v52 = (std::string *)((char *)v52 + 1);
          ++v96;
          if (!--v53)
            goto LABEL_224;
        }
        goto LABEL_211;
      }
      v568 = v49;
LABEL_210:
      v116 = memcmp(v52->__r_.__value_.__l.__data_, v96, v54);
      v49 = v568;
      if (!v116)
      {
LABEL_224:
        *(float *)(*v591 + 104 * v49 + 72) = v31;
        goto LABEL_68;
      }
LABEL_211:
      if (v46 >= *(_QWORD *)(a1 + 872))
      {
        v118 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, v95);
        v117 = v588;
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, v95);
        v117 = v588;
        v118 = v46 + 24;
      }
      *(_QWORD *)(a1 + 864) = v118;
      std::string::basic_string[abi:ne180100]<0>(v616, "-");
      v119 = *(_QWORD *)(a1 + 888);
      v120 = *(_QWORD *)(a1 + 896);
      if (v119 >= v120)
      {
        v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - *v595) >> 3);
        v123 = v122 + 1;
        if (v122 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *v595) >> 3);
        if (2 * v124 > v123)
          v123 = 2 * v124;
        if (v124 >= 0x555555555555555)
          v125 = 0xAAAAAAAAAAAAAAALL;
        else
          v125 = v123;
        *(_QWORD *)&__p[32] = a1 + 896;
        if (v125)
          v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v569, v125);
        else
          v126 = 0;
        v127 = &v126[24 * v122];
        *(_QWORD *)__p = v126;
        *(_QWORD *)&__p[8] = v127;
        *(_QWORD *)&__p[24] = &v126[24 * v125];
        v128 = *(_OWORD *)v616;
        *((_QWORD *)v127 + 2) = *(_QWORD *)&v616[16];
        *(_OWORD *)v127 = v128;
        memset(v616, 0, 24);
        *(_QWORD *)&__p[16] = v127 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v595, (std::__split_buffer<std::string> *)__p);
        v129 = *(_QWORD *)(a1 + 888);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
        v130 = v616[23];
        *(_QWORD *)(a1 + 888) = v129;
        v117 = v588;
        if (v130 < 0)
          operator delete(*(void **)v616);
      }
      else
      {
        v121 = *(_OWORD *)v616;
        *(_QWORD *)(v119 + 16) = *(_QWORD *)&v616[16];
        *(_OWORD *)v119 = v121;
        *(_QWORD *)(a1 + 888) = v119 + 24;
      }
      v131 = *(_QWORD *)(a1 + 912);
      if (v131 == *(_QWORD *)(a1 + 904))
      {
        std::string::basic_string[abi:ne180100]<0>(&v612, "narrator");
      }
      else if (*(char *)(v131 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v612, *(const std::string::value_type **)(v131 - 24), *(_QWORD *)(v131 - 16));
      }
      else
      {
        v132 = *(_OWORD *)(v131 - 24);
        v612.__r_.__value_.__r.__words[2] = *(_QWORD *)(v131 - 8);
        *(_OWORD *)&v612.__r_.__value_.__l.__data_ = v132;
      }
      v133 = *(_QWORD *)(a1 + 912);
      if (v133 >= *(_QWORD *)(a1 + 920))
      {
        v135 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, (__int128 *)&v612);
      }
      else
      {
        if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
        }
        else
        {
          v134 = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
          *(_QWORD *)(v133 + 16) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
          *(_OWORD *)v133 = v134;
        }
        v135 = v133 + 24;
        *(_QWORD *)(a1 + 912) = v133 + 24;
      }
      *(_QWORD *)(a1 + 912) = v135;
      v136 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 24);
      if (*(char *)(a1 + 639) < 0)
        std::string::__init_copy_ctor_external(&v611, *(const std::string::value_type **)(a1 + 616), *(_QWORD *)(a1 + 624));
      else
        v611 = *(std::string *)v95;
      v137 = v117;
      v138 = v136 + 136 * v117;
      v139 = (__int128 *)(v138 + 40);
      if (*(char *)(v138 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v610, *(const std::string::value_type **)(v138 + 40), *(_QWORD *)(v138 + 48));
      }
      else
      {
        v140 = *v139;
        v610.__r_.__value_.__r.__words[2] = *(_QWORD *)(v138 + 56);
        *(_OWORD *)&v610.__r_.__value_.__l.__data_ = v140;
      }
      v141 = v136 + 136 * v137;
      v143 = *(_DWORD *)(v141 + 8);
      v142 = (int *)(v141 + 8);
      TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (__int128 *)&v611, (__int128 *)&v610, v143, v142[1], (int)v31, *(float *)(a1 + 296), *(float *)(a1 + 300));
      v144 = *(_QWORD *)(a1 + 936);
      v145 = *(_QWORD *)(a1 + 944);
      if (v144 >= v145)
      {
        v150 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v144 - *v591) >> 3);
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) > 0x276276276276276)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v152 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v145 - *v591) >> 3);
        if (2 * v152 > v151)
          v151 = 2 * v152;
        if (v152 >= 0x13B13B13B13B13BLL)
          v153 = 0x276276276276276;
        else
          v153 = v151;
        *(_QWORD *)&v616[32] = a1 + 944;
        v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v153);
        v155 = &v154[104 * v150];
        *(_QWORD *)v616 = v154;
        *(_QWORD *)&v616[8] = v155;
        *(_QWORD *)&v616[24] = &v154[104 * v156];
        v157 = *(_OWORD *)__p;
        *((_QWORD *)v155 + 2) = *(_QWORD *)&__p[16];
        *(_OWORD *)v155 = v157;
        memset(__p, 0, 24);
        v158 = *(_OWORD *)&__p[24];
        *((_QWORD *)v155 + 5) = *(_QWORD *)&__p[40];
        *(_OWORD *)(v155 + 24) = v158;
        memset(&__p[24], 0, 24);
        v159 = *(_OWORD *)&__p[64];
        *((_OWORD *)v155 + 3) = *(_OWORD *)&__p[48];
        *((_OWORD *)v155 + 4) = v159;
        *((_QWORD *)v155 + 11) = 0;
        *((_QWORD *)v155 + 12) = 0;
        *((_QWORD *)v155 + 10) = 0;
        *((_OWORD *)v155 + 5) = *(_OWORD *)&__p[80];
        *((_QWORD *)v155 + 12) = *(_QWORD *)&__p[96];
        memset(&__p[80], 0, 24);
        *(_QWORD *)&v616[16] = v155 + 104;
        std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, v616);
        v149 = *(_QWORD *)(a1 + 936);
        std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v616);
      }
      else
      {
        v146 = *(_OWORD *)__p;
        *(_QWORD *)(v144 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v144 = v146;
        memset(__p, 0, 24);
        v147 = *(_QWORD *)&__p[40];
        *(_OWORD *)(v144 + 24) = *(_OWORD *)&__p[24];
        *(_QWORD *)(v144 + 40) = v147;
        memset(&__p[24], 0, 24);
        v148 = *(_OWORD *)&__p[64];
        *(_OWORD *)(v144 + 48) = *(_OWORD *)&__p[48];
        *(_OWORD *)(v144 + 64) = v148;
        *(_QWORD *)(v144 + 80) = 0;
        *(_QWORD *)(v144 + 88) = 0;
        *(_QWORD *)(v144 + 96) = 0;
        *(_OWORD *)(v144 + 80) = *(_OWORD *)&__p[80];
        *(_QWORD *)(v144 + 96) = *(_QWORD *)&__p[96];
        memset(&__p[80], 0, 24);
        v149 = v144 + 104;
      }
      *(_QWORD *)(a1 + 936) = v149;
      *(_QWORD *)v616 = &__p[80];
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
      if ((__p[47] & 0x80000000) != 0)
        operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v610.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v610.__r_.__value_.__l.__data_);
      if (SHIBYTE(v611.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v611.__r_.__value_.__l.__data_);
      if (*(char *)(a1 + 639) >= 0)
        v160 = *(unsigned __int8 *)(a1 + 639);
      else
        v160 = *(_QWORD *)(a1 + 624);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v160 + 1);
      if (__p[23] >= 0)
        v161 = __p;
      else
        v161 = *(_BYTE **)__p;
      if (v160)
      {
        if (*(char *)(a1 + 639) >= 0)
          v162 = (const void *)(a1 + 616);
        else
          v162 = *(const void **)(a1 + 616);
        memmove(v161, v162, v160);
      }
      *(_WORD *)&v161[v160] = 32;
      if (__p[23] >= 0)
        v163 = __p;
      else
        v163 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v164 = __p[23];
      else
        v164 = *(_QWORD *)&__p[8];
      std::string::append(v601, v163, v164);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v165 = *(_QWORD *)(a1 + 864);
      if (v165 >= *(_QWORD *)(a1 + 872))
      {
        v166 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, (__int128 *)v598);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v4, (__int128 *)v598);
        v166 = v165 + 24;
      }
      *(_QWORD *)(a1 + 864) = v166;
      std::string::basic_string[abi:ne180100]<0>(v616, "-");
      v167 = *(_QWORD *)(a1 + 888);
      v168 = *(_QWORD *)(a1 + 896);
      if (v167 >= v168)
      {
        v170 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - *v595) >> 3);
        v171 = v170 + 1;
        if (v170 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - *v595) >> 3);
        if (2 * v172 > v171)
          v171 = 2 * v172;
        if (v172 >= 0x555555555555555)
          v173 = 0xAAAAAAAAAAAAAAALL;
        else
          v173 = v171;
        *(_QWORD *)&__p[32] = a1 + 896;
        if (v173)
          v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v569, v173);
        else
          v174 = 0;
        v175 = &v174[24 * v170];
        *(_QWORD *)__p = v174;
        *(_QWORD *)&__p[8] = v175;
        *(_QWORD *)&__p[24] = &v174[24 * v173];
        v176 = *(_OWORD *)v616;
        *((_QWORD *)v175 + 2) = *(_QWORD *)&v616[16];
        *(_OWORD *)v175 = v176;
        memset(v616, 0, 24);
        *(_QWORD *)&__p[16] = v175 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v595, (std::__split_buffer<std::string> *)__p);
        v177 = *(_QWORD *)(a1 + 888);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
        v178 = v616[23];
        *(_QWORD *)(a1 + 888) = v177;
        if (v178 < 0)
          operator delete(*(void **)v616);
      }
      else
      {
        v169 = *(_OWORD *)v616;
        *(_QWORD *)(v167 + 16) = *(_QWORD *)&v616[16];
        *(_OWORD *)v167 = v169;
        *(_QWORD *)(a1 + 888) = v167 + 24;
      }
      v179 = *(_QWORD *)(a1 + 912);
      if (v179 >= *(_QWORD *)(a1 + 920))
      {
        v181 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v594, (__int128 *)&v612);
        v17 = (__int128 *)(a1 + 400);
      }
      else
      {
        v17 = (__int128 *)(a1 + 400);
        if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 912), v612.__r_.__value_.__l.__data_, v612.__r_.__value_.__l.__size_);
        }
        else
        {
          v180 = *(_OWORD *)&v612.__r_.__value_.__l.__data_;
          *(_QWORD *)(v179 + 16) = *((_QWORD *)&v612.__r_.__value_.__l + 2);
          *(_OWORD *)v179 = v180;
        }
        v181 = v179 + 24;
        *(_QWORD *)(a1 + 912) = v179 + 24;
      }
      *(_QWORD *)(a1 + 912) = v181;
      if (*(char *)(a1 + 423) < 0)
        std::string::__init_copy_ctor_external(&v609, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
      else
        v609 = *(std::string *)v17;
      if (*((char *)v139 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)v139, *((_QWORD *)v139 + 1));
      }
      else
      {
        v182 = *v139;
        v608.__r_.__value_.__r.__words[2] = *((_QWORD *)v139 + 2);
        *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v182;
      }
      TacotronPhoneFeature::TacotronPhoneFeature((std::string *)__p, (__int128 *)&v609, (__int128 *)&v608, *v142, v142[1], 1, 0, 0, *(float *)(a1 + 296), *(float *)(a1 + 300));
      v183 = *(_QWORD *)(a1 + 936);
      v184 = *(_QWORD *)(a1 + 944);
      if (v183 >= v184)
      {
        v189 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v183 - *v591) >> 3);
        v190 = v189 + 1;
        if ((unint64_t)(v189 + 1) > 0x276276276276276)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v191 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v184 - *v591) >> 3);
        if (2 * v191 > v190)
          v190 = 2 * v191;
        if (v191 >= 0x13B13B13B13B13BLL)
          v192 = 0x276276276276276;
        else
          v192 = v190;
        *(_QWORD *)&v616[32] = a1 + 944;
        v193 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TacotronPhoneFeature>>(v192);
        v194 = &v193[104 * v189];
        *(_QWORD *)v616 = v193;
        *(_QWORD *)&v616[8] = v194;
        *(_QWORD *)&v616[24] = &v193[104 * v195];
        v196 = *(_OWORD *)__p;
        *((_QWORD *)v194 + 2) = *(_QWORD *)&__p[16];
        *(_OWORD *)v194 = v196;
        memset(__p, 0, 24);
        v197 = *(_OWORD *)&__p[24];
        *((_QWORD *)v194 + 5) = *(_QWORD *)&__p[40];
        *(_OWORD *)(v194 + 24) = v197;
        memset(&__p[24], 0, 24);
        v198 = *(_OWORD *)&__p[64];
        *((_OWORD *)v194 + 3) = *(_OWORD *)&__p[48];
        *((_OWORD *)v194 + 4) = v198;
        *((_QWORD *)v194 + 11) = 0;
        *((_QWORD *)v194 + 12) = 0;
        *((_QWORD *)v194 + 10) = 0;
        *((_OWORD *)v194 + 5) = *(_OWORD *)&__p[80];
        *((_QWORD *)v194 + 12) = *(_QWORD *)&__p[96];
        memset(&__p[80], 0, 24);
        *(_QWORD *)&v616[16] = v194 + 104;
        std::vector<TacotronPhoneFeature>::__swap_out_circular_buffer(v591, v616);
        v188 = *(_QWORD *)(a1 + 936);
        std::__split_buffer<TacotronPhoneFeature>::~__split_buffer((uint64_t)v616);
      }
      else
      {
        v185 = *(_OWORD *)__p;
        *(_QWORD *)(v183 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v183 = v185;
        memset(__p, 0, 24);
        v186 = *(_QWORD *)&__p[40];
        *(_OWORD *)(v183 + 24) = *(_OWORD *)&__p[24];
        *(_QWORD *)(v183 + 40) = v186;
        memset(&__p[24], 0, 24);
        v187 = *(_OWORD *)&__p[64];
        *(_OWORD *)(v183 + 48) = *(_OWORD *)&__p[48];
        *(_OWORD *)(v183 + 64) = v187;
        *(_QWORD *)(v183 + 80) = 0;
        *(_QWORD *)(v183 + 88) = 0;
        *(_QWORD *)(v183 + 96) = 0;
        *(_OWORD *)(v183 + 80) = *(_OWORD *)&__p[80];
        *(_QWORD *)(v183 + 96) = *(_QWORD *)&__p[96];
        memset(&__p[80], 0, 24);
        v188 = v183 + 104;
      }
      *(_QWORD *)(a1 + 936) = v188;
      *(_QWORD *)v616 = &__p[80];
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)v616);
      if ((__p[47] & 0x80000000) != 0)
        operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v608.__r_.__value_.__l.__data_);
      if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v609.__r_.__value_.__l.__data_);
      if (*(char *)(a1 + 423) >= 0)
        v199 = *(unsigned __int8 *)(a1 + 423);
      else
        v199 = *(_QWORD *)(a1 + 408);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v199 + 1);
      if (__p[23] >= 0)
        v200 = __p;
      else
        v200 = *(_BYTE **)__p;
      if (v199)
      {
        if (*(char *)(a1 + 423) >= 0)
          v201 = v17;
        else
          v201 = *(__int128 **)(a1 + 400);
        memmove(v200, v201, v199);
      }
      *(_WORD *)&v200[v199] = 32;
      if (__p[23] >= 0)
        v202 = __p;
      else
        v202 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v203 = __p[23];
      else
        v203 = *(_QWORD *)&__p[8];
      std::string::append(v601, v202, v203);
      v23 = v592;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0)
      {
        v106 = (void *)v612.__r_.__value_.__r.__words[0];
LABEL_347:
        operator delete(v106);
      }
LABEL_68:
      v22 += 14;
    }
    while (v22 != v23);
    v18 = *v596;
    v19 = **v596;
    LODWORD(v16) = v583;
LABEL_482:
    v288 = (uint64_t *)(v19 + 216 * v599 + 72);
    if (v579 != v288)
    {
      v289 = *(_QWORD *)(v19 + 216 * v599 + 80);
      std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>(v579, *v288, v289, 0x6DB6DB6DB6DB6DB7 * ((v289 - *v288) >> 3));
      v18 = *v596;
    }
    v16 = (v16 + 1);
LABEL_1012:
    v19 = *v18;
  }
  while (0x84BDA12F684BDA13 * ((v18[1] - *v18) >> 3) > (int)v16);
LABEL_1015:
  if (*(_QWORD *)(a1 + 856) != *(_QWORD *)(a1 + 864))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v559 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v561 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3);
      *(_DWORD *)__p = 67109376;
      *(_DWORD *)&__p[4] = v581 - v597;
      *(_WORD *)&__p[8] = 2048;
      *(_QWORD *)&__p[10] = v561;
      _os_log_impl(&dword_1DE3F6000, v559, OS_LOG_TYPE_INFO, "Remainder %d words %zu phones", __p, 0x12u);
    }
    Diagnostics::log(6, "Remainder %d words %zu phones", v560, (v581 - v597), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 864) - *(_QWORD *)(a1 + 856)) >> 3));
    NeuralAdapterModule::dump_features((NeuralAdapterModule *)a1);
  }
  v562 = v603;
  if (v603)
  {
    v563 = (unint64_t *)&v603->__shared_owners_;
    do
      v564 = __ldaxr(v563);
    while (__stlxr(v564 - 1, v563));
    if (!v564)
    {
      ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
      std::__shared_weak_count::__release_weak(v562);
    }
  }
}

void sub_1DEA19930(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  WordFeature::~WordFeature((void **)&STACK[0x330]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void NeuralAdapterModule::process_markers(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = a1 + 304;
    v7 = (_OWORD *)(a1 + 328);
    do
    {
      switch(*v4)
      {
        case 1:
          *(_BYTE *)(a1 + 1000) = 1;
          v8 = *(_QWORD *)(a1 + 720);
          *(_DWORD *)(a1 + 296) = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(a1 + 300) = *(_DWORD *)(v8 + 24);
          MEMORY[0x1DF0ECA80](v6, "narrator");
          v9 = *(_QWORD *)(a1 + 720);
          *v7 = *(_OWORD *)(v9 + 28);
          *(_DWORD *)(a1 + 344) = *(_DWORD *)(v9 + 44);
          if (*(char *)(a1 + 839) < 0)
          {
            **(_BYTE **)(a1 + 816) = 0;
            *(_QWORD *)(a1 + 824) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 816) = 0;
            *(_BYTE *)(a1 + 839) = 0;
          }
          break;
        case 4:
          *(float *)(a1 + 300) = (float)(int)v4[1] / 100.0;
          break;
        case 5:
          *(float *)(a1 + 296) = (float)(int)v4[1] / 100.0;
          break;
        case 0xA:
          NeuralAdapterModule::process_bookmark(a1, (uint64_t)v4);
          break;
        default:
          break;
      }
      v4 += 14;
    }
    while (v4 != a3);
  }
}

void NeuralAdapterModule::dump_features(NeuralAdapterModule *this)
{
  NSObject *v2;
  std::string *v3;
  const char *v4;
  std::string *p_p;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _QWORD *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  std::string::size_type size;
  std::string::size_type v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  std::string::size_type v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  NSObject *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  const char *v37;
  std::string *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  std::string::size_type v54;
  std::string::size_type v55;
  __int128 v56;
  std::string::size_type v57;
  __int128 v58;
  std::string::size_type v59;
  __int128 v60;
  std::string::size_type v61;
  uint64_t *v62;
  uint64_t *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  std::string::size_type v73;
  int v74;
  void *shared_owners;
  uint64_t *v76;
  uint64_t *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  std::string::size_type v87;
  int v88;
  std::string::size_type v89;
  uint64_t i;
  uint64_t *v91;
  uint64_t *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  NSObject *v95;
  const char *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t *v107;
  uint64_t *v108;
  std::string::size_type v109;
  std::string::size_type v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  int64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  std::string::size_type v118;
  int v119;
  void *v120;
  __int128 *v121;
  __int128 v122;
  uint64_t *v123;
  _QWORD *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  uint64_t j;
  uint64_t *v128;
  _QWORD *v129;
  std::string::size_type v130;
  NSObject *v131;
  const char *v132;
  std::string::size_type v133;
  std::string::size_type v134;
  _QWORD *v135;
  char *v136;
  std::string::size_type v137;
  uint64_t *v138;
  uint64_t *v139;
  std::string::size_type v140;
  std::string::size_type v141;
  void *v142;
  uint64_t v143;
  unint64_t v144;
  int64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  std::string::size_type v149;
  int v150;
  std::string::size_type v151;
  uint64_t k;
  uint64_t *v153;
  uint64_t *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  NSObject *v157;
  const char *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  int64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  int v168;
  uint64_t *v169;
  uint64_t *v170;
  std::string::size_type v171;
  std::string::size_type v172;
  void *v173;
  uint64_t v174;
  unint64_t v175;
  int64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  std::string::size_type v180;
  int v181;
  _QWORD *v182;
  _OWORD *v183;
  void *v184;
  __int128 *v185;
  __int128 v186;
  uint64_t *v187;
  _QWORD *v188;
  std::string::size_type v189;
  std::string::size_type v190;
  uint64_t m;
  uint64_t *v192;
  _QWORD *v193;
  std::string::size_type v194;
  NSObject *v195;
  const char *v196;
  std::string::size_type v197;
  std::string::size_type v198;
  _QWORD *v199;
  char *v200;
  std::string::size_type v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  __int128 v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  NSObject *v216;
  const char *v217;
  float *v218;
  double v219;
  double v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t n;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  std::string::size_type v231;
  std::string *v232;
  __int128 v233;
  std::string *v234;
  std::string::size_type v235;
  uint64_t v236;
  float v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  std::string::size_type v242;
  std::string *v243;
  __int128 v244;
  std::string *v245;
  std::string::size_type v246;
  uint64_t v247;
  float v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  std::string::size_type v253;
  std::string *v254;
  __int128 v255;
  std::string *v256;
  std::string::size_type v257;
  NSObject *v258;
  const char *v259;
  std::string *v260;
  std::string *v261;
  NSObject *v262;
  const char *v263;
  std::string *p_buf;
  std::string *v265;
  NSObject *v266;
  const char *v267;
  std::string *v268;
  std::string *v269;
  NSObject *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  _DWORD *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t ii;
  void **v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  __int128 *v286;
  std::string *v287;
  __int128 v288;
  std::string *v289;
  NSObject *v290;
  std::string *v291;
  const char *v292;
  std::string *v293;
  NSObject *v294;
  std::string *v295;
  const char *v296;
  std::string *v297;
  NSObject *v298;
  std::string *v299;
  const char *v300;
  std::string *v301;
  char *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  const void **v317;
  std::__shared_weak_count *v318;
  const void **v319;
  _QWORD *v320;
  char *v321;
  _QWORD *v322;
  _QWORD *v323;
  char *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  uint64_t v328;
  std::string *v329;
  unint64_t v330;
  __int128 v331;
  _QWORD *v332;
  std::__shared_weak_count *v333;
  __int128 v334;
  std::string v335;
  std::string v336;
  std::string v337;
  __int128 v338;
  std::string __p;
  double v340[3];
  uint64_t v341[3];
  uint64_t v342[3];
  uint64_t v343[3];
  _QWORD v344[3];
  std::string v345;
  std::string v346;
  std::string buf;
  uint64_t v348;

  v348 = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)this + 952);
    v3 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "Neural Phonemes: %s ", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)this + 952);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Neural Phonemes: %s ", v4, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (std::__shared_weak_count *)operator new(0x208uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6[1].std::__shared_count = 0u;
  v8 = &v6[1].__vftable;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9330E8;
  v9 = (__int128 *)((char *)this + 904);
  *(_OWORD *)&v6[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[2].__shared_owners_ = 0u;
  v6[3].std::__shared_count = 0u;
  *(_OWORD *)&v6[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[4].__shared_owners_ = 0u;
  v6[5].std::__shared_count = 0u;
  *(_OWORD *)&v6[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[6].__shared_owners_ = 0u;
  v6[7].std::__shared_count = 0u;
  *(_OWORD *)&v6[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[8].__shared_owners_ = 0u;
  v6[9].std::__shared_count = 0u;
  *(_OWORD *)&v6[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[10].__shared_owners_ = 0u;
  v6[11].std::__shared_count = 0u;
  *(_OWORD *)&v6[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[12].__shared_owners_ = 0u;
  v6[13].std::__shared_count = 0u;
  *(_OWORD *)&v6[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[14].__shared_owners_ = 0u;
  v6[15].std::__shared_count = 0u;
  LOWORD(v6[1].__vftable) = 257;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  v6[4].std::__shared_count = 0u;
  *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[5].__shared_owners_ = 0u;
  v6[6].std::__shared_count = 0u;
  *(_OWORD *)&v6[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[7].__shared_owners_ = 0u;
  v6[8].std::__shared_count = 0u;
  *(_OWORD *)&v6[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[9].__shared_owners_ = 0u;
  v6[10].std::__shared_count = 0u;
  *(_OWORD *)&v6[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[11].__shared_owners_ = 0u;
  v6[12].std::__shared_count = 0u;
  *(_OWORD *)&v6[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[13].__shared_owners_ = 0u;
  v6[14].std::__shared_count = 0u;
  *(_OWORD *)&v6[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[20].__shared_owners_ = 0u;
  v6[21].std::__shared_count = 0u;
  v6[19].std::__shared_count = 0u;
  *(_OWORD *)&v6[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[18].__shared_owners_ = 0u;
  *(_OWORD *)&v6[16].__shared_owners_ = 0u;
  v6[17].std::__shared_count = 0u;
  *(_OWORD *)&v6[15].__shared_weak_owners_ = 0u;
  *(_QWORD *)&v334 = v6 + 1;
  *((_QWORD *)&v334 + 1) = v6;
  v332 = &v6[1].__vftable;
  v333 = v6;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  memset(&v335, 0, sizeof(v335));
  v319 = (const void **)((char *)this + 376);
  if (*((char *)this + 399) < 0)
  {
    if (!*((_QWORD *)this + 48))
      goto LABEL_38;
  }
  else if (!*((_BYTE *)this + 399))
  {
    goto LABEL_38;
  }
  if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 272, v319))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
    v11 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, v319, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v12 = v11;
    size = v335.__r_.__value_.__l.__size_;
    if (v335.__r_.__value_.__l.__size_ >= v335.__r_.__value_.__r.__words[2])
    {
      v15 = (void *)v335.__r_.__value_.__r.__words[0];
      v16 = (uint64_t)(v335.__r_.__value_.__l.__size_ - v335.__r_.__value_.__r.__words[0]) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0]) >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v335.__r_.__value_.__r.__words[2], v19);
        size = v335.__r_.__value_.__l.__size_;
        v15 = (void *)v335.__r_.__value_.__r.__words[0];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = (std::string::size_type)&v20[4 * v19];
      *(_DWORD *)v21 = *((_DWORD *)v12 + 14);
      v14 = (std::string::size_type)(v21 + 4);
      while ((void *)size != v15)
      {
        v23 = *(_DWORD *)(size - 4);
        size -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
      v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v335.__r_.__value_.__l.__size_ = v14;
      v335.__r_.__value_.__r.__words[2] = v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v335.__r_.__value_.__l.__size_ = *((_DWORD *)v11 + 14);
      v14 = size + 4;
    }
    v335.__r_.__value_.__l.__size_ = v14;
  }
LABEL_38:
  v24 = 0uLL;
  memset(&buf, 0, sizeof(buf));
  memset(&v337, 0, sizeof(v337));
  v25 = *((_QWORD *)this + 107);
  v318 = v6;
  if (*((_QWORD *)this + 108) == v25)
  {
    v57 = 0;
    v55 = 0;
    v56 = 0uLL;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = (__int128 *)(v25 + 24 * v26);
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
      }
      else
      {
        v28 = *v27;
        v346.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v28;
      }
      if ((NeuralAdapterModule *)((char *)this + 280) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 272, (const void **)&v346.__r_.__value_.__l.__data_))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v33 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v346;
          else
            v34 = (std::string *)v346.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, " ");
          UTFString::join<std::string,std::string>((uint64_t)&v336, *((_QWORD *)this + 107), *((_QWORD *)this + 108), (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v35 = &v336;
          if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v35 = (std::string *)v336.__r_.__value_.__r.__words[0];
          LODWORD(v345.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v345.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          WORD2(v345.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v345.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
          _os_log_impl(&dword_1DE3F6000, v33, OS_LOG_TYPE_ERROR, "Unknown phone mapping for '%s' in /%s/", (uint8_t *)&v345, 0x16u);
          if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v336.__r_.__value_.__l.__data_);
        }
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v346;
        else
          v36 = (std::string *)v346.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        UTFString::join<std::string,std::string>((uint64_t)&v336, *((_QWORD *)this + 107), *((_QWORD *)this + 108), (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v38 = &v336;
        if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v336.__r_.__value_.__r.__words[0];
        Diagnostics::log(3, "Unknown phone mapping for '%s' in /%s/", v37, v36, v38);
        if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v336.__r_.__value_.__l.__data_);
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v346;
        v29 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, (const void **)&v346.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        v30 = v29;
        v31 = v335.__r_.__value_.__l.__size_;
        if (v335.__r_.__value_.__l.__size_ >= v335.__r_.__value_.__r.__words[2])
        {
          v39 = (void *)v335.__r_.__value_.__r.__words[0];
          v40 = (uint64_t)(v335.__r_.__value_.__l.__size_ - v335.__r_.__value_.__r.__words[0]) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0]) >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v335.__r_.__value_.__r.__words[2], v43);
            v31 = v335.__r_.__value_.__l.__size_;
            v39 = (void *)v335.__r_.__value_.__r.__words[0];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[4 * v40];
          *(_DWORD *)v45 = *((_DWORD *)v30 + 14);
          v32 = (std::string::size_type)(v45 + 4);
          while ((void *)v31 != v39)
          {
            v46 = *(_DWORD *)(v31 - 4);
            v31 -= 4;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
          v335.__r_.__value_.__l.__size_ = v32;
          v335.__r_.__value_.__r.__words[2] = (std::string::size_type)&v44[4 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_DWORD *)v335.__r_.__value_.__l.__size_ = *((_DWORD *)v29 + 14);
          v32 = v31 + 4;
        }
        v335.__r_.__value_.__l.__size_ = v32;
        v47 = *((_QWORD *)this + 110) + 24 * v26;
        v48 = (_OWORD *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
        {
          v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&buf, (__int128 *)v47);
        }
        else
        {
          if (*(char *)(v47 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf.__r_.__value_.__l.__size_, *(const std::string::value_type **)v47, *(_QWORD *)(v47 + 8));
          }
          else
          {
            v49 = *(_OWORD *)v47;
            *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v47 + 16);
            *v48 = v49;
          }
          v50 = (std::string::size_type)v48 + 24;
        }
        buf.__r_.__value_.__l.__size_ = v50;
        v51 = *((_QWORD *)this + 113) + 24 * v26;
        v52 = (_OWORD *)v337.__r_.__value_.__l.__size_;
        if (v337.__r_.__value_.__l.__size_ >= v337.__r_.__value_.__r.__words[2])
        {
          v54 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v337, (__int128 *)v51);
        }
        else
        {
          if (*(char *)(v51 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v337.__r_.__value_.__l.__size_, *(const std::string::value_type **)v51, *(_QWORD *)(v51 + 8));
          }
          else
          {
            v53 = *(_OWORD *)v51;
            *(_QWORD *)(v337.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v51 + 16);
            *v52 = v53;
          }
          v54 = (std::string::size_type)v52 + 24;
        }
        v337.__r_.__value_.__l.__size_ = v54;
      }
      if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v346.__r_.__value_.__l.__data_);
      ++v26;
      v25 = *((_QWORD *)this + 107);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 108) - v25) >> 3) > v26);
    v24 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v55 = buf.__r_.__value_.__r.__words[2];
    v56 = *(_OWORD *)&v337.__r_.__value_.__l.__data_;
    v57 = v337.__r_.__value_.__r.__words[2];
    v9 = (__int128 *)((char *)this + 904);
  }
  v58 = *((_OWORD *)this + 55);
  *((_OWORD *)this + 55) = v24;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v58;
  v59 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = v55;
  buf.__r_.__value_.__r.__words[2] = v59;
  v60 = *v9;
  *v9 = v56;
  *(_OWORD *)&v337.__r_.__value_.__l.__data_ = v60;
  v61 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = v57;
  v337.__r_.__value_.__r.__words[2] = v61;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
  v321 = (char *)this + 272;
  v317 = (const void **)((char *)this + 352);
  v62 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 34, (const void **)this + 44, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  v63 = v62;
  v64 = v335.__r_.__value_.__l.__size_;
  if (v335.__r_.__value_.__l.__size_ >= v335.__r_.__value_.__r.__words[2])
  {
    v66 = (void *)v335.__r_.__value_.__r.__words[0];
    v67 = (uint64_t)(v335.__r_.__value_.__l.__size_ - v335.__r_.__value_.__r.__words[0]) >> 2;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v69 = v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v335.__r_.__value_.__r.__words[2] - v335.__r_.__value_.__r.__words[0]) >> 1 > v68)
      v68 = v69 >> 1;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
      v70 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v335.__r_.__value_.__r.__words[2], v70);
      v64 = v335.__r_.__value_.__l.__size_;
      v66 = (void *)v335.__r_.__value_.__r.__words[0];
    }
    else
    {
      v71 = 0;
    }
    v72 = &v71[4 * v67];
    v73 = (std::string::size_type)&v71[4 * v70];
    *(_DWORD *)v72 = *((_DWORD *)v63 + 14);
    v65 = (std::string::size_type)(v72 + 4);
    while ((void *)v64 != v66)
    {
      v74 = *(_DWORD *)(v64 - 4);
      v64 -= 4;
      *((_DWORD *)v72 - 1) = v74;
      v72 -= 4;
    }
    v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    v335.__r_.__value_.__l.__size_ = v65;
    v335.__r_.__value_.__r.__words[2] = v73;
    if (v66)
      operator delete(v66);
  }
  else
  {
    *(_DWORD *)v335.__r_.__value_.__l.__size_ = *((_DWORD *)v62 + 14);
    v65 = v64 + 4;
  }
  v335.__r_.__value_.__l.__size_ = v65;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  shared_owners = (void *)v6[2].__shared_owners_;
  if (shared_owners)
  {
    v6[2].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  *(std::string *)((char *)&v6[2] + 8) = v335;
  memset(&__p, 0, sizeof(__p));
  if (*((_QWORD *)this + 94))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((_QWORD *)this + 48))
        goto LABEL_141;
    }
    else if (!*((_BYTE *)this + 399))
    {
      goto LABEL_141;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v321, v319)&& (NeuralAdapterModule *)((char *)this + 744) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 736, v319))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
      v76 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, v319, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
      v77 = v76;
      v78 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v80 = (void *)__p.__r_.__value_.__r.__words[0];
        v81 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 62)
          goto LABEL_591;
        v83 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v82)
          v82 = v83 >> 1;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
          v84 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
        {
          v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v84);
          v78 = __p.__r_.__value_.__l.__size_;
          v80 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v85 = 0;
        }
        v86 = &v85[4 * v81];
        v87 = (std::string::size_type)&v85[4 * v84];
        *(_DWORD *)v86 = *((_DWORD *)v77 + 14);
        v79 = (std::string::size_type)(v86 + 4);
        while ((void *)v78 != v80)
        {
          v88 = *(_DWORD *)(v78 - 4);
          v78 -= 4;
          *((_DWORD *)v86 - 1) = v88;
          v86 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
        __p.__r_.__value_.__l.__size_ = v79;
        __p.__r_.__value_.__r.__words[2] = v87;
        if (v80)
          operator delete(v80);
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v76 + 14);
        v79 = v78 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v79;
    }
LABEL_141:
    v89 = *((_QWORD *)this + 110);
    for (i = *((_QWORD *)this + 111); v89 != i; v89 += 24)
    {
      if ((NeuralAdapterModule *)((char *)this + 744) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 736, (const void **)v89))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v95 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v97 = v89;
          if (*(char *)(v89 + 23) < 0)
            v97 = *(_QWORD *)v89;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v97;
          _os_log_impl(&dword_1DE3F6000, v95, OS_LOG_TYPE_ERROR, "Unknown language mapping for '%s' ", (uint8_t *)&buf, 0xCu);
        }
        v98 = v89;
        if (*(char *)(v89 + 23) < 0)
          v98 = *(_QWORD *)v89;
        Diagnostics::log(3, "Unknown language mapping for '%s' ", v96, v98);
      }
      else
      {
        buf.__r_.__value_.__r.__words[0] = v89;
        v91 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, (const void **)v89, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
        v92 = v91;
        v93 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v99 = (void *)__p.__r_.__value_.__r.__words[0];
          v100 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v102 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v101)
            v101 = v102 >> 1;
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
            v103 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v103 = v101;
          if (v103)
          {
            v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v103);
            v93 = __p.__r_.__value_.__l.__size_;
            v99 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v104 = 0;
          }
          v105 = &v104[4 * v100];
          *(_DWORD *)v105 = *((_DWORD *)v92 + 14);
          v94 = (std::string::size_type)(v105 + 4);
          while ((void *)v93 != v99)
          {
            v106 = *(_DWORD *)(v93 - 4);
            v93 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
          __p.__r_.__value_.__l.__size_ = v94;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v104[4 * v103];
          if (v99)
            operator delete(v99);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v91 + 14);
          v94 = v93 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v94;
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
    v107 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 92, v317, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    v6 = v318;
    v108 = v107;
    v109 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v107 + 14);
      v110 = v109 + 4;
LABEL_186:
      __p.__r_.__value_.__l.__size_ = v110;
      v8 = v332;
      goto LABEL_187;
    }
    v111 = (void *)__p.__r_.__value_.__r.__words[0];
    v112 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
    v113 = v112 + 1;
    if (!((unint64_t)(v112 + 1) >> 62))
    {
      v114 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v113)
        v113 = v114 >> 1;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
        v115 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
      {
        v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v115);
        v109 = __p.__r_.__value_.__l.__size_;
        v111 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v116 = 0;
      }
      v117 = &v116[4 * v112];
      v118 = (std::string::size_type)&v116[4 * v115];
      *(_DWORD *)v117 = *((_DWORD *)v108 + 14);
      v110 = (std::string::size_type)(v117 + 4);
      while ((void *)v109 != v111)
      {
        v119 = *(_DWORD *)(v109 - 4);
        v109 -= 4;
        *((_DWORD *)v117 - 1) = v119;
        v117 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
      __p.__r_.__value_.__l.__size_ = v110;
      __p.__r_.__value_.__r.__words[2] = v118;
      if (v111)
        operator delete(v111);
      goto LABEL_186;
    }
LABEL_591:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_187:
  v120 = (void *)v8[40];
  if (v120)
  {
    v8[41] = v120;
    operator delete(v120);
  }
  *(std::string *)(v8 + 40) = __p;
  memset(&buf, 0, sizeof(buf));
  if (*((_QWORD *)this + 83))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((_QWORD *)this + 48))
      {
LABEL_205:
        v126 = *((_QWORD *)this + 113);
        for (j = *((_QWORD *)this + 114); v126 != j; v126 += 24)
        {
          if ((NeuralAdapterModule *)((char *)this + 656) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 648, (const void **)v126))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v131 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v133 = v126;
              if (*(char *)(v126 + 23) < 0)
                v133 = *(_QWORD *)v126;
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v133;
              _os_log_impl(&dword_1DE3F6000, v131, OS_LOG_TYPE_ERROR, "Unknown dialog mapping for '%s' ", (uint8_t *)&__p, 0xCu);
            }
            v134 = v126;
            if (*(char *)(v126 + 23) < 0)
              v134 = *(_QWORD *)v126;
            Diagnostics::log(3, "Unknown dialog mapping for '%s' ", v132, v134);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v126;
            v128 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 81, (const void **)v126, (__int128 **)&__p);
            v129 = (_QWORD *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              v130 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v128 + 7));
            }
            else
            {
              *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
              v129[1] = 0;
              v129[2] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v129, (const void *)v128[7], v128[8], (v128[8] - v128[7]) >> 2);
              v130 = (std::string::size_type)(v129 + 3);
            }
            buf.__r_.__value_.__l.__size_ = v130;
          }
        }
        v135 = (_QWORD *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
          v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v136 = (char *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 81, (const void **)&__p.__r_.__value_.__l.__data_, &v346)+ 56;
          v6 = v318;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v135 = (_QWORD *)buf.__r_.__value_.__l.__size_;
        }
        else
        {
          v136 = (char *)(buf.__r_.__value_.__l.__size_ - 24);
          v6 = v318;
        }
        if ((unint64_t)v135 >= buf.__r_.__value_.__r.__words[2])
        {
          v137 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)v136);
        }
        else
        {
          *v135 = 0;
          v135[1] = 0;
          v135[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v135, *(const void **)v136, *((_QWORD *)v136 + 1), (uint64_t)(*((_QWORD *)v136 + 1) - *(_QWORD *)v136) >> 2);
          v137 = (std::string::size_type)(v135 + 3);
        }
        buf.__r_.__value_.__l.__size_ = v137;
        v8 = v332;
        goto LABEL_230;
      }
    }
    else if (!*((_BYTE *)this + 399))
    {
      goto LABEL_205;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v321, v319))
    {
      v121 = (__int128 *)*((_QWORD *)this + 113);
      if (*((__int128 **)this + 114) == v121)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
      }
      else if (*((char *)v121 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v121, *((_QWORD *)v121 + 1));
      }
      else
      {
        v122 = *v121;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v121 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v122;
      }
      v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v123 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 81, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&v346);
      v124 = (_QWORD *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
      {
        v125 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v123 + 7));
      }
      else
      {
        *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
        v124[1] = 0;
        v124[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v124, (const void *)v123[7], v123[8], (v123[8] - v123[7]) >> 2);
        v125 = (std::string::size_type)(v124 + 3);
      }
      buf.__r_.__value_.__l.__size_ = v125;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_205;
  }
LABEL_230:
  std::vector<std::vector<int>>::__vdeallocate(v8 + 56);
  *(std::string *)(v8 + 56) = buf;
  memset(&buf, 0, sizeof(buf));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  if (!*((_QWORD *)this + 86))
    goto LABEL_300;
  if (*((char *)this + 399) < 0)
  {
    if (!*((_QWORD *)this + 48))
      goto LABEL_254;
  }
  else if (!*((_BYTE *)this + 399))
  {
    goto LABEL_254;
  }
  if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v321, v319)&& (NeuralAdapterModule *)((char *)this + 680) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 672, v319))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 376;
    v138 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, v319, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
    v139 = v138;
    v140 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v142 = (void *)__p.__r_.__value_.__r.__words[0];
      v143 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      v144 = v143 + 1;
      if ((unint64_t)(v143 + 1) >> 62)
        goto LABEL_592;
      v145 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v144)
        v144 = v145 >> 1;
      if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
        v146 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v146 = v144;
      if (v146)
      {
        v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v146);
        v140 = __p.__r_.__value_.__l.__size_;
        v142 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v147 = 0;
      }
      v148 = &v147[4 * v143];
      v149 = (std::string::size_type)&v147[4 * v146];
      *(_DWORD *)v148 = *((_DWORD *)v139 + 14);
      v141 = (std::string::size_type)(v148 + 4);
      while ((void *)v140 != v142)
      {
        v150 = *(_DWORD *)(v140 - 4);
        v140 -= 4;
        *((_DWORD *)v148 - 1) = v150;
        v148 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
      __p.__r_.__value_.__l.__size_ = v141;
      __p.__r_.__value_.__r.__words[2] = v149;
      if (v142)
        operator delete(v142);
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v138 + 14);
      v141 = v140 + 4;
    }
    __p.__r_.__value_.__l.__size_ = v141;
  }
LABEL_254:
  v151 = *((_QWORD *)this + 113);
  for (k = *((_QWORD *)this + 114); v151 != k; v151 += 24)
  {
    if ((NeuralAdapterModule *)((char *)this + 680) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 672, (const void **)v151))
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v157 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        v159 = v151;
        if (*(char *)(v151 + 23) < 0)
          v159 = *(_QWORD *)v151;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v159;
        _os_log_impl(&dword_1DE3F6000, v157, OS_LOG_TYPE_ERROR, "Unknown dialog mapping for '%s' ", (uint8_t *)&buf, 0xCu);
      }
      v160 = v151;
      if (*(char *)(v151 + 23) < 0)
        v160 = *(_QWORD *)v151;
      Diagnostics::log(3, "Unknown dialog mapping for '%s' ", v158, v160);
    }
    else
    {
      buf.__r_.__value_.__r.__words[0] = v151;
      v153 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, (const void **)v151, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
      v154 = v153;
      v155 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v161 = (void *)__p.__r_.__value_.__r.__words[0];
        v162 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        v163 = v162 + 1;
        if ((unint64_t)(v162 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v164 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v163)
          v163 = v164 >> 1;
        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
          v165 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v165 = v163;
        if (v165)
        {
          v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v165);
          v155 = __p.__r_.__value_.__l.__size_;
          v161 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v166 = 0;
        }
        v167 = &v166[4 * v162];
        *(_DWORD *)v167 = *((_DWORD *)v154 + 14);
        v156 = (std::string::size_type)(v167 + 4);
        while ((void *)v155 != v161)
        {
          v168 = *(_DWORD *)(v155 - 4);
          v155 -= 4;
          *((_DWORD *)v167 - 1) = v168;
          v167 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v167;
        __p.__r_.__value_.__l.__size_ = v156;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v166[4 * v165];
        if (v161)
          operator delete(v161);
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v153 + 14);
        v156 = v155 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v156;
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 352;
  v169 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 84, v317, (uint64_t)&std::piecewise_construct, (__int128 **)&buf);
  v6 = v318;
  v170 = v169;
  v171 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
  {
    v173 = (void *)__p.__r_.__value_.__r.__words[0];
    v174 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
    v175 = v174 + 1;
    if (!((unint64_t)(v174 + 1) >> 62))
    {
      v176 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v175)
        v175 = v176 >> 1;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL)
        v177 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v177);
        v171 = __p.__r_.__value_.__l.__size_;
        v173 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v178 = 0;
      }
      v179 = &v178[4 * v174];
      v180 = (std::string::size_type)&v178[4 * v177];
      *(_DWORD *)v179 = *((_DWORD *)v170 + 14);
      v172 = (std::string::size_type)(v179 + 4);
      while ((void *)v171 != v173)
      {
        v181 = *(_DWORD *)(v171 - 4);
        v171 -= 4;
        *((_DWORD *)v179 - 1) = v181;
        v179 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
      __p.__r_.__value_.__l.__size_ = v172;
      __p.__r_.__value_.__r.__words[2] = v180;
      if (v173)
        operator delete(v173);
      goto LABEL_299;
    }
LABEL_592:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)__p.__r_.__value_.__l.__size_ = *((_DWORD *)v169 + 14);
  v172 = v171 + 4;
LABEL_299:
  __p.__r_.__value_.__l.__size_ = v172;
LABEL_300:
  v182 = v332;
  v183 = v332 + 53;
  v184 = (void *)v332[53];
  if (v184)
  {
    v332[54] = v184;
    operator delete(v184);
  }
  *v183 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v182[55] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  memset(&buf, 0, sizeof(buf));
  if (*((_QWORD *)this + 89))
  {
    if (*((char *)this + 399) < 0)
    {
      if (!*((_QWORD *)this + 48))
      {
LABEL_318:
        v190 = *((_QWORD *)this + 113);
        for (m = *((_QWORD *)this + 114); v190 != m; v190 += 24)
        {
          if ((NeuralAdapterModule *)((char *)this + 704) == (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)this + 696, (const void **)v190))
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v195 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v197 = v190;
              if (*(char *)(v190 + 23) < 0)
                v197 = *(_QWORD *)v190;
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v197;
              _os_log_impl(&dword_1DE3F6000, v195, OS_LOG_TYPE_ERROR, "Unfound dialog mapping for '%s' ", (uint8_t *)&__p, 0xCu);
            }
            v198 = v190;
            if (*(char *)(v190 + 23) < 0)
              v198 = *(_QWORD *)v190;
            Diagnostics::log(3, "Unfound dialog mapping for '%s' ", v196, v198);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v190;
            v192 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 87, (const void **)v190, (__int128 **)&__p);
            v193 = (_QWORD *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              v194 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v192 + 7));
            }
            else
            {
              *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
              v193[1] = 0;
              v193[2] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v193, (const void *)v192[7], v192[8], (v192[8] - v192[7]) >> 2);
              v194 = (std::string::size_type)(v193 + 3);
            }
            buf.__r_.__value_.__l.__size_ = v194;
          }
        }
        v199 = (_QWORD *)buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
          v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v200 = (char *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 87, (const void **)&__p.__r_.__value_.__l.__data_, &v346)+ 56;
          v6 = v318;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v199 = (_QWORD *)buf.__r_.__value_.__l.__size_;
        }
        else
        {
          v200 = (char *)(buf.__r_.__value_.__l.__size_ - 24);
          v6 = v318;
        }
        if ((unint64_t)v199 >= buf.__r_.__value_.__r.__words[2])
        {
          v201 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)v200);
        }
        else
        {
          *v199 = 0;
          v199[1] = 0;
          v199[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v199, *(const void **)v200, *((_QWORD *)v200 + 1), (uint64_t)(*((_QWORD *)v200 + 1) - *(_QWORD *)v200) >> 2);
          v201 = (std::string::size_type)(v199 + 3);
        }
        buf.__r_.__value_.__l.__size_ = v201;
        v182 = v332;
        goto LABEL_343;
      }
    }
    else if (!*((_BYTE *)this + 399))
    {
      goto LABEL_318;
    }
    if ((NeuralAdapterModule *)((char *)this + 280) != (NeuralAdapterModule *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v321, v319))
    {
      v185 = (__int128 *)*((_QWORD *)this + 113);
      if (*((__int128 **)this + 114) == v185)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "narrator");
      }
      else if (*((char *)v185 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v185, *((_QWORD *)v185 + 1));
      }
      else
      {
        v186 = *v185;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v185 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v186;
      }
      v346.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v187 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 87, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&v346);
      v188 = (_QWORD *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
      {
        v189 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&buf, (uint64_t)(v187 + 7));
      }
      else
      {
        *(_QWORD *)buf.__r_.__value_.__l.__size_ = 0;
        v188[1] = 0;
        v188[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v188, (const void *)v187[7], v187[8], (v187[8] - v187[7]) >> 2);
        v189 = (std::string::size_type)(v188 + 3);
      }
      buf.__r_.__value_.__l.__size_ = v189;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_318;
  }
LABEL_343:
  std::vector<std::vector<int>>::__vdeallocate(v182 + 59);
  *(std::string *)(v182 + 59) = buf;
  memset(&buf, 0, sizeof(buf));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v202 = v332;
  v203 = v332[1];
  v332[1] = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = v203;
  v204 = v202[2];
  v202[2] = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = v204;
  v205 = v202[3];
  v202[3] = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = v205;
  *((_DWORD *)v202 + 86) = *((_DWORD *)this + 190);
  do
    v206 = __ldaxr(p_shared_owners);
  while (__stlxr(v206 - 1, p_shared_owners));
  if (!v206)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v207 = v334;
  v331 = v334;
  if (*((_QWORD *)&v334 + 1))
  {
    v208 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
  }
  v210 = *((_QWORD *)this + 90);
  v211 = *(char **)(v210 + 48);
  v212 = *(_QWORD *)(v210 + 56);
  if (v211 == (char *)v212)
  {
    v211 = (char *)*((_QWORD *)this + 96);
    v212 = *((_QWORD *)this + 97);
  }
  v214 = *(_QWORD *)(v334 + 32);
  v213 = *(_QWORD *)(v334 + 40);
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(v334 + 400), v211, v212, (v212 - (uint64_t)v211) >> 2);
  v323 = (_QWORD *)(v334 + 104);
  std::vector<float>::assign((char **)(v334 + 104), (v213 - v214) >> 2, (_DWORD *)(*((_QWORD *)this + 90) + 16));
  std::vector<float>::assign((char **)(v334 + 128), (v213 - v214) >> 2, (_DWORD *)(*((_QWORD *)this + 90) + 24));
  v320 = (_QWORD *)(v334 + 152);
  std::vector<float>::assign((char **)(v334 + 152), (v213 - v214) >> 2, (_DWORD *)(*((_QWORD *)this + 90) + 20));
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v322 = (_QWORD *)(v334 + 176);
  std::vector<float>::assign((char **)(v334 + 176), (v213 - v214) >> 2, &__p);
  v215 = (_QWORD *)(v334 + 224);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::assign((char **)(v334 + 224), (v213 - v214) >> 2, &__p);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v216 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v218 = (float *)*((_QWORD *)this + 90);
    v219 = v218[4];
    v220 = v218[6];
    v221 = v218[5];
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218496;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v219;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v220;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    v340[0] = v221;
    _os_log_impl(&dword_1DE3F6000, v216, OS_LOG_TYPE_INFO, "Neural phone feature scale from synthesizer config: rate_scale=%f, pitch_scale=%f, energy_scale=%f", (uint8_t *)&__p, 0x20u);
  }
  Diagnostics::log(6, "Neural phone feature scale from synthesizer config: rate_scale=%f, pitch_scale=%f, energy_scale=%f", v217, *(float *)(*((_QWORD *)this + 90) + 16), *(float *)(*((_QWORD *)this + 90) + 24), *(float *)(*((_QWORD *)this + 90) + 20));
  if (*((char *)this + 375) < 0)
    v222 = *((_QWORD *)this + 45);
  else
    v222 = *((unsigned __int8 *)this + 375);
  v223 = ((v213 - v214) >> 2) - (v222 != 0);
  if (*((char *)this + 399) < 0)
    v224 = *((_QWORD *)this + 48);
  else
    v224 = *((unsigned __int8 *)this + 399);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v334 + 16) - *(_QWORD *)(v334 + 8)) >> 3) == v223 - (v224 != 0))
  {
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    memset(&v337, 0, sizeof(v337));
    v225 = *(_QWORD *)(v334 + 8);
    if (*(_QWORD *)(v334 + 16) != v225)
    {
      v226 = 0;
      for (n = 0; 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v207 + 16) - v225) >> 3) > n; ++n)
      {
        if (*((char *)this + 399) < 0)
          v228 = *((_QWORD *)this + 48);
        else
          v228 = *((unsigned __int8 *)this + 399);
        v229 = v225 + v226;
        if (v228)
          v230 = n + 1;
        else
          v230 = n;
        *(_DWORD *)(*(_QWORD *)(v207 + 128) + 4 * v230) = *(_DWORD *)(v229 + 68);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v231 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v231 = __p.__r_.__value_.__l.__size_;
        if (v231)
        {
          std::to_string(&v336, *(float *)(v229 + 68));
          v232 = std::string::insert(&v336, 0, " ");
          v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
          v346.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v233;
          v232->__r_.__value_.__l.__size_ = 0;
          v232->__r_.__value_.__r.__words[2] = 0;
          v232->__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          std::to_string(&v346, *(float *)(v229 + 68));
        }
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v234 = &v346;
        else
          v234 = (std::string *)v346.__r_.__value_.__r.__words[0];
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v235 = HIBYTE(v346.__r_.__value_.__r.__words[2]);
        else
          v235 = v346.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v234, v235);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v346.__r_.__value_.__l.__data_);
          if (!v231)
            goto LABEL_389;
        }
        else if (!v231)
        {
          goto LABEL_389;
        }
        if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v336.__r_.__value_.__l.__data_);
LABEL_389:
        v225 = *(_QWORD *)(v207 + 8);
        v236 = v225 + v226;
        v237 = *(float *)(v225 + v226 + 72);
        if (v237 <= 0.0)
          goto LABEL_421;
        if (*((char *)this + 399) < 0)
          v238 = *((_QWORD *)this + 48);
        else
          v238 = *((unsigned __int8 *)this + 399);
        if (v238)
          v239 = n + 1;
        else
          v239 = n;
        *(float *)(*v322 + 4 * v239) = v237;
        if (*((char *)this + 399) < 0)
          v240 = *((_QWORD *)this + 48);
        else
          v240 = *((unsigned __int8 *)this + 399);
        if (v240)
          v241 = n + 1;
        else
          v241 = n;
        *(_DWORD *)(*v323 + 4 * v241) = 0;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v242 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v242 = buf.__r_.__value_.__l.__size_;
        if (v242)
        {
          std::to_string(&v335, *(float *)(v236 + 72));
          v243 = std::string::insert(&v335, 0, " ");
          v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
          v346.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v244;
          v243->__r_.__value_.__l.__size_ = 0;
          v243->__r_.__value_.__r.__words[2] = 0;
          v243->__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          std::to_string(&v346, *(float *)(v236 + 72));
        }
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v245 = &v346;
        else
          v245 = (std::string *)v346.__r_.__value_.__r.__words[0];
        if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v246 = HIBYTE(v346.__r_.__value_.__r.__words[2]);
        else
          v246 = v346.__r_.__value_.__l.__size_;
        std::string::append(&buf, (const std::string::value_type *)v245, v246);
        if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v346.__r_.__value_.__l.__data_);
          if (v242)
          {
LABEL_418:
            if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v335.__r_.__value_.__l.__data_);
          }
        }
        else if (v242)
        {
          goto LABEL_418;
        }
        v225 = *(_QWORD *)(v207 + 8);
LABEL_421:
        v247 = v225 + v226;
        v248 = *(float *)(v225 + v226 + 76);
        if (v248 > 1.1755e-38)
        {
          if (*((char *)this + 399) < 0)
            v249 = *((_QWORD *)this + 48);
          else
            v249 = *((unsigned __int8 *)this + 399);
          if (v249)
            v250 = n + 1;
          else
            v250 = n;
          *(float *)(*v215 + 4 * v250) = v248;
          if (*((char *)this + 399) < 0)
            v251 = *((_QWORD *)this + 48);
          else
            v251 = *((unsigned __int8 *)this + 399);
          if (v251)
            v252 = n + 1;
          else
            v252 = n;
          *(_DWORD *)(*v320 + 4 * v252) = 0;
          if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v253 = HIBYTE(v337.__r_.__value_.__r.__words[2]);
          else
            v253 = v337.__r_.__value_.__l.__size_;
          if (v253)
          {
            std::to_string(&v345, *(float *)(v247 + 76));
            v254 = std::string::insert(&v345, 0, " ");
            v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
            v346.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v255;
            v254->__r_.__value_.__l.__size_ = 0;
            v254->__r_.__value_.__r.__words[2] = 0;
            v254->__r_.__value_.__r.__words[0] = 0;
          }
          else
          {
            std::to_string(&v346, *(float *)(v247 + 76));
          }
          if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v256 = &v346;
          else
            v256 = (std::string *)v346.__r_.__value_.__r.__words[0];
          if ((v346.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v257 = HIBYTE(v346.__r_.__value_.__r.__words[2]);
          else
            v257 = v346.__r_.__value_.__l.__size_;
          std::string::append(&v337, (const std::string::value_type *)v256, v257);
          if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v346.__r_.__value_.__l.__data_);
            if (!v253)
            {
LABEL_452:
              v225 = *(_QWORD *)(v207 + 8);
              goto LABEL_453;
            }
          }
          else if (!v253)
          {
            goto LABEL_452;
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v345.__r_.__value_.__l.__data_);
          goto LABEL_452;
        }
LABEL_453:
        v226 += 104;
      }
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v258 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v260 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v260 = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v346.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v346.__r_.__value_.__r.__words + 4) = (std::string::size_type)v260;
      _os_log_impl(&dword_1DE3F6000, v258, OS_LOG_TYPE_INFO, "Neural phone feature pitch: %s", (uint8_t *)&v346, 0xCu);
    }
    v261 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v261 = (std::string *)__p.__r_.__value_.__r.__words[0];
    Diagnostics::log(6, "Neural phone feature pitch: %s", v259, v261);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v262 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v346.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v346.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1DE3F6000, v262, OS_LOG_TYPE_INFO, "Neural phone feature duration: %s", (uint8_t *)&v346, 0xCu);
    }
    v265 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v265 = (std::string *)buf.__r_.__value_.__r.__words[0];
    Diagnostics::log(6, "Neural phone feature duration: %s", v263, v265);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v266 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v268 = &v337;
      if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v268 = (std::string *)v337.__r_.__value_.__r.__words[0];
      LODWORD(v346.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v346.__r_.__value_.__r.__words + 4) = (std::string::size_type)v268;
      _os_log_impl(&dword_1DE3F6000, v266, OS_LOG_TYPE_INFO, "Neural phone feature energy: %s", (uint8_t *)&v346, 0xCu);
    }
    v269 = &v337;
    if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v269 = (std::string *)v337.__r_.__value_.__r.__words[0];
    Diagnostics::log(6, "Neural phone feature energy: %s", v267, v269);
    if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v337.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v270 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      v272 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v334 + 16) - *(_QWORD *)(v334 + 8)) >> 3);
      v273 = (uint64_t)(*(_QWORD *)(v334 + 136) - *(_QWORD *)(v334 + 128)) >> 2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v272;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v273;
      _os_log_impl(&dword_1DE3F6000, v270, OS_LOG_TYPE_DEFAULT, "WARN: phonewise pitch scale, speech duration, and speech energy don't match feature wise length, skip overriding, phone_size=%ld, feature_size=%ld", (uint8_t *)&__p, 0x16u);
    }
    Diagnostics::log(5, "WARN: phonewise pitch scale, speech duration, and speech energy don't match feature wise length, skip overriding, phone_size=%ld, feature_size=%ld", v271, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v334 + 16) - *(_QWORD *)(v334 + 8)) >> 3), (uint64_t)(*(_QWORD *)(v334 + 136) - *(_QWORD *)(v334 + 128)) >> 2);
  }
  v275 = *(_QWORD *)(v207 + 32);
  v274 = *(_QWORD *)(v207 + 40);
  v276 = *((_DWORD *)this + 86);
  v277 = operator new(0x14uLL);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v277 + 5);
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v277 + 5);
  *(_OWORD *)v277 = *(_OWORD *)((char *)this + 328);
  v277[4] = v276;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
  std::vector<std::vector<float>>::vector(&__p, (v274 - v275) >> 2, (uint64_t)&buf);
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(v207 + 352));
  *(std::string *)(v207 + 352) = __p;
  memset(&__p, 0, sizeof(__p));
  v337.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v337);
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v207 + 376), (const std::string *)this + 34);
  if (*((_QWORD *)&v207 + 1))
  {
    v278 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v207 + 1) + 16))(*((_QWORD *)&v207 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v207 + 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,int>((uint64_t)&buf, *(int **)(v334 + 32), *(int **)(v334 + 40), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,int>((uint64_t)&v337, *(int **)(v334 + 320), *(int **)(v334 + 328), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "female");
  std::string::basic_string[abi:ne180100]<0>(v340, "F");
  std::string::basic_string[abi:ne180100]<0>(v341, "male");
  std::string::basic_string[abi:ne180100]<0>(v342, "M");
  std::string::basic_string[abi:ne180100]<0>(v343, "narrator");
  std::string::basic_string[abi:ne180100]<0>(v344, "N");
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v346, (const void **)&__p.__r_.__value_.__l.__data_, 3);
  for (ii = 0; ii != -18; ii -= 6)
  {
    v281 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + ii * 8);
    if (SHIBYTE(v344[ii + 2]) < 0)
      operator delete(v281[15]);
    if (*((char *)v281 + 119) < 0)
      operator delete(v281[12]);
  }
  v328 = 0;
  v329 = 0;
  v330 = 0;
  v282 = *((_QWORD *)this + 113);
  if (*((_QWORD *)this + 114) != v282)
  {
    v283 = 0;
    v284 = 0;
    do
    {
      __p.__r_.__value_.__r.__words[0] = v282 + v283;
      v285 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v346, (const void **)(v282 + v283), (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v286 = (__int128 *)(v285 + 7);
      v287 = v329;
      if ((unint64_t)v329 >= v330)
      {
        v289 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v328, v286);
      }
      else
      {
        if (*((char *)v285 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v329, (const std::string::value_type *)v285[7], v285[8]);
        }
        else
        {
          v288 = *v286;
          v329->__r_.__value_.__r.__words[2] = v285[9];
          *(_OWORD *)&v287->__r_.__value_.__l.__data_ = v288;
        }
        v289 = v287 + 1;
      }
      v329 = v289;
      ++v284;
      v282 = *((_QWORD *)this + 113);
      v283 += 24;
    }
    while (v284 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 114) - v282) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  UTFString::join<std::string,std::string>((uint64_t)v326, v328, (uint64_t)v329, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v290 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    Censor::global_plaintext(&__p, (uint64_t)&buf);
    v291 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v338) = 136315138;
    *(_QWORD *)((char *)&v338 + 4) = v291;
    _os_log_impl(&dword_1DE3F6000, v290, OS_LOG_TYPE_DEFAULT, "Neural phone embeddings: %s ", (uint8_t *)&v338, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)&buf);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v293 = &__p;
  else
    v293 = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Neural phone embeddings: %s ", v292, v293);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v294 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)&v337);
    v295 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v338) = 136315138;
    *(_QWORD *)((char *)&v338 + 4) = v295;
    _os_log_impl(&dword_1DE3F6000, v294, OS_LOG_TYPE_INFO, "Language embeddings: %s", (uint8_t *)&v338, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)&v337);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v297 = &__p;
  else
    v297 = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Language embeddings: %s", v296, v297);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v298 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__p, (uint64_t)v326);
    v299 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v338) = 136315138;
    *(_QWORD *)((char *)&v338 + 4) = v299;
    _os_log_impl(&dword_1DE3F6000, v298, OS_LOG_TYPE_INFO, "Dialog vector: %s", (uint8_t *)&v338, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__p, (uint64_t)v326);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v301 = &__p;
  else
    v301 = (std::string *)__p.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Dialog vector: %s", v300, v301);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__p, *((_QWORD *)this + 21));
  if (__p.__r_.__value_.__r.__words[0])
    Observable::emit((uint64_t **)__p.__r_.__value_.__l.__data_, "tts.feature.neural.phonemes", (char *)this + 856);
  v302 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v302 + 8) = 0u;
  v303 = (unint64_t *)(v302 + 8);
  *((_OWORD *)v302 + 2) = 0u;
  *(_QWORD *)v302 = &off_1EA932198;
  *((_QWORD *)v302 + 3) = v302 + 32;
  *(_QWORD *)&v338 = v302 + 24;
  *((_QWORD *)&v338 + 1) = v302;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v302 + 24), &v334);
  Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v302 + 24), (uint64_t *)this + 105);
  v324 = v302 + 24;
  v325 = (std::__shared_weak_count *)v302;
  do
    v304 = __ldxr(v303);
  while (__stxr(v304 + 1, v303));
  (*(void (**)(NeuralAdapterModule *, char **))(*(_QWORD *)this + 72))(this, &v324);
  v305 = v325;
  if (v325)
  {
    v306 = (unint64_t *)&v325->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  v308 = (std::__shared_weak_count *)*((_QWORD *)&v338 + 1);
  if (*((_QWORD *)&v338 + 1))
  {
    v309 = (unint64_t *)(*((_QWORD *)&v338 + 1) + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v312 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  if (v327 < 0)
    operator delete(v326[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v346, (_QWORD *)v346.__r_.__value_.__l.__size_);
  if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v337.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v314 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
  if (*((_QWORD *)&v334 + 1))
  {
    v315 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
      std::__shared_weak_count::__release_weak(v314);
    }
  }
}

void sub_1DEA1C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)(v53 - 136) = v52;
  if (a52 < 0)
    operator delete(__p);
  a41 = (void *)(v53 - 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void UTFString::join<std::string,int>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  std::string __p;
  void *v8[2];
  uint64_t v9;

  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>(a1, a2, a3, (uint64_t)v8, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
}

void sub_1DEA1CD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1DEA1CE2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void NeuralAdapterModule::find_last_char(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  const uint8_t *v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  char v13;
  std::string *p_p;
  std::string __p;
  const uint8_t *v16;
  unint64_t v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_BYTE *)(a2 + 23);
  if (v3 >= 0)
    v4 = (const uint8_t *)a2;
  else
    v4 = *(const uint8_t **)a2;
  if (v3 >= 0)
    LODWORD(v5) = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v16 = v4;
  v17 = v5 | ((unint64_t)v5 << 32);
  if (!(_DWORD)v5)
    return;
  v8 = (int)v5 - 1;
  LODWORD(v17) = v5 - 1;
  if ((char)v4[v8] <= -65)
  {
    LODWORD(v8) = utf8_back1SafeBody(v4, 0, v8);
    LODWORD(v17) = v8;
  }
  v9 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v16);
  UTFString::push_back_codepoint<std::string>((std::string *)a1, v9);
  if (!(_DWORD)v8 || a3 == 0)
    return;
  memset(&__p, 0, sizeof(__p));
  v11 = (int)v8 - 1;
  LODWORD(v17) = v8 - 1;
  if ((char)v4[v11] <= -65)
    LODWORD(v17) = utf8_back1SafeBody(v4, 0, v11);
  v12 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v16);
  UTFString::push_back_codepoint<std::string>(&__p, v12);
  v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 1)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_21:
      if (p_p->__r_.__value_.__s.__data_[0] == 32)
        goto LABEL_24;
    }
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
  {
    p_p = &__p;
    goto LABEL_21;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
LABEL_24:
    if ((v13 & 0x80) == 0)
      return;
    goto LABEL_25;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DEA1CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, __int128 *a2, __int128 *a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, std::string::value_type a8, float a9, float a10)
{
  __int128 v19;
  std::string *v20;
  __int128 v21;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
  }
  v20 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v21 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = a8;
  this[2].__r_.__value_.__s.__data_[13] = a6;
  this[2].__r_.__value_.__s.__data_[14] = a7;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a9;
  *((float *)&this[2].__r_.__value_.__r.__words[2] + 1) = a10;
  this[3].__r_.__value_.__r.__words[0] = 0x80000000000000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_1DEA1D0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::~TacotronPhoneFeature(void **this)
{
  void **v2;

  v2 = this + 10;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t NeuralAdapterModule::save_break(NeuralAdapterModule *this, int a2, int a3, int a4)
{
  unsigned __int8 v4;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 126);
  v7 = v6;
  if (v6 != *((char **)this + 127))
  {
    v7 = (char *)*((_QWORD *)this + 127);
    do
    {
      v8 = *(v7 - 8);
      if (v8 == 44)
      {
        if (a2 == 35)
          goto LABEL_10;
      }
      else if (v8 == 46 && a2 != 46)
      {
        goto LABEL_10;
      }
      v7 -= 32;
      *((_QWORD *)this + 127) = v7;
    }
    while (v7 != v6);
    v7 = v6;
  }
LABEL_10:
  if (*((char *)this + 975) < 0)
    v9 = *((_QWORD *)this + 120);
  else
    v9 = *((unsigned __int8 *)this + 975);
  v10 = a3 - a4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 108) - *((_QWORD *)this + 107)) >> 3);
  v12 = v9 - 1;
  v13 = *((_QWORD *)this + 128);
  if ((unint64_t)v7 >= v13)
  {
    v15 = (v7 - v6) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v6;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(32 * v18);
    v20 = &v19[32 * v15];
    *(_QWORD *)v20 = v10;
    *((_QWORD *)v20 + 1) = v11;
    *((_QWORD *)v20 + 2) = v12;
    v20[24] = v4;
    v14 = v20 + 32;
    if (v7 == v6)
    {
      v22 = &v19[32 * v15];
    }
    else
    {
      do
      {
        v21 = *((_OWORD *)v7 - 2);
        v22 = v20 - 32;
        *(_OWORD *)(v20 - 23) = *(_OWORD *)(v7 - 23);
        *((_OWORD *)v20 - 2) = v21;
        v7 -= 32;
        v20 -= 32;
      }
      while (v7 != v6);
    }
    *((_QWORD *)this + 126) = v22;
    *((_QWORD *)this + 127) = v14;
    *((_QWORD *)this + 128) = &v19[32 * v18];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v7 = v10;
    *((_QWORD *)v7 + 1) = v11;
    *((_QWORD *)v7 + 2) = v12;
    v7[24] = a2;
    v14 = v7 + 32;
  }
  *((_QWORD *)this + 127) = v14;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v25 = *((_QWORD *)this + 127);
    v27 = *(_QWORD *)(v25 - 32);
    v26 = *(_QWORD *)(v25 - 24);
    *(_DWORD *)buf = 67109632;
    v30 = v4;
    v31 = 2048;
    v32 = v27 + 1;
    v33 = 2048;
    v34 = v26;
    _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_INFO, "Potential break [%c] %zu words %zu phones", buf, 0x1Cu);
  }
  return Diagnostics::log(6, "Potential break [%c] %zu words %zu phones", v24, v4, *(_QWORD *)(*((_QWORD *)this + 127) - 32) + 1, *(_QWORD *)(*((_QWORD *)this + 127) - 24));
}

void std::vector<MarkerRecord>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MarkerRecord*>,std::__wrap_iter<MarkerRecord*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  std::string *v29;
  const std::string::value_type **v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  _QWORD v34[2];
  char *v35;
  char *v36;
  uint64_t v37;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = a2;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v21 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v22 = a3 + 56 * a5;
      }
      else
      {
        v22 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MarkerRecord>,MarkerRecord*,MarkerRecord*,MarkerRecord*>(v9, v22, a4, *(_QWORD *)(v9 - 8));
        if (v21 < 1)
          return;
      }
      std::vector<MarkerRecord>::__move_range((uint64_t)a1, v7, v12, v7 + 56 * a5);
      for (; v6 != v22; v7 += 56)
      {
        *(_QWORD *)v7 = *(_QWORD *)v6;
        std::string::operator=((std::string *)(v7 + 8), (const std::string *)(v6 + 8));
        v23 = *(_WORD *)(v6 + 48);
        *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
        *(_WORD *)(v7 + 48) = v23;
        v6 += 56;
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v37 = v9;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v18);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v24 = 0;
      v25 = &v19[56 * v15];
      v34[0] = v19;
      v34[1] = v25;
      v35 = v25;
      v36 = &v19[56 * v20];
      v26 = 56 * a5;
      v27 = &v25[56 * a5];
      do
      {
        v28 = v6 + v24;
        *(_QWORD *)&v25[v24] = *(_QWORD *)(v6 + v24);
        v29 = (std::string *)&v25[v24 + 8];
        v30 = (const std::string::value_type **)(v6 + v24 + 8);
        if (*(char *)(v6 + v24 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v29, *v30, *(_QWORD *)(v28 + 16));
        }
        else
        {
          v31 = *(_OWORD *)v30;
          *(_QWORD *)&v25[v24 + 24] = *(_QWORD *)(v6 + v24 + 24);
          *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
        }
        v32 = &v25[v24];
        v33 = *(_OWORD *)(v28 + 32);
        *((_WORD *)v32 + 24) = *(_WORD *)(v28 + 48);
        *((_OWORD *)v32 + 2) = v33;
        v24 += 56;
      }
      while (v26 != v24);
      v35 = v27;
      std::vector<MarkerRecord>::__swap_out_circular_buffer(a1, v34, v7);
      std::__split_buffer<MarkerRecord>::~__split_buffer((uint64_t)v34);
    }
  }
}

void sub_1DEA1D618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1DEA1D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v5;
  unint64_t v6;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  unint64_t v9;
  std::vector<std::string>::size_type v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  size_t v15;
  std::string *v16;
  size_t v17;
  std::__split_buffer<std::string> __v;

  begin = this->__begin_;
  end = this->__end_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= __sz)
        v10 = __sz;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
      v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_1DEA1D844(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

__n128 std::vector<MarkerRecord>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = a2 + v4 - a4;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)v6;
      v8 = *(_OWORD *)(v6 + 8);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v6 + 24);
      *(_OWORD *)(v7 + 8) = v8;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 8) = 0;
      result = *(__n128 *)(v6 + 32);
      *(_WORD *)(v7 + 48) = *(_WORD *)(v6 + 48);
      *(__n128 *)(v7 + 32) = result;
      v7 += 56;
      v6 += 56;
    }
    while (v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v10 = 0;
    v11 = -8 * ((v4 - a4) >> 3);
    do
    {
      v12 = v5 + v10;
      v13 = v4 + v10;
      *(_QWORD *)(v4 + v10 - 56) = *(_QWORD *)(v5 + v10 - 56);
      v14 = (void **)(v4 + v10 - 48);
      if (*(char *)(v4 + v10 - 25) < 0)
        operator delete(*v14);
      v15 = *(_OWORD *)(v12 - 48);
      *(_QWORD *)(v4 + v10 - 32) = *(_QWORD *)(v12 - 32);
      *(_OWORD *)v14 = v15;
      *(_BYTE *)(v12 - 25) = 0;
      *(_BYTE *)(v12 - 48) = 0;
      result = *(__n128 *)(v12 - 24);
      *(_WORD *)(v13 - 8) = *(_WORD *)(v12 - 8);
      *(__n128 *)(v13 - 24) = result;
      v10 -= 56;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t std::vector<MarkerRecord>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3;
  v6 = a2[1];
  v7 = a1 + 2;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MarkerRecord>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>,std::reverse_iterator<MarkerRecord*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  v9 = a1[1];
  v10 = a2[2];
  v19 = v10;
  v20 = v10;
  v17[0] = v7;
  v17[1] = &v19;
  v17[2] = &v20;
  if (v9 != v3)
  {
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v3;
      v11 = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(v10 + 8) = v11;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v12 = *(_OWORD *)(v3 + 32);
      *(_WORD *)(v10 + 48) = *(_WORD *)(v3 + 48);
      *(_OWORD *)(v10 + 32) = v12;
      v10 += 56;
      v3 += 56;
    }
    while (v3 != v9);
    v20 = v10;
  }
  v18 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MarkerRecord>,MarkerRecord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v17);
  a2[2] = v10;
  v13 = *a1;
  *a1 = a2[1];
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

void NeuralAdapterModule::process_bookmark(uint64_t a1, uint64_t a2)
{
  const std::string *v3;
  std::string::size_type v4;
  _BOOL4 v6;
  std::string::size_type v8;
  void **v9;
  std::string::size_type v10;
  _BOOL4 v12;
  std::string::size_type v14;
  float v15;
  std::string::size_type v16;
  _BOOL4 v18;
  std::string::size_type v19;
  float v20;
  std::string::size_type v22;
  float v23;
  std::string::size_type v24;
  _BOOL4 v26;
  float v27;
  std::string::size_type v29;
  float v30;
  std::string::size_type v31;
  _BOOL4 v33;
  float v34;
  std::string::size_type v36;
  float v37;
  std::string::size_type v38;
  _BOOL4 v40;
  float v41;
  std::string::size_type v43;
  float v44;
  std::string::size_type v45;
  _BOOL4 v46;
  std::string::size_type v47;
  std::string *v48;
  void *v49;
  float v50;
  void *__p;
  std::string::size_type v52;
  unsigned __int8 v53;
  std::string v54;
  char v55;

  v3 = (const std::string *)(a2 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog=");
  if ((v53 & 0x80u) == 0)
    v4 = v53;
  else
    v4 = v52;
  std::string::basic_string(&v54, v3, 0, v4, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = v54.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v54.__r_.__value_.__l.__data_ == 1818323300
      && *(_DWORD *)(v54.__r_.__value_.__r.__words[0] + 3) == 1030188908;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 7
      && LODWORD(v54.__r_.__value_.__l.__data_) == 1818323300
      && *(_DWORD *)((char *)v54.__r_.__value_.__r.__words + 3) == 1030188908;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v6)
      goto LABEL_24;
  }
  else if (v6)
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(&__p, "dialog=");
    if ((v53 & 0x80u) == 0)
      v8 = v53;
    else
      v8 = v52;
    std::string::basic_string(&v54, v3, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    v9 = (void **)(a1 + 304);
    if (*(char *)(a1 + 327) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 320) = *((_QWORD *)&v54.__r_.__value_.__l + 2);
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 0;
    v54.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_199;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitch=");
  if ((v53 & 0x80u) == 0)
    v10 = v53;
  else
    v10 = v52;
  std::string::basic_string(&v54, v3, 0, v10, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = v54.__r_.__value_.__l.__size_ == 10
       && *(_QWORD *)v54.__r_.__value_.__l.__data_ == 0x63746970746E6573
       && *(_WORD *)(v54.__r_.__value_.__r.__words[0] + 8) == 15720;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 10
       && v54.__r_.__value_.__r.__words[0] == 0x63746970746E6573
       && LOWORD(v54.__r_.__value_.__r.__words[1]) == 15720;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v12)
      goto LABEL_54;
  }
  else if (v12)
  {
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitch=");
    if ((v53 & 0x80u) == 0)
      v14 = v53;
    else
      v14 = v52;
    std::string::basic_string(&v54, v3, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v15 = atof((const char *)&v54);
      *(float *)(a1 + 328) = v15;
      goto LABEL_199;
    }
    v19 = v54.__r_.__value_.__r.__words[0];
    v20 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 328) = v20;
LABEL_197:
    v49 = (void *)v19;
LABEL_198:
    operator delete(v49);
LABEL_199:
    if ((char)v53 < 0)
      operator delete(__p);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitchrange=");
  if ((v53 & 0x80u) == 0)
    v16 = v53;
  else
    v16 = v52;
  std::string::basic_string(&v54, v3, 0, v16, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = v54.__r_.__value_.__l.__size_ == 15
       && *(_QWORD *)v54.__r_.__value_.__l.__data_ == 0x63746970746E6573
       && *(_QWORD *)(v54.__r_.__value_.__r.__words[0] + 7) == 0x3D65676E61726863;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 15
       && v54.__r_.__value_.__r.__words[0] == 0x63746970746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) == 0x3D65676E61726863;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v18)
      goto LABEL_84;
  }
  else if (v18)
  {
LABEL_84:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentpitchrange=");
    if ((v53 & 0x80u) == 0)
      v22 = v53;
    else
      v22 = v52;
    std::string::basic_string(&v54, v3, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v23 = atof((const char *)&v54);
      *(float *)(a1 + 332) = v23;
      goto LABEL_199;
    }
    v19 = v54.__r_.__value_.__r.__words[0];
    v27 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 332) = v27;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentduration=");
  if ((v53 & 0x80u) == 0)
    v24 = v53;
  else
    v24 = v52;
  std::string::basic_string(&v54, v3, 0, v24, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v26 = v54.__r_.__value_.__l.__size_ == 13
       && *(_QWORD *)v54.__r_.__value_.__l.__data_ == 0x61727564746E6573
       && *(_QWORD *)(v54.__r_.__value_.__r.__words[0] + 5) == 0x3D6E6F6974617275;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 13
       && v54.__r_.__value_.__r.__words[0] == 0x61727564746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 5) == 0x3D6E6F6974617275;
  }
  if ((char)v53 < 0)
  {
    operator delete(__p);
    if (v26)
      goto LABEL_114;
  }
  else if (v26)
  {
LABEL_114:
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentduration=");
    if ((v53 & 0x80u) == 0)
      v29 = v53;
    else
      v29 = v52;
    std::string::basic_string(&v54, v3, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v30 = atof((const char *)&v54);
      *(float *)(a1 + 336) = v30;
      goto LABEL_199;
    }
    v19 = v54.__r_.__value_.__r.__words[0];
    v34 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 336) = v34;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentenergy=");
  if ((v53 & 0x80u) == 0)
    v31 = v53;
  else
    v31 = v52;
  std::string::basic_string(&v54, v3, 0, v31, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = v54.__r_.__value_.__l.__size_ == 11
       && *(_QWORD *)v54.__r_.__value_.__l.__data_ == 0x72656E65746E6573
       && *(_QWORD *)(v54.__r_.__value_.__r.__words[0] + 3) == 0x3D796772656E6574;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v33 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 11
       && v54.__r_.__value_.__r.__words[0] == 0x72656E65746E6573
       && *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 3) == 0x3D796772656E6574;
  }
  if ((char)v53 < 0)
    operator delete(__p);
  if (v33)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentenergy=");
    if ((v53 & 0x80u) == 0)
      v36 = v53;
    else
      v36 = v52;
    std::string::basic_string(&v54, v3, v36, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v37 = atof((const char *)&v54);
      *(float *)(a1 + 340) = v37;
      goto LABEL_199;
    }
    v19 = v54.__r_.__value_.__r.__words[0];
    v41 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 340) = v41;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "senttilt=");
  if ((v53 & 0x80u) == 0)
    v38 = v53;
  else
    v38 = v52;
  std::string::basic_string(&v54, v3, 0, v38, (std::allocator<char> *)&v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    v40 = v54.__r_.__value_.__l.__size_ == 9
       && *(_QWORD *)v54.__r_.__value_.__l.__data_ == 0x746C6974746E6573
       && *(_BYTE *)(v54.__r_.__value_.__r.__words[0] + 8) == 61;
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  else
  {
    v40 = SHIBYTE(v54.__r_.__value_.__r.__words[2]) == 9
       && v54.__r_.__value_.__r.__words[0] == 0x746C6974746E6573
       && v54.__r_.__value_.__s.__data_[8] == 61;
  }
  if ((char)v53 < 0)
    operator delete(__p);
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "senttilt=");
    if ((v53 & 0x80u) == 0)
      v43 = v53;
    else
      v43 = v52;
    std::string::basic_string(&v54, v3, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v44 = atof((const char *)&v54);
      *(float *)(a1 + 344) = v44;
      goto LABEL_199;
    }
    v19 = v54.__r_.__value_.__r.__words[0];
    v50 = atof(v54.__r_.__value_.__l.__data_);
    *(float *)(a1 + 344) = v50;
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sentstyle=");
  if ((v53 & 0x80u) == 0)
    v45 = v53;
  else
    v45 = v52;
  std::string::basic_string(&v54, v3, 0, v45, (std::allocator<char> *)&v55);
  v46 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "sentstyle=");
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(__p);
  if (v46)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sentstyle=");
    if ((v53 & 0x80u) == 0)
      v47 = v53;
    else
      v47 = v52;
    std::string::basic_string(&v54, v3, v47, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v54;
    else
      v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    MEMORY[0x1DF0ECA80](a1 + 816, v48);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_199;
    v49 = (void *)v54.__r_.__value_.__r.__words[0];
    goto LABEL_198;
  }
}

void sub_1DEA1E35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void TacotronPhoneFeature::TacotronPhoneFeature(std::string *this, __int128 *a2, __int128 *a3, int a4, int a5, int a6, float a7, float a8)
{
  __int128 v15;
  std::string *v16;
  __int128 v17;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v15;
  }
  v16 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  HIDWORD(this[2].__r_.__value_.__r.__words[0]) = a5;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  WORD2(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[14] = 1;
  *(float *)&this[2].__r_.__value_.__r.__words[2] = a7;
  *((float *)&this[2].__r_.__value_.__r.__words[2] + 1) = a8;
  *(float *)&this[3].__r_.__value_.__l.__data_ = (float)a6;
  HIDWORD(this[3].__r_.__value_.__r.__words[0]) = 0x800000;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_1DEA1E498(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(_QWORD *a1, unsigned __int8 *a2, const void **a3, const void ***a4)
{
  int v7;
  const void ***v8;
  const void **v9;
  const void **v10;
  uint64_t **v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  const void **v15;
  const void ***v16;
  BOOL v17;
  unsigned __int8 *v18;
  nlohmann::detail::exception *exception;
  unint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::string::size_type v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const void **v32;

  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v20 = *a2;
    if (v20 > 9)
      v21 = "number";
    else
      v21 = off_1EA94C758[v20];
    std::string::basic_string[abi:ne180100]<0>(&v24, v21);
    v22 = std::string::insert(&v24, 0, "cannot use value() with ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v28 = v22->__r_.__value_.__r.__words[2];
    v27 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v27, exception);
  }
  *(_QWORD *)&v27 = a2;
  v28 = 0;
  v29 = 0;
  v30 = 0x8000000000000000;
  *((_QWORD *)&v27 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), a3);
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = (unint64_t)a2;
  v24.__r_.__value_.__r.__words[2] = 0;
  v25 = 0;
  v26 = 0x8000000000000000;
  v7 = *a2;
  if (v7 == 2)
  {
    v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v7 == 1)
  {
    v24.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v26 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v27, (unsigned __int8 **)&v24))
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = a1 + 1;
    v10 = *a4;
    v8 = a4 + 1;
    v9 = v10;
    if (v10 != (const void **)v8)
    {
      do
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a1 + 1, &v32, &v31, v9 + 4);
        if (!*v11)
        {
          v12 = (char *)operator new(0x40uLL);
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 1);
          v24.__r_.__value_.__s.__data_[16] = 0;
          v13 = (std::string *)(v12 + 32);
          if (*((char *)v9 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v9[4], (std::string::size_type)v9[5]);
          }
          else
          {
            v14 = *((_OWORD *)v9 + 2);
            *((_QWORD *)v12 + 6) = v9[6];
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
          }
          *((_DWORD *)v12 + 14) = *((_DWORD *)v9 + 14);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v32, v11, (uint64_t *)v12);
        }
        v15 = (const void **)v9[1];
        if (v15)
        {
          do
          {
            v16 = (const void ***)v15;
            v15 = (const void **)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (const void ***)v9[2];
            v17 = *v16 == v9;
            v9 = (const void **)v16;
          }
          while (!v17);
        }
        v9 = (const void **)v16;
      }
      while (v16 != v8);
    }
  }
  else
  {
    v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)a1, v18);
  }
}

void sub_1DEA1E8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  char **v23;
  uint64_t v24;
  void **v25;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v24, v25);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*v23);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v12 = result;
    v13 = v8;
    v14 = v8;
    if (v8)
    {
      v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        do
        {
          v9 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v5, &v15, (const void **)&a2->__r_.__value_.__l.__data_);
          if (*v9)
          {
            v8 = v14;
          }
          else
          {
            v10 = v9;
            std::string::operator=((std::string *)(v8 + 4), a2);
            std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v15, v10, v8);
            v8 = v13;
            v14 = v13;
            if (!v13)
            {
              ++a2;
              break;
            }
            v13 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v13);
          }
          ++a2;
          if (v8)
            v11 = a2 == a3;
          else
            v11 = 1;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v12);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_1DEA1EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t NeuralAdapterModule::NeuralAdapterModule(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned __int8 *v23;
  std::string::size_type size;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  unsigned __int8 *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  unint64_t i;
  std::string::size_type v34;
  std::string::size_type v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  float v44;
  float v45;
  uint64_t k;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t m;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  int v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  std::string::size_type v58;
  __int128 **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  std::string::size_type *v64;
  uint64_t **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  void *v72;
  void *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string::size_type v76;
  char v77;
  void **v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  void *v82;
  NSObject *v83;
  const char *v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  nlohmann::detail::exception *exception;
  unint64_t v94;
  char *v95;
  nlohmann::detail::exception *v96;
  unint64_t v97;
  char *v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  void **v110;
  void **v111;
  void **v112;
  void **v113;
  void **v114;
  void **v115;
  uint64_t **v116;
  uint64_t **v117;
  uint64_t v118[2];
  __int128 v119;
  uint64_t v120;
  unsigned __int8 v121[8];
  uint64_t *v122;
  void *v123;
  uint64_t *v124;
  uint64_t v125;
  std::string v126;
  std::string v127[2];
  void *v128;
  char v129;
  void *v130;
  char v131;
  std::string v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  const void **v135;
  void *v136;
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  std::string __p;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  uint64_t *v148;
  char *v149;
  uint64_t **v150;
  std::string v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  _QWORD v155[3];
  std::string v156[14];
  _QWORD v157[23];

  v157[20] = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)a3[1];
  v118[0] = *a3;
  v118[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, (char *)a2, v118);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1EA91F708;
  v11 = a1 + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 296) = _D0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 304), "narrator");
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  v111 = (void **)(a1 + 376);
  v114 = (void **)(a1 + 400);
  v115 = (void **)(a1 + 352);
  *(_OWORD *)(a1 + 328) = 0u;
  v17 = a1 + 432;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v108 = (uint64_t *)(a1 + 448);
  v109 = (uint64_t *)(a1 + 424);
  *(_OWORD *)(a1 + 456) = 0u;
  v18 = a1 + 456;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  v107 = (uint64_t *)(a1 + 472);
  v19 = a1 + 480;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  v20 = (uint64_t *)(a1 + 512);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  v116 = (uint64_t **)(a1 + 536);
  v117 = (uint64_t **)(a1 + 504);
  *(_OWORD *)(a1 + 544) = 0u;
  v104 = (uint64_t *)(a1 + 544);
  *(_QWORD *)(a1 + 536) = a1 + 544;
  v112 = (void **)(a1 + 592);
  v113 = (void **)(a1 + 568);
  v110 = (void **)(a1 + 616);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 648) = a1 + 656;
  *(_OWORD *)(a1 + 680) = 0u;
  v103 = a1 + 680;
  *(_QWORD *)(a1 + 672) = a1 + 680;
  *(_QWORD *)(a1 + 696) = a1 + 704;
  *(_OWORD *)(a1 + 744) = 0u;
  v21 = a1 + 744;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = a1 + 744;
  *(_DWORD *)(a1 + 760) = -1;
  *(_QWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  v22 = operator new(0x90uLL);
  v106 = (char *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = v22;
  *(_QWORD *)(a1 + 784) = v22 + 9;
  v22[6] = xmmword_1DED00004;
  v22[7] = unk_1DED00014;
  v22[8] = xmmword_1DED00024;
  v22[2] = xmmword_1DECFFFC4;
  v22[3] = unk_1DECFFFD4;
  v22[4] = xmmword_1DECFFFE4;
  v22[5] = unk_1DECFFFF4;
  *v22 = xmmword_1DECFFFA4;
  v22[1] = *(_OWORD *)algn_1DECFFFB4;
  *(_QWORD *)(a1 + 776) = v22 + 9;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  v105 = a1 + 800;
  *(_QWORD *)(a1 + 792) = a1 + 800;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_QWORD *)(a1 + 992) = 0;
  v23 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phone_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,int>,std::map<std::string,int>,0>((char ***)&v151, v23);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 280));
  size = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 272) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 280) = size;
  v25 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v25)
  {
    *(_QWORD *)(size + 16) = v11;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v11;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)size);
  std::string::basic_string[abi:ne180100]<0>(&__p, "language_map");
  *(_OWORD *)&v127[0].__r_.__value_.__r.__words[1] = 0uLL;
  v127[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v127[0].__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v151, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v127);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 744));
  v26 = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 736) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 744) = v26;
  v27 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 752) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = v21;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    v26 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 736) = v21;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v26);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v127[0].__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "punctuation");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)&v151, v28);
  std::__tree<std::string>::destroy((uint64_t)v109, *(char **)(a1 + 432));
  v29 = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 424) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 432) = v29;
  v30 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 440) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v30)
  {
    *(_QWORD *)(v29 + 16) = v17;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    v29 = 0;
  }
  else
  {
    *v109 = v17;
  }
  std::__tree<std::string>::destroy((uint64_t)&v151, (char *)v29);
  std::string::basic_string[abi:ne180100]<0>(v127, "sentence_punctuation");
  std::string::basic_string[abi:ne180100]<0>(&v151, ".");
  std::string::basic_string[abi:ne180100]<0>(&v152, "?");
  std::string::basic_string[abi:ne180100]<0>(v155, "!");
  std::string::basic_string[abi:ne180100]<0>(v156, ":");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v148, (const void **)&v151.__r_.__value_.__l.__data_, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&__p, a2, (const void **)&v127[0].__r_.__value_.__l.__data_, (const void ***)&v148);
  std::__tree<std::string>::destroy((uint64_t)v108, *(char **)(a1 + 456));
  v31 = __p.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 448) = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 456) = v31;
  v32 = __p.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 464) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (v32)
  {
    *(_QWORD *)(v31 + 16) = v18;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v31 = 0;
  }
  else
  {
    *v108 = v18;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v31);
  std::__tree<std::string>::destroy((uint64_t)&v148, v149);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 3)
  {
    if (SHIBYTE(v156[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v156[i / 3].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v127, "phrase_punctuation");
  std::string::basic_string[abi:ne180100]<0>(&v151, ",");
  std::string::basic_string[abi:ne180100]<0>(&v152, ";");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v148, (const void **)&v151.__r_.__value_.__l.__data_, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&__p, a2, (const void **)&v127[0].__r_.__value_.__l.__data_, (const void ***)&v148);
  std::__tree<std::string>::destroy((uint64_t)v107, *(char **)(a1 + 480));
  v34 = __p.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 472) = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 480) = v34;
  v35 = __p.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 488) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (v35)
  {
    *(_QWORD *)(v34 + 16) = v19;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v34 = 0;
  }
  else
  {
    *v107 = v19;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v34);
  std::__tree<std::string>::destroy((uint64_t)&v148, v149);
  for (j = 0; j != -48; j -= 24)
  {
    if (*(&v154 + j) < 0)
      operator delete(*(void **)((char *)&v151 + j + 24));
  }
  if (SHIBYTE(v127[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127[0].__r_.__value_.__l.__data_);
  v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "eos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v37, &v151);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*v115);
  *(_OWORD *)v115 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 368) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "word_boundary_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v38, &v151);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v114);
  *(_OWORD *)v114 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 416) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  v39 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "max_word_limit");
  LODWORD(v151.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v39, (int *)&v151);
  *(_DWORD *)(a1 + 560) = v151.__r_.__value_.__l.__data_;
  std::string::basic_string[abi:ne180100]<0>(&v151, "max_phone_limit");
  LODWORD(__p.__r_.__value_.__l.__data_) = 230;
  *(_DWORD *)(a1 + 564) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, (unsigned int *)&__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "end_period");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v40, &v151);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*v113);
  *(_OWORD *)v113 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 584) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "stress_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v151);
  if (*(char *)(a1 + 615) < 0)
    operator delete(*v112);
  *(_OWORD *)v112 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 608) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  *((_BYTE *)&v151.__r_.__value_.__s + 23) = 0;
  v151.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "stress_marker_before");
  __p.__r_.__value_.__s.__data_[0] = 0;
  *(_BYTE *)(a1 + 644) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bos");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v151);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v111);
  *(_OWORD *)v111 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 392) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  *((_BYTE *)&v151.__r_.__value_.__s + 23) = 0;
  v151.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pause_marker");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(",", (char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, &v151);
  if (*(char *)(a1 + 639) < 0)
    operator delete(*v110);
  *(_OWORD *)v110 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 632) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  *((_BYTE *)&v151.__r_.__value_.__s + 23) = 0;
  v151.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SharedObjectPool::get<SynthesizerConfig>(&v151, *(_QWORD *)(a1 + 168));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 720, (__int128 *)&v151);
  v41 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
  if (v151.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v151, "add_trailing_punc");
  __p.__r_.__value_.__s.__data_[0] = 1;
  *(_BYTE *)(a1 + 645) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, (unsigned __int8 *)&__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "pause_version");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  *(_DWORD *)(a1 + 640) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, (unsigned int *)&__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "pause_min_duration");
  __p.__r_.__value_.__r.__words[0] = 0x4051800000000000;
  v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(a2, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&__p);
  *(float *)(a1 + 496) = v44;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "pause_speech_energy");
  __p.__r_.__value_.__r.__words[0] = 0x3FD0000000000000;
  v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<double,0>(a2, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&__p);
  *(float *)(a1 + 500) = v45;
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "?");
  std::string::basic_string[abi:ne180100]<0>(&v152, ".");
  std::string::basic_string[abi:ne180100]<0>(v155, "!");
  std::__tree<std::string>::__assign_unique<std::string const*>(v117, &v151, v156);
  for (k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v155[k + 2]) < 0)
      operator delete((void *)v155[k]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "punctuation_set1");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v151, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v117);
  std::__tree<std::string>::destroy((uint64_t)v117, *(char **)(a1 + 512));
  v47 = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 504) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 512) = v47;
  v48 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 520) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v48)
  {
    *(_QWORD *)(v47 + 16) = v20;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    v47 = 0;
  }
  else
  {
    *v117 = v20;
  }
  std::__tree<std::string>::destroy((uint64_t)&v151, (char *)v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "punctuation_set1_pause_duration");
  LODWORD(__p.__r_.__value_.__l.__data_) = 1120403456;
  *(float *)(a1 + 528) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)&v151.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, ",");
  std::string::basic_string[abi:ne180100]<0>(&v152, ";");
  std::string::basic_string[abi:ne180100]<0>(v155, ":");
  std::__tree<std::string>::__assign_unique<std::string const*>(v116, &v151, v156);
  for (m = 0; m != -9; m -= 3)
  {
    if (SHIBYTE(v155[m + 2]) < 0)
      operator delete((void *)v155[m]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "punctuation_set2");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::set<std::string>,0>((uint64_t)&v151, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v116);
  std::__tree<std::string>::destroy((uint64_t)v116, *(char **)(a1 + 544));
  v50 = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 536) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 544) = v50;
  v51 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 552) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v51)
  {
    *(_QWORD *)(v50 + 16) = v104;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    v50 = 0;
  }
  else
  {
    *v116 = v104;
  }
  std::__tree<std::string>::destroy((uint64_t)&v151, (char *)v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "speaker_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, v127);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "speaker_map");
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v148, a2, (const void **)&v151.__r_.__value_.__l.__data_, (const void ***)&__p);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)__p.__r_.__value_.__l.__size_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v52 = HIBYTE(v127[0].__r_.__value_.__r.__words[2]);
  if ((v127[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = v127[0].__r_.__value_.__l.__size_;
  if (v52
    && &v149 != (char **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)&v148, (const void **)&v127[0].__r_.__value_.__l.__data_))
  {
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
    *(_DWORD *)(a1 + 760) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v148, (const void **)&v127[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v151)+ 14);
  }
  std::string::basic_string[abi:ne180100]<0>(&v132, "neural_style_vector");
  if (*a2 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v94 = *a2;
    if (v94 > 9)
      v95 = "number";
    else
      v95 = off_1EA94C758[v94];
    std::string::basic_string[abi:ne180100]<0>(&__p, v95);
    v99 = std::string::insert(&__p, 0, "cannot use value() with ");
    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v151, exception);
  }
  v151.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v151.__r_.__value_.__r.__words[2] = 0;
  v152 = 0;
  v153 = 0x8000000000000000;
  v151.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), (const void **)&v132.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a2;
  __p.__r_.__value_.__r.__words[2] = 0;
  v141 = 0;
  v142 = 0x8000000000000000;
  v53 = *a2;
  if (v53 == 2)
  {
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v53 == 1)
  {
    __p.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v142 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v151, (unsigned __int8 **)&__p))
  {
    v136 = 0;
    v137 = 0;
    v138 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v136, 0, 0, 0);
  }
  else
  {
    v54 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v136, v54);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (v136 != v137 && v106 != (char *)&v136)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v106, (char *)v136, (uint64_t)v137, (v137 - (_BYTE *)v136) >> 2);
  std::string::basic_string[abi:ne180100]<0>(&v126, "neural_style_map");
  v124 = 0;
  v125 = 0;
  v123 = &v124;
  if (*a2 != 1)
  {
    v96 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v97 = *a2;
    if (v97 > 9)
      v98 = "number";
    else
      v98 = off_1EA94C758[v97];
    std::string::basic_string[abi:ne180100]<0>(&__p, v98);
    v101 = std::string::insert(&__p, 0, "cannot use value() with ");
    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v151, v96);
  }
  v151.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v151.__r_.__value_.__r.__words[2] = 0;
  v152 = 0;
  v153 = 0x8000000000000000;
  v151.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a2 + 1), (const void **)&v126.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a2;
  __p.__r_.__value_.__r.__words[2] = 0;
  v141 = 0;
  v142 = 0x8000000000000000;
  v55 = *a2;
  if (v55 == 2)
  {
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
  }
  else if (v55 == 1)
  {
    __p.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1) + 8;
  }
  else
  {
    v142 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v151, (unsigned __int8 **)&__p))
  {
    std::map<std::string,std::vector<float>>::map[abi:ne180100](&v132, (const void ***)&v123);
  }
  else
  {
    v56 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::vector<float>>,std::map<std::string,std::vector<float>>,0>(&v132, v56);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 800));
  v57 = (_QWORD *)v132.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 792) = v132.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 800) = v57;
  v58 = v132.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 808) = *((_QWORD *)&v132.__r_.__value_.__l + 2);
  if (v58)
  {
    v57[2] = v105;
    v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132.__r_.__value_.__l.__size_;
    *(_OWORD *)&v132.__r_.__value_.__r.__words[1] = 0uLL;
    v57 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 792) = v105;
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v57);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v124);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v149);
  if (SHIBYTE(v127[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127[0].__r_.__value_.__l.__data_);
  v59 = (__int128 **)*a3;
  v60 = (std::__shared_weak_count *)a3[1];
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  SharedObjectPool::get<VoiceConfig>(&v133, v59);
  std::string::basic_string[abi:ne180100]<0>(&v151, "dialog_sv_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, &v132);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v63 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = v132.__r_.__value_.__l.__size_;
  v64 = (std::string::size_type *)MEMORY[0x1E0DE4F40];
  if (v63)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v133 + 40))(&v136, v133, 1684630631, &v132, 0);
    std::ifstream::basic_ifstream(&v151);
    v150 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v151, (uint64_t)&v148, 1, (uint64_t)&v123);
    v65 = v150;
    if (v150 == &v148)
    {
      v66 = 4;
      v65 = &v148;
    }
    else
    {
      if (!v150)
        goto LABEL_147;
      v66 = 5;
    }
    ((void (*)(void))(*v65)[v66])();
LABEL_147:
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)&__p, (unsigned __int8 *)&v123);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v127, (unsigned __int8 *)&v123);
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v127))
    {
      v67 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v126, v67);
      *(_QWORD *)&v119 = nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)&__p);
      v68 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 648), (const void **)v119, (__int128 **)&v119);
      v69 = (void *)v68[7];
      if (v69)
      {
        v68[8] = (uint64_t)v69;
        operator delete(v69);
        v68[7] = 0;
        v68[8] = 0;
        v68[9] = 0;
      }
      *(std::string *)(v68 + 7) = v126;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
      ++v143;
    }
    if (v131 < 0)
      operator delete(v130);
    if (v129 < 0)
      operator delete(v128);
    if (v147 < 0)
      operator delete(v146);
    if (v145 < 0)
      operator delete(v144);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v70 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v72 = &v136;
      if (v138 < 0)
        v72 = v136;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
      _os_log_impl(&dword_1DE3F6000, v70, OS_LOG_TYPE_INFO, "Dialog sv map has been loaded from %s", (uint8_t *)&__p, 0xCu);
    }
    v73 = &v136;
    if (v138 < 0)
      v73 = v136;
    Diagnostics::log(6, "Dialog sv map has been loaded from %s", v71, v73, a1 + 304);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v124, v123);
    v151.__r_.__value_.__r.__words[0] = *v64;
    *(std::string::size_type *)((char *)v151.__r_.__value_.__r.__words
                              + *(_QWORD *)(v151.__r_.__value_.__r.__words[0] - 24)) = v64[3];
    MEMORY[0x1DF0ECB94](&v151.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1DF0ECF6C](v157);
    if (SHIBYTE(v138) < 0)
      operator delete(v136);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog_map");
  *(_OWORD *)&v127[0].__r_.__value_.__r.__words[1] = 0uLL;
  v127[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v127[0].__r_.__value_.__l.__size_;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::map<std::string,int>,0>(&v151, a2, (const void **)&__p.__r_.__value_.__l.__data_, (const void ***)v127);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 680));
  v74 = v151.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 672) = v151.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 680) = v74;
  v75 = v151.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 688) = *((_QWORD *)&v151.__r_.__value_.__l + 2);
  if (v75)
  {
    *(_QWORD *)(v74 + 16) = v103;
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151.__r_.__value_.__l.__size_;
    *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0uLL;
    v74 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 672) = v103;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v74);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)v127[0].__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v151, "dialog_sentence_prosody_bias_map");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v151.__r_.__value_.__l.__data_, &v126);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v76 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  v77 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v76 = v126.__r_.__value_.__l.__size_;
  if (v76)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v133 + 40))(&v123, v133, 1684630631, &v126, 0);
    std::ifstream::basic_ifstream(&v151);
    v139 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v151, (uint64_t)&v136, 1, (uint64_t)v121);
    v78 = v139;
    if (v139 == &v136)
    {
      v79 = 4;
      v78 = &v136;
    }
    else
    {
      if (!v139)
        goto LABEL_185;
      v79 = 5;
    }
    (*((void (**)(void))*v78 + v79))();
LABEL_185:
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)&__p, v121);
    nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)v127, v121);
    while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)v127))
    {
      v80 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(&v119, v80);
      v135 = (const void **)nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)&__p);
      v81 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 696), v135, (__int128 **)&v135);
      v82 = (void *)v81[7];
      if (v82)
      {
        v81[8] = (uint64_t)v82;
        operator delete(v82);
        v81[7] = 0;
        v81[8] = 0;
        v81[9] = 0;
      }
      *(_OWORD *)(v81 + 7) = v119;
      v81[9] = v120;
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__p);
      ++v143;
    }
    if (v131 < 0)
      operator delete(v130);
    if (v129 < 0)
      operator delete(v128);
    if (v147 < 0)
      operator delete(v146);
    if (v145 < 0)
      operator delete(v144);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v85 = &v123;
      if (v125 < 0)
        v85 = v123;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
      _os_log_impl(&dword_1DE3F6000, v83, OS_LOG_TYPE_INFO, "Dialog sentence prosody bias map has been loaded from %s", (uint8_t *)&__p, 0xCu);
    }
    v86 = &v123;
    if (v125 < 0)
      v86 = v123;
    Diagnostics::log(6, "Dialog sentence prosody bias map has been loaded from %s", v84, v86);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v122, v121[0]);
    v151.__r_.__value_.__r.__words[0] = *v64;
    *(std::string::size_type *)((char *)v151.__r_.__value_.__r.__words
                              + *(_QWORD *)(v151.__r_.__value_.__r.__words[0] - 24)) = v64[3];
    MEMORY[0x1DF0ECB94](&v151.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1DF0ECF6C](v157);
    if (SHIBYTE(v125) < 0)
      operator delete(v123);
    v77 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  }
  if (v77 < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  v87 = v134;
  if (v134)
  {
    v88 = (unint64_t *)&v134->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v60)
  {
    v90 = (unint64_t *)&v60->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return a1;
}

void sub_1DEA201C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, _QWORD **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;
  void **v59;
  void *v61;
  void *v62;

  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((char *)STACK[0x238]);
  if (a47 < 0)
    operator delete(__p);
  v61 = *(void **)(v58 + 1008);
  if (v61)
  {
    *(_QWORD *)(v58 + 1016) = v61;
    operator delete(v61);
  }
  a58 = (void *)(v58 + 976);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  if (*(char *)(v58 + 975) < 0)
    operator delete(*(void **)(v58 + 952));
  a58 = (void *)(v58 + 928);
  std::vector<TacotronPhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a58 = (void *)(v58 + 904);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a58 = (void *)(v58 + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a58 = (void *)(v58 + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v58 + 840);
  if (*(char *)(v58 + 839) < 0)
    operator delete(*(void **)(v58 + 816));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*a13);
  v62 = *v59;
  if (*v59)
  {
    *(_QWORD *)(v58 + 776) = v62;
    operator delete(v62);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v58 + 744));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v58 + 704));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v58 + 680));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v58 + 656));
  if (*(char *)(v58 + 639) < 0)
    operator delete(*a19);
  if (*(char *)(v58 + 615) < 0)
    operator delete(*a21);
  if (*(char *)(v58 + 591) < 0)
    operator delete(*a22);
  std::__tree<std::string>::destroy(a25, *(char **)(v58 + 544));
  std::__tree<std::string>::destroy(a26, *(char **)(v58 + 512));
  std::__tree<std::string>::destroy(a16, *(char **)(v58 + 480));
  std::__tree<std::string>::destroy(a17, *(char **)(v58 + 456));
  std::__tree<std::string>::destroy(a18, *(char **)(v58 + 432));
  if (*(char *)(v58 + 423) < 0)
    operator delete(*a23);
  if (*(char *)(v58 + 399) < 0)
    operator delete(*a20);
  if (*(char *)(v58 + 375) < 0)
    operator delete(*a24);
  if (*(char *)(v58 + 327) < 0)
    operator delete(*a10);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(v58 + 280));
  Module::~Module((Module *)v58);
  _Unwind_Resume(a1);
}

void FastSpeech2DecoderDennisInference::prepare_inputs(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void (***v9)(_QWORD, uint64_t *);
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::vector<int> v24;
  _QWORD v25[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v25[0] = *a2;
  v25[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  FastSpeech2DecoderBaseInference::prepare_inputs(a1, (uint64_t)v25);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::vector<int>::vector(&v24, 1uLL, (const std::vector<int>::value_type *)(*a2 + 4));
  std::string::basic_string[abi:ne180100]<0>(&__p, "graph_decoder_input_speaker_id_name");
  InferenceEngine::DataTensor::build_from_1d_array<int>((uint64_t)&v24, &v22);
  if (v21 < 0)
    operator delete(__p);
  v9 = *(void (****)(_QWORD, uint64_t *))(a1 + 24);
  v18 = v22;
  v19 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (**v9)(v9, &v18);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
}

void sub_1DEA20A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sqlite3_open_MemoryMap(const void **a1, sqlite3 **a2)
{
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  void **v10;

  v4 = atomic_load(&sqlite3_open_MemoryMap(MemoryMap const&,sqlite3 **)::memvfs_register);
  if (v4 != -1)
  {
    __p[0] = sqlite3_memvfs_register;
    v10 = __p;
    std::__call_once(&sqlite3_open_MemoryMap(MemoryMap const&,sqlite3 **)::memvfs_register, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<int (&)(void)>>);
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "file:/mapped?ptr=%p&sz=%zu", a1[2], (size_t)a1[3]);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = sqlite3_open_v2((const char *)v5, a2, 65, "memvfs");
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1DEA20B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sqlite3_memvfs_register()
{
  sqlite3_initialize();
  qword_1F0440188 = (uint64_t)sqlite3_vfs_find(0);
  dword_1F044016C = 40;
  return sqlite3_vfs_register((sqlite3_vfs *)&mem_vfs, 0);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<int (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t memOpen(sqlite3_vfs *a1, const char *a2, sqlite3_file *a3, __int16 a4, int *a5)
{
  const sqlite3_io_methods *v7;
  sqlite3_int64 v8;
  const sqlite3_io_methods *v9;
  uint64_t result;
  int v11;

  a3[4].pMethods = 0;
  *(_OWORD *)&a3->pMethods = 0u;
  *(_OWORD *)&a3[2].pMethods = 0u;
  if ((a4 & 0x100) == 0)
    return 14;
  v7 = (const sqlite3_io_methods *)sqlite3_uri_int64(a2, "ptr", 0);
  a3[3].pMethods = v7;
  if (!v7)
    return 14;
  v8 = sqlite3_uri_int64(a2, "sz", 0);
  a3[1].pMethods = (const sqlite3_io_methods *)v8;
  if (v8 < 0)
    return 14;
  v9 = (const sqlite3_io_methods *)sqlite3_uri_int64(a2, "max", v8);
  a3[2].pMethods = v9;
  if ((uint64_t)v9 < (uint64_t)a3[1].pMethods)
    return 14;
  v11 = sqlite3_uri_BOOLean(a2, "freeonclose", 0);
  result = 0;
  LODWORD(a3[4].pMethods) = v11;
  a3->pMethods = (const sqlite3_io_methods *)&mem_io_methods;
  return result;
}

uint64_t memDelete(sqlite3_vfs *a1, const char *a2)
{
  return 2570;
}

uint64_t memAccess(sqlite3_vfs *a1, const char *a2, int a3, int *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t memFullPathname(sqlite3_vfs *a1, const char *a2, int a3, char *a4)
{
  sqlite3_snprintf(a3, a4, "%s", a2);
  return 0;
}

uint64_t memDlOpen(sqlite3_vfs *a1, const char *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 9))();
}

uint64_t memDlError(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 10))();
}

uint64_t memDlSym(sqlite3_vfs *a1, void *a2, const char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 11))();
}

uint64_t memDlClose(sqlite3_vfs *a1, void *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 12))();
}

uint64_t memRandomness(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 13))();
}

uint64_t memSleep(sqlite3_vfs *a1)
{
  return (*((uint64_t (**)(void))a1->pAppData + 14))();
}

uint64_t memCurrentTime(sqlite3_vfs *a1, double *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 15))();
}

uint64_t memGetLastError(sqlite3_vfs *a1, int a2, char *a3)
{
  return (*((uint64_t (**)(void))a1->pAppData + 16))();
}

uint64_t memCurrentTimeInt64(sqlite3_vfs *a1, uint64_t *a2)
{
  return (*((uint64_t (**)(void))a1->pAppData + 17))();
}

uint64_t memClose(sqlite3_file *a1)
{
  if (LODWORD(a1[4].pMethods))
    sqlite3_free((void *)a1[3].pMethods);
  return 0;
}

uint64_t memRead(sqlite3_file *a1, void *__dst, int a3, uint64_t a4)
{
  memcpy(__dst, (char *)a1[3].pMethods + a4, a3);
  return 0;
}

uint64_t memWrite(sqlite3_file *a1, const void *__src, int a3, uint64_t a4)
{
  const sqlite3_io_methods *v8;
  const sqlite3_io_methods *pMethods;

  v8 = (const sqlite3_io_methods *)(a4 + a3);
  pMethods = a1[1].pMethods;
  if ((uint64_t)v8 > (uint64_t)pMethods)
  {
    if ((uint64_t)v8 > (uint64_t)a1[2].pMethods)
      return 13;
    if (a4 > (uint64_t)pMethods)
      bzero((char *)a1[3].pMethods + (unint64_t)pMethods, a4 - (_QWORD)pMethods);
    a1[1].pMethods = v8;
  }
  memcpy((char *)a1[3].pMethods + a4, __src, a3);
  return 0;
}

uint64_t memTruncate(sqlite3_file *a1, const sqlite3_io_methods *a2)
{
  const sqlite3_io_methods *pMethods;
  BOOL v5;
  size_t v6;
  uint64_t result;

  pMethods = a1[1].pMethods;
  v5 = (uint64_t)a2 <= (uint64_t)pMethods;
  v6 = (char *)a2 - (char *)pMethods;
  if (!v5)
  {
    if ((uint64_t)a1[2].pMethods < (uint64_t)a2)
      return 13;
    bzero((char *)a1[3].pMethods + (unint64_t)pMethods, v6);
  }
  result = 0;
  a1[1].pMethods = a2;
  return result;
}

uint64_t memSync(sqlite3_file *a1)
{
  return 0;
}

uint64_t memFileSize(sqlite3_file *a1, const sqlite3_io_methods **a2)
{
  *a2 = a1[1].pMethods;
  return 0;
}

uint64_t memLock(sqlite3_file *a1)
{
  return 0;
}

uint64_t memUnlock(sqlite3_file *a1)
{
  return 0;
}

uint64_t memCheckReservedLock(sqlite3_file *a1, int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t memFileControl(sqlite3_file *a1, int a2, char **a3)
{
  char *v4;
  uint64_t result;

  if (a2 != 12)
    return 12;
  v4 = sqlite3_mprintf("mem(%p,%lld)", a1[3].pMethods, a1[1].pMethods);
  result = 0;
  *a3 = v4;
  return result;
}

uint64_t memSectorSize(sqlite3_file *a1)
{
  return 1024;
}

uint64_t memDeviceCharacteristics(sqlite3_file *a1)
{
  return 5633;
}

uint64_t memShmMap(sqlite3_file *a1, int a2, int a3, int a4, volatile void **a5)
{
  return 5386;
}

uint64_t memShmLock(sqlite3_file *a1)
{
  return 5130;
}

uint64_t memShmUnmap(sqlite3_file *a1)
{
  return 0;
}

uint64_t memFetch(sqlite3_file *a1, uint64_t a2, int a3, void **a4)
{
  *a4 = (char *)a1[3].pMethods + a2;
  return 0;
}

uint64_t memUnfetch(sqlite3_file *a1, uint64_t a2, void *a3)
{
  return 0;
}

void ExtractFeaturesImpl::clear(ExtractFeaturesImpl *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;

  v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 65) = 0x6400000064;
  *((_DWORD *)this + 132) = 80;
  if (*((char *)this + 559) < 0)
  {
    **((_BYTE **)this + 67) = 0;
    *((_QWORD *)this + 68) = 0;
  }
  else
  {
    *((_BYTE *)this + 536) = 0;
    *((_BYTE *)this + 559) = 0;
  }
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 63);
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 63);
  *((_DWORD *)this + 60) = 0;
  if (*((char *)this + 295) < 0)
  {
    **((_BYTE **)this + 34) = 0;
    *((_QWORD *)this + 35) = 0;
  }
  else
  {
    *((_BYTE *)this + 272) = 0;
    *((_BYTE *)this + 295) = 0;
  }
  if (*((char *)this + 343) < 0)
  {
    **((_BYTE **)this + 40) = 0;
    *((_QWORD *)this + 41) = 0;
  }
  else
  {
    *((_BYTE *)this + 320) = 0;
    *((_BYTE *)this + 343) = 0;
  }
  if (*((char *)this + 391) < 0)
  {
    **((_BYTE **)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
  }
  else
  {
    *((_BYTE *)this + 368) = 0;
    *((_BYTE *)this + 391) = 0;
  }
  *(_OWORD *)((char *)this + 600) = 0u;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  std::recursive_mutex::unlock(v2);
}

void sub_1DEA21084(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ExtractFeaturesImpl::generate_tokens(ExtractFeaturesImpl *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  ExtractFeaturesImpl *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  NSObject *v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  std::string *p_buf;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void **v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  const std::string *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned __int8 *v52;
  const std::string *v53;
  _QWORD *v54;
  uint64_t v55;
  std::string::size_type v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  std::string::size_type v64;
  unsigned int v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  int64x2_t silence;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  std::string *v80;
  std::string *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  const std::string *v91;
  uint64_t data;
  _QWORD *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  int v101;
  int v102;
  float v103;
  float v104;
  std::string::pointer v105;
  const void **v106;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned __int8 *v112;
  const void **v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  char v128;
  int v129;
  void *v130;
  const char *v131;
  int v132;
  int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  _DWORD *v150;
  int v151;
  const std::string::value_type *v152;
  std::string::size_type v153;
  int v154;
  const std::string::value_type *v155;
  std::string::size_type v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  const std::string::value_type *v166;
  std::string::size_type v167;
  uint64_t *v168;
  std::string *v169;
  std::string *v170;
  _QWORD *v171;
  char *v172;
  std::string *v173;
  std::string *v174;
  std::string *v175;
  const std::string *v176;
  uint64_t *v177;
  uint64_t *v178;
  std::string v179;
  std::string v180[2];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  std::string v187;
  std::string buf;
  std::string *v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 96))(this);
  if (*((_BYTE *)this + 8))
  {
    std::recursive_mutex::unlock(v2);
    return;
  }
  v3 = 0;
  *((_QWORD *)this + 84) = 1;
  v178 = (uint64_t *)((char *)this + 472);
  while (1)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&v179, *((_QWORD *)this + 2), v3);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v178, (__int128 *)&v179);
    v4 = *((_QWORD *)this + 59);
    size = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
    if (v179.__r_.__value_.__l.__size_)
    {
      v6 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (!v4)
      break;
    ++v3;
    v8 = (ExtractFeaturesImpl *)*v178;
    v10 = (_QWORD *)((char *)v8 + 8);
    if ((_QWORD *)((char *)v8 + 8) == v9)
    {
      *((_QWORD *)this + 61) = 0;
      goto LABEL_123;
    }
    v11 = v9[5];
    v13 = *(_DWORD *)(v11 + 8);
    v12 = v13;
    *((_QWORD *)this + 61) = v11 + 8;
    if (v13 > 1885892461)
    {
      v14 = v12 == 1952807028 || v12 == 1885892462;
      if (!v14)
        goto LABEL_123;
      if (v10 == v15)
        v16 = 0;
      else
        v16 = v15[5] + 8;
      v19 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16);
      v185 = 0u;
      v186 = 0u;
      v183 = 0u;
      v184 = 0u;
      v181 = 0u;
      v182 = 0u;
      memset(v180, 0, sizeof(v180));
      v20 = *(_QWORD *)(v11 + 16);
      v21 = *(_QWORD *)(v11 + 24);
      if (*(char *)(v19 + 23) < 0)
        v22 = *(_QWORD *)(v19 + 8);
      else
        v22 = *(unsigned __int8 *)(v19 + 23);
      if (v21 + v20 <= v22)
      {
        std::string::basic_string(&buf, (const std::string *)v19, v20, v21, (std::allocator<char> *)&v187);
        if (SHIBYTE(v180[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v180[1].__r_.__value_.__l.__data_);
        v180[1] = buf;
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v24 = *((_QWORD *)this + 61);
          v25 = *(_QWORD *)(v24 + 8);
          v26 = *(_QWORD *)(v24 + 16);
          Censor::global_plaintext(&v187, v19);
          v27 = (v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v187
              : (std::string *)v187.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v25;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26 + v25;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v189 = v27;
          _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_ERROR, "Invalid word range: [%lu, %lu) in text: '%s'", (uint8_t *)&buf, 0x20u);
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v187.__r_.__value_.__l.__data_);
        }
        v28 = *((_QWORD *)this + 61);
        v29 = *(_QWORD *)(v28 + 8);
        v30 = *(_QWORD *)(v28 + 16);
        Censor::global_plaintext(&buf, v19);
        p_buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        Diagnostics::log(3, "Invalid word range: [%lu, %lu) in text: '%s'", v31, v29, v30 + v29, p_buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        MEMORY[0x1DF0ECA80](&v180[1], &byte_1DEBD87CE);
      }
      memset(&buf, 0, sizeof(buf));
      v33 = *v178;
      if ((_QWORD *)(v33 + 8) != v34 && !*(_BYTE *)(v34[5] + 9))
      {
        ExtractFeaturesImpl::punctuation(&v187, (uint64_t)this, v3);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        buf = v187;
        v35 = *((_QWORD *)this + 61);
        if (*(_DWORD *)v35 != 1952807028 || *(_QWORD *)(v35 + 16))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v35 + 24), (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v187);
          if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180[0].__r_.__value_.__l.__data_);
          v180[0] = v187;
        }
      }
      LODWORD(v179.__r_.__value_.__r.__words[1]) = *(_QWORD *)v16;
      v36 = *((_QWORD *)this + 61);
      if (*(char *)(v36 + 47) < 0)
        v37 = *(_QWORD *)(v36 + 32);
      else
        LODWORD(v37) = *(unsigned __int8 *)(v36 + 47);
      *(std::string::size_type *)((char *)&v179.__r_.__value_.__r.__words[1] + 4) = v37;
      v179.__r_.__value_.__r.__words[0] = __PAIR64__(*(_QWORD *)(v36 + 16), *(_DWORD *)(v36 + 8) - *((_DWORD *)this + 98));
      v38 = *((_QWORD *)this + 59);
      if ((_QWORD *)(v38 + 8) == v39)
      {
        *((_QWORD *)this + 62) = 0;
      }
      else
      {
        *((_QWORD *)this + 62) = v39[5] + 8;
        (*(void (**)(std::string *__return_ptr))(***((_QWORD ***)this + 13) + 24))(&v187);
        v40 = (void **)(v16 + 8);
        if (*(char *)(v16 + 31) < 0)
          operator delete(*v40);
        v41 = *(_OWORD *)&v187.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 24) = *((_QWORD *)&v187.__r_.__value_.__l + 2);
        *(_OWORD *)v40 = v41;
        std::string::operator=((std::string *)&v181, (const std::string *)(v16 + 8));
        v42 = *((_QWORD *)this + 61);
        if (*(_DWORD *)v42 != 1952807028 || *(_QWORD *)(v42 + 16))
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(*((_QWORD *)this + 62) + 24), (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v187);
          if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180[0].__r_.__value_.__l.__data_);
          v180[0] = v187;
        }
      }
      v43 = *v178;
      if ((_QWORD *)(v43 + 8) != v44)
        std::string::operator=((std::string *)((char *)&v182 + 8), (const std::string *)(v44[5] + 8));
      v45 = *(_QWORD *)(*((_QWORD *)this + 61) + 48);
      v46 = (const std::string *)(v45 + 40);
      v47 = *(unsigned __int8 *)(v45 + 63);
      v48 = *(_QWORD *)(v45 + 48);
      if ((v47 & 0x80u) == 0)
        v49 = *(unsigned __int8 *)(v45 + 63);
      else
        v49 = *(_QWORD *)(v45 + 48);
      v50 = *((unsigned __int8 *)this + 183);
      v51 = (char)v50;
      if ((v50 & 0x80u) != 0)
        v50 = *((_QWORD *)this + 21);
      if (v49 == v50)
      {
        if (v51 >= 0)
          v52 = (unsigned __int8 *)this + 160;
        else
          v52 = (unsigned __int8 *)*((_QWORD *)this + 20);
        if ((v47 & 0x80) != 0)
        {
          if (memcmp(v46->__r_.__value_.__l.__data_, v52, v48))
            goto LABEL_92;
        }
        else if ((_DWORD)v47)
        {
          v53 = v46;
          while (v53->__r_.__value_.__s.__data_[0] == *v52)
          {
            v53 = (const std::string *)((char *)v53 + 1);
            ++v52;
            if (!--v47)
              goto LABEL_93;
          }
          goto LABEL_92;
        }
      }
      else
      {
LABEL_92:
        std::string::operator=((std::string *)((char *)&v185 + 8), v46);
      }
LABEL_93:
      v59 = *v178;
      if ((_QWORD *)(v59 + 8) == v60)
      {
        *((_QWORD *)this + 74) = 0;
      }
      else
      {
        v61 = v60[5];
        v62 = *(_QWORD *)(v61 + 8);
        *((_QWORD *)this + 74) = v61 + 8;
        if (v62)
        {
          (*(void (**)(ExtractFeaturesImpl *, std::string *))(*(_QWORD *)this + 152))(this, &v179);
          *((_QWORD *)this + 84) += **((_QWORD **)this + 74);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_111;
    }
    if (v12 != 1635083369)
    {
      if (v12 == 1651664235 && ExtractFeaturesImpl::pause_duration(v8))
        ++*((_QWORD *)this + 84);
      goto LABEL_123;
    }
    *((_QWORD *)this + 74) = 0;
    if (v10 == v17)
      v18 = 0;
    else
      v18 = (uint64_t *)(v17[5] + 8);
    if (v10 == v54)
      goto LABEL_123;
    v55 = v54[5];
    v185 = 0u;
    v186 = 0u;
    v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    v182 = 0u;
    memset(v180, 0, sizeof(v180));
    if (*(_DWORD *)(v55 + 32) == 0x7FFFFFFF)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf, 60, (const void **)(v55 + 40));
      std::string::push_back(&buf, 62);
      v187.__r_.__value_.__r.__words[0] = buf.__r_.__value_.__l.__size_;
      v56 = buf.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
      v57 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      memset(&buf, 0, sizeof(buf));
      if ((SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v180[0].__r_.__value_.__r.__words[0] = v56;
        v180[0].__r_.__value_.__l.__size_ = v187.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v180[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v180[0].__r_.__value_.__s + 23) = v57;
        if (v18)
          goto LABEL_107;
        goto LABEL_90;
      }
      operator delete(v180[0].__r_.__value_.__l.__data_);
      v180[0].__r_.__value_.__r.__words[0] = v56;
      v180[0].__r_.__value_.__l.__size_ = v187.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v180[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v187.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v180[0].__r_.__value_.__s + 23) = v57;
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if (v18)
          goto LABEL_107;
        goto LABEL_90;
      }
    }
    else
    {
      StringFormatter::StringFormatter((StringFormatter *)&buf, "<#%04d>", *(_DWORD *)(v55 + 32));
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &buf;
      else
        v63 = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v64 = buf.__r_.__value_.__l.__size_;
      MEMORY[0x1DF0ECA8C](v180, v63, v64);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_106;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v18)
    {
LABEL_107:
      v58 = *v18;
      goto LABEL_108;
    }
LABEL_90:
    LODWORD(v58) = 0;
LABEL_108:
    v65 = HIBYTE(v180[0].__r_.__value_.__r.__words[2]);
    if ((v180[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = v180[0].__r_.__value_.__r.__words[1];
    LODWORD(v179.__r_.__value_.__r.__words[1]) = v58;
    *(std::string::size_type *)((char *)&v179.__r_.__value_.__r.__words[1] + 4) = v65;
    v179.__r_.__value_.__r.__words[0] = __PAIR64__(*(_QWORD *)(*((_QWORD *)this + 61) + 16), *(_DWORD *)(*((_QWORD *)this + 61) + 8) - *((_DWORD *)this + 98));
    (*(void (**)(ExtractFeaturesImpl *, std::string *))(*(_QWORD *)this + 152))(this, &v179);
LABEL_111:
    if (SHIBYTE(v186) < 0)
      operator delete(*((void **)&v185 + 1));
    if (SBYTE7(v185) < 0)
      operator delete((void *)v184);
    if (SHIBYTE(v183) < 0)
      operator delete(*((void **)&v182 + 1));
    if (SBYTE7(v182) < 0)
      operator delete((void *)v181);
    if (SHIBYTE(v180[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v180[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v180[0].__r_.__value_.__l.__data_);
LABEL_123:
    if (*((_BYTE *)this + 233))
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&v179, *((_QWORD *)this + 2), v3);
      v66 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      if (v179.__r_.__value_.__l.__size_)
      {
        v67 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          if ((_QWORD)v66)
            goto LABEL_130;
LABEL_129:
          *((_BYTE *)this + 920) = 1;
          goto LABEL_130;
        }
      }
      if (!(_QWORD)v66)
        goto LABEL_129;
    }
LABEL_130:
    v69 = *v178;
    if ((_QWORD *)(v69 + 8) != v70)
    {
      v71 = v70[5];
      if (*(_BYTE *)(v71 + 9))
        break;
      if (*(_BYTE *)(v71 + 8))
        ++*((_QWORD *)this + 84);
    }
  }
  (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 104))(this);
  v168 = (uint64_t *)((char *)this + 560);
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 70);
  v171 = (_QWORD *)((char *)this + 576);
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 72);
  v174 = (std::string *)((char *)this + 400);
  v172 = (char *)this + 448;
  *(_OWORD *)((char *)this + 600) = 0u;
  v169 = (std::string *)((char *)this + 536);
  v170 = (std::string *)((char *)this + 424);
  v72 = 1;
  do
  {
LABEL_140:
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v179, *((_QWORD *)this + 2), 0);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v178, (__int128 *)&v179);
    v74 = *((_QWORD *)this + 59);
    v75 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
    if (v179.__r_.__value_.__l.__size_)
    {
      v76 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (!v74)
      break;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    v78 = *((_QWORD *)this + 59);
    v80 = (std::string *)(v78 + 8);
    if ((_QWORD *)(v78 + 8) == v79)
    {
      *((_QWORD *)this + 61) = 0;
      goto LABEL_140;
    }
    *((_QWORD *)this + 61) = v79[5] + 8;
    v175 = v81;
    if (v80 == v81)
    {
      v173 = 0;
    }
    else
    {
      v82 = (_QWORD *)v81[1].__r_.__value_.__r.__words[2];
      v83 = v82[4];
      if (v83 != *v171)
      {
        v84 = *std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v171, v83, v82[5]);
        if ((_QWORD *)(v84 + 8) == v85)
          v86 = 0;
        else
          v86 = v85[5] + 8;
        *((_QWORD *)this + 76) = v86;
        *((_QWORD *)this + 79) = -1;
      }
      v173 = (std::string *)(v82 + 1);
      v87 = v82[2];
      if (v87 != *v168)
      {
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v168, v87, v82[3]);
        v88 = *v168;
        if ((_QWORD *)(v88 + 8) == v89)
          v90 = 0;
        else
          v90 = v89[5] + 8;
        *((_QWORD *)this + 75) = v90;
        *((_QWORD *)this + 80) = 0;
        *((_QWORD *)this + 82) = 0;
        ++*((_QWORD *)this + 79);
      }
    }
    if ((v72 & 1) != 0)
      ExtractFeaturesImpl::extract_silence(this, 50);
    v91 = (const std::string *)*((_QWORD *)this + 61);
    data = (uint64_t)v91[2].__r_.__value_.__l.__data_;
    if (data != *((_QWORD *)this + 63))
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)this + 63, data, v91[2].__r_.__value_.__l.__size_);
      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
      v179.__r_.__value_.__l.__size_ = (std::string::size_type)&v179;
      v93 = v91[2].__r_.__value_.__l.__data_;
      if (v93)
      {
        v176 = v91;
        v94 = 0;
        v95 = &v179;
        do
        {
          v96 = (std::string *)operator new(0x18uLL);
          v96->__r_.__value_.__l.__size_ = (std::string::size_type)v95;
          v96->__r_.__value_.__r.__words[2] = (std::string::size_type)v93;
          v96->__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
          v95->__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
          v179.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
          ++v94;
          v95 = v96;
          v93 = (_QWORD *)*v93;
        }
        while (v93);
        v179.__r_.__value_.__r.__words[2] = v94;
        v97 = 100;
        v98 = 80;
        v99 = 100;
        v91 = v176;
        do
        {
          v100 = v96->__r_.__value_.__r.__words[2];
          v101 = *(_DWORD *)(v100 + 216);
          switch(v101)
          {
            case 0:
            case 3:
            case 4:
            case 5:
              break;
            case 1:
              v99 = 100;
              break;
            case 2:
              v99 = (int)(float)(*(float *)(v100 + 220) * (float)(int)v99);
              break;
            default:
              v99 = dword_1DED00070[v101 - 6];
              break;
          }
          v102 = *(_DWORD *)(v100 + 232);
          switch(v102)
          {
            case 0:
            case 3:
            case 5:
              break;
            case 1:
              v97 = 100;
              break;
            case 2:
              v103 = *(float *)(v100 + 236);
              v104 = (float)(int)v97;
              goto LABEL_176;
            case 4:
              v103 = *(float *)(v100 + 236);
              v104 = 100.0;
LABEL_176:
              v97 = (int)(float)(v103 * v104);
              break;
            default:
              v97 = dword_1DED00070[v102 - 6];
              break;
          }
          switch(*(_DWORD *)(v100 + 240))
          {
            case 0:
            case 3:
            case 4:
              break;
            case 1:
              v98 = 80;
              break;
            case 2:
              v98 = (int)(float)(*(float *)(v100 + 244) * (float)(int)v98);
              break;
            case 5:
              v98 = 0;
              break;
            default:
              v98 = dword_1DED00084[v102 - 6];
              break;
          }
          v96 = (std::string *)v96->__r_.__value_.__l.__size_;
        }
        while (v96 != &v179);
      }
      else
      {
        v179.__r_.__value_.__r.__words[2] = 0;
        v98 = 80;
        v99 = 100;
        v97 = 100;
      }
      if ((_DWORD)v99 != *((_DWORD *)this + 130))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(_QWORD *)this + 192))(this, v99);
        *((_DWORD *)this + 130) = v99;
      }
      if ((_DWORD)v97 != *((_DWORD *)this + 131))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(_QWORD *)this + 200))(this, v97);
        *((_DWORD *)this + 131) = v97;
      }
      if ((_DWORD)v98 != *((_DWORD *)this + 132))
      {
        (*(void (**)(ExtractFeaturesImpl *, uint64_t))(*(_QWORD *)this + 208))(this, v98);
        *((_DWORD *)this + 132) = v98;
      }
      v105 = v91[2].__r_.__value_.__l.__data_;
      v106 = (const void **)(v105 + 296);
      v107 = v105[319];
      v108 = *((_QWORD *)v105 + 38);
      if ((v107 & 0x80u) == 0)
        v109 = v105[319];
      else
        v109 = *((_QWORD *)v105 + 38);
      v110 = *((unsigned __int8 *)this + 559);
      v111 = (char)v110;
      if ((v110 & 0x80u) != 0)
        v110 = *((_QWORD *)this + 68);
      if (v109 != v110)
        goto LABEL_207;
      if (v111 >= 0)
        v112 = (unsigned __int8 *)this + 536;
      else
        v112 = (unsigned __int8 *)v169->__r_.__value_.__r.__words[0];
      if ((v107 & 0x80) != 0)
      {
        if (memcmp(*v106, v112, v108))
          goto LABEL_207;
      }
      else if ((_DWORD)v107)
      {
        v113 = v106;
        while (*(unsigned __int8 *)v113 == *v112)
        {
          v113 = (const void **)((char *)v113 + 1);
          ++v112;
          if (!--v107)
            goto LABEL_208;
        }
LABEL_207:
        (*(void (**)(ExtractFeaturesImpl *, const void **))(*(_QWORD *)this + 216))(this, v106);
        std::string::operator=(v169, (const std::string *)(v91[2].__r_.__value_.__r.__words[0] + 296));
      }
LABEL_208:
      std::__list_imp<char *>::clear(&v179);
      v91 = (const std::string *)*((_QWORD *)this + 61);
    }
    std::string::operator=(v174, v91 + 1);
    v114 = *v178;
    if ((_QWORD *)(v114 + 8) == v115)
      MEMORY[0x1DF0ECA80](v170, "null");
    else
      std::string::operator=(v170, (const std::string *)(v115[5] + 8));
    MEMORY[0x1DF0ECA80](v172, "null");
    if (v80 != v175 && !v173->__r_.__value_.__s.__data_[1])
    {
      ExtractFeaturesImpl::punctuation(&v179, (uint64_t)this, 0);
      v128 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      {
        v130 = (void *)v179.__r_.__value_.__r.__words[0];
        if (v179.__r_.__value_.__l.__size_ == 1)
        {
          v129 = *v179.__r_.__value_.__l.__data_;
          goto LABEL_240;
        }
      }
      else
      {
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_214;
        v129 = v179.__r_.__value_.__s.__data_[0];
LABEL_240:
        if (v129 <= 57)
        {
          v131 = "exclamation";
          if (v129 != 33)
          {
            if (v129 != 46)
              goto LABEL_284;
            v131 = "period";
          }
          goto LABEL_285;
        }
        switch(v129)
        {
          case ':':
            v131 = "colon";
            goto LABEL_285;
          case ';':
            v131 = "semicolon";
            goto LABEL_285;
          case '?':
            v131 = "question";
            goto LABEL_285;
        }
LABEL_284:
        v131 = "comma";
        if (v129 == 44)
        {
LABEL_285:
          MEMORY[0x1DF0ECA80](v172, v131);
          v128 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
        }
        if ((v128 & 0x80) == 0)
          goto LABEL_214;
        v130 = (void *)v179.__r_.__value_.__r.__words[0];
      }
      operator delete(v130);
    }
LABEL_214:
    v116 = *v178;
    if ((_QWORD *)(v116 + 8) == v117)
    {
      *((_QWORD *)this + 62) = 0;
      v126 = **((_DWORD **)this + 61);
      if (v126 > 1835102826)
      {
        if (v126 != 1835102827)
        {
          if (v126 != 1886547312)
            goto LABEL_247;
          goto LABEL_237;
        }
        v127 = 17;
      }
      else
      {
        if (v126 != 1635083369)
        {
          if (v126 != 1651664235)
            goto LABEL_247;
          if (ExtractFeaturesImpl::is_paragraph_break(v116))
          {
            v141 = 500;
            goto LABEL_290;
          }
          v127 = 16;
          goto LABEL_246;
        }
LABEL_237:
        v127 = 18;
      }
LABEL_246:
      (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 8 * v127))(this);
      goto LABEL_247;
    }
    v118 = v117[5];
    *((_QWORD *)this + 62) = v118 + 8;
    std::string::operator=(v174, (const std::string *)(v118 + 32));
    v119 = (uint64_t **)*((_QWORD *)this + 62);
    v121 = *v119;
    v120 = v119[1];
    v177 = v120;
    while (v121 != v120)
    {
      (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 112))(this);
      *((_QWORD *)this + 81) = 0;
      v122 = *v121;
      v123 = v121[1];
      v14 = v123 == *v121;
      *((_QWORD *)this + 77) = (v123 - *v121) >> 6;
      if (!v14)
      {
        do
        {
          *((_DWORD *)this + 176) = *((_DWORD *)this + 175);
          *((_DWORD *)this + 175) = *(_DWORD *)(v122 + 4);
          *((_BYTE *)this + 696) = *(_DWORD *)v122 > 0;
          *((_QWORD *)this + 83) = 0;
          v124 = *(_QWORD *)(v122 + 16);
          v125 = *(_QWORD *)(v122 + 24);
          for (*((_QWORD *)this + 78) = 0xAAAAAAAAAAAAAAABLL * ((v125 - v124) >> 3); v124 != v125; v124 += 24)
          {
            if (*(char *)(v122 + 63) < 0)
              std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)(v122 + 40), *(_QWORD *)(v122 + 48));
            else
              v179 = *(std::string *)(v122 + 40);
            (*(void (**)(ExtractFeaturesImpl *, uint64_t, _QWORD, std::string *))(*(_QWORD *)this + 160))(this, v124, 0, &v179);
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v179.__r_.__value_.__l.__data_);
            ++*((_QWORD *)this + 83);
          }
          *(int64x2_t *)((char *)this + 648) = vaddq_s64(*(int64x2_t *)((char *)this + 648), vdupq_n_s64(1uLL));
          ++*((_QWORD *)this + 86);
          v122 += 64;
        }
        while (v122 != v123);
      }
      (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 120))(this);
      ++*((_QWORD *)this + 80);
      ++*((_QWORD *)this + 85);
      v121 += 3;
      v120 = v177;
    }
LABEL_247:
    if (*((char *)this + 423) < 0)
    {
      **((_BYTE **)this + 50) = 0;
      *((_QWORD *)this + 51) = 0;
    }
    else
    {
      *((_BYTE *)this + 400) = 0;
      *((_BYTE *)this + 423) = 0;
    }
    if (*((char *)this + 447) < 0)
    {
      **((_BYTE **)this + 53) = 0;
      *((_QWORD *)this + 54) = 0;
    }
    else
    {
      *((_BYTE *)this + 424) = 0;
      *((_BYTE *)this + 447) = 0;
    }
    if (v80 == v175)
      goto LABEL_276;
    if (v173->__r_.__value_.__s.__data_[1])
    {
      v141 = 180;
LABEL_290:
      silence = ExtractFeaturesImpl::extract_silence(this, v141);
      break;
    }
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v179, *((_QWORD *)this + 2), 0);
    if (v179.__r_.__value_.__r.__words[0]
      && ExtractFeaturesImpl::is_paragraph_break((uint64_t)v179.__r_.__value_.__l.__data_))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      silence = ExtractFeaturesImpl::extract_silence(this, 500);
      v132 = 0;
      v133 = 3;
    }
    else
    {
      v133 = 0;
      v132 = 1;
    }
    v134 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
    if (v179.__r_.__value_.__l.__size_)
    {
      v135 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *, int64x2_t))v134->__on_zero_shared)(v134, silence);
        std::__shared_weak_count::__release_weak(v134);
        if (!v132)
          goto LABEL_277;
LABEL_264:
        if (v173->__r_.__value_.__s.__data_[0])
        {
          v137 = *((_QWORD *)this + 61);
          v138 = (char *)(v137 + 24);
          v139 = *(char *)(v137 + 47);
          if (v139 < 0)
          {
            if (*(_QWORD *)(v137 + 32) != 1)
              goto LABEL_274;
            v138 = *(char **)v138;
          }
          else if (v139 != 1)
          {
LABEL_274:
            v140 = 120;
            goto LABEL_275;
          }
          if (!memchr("()\"", *v138, 4uLL))
            goto LABEL_274;
          v140 = 2;
LABEL_275:
          silence = ExtractFeaturesImpl::extract_silence(this, v140);
        }
LABEL_276:
        v133 = 0;
        goto LABEL_277;
      }
    }
    if (v132)
      goto LABEL_264;
LABEL_277:
    v72 = 0;
  }
  while (!v133);
  v142 = *((_QWORD *)this + 98);
  v143 = *((_QWORD *)this + 97);
  v144 = 0x84BDA12F684BDA13 * ((v142 - v143) >> 3);
  if (v144 >= 2)
  {
    v145 = 0;
    LODWORD(v146) = 0;
    v147 = 1;
    do
    {
      v148 = v147;
      if (*(_DWORD *)(v143 + 216 * v145 + 172))
      {
        if (v145 >= (int)v146)
        {
          v146 = (int)v146;
          v149 = *(_DWORD *)(v143 + 216 * v147 + 60);
          v150 = (_DWORD *)(v143 + 64 + 216 * (int)v146);
          do
          {
            *v150 = v149;
            v150 += 54;
            ++v146;
          }
          while (v148 != v146);
        }
        LODWORD(v146) = v148;
      }
      v147 = v148 + 1;
      v145 = v148;
    }
    while (v148 + 1 != v144);
  }
  if (v143 != v142)
    *(_DWORD *)(v142 - 152) = 0;
  (*(void (**)(ExtractFeaturesImpl *, int64x2_t))(*(_QWORD *)this + 176))(this, silence);
  (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 168))(this);
  (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 184))(this);
  *((_DWORD *)this + 60) += *((_DWORD *)this + 59);
  if (*((char *)this + 295) < 0)
  {
    if (*((_QWORD *)this + 35))
LABEL_303:
      std::string::append((std::string *)((char *)this + 272), " ");
  }
  else if (*((_BYTE *)this + 295))
  {
    goto LABEL_303;
  }
  v151 = *((char *)this + 271);
  if (v151 >= 0)
    v152 = (char *)this + 248;
  else
    v152 = (const std::string::value_type *)*((_QWORD *)this + 31);
  if (v151 >= 0)
    v153 = *((unsigned __int8 *)this + 271);
  else
    v153 = *((_QWORD *)this + 32);
  std::string::append((std::string *)((char *)this + 272), v152, v153);
  if (*((char *)this + 343) < 0)
  {
    if (*((_QWORD *)this + 41))
LABEL_312:
      std::string::append((std::string *)((char *)this + 320), " ");
  }
  else if (*((_BYTE *)this + 343))
  {
    goto LABEL_312;
  }
  v154 = *((char *)this + 319);
  if (v154 >= 0)
    v155 = (char *)this + 296;
  else
    v155 = (const std::string::value_type *)*((_QWORD *)this + 37);
  if (v154 >= 0)
    v156 = *((unsigned __int8 *)this + 319);
  else
    v156 = *((_QWORD *)this + 38);
  std::string::append((std::string *)((char *)this + 320), v155, v156);
  if (*((char *)this + 391) < 0)
  {
    v157 = *((_QWORD *)this + 47);
    if (v157)
    {
      v158 = (char *)*((_QWORD *)this + 46);
      goto LABEL_328;
    }
  }
  else
  {
    v157 = *((unsigned __int8 *)this + 391);
    if (*((_BYTE *)this + 391))
    {
      v158 = (char *)this + 368;
LABEL_328:
      v159 = &v158[v157];
      v160 = v158;
      v161 = v159;
      do
      {
        if (*v160 == 115)
        {
          v162 = 1u;
          while (v162 != 3)
          {
            if (&v160[v162] == v159)
              goto LABEL_338;
            v163 = v160[v162];
            v164 = aSil_2[v162++];
            if (v163 != v164)
              goto LABEL_330;
          }
          v161 = v160;
        }
LABEL_330:
        ++v160;
      }
      while (v160 != v159);
LABEL_338:
      if (v161 != v159 && v161 - v158 != -1)
        std::string::erase((std::string *)((char *)this + 368), v161 - v158, 3uLL);
    }
  }
  v165 = *((char *)this + 367);
  if (v165 >= 0)
    v166 = (char *)this + 344;
  else
    v166 = (const std::string::value_type *)*((_QWORD *)this + 43);
  if (v165 >= 0)
    v167 = *((unsigned __int8 *)this + 367);
  else
    v167 = *((_QWORD *)this + 44);
  std::string::append((std::string *)((char *)this + 368), v166, v167);
}

void sub_1DEA2267C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ExtractFeaturesImpl::process_tokens(ExtractFeaturesImpl *this)
{
  (*(void (**)(ExtractFeaturesImpl *))(*(_QWORD *)this + 48))(this);
  return *((_BYTE *)this + 8) == 0;
}

uint64_t ExtractFeaturesImpl::norm_label_count(ExtractFeaturesImpl *this)
{
  return *((unsigned int *)this + 60);
}

void ExtractFeaturesImpl::norm_labels(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 295) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 34), *((_QWORD *)this + 35));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 17);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 36);
  }
}

void ExtractFeaturesImpl::norm_text(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 343) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 40), *((_QWORD *)this + 41));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 20);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 42);
  }
}

void ExtractFeaturesImpl::pron(ExtractFeaturesImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 391) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 46), *((_QWORD *)this + 47));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 23);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 48);
  }
}

void ExtractFeaturesImpl::extract_sentence_text(ExtractFeaturesImpl *this)
{
  std::string *v2;
  std::string::__raw *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t *v11;
  std::string::size_type v12;
  uint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  const std::string::value_type *v29;
  const std::string::value_type *v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::string *v46;
  std::string::__raw *v47;
  BOOL v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::string *v58;
  std::string::__raw *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::string *v64;
  std::string *p_p;
  std::string::size_type v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::string *v71;
  void **v72;
  std::string *v73;
  std::string::size_type v74;
  NSObject *v75;
  std::string *v76;
  const char *v77;
  std::string *p_buf;
  uint64_t v79;
  int v80;
  const std::string::value_type *v81;
  void **v82;
  NSObject *v83;
  std::string *v84;
  const char *v85;
  std::string *v86;
  NSObject *v87;
  std::string *v88;
  const char *v89;
  std::string *v90;
  NSObject *v91;
  std::string *v92;
  const char *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::string *v98;
  BOOL v99;
  std::string *v100;
  std::string __p;
  std::string *__str;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::string *v105;
  unint64_t v106;
  std::string v107;
  std::string buf;
  std::string *v109;
  unint64_t *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 59) = 0;
  if (*((char *)this + 271) < 0)
  {
    **((_BYTE **)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
  }
  else
  {
    *((_BYTE *)this + 248) = 0;
    *((_BYTE *)this + 271) = 0;
  }
  if (*((char *)this + 319) < 0)
  {
    **((_BYTE **)this + 37) = 0;
    *((_QWORD *)this + 38) = 0;
  }
  else
  {
    *((_BYTE *)this + 296) = 0;
    *((_BYTE *)this + 319) = 0;
  }
  v104 = 0;
  v105 = 0;
  v106 = 0;
  __str = 0;
  v103 = 0;
  (*(void (**)(std::string *__return_ptr))(***((_QWORD ***)this + 13) + 40))(&__p);
  v2 = v105;
  if ((unint64_t)v105 >= v106)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v105 - v104) >> 3);
    v5 = v4 + 1;
    if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3) > v5)
      v5 = 0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v104) >> 3) >= 0x555555555555555)
      v6 = 0xAAAAAAAAAAAAAAALL;
    else
      v6 = v5;
    v110 = &v106;
    if (v6)
      v6 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v6);
    else
      v7 = 0;
    v8 = (std::string *)(v6 + 24 * v4);
    buf.__r_.__value_.__r.__words[0] = v6;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    v109 = (std::string *)(v6 + 24 * v7);
    v8->__r_.__value_.__r.__words[0] = 0;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    *v8 = __p;
    memset(&__p, 0, sizeof(__p));
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[1];
    std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v104, &buf);
    v3 = (std::string::__raw *)v105;
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
  }
  else
  {
    v105->__r_.__value_.__r.__words[0] = 0;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    *v2 = __p;
    memset(&__p, 0, sizeof(__p));
    v3 = (std::string::__raw *)&v2[1];
  }
  v98 = (std::string *)((char *)this + 248);
  v100 = (std::string *)((char *)this + 296);
  v105 = (std::string *)v3;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v9 = 0;
  v99 = 0;
  v10 = 0;
  v11 = (uint64_t *)((char *)this + 472);
  v12 = 1000000000;
  while (1)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 2) + 16))(&buf, *((_QWORD *)this + 2), v10);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)this + 472, (__int128 *)&buf);
    v13 = *v11;
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (!v13)
      break;
    ++v10;
    v17 = *v11;
    if ((_QWORD *)(v17 + 8) == v18)
    {
      *((_QWORD *)this + 61) = 0;
      goto LABEL_103;
    }
    v19 = v18[5];
    v20 = v19 + 8;
    *((_QWORD *)this + 61) = v19 + 8;
    if (!__str)
    {
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&__str, *(_QWORD *)(*(_QWORD *)(v19 + 56) + 16), *(_QWORD *)(*(_QWORD *)(v19 + 56) + 24));
      v20 = *((_QWORD *)this + 61);
    }
    v21 = *(_DWORD *)v20;
    if (*(_DWORD *)v20 == 1853189228)
      goto LABEL_103;
    v22 = *(_QWORD *)(v20 + 8);
    if (v22 < v12)
      v12 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16) + v22;
    if (v9 <= v23)
      v9 = v23;
    if (v21 > 1886547311)
    {
      if (v21 != 1886547312 && v21 != 1952807028 && v21 != 1886809699)
        goto LABEL_103;
    }
    else
    {
      if (v21 == 1635083369)
      {
        v39 = *v11;
        if ((_QWORD *)(v39 + 8) != v40)
        {
          v41 = v40[5];
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
          v109 = 0;
          v42 = *((unsigned __int8 *)this + 319);
          if (*((char *)this + 319) < 0)
          {
            if (!*((_QWORD *)this + 38))
              goto LABEL_123;
LABEL_73:
            std::string::push_back(v100, 32);
            v42 = *((unsigned __int8 *)this + 319);
            if ((v42 & 0x80) == 0)
            {
LABEL_124:
              buf.__r_.__value_.__r.__words[0] = v42;
              Agglomerate::set<TokenExtractionItem>(*v11, (uint64_t *)&buf);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v107, 60, (const void **)(v41 + 40));
              std::string::push_back(&v107, 62);
              __p = v107;
              memset(&v107, 0, sizeof(v107));
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v66 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v66 = __p.__r_.__value_.__l.__size_;
              std::string::append(v100, (const std::string::value_type *)p_p, v66);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v107.__r_.__value_.__l.__data_);
              goto LABEL_103;
            }
          }
          else
          {
            if (*((_BYTE *)this + 319))
              goto LABEL_73;
LABEL_123:
            if ((v42 & 0x80) == 0)
              goto LABEL_124;
          }
          v42 = *((_QWORD *)this + 38);
          goto LABEL_124;
        }
        goto LABEL_103;
      }
      if (v21 == 1651664235)
      {
        v43 = *v11;
        if ((_QWORD *)(v43 + 8) != v44)
        {
          v45 = v44[5];
          if (*(float *)(v45 + 8) == 0.0)
          {
            if (*(_DWORD *)(v45 + 12) == 1)
            {
              (*(void (**)(std::string *__return_ptr))(***((_QWORD ***)this + 13) + 40))(&buf);
              std::vector<PhonemeRepresentation::Word>::push_back[abi:ne180100](&v104, (uint64_t)&buf);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
              std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              break;
            }
          }
          else
          {
            (*(void (**)(std::string *__return_ptr))(***((_QWORD ***)this + 13) + 40))(&__p);
            v46 = v105;
            if ((unint64_t)v105 >= v106)
            {
              v67 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v105 - v104) >> 3);
              v68 = v67 + 1;
              if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3) > v68)
                v68 = 0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v104) >> 3) >= 0x555555555555555)
                v69 = 0xAAAAAAAAAAAAAAALL;
              else
                v69 = v68;
              v110 = &v106;
              if (v69)
                v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v69);
              else
                v70 = 0;
              v71 = (std::string *)(v69 + 24 * v67);
              buf.__r_.__value_.__r.__words[0] = v69;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
              v109 = (std::string *)(v69 + 24 * v70);
              v71->__r_.__value_.__r.__words[0] = 0;
              v71->__r_.__value_.__l.__size_ = 0;
              v71->__r_.__value_.__r.__words[2] = 0;
              *v71 = __p;
              memset(&__p, 0, sizeof(__p));
              buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v71[1];
              std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v104, &buf);
              v47 = (std::string::__raw *)v105;
              std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              v105->__r_.__value_.__r.__words[0] = 0;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              *v46 = __p;
              memset(&__p, 0, sizeof(__p));
              v47 = (std::string::__raw *)&v46[1];
            }
            v105 = (std::string *)v47;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          }
        }
        goto LABEL_103;
      }
      if (v21 != 1885892462)
        goto LABEL_103;
    }
    v26 = *((unsigned __int8 *)this + 319);
    if (*((char *)this + 319) < 0)
    {
      if (!*((_QWORD *)this + 38))
        goto LABEL_80;
    }
    else if (!*((_BYTE *)this + 319))
    {
      goto LABEL_80;
    }
    if (*(char *)(v20 + 47) < 0)
    {
      if (!*(_QWORD *)(v20 + 32))
      {
LABEL_80:
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
        v109 = 0;
        if ((v26 & 0x80) == 0)
          goto LABEL_57;
        goto LABEL_81;
      }
    }
    else if (!*(_BYTE *)(v20 + 47))
    {
      goto LABEL_80;
    }
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    v109 = 0;
    if (!v99 && v21 != 1886809699)
    {
      std::string::push_back(v100, 32);
      v26 = *((unsigned __int8 *)this + 319);
    }
    if ((v26 & 0x80) == 0)
      goto LABEL_57;
LABEL_81:
    v26 = *((_QWORD *)this + 38);
LABEL_57:
    buf.__r_.__value_.__r.__words[0] = v26;
    Agglomerate::set<TokenExtractionItem>(*v11, (uint64_t *)&buf);
    v27 = *((_QWORD *)this + 61);
    if (*(_DWORD *)v27 != 1952807028 || *(_QWORD *)(v27 + 16))
    {
      v30 = *(const std::string::value_type **)(v27 + 24);
      v28 = v27 + 24;
      v29 = v30;
      v31 = *(char *)(v28 + 23);
      if (v31 >= 0)
        v32 = (const std::string::value_type *)v28;
      else
        v32 = v29;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(v28 + 23);
      else
        v33 = *(_QWORD *)(v28 + 8);
      std::string::append(v100, v32, v33);
    }
    v34 = *v11;
    if ((_QWORD *)(v34 + 8) != v35)
    {
      v36 = v35[5];
      v37 = *(_BYTE *)(v36 + 55);
      if (v37 < 0)
        v38 = *(_QWORD *)(v36 + 40);
      else
        v38 = *(unsigned __int8 *)(v36 + 55);
      v48 = v38 != 0;
      if (v38)
      {
        if (v37 >= 0)
          v49 = (const std::string::value_type *)(v36 + 32);
        else
          v49 = *(const std::string::value_type **)(v36 + 32);
        if (v37 >= 0)
          v50 = *(unsigned __int8 *)(v36 + 55);
        else
          v50 = *(_QWORD *)(v36 + 40);
        std::string::append(v100, v49, v50);
      }
      if (*((char *)this + 271) < 0)
      {
        if (*((_QWORD *)this + 32))
          goto LABEL_95;
      }
      else
      {
        if (!*((_BYTE *)this + 271))
          goto LABEL_96;
LABEL_95:
        std::string::append(v98, " ");
      }
LABEL_96:
      v51 = *(char *)(v36 + 31);
      if (v51 >= 0)
        v52 = (const std::string::value_type *)(v36 + 8);
      else
        v52 = *(const std::string::value_type **)(v36 + 8);
      if (v51 >= 0)
        v53 = *(unsigned __int8 *)(v36 + 31);
      else
        v53 = *(_QWORD *)(v36 + 16);
      std::string::append(v98, v52, v53);
      v99 = v48;
      ++*((_DWORD *)this + 59);
      goto LABEL_103;
    }
    v99 = 0;
LABEL_103:
    v54 = *v11;
    if ((_QWORD *)(v54 + 8) != v55)
    {
      std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>(&v104, (uint64_t)v105, *(uint64_t **)(v55[5] + 8), *(uint64_t **)(v55[5] + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v55[5] + 16) - *(_QWORD *)(v55[5] + 8)) >> 3));
      v54 = *v11;
    }
    if ((_QWORD *)(v54 + 8) != v56)
    {
      v57 = v56[5];
      if (*(_BYTE *)(v57 + 8))
      {
        (*(void (**)(std::string *__return_ptr))(***((_QWORD ***)this + 13) + 40))(&__p);
        v58 = v105;
        if ((unint64_t)v105 >= v106)
        {
          v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v105 - v104) >> 3);
          v61 = v60 + 1;
          if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3) > v61)
            v61 = 0x5555555555555556 * ((uint64_t)(v106 - v104) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v104) >> 3) >= 0x555555555555555)
            v62 = 0xAAAAAAAAAAAAAAALL;
          else
            v62 = v61;
          v110 = &v106;
          if (v62)
            v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v62);
          else
            v63 = 0;
          v64 = (std::string *)(v62 + 24 * v60);
          buf.__r_.__value_.__r.__words[0] = v62;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
          v109 = (std::string *)(v62 + 24 * v63);
          v64->__r_.__value_.__r.__words[0] = 0;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          *v64 = __p;
          memset(&__p, 0, sizeof(__p));
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v64[1];
          std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer(&v104, &buf);
          v59 = (std::string::__raw *)v105;
          std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          v105->__r_.__value_.__r.__words[0] = 0;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          *v58 = __p;
          memset(&__p, 0, sizeof(__p));
          v59 = (std::string::__raw *)&v58[1];
        }
        v105 = (std::string *)v59;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      }
      if (*(_BYTE *)(v57 + 9))
        break;
    }
  }
  if (*((char *)this + 207) < 0)
  {
    **((_BYTE **)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
  }
  else
  {
    *((_BYTE *)this + 184) = 0;
    *((_BYTE *)this + 207) = 0;
  }
  if (__str)
    std::string::operator=((std::string *)((char *)this + 208), __str);
  v72 = (void **)((char *)this + 184);
  if (v10)
  {
    if (v12 < v9)
    {
      v73 = __str;
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
        v74 = __str->__r_.__value_.__l.__size_;
      else
        v74 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if (v9 <= v74)
      {
        *((_QWORD *)this + 49) = v12;
LABEL_177:
        std::string::basic_string(&buf, v73, v12, v9 - v12, (std::allocator<char> *)&v107);
        if (*((char *)this + 207) < 0)
          operator delete(*v72);
        *(_OWORD *)v72 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *((_QWORD *)this + 25) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v75 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          Censor::global_plaintext(&__p, (uint64_t)__str);
          v76 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v109 = v76;
          _os_log_impl(&dword_1DE3F6000, v75, OS_LOG_TYPE_ERROR, "Invalid sentence range: [%zu, %zu) in text '%s'", (uint8_t *)&buf, 0x20u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        Censor::global_plaintext(&buf, (uint64_t)__str);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        Diagnostics::log(3, "Invalid sentence range: [%zu, %zu) in text '%s'", v77, v12, v9, p_buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v74 < v12)
          v12 = v74;
        v73 = __str;
        *((_QWORD *)this + 49) = v12;
        if (v73)
        {
          v9 = v74;
          goto LABEL_177;
        }
      }
    }
  }
  else
  {
    *((_BYTE *)this + 8) = 1;
  }
  if (!*((_BYTE *)this + 8))
  {
    memset(&buf, 0, sizeof(buf));
    if (*((char *)this + 207) >= 0)
    {
      v79 = *((unsigned __int8 *)this + 207);
    }
    else
    {
      v72 = (void **)*((_QWORD *)this + 23);
      v79 = *((_QWORD *)this + 24);
    }
    for (; v79; --v79)
    {
      v80 = *(char *)v72;
      if (v80 <= 12)
      {
        if (v80 == 9)
        {
          v81 = "\\t";
          goto LABEL_196;
        }
        v81 = "\\n";
        if (v80 == 10)
          goto LABEL_196;
      }
      else
      {
        switch(v80)
        {
          case 13:
            v81 = "\\r";
            goto LABEL_196;
          case 92:
            v81 = "\\\\";
            goto LABEL_196;
          case 27:
            v81 = "\\e";
LABEL_196:
            std::string::append(&buf, v81);
            goto LABEL_197;
        }
      }
      std::string::push_back(&buf, v80);
LABEL_197:
      v72 = (void **)((char *)v72 + 1);
    }
    (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t *))(***((_QWORD ***)this + 13) + 24))(&__p, **((_QWORD **)this + 13), &v104);
    v82 = (void **)((char *)this + 344);
    if (*((char *)this + 367) < 0)
      operator delete(*v82);
    *(_OWORD *)v82 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 45) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    UTFString::remove_invalid_utf8_codes(&__p, (uint8_t *)v100);
    if (*((char *)this + 319) < 0)
      operator delete(v100->__r_.__value_.__l.__data_);
    *(_OWORD *)&v100->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 39) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)&buf);
      v84 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v107.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)v84;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Censor::global_plaintext(&__p, (uint64_t)&buf);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &__p;
    else
      v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v87 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)v100);
      v88 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v107.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)v88;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Censor::global_plaintext(&__p, (uint64_t)v100);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v90 = &__p;
    else
      v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      Censor::global_plaintext(&__p, (uint64_t)v82);
      v92 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(v107.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      _os_log_impl(&dword_1DE3F6000, v91, OS_LOG_TYPE_DEFAULT, "Phonemes : %s", (uint8_t *)&v107, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Censor::global_plaintext(&__p, (uint64_t)v82);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &__p;
    else
      v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
    Diagnostics::log(5, "Phonemes : %s", v93, v94);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v95 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1DEA237B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  char *v33;

  __p = v33;
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  __p = &a25;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

double ExtractFeaturesImpl::extract_pause(ExtractFeaturesImpl **this)
{
  uint64_t v2;
  double result;

  v2 = ExtractFeaturesImpl::pause_duration(this[59]);
  if ((_DWORD)v2)
    *(_QWORD *)&result = ExtractFeaturesImpl::extract_silence((ExtractFeaturesImpl *)this, v2).u64[0];
  return result;
}

uint64_t ExtractFeaturesImpl::pause_duration(ExtractFeaturesImpl *this)
{
  _QWORD *v2;
  int v3;

  if ((_QWORD *)((char *)this + 8) == v2)
    return 0;
  v3 = (int)(float)(*(float *)(v2[5] + 8) * 1000.0);
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

int64x2_t ExtractFeaturesImpl::extract_silence(ExtractFeaturesImpl *this, uint64_t a2)
{
  int64x2_t result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  *((_BYTE *)this + 696) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 77) = 1;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 78) = 1;
  MEMORY[0x1DF0ECA80]((char *)this + 400, "SIL");
  MEMORY[0x1DF0ECA80]((char *)this + 424, "null");
  *(_QWORD *)((char *)this + 700) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "sil");
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  (*(void (**)(ExtractFeaturesImpl *, void **, uint64_t, void **))(*(_QWORD *)this + 160))(this, v7, a2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  result = vaddq_s64(*(int64x2_t *)((char *)this + 680), vdupq_n_s64(1uLL));
  *(int64x2_t *)((char *)this + 680) = result;
  return result;
}

void sub_1DEA23A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Agglomerate::set<TokenExtractionItem>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10[2];
  __int128 v11;
  uint64_t v12;
  void *v13;

  v10[0] = (uint64_t *)&v13;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenExtractionItem>::ItemHolder(v10, a2);
    *(uint64_t **)(v4 + 8) = v10[1];
    v5 = (void **)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      operator delete(*v5);
    v6 = v11;
    *(_QWORD *)(v4 + 32) = v12;
    *(_OWORD *)v5 = v6;
  }
  else
  {
    v7 = v3;
    v8 = (_QWORD *)operator new();
    Agglomerate::ItemHolder<TokenExtractionItem>::ItemHolder(v8, a2);
    v9 = v7[5];
    v7[5] = (uint64_t)v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void sub_1DEA23B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C401FB1DE5ELL);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, char a2, const void **a3)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a3 + 23) >= 0)
    v5 = *((unsigned __int8 *)a3 + 23);
  else
    v5 = (size_t)a3[1];
  result = std::string::basic_string[abi:ne180100](a1, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a2;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *a3;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

_QWORD *Agglomerate::ItemHolder<TokenExtractionItem>::ItemHolder(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;

  v3 = *a2;
  *a1 = off_1EA923048;
  a1[1] = v3;
  v4 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)a2[1], a2[2]);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 1);
    v4->__r_.__value_.__r.__words[2] = a2[3];
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

uint64_t Agglomerate::ItemHolder<TokenExtractionItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923048;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void Agglomerate::ItemHolder<TokenExtractionItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923048;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1DF0ED014);
}

void ExtractFeaturesImpl::punctuation(std::string *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD *v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  do
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 16) + 16))(&v17, *(_QWORD *)(a2 + 16), a3);
    v6 = v17;
    if (!v17
    {
      v11 = 3;
    }
    else
    {
      v9 = v7[5];
      if (*(_DWORD *)(v9 + 8) == 1886809699)
      {
        if (*(char *)(v9 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v9 + 32), *(_QWORD *)(v9 + 40));
        }
        else
        {
          v10 = *(_OWORD *)(v9 + 32);
          this->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 48);
          *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
        }
        v11 = 1;
      }
      else
      {
        v13 = v8 == v12;
        if (v8 == v12)
          v11 = 2;
        else
          v11 = 3;
        if (v13)
          ++a3;
      }
    }
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  while (v11 == 2);
  if (v11 != 1)
    std::string::basic_string[abi:ne180100]<0>(this, &byte_1DEBD87CE);
}

void sub_1DEA23E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL ExtractFeaturesImpl::is_paragraph_break(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if ((_QWORD *)(a1 + 8) == v2)
    return 0;
  if (*(_DWORD *)(v2[5] + 8) != 1651664235)
    return 0;
  return (_QWORD *)(a1 + 8) != v3 && *(_DWORD *)(v3[5] + 12) == 1;
}

void WordFeatures::~WordFeatures(void **this)
{
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void ExtractFeaturesToTarget::~ExtractFeaturesToTarget(ExtractFeaturesToTarget *this)
{
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x1DF0ED014);
}

void ExtractFeaturesToTarget::extract_sentence_text(std::string **this)
{
  std::string::value_type *v2;
  std::string::size_type v3;
  std::string::value_type *v4;
  uint64_t v5;

  ExtractFeaturesImpl::extract_sentence_text((ExtractFeaturesImpl *)this);
  if (!*((_BYTE *)this + 8))
  {
    if (*((char *)this + 207) < 0)
    {
      v2 = (std::string::value_type *)this[23];
      v3 = (std::string::size_type)this[24];
    }
    else
    {
      v2 = (std::string::value_type *)(this + 23);
      v3 = *((unsigned __int8 *)this + 207);
    }
    FeatureExtractorOriginalText::set_original_text(this[14], v2, v3, 0);
    if (*((char *)this + 319) < 0)
    {
      v4 = (std::string::value_type *)this[37];
      v5 = (uint64_t)this[38];
    }
    else
    {
      v4 = (std::string::value_type *)(this + 37);
      v5 = *((unsigned __int8 *)this + 319);
    }
    FeatureExtractorOriginalText::set_normalized_text(this[14], v4, v5);
  }
}

uint64_t ExtractFeaturesToTarget::start_sentence(ExtractFeaturesToTarget *this)
{
  FeatureExtractorTarget *v1;
  FeatureExtractorTarget *v2;

  v1 = (FeatureExtractorTarget *)FeatureExtractorTarget::add_comment(this, "#HELLO\n#\n");
  v2 = (FeatureExtractorTarget *)FeatureExtractorTarget::add_comment(v1, "0:PHONEMES  1:MARKERS  2:USPHONEMES  3:PLOSIVES  4:USMARKERS  5:PRE_SYL_BND  6:POST_SYL_BND  7:PROM  8:SYL_POS_IN_WORD  9:WRD_POS_IN_PHRS  10:BND  11:SYL_POS_IN_SENT  12:NR_SYL_IN_PHRS  13:PHRS_POS_IN_SENT  14:FINE_SYL_POS_IN_PHRS  15:SYL_POS  16:SYL_TYPE  17:SYL_WORD  18:WORD_PHRS  19:PHON_POS_SYL  20:PHON_CNT_SYL  21:PITCH_MEAN  22:PITCH_MEAN_SCALED  23:PITCH_STDV  24:DUR_MEAN  25:DUR_STDV  26:SENT_TYPE  27:WORD_PRM  28:PHRASE_TYPE 29:TONE \n");
  return FeatureExtractorTarget::add_comment(v2, "#     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29\n");
}

size_t ExtractFeaturesToTarget::extract_word_features(ExtractFeaturesToTarget *this, const WordFeatures *a2)
{
  return FeatureExtractorTarget::add_word(a2, a2);
}

uint64_t ExtractFeaturesToTarget::extract_phon_pronunciation(uint64_t a1, std::string *__str, int a3)
{
  std::string *v4;
  int v6;
  std::string *v7;
  int v8;
  unsigned __int8 v9;
  NSObject *v10;
  const char *v11;
  std::string *v12;
  std::string *v13;
  FILE **v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  uint8_t buf[4];
  std::string *v50;
  uint64_t v51;

  v4 = __str;
  v51 = *MEMORY[0x1E0C80C00];
  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str->__r_.__value_.__l.__size_)
      goto LABEL_15;
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __str;
    if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
      goto LABEL_15;
  }
  v8 = v7->__r_.__value_.__s.__data_[0];
  if ((v8 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x400) != 0)
  {
    v9 = std::stoi(__str, 0, 10);
    goto LABEL_26;
  }
  if ((v6 & 0x80) == 0)
  {
    if (v6 != 1)
      goto LABEL_15;
LABEL_14:
    v9 = v4->__r_.__value_.__s.__data_[0];
    goto LABEL_26;
  }
  if (__str->__r_.__value_.__l.__size_ == 1)
  {
    v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_14;
  }
LABEL_15:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = v4;
    else
      v12 = (std::string *)v4->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v50 = v12;
  }
  if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = v4;
  else
    v13 = (std::string *)v4->__r_.__value_.__r.__words[0];
  v9 = -1;
LABEL_26:
  v14 = (FILE **)MEMORY[0x1E0C80C20];
  fputc(32, (FILE *)*MEMORY[0x1E0C80C20]);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", v9);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", *(_QWORD *)(a1 + 664) == *(_QWORD *)(a1 + 624) - 1);
  fprintf(*v14, " %5u", *(_QWORD *)(a1 + 664) == 0);
  fprintf(*v14, " %5u", 0);
  v15 = *(_QWORD *)(a1 + 648);
  if (v15)
    v16 = 2;
  else
    v16 = 1;
  if (v15 == *(_QWORD *)(a1 + 616) - 1)
    v17 = 3;
  else
    v17 = v16;
  fprintf(*v14, " %5u", v17);
  v18 = *(_QWORD *)(a1 + 600);
  if (v18 && (v19 = *(_QWORD *)(a1 + 640), v19 != *(_QWORD *)(v18 + 16) - 1))
  {
    if (v19)
    {
      v21 = 2;
    }
    else if (*(_QWORD *)(a1 + 632) || (v48 = *(_QWORD *)(a1 + 608)) == 0 || *(_QWORD *)(v48 + 24) == 1)
    {
      v21 = 3;
    }
    else
    {
      v21 = 1;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 608);
    if (v20 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v20 + 24) - 1)
      v21 = 4;
    else
      v21 = 5;
  }
  fprintf(*v14, " %5u", v21);
  if (*(_QWORD *)(a1 + 664) == *(_QWORD *)(a1 + 624) - 1)
  {
    if (*(_QWORD *)(a1 + 648) == *(_QWORD *)(a1 + 616) - 1)
    {
      v22 = *(_QWORD *)(a1 + 600);
      if (v22 && *(_QWORD *)(a1 + 640) != *(_QWORD *)(v22 + 16) - 1)
        v23 = 2;
      else
        v23 = 3;
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  fprintf(*v14, " %5u", v23);
  v24 = *(_QWORD *)(a1 + 608);
  if ((!v24 || *(_QWORD *)(a1 + 632) == *(_QWORD *)(v24 + 24) - 1)
    && ((v25 = *(_QWORD *)(a1 + 600)) == 0 || *(_QWORD *)(a1 + 640) == *(_QWORD *)(v25 + 16) - 1)
    && *(_QWORD *)(a1 + 648) == *(_QWORD *)(a1 + 616) - 1)
  {
    v26 = 3;
  }
  else if (*(_QWORD *)(a1 + 632) || *(_QWORD *)(a1 + 640) || *(_QWORD *)(a1 + 648))
  {
    v26 = 2;
  }
  else
  {
    v26 = 1;
  }
  fprintf(*v14, " %5u", v26);
  v27 = *(_QWORD *)(a1 + 600);
  if (v27)
    LODWORD(v27) = *(_DWORD *)(v27 + 8);
  fprintf(*v14, " %5u", v27);
  v28 = *(_QWORD *)(a1 + 608);
  v29 = v28 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v28 + 24) - 1;
  fprintf(*v14, " %5u", v29);
  v30 = *(_QWORD *)(a1 + 600);
  if (v30 && (v31 = *(_QWORD *)(a1 + 656), v32 = *(_QWORD *)(v30 + 8), v31 != v32 - 1))
  {
    if (v31 == v32 - 2)
    {
      v33 = 6;
    }
    else
    {
      if (v31 == 1)
        v44 = 1;
      else
        v44 = 5;
      if (v31)
        v33 = v44;
      else
        v33 = 0;
    }
  }
  else
  {
    v33 = 4;
  }
  fprintf(*v14, " %5u", v33);
  v34 = *(_QWORD *)(a1 + 600);
  if (v34 && ((v35 = *(_QWORD *)(a1 + 616), (v36 = *(_QWORD *)(v34 + 16) - 1) != 0) || v35 != 1))
  {
    v42 = *(_QWORD *)(a1 + 648);
    if (v42 == v35 - 1)
    {
      if (*(_QWORD *)(a1 + 640) == v36)
      {
        v43 = *(_QWORD *)(a1 + 608);
        if (v43 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v43 + 24) - 1)
          LODWORD(v37) = 1;
        else
          LODWORD(v37) = 3;
      }
      else
      {
        LODWORD(v37) = 6;
      }
    }
    else if (v42)
    {
      LODWORD(v37) = 5;
    }
    else
    {
      v37 = *(_QWORD *)(a1 + 640);
      if (v37)
        LODWORD(v37) = 4;
    }
  }
  else
  {
    LODWORD(v37) = 2;
  }
  fprintf(*v14, " %5u", v37);
  fprintf(*v14, " %5u", *(unsigned __int8 *)(a1 + 696));
  fprintf(*v14, " %5u", 0);
  v38 = *(_QWORD *)(a1 + 600);
  if (v38 && (v39 = *(_QWORD *)(a1 + 640), v39 != *(_QWORD *)(v38 + 16) - 1))
  {
    if (v39)
    {
      v41 = 1;
    }
    else if (*(_QWORD *)(a1 + 632))
    {
      v41 = 0;
    }
    else
    {
      v41 = 3;
    }
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 608);
    if (v40 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v40 + 24) - 1)
      v41 = 2;
    else
      v41 = 4;
  }
  fprintf(*v14, " %5u", v41);
  v45 = *(_QWORD *)(a1 + 664);
  if (v45 == *(_QWORD *)(a1 + 624) - 1)
  {
    if (*(_QWORD *)(a1 + 648) == *(_QWORD *)(a1 + 616) - 1)
      v46 = 4;
    else
      v46 = 3;
  }
  else if (v45)
  {
    v46 = 2;
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 648) != 0;
  }
  fprintf(*v14, " %5u", v46);
  fprintf(*v14, " %5u", *(_QWORD *)(a1 + 624));
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", a3);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", 0);
  fprintf(*v14, " %5u", *(_DWORD *)(a1 + 700));
  return fputc(10, *v14);
}

uint64_t ExtractFeaturesToTarget::generate_sentence_footer(ExtractFeaturesToTarget *this)
{
  return FeatureExtractorTarget::add_comment(this, "#\n# PRE_SYL_BND          : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# POST_SYL_BND         : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# PROM                 : NONE(0) SECONDARY(1) PRIMARY(2) SENT_ACC(3)\n#\n# SYL_POS_IN_WORD      : INITIAL(1) MIDDLE(2) FINAL(3)\n#\n# WRD_POS_IN_PHRS      : SENT_AND_PHRS_INITIAL(1) MIDDLE(2) SENT_MIDDLE_AND_PHRS_INITIAL(3) SENT_MIDDLE_AND_PHRS_FINAL(4) SENTALND_PHRS_FINAL(5)\n#\n# BND                  : NONE(0) SYLL(1) WORD(2) PHRS(3)\n#\n# SYL_POS_IN_SENT      : INITIAL(1) MIDDLE(2) FINAL(3)\n#\n# PHRS_POS_IN_SENT     : FINAL(1) MIDDLE(2)\n#\n"
           "# FINE_SYL_POS_IN_PHRS : FIRST(0) SECOND(1) FINAL(2) INITIAL(3) LAST(4) MIDDLE(5) PENULT(6) SILENCE(7)\n"
           "#\n"
           "# SYL_POS              : PHRS_INITIAL(0) PHRS_FINAL(1) PHRS_SINGLE(2) SENT_FINAL(3) WORD_INITIAL(4) WORD_MEDI"
           "AL(5) WORD_FINAL(6) PHRS_MEDIAL(7)\n"
           "#\n"
           "# SYL_TYPE             : UNSTR(0) STR(1) PA(2) FIRST_SENT_PA(3) FIRST_PHRS_PA(4) LAST_PHRS_PA(5) LAST_SENT_PA"
           "(6) 2NDSTR(7)\n"
           "#\n"
           "# SYL_WORD             : NO_ACC(0) BEF_ACC(1) ON_ACC(2) POST_ACC(3) POST_POST_ACC(4)\n"
           "#\n"
           "# WORD_PHRS            : PHRS_INITIAL(0) PHRS_MEDIAL(1) PHRS_FINAL(2) SENT_INITIAL(3) SENT_FINAL(4)\n"
           "#\n"
           "# PHON_POS_SYL         : WRD_INITIAL(0) SYL_INITIAL(1) SYL_MEDIAL(2) SYL_FINAL(3) WRD_FINAL(4)\n"
           "#\n"
           "# SENT_TYPE            : MONOWORD(0) QUESTION(1) STATEMENT(2) WORD(3) MAX(4)\n"
           "#\n"
           "# WORD_PRM             : UNACC(0) DEACC(1) ACC(2) EMPH(3) UNKNOWN(4)\n"
           "#\n"
           "# PHRASE_TYPE          : P(0) T(1) Y(2) UNKNOWN(3)\n"
           "#\n");
}

void ExtractFeaturesToTarget::end_sentence(ExtractFeaturesToTarget *this)
{
  fwrite("#GOODBYE\n", 9uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C20]);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 712));
}

uint64_t ExtractFeaturesToTarget::set_output(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[117] = a2;
  return result;
}

uint64_t `non-virtual thunk to'ExtractFeaturesToTarget::set_output(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 928) + 24))(a1 - 928);
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

void ExtractFeaturesImpl::~ExtractFeaturesImpl(ExtractFeaturesImpl *this)
{
  void **v2;

  *(_QWORD *)this = off_1EA91F5F8;
  if (*((char *)this + 919) < 0)
    operator delete(*((void **)this + 112));
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  if (*((char *)this + 871) < 0)
    operator delete(*((void **)this + 106));
  v2 = (void **)((char *)this + 824);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 800);
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 776);
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 712));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 472);
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  FrontendModule::~FrontendModule((void **)this);
}

void ExtractFeaturesToTable::~ExtractFeaturesToTable(ExtractFeaturesToTable *this)
{
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t ExtractFeaturesToTable::start_sentence(uint64_t this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v3;

  if (!*(_QWORD *)(this + 680))
  {
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(this + 936), (uint64_t)"phone stress tone syllcount wordcount si sf sm wbi wbf phrsi phrsf senti sentf prom senttype duration pos word punc", 115);
    std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
    v2 = std::locale::use_facet(&v3, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v3);
    std::ostream::put();
    return std::ostream::flush();
  }
  return this;
}

void sub_1DEA24A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t ExtractFeaturesToTable::extract_phon_pronunciation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  std::locale v42;

  v2 = a2;
  v4 = *(_QWORD **)(a1 + 936);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(v2 + 8);
  }
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, a2, v5);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v42, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v42, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v42, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  v10 = *(_QWORD **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v42, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v42, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  v13 = *(_QWORD **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v42, 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  v15 = *(_QWORD **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v42, 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v42, 1);
  std::ostream::operator<<();
  v17 = *(_QWORD **)(a1 + 936);
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v42, 1);
  v18 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v42, 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v42, 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v42, 1);
  v21 = *(char *)(v2 + 23);
  if (v21 < 0)
  {
    if (*(_QWORD *)(v2 + 8) != 3)
    {
LABEL_13:
      goto LABEL_14;
    }
    v2 = *(_QWORD *)v2;
  }
  else if (v21 != 3)
  {
    goto LABEL_13;
  }
  if (*(_WORD *)v2 != 26995 || *(_BYTE *)(v2 + 2) != 108)
    goto LABEL_13;
LABEL_14:
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v42, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v42.__locale_) = 32;
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v42, 1);
  v26 = *(char *)(a1 + 447);
  if (v26 >= 0)
    v27 = a1 + 424;
  else
    v27 = *(_QWORD *)(a1 + 424);
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 447);
  else
    v28 = *(_QWORD *)(a1 + 432);
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  LOBYTE(v42.__locale_) = 32;
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)&v42, 1);
  v31 = *(char *)(a1 + 423);
  if (v31 >= 0)
    v32 = a1 + 400;
  else
    v32 = *(_QWORD *)(a1 + 400);
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a1 + 423);
  else
    v33 = *(_QWORD *)(a1 + 408);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  LOBYTE(v42.__locale_) = 32;
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)&v42, 1);
  v36 = *(char *)(a1 + 471);
  if (v36 >= 0)
    v37 = a1 + 448;
  else
    v37 = *(_QWORD *)(a1 + 448);
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a1 + 471);
  else
    v38 = *(_QWORD *)(a1 + 456);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
  v40 = std::locale::use_facet(&v42, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale(&v42);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1DEA24F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToTable::end_sentence(ExtractFeaturesToTable *this)
{
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 712));
}

void ExtractFeaturesToPipeline::~ExtractFeaturesToPipeline(ExtractFeaturesToPipeline *this)
{
  void **v2;

  *(_QWORD *)this = &off_1EA920D48;
  v2 = (void **)((char *)this + 928);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA920D48;
  v2 = (void **)((char *)this + 928);
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v2);
  ExtractFeaturesImpl::~ExtractFeaturesImpl(this);
  JUMPOUT(0x1DF0ED014);
}

void ExtractFeaturesToPipeline::clear(ExtractFeaturesToPipeline *this)
{
  std::recursive_mutex *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v7[4];

  v2 = (std::recursive_mutex *)((char *)this + 712);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 712));
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)this + 116);
  v6 = 0u;
  memset(v7, 0, 26);
  v5 = 0x7FFFFFFF00000001;
  v7[1] = *((_QWORD *)this + 49);
  v3 = *((_QWORD *)this + 117);
  if (v3 >= *((_QWORD *)this + 118))
  {
    v4 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>((uint64_t *)this + 116, (uint64_t)&v5);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)this + 928, (uint64_t)&v5);
    v4 = v3 + 56;
  }
  *((_QWORD *)this + 117) = v4;
  ExtractFeaturesImpl::clear(this);
  std::recursive_mutex::unlock(v2);
}

void sub_1DEA250BC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_sentence_text(void **this)
{
  _OWORD *v2;
  std::string *v3;
  void **v4;
  void **v5;
  const std::string *v6;
  const std::string *v7;
  std::string *v8;
  GryphonAnalysis *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  void **v20;

  v19 = 0u;
  v2 = this + 97;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  std::vector<PhoneFeature>::__vdeallocate(this + 97);
  this[99] = 0;
  *v2 = 0u;
  memset(v13, 0, sizeof(v13));
  std::vector<WordFeature>::__vdeallocate(this + 100);
  this[101] = 0;
  this[100] = 0;
  this[102] = 0;
  memset(v14, 0, sizeof(v14));
  std::vector<Prompt>::__vdeallocate(this + 103);
  this[104] = 0;
  this[103] = 0;
  this[105] = 0;
  memset(v15, 0, sizeof(v15));
  v3 = (std::string *)(this + 106);
  if (*((char *)this + 871) < 0)
    operator delete(v3->__r_.__value_.__l.__data_);
  v3->__r_.__value_.__r.__words[0] = 0;
  this[107] = 0;
  this[108] = 0;
  BYTE7(v17[0]) = 0;
  LOBYTE(v16) = 0;
  v4 = this + 109;
  if (*((char *)this + 895) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)((char *)v17 + 8);
  this[111] = (void *)*((_QWORD *)&v17[1] + 1);
  HIBYTE(v17[1]) = 0;
  BYTE8(v17[0]) = 0;
  v5 = this + 112;
  if (*((char *)this + 919) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v18;
  this[114] = (void *)v19;
  BYTE7(v19) = 0;
  LOBYTE(v18) = 0;
  *((_BYTE *)this + 920) = 0;
  v20 = (void **)v15;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)v14;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)v13;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v20);
  ExtractFeaturesImpl::extract_sentence_text((ExtractFeaturesImpl *)this);
  if (!*((_BYTE *)this + 8))
  {
    v6 = (const std::string *)(this + 23);
    std::string::operator=((std::string *)(this + 109), (const std::string *)(this + 23));
    v7 = (const std::string *)(this + 37);
    v8 = std::string::operator=(v3, v7);
    v9 = (GryphonAnalysis *)GryphonAnalysis::Storage((GryphonAnalysis *)v8);
    if (*(_BYTE *)v9)
    {
      v10 = (std::string *)GryphonAnalysis::Storage(v9);
      v11 = std::string::operator=(v10 + 2, v6);
      v12 = (std::string *)GryphonAnalysis::Storage((GryphonAnalysis *)v11);
      std::string::operator=(v12 + 3, v7);
    }
  }
}

uint64_t ExtractFeaturesToPipeline::start_word_pronunciation(ExtractFeaturesToPipeline *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[4];

  v11 = 0u;
  memset(v12, 0, 26);
  v10 = 0x7FFFFFFF00000003;
  v2 = *((_QWORD *)this + 62);
  if (v2)
  {
    v3 = (_QWORD *)(v2 + 48);
    v4 = (uint64_t *)(v2 + 56);
  }
  else
  {
    v5 = *((_QWORD *)this + 61);
    v3 = (_QWORD *)(v5 + 8);
    v4 = (uint64_t *)(v5 + 16);
  }
  v6 = *v4;
  v12[1] = *v3;
  v12[2] = v6;
  v7 = (uint64_t *)((char *)this + 928);
  v8 = *((_QWORD *)this + 117);
  if (v8 >= *((_QWORD *)this + 118))
  {
    result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v7, (uint64_t)&v10);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v7, (uint64_t)&v10);
    result = v8 + 56;
  }
  *((_QWORD *)this + 117) = result;
  return result;
}

double ExtractFeaturesToPipeline::extract_pause(ExtractFeaturesImpl **this)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t *v5;
  ExtractFeaturesImpl *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int128 v9;
  _BYTE v10[26];

  v2 = ExtractFeaturesImpl::pause_duration(this[59]);
  if ((_DWORD)v2)
  {
    v4 = v2;
    *(_OWORD *)&v10[10] = 0u;
    v9 = 0u;
    *(_OWORD *)v10 = 0u;
    v8[0] = 7;
    v8[1] = v2;
    *(_OWORD *)&v10[8] = *(_OWORD *)((char *)this[61] + 8);
    v5 = (uint64_t *)(this + 116);
    v6 = this[117];
    if (v6 >= this[118])
    {
      v7 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v5, (uint64_t)v8);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v5, (uint64_t)v8);
      v7 = (uint64_t)v6 + 56;
    }
    this[117] = (ExtractFeaturesImpl *)v7;
    *(_QWORD *)&result = ExtractFeaturesImpl::extract_silence((ExtractFeaturesImpl *)this, v4).u64[0];
  }
  return result;
}

void ExtractFeaturesToPipeline::extract_mark(ExtractFeaturesToPipeline *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  _QWORD v7[4];

  *(_OWORD *)__p = 0u;
  memset(v7, 0, 26);
  v5 = 0x7FFFFFFF0000000ALL;
  std::string::operator=((std::string *)__p, (const std::string *)(*((_QWORD *)this + 61) + 24));
  *(_OWORD *)&v7[1] = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
  v2 = (uint64_t *)((char *)this + 928);
  v3 = *((_QWORD *)this + 117);
  if (v3 >= *((_QWORD *)this + 118))
  {
    v4 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v2, (uint64_t)&v5);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v2, (uint64_t)&v5);
    v4 = v3 + 56;
  }
  *((_QWORD *)this + 117) = v4;
  if (SHIBYTE(v7[0]) < 0)
    operator delete(__p[0]);
}

void sub_1DEA2544C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ExtractFeaturesToPipeline::extract_prompt(ExtractFeaturesToPipeline *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  _OWORD v41[2];
  uint64_t v42;
  void *v43[2];
  _BYTE v44[32];
  char *v45;
  char *v46;

  v2 = *((_QWORD *)this + 59);
  v4 = v3;
  if ((_QWORD *)(v2 + 8) == v3)
  {
    if (v4 != v8)
    {
      v9 = v8[5];
      *(_OWORD *)v43 = 0u;
      memset(v44, 0, 26);
      v42 = 0x7FFFFFFF00000009;
      std::string::operator=((std::string *)v43, (const std::string *)(v9 + 8));
      v44[24] = *(_BYTE *)(v9 + 37);
      HIDWORD(v42) = -1;
      *(_OWORD *)&v44[8] = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
      v10 = (uint64_t *)((char *)this + 928);
      v11 = *((_QWORD *)this + 117);
      if (v11 >= *((_QWORD *)this + 118))
      {
        v12 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v10, (uint64_t)&v42);
      }
      else
      {
        std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v10, (uint64_t)&v42);
        v12 = v11 + 56;
      }
      *((_QWORD *)this + 117) = v12;
      if ((v44[7] & 0x80000000) != 0)
      {
        v34 = v43[0];
LABEL_57:
        operator delete(v34);
      }
    }
  }
  else
  {
    v5 = v3[5];
    if ((_QWORD *)(v2 + 8) == v6)
      v7 = 0;
    else
      v7 = v6[5] + 8;
    v45 = 0;
    v46 = 0;
    *(_QWORD *)&v44[24] = 0;
    memset(v44, 0, 18);
    v43[1] = 0;
    v42 = 1749801491 * ((*((_QWORD *)this + 98) - *((_QWORD *)this + 97)) >> 3);
    LODWORD(v43[0]) = *(_DWORD *)(v5 + 32);
    std::string::operator=((std::string *)&v43[1], (const std::string *)(v5 + 40));
    if (v7)
      v13 = *(_BYTE *)(v7 + 29) != 0;
    else
      v13 = 0;
    v44[16] = v13;
    v44[17] = *(_BYTE *)(v5 + 8);
    v14 = *(_DWORD *)(v5 + 24);
    if (v14 < *(_DWORD *)(v5 + 28))
    {
      v15 = v45;
      do
      {
        if (v15 >= v46)
        {
          v17 = *(char **)&v44[24];
          v18 = (uint64_t)&v15[-*(_QWORD *)&v44[24]] >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = (uint64_t)&v46[-*(_QWORD *)&v44[24]];
          if ((uint64_t)&v46[-*(_QWORD *)&v44[24]] >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v21);
            v17 = *(char **)&v44[24];
            v15 = v45;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v14;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(_QWORD *)&v44[24] = v23;
          v45 = v16;
          v46 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v15 = v14;
          v16 = v15 + 4;
        }
        v45 = v16;
        ++v14;
        v15 = v16;
      }
      while (v14 < *(_DWORD *)(v5 + 28));
    }
    v25 = *((_QWORD *)this + 104);
    v26 = *((_QWORD *)this + 105);
    if (v25 >= v26)
    {
      v28 = *((_QWORD *)this + 103);
      v29 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - v28) >> 3);
      if (v29 + 1 > 0x38E38E38E38E38ELL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - v28) >> 3);
      v31 = 2 * v30;
      if (2 * v30 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x1C71C71C71C71C7)
        v32 = 0x38E38E38E38E38ELL;
      else
        v32 = v31;
      *((_QWORD *)&v41[0] + 1) = (char *)this + 840;
      if (v32)
        v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(v32);
      else
        v33 = 0;
      v39 = v32;
      v40[0] = (void *)(v32 + 72 * v29);
      v40[1] = v40[0];
      *(_QWORD *)&v41[0] = v32 + 72 * v33;
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>((uint64_t)v40[0], &v42);
      v40[1] = (char *)v40[0] + 72;
      std::vector<Prompt>::__swap_out_circular_buffer((uint64_t *)this + 103, &v39);
      v27 = *((_QWORD *)this + 104);
      std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(*((_QWORD *)this + 104), &v42);
      v27 = v25 + 72;
      *((_QWORD *)this + 104) = v27;
    }
    *((_QWORD *)this + 104) = v27;
    memset(v41, 0, 26);
    *(_OWORD *)v40 = 0u;
    v39 = 0x7FFFFFFF00000009;
    std::string::operator=((std::string *)v40, (const std::string *)(v5 + 40));
    if (v7)
      v35 = *(_BYTE *)(v7 + 29) != 0;
    else
      v35 = 0;
    BYTE8(v41[1]) = v35;
    BYTE9(v41[1]) = *(_BYTE *)(v5 + 8);
    HIDWORD(v39) = *(_DWORD *)(v5 + 32);
    *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
    v36 = (uint64_t *)((char *)this + 928);
    v37 = *((_QWORD *)this + 117);
    if (v37 >= *((_QWORD *)this + 118))
    {
      v38 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v36, (uint64_t)&v39);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v36, (uint64_t)&v39);
      v38 = v37 + 56;
    }
    *((_QWORD *)this + 117) = v38;
    if (SBYTE7(v41[0]) < 0)
      operator delete(v40[0]);
    if (*(_QWORD *)&v44[24])
    {
      v45 = *(char **)&v44[24];
      operator delete(*(void **)&v44[24]);
    }
    if ((v44[15] & 0x80000000) != 0)
    {
      v34 = v43[1];
      goto LABEL_57;
    }
  }
}

void sub_1DEA258B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__split_buffer<Prompt>::~__split_buffer((uint64_t)&a9);
  Prompt::~Prompt((Prompt *)&a19);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_word_features(ExtractFeaturesToPipeline *this, const std::string *a2)
{
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  std::string::size_type v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  std::string __p;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;

  v21 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  *(_OWORD *)v16 = 0u;
  v14[0] = *((_QWORD *)this + 84);
  v4 = (_DWORD *)*((_QWORD *)this + 74);
  if (v4)
    LODWORD(v4) = *v4;
  v14[1] = (_DWORD)v4;
  v15 = a2->__r_.__value_.__r.__words[0];
  std::string::operator=((std::string *)v16, a2 + 3);
  std::string::operator=((std::string *)&v17[1], a2 + 1);
  std::string::operator=((std::string *)v19, a2 + 4);
  std::string::operator=(&__p, a2 + 6);
  v5 = *((_QWORD *)this + 101);
  v6 = *((_QWORD *)this + 102);
  if (v5 >= v6)
  {
    v8 = *((_QWORD *)this + 100);
    v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v8) >> 3);
    if (v9 + 1 > 0x1E1E1E1E1E1E1E1)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6 - v8) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0xF0F0F0F0F0F0F0)
      v12 = 0x1E1E1E1E1E1E1E1;
    else
      v12 = v11;
    v27 = (char *)this + 816;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v12);
    else
      v13 = 0;
    v23 = v12;
    v24 = v12 + 136 * v9;
    v25 = v24;
    v26 = v12 + 136 * v13;
    WordFeature::WordFeature(v24, (uint64_t)v14);
    v25 += 136;
    std::vector<WordFeature>::__swap_out_circular_buffer((uint64_t *)this + 100, &v23);
    v7 = *((_QWORD *)this + 101);
    std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    WordFeature::WordFeature(*((_QWORD *)this + 101), (uint64_t)v14);
    v7 = v5 + 136;
    *((_QWORD *)this + 101) = v7;
  }
  *((_QWORD *)this + 101) = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[1]);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v16[0]);
}

void sub_1DEA25AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  std::__split_buffer<WordFeature>::~__split_buffer(v9 - 72);
  WordFeature::~WordFeature(&a9);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::extract_phon_pronunciation(uint64_t a1, const std::string *a2, unsigned int a3, std::string *__str)
{
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  std::string *v37;
  int data_low;
  int v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string v50;
  BOOL v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  void *v56[2];
  __int128 v57;
  std::string __p;
  __int128 v59;
  _BYTE v60[32];
  __int128 v61;
  int v62;
  void **v63;

  memset(&v50, 0, sizeof(v50));
  v51 = 0;
  *(_QWORD *)&v7 = 0x8000000080000000;
  *((_QWORD *)&v7 + 1) = 0x8000000080000000;
  v52 = v7;
  v53 = v7;
  v54 = 0x8000000080000000;
  v55 = 0u;
  *(_OWORD *)v56 = 0u;
  v57 = 0u;
  memset(&__p, 0, sizeof(__p));
  v59 = v7;
  *(_OWORD *)v60 = v7;
  v62 = 0x7FFFFFFF;
  *(_OWORD *)&v60[16] = v7;
  v61 = v7;
  std::string::operator=(&__p, __str);
  std::vector<MarkerRecord>::__vdeallocate((uint64_t *)&v55);
  v55 = *(_OWORD *)(a1 + 928);
  v56[0] = *(void **)(a1 + 944);
  *(_QWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  std::vector<MarkerRecord>::__clear[abi:ne180100]((uint64_t *)(a1 + 928));
  *(_QWORD *)&v52 = a3;
  DWORD2(v52) = *(unsigned __int8 *)(a1 + 696);
  v8 = *(_QWORD *)(a1 + 664);
  if (v8 == *(_QWORD *)(a1 + 624) - 1)
  {
    if (*(_QWORD *)(a1 + 648) == *(_QWORD *)(a1 + 616) - 1)
      v9 = 4;
    else
      v9 = 3;
  }
  else if (v8)
  {
    v9 = 2;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 648) != 0;
  }
  HIDWORD(v52) = v9;
  v10 = *(_QWORD *)(a1 + 600);
  if (v10 && ((v11 = *(_QWORD *)(a1 + 616), (v12 = *(_QWORD *)(v10 + 16) - 1) != 0) || v11 != 1))
  {
    v24 = *(_QWORD *)(a1 + 648);
    if (v24 == v11 - 1)
    {
      if (*(_QWORD *)(a1 + 640) == v12)
      {
        v25 = *(_QWORD *)(a1 + 608);
        if (v25 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v25 + 24) - 1)
          LODWORD(v13) = 1;
        else
          LODWORD(v13) = 3;
      }
      else
      {
        LODWORD(v13) = 6;
      }
    }
    else if (v24)
    {
      LODWORD(v13) = 5;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 640);
      if (v13)
        LODWORD(v13) = 4;
    }
  }
  else
  {
    LODWORD(v13) = 2;
  }
  LODWORD(v53) = v13;
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 488) + 48) + 276) - 7;
  if (v14 > 2)
    v15 = 1;
  else
    v15 = dword_1DED00264[v14];
  DWORD1(v53) = v15;
  std::string::operator=(&v50, a2);
  v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v16 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 3)
    {
LABEL_26:
      v18 = 0;
      goto LABEL_27;
    }
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else if (v16 != 3)
  {
    goto LABEL_26;
  }
  v18 = LOWORD(a2->__r_.__value_.__l.__data_) == 26995 && a2->__r_.__value_.__s.__data_[2] == 108;
LABEL_27:
  v51 = v18;
  v19 = *(_QWORD *)(a1 + 648);
  v20 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)&v59 = __PAIR64__(v20, v19);
  *(_DWORD *)v60 = 0;
  *((_QWORD *)&v59 + 1) = DWORD2(v52) != 0;
  if (v18)
  {
    v21 = 0;
    v22 = 0;
    *(_DWORD *)&v60[28] = 0;
    memset(&v60[4], 0, 20);
LABEL_58:
    v32 = 0;
    LODWORD(v61) = 0;
    v30 = *(_QWORD *)(a1 + 600);
    goto LABEL_59;
  }
  v23 = *(_QWORD *)(a1 + 664);
  *(_DWORD *)&v60[4] = v23 == 0;
  if (v23)
  {
    v22 = 0;
  }
  else
  {
    v22 = v19 == 0;
    HIDWORD(v59) = v22;
  }
  v26 = *(_QWORD *)(a1 + 624) - 1;
  *(_DWORD *)&v60[12] = v23 == v26;
  if (v23 == v26)
  {
    v21 = v19 == *(_QWORD *)(a1 + 616) - 1;
    *(_DWORD *)v60 = v21;
  }
  else
  {
    v21 = 0;
  }
  if (v23)
    v27 = v23 == v26;
  else
    v27 = 1;
  v28 = !v27;
  *(_DWORD *)&v60[8] = v28;
  *(_DWORD *)&v60[16] = 0;
  if (v19)
  {
    v29 = 0;
    *(_DWORD *)&v60[28] = 0;
  }
  else
  {
    *(_DWORD *)&v60[28] = v20 == 0;
    if (v20)
      v29 = 0;
    else
      v29 = *(_QWORD *)(a1 + 632) == 0;
  }
  *(_DWORD *)&v60[20] = v29;
  if (v19 != *(_QWORD *)(a1 + 616) - 1)
    goto LABEL_58;
  v30 = *(_QWORD *)(a1 + 600);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 16) - 1;
    LODWORD(v61) = v20 == v31;
    if (v20 != v31)
    {
      *(_DWORD *)&v60[24] = 0;
      goto LABEL_61;
    }
  }
  else
  {
    LODWORD(v61) = 1;
  }
  v48 = *(_QWORD *)(a1 + 608);
  if (v48)
    v32 = *(_QWORD *)(a1 + 632) == *(_QWORD *)(v48 + 24) - 1;
  else
    v32 = 1;
LABEL_59:
  *(_DWORD *)&v60[24] = v32;
  if (!v30)
  {
    v33 = 1;
LABEL_64:
    v34 = *(_QWORD *)(a1 + 608);
    if (v34 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v34 + 24) - 1)
      v35 = 4;
    else
      v35 = 5;
    DWORD1(v61) = v35;
    if (!v20)
      goto LABEL_79;
    if ((v33 & 1) != 0)
    {
LABEL_74:
      LODWORD(v20) = 2;
      goto LABEL_79;
    }
    v31 = *(_QWORD *)(v30 + 16) - 1;
    goto LABEL_73;
  }
  v31 = *(_QWORD *)(v30 + 16) - 1;
LABEL_61:
  if (v20 == v31)
  {
    v33 = 0;
    goto LABEL_64;
  }
  if (!v20)
  {
    if (*(_QWORD *)(a1 + 632) || (v49 = *(_QWORD *)(a1 + 608)) == 0 || *(_QWORD *)(v49 + 24) == 1)
      v36 = 3;
    else
      v36 = 1;
    LODWORD(v20) = 0;
    DWORD1(v61) = v36;
    goto LABEL_79;
  }
  DWORD1(v61) = 2;
LABEL_73:
  if (v20 == v31)
    goto LABEL_74;
  LODWORD(v20) = 1;
LABEL_79:
  *((_QWORD *)&v61 + 1) = __PAIR64__(v22, v20);
  v62 = v21;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v50.__r_.__value_.__l.__size_ != 3)
      goto LABEL_88;
    v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) != 3)
      goto LABEL_88;
    v37 = &v50;
  }
  data_low = LOWORD(v37->__r_.__value_.__l.__data_);
  v39 = v37->__r_.__value_.__s.__data_[2];
  if (data_low == 26995 && v39 == 108)
  {
    v44 = 3;
    goto LABEL_94;
  }
LABEL_88:
  v41 = *(_QWORD *)(a1 + 576);
  if ((_QWORD *)(v41 + 8) == v42
    || (v43 = *(_QWORD *)(a1 + 608)) != 0 && *(_QWORD *)(a1 + 632) != *(_QWORD *)(v43 + 24) - 1)
  {
    v44 = 0;
  }
  else
  {
    v44 = *(_DWORD *)(v42[5] + 8);
  }
LABEL_94:
  v45 = *(_DWORD *)(a1 + 700);
  *((_QWORD *)&v53 + 1) = __PAIR64__(*(_DWORD *)(a1 + 704), v44);
  LODWORD(v54) = v45;
  std::string::operator=((std::string *)&v56[1], &v50);
  v46 = *(_QWORD *)(a1 + 784);
  if (v46 >= *(_QWORD *)(a1 + 792))
  {
    v47 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>((uint64_t *)(a1 + 776), (const PhoneFeature *)&v50);
  }
  else
  {
    PhoneFeature::PhoneFeature(*(std::string **)(a1 + 784), (const PhoneFeature *)&v50);
    v47 = v46 + 216;
    *(_QWORD *)(a1 + 784) = v46 + 216;
  }
  *(_QWORD *)(a1 + 784) = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[1]);
  v63 = (void **)&v55;
  std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_1DEA260B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 784) = v10;
  PhoneFeature::~PhoneFeature(&a9);
  _Unwind_Resume(a1);
}

void ExtractFeaturesToPipeline::end_sentence(ExtractFeaturesToPipeline *this)
{
  const FrontendFeature *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  int v7;
  char *v8;
  unint64_t *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::__shared_weak_count *v51;
  char *v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  void *v55;
  uint8_t buf[8];
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = (ExtractFeaturesToPipeline *)((char *)this + 776);
  v3 = operator new(0xB0uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1EA932E10;
  FrontendFeature::FrontendFeature((FrontendFeature *)(v3 + 3), v2);
  *(_QWORD *)&v54 = v4;
  *((_QWORD *)&v54 + 1) = v3;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v7 = *((unsigned __int8 *)v3 + 168);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_INFO, "End of stream: %d", buf, 8u);
  }
  Diagnostics::log(6, "End of stream: %d", v6, *((unsigned __int8 *)v3 + 168));
  v8 = (char *)operator new(0x50uLL);
  *((_QWORD *)v8 + 1) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA932588;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_QWORD *)v8 + 9) = 0;
  v52 = v8 + 24;
  v53 = (std::__shared_weak_count *)v8;
  std::string::operator=((std::string *)v8 + 1, (const std::string *)((char *)this + 208));
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 712));
  v10 = operator new(0x30uLL);
  *(_OWORD *)((char *)v10 + 8) = 0u;
  *(_QWORD *)v10 = &off_1EA932198;
  v10[2] = 0u;
  *((_QWORD *)v10 + 3) = v10 + 2;
  v11 = (uint64_t)v10 + 24;
  v50 = (char *)v10 + 24;
  v51 = (std::__shared_weak_count *)v10;
  *(_QWORD *)buf = &v55;
  v13 = v12[5];
  if (v13)
  {
    *(_QWORD *)buf = &off_1EA9231E8;
    *(_QWORD *)&v57 = v8 + 24;
    *((_QWORD *)&v57 + 1) = v8;
    do
      v14 = __ldxr(v9);
    while (__stxr(v14 + 1, v9));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v13 + 8, &v57);
    *(_QWORD *)buf = &off_1EA9231E8;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v11 = (uint64_t)v50;
  }
  else
  {
    v18 = (_QWORD *)operator new();
    *v18 = &off_1EA9231E8;
    v18[1] = v8 + 24;
    v18[2] = v8;
    do
      v19 = __ldxr(v9);
    while (__stxr(v19 + 1, v9));
    v20 = v12[5];
    v12[5] = (uint64_t)v18;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  *(_QWORD *)buf = &v55;
  v22 = v21[5];
  if (v22)
  {
    *(_QWORD *)buf = &off_1EA923288;
    v57 = v54;
    if (*((_QWORD *)&v54 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v22 + 8, &v57);
    *(_QWORD *)buf = &off_1EA923288;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v11 = (uint64_t)v50;
  }
  else
  {
    v28 = operator new();
    v29 = v54;
    *(_QWORD *)v28 = &off_1EA923288;
    *(_OWORD *)(v28 + 8) = v29;
    if (*((_QWORD *)&v29 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = v21[5];
    v21[5] = v28;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  v33 = *(_QWORD *)(*((_QWORD *)this + 15) + 112);
  v48 = v11;
  v49 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 32))(v33, &v48);
  v36 = v49;
  if (v49)
  {
    v37 = (unint64_t *)&v49->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v53;
  if (v53)
  {
    v43 = (unint64_t *)&v53->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1DEA26580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t ExtractFeaturesToPipeline::update_pitch(ExtractFeaturesToPipeline *this, int a2)
{
  int v3;
  int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t result;
  _DWORD v8[2];
  __int128 v9;
  _QWORD v10[4];

  v9 = 0u;
  memset(v10, 0, 26);
  if (a2 >= 200)
    v3 = 200;
  else
    v3 = a2;
  if (v3 <= 50)
    v3 = 50;
  if (a2 >= 400)
    v4 = 400;
  else
    v4 = a2;
  if (v4 <= 1)
    v4 = 1;
  if (*((_BYTE *)this + 232))
    v3 = v4;
  v8[0] = 4;
  v8[1] = v3;
  *(_OWORD *)&v10[1] = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
  v5 = (uint64_t *)((char *)this + 928);
  v6 = *((_QWORD *)this + 117);
  if (v6 >= *((_QWORD *)this + 118))
  {
    result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v5, (uint64_t)v8);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v5, (uint64_t)v8);
    result = v6 + 56;
  }
  *((_QWORD *)this + 117) = result;
  return result;
}

uint64_t ExtractFeaturesToPipeline::update_rate(ExtractFeaturesToPipeline *this, int a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  __int128 v8;
  _QWORD v9[4];

  v8 = 0u;
  memset(v9, 0, 26);
  if (a2 >= 400)
    v3 = 400;
  else
    v3 = a2;
  if (v3 <= 50)
    v3 = 50;
  v7[0] = 5;
  v7[1] = v3;
  *(_OWORD *)&v9[1] = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
  v4 = (uint64_t *)((char *)this + 928);
  v5 = *((_QWORD *)this + 117);
  if (v5 >= *((_QWORD *)this + 118))
  {
    result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v4, (uint64_t)v7);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v4, (uint64_t)v7);
    result = v5 + 56;
  }
  *((_QWORD *)this + 117) = result;
  return result;
}

uint64_t ExtractFeaturesToPipeline::update_volume(ExtractFeaturesToPipeline *this, int a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  __int128 v8;
  _QWORD v9[4];

  v8 = 0u;
  memset(v9, 0, 26);
  if (a2 >= 200)
    v3 = 200;
  else
    v3 = a2;
  v7[0] = 6;
  v7[1] = v3 & ~(v3 >> 31);
  *(_OWORD *)&v9[1] = *(_OWORD *)(*((_QWORD *)this + 61) + 8);
  v4 = (uint64_t *)((char *)this + 928);
  v5 = *((_QWORD *)this + 117);
  if (v5 >= *((_QWORD *)this + 118))
  {
    result = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v4, (uint64_t)v7);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v4, (uint64_t)v7);
    result = v5 + 56;
  }
  *((_QWORD *)this + 117) = result;
  return result;
}

void ExtractFeaturesToPipeline::update_effect(_QWORD *a1, const std::string *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  _QWORD v8[4];

  *(_OWORD *)__p = 0u;
  memset(v8, 0, 26);
  v6 = 0x7FFFFFFF00000008;
  std::string::operator=((std::string *)__p, a2);
  *(_OWORD *)&v8[1] = *(_OWORD *)(a1[61] + 8);
  v3 = a1 + 116;
  v4 = a1[117];
  if (v4 >= a1[118])
  {
    v5 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v3, (uint64_t)&v6);
  }
  else
  {
    std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v3, (uint64_t)&v6);
    v5 = v4 + 56;
  }
  a1[117] = v5;
  if (SHIBYTE(v8[0]) < 0)
    operator delete(__p[0]);
}

void sub_1DEA26820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocator<Prompt>::construct[abi:ne180100]<Prompt,Prompt const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int16 v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), (const void *)a2[6], a2[7], (a2[7] - a2[6]) >> 2);
}

void sub_1DEA268C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void Prompt::~Prompt(Prompt *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t std::vector<Prompt>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Prompt>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>,std::reverse_iterator<Prompt*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void ExtractFeaturesPersistentModule::~ExtractFeaturesPersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t ExtractFeaturesImpl::ExtractFeaturesImpl(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  BOOL v23;
  _BOOL4 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE v45[8];
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)a1 = off_1EA91D8E0;
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = a3;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
    *(_QWORD *)a1 = off_1EA91DDD0;
    v12 = (unint64_t *)&a3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)a1 = off_1EA91DDD0;
  }
  *(_QWORD *)a1 = off_1EA91F5F8;
  v14 = FeatureExtractorTarget::retrieve();
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = a4;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  MEMORY[0x1DF0ECD80]();
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 104) = FrontendEnvironment::get_shared_component_instance<PhonemeEncoding>((uint64_t)a4);
  std::string::operator=((std::string *)(a1 + 160), a4);
  v15 = std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 144), a4[5].__r_.__value_.__l.__size_, a4[5].__r_.__value_.__r.__words[2]);
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v35, *v15);
  v16 = v35;
  if (v35)
    v16 = *(_DWORD *)(v35 + 60) == 3;
  *(_BYTE *)(a1 + 232) = v16;
  SharedObjectPool::get<VoiceConfig>(&v49, *(__int128 ***)(a1 + 144));
  if (v49)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 72))(&v47, v49, 1734567527, 2);
    if ((_BYTE)v47)
    {
      v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v47, "pipeline");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v45, (uint64_t)v17);
      v40 = v45;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0x8000000000000000;
      if (v45[0])
      {
        if (v45[0] == 2)
        {
          v42 = *v46;
        }
        else if (v45[0] == 1)
        {
          v41 = *v46;
        }
        else
        {
          v44 = 0;
        }
      }
      else
      {
        v44 = 1;
      }
      while (1)
      {
        v38 = 0;
        *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0uLL;
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
        v39 = 0x8000000000000000;
        if (v45[0] == 2)
        {
          v37.__r_.__value_.__r.__words[2] = v46[1];
        }
        else if (v45[0] == 1)
        {
          v37.__r_.__value_.__l.__size_ = (std::string::size_type)(v46 + 1);
        }
        else
        {
          v39 = 1;
        }
        v20 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v40, (unsigned __int8 **)&v37);
        if (v20)
          break;
        v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v40);
        v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v21, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v22, &v37);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v37.__r_.__value_.__l.__size_ == 22)
          {
            v27 = *(_QWORD *)v37.__r_.__value_.__l.__data_ != 0x72665F656772656DLL
               || *(_QWORD *)(v37.__r_.__value_.__r.__words[0] + 8) != 0x665F646E65746E6FLL
               || *(_QWORD *)(v37.__r_.__value_.__r.__words[0] + 14) != 0x657275746165665FLL;
            operator delete(v37.__r_.__value_.__l.__data_);
            if (!v27)
              break;
          }
          else
          {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
        }
        else if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) == 22)
        {
          v23 = v37.__r_.__value_.__r.__words[0] == 0x72665F656772656DLL
             && v37.__r_.__value_.__l.__size_ == 0x665F646E65746E6FLL;
          if (v23 && *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 6) == 0x657275746165665FLL)
            break;
        }
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v40);
      }
      v18 = !v20;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      v19 = v47;
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v19);
  }
  else
  {
    v18 = 0;
  }
  v28 = v50;
  if (v50)
  {
    v29 = (unint64_t *)&v50->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_BYTE *)(a1 + 233) = v18;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return a1;
}

void sub_1DEA26EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, std::recursive_mutex *a13, void **a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19 - 104);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  FrontendFeature::~FrontendFeature(v18);
  std::recursive_mutex::~recursive_mutex(a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 + 448);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 + 432);
  if (*(char *)(v16 + 559) < 0)
    operator delete(*a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 + 376);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 + 344);
  if (*(char *)(v16 + 471) < 0)
    operator delete(*(void **)(v16 + 448));
  if (*(char *)(v16 + 447) < 0)
    operator delete(*(void **)(v16 + 424));
  if (*(char *)(v16 + 423) < 0)
    operator delete(*(void **)(v17 + 272));
  if (*(char *)(v16 + 391) < 0)
    operator delete(*(void **)(v16 + 368));
  if (*(char *)(v16 + 367) < 0)
    operator delete(*(void **)(v16 + 344));
  if (*(char *)(v16 + 343) < 0)
    operator delete(*(void **)(v16 + 320));
  if (*(char *)(v16 + 319) < 0)
    operator delete(*(void **)(v16 + 296));
  if (*(char *)(v16 + 295) < 0)
    operator delete(*(void **)(v16 + 272));
  if (*(char *)(v16 + 271) < 0)
    operator delete(*a12);
  if (*(char *)(v16 + 231) < 0)
    operator delete(*(void **)(v16 + 208));
  if (*(char *)(v16 + 207) < 0)
    operator delete(*(void **)(v16 + 184));
  if (*(char *)(v16 + 183) < 0)
    operator delete(*a14);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17);
  FrontendModule::~FrontendModule((void **)v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9348C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9348C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToPipeline>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *ExtractFeaturesToTarget::ExtractFeaturesToTarget(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const std::string *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ExtractFeaturesImpl::ExtractFeaturesImpl((uint64_t)a1, a2, a3, a4);
  if (a3)
  {
    v8 = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = &off_1EA920728;
  a1[116] = &unk_1EA920820;
  a1[117] = MEMORY[0x1E0DE4A60];
  return a1;
}

void sub_1DEA27160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTarget>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9344D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTarget>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9344D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToTarget>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9341C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ExtractFeaturesToTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9341C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<ExtractFeaturesToTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void FrontendImpl::~FrontendImpl(FrontendImpl *this)
{
  FrontendImpl::~FrontendImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  *(_QWORD *)this = &off_1EA91CCD0;
  v2 = (char *)this + 56;
  v3 = *((_QWORD *)this + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 56));
  std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 56));
  v7 = 0uLL;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](*((_QWORD *)this + 5) + 128, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)&v7 = (char *)this + 160;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  *(_QWORD *)&v7 = (char *)this + 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t FrontendImpl::get_ve_instance(FrontendImpl *this)
{
  return *((_QWORD *)this + 3);
}

void FrontendImpl::synthesize(int64x2_t *a1, std::string *a2)
{
  int64x2_t *i;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  __int128 *v15;
  __int128 v16;
  char *v17;
  std::string::size_type v18;
  int v19;
  void *v20;
  std::string *p_buf;
  int64_t size;
  std::string *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  void *v28;
  char *v29;
  char *v30;
  _BOOL4 v31;
  NSObject *v32;
  const char *v33;
  void *p_p;
  void *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  unint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  const char *v67;
  void *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int64x2_t *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  __int128 v101;
  int64x2_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  int64x2_t *v107;
  int64x2_t *v108;
  BOOL v109;
  NSObject *v110;
  const char *v111;
  void *v112;
  void *v113;
  FrontendModuleBroker *v114;
  uint64_t v115;
  std::string::size_type v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t **v132;
  NSObject *v133;
  const char *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  char *v141;
  __int128 **v142;
  __int128 *v143;
  __int128 *v144;
  unint64_t v145;
  uint64_t v146;
  std::string *v147;
  std::string::size_type v148;
  void *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  std::string::size_type p_size;
  std::string::size_type v155;
  __int128 *v156;
  const std::string *v157;
  __int128 v158;
  __int128 v159;
  std::string *v160;
  std::string *v161;
  const std::string *v162;
  __int128 v163;
  __int128 v164;
  std::string *v165;
  std::string::size_type j;
  char *v167;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  int64x2_t *v196;
  uint64_t v197;
  _BOOL4 v198;
  Observable *v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  void *__p;
  std::__shared_weak_count *v204;
  char v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  std::string buf;
  uint64_t v213;
  int64x2_t *v214;
  uint64_t v215;

  i = a1;
  v215 = *MEMORY[0x1E0C80C00];
  v4 = a1[2].i64[1];
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(std::__shared_weak_count **)(v4 + 104);
  v201 = v5;
  v202 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = Frontend::check_hydra_fe(v5);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v13 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  v196 = i;
  if (!v9)
  {
    if (v13)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_DEFAULT, "Detected Hybrid FE in runtime.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Detected Hybrid FE in runtime.", v14);
    goto LABEL_213;
  }
  if (v13)
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_DEFAULT, "Detected Scalable FE in runtime.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(5, "Detected Scalable FE in runtime.", v14);
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v199, i[3].i64[1]);
  v15 = (__int128 *)i[7].i64[0];
  v197 = i[7].i64[1];
  if (v15 == (__int128 *)v197)
  {
    v31 = 0;
  }
  else
  {
    do
    {
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v16 = *v15;
        buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
      }
      v17 = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if ((char)v17 >= 0)
        v18 = (std::string::size_type)a2;
      else
        v18 = a2->__r_.__value_.__r.__words[0];
      v19 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
      v20 = (void *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        size = buf.__r_.__value_.__l.__size_;
      if (size)
      {
        v23 = a2;
        if ((char)v17 < 0)
          v17 = (char *)a2->__r_.__value_.__l.__size_;
        v24 = &v17[v18];
        if ((uint64_t)v17 >= size)
        {
          v27 = p_buf->__r_.__value_.__s.__data_[0];
          v28 = (void *)v18;
          do
          {
            v29 = &v17[-size];
            if (v29 == (char *)-1)
              break;
            v30 = (char *)memchr(v28, v27, (size_t)(v29 + 1));
            if (!v30)
              break;
            v25 = v30;
            if (!memcmp(v30, p_buf, size))
              goto LABEL_39;
            v28 = v25 + 1;
            v17 = (char *)(v24 - (v25 + 1));
          }
          while ((uint64_t)v17 >= size);
          v25 = v24;
LABEL_39:
          i = v196;
        }
        else
        {
          v25 = &v17[v18];
        }
        if (v25 == v24)
          v26 = -1;
        else
          v26 = (uint64_t)&v25[-v18];
        a2 = v23;
      }
      else
      {
        v26 = 0;
      }
      v31 = v26 != -1;
      if (v19 < 0)
        operator delete(v20);
      if (v26 != -1)
        break;
      v15 = (__int128 *)((char *)v15 + 24);
    }
    while (v15 != (__int128 *)v197);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "fallback list");
  if (v31)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v198 = v31;
    v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if (v205 < 0)
        p_p = __p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl(&dword_1DE3F6000, v32, OS_LOG_TYPE_DEBUG, "Fallback for %s", (uint8_t *)&buf, 0xCu);
    }
    v35 = &__p;
    if (v205 < 0)
      v35 = __p;
    Diagnostics::log(7, "Fallback for %s", v33, v35);
    v36 = &i[5].i64[1];
    if (!i[5].i64[1])
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&v196[1].i64[1], (__int128 *)&buf);
      v60 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v61 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&v196->i64[1], (__int128 *)&buf);
      v63 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v64 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
      {
        v68 = &__p;
        if (v205 < 0)
          v68 = __p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
        _os_log_impl(&dword_1DE3F6000, v66, OS_LOG_TYPE_DEBUG, "Fallback pipeline initialized for %s", (uint8_t *)&buf, 0xCu);
      }
      v69 = &__p;
      if (v205 < 0)
        v69 = __p;
      Diagnostics::log(7, "Fallback pipeline initialized for %s", v67, v69);
      v70 = (std::__shared_weak_count *)v196[4].i64[0];
      v209 = v196[3].i64[1];
      v210 = v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      GryphonPipelineFactory::nashvilleFE_backend_pipeline(&buf, &v209);
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&i[5].i64[1], (__int128 *)&buf);
      v73 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v74 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = v210;
      if (v210)
      {
        v77 = (unint64_t *)&v210->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (*v36)
      {
        v79 = (int64x2_t *)v196[8].i64[1];
        if (v79 != &v196[9])
        {
          do
          {
            (*(void (**)(__int128 *__return_ptr, int64x2_t *, int64x2_t *, uint64_t *))(v196->i64[0] + 48))(&v211, v196, v79 + 2, &v79[3].i64[1]);
            v80 = (_QWORD *)v196[10].i64[1];
            v81 = v196[11].u64[0];
            if ((unint64_t)v80 >= v81)
            {
              v87 = v196[10].i64[0];
              v88 = ((uint64_t)v80 - v87) >> 4;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v90 = v81 - v87;
              if (v90 >> 3 > v89)
                v89 = v90 >> 3;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
                v91 = 0xFFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              v214 = v196 + 11;
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v91);
              v94 = &v92[16 * v88];
              v95 = *((_QWORD *)&v211 + 1);
              *(_OWORD *)v94 = v211;
              if (v95)
              {
                v96 = (unint64_t *)(v95 + 8);
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
              }
              v99 = (_QWORD *)v196[10].i64[0];
              v98 = (_QWORD *)v196[10].i64[1];
              if (v98 == v99)
              {
                v102 = vdupq_n_s64((unint64_t)v98);
                v100 = &v92[16 * v88];
                v86 = (uint64_t *)v196;
              }
              else
              {
                v100 = &v92[16 * v88];
                do
                {
                  v101 = *((_OWORD *)v98 - 1);
                  v98 -= 2;
                  *((_OWORD *)v100 - 1) = v101;
                  v100 -= 16;
                  *v98 = 0;
                  v98[1] = 0;
                }
                while (v98 != v99);
                v86 = (uint64_t *)v196;
                v102 = v196[10];
              }
              v85 = v94 + 16;
              v86[20] = (uint64_t)v100;
              v86[21] = (uint64_t)(v94 + 16);
              *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v102;
              v103 = v86[22];
              v86[22] = (uint64_t)&v92[16 * v93];
              v213 = v103;
              buf.__r_.__value_.__r.__words[0] = v102.i64[0];
              std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              *v80 = v211;
              v82 = *((_QWORD *)&v211 + 1);
              v80[1] = *((_QWORD *)&v211 + 1);
              if (v82)
              {
                v83 = (unint64_t *)(v82 + 8);
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
              }
              v85 = v80 + 2;
              v86 = (uint64_t *)v196;
            }
            v86[21] = (uint64_t)v85;
            v104 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
            if (*((_QWORD *)&v211 + 1))
            {
              v105 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v107 = (int64x2_t *)v79->i64[1];
            if (v107)
            {
              do
              {
                v108 = v107;
                v107 = (int64x2_t *)v107->i64[0];
              }
              while (v107);
            }
            else
            {
              do
              {
                v108 = (int64x2_t *)v79[1].i64[0];
                v109 = v108->i64[0] == (_QWORD)v79;
                v79 = v108;
              }
              while (!v109);
            }
            v79 = v108;
          }
          while (v108 != &v196[9]);
        }
      }
    }
    v37 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v37 + 8) = 0u;
    *((_OWORD *)v37 + 2) = 0u;
    *(_QWORD *)v37 = &off_1EA932198;
    *((_QWORD *)v37 + 3) = v37 + 32;
    *(_QWORD *)&v211 = v37 + 24;
    *((_QWORD *)&v211 + 1) = v37;
    v38 = (char *)operator new(0x50uLL);
    *((_QWORD *)v38 + 1) = 0;
    v39 = (unint64_t *)(v38 + 8);
    *((_QWORD *)v38 + 2) = 0;
    *(_OWORD *)(v38 + 24) = 0u;
    *(_QWORD *)v38 = &off_1EA932588;
    *(_OWORD *)(v38 + 40) = 0u;
    *(_OWORD *)(v38 + 56) = 0u;
    *((_QWORD *)v38 + 9) = 0;
    *(_QWORD *)&v208 = v38 + 24;
    *((_QWORD *)&v208 + 1) = v38;
    std::string::operator=((std::string *)v38 + 1, a2);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
    v41 = v40[5];
    if (v41)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 24);
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
      do
        v42 = __ldxr(v39);
      while (__stxr(v42 + 1, v39));
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v41 + 8, (__int128 *)&buf.__r_.__value_.__r.__words[1]);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
      v43 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      i = v196;
      v31 = v198;
      if (buf.__r_.__value_.__r.__words[2])
      {
        v44 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v37 = (char *)*((_QWORD *)&v211 + 1);
      v46 = *v36;
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v211;
      if (!*((_QWORD *)&v211 + 1))
        goto LABEL_175;
    }
    else
    {
      v117 = (_QWORD *)operator new();
      *v117 = &off_1EA9231E8;
      v117[1] = v38 + 24;
      v117[2] = v38;
      do
        v118 = __ldxr(v39);
      while (__stxr(v118 + 1, v39));
      v119 = v40[5];
      v40[5] = (uint64_t)v117;
      i = v196;
      v31 = v198;
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      v46 = *v36;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v37 + 24);
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    }
    v120 = (unint64_t *)(v37 + 8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
LABEL_175:
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v46 + 32))(v46, &buf);
    v122 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v123 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    do
    {
      while (1)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v36 + 56))(&v207);
        v125 = v207;
        if (*((_QWORD *)&v207 + 1))
        {
          v126 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
            break;
        }
        if (!(_QWORD)v125)
          goto LABEL_187;
      }
      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 16))(*((_QWORD *)&v125 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v125 + 1));
    }
    while ((_QWORD)v125);
LABEL_187:
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v129 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v131 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v59 = __ldaxr(v131);
      while (__stlxr(v59 - 1, v131));
      goto LABEL_195;
    }
    goto LABEL_197;
  }
  v47 = (uint64_t)&i[1].i64[1];
  if (!i[1].i64[1])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v110 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v112 = &__p;
      if (v205 < 0)
        v112 = __p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v112;
      _os_log_impl(&dword_1DE3F6000, v110, OS_LOG_TYPE_DEBUG, "Reinit normal pipeline for leaving %s", (uint8_t *)&buf, 0xCu);
    }
    v113 = &__p;
    if (v205 < 0)
      v113 = __p;
    v114 = (FrontendModuleBroker *)Diagnostics::log(7, "Reinit normal pipeline for leaving %s", v111, v113);
    v115 = FrontendModuleBroker::instance(v114);
    i = v196;
    v116 = v196[2].u64[1];
    if (*(char *)(v116 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v116 + 48), *(_QWORD *)(v116 + 56));
      i = v196;
      v116 = v196[2].u64[1];
    }
    else
    {
      buf = *(std::string *)(v116 + 48);
    }
    v209 = 0;
    v210 = 0;
    FrontendModuleBroker::create(&v211, v115, (const char *)&buf, (uint64_t)&v209, v116);
    v172 = v210;
    if (v210)
    {
      v173 = (unint64_t *)&v210->__shared_owners_;
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v208 = v211;
    if (*((_QWORD *)&v211 + 1))
    {
      v175 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v47, &v208);
    v177 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v178 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    v206 = v211;
    if (*((_QWORD *)&v211 + 1))
    {
      v180 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v181 = __ldxr(v180);
      while (__stxr(v181 + 1, v180));
    }
    FrontendModule::head(&v207, &v206);
    v208 = v207;
    if (*((_QWORD *)&v207 + 1))
    {
      v182 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v183 = __ldxr(v182);
      while (__stxr(v183 + 1, v182));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&i->i64[1], &v208);
    v184 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v185 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (*((_QWORD *)&v207 + 1))
    {
      v188 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v190 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
    if (*((_QWORD *)&v206 + 1))
    {
      v191 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    v193 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v194 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
  }
  if (i[5].i64[1])
  {
    v49 = (_QWORD *)i[10].i64[0];
    v48 = (_QWORD *)i[10].i64[1];
    if (v49 != v48)
    {
      do
      {
        v50 = v49[1];
        *(_QWORD *)&v211 = *v49;
        *((_QWORD *)&v211 + 1) = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        (*(void (**)(int64x2_t *, __int128 *))(i->i64[0] + 64))(i, &v211);
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
        if (*((_QWORD *)&v211 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v49 += 2;
      }
      while (v49 != v48);
      v56 = (_QWORD *)i[10].i64[0];
      v49 = (_QWORD *)i[10].i64[1];
      if (v49 != v56)
      {
        do
        {
          v49 -= 2;
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v49);
        }
        while (v49 != v56);
        v49 = v56;
      }
    }
    i[10].i64[1] = (uint64_t)v49;
  }
  v211 = 0uLL;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&i[5].i64[1], &v211);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
LABEL_195:
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_197:
  if (v205 < 0)
    operator delete(__p);
  v132 = (uint64_t **)v199;
  if (v31)
  {
    if (v199)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 4;
      Observable::emit((uint64_t **)v199, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &buf);
    }
  }
  else if (v199)
  {
    LOBYTE(__p) = 1;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v133 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v133, OS_LOG_TYPE_DEFAULT, "Emitting tts.feature.hydra_frontend event", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "Emitting tts.feature.hydra_frontend event", v134);
    Observable::emit(v132, "tts.feature.hydra_frontend", &__p);
  }
  v135 = v200;
  if (!v200)
    goto LABEL_212;
  v136 = (unint64_t *)&v200->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
    if (v31)
      return;
  }
  else
  {
LABEL_212:
    if (v31)
      return;
  }
LABEL_213:
  (*(void (**)(uint64_t))(*(_QWORD *)i[1].i64[1] + 24))(i[1].i64[1]);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)i->i64[1] + 56))(i->i64[1], a2);
  i[6].i8[8] = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)i[1].i64[1] + 56))(i[1].i64[1]))
  {
    v138 = 0;
    do
    {
      if (i[6].i8[8])
        break;
      memset(&buf, 0, sizeof(buf));
      v139 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(i[2].i64[1] + 112) + 64))(*(_QWORD *)(i[2].i64[1] + 112));
      if (v139[1] != *v139)
      {
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(i[2].i64[1] + 112) + 56))(&__p);
        v140 = (char *)__p;
        if (__p)
        {
          if (v140 + 8 == v141)
          {
            p_size = buf.__r_.__value_.__l.__size_;
          }
          else
          {
            v142 = *(__int128 ***)(*((_QWORD *)v141 + 5) + 8);
            v144 = *v142;
            v143 = v142[1];
            v145 = 0x6DB6DB6DB6DB6DB7 * (((char *)v143 - (char *)*v142) >> 3);
            v146 = buf.__r_.__value_.__r.__words[2];
            v147 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if (0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0]) >> 3) >= v145)
            {
              v155 = buf.__r_.__value_.__l.__size_;
              if (0x6DB6DB6DB6DB6DB7
                 * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3) >= v145)
              {
                if (v144 == v143)
                {
                  p_size = buf.__r_.__value_.__r.__words[0];
                }
                else
                {
                  do
                  {
                    v161 = v147;
                    v163 = *v144;
                    v164 = v144[1];
                    v162 = (const std::string *)(v144 + 2);
                    *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v163;
                    *(_OWORD *)&v147->__r_.__value_.__r.__words[2] = v164;
                    v165 = (std::string *)((char *)v147 + 32);
                    std::string::operator=(v165, v162);
                    v144 = (__int128 *)&v162[1];
                    v147 = v165 + 1;
                  }
                  while (v144 != v143);
                  p_size = (std::string::size_type)&v161[2].__r_.__value_.__l.__size_;
                  v155 = buf.__r_.__value_.__l.__size_;
                }
                for (i = v196; v155 != p_size; v155 -= 56)
                {
                  if (*(char *)(v155 - 1) < 0)
                    operator delete(*(void **)(v155 - 24));
                }
                buf.__r_.__value_.__l.__size_ = p_size;
              }
              else
              {
                v156 = (__int128 *)((char *)v144
                                  + 8
                                  * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3));
                if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    v158 = *v144;
                    v159 = v144[1];
                    v157 = (const std::string *)(v144 + 2);
                    *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v158;
                    *(_OWORD *)&v147->__r_.__value_.__r.__words[2] = v159;
                    v160 = (std::string *)((char *)v147 + 32);
                    std::string::operator=(v160, v157);
                    v144 = (__int128 *)&v157[1];
                    v147 = v160 + 1;
                  }
                  while (v144 != v156);
                  v147 = (std::string *)buf.__r_.__value_.__l.__size_;
                }
                i = v196;
                p_size = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)&buf.__r_.__value_.__r.__words[2], v156, v143, (uint64_t)v147);
                buf.__r_.__value_.__l.__size_ = p_size;
              }
            }
            else
            {
              if (buf.__r_.__value_.__r.__words[0])
              {
                v148 = buf.__r_.__value_.__l.__size_;
                v149 = (void *)buf.__r_.__value_.__r.__words[0];
                if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    if (*(char *)(v148 - 1) < 0)
                      operator delete(*(void **)(v148 - 24));
                    v148 -= 56;
                  }
                  while ((std::string *)v148 != v147);
                  v149 = (void *)buf.__r_.__value_.__r.__words[0];
                }
                buf.__r_.__value_.__l.__size_ = (std::string::size_type)v147;
                operator delete(v149);
                v146 = 0;
                memset(&buf, 0, sizeof(buf));
              }
              if (v145 > 0x492492492492492)
                goto LABEL_306;
              v150 = 0x6DB6DB6DB6DB6DB7 * (v146 >> 3);
              v151 = 2 * v150;
              if (2 * v150 <= v145)
                v151 = v145;
              v152 = v150 >= 0x249249249249249 ? 0x492492492492492 : v151;
              if (v152 > 0x492492492492492)
LABEL_306:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<MarkerRecord>>(v152);
              buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
              buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0] + 56 * v153;
              p_size = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>((uint64_t)&buf.__r_.__value_.__r.__words[2], v144, v143, (uint64_t)buf.__r_.__value_.__l.__data_);
              buf.__r_.__value_.__l.__size_ = p_size;
              i = v196;
            }
          }
          for (j = buf.__r_.__value_.__r.__words[0]; j != p_size; j += 56)
            *(_QWORD *)(j + 24) += v138;
          v167 = (char *)__p;
          if (v167 + 8 != v168)
            v138 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 5) + 8) + 64)
                            - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 5) + 8) + 56)) >> 2;
        }
        v169 = v204;
        if (v204)
        {
          v170 = (unint64_t *)&v204->__shared_owners_;
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
      }
      __p = &buf;
      std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)i[1].i64[1] + 56))(i[1].i64[1]) & 1) != 0);
  }
}

void sub_1DEA2852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (*(char *)(v30 - 121) < 0)
    operator delete(*(void **)(v30 - 144));
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t FrontendImpl::stop(FrontendImpl *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  *((_BYTE *)this + 104) = 1;
  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t FrontendImpl::set_disable_prompts(FrontendImpl *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;

  v3 = *((_QWORD *)this + 5);
  v4 = v3 + 160;
  {
LABEL_5:
    result = *v5;
    goto LABEL_6;
  }
  v11 = &v10;
  result = operator new();
  v9 = v6[5];
  v5 = v6 + 5;
  v8 = v9;
  *(_QWORD *)result = &off_1EA922CE8;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = -1;
  *v5 = result;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    goto LABEL_5;
  }
LABEL_6:
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void FrontendImpl::load_resource(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  char v29;
  _OWORD buf[4];
  void *v31;
  char v32;
  uint64_t v33;
  int64x2_t *v34;
  std::__shared_weak_count *v35;
  _BYTE v36[408];
  _QWORD v37[20];

  v37[19] = *MEMORY[0x1E0C80C00];
  v8 = *(char *)(a3 + 23);
  if (v8 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 19)
      goto LABEL_13;
    v9 = *(uint64_t **)a3;
  }
  else
  {
    v9 = (uint64_t *)a3;
    if (v8 != 19)
      goto LABEL_13;
  }
  v10 = *v9;
  v11 = v9[1];
  v12 = *(uint64_t *)((char *)v9 + 11);
  if (v10 == 0x746163696C707061 && v11 == 0x2B736C702F6E6F69 && v12 == 0x6C6D782B736C702FLL)
  {
    std::ifstream::basic_ifstream(&v34);
    if ((v36[v34[-2].i64[1] + 16] & 5) != 0)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v26 = a2;
        else
          v26 = *(_QWORD *)a2;
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = v26;
      }
      if (*(char *)(a2 + 23) >= 0)
        v27 = a2;
      else
        v27 = *(_QWORD *)a2;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    std::ostream::operator<<();
    std::stringbuf::str();
    (*(void (**)(_QWORD *, void **))(*a1 + 72))(a1, &__p);
    if (v29 < 0)
      operator delete(__p);
    *(_QWORD *)&buf[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&buf[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (v32 < 0)
      operator delete(v31);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1DF0ECF6C](&v33);
    v34 = (int64x2_t *)*MEMORY[0x1E0DE4F40];
    *(int64x2_t **)((char *)&v34 + v34[-2].i64[1]) = *(int64x2_t **)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1DF0ECB94](v36);
    std::istream::~istream();
    MEMORY[0x1DF0ECF6C](v37);
    goto LABEL_44;
  }
LABEL_13:
  if (!a1[11])
  {
LABEL_44:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return;
  }
  v15 = a1[7];
  v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(&v34, v15);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  NashvilleFEPersistentModule::load_voice_resource((std::__shared_weak_count **)a4, v34, a2, a3);
  v21 = v35;
  if (v35)
  {
    v22 = (unint64_t *)&v35->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1DEA28AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a17 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  std::ifstream::~ifstream(&a51);
  _Unwind_Resume(a1);
}

void FrontendImpl::load_resource(_QWORD *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  const char *v29;
  uint8_t buf[8];
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (!a1[19])
  {
    v19 = a1[5];
    v20 = *(_QWORD *)(v19 + 96);
    v21 = *(std::__shared_weak_count **)(v19 + 104);
    v32 = v20;
    v33 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    v24 = Frontend::check_hydra_fe(v20);
    v25 = v24;
    if (!v21)
      goto LABEL_23;
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v25)
        goto LABEL_2;
    }
    else
    {
LABEL_23:
      if (!v24)
        goto LABEL_2;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_ERROR, "Hydra FE doesn't support loading resource from memory", buf, 2u);
    }
    Diagnostics::log(3, "Hydra FE doesn't support loading resource from memory", v29);
    goto LABEL_31;
  }
LABEL_2:
  if (!a1[11])
  {
LABEL_31:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    return;
  }
  v10 = a1[7];
  v11 = (std::__shared_weak_count *)a1[8];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(buf, v10);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  NashvilleFEPersistentModule::load_voice_resource((std::__shared_weak_count **)a5, *(int64x2_t **)buf, a2, a3, a4);
  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1DEA28D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void FrontendImpl::unload_resource(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12[2];
  std::__shared_weak_count *v13;

  if (a1[11])
  {
    v3 = a1[7];
    v4 = (std::__shared_weak_count *)a1[8];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(v12, v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    NashvilleFEPersistentModule::unload_resource(*(_QWORD **)v12, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8));
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1DEA28E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void FrontendImpl::add_pls_dictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void (***v11)(_QWORD, uint64_t);
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128);
  v4 = (std::recursive_mutex *)(v3 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 56));
  v5 = v3 + 32;
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932F28;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91E0B8;
    *(_QWORD *)&v16 = v6 + 1;
    *((_QWORD *)&v16 + 1) = v6;
    Agglomerate::set<std::shared_ptr<PLSHandler>>(v5, &v16);
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *(void (****)(_QWORD, uint64_t))(*(_QWORD *)v9 + 8);
  v10 = *(std::__shared_weak_count **)(*(_QWORD *)v9 + 16);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::recursive_mutex::unlock(v4);
  (**v11)(v11, a2);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1DEA28FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::recursive_mutex *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void FrontendImpl::register_resource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v6;
  std::string v7;
  std::string __p;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v6 = (uint64_t **)(a1 + 136);
    if (a1 + 144 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 136, (const void **)a2))
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v7 = *(std::string *)a2;
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        __p = *(std::string *)a3;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v6, (const void **)&v7.__r_.__value_.__l.__data_, (uint64_t)&v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1DEA290CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FrontendImpl::build_pipeline(std::string::size_type *this)
{
  uint64_t v2;
  std::string::size_type v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  __int128 v34;

  v2 = FrontendModuleBroker::instance((FrontendModuleBroker *)this);
  v3 = this[5];
  if (*(char *)(v3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v3 + 48), *(_QWORD *)(v3 + 56));
    v3 = this[5];
  }
  else
  {
    v33 = *(std::string *)(v3 + 48);
  }
  v31 = 0;
  v32 = 0;
  FrontendModuleBroker::create(&v34, v2, (const char *)&v33, (uint64_t)&v31, v3);
  v4 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v30 = v34;
  if (*((_QWORD *)&v34 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(this + 3), &v30);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v28 = v34;
  if (*((_QWORD *)&v34 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  FrontendModule::head(&v29, &v28);
  v30 = v29;
  if (*((_QWORD *)&v29 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(this + 1), &v30);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1DEA29354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void FrontendImpl::set_backend_pipeline(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(v2 + 120);
  *(_QWORD *)(v2 + 112) = v4;
  *(_QWORD *)(v2 + 120) = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void PersistentModuleFactory::get_persistent_module_from_pool<NashvilleFEPersistentModule>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(a1, *(_QWORD **)(v7 + 24));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1DEA294A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void PersistentModuleFactory::get_persistent_module<NashvilleFEPersistentModule>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (a2)
  {
    v3 = a2;
    while (1)
    {
      v4 = (const void *)v3[5];
      if (v4)
      {
        if (v5)
          break;
      }
      v3 = (_QWORD *)*v3;
      if (!v3)
        goto LABEL_6;
    }
    v6 = (std::__shared_weak_count *)v3[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      *a1 = v5;
      a1[1] = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      *a1 = v5;
      a1[1] = 0;
    }
  }
  else
  {
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
  }
}

BOOL Frontend::check_hydra_fe(uint64_t a1)
{
  uint64_t *v1;
  int64_t size;
  int v3;
  void *v4;
  std::string *v5;
  char *v6;
  std::string *v7;
  char *v8;
  _BOOL8 v11;
  int v12;
  std::string v14;
  uint64_t v15;
  uint64_t *v16;

  if (!a1)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(&v15, a1, 1717790311, 2);
  if ((_BYTE)v15)
  {
    v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v15, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v1, &v14);
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    v3 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
    v4 = (void *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v5 = &v14;
    }
    else
    {
      size = v14.__r_.__value_.__l.__size_;
      v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    v6 = (char *)v5 + size;
    if (size >= 12)
    {
      v7 = v5;
      do
      {
        v8 = (char *)memchr(v7, 112, size - 11);
        if (!v8)
          break;
        if (*(_QWORD *)v8 == 0x636E756F6E6F7270 && *((_DWORD *)v8 + 2) == 1852727141)
          goto LABEL_15;
        v7 = (std::string *)(v8 + 1);
        size = v6 - (char *)v7;
      }
      while (v6 - (char *)v7 > 11);
    }
    v8 = v6;
LABEL_15:
    v11 = v8 != v6 && v8 - (char *)v5 != -1;
    if (v3 < 0)
      operator delete(v4);
    v12 = v15;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v16, v12);
  return v11;
}

void sub_1DEA296C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v13;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v13 + 8), a13);
  _Unwind_Resume(a1);
}

void std::vector<TTSSynthesizer::Marker>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<TTSSynthesizer::Marker>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*,TTSSynthesizer::Marker*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 *v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 2;
    do
    {
      v7 = *(v6 - 1);
      *(_OWORD *)v4 = *(v6 - 2);
      *(_OWORD *)(v4 + 16) = v7;
      v8 = (std::string *)(v4 + 32);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v15;
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v4 + 48) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v10 = v6 - 2;
      v4 += 56;
      v15 = v4;
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while ((__int128 *)((char *)v10 + 56) != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1DEA29824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TTSSynthesizer::Marker>,TTSSynthesizer::Marker*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 56;
    }
  }
  return a1;
}

void sub_1DEA299A8(void *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  __clang_call_terminate(a1);
}

BOOL Frontend::should_use(char *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  _BOOL8 is_fe_module;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 *v13;
  char has_sane_pipeline;
  uint64_t *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  std::string __s;
  std::string __p;
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[8];
  std::string::size_type *v28;
  _BYTE v29[8];
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = (std::__shared_weak_count *)operator new(0x38uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933238;
  v2[1].__shared_weak_owners_ = 0;
  v2[2].__vftable = 0;
  v2[1].__shared_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91E548;
  v3 = &v2[1].__vftable;
  v21 = &v2[1].__vftable;
  v22 = v2;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  (*(void (**)(_QWORD *, std::string *))(*v3 + 80))(v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v3 + 16))(&__p, v3, 1717790311, 2);
  v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_7;
  v5 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
    if ((_QWORD)v4)
      goto LABEL_8;
  }
  else
  {
LABEL_7:
    if ((_QWORD)v4)
    {
LABEL_8:
      is_fe_module = 1;
      goto LABEL_9;
    }
  }
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*v21 + 72))(&v31, v21, 1734567527, 2);
  v13 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v29, (uint64_t)&v31);
  has_sane_pipeline = GryphonPipelineFactory::has_sane_pipeline(v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
  if ((has_sane_pipeline & 1) != 0)
  {
    v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v31, "pipeline");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v27, (uint64_t)v15);
    if (v27[0])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      v25 = 0;
      v26 = 0x8000000000000000;
      if (v27[0] == 2)
      {
        __p.__r_.__value_.__r.__words[2] = *v28;
      }
      else if (v27[0] == 1)
      {
        __p.__r_.__value_.__l.__size_ = *v28;
      }
      else
      {
        v26 = 0;
      }
      v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__p);
      v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v18, &__s);
      is_fe_module = GryphonPipelineFactory::is_fe_module(&__s);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v16 = v27[0];
    }
    else
    {
      v16 = 0;
      is_fe_module = 0;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28, v16);
  }
  else
  {
    is_fe_module = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31);
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_9:
  if (v22)
  {
    v8 = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return is_fe_module;
}

void sub_1DEA29C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v21 - 72), *(unsigned __int8 *)(v21 - 80));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v21 - 40), *(unsigned __int8 *)(v21 - 48));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL Frontend::has_forced_hydraFE(uint64_t a1)
{
  _BOOL8 v1;
  int v2;
  unsigned __int8 v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  uint64_t *v8;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(&v7, a1, 1717790311, 2);
  if ((_BYTE)v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "force_hydra_fe");
    v4 = 0;
    v1 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)&v7, (const void **)__p, &v4);
    if (v6 < 0)
      operator delete(__p[0]);
    v2 = v7;
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v2);
  return v1;
}

void sub_1DEA29D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int8 a16, uint64_t *a17)
{
  if (a15 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a17, a16);
  _Unwind_Resume(a1);
}

void Frontend::adapt_pipeline_for_nashvilleFE(unsigned __int8 *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  nlohmann::detail::exception *exception;
  unint64_t v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  _BYTE v21[8];
  uint64_t *v22;
  _QWORD v23[5];
  _BYTE v24[8];
  uint64_t *v25;
  _BYTE v26[8];
  uint64_t *v27;
  _BYTE v28[8];
  uint64_t *v29;
  void *__p;
  _QWORD *v31;
  void **p_p;
  char v33;
  _BYTE v34[8];
  uint64_t *v35;
  _BYTE *v36;
  char v37;
  std::string v38;
  char v39;
  _BYTE v40[8];
  _QWORD *v41;
  _BYTE *v42;
  char v43;
  __int128 v44;
  __int128 *v45;
  char v46;
  _BYTE v47[16];
  _BYTE *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "pipeline");
  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v17 = *a1;
    if (v17 > 9)
      v18 = "number";
    else
      v18 = off_1EA94C758[v17];
    std::string::basic_string[abi:ne180100]<0>(&v38, v18);
    v19 = std::string::insert(&v38, 0, "cannot use at() with ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v45 = (__int128 *)v19->__r_.__value_.__r.__words[2];
    v44 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(304, (uint64_t)&v44, exception);
  }
  v2 = std::map<std::string,std::string>::at(*((_QWORD *)a1 + 1), (const void **)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v28, v2);
  if (SHIBYTE(p_p) < 0)
    operator delete(__p);
  if (v28[0] == 2)
    v3 = (_BYTE *)*v29;
  else
    v3 = 0;
  v38.__r_.__value_.__l.__size_ = 0;
  v38.__r_.__value_.__s.__data_[0] = 3;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
  v39 = 1;
  v41 = 0;
  v40[0] = 3;
  v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>("prompt_be");
  v42 = v40;
  v43 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v44, (uint64_t)&v38, 2, 1, 2);
  v45 = &v44;
  v46 = 1;
  v31 = 0;
  LOBYTE(__p) = 3;
  v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v33 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, 0, 0, 0, 1);
  v34[0] = v24[0];
  v4 = v25;
  v24[0] = 0;
  v25 = 0;
  v35 = v4;
  v36 = v34;
  v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, (uint64_t)&__p, 2, 1, 2);
  v48 = v47;
  v49 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)&v44, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v23, v28, (uint64_t)v28, v3, (uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  for (i = 0; i != -64; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[i + 8], v47[i]);
  for (j = 0; j != -8; j -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v35)[j], v34[j * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  for (k = 0; k != -8; k -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v41)[k], v40[k * 8]);
  if (v28[0] == 2)
    v8 = (_BYTE *)*v29;
  else
    v8 = 0;
  v38.__r_.__value_.__l.__size_ = 0;
  v38.__r_.__value_.__s.__data_[0] = 3;
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>("id");
  v38.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
  v39 = 1;
  v41 = 0;
  v40[0] = 3;
  v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>("nashville_fe");
  v42 = v40;
  v43 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v44, (uint64_t)&v38, 2, 1, 2);
  v45 = &v44;
  v46 = 1;
  v31 = 0;
  LOBYTE(__p) = 3;
  v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>("params");
  p_p = &__p;
  v33 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, 0, 0, 0, 1);
  v34[0] = v24[0];
  v9 = v25;
  v24[0] = 0;
  v25 = 0;
  v35 = v9;
  v36 = v34;
  v37 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v47, (uint64_t)&__p, 2, 1, 2);
  v48 = v47;
  v49 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)&v44, 2, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::insert(v23, v28, (uint64_t)v28, v8, (uint64_t)v26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
  for (m = 0; m != -64; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[m + 8], v47[m]);
  for (n = 0; n != -8; n -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v35)[n], v34[n * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  for (ii = 0; ii != -8; ii -= 4)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v41)[ii], v40[ii * 8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v28);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pipeline");
  v14 = *(unsigned __int8 *)v13;
  *(_BYTE *)v13 = v21[0];
  v21[0] = v14;
  v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v22;
  v22 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
}

void sub_1DEA2A31C(_Unwind_Exception *a1, uint64_t a2, unsigned __int8 a3, ...)
{
  uint64_t *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, uint64_t *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)va1, v15);
  _Unwind_Resume(a1);
}

void sub_1DEA2A55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DEA2A5F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  uint64_t v38;

  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      if (SHIBYTE(a25) < 0)
        operator delete(a23);
      JUMPOUT(0x1DEA2A6D4);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void sub_1DEA2A654(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1DEA2A664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DEA2A66C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  uint64_t v38;

  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (SHIBYTE(a25) < 0)
        operator delete(a23);
      JUMPOUT(0x1DEA2A6D4);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void SharedObjectPool::inject<FrontendEnvironment>(_OWORD *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void **v22;
  __int128 v23;
  void *v24;

  v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v22 = &v24;
  v8 = v7[5];
  if (v8)
  {
    v10 = *a3;
    v9 = a3[1];
    v22 = (void **)&off_1EA9233E8;
    *(_QWORD *)&v23 = v10;
    *((_QWORD *)&v23 + 1) = v9;
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v8 + 8, &v23);
    v22 = (void **)&off_1EA9233E8;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = (_QWORD *)operator new();
    v18 = *a3;
    v17 = a3[1];
    *v16 = &off_1EA9233E8;
    v16[1] = v18;
    v16[2] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v7[5];
    v7[5] = (uint64_t)v16;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  *a1 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_1DEA2A834(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<FrontendEnvironment>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendEnvironment>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9233E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendEnvironment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FrontendEnvironment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendEnvironment>::__on_zero_shared(uint64_t a1)
{
  FrontendEnvironment::~FrontendEnvironment((FrontendEnvironment *)(a1 + 24));
}

void PronounceLetter::~PronounceLetter(PronounceLetter *this)
{
  PronounceLetter::~PronounceLetter(this);
  JUMPOUT(0x1DF0ED014);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1EA91E1F8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void PronounceLetter::pronounce(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string::size_type size;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  std::string::size_type v21;
  uint64_t v22;
  unsigned int v23;
  _WORD *p_p;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  std::string::size_type v29;
  char v30;
  std::string::size_type v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  std::string::size_type v40;
  void *v41[2];
  char v42;
  std::string v43;
  std::string v44;
  void *__p;
  int v46;
  unsigned __int8 v47;
  std::string v48;
  std::string __str;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  v52 = 0;
  v53 = 0;
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && (v53 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = a1[1];
    v52 = v7;
  }
  else
  {
    v7 = 0;
  }
  v50 = 0;
  v51 = 0;
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
  {
    v9 = 0;
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, &byte_1DEBD87CE);
    goto LABEL_19;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v51 = v9;
  if (!v9)
    goto LABEL_18;
  v10 = a1[3];
  v50 = v10;
  if (!v7 || !v10)
    goto LABEL_18;
  UTFString_Impl::to_upper((UTFString_Impl *)&v48, a2);
  v11 = std::string::append(&v48, "_");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "NN");
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v7 + 24))(&v48, v7, &__str, &__p);
  if ((char)v47 < 0)
    operator delete(__p);
  size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v48.__r_.__value_.__l.__size_;
  if (!size)
  {
    v19 = *(char *)(a2 + 23);
    v20 = v19 < 0;
    v21 = *(_QWORD *)a2;
    if (v19 >= 0)
      v21 = a2;
    v22 = *(unsigned __int8 *)(a2 + 23);
    if (v20)
      v22 = *(_QWORD *)(a2 + 8);
    v44.__r_.__value_.__r.__words[0] = v21;
    v44.__r_.__value_.__l.__size_ = v22 << 32;
    v23 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v44);
    UTFString::decompose_codepoint((uint64_t *)&__p, v23);
    if ((v47 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v47 & 0x80u) == 0)
      v25 = v47;
    else
      v25 = v46;
    if ((*p_p & 0xFC00) == 0xD800)
      v26 = 2;
    else
      v26 = 1;
    if (v26 != v25)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (v25)
      {
        v27 = 0;
        do
        {
          v28 = (unsigned __int16)p_p[(int)v27];
          if ((v28 & 0xFC00) == 0xD800)
            v28 = *(unsigned __int16 *)((char *)p_p + (((v27 << 32) + 0x100000000) >> 31)) + (v28 << 10) - 56613888;
          memset(&v44, 0, sizeof(v44));
          if (((1 << u_charType(v28)) & 0x1C0) != 0)
          {
            MEMORY[0x1DF0ECA80](&v44, "_");
            UTFString::push_back_codepoint<std::string>(&v44, v28);
          }
          else
          {
            UTFString::push_back_codepoint<std::string>(&v44, v28);
            std::string::push_back(&v44, 95);
          }
          std::string::basic_string[abi:ne180100]<0>(v41, "NN");
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v7 + 24))(&v43, v7, &v44, v41);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v44 = v43;
          *((_BYTE *)&v43.__r_.__value_.__s + 23) = 0;
          v43.__r_.__value_.__s.__data_[0] = 0;
          if (v42 < 0)
            operator delete(v41[0]);
          v29 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          v30 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          v31 = v44.__r_.__value_.__l.__size_;
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          else
            v32 = v44.__r_.__value_.__l.__size_;
          if (v32)
          {
            v33 = *(unsigned __int8 *)(a3 + 23);
            if ((v33 & 0x80u) != 0)
              v33 = *(_QWORD *)(a3 + 8);
            if (v33)
            {
              std::string::append((std::string *)a3, " . ");
              v29 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
              v31 = v44.__r_.__value_.__l.__size_;
              v30 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
            }
            if (v30 >= 0)
              v34 = &v44;
            else
              v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
            if (v30 >= 0)
              v35 = v29;
            else
              v35 = v31;
            std::string::append((std::string *)a3, (const std::string::value_type *)v34, v35);
            v30 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          }
          if (v30 < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          if ((p_p[(int)v27] & 0xFC00) == 0xD800)
            v36 = 2;
          else
            v36 = 1;
          v37 = v36 + v27;
          v27 = v37;
        }
        while (v37 != v25);
        v38 = *(char *)(a3 + 23);
        v39 = *(unsigned __int8 *)(a3 + 23);
        if (v38 < 0)
          v39 = *(_QWORD *)(a3 + 8);
        if (v39)
        {
          std::string::operator=((std::string *)a2, &__str);
LABEL_95:
          if ((char)v47 < 0)
            operator delete(__p);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          goto LABEL_99;
        }
        if (v38 < 0)
          operator delete(*(void **)a3);
      }
    }
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v44 = *(std::string *)a2;
    std::string::basic_string[abi:ne180100]<0>(v41, "NN");
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v10 + 24))(&v43, v10, &v44, v41);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    v48 = v43;
    *((_BYTE *)&v43.__r_.__value_.__s + 23) = 0;
    v43.__r_.__value_.__s.__data_[0] = 0;
    if (v42 < 0)
      operator delete(v41[0]);
    v40 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = v48.__r_.__value_.__l.__size_;
    if (v40)
      std::string::operator=((std::string *)a2, &__str);
    *(std::string *)a3 = v48;
    memset(&v48, 0, sizeof(v48));
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    goto LABEL_95;
  }
  std::string::operator=((std::string *)a2, &__str);
  *(std::string *)a3 = v48;
LABEL_99:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_19:
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = v53;
  if (v53)
  {
    v17 = (unint64_t *)&v53->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1DEA2AE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t v45;

  if (*(char *)(v44 + 23) < 0)
    operator delete(*(void **)v44);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v45 - 120);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v45 - 104);
  _Unwind_Resume(a1);
}

void PronounceSpell::~PronounceSpell(PronounceSpell *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1EA91DB40;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1EA91DB40;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1DF0ED014);
}

void PronounceSpell::pronounce(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  __int128 *i;
  __int128 *v10;
  __int128 v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  uint64_t v20;
  std::string __str;
  std::string v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD __dst[4];

  __dst[3] = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    v7 = 0;
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, &byte_1DEBD87CE);
    goto LABEL_47;
  }
  v7 = std::__shared_weak_count::lock(v5);
  v28 = v7;
  if (!v7)
    goto LABEL_46;
  v8 = *(_QWORD *)(a1 + 8);
  v27 = v8;
  if (!v8)
    goto LABEL_46;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  memset(&v26, 0, sizeof(v26));
  v24 = 0uLL;
  v25 = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)"_";
  v23.__r_.__value_.__l.__size_ = (std::string::size_type)"";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&v23);
  boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>(&v24, (uint64_t *)a2, __dst, 1);
  if (__dst[2] >= 0x11uLL && __dst[0])
    MEMORY[0x1DF0ECFFC](__dst[0], 0x1000C8077774924);
  v10 = (__int128 *)*((_QWORD *)&v24 + 1);
  for (i = (__int128 *)v24; i != v10; i = (__int128 *)((char *)i + 24))
  {
    if (*((char *)i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)i, *((_QWORD *)i + 1));
    }
    else
    {
      v11 = *i;
      v23.__r_.__value_.__r.__words[2] = *((_QWORD *)i + 2);
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      v22 = v23;
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v8 + 24))(&__str, v8, &v22, __p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v22;
      else
        v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        v14 = v22.__r_.__value_.__l.__size_;
      std::string::append(&v26, (const std::string::value_type *)v13, v14);
      v15 = *(unsigned __int8 *)(a3 + 23);
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(a3 + 8);
      if (v15)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, std::string *))(***(_QWORD ***)(a1 + 24) + 32))(__p, **(_QWORD **)(a1 + 24), a3, &__str);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v20;
      }
      else
      {
        std::string::operator=((std::string *)a3, &__str);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  v16 = *(unsigned __int8 *)(a3 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a3 + 8);
  if (v16)
    std::string::operator=(a2, &v26);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_47:
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DEA2B35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  if (*(_QWORD *)(v44 - 96) >= 0x11uLL)
  {
    v46 = *(_QWORD *)(v44 - 112);
    if (v46)
      MEMORY[0x1DF0ECFFC](v46, 0x1000C8077774924);
  }
  a21 = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a43 < 0)
    operator delete(__p);
  if (*(char *)(v43 + 23) < 0)
    operator delete(*(void **)v43);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v44 - 128);
  _Unwind_Resume(a1);
}

void VoiceConfigImpl::~VoiceConfigImpl(VoiceConfigImpl *this)
{
  VoiceConfigImpl::~VoiceConfigImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1EA91E548;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void VoiceConfigImpl::get_resource(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE *v14;
  void *__s[2];
  void *__p[2];
  char v18;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2, 2);
    if (*(_QWORD *)a4)
    {
      v9 = *(std::__shared_weak_count **)(a4 + 8);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      *(_OWORD *)__s = *(_OWORD *)(a4 + 16);
      if ((unint64_t)__s[1] - 160 >= 0xFFFFFFFFFFFFFFC0 && *(_QWORD *)__s[0] == 0x206E6F6973726576)
      {
        v14 = memchr(__s[0], 10, (size_t)__s[1]);
        if (v14)
        {
          if (*(_DWORD *)v14 == 1684631306 && v14[4] == 32)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "LFS pointer provided instead of actual file. Check your git-lfs install.");
            VoiceConfig::report_error(a2, 0, (uint64_t)__p);
            if (v18 < 0)
              operator delete(__p[0]);
          }
        }
      }
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      return;
    }
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a4);
    ++v7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  VoiceConfig::report_error(a2, a3, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

void sub_1DEA2B608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

double VoiceConfigImpl::get_broker_data@<D0>(VoiceConfigImpl *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  double result;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  while (v3 != v4)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
    if (*(_QWORD *)a2)
      return result;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a2);
    ++v3;
  }
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void VoiceConfigImpl::get_path(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 32))(*v7, a2, 2);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(_QWORD *)(a4 + 8))
        return;
      operator delete(*(void **)a4);
    }
    else if (*(_BYTE *)(a4 + 23))
    {
      return;
    }
    ++v7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  VoiceConfig::report_error(a2, a3, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
}

void sub_1DEA2B77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::get_prefix_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 16);
  while (v9 != v10)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 40))(*v9, a2, a3, 2);
    if (*(char *)(a5 + 23) < 0)
    {
      if (*(_QWORD *)(a5 + 8))
        return;
      operator delete(*(void **)a5);
    }
    else if (*(_BYTE *)(a5 + 23))
    {
      return;
    }
    ++v9;
  }
  VoiceConfig::report_error(a2, a4, a3);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
}

void VoiceConfigImpl::get_locale_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  _QWORD *v10;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 16);
  while (v9 != v10)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 48))(*v9, a2, a3, 2);
    if (*(char *)(a5 + 23) < 0)
    {
      if (*(_QWORD *)(a5 + 8))
        return;
      operator delete(*(void **)a5);
    }
    else if (*(_BYTE *)(a5 + 23))
    {
      return;
    }
    ++v9;
  }
  VoiceConfig::report_error(a2, a4, a3);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
}

void VoiceConfigImpl::get_locale_prefix_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  const char *v14;
  void *__p[2];
  char v16;

  v11 = *(_QWORD **)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 16);
  while (v11 != v12)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v11 + 56))(*v11, a2, a3, a4, 2);
    if (*(char *)(a6 + 23) < 0)
    {
      if (*(_QWORD *)(a6 + 8))
        return;
      operator delete(*(void **)a6);
    }
    else if (*(_BYTE *)(a6 + 23))
    {
      return;
    }
    ++v11;
  }
  if (*(char *)(a3 + 23) >= 0)
    v13 = (const char *)a3;
  else
    v13 = *(const char **)a3;
  if (*(char *)(a4 + 23) >= 0)
    v14 = (const char *)a4;
  else
    v14 = *(const char **)a4;
  StringFormatter::StringFormatter((StringFormatter *)__p, "%s][%s", v13, v14);
  VoiceConfig::report_error(a2, a5, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
}

void sub_1DEA2B9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::get_subconfig(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  while (v7 != v8)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 64))(*v7, a2, 2);
    if (*a4)
      return;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)a4);
    ++v7;
  }
  VoiceConfig::get_subconfig(a2, a3, a4);
}

void VoiceConfigImpl::get_json(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  if (v7 == v8)
  {
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
    VoiceConfig::report_error(a2, a3, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 72))(*v7, a2, 2);
      if (*(_BYTE *)a4)
        break;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a4 + 8), 0);
      if (++v7 == v8)
        goto LABEL_4;
    }
  }
}

void sub_1DEA2BB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfigImpl::add_search_dir(VoiceConfigImpl *this, const std::__fs::filesystem::path *a2)
{
  std::string::size_type size;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::error_code __ec;
  std::error_code v61;
  std::__fs::filesystem::path v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  size = HIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a2->__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    std::__fs::filesystem::__status(a2, &__ec);
    if (v65[0])
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (v65[0])
      {
        if (v65[0] != 255)
        {
          v5 = operator new();
          v6 = v5;
          *(_QWORD *)v5 = off_1EA91FB98;
          v7 = (_OWORD *)(v5 + 8);
          if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v5 + 8), a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
          }
          else
          {
            *v7 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
            *(_QWORD *)(v5 + 24) = *((_QWORD *)&a2->__pn_.__r_.__value_.__l + 2);
          }
          memset(v65, 0, 24);
          std::string::append[abi:ne180100]<char const*,0>((std::string *)v65, "eyrie", "");
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v65, (uint64_t)v7, &v62);
          if ((v65[23] & 0x80000000) != 0)
            operator delete(*(void **)v65);
          v61.__val_ = 0;
          v61.__cat_ = std::system_category();
          std::__fs::filesystem::__status(&v62, &v61);
          if (v65[0])
          {
            v61.__val_ = 0;
            v8 = 0;
            v61.__cat_ = std::system_category();
            if (v65[0] && v65[0] != 255)
            {
              MemoryMap::MemoryMap(v65, (uint64_t)&v62);
              if (*(_QWORD *)v65)
              {
                if ((unsigned __int16)**(_WORD **)&v65[16] > 1u)
                {
                  v43 = operator new();
                  v8 = (_QWORD *)v43;
                  v44 = *(_QWORD *)v65;
                  v63 = *(_OWORD *)v65;
                  if (*(_QWORD *)&v65[8])
                  {
                    v45 = (unint64_t *)(*(_QWORD *)&v65[8] + 8);
                    do
                      v46 = __ldxr(v45);
                    while (__stxr(v46 + 1, v45));
                    v47 = *((_QWORD *)&v63 + 1);
                    v64 = *(_OWORD *)&v65[16];
                    *(_QWORD *)v43 = &off_1EA91EA98;
                    *(_QWORD *)(v43 + 8) = v44;
                    *(_QWORD *)(v43 + 16) = v47;
                    if (v47)
                    {
                      v48 = (unint64_t *)(v47 + 8);
                      do
                        v49 = __ldxr(v48);
                      while (__stxr(v49 + 1, v48));
                    }
                  }
                  else
                  {
                    v64 = *(_OWORD *)&v65[16];
                    *(_QWORD *)v43 = &off_1EA91EA98;
                    *(_QWORD *)(v43 + 8) = v44;
                    *(_QWORD *)(v43 + 16) = 0;
                  }
                  *(_OWORD *)(v43 + 24) = v64;
                  v51 = (std::string *)(v43 + 40);
                  if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v51, v62.__pn_.__r_.__value_.__l.__data_, v62.__pn_.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__pn_.__r_.__value_.__l.__data_;
                    v8[7] = *((_QWORD *)&v62.__pn_.__r_.__value_.__l + 2);
                  }
                  v55 = v8[3];
                  v56 = v55 + *(unsigned __int16 *)(v55 + 6);
                  v8[8] = v56;
                  v54 = v56 + 12 * *(unsigned __int16 *)(v55 + 4);
                }
                else
                {
                  v9 = operator new();
                  v8 = (_QWORD *)v9;
                  v10 = *(_QWORD *)v65;
                  v63 = *(_OWORD *)v65;
                  if (*(_QWORD *)&v65[8])
                  {
                    v11 = (unint64_t *)(*(_QWORD *)&v65[8] + 8);
                    do
                      v12 = __ldxr(v11);
                    while (__stxr(v12 + 1, v11));
                    v13 = *((_QWORD *)&v63 + 1);
                    v64 = *(_OWORD *)&v65[16];
                    *(_QWORD *)v9 = &off_1EA91F490;
                    *(_QWORD *)(v9 + 8) = v10;
                    *(_QWORD *)(v9 + 16) = v13;
                    if (v13)
                    {
                      v14 = (unint64_t *)(v13 + 8);
                      do
                        v15 = __ldxr(v14);
                      while (__stxr(v15 + 1, v14));
                    }
                  }
                  else
                  {
                    v64 = *(_OWORD *)&v65[16];
                    *(_QWORD *)v9 = &off_1EA91F490;
                    *(_QWORD *)(v9 + 8) = v10;
                    *(_QWORD *)(v9 + 16) = 0;
                  }
                  *(_OWORD *)(v9 + 24) = v64;
                  v50 = (std::string *)(v9 + 40);
                  if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v50, v62.__pn_.__r_.__value_.__l.__data_, v62.__pn_.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__pn_.__r_.__value_.__l.__data_;
                    v8[7] = *((_QWORD *)&v62.__pn_.__r_.__value_.__l + 2);
                  }
                  v52 = v8[3];
                  v53 = v52 + *(unsigned __int16 *)(v52 + 6);
                  v8[8] = v53;
                  v54 = v53 + 8 * *(unsigned __int16 *)(v52 + 4);
                }
                v8[9] = v54;
                std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v63);
              }
              else
              {
                v8 = 0;
              }
              v57 = *(std::__shared_weak_count **)&v65[8];
              if (*(_QWORD *)&v65[8])
              {
                v58 = (unint64_t *)(*(_QWORD *)&v65[8] + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
            }
          }
          else
          {
            v8 = 0;
          }
          if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__pn_.__r_.__value_.__l.__data_);
          v17 = (uint64_t *)*((_QWORD *)this + 2);
          v16 = *((_QWORD *)this + 3);
          if ((unint64_t)v17 >= v16)
          {
            v19 = *((_QWORD *)this + 1);
            v20 = ((uint64_t)v17 - v19) >> 3;
            if ((unint64_t)(v20 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v21 = v16 - v19;
            v22 = v21 >> 2;
            if (v21 >> 2 <= (unint64_t)(v20 + 1))
              v22 = v20 + 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
            else
              v24 = 0;
            v25 = (uint64_t *)(v23 + 8 * v20);
            v26 = v23 + 8 * v24;
            *v25 = v6;
            v18 = v25 + 1;
            v28 = (char *)*((_QWORD *)this + 1);
            v27 = (char *)*((_QWORD *)this + 2);
            if (v27 != v28)
            {
              do
              {
                v29 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *--v25 = v29;
              }
              while (v27 != v28);
              v27 = (char *)*((_QWORD *)this + 1);
            }
            *((_QWORD *)this + 1) = v25;
            *((_QWORD *)this + 2) = v18;
            *((_QWORD *)this + 3) = v26;
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v17 = v6;
            v18 = v17 + 1;
          }
          *((_QWORD *)this + 2) = v18;
          if (v8)
          {
            v30 = *((_QWORD *)this + 3);
            if ((unint64_t)v18 >= v30)
            {
              v32 = *((_QWORD *)this + 1);
              v33 = ((uint64_t)v18 - v32) >> 3;
              if ((unint64_t)(v33 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v34 = v30 - v32;
              v35 = v34 >> 2;
              if (v34 >> 2 <= (unint64_t)(v33 + 1))
                v35 = v33 + 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v36);
              else
                v37 = 0;
              v38 = (_QWORD *)(v36 + 8 * v33);
              v39 = v36 + 8 * v37;
              *v38 = v8;
              v31 = v38 + 1;
              v41 = (char *)*((_QWORD *)this + 1);
              v40 = (char *)*((_QWORD *)this + 2);
              if (v40 != v41)
              {
                do
                {
                  v42 = *((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *--v38 = v42;
                }
                while (v40 != v41);
                v40 = (char *)*((_QWORD *)this + 1);
              }
              *((_QWORD *)this + 1) = v38;
              *((_QWORD *)this + 2) = v31;
              *((_QWORD *)this + 3) = v39;
              if (v40)
                operator delete(v40);
            }
            else
            {
              *v18 = v8;
              v31 = v18 + 1;
            }
            *((_QWORD *)this + 2) = v31;
          }
        }
      }
    }
  }
}

void sub_1DEA2C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  MEMORY[0x1DF0ED014](v21, 0x10F3C4013766346);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23 - 64);
  if (a19 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

void VoiceConfigEyrie::~VoiceConfigEyrie(void **this)
{
  VoiceConfigEyrie::~VoiceConfigEyrie(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *this = &off_1EA91EA98;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

unint64_t VoiceConfigEyrie::get_resource@<X0>(VoiceConfigEyrie *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unsigned int v6;

  result = VoiceConfigEyrie::get_section(a1, a2);
  if (HIDWORD(result))
    return (unint64_t)MemoryMap::subrange((_QWORD *)a3, (_QWORD *)a1 + 1, HIDWORD(result), v6);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double VoiceConfig::get_broker_data@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void VoiceConfig::get_path(unsigned int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  VoiceConfig::report_error(a1, a2, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1DEA2C238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfig::get_prefix_path(unsigned int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, _QWORD *a4@<X8>)
{
  VoiceConfig::report_error(a1, a3, a2);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void VoiceConfig::get_locale_path(unsigned int a1@<W1>, int a2@<W3>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  VoiceConfig::report_error(a1, a2, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1DEA2C2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfig::get_locale_prefix_path(unsigned int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, _QWORD *a5@<X8>)
{
  const char *v8;
  const char *v9;
  void *__p[2];
  char v11;

  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  StringFormatter::StringFormatter((StringFormatter *)__p, "%s][%s", v8, v9);
  VoiceConfig::report_error(a1, a4, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_1DEA2C39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfig::get_subconfig(uint64_t a1@<X1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  const char *v5;
  NSObject *v6;
  const char *v7;
  void **v8;
  void **v9;
  void *exception;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 != 2)
  {
    if (*(char *)(a1 + 23) >= 0)
      v5 = (const char *)a1;
    else
      v5 = *(const char **)a1;
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v11 = __p;
      if (v13 < 0)
        v11 = (void **)__p[0];
      StringFormatter::StringFormatter((StringFormatter *)buf, "%s", (const char *)v11);
      MEMORY[0x1DF0EC99C](exception, buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v8 = __p;
      if (v13 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v15 = v8;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    v9 = __p;
    if (v13 < 0)
      v9 = (void **)__p[0];
    Diagnostics::log(3, "%s", v7, v9);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_1DEA2C56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void VoiceConfigEyrie::get_json(VoiceConfigEyrie *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t section;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  __int128 v18;
  char v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  void *v22[2];
  __int128 v23;
  __int16 v24;
  char v25[8];
  uint64_t *v26;
  void *__p[2];
  char v28;
  std::string v29;
  __int128 v30;
  std::string::size_type v31;
  std::string v32;
  std::exception __str;
  uint64_t v34;
  void *v35[2];
  char v36;

  section = VoiceConfigEyrie::get_section(a1, a2);
  if (!HIDWORD(section))
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  v8 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + HIDWORD(section));
  v25[0] = 0;
  v26 = 0;
  v21 = (unsigned __int8 *)v25;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v24 = 256;
  v16 = v8;
  v17 = &v8[v6];
  v18 = xmmword_1DEC43890;
  v19 = 1;
  v20 = &v21;
  if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal((uint64_t)&v16, 1, v7) & 1) == 0)goto LABEL_17;
  v9 = ++*((_QWORD *)&v18 + 1);
  if (v16 != v17)
  {
    v10 = *v16++;
    *(_QWORD *)&v18 = v10;
    v11 = (uint64_t)v20;
    BYTE2(__str.__vftable) = 0;
    LOWORD(__str.__vftable) = 0;
    snprintf((char *)&__str, 3uLL, "%.2hhX", v10);
    std::string::basic_string[abi:ne180100]<0>(v35, (char *)&__str);
    v12 = *((_QWORD *)&v18 + 1);
    BYTE2(__p[0]) = 0;
    LOWORD(__p[0]) = 0;
    snprintf((char *)__p, 3uLL, "%.2hhX", v18);
    std::string::basic_string[abi:ne180100]<0>(&v29, (char *)__p);
    v13 = std::string::insert(&v29, 0, "expected end of input; last byte: 0x");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v31 = v13->__r_.__value_.__r.__words[2];
    v30 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "value");
    nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v32, (uint64_t)&v30, (uint64_t)__p);
    nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__str, 110, v12, (uint64_t)&v32);
    v15 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v11, v9, (uint64_t)v35, (uint64_t)&__str);
    __str.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
    MEMORY[0x1DF0ECA08](&v34);
    std::exception::~exception(&__str);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v36 < 0)
    {
      operator delete(v35[0]);
      if (v15)
        goto LABEL_15;
    }
    else if (v15)
    {
      goto LABEL_15;
    }
LABEL_17:
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_18;
  }
LABEL_15:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a3, (uint64_t)v25);
LABEL_18:
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
}

void sub_1DEA2C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t **v36;

  if (__p)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v36, a23);
  _Unwind_Resume(a1);
}

void VoiceConfig::add_search_dir(VoiceConfig *this, const std::__fs::filesystem::path *a2)
{
  void *exception;
  _BYTE v3[24];

  exception = __cxa_allocate_exception(0x10uLL);
  StringFormatter::StringFormatter((StringFormatter *)v3, "add_search_dir only makes sense for VoiceConfig");
  MEMORY[0x1DF0EC99C](exception, v3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
}

void sub_1DEA2C950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t VoiceConfigEyrie::get_section(VoiceConfigEyrie *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *p_p;
  _QWORD *v21;
  std::string *p_buf;
  const char *v23;
  std::string *v24;
  _QWORD *v25;
  NSObject *v27;
  int v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  std::string *v35;
  const char *v36;
  std::string *v37;
  _QWORD *v38;
  std::string __p;
  std::string v40;
  unsigned int v41;
  int v42;
  std::string buf;
  _QWORD *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = bswap32(a2);
  v41 = v2;
  v42 = 0;
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  if (v3 == v4)
    goto LABEL_34;
  v7 = 0xAAAAAAAAAAAAAAABLL * (v3 - v4);
  do
  {
    v8 = v7 >> 1;
    v9 = &v4[3 * (v7 >> 1)];
    v11 = *v9;
    v10 = v9 + 3;
    v7 += ~(v7 >> 1);
    if (bswap32(v11) < a2)
      v4 = v10;
    else
      v7 = v8;
  }
  while (v7);
  if (v4 == v3 || v2 != *v4)
  {
LABEL_34:
    v4 = &v41;
    return *(_QWORD *)v4;
  }
  v12 = *((unsigned __int8 *)v4 + 11);
  if (v12 >= 0xF0)
  {
    v13 = (_DWORD)v4 - *((_DWORD *)this + 6);
    v14 = (v13 + 4);
    v42 = v13 + 4;
    v15 = v12 & 0xF;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      name_from_id(&v40, a2);
      v17 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
      v18 = v40.__r_.__value_.__r.__words[0];
      symbol_name_from_id(&__p, a2);
      v19 = &v40;
      if (v17 < 0)
        v19 = (std::string *)v18;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      v21 = (_QWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
        v21 = (_QWORD *)*v21;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v44 = v21;
      v45 = 1024;
      v46 = v14;
      v47 = 1024;
      v48 = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
    }
    p_buf = &buf;
    name_from_id(&buf, a2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&v40, a2);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v40;
    else
      v24 = (std::string *)v40.__r_.__value_.__r.__words[0];
    v25 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v25 = (_QWORD *)*v25;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v40, a2);
    v28 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
    v29 = v40.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a2);
    v30 = &v40;
    if (v28 < 0)
      v30 = (std::string *)v29;
    v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &__p;
    v32 = (_QWORD *)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      v32 = (_QWORD *)*v32;
    v33 = v4[1];
    v34 = v4[2];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v31;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v44 = v32;
    v45 = 1024;
    v46 = v33;
    v47 = 1024;
    v48 = v34;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v35 = &buf;
  name_from_id(&buf, a2);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)buf.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&v40, a2);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v40;
  else
    v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
  v38 = (_QWORD *)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    v38 = (_QWORD *)*v38;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  return *(_QWORD *)v4;
}

void sub_1DEA2CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 *v4;
  std::string::size_type v5;
  uint64_t cbor_binary;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t data_low;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  std::string::size_type v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  double v53;
  uint64_t *v54;
  double v55;
  uint64_t v56;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  void *v61[2];
  char v62;
  void *v63;
  char v64;
  std::string v65;
  void *__p;
  void *v67;
  uint64_t v68;
  __int16 v69;
  std::string v70;
  char *v71;
  uint64_t *v72;

  if (a2)
  {
    ++*(_QWORD *)(a1 + 24);
    v4 = *(unsigned __int8 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      v5 = -1;
    }
    else
    {
      v5 = *v4;
      *(_QWORD *)a1 = v4 + 1;
    }
    *(_QWORD *)(a1 + 16) = v5;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
  }
  switch(v5)
  {
    case 0xFFFFFFFFFFFFFFFFLL:
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((_QWORD *)a1, "value");
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
      v19 = *(uint64_t **)(a1 + 40);
      v70.__r_.__value_.__r.__words[0] = v5;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(v19, (uint64_t *)&v70, a3);
      return 1;
    case 0x18uLL:
      LOBYTE(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v43 = *(uint64_t **)(a1 + 40);
      v44 = __p;
      goto LABEL_65;
    case 0x19uLL:
      LOWORD(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v43 = *(uint64_t **)(a1 + 40);
      v44 = (unsigned __int16)__p;
      goto LABEL_65;
    case 0x1AuLL:
      LODWORD(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v43 = *(uint64_t **)(a1 + 40);
      v44 = __p;
      goto LABEL_65;
    case 0x1BuLL:
      __p = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v43 = *(uint64_t **)(a1 + 40);
      v44 = (std::string::size_type)__p;
LABEL_65:
      v70.__r_.__value_.__r.__words[0] = v44;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(v43, (uint64_t *)&v70, v42);
      return cbor_binary;
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
      v18 = *(uint64_t **)(a1 + 40);
      v70.__r_.__value_.__r.__words[0] = (char)(31 - v5);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(v18, (uint64_t *)&v70, a3);
      return 1;
    case 0x38uLL:
      LOBYTE(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v39 = *(uint64_t **)(a1 + 40);
      v40 = __p;
      goto LABEL_72;
    case 0x39uLL:
      LOWORD(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v39 = *(uint64_t **)(a1 + 40);
      v40 = (unsigned __int16)__p;
      goto LABEL_72;
    case 0x3AuLL:
      LODWORD(__p) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v39 = *(uint64_t **)(a1 + 40);
      v40 = __p;
      goto LABEL_72;
    case 0x3BuLL:
      __p = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &__p);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v39 = *(uint64_t **)(a1 + 40);
      v40 = (unint64_t)__p;
LABEL_72:
      v70.__r_.__value_.__r.__words[0] = ~v40;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(v39, (uint64_t *)&v70, v38);
      return cbor_binary;
    case 0x40uLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
    case 0x45uLL:
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4AuLL:
    case 0x4BuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x53uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
    case 0x5FuLL:
      __p = 0;
      v67 = 0;
      v69 = 0;
      v68 = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary((unsigned __int8 **)a1, (uint64_t)&__p);
      if (!(_DWORD)cbor_binary)
        goto LABEL_34;
      v7 = *(unsigned __int8 ***)(a1 + 40);
      v8 = v7[2];
      if (v7[1] == v8)
      {
        v70.__r_.__value_.__s.__data_[0] = 0;
        v70.__r_.__value_.__l.__size_ = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)&v70, (uint64_t)&__p);
        v21 = *v7;
LABEL_25:
        v22 = *v21;
        *v21 = v70.__r_.__value_.__s.__data_[0];
        v70.__r_.__value_.__s.__data_[0] = v22;
        v23 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = v70.__r_.__value_.__l.__size_;
        v70.__r_.__value_.__l.__size_ = v23;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v70.__r_.__value_.__l.__size_, v22);
        goto LABEL_34;
      }
      v9 = *((_QWORD *)v8 - 1);
      if (*(_BYTE *)v9 != 2)
      {
        v70.__r_.__value_.__s.__data_[0] = 0;
        v70.__r_.__value_.__l.__size_ = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)&v70, (uint64_t)&__p);
        v21 = v7[4];
        goto LABEL_25;
      }
      v10 = *(uint64_t **)(v9 + 8);
      v11 = v10[1];
      v12 = v10[2];
      if (v11 >= v12)
      {
        v24 = (uint64_t)(v11 - *v10) >> 4;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = v12 - *v10;
        v26 = v25 >> 3;
        if (v25 >> 3 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        v72 = v10 + 2;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v10 + 2), v27);
        v29 = (std::string::size_type)&v28[16 * v24];
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        v70.__r_.__value_.__l.__size_ = v29;
        v70.__r_.__value_.__r.__words[2] = v29;
        v71 = &v28[16 * v30];
        *(_BYTE *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v29, (uint64_t)&__p);
        v70.__r_.__value_.__r.__words[2] += 16;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v10, &v70);
        v13 = v10[1];
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        *(_BYTE *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v11, (uint64_t)&__p);
        v13 = v11 + 16;
        v10[1] = v13;
      }
      v10[1] = v13;
LABEL_34:
      v15 = __p;
      if (__p)
      {
        v67 = __p;
LABEL_36:
        operator delete(v15);
      }
      return cbor_binary;
    case 0x60uLL:
    case 0x61uLL:
    case 0x62uLL:
    case 0x63uLL:
    case 0x64uLL:
    case 0x65uLL:
    case 0x66uLL:
    case 0x67uLL:
    case 0x68uLL:
    case 0x69uLL:
    case 0x6AuLL:
    case 0x6BuLL:
    case 0x6CuLL:
    case 0x6DuLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x70uLL:
    case 0x71uLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x76uLL:
    case 0x77uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7FuLL:
      memset(&v70, 0, sizeof(v70));
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &v70);
      if ((_DWORD)cbor_binary)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(*(uint64_t **)(a1 + 40), (uint64_t)&v70, v14);
      goto LABEL_14;
    case 0x80uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x83uLL:
    case 0x84uLL:
    case 0x85uLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
    case 0x89uLL:
    case 0x8AuLL:
    case 0x8BuLL:
    case 0x8CuLL:
    case 0x8DuLL:
    case 0x8EuLL:
    case 0x8FuLL:
    case 0x90uLL:
    case 0x91uLL:
    case 0x92uLL:
    case 0x93uLL:
    case 0x94uLL:
    case 0x95uLL:
    case 0x96uLL:
    case 0x97uLL:
      v16 = v5 & 0x1F;
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, v16, a3);
    case 0x98uLL:
      v70.__r_.__value_.__s.__data_[0] = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      data_low = v70.__r_.__value_.__s.__data_[0];
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low, v34);
    case 0x99uLL:
      LOWORD(v70.__r_.__value_.__l.__data_) = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      data_low = LOWORD(v70.__r_.__value_.__l.__data_);
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low, v34);
    case 0x9AuLL:
      LODWORD(v70.__r_.__value_.__l.__data_) = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      data_low = LODWORD(v70.__r_.__value_.__l.__data_);
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low, v34);
    case 0x9BuLL:
      v70.__r_.__value_.__r.__words[0] = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v70))return 0;
      data_low = v70.__r_.__value_.__r.__words[0];
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, data_low, v34);
    case 0x9FuLL:
      v16 = -1;
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array((unsigned __int8 **)a1, v16, a3);
    case 0xA0uLL:
    case 0xA1uLL:
    case 0xA2uLL:
    case 0xA3uLL:
    case 0xA4uLL:
    case 0xA5uLL:
    case 0xA6uLL:
    case 0xA7uLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xACuLL:
    case 0xADuLL:
    case 0xAEuLL:
    case 0xAFuLL:
    case 0xB0uLL:
    case 0xB1uLL:
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB4uLL:
    case 0xB5uLL:
    case 0xB6uLL:
    case 0xB7uLL:
      v20 = v5 & 0x1F;
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v20, a3);
    case 0xB8uLL:
      v70.__r_.__value_.__s.__data_[0] = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      v37 = v70.__r_.__value_.__s.__data_[0];
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v37, v36);
    case 0xB9uLL:
      LOWORD(v70.__r_.__value_.__l.__data_) = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      v37 = LOWORD(v70.__r_.__value_.__l.__data_);
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v37, v36);
    case 0xBAuLL:
      LODWORD(v70.__r_.__value_.__l.__data_) = 0;
      cbor_binary = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v70))return cbor_binary;
      v37 = LODWORD(v70.__r_.__value_.__l.__data_);
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v37, v36);
    case 0xBBuLL:
      v70.__r_.__value_.__r.__words[0] = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v70))return 0;
      v37 = v70.__r_.__value_.__r.__words[0];
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v37, v36);
    case 0xBFuLL:
      v20 = -1;
      return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(a1, v20, a3);
    case 0xF4uLL:
      v58 = *(uint64_t **)(a1 + 40);
      v70.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(v58, (unsigned __int8 *)&v70, a3);
      return 1;
    case 0xF5uLL:
      v41 = *(uint64_t **)(a1 + 40);
      cbor_binary = 1;
      v70.__r_.__value_.__s.__data_[0] = 1;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(v41, (unsigned __int8 *)&v70, a3);
      return cbor_binary;
    case 0xF6uLL:
      v45 = *(uint64_t **)(a1 + 40);
      v70.__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(v45, (uint64_t)&v70, a3);
      return 1;
    case 0xF9uLL:
      ++*(_QWORD *)(a1 + 24);
      v49 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v50 = -1;
      }
      else
      {
        v50 = *v49;
        *(_QWORD *)a1 = v49 + 1;
      }
      *(_QWORD *)(a1 + 16) = v50;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((_QWORD *)a1, "number"))return 0;
      ++*(_QWORD *)(a1 + 24);
      v51 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v52 = -1;
      }
      else
      {
        v52 = *v51;
        *(_QWORD *)a1 = v51 + 1;
      }
      *(_QWORD *)(a1 + 16) = v52;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof((_QWORD *)a1, "number"))return 0;
      v53 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(BOOL)::{lambda(void)#1}::operator()(v52 | (v50 << 8));
      v54 = *(uint64_t **)(a1 + 40);
      if ((v50 & 0x80) != 0)
        v55 = -v53;
      else
        v55 = v53;
      std::string::basic_string[abi:ne180100]<0>(&v70, &byte_1DEBD87CE);
      __p = *(void **)&v55;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v54, (uint64_t *)&__p, v56);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      return 1;
    case 0xFAuLL:
      LODWORD(v65.__r_.__value_.__l.__data_) = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>((unsigned __int8 **)a1, &v65);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v31 = *(uint64_t **)(a1 + 40);
      v32 = *(float *)&v65.__r_.__value_.__l.__data_;
      std::string::basic_string[abi:ne180100]<0>(&v70, &byte_1DEBD87CE);
      __p = *(void **)&v32;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v31, (uint64_t *)&__p, v33);
      goto LABEL_14;
    case 0xFBuLL:
      v65.__r_.__value_.__r.__words[0] = 0;
      cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>((unsigned __int8 **)a1, &v65);
      if (!(_DWORD)cbor_binary)
        return cbor_binary;
      v46 = *(uint64_t **)(a1 + 40);
      v47 = (void *)v65.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v70, &byte_1DEBD87CE);
      __p = v47;
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(v46, (uint64_t *)&__p, v48);
LABEL_14:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return cbor_binary;
      v15 = (void *)v70.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    default:
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_token_string(&__p, v5);
      v59 = *(_QWORD *)(a1 + 40);
      v60 = *(_QWORD *)(a1 + 24);
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(v61, "value");
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v65, (uint64_t)&v63, (uint64_t)v61);
      nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&v70, 112, v60, (uint64_t)&v65);
      cbor_binary = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v59, v60, (uint64_t)&__p, (uint64_t)&v70);
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EA92E178;
      MEMORY[0x1DF0ECA08](&v70.__r_.__value_.__r.__words[2]);
      std::exception::~exception((std::exception *)&v70);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (v62 < 0)
        operator delete(v61[0]);
      if (v64 < 0)
        operator delete(v63);
      if ((SHIBYTE(v68) & 0x80000000) == 0)
        return cbor_binary;
      v15 = __p;
      goto LABEL_36;
  }
}

void sub_1DEA2D5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_token_string(_QWORD *a1, unsigned __int8 a2)
{
  char __str[2];
  char v5;

  v5 = 0;
  *(_WORD *)__str = 0;
  snprintf(__str, 3uLL, "%.2hhX", a2);
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

void nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  size_t v7;
  std::string *v8;
  void **v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  void *v24[2];
  unsigned __int8 v25;

  v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v24, "syntax error while parsing ");
  std::string::append(v6, "CBOR");
  if ((v25 & 0x80u) == 0)
    v7 = v25;
  else
    v7 = (size_t)v24[1];
  v8 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v7 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if ((v25 & 0x80u) == 0)
      v9 = v24;
    else
      v9 = (void **)v24[0];
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 32;
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v22, ": ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a2;
  else
    v18 = *(const std::string::value_type **)a2;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a2 + 23);
  else
    v19 = *(_QWORD *)(a2 + 8);
  v20 = std::string::append(&v23, v18, v19);
  *a1 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v25 < 0)
    operator delete(v24[0]);
}

void sub_1DEA2D89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(nlohmann::detail::exception *a1, int a2, unint64_t a3, uint64_t a4)
{
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  const char *v23;
  std::string v24;
  void *__p[2];
  int64_t v26;
  void *v27;
  char v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  int64_t v34;

  std::string::basic_string[abi:ne180100]<0>(&v27, "parse_error");
  nlohmann::detail::exception::name(a2, &v29);
  v8 = std::string::append(&v29, "parse error");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (a3)
  {
    std::to_string(&v24, a3);
    v10 = std::string::insert(&v24, 0, " at byte ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  }
  if (v26 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v26 >= 0)
    v13 = HIBYTE(v26);
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v30, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v31, ": ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a4 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a4;
  else
    v19 = *(const std::string::value_type **)a4;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a4 + 23);
  else
    v20 = *(_QWORD *)(a4 + 8);
  v21 = std::string::append(&v32, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34 = v21->__r_.__value_.__r.__words[2];
  v33 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (a3 && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27);
  if (v34 >= 0)
    v23 = (const char *)&v33;
  else
    v23 = (const char *)v33;
  nlohmann::detail::exception::exception(a1, a2, v23);
  *(_QWORD *)a1 = &unk_1EA92E0D0;
  *((_QWORD *)a1 + 4) = a3;
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1DEA2DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a40 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  std::string __p;
  std::exception v14;
  uint64_t v15;
  void *v16[2];
  char v17;

  if (a1[2] != -1)
    return 1;
  v6 = a1[5];
  v7 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(v16, "<end of file>");
  v8 = a1[3];
  std::string::basic_string[abi:ne180100]<0>(v11, "unexpected end of input");
  std::string::basic_string[abi:ne180100]<0>(v9, a2);
  nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&__p, (uint64_t)v11, (uint64_t)v9);
  nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&v14, 110, v8, (uint64_t)&__p);
  v2 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v6, v7, (uint64_t)v16, (uint64_t)&v14);
  v14.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](&v15);
  std::exception::~exception(&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  return v2;
}

void sub_1DEA2DD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28)
{
  uint64_t v28;
  uint64_t v29;

  a28.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v28 + 16);
  std::exception::~exception(&a28);
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(unsigned __int8 **a1, _BYTE *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;

  ++a1[3];
  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = -1;
  }
  else
  {
    v5 = *v4;
    *a1 = v4 + 1;
  }
  a1[2] = (unsigned __int8 *)v5;
  result = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number");
  if ((_DWORD)result)
    *a2 = a1[2];
  return result;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(unsigned __int8 **a1, _DWORD *a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t i;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;

  v4 = 0;
  v5 = 0;
  for (i = 3; ; --i)
  {
    ++a1[3];
    v7 = *a1;
    if (*a1 == a1[1])
    {
      v8 = -1;
    }
    else
    {
      v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number"))break;
    if (*((_BYTE *)a1 + 32))
      v9 = i;
    else
      v9 = v5;
    *((_BYTE *)&v11 + v9) = a1[2];
    v4 = v5 > 2;
    if (++v5 == 4)
    {
      *a2 = v11;
      return 1;
    }
  }
  return v4;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(unsigned __int8 **a1, _QWORD *a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t i;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];

  v4 = 0;
  v5 = 0;
  v11[1] = *MEMORY[0x1E0C80C00];
  for (i = 7; ; --i)
  {
    ++a1[3];
    v7 = *a1;
    if (*a1 == a1[1])
    {
      v8 = -1;
    }
    else
    {
      v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number"))break;
    if (*((_BYTE *)a1 + 32))
      v9 = i;
    else
      v9 = v5;
    *((_BYTE *)v11 + v9) = a1[2];
    v4 = v5 > 6;
    if (++v5 == 8)
    {
      *a2 = v11[0];
      return 1;
    }
  }
  return v4;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(unsigned __int8 **a1, int a2, std::string *a3)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a2)
  {
    v5 = a2 + 1;
    v6 = 1;
    do
    {
      ++a1[3];
      v7 = *a1;
      if (*a1 == a1[1])
      {
        v8 = -1;
      }
      else
      {
        v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)v6 = 0;
      std::string::push_back(a3, *((_BYTE *)a1 + 16));
      --v5;
    }
    while (v5 > 1);
  }
  else
  {
    v6 = 1;
  }
  return v6 != 0;
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(unsigned __int8 **a1, _WORD *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  __int16 v10;

  v4 = 0;
  v5 = 1;
  while (1)
  {
    v6 = v5;
    ++a1[3];
    v7 = *a1;
    if (*a1 == a1[1])
    {
      v8 = -1;
    }
    else
    {
      v8 = *v7;
      *a1 = v7 + 1;
    }
    a1[2] = (unsigned __int8 *)v8;
    result = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "number");
    if (!(_DWORD)result)
      break;
    v5 = 0;
    *((_BYTE *)&v10 + (v4 ^ *((unsigned __int8 *)a1 + 32))) = a1[2];
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      *a2 = v10;
      return result;
    }
  }
  return result;
}

void nlohmann::detail::external_constructor<(nlohmann::detail::value_t)8>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;
  __int16 v7;

  *(_BYTE *)a1 = 8;
  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v7 = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>((uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1DEA2E1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t *v9;

  v9 = a3;
  if (a2)
  {
    v4 = a2 + 1;
    v5 = 1;
    do
    {
      ++a1[3];
      v6 = *a1;
      if (*a1 == a1[1])
      {
        v7 = -1;
      }
      else
      {
        v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)v5 = 0;
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((_BYTE *)a1 + 16));
      --v4;
    }
    while (v4 > 1);
  }
  else
  {
    v5 = 1;
  }
  return v5 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(unsigned __int8 **a1, int a2, unint64_t *a3)
{
  int v3;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t *v9;

  v9 = a3;
  if (a2)
  {
    v3 = a2;
    v5 = 1;
    do
    {
      ++a1[3];
      v6 = *a1;
      if (*a1 == a1[1])
      {
        v7 = -1;
      }
      else
      {
        v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)v5 = 0;
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((_BYTE *)a1 + 16));
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 1;
  }
  return v5 != 0;
}

unint64_t **std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](unint64_t **a1, char a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(unsigned __int8 **a1, int a2, std::string *a3)
{
  int v4;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a2)
  {
    v4 = a2;
    v6 = 1;
    do
    {
      ++a1[3];
      v7 = *a1;
      if (*a1 == a1[1])
      {
        v8 = -1;
      }
      else
      {
        v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)v6 = 0;
      std::string::push_back(a3, *((_BYTE *)a1 + 16));
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 1;
  }
  return v6 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char cbor_binary;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  int64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;
  unint64_t v31;
  char *v32;
  char v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39[2];
  char v40;
  void *v41;
  char v42;
  std::string v43;
  void *__p;
  _BYTE *v45;
  uint64_t v46;
  __int16 v47;
  void *v48[2];
  char v49;

  if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary"))return 0;
  v4 = a1[2];
  if ((unint64_t)(v4 - 64) < 0x18)
    return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(a1, (_DWORD)a1[2] & 0x1F, (unint64_t *)a2);
  switch((unint64_t)v4)
  {
    case 'X':
      LOBYTE(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(a1, __p, (unint64_t *)a2);
        goto LABEL_55;
      }
      break;
    case 'Y':
      LOWORD(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned char>(a1, (unsigned __int16)__p, (unint64_t *)a2);
        goto LABEL_55;
      }
      break;
    case 'Z':
      LODWORD(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned int>(a1, (int)__p, (unint64_t *)a2);
        goto LABEL_55;
      }
      break;
    case '[':
      __p = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(a1, &__p))return 0;
      v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned long long>(a1, (uint64_t)__p, (unint64_t *)a2);
LABEL_55:
      v6 = v7;
      break;
    case '_':
      while (1)
      {
        ++a1[3];
        v8 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)-1;
        }
        else
        {
          v9 = *v8;
          *a1 = v8 + 1;
          a1[2] = (unsigned __int8 *)v9;
          if (v9 == 255)
            return 1;
        }
        __p = 0;
        v45 = 0;
        v47 = 0;
        v46 = 0;
        cbor_binary = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_binary(a1, &__p);
        if ((cbor_binary & 1) != 0)
        {
          v11 = (char *)__p;
          v12 = v45 - (_BYTE *)__p;
          if (v45 - (_BYTE *)__p >= 1)
          {
            v14 = *(char **)(a2 + 8);
            v13 = *(_QWORD *)(a2 + 16);
            if (v13 - (uint64_t)v14 >= v12)
            {
              if (v12 <= 0)
              {
                v21 = v45;
                v22 = *(_BYTE **)(a2 + 8);
                v23 = &v22[-v12];
                v24 = v22;
                if (&v22[-v12] < v14)
                {
                  v25 = v45 - (_BYTE *)__p - (v12 & ~(v12 >> 63));
                  v24 = *(_BYTE **)(a2 + 8);
                  do
                  {
                    v26 = *v23++;
                    *v24++ = v26;
                    --v25;
                  }
                  while (v25);
                }
                *(_QWORD *)(a2 + 8) = v24;
                if (v22 != &v14[v12])
                  memmove(&v14[v12], v14, v22 - &v14[v12]);
                if (v21 != v11)
                  memmove(v14, v11, v21 - v11);
              }
              else
              {
                v20 = v45 - (_BYTE *)__p;
                if (v45 != __p)
                  memmove(*(void **)(a2 + 8), __p, v45 - (_BYTE *)__p);
                *(_QWORD *)(a2 + 8) = &v14[v20];
              }
            }
            else
            {
              v15 = &v14[-*(_QWORD *)a2];
              v16 = (unint64_t)&v15[v12];
              if ((uint64_t)&v15[v12] < 0)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v17 = v13 - *(_QWORD *)a2;
              if (2 * v17 > v16)
                v16 = 2 * v17;
              if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
                v18 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v18 = v16;
              if (v18)
                v19 = operator new(v18);
              else
                v19 = 0;
              v27 = &v15[(_QWORD)v19];
              v28 = &v15[(_QWORD)v19 + v12];
              v29 = v27;
              do
              {
                v30 = *v11++;
                *v29++ = v30;
                --v12;
              }
              while (v12);
              v31 = *(_QWORD *)a2;
              if (*(char **)a2 == v14)
              {
                v34 = v14;
              }
              else
              {
                v32 = v14;
                do
                {
                  v33 = *--v32;
                  *--v27 = v33;
                }
                while (v32 != (char *)v31);
                v34 = *(char **)(a2 + 8);
              }
              v35 = v34 - v14;
              if (v34 != v14)
                memmove(v28, v14, v34 - v14);
              v36 = *(void **)a2;
              *(_QWORD *)a2 = v27;
              *(_QWORD *)(a2 + 8) = &v28[v35];
              *(_QWORD *)(a2 + 16) = (char *)v19 + v18;
              if (v36)
                operator delete(v36);
            }
          }
        }
        if (__p)
        {
          v45 = __p;
          operator delete(__p);
        }
        if ((cbor_binary & 1) == 0)
          return 0;
      }
    default:
      BYTE2(__p) = 0;
      LOWORD(__p) = 0;
      snprintf((char *)&__p, 3uLL, "%.2hhX", v4);
      std::string::basic_string[abi:ne180100]<0>(v48, (char *)&__p);
      v37 = (uint64_t)a1[5];
      v38 = (unint64_t)a1[3];
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(v39, "binary");
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v43, (uint64_t)&v41, (uint64_t)v39);
      nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__p, 113, v38, (uint64_t)&v43);
      v6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v37, v38, (uint64_t)v48, (uint64_t)&__p);
      __p = &unk_1EA92E178;
      MEMORY[0x1DF0ECA08](&v46);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (v40 < 0)
        operator delete(v39[0]);
      if (v42 < 0)
        operator delete(v41);
      if (v49 < 0)
        operator delete(v48[0]);
      break;
  }
  return v6;
}

void sub_1DEA2E954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  a28.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v29 + 16);
  std::exception::~exception(&a28);
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v30 - 81) < 0)
    operator delete(*(void **)(v30 - 104));
  _Unwind_Resume(a1);
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string(unsigned __int8 **a1, std::string *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char cbor_string;
  const std::string::value_type *p_p;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  void *v15[2];
  char v16;
  void *v17;
  char v18;
  std::string v19;
  void *__p;
  std::string::size_type v21;
  uint64_t v22;
  void *v23[2];
  char v24;

  if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string"))return 0;
  v4 = a1[2];
  if ((unint64_t)(v4 - 96) < 0x18)
    return nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(a1, (_DWORD)a1[2] & 0x1F, a2);
  switch((unint64_t)v4)
  {
    case 'x':
      LOBYTE(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned char,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(a1, __p, a2);
        goto LABEL_13;
      }
      break;
    case 'y':
      LOWORD(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<unsigned short,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned char>(a1, (unsigned __int16)__p, a2);
        goto LABEL_13;
      }
      break;
    case 'z':
      LODWORD(__p) = 0;
      v6 = 0;
      if (nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<float,false>(a1, &__p))
      {
        v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned int>(a1, (int)__p, a2);
        goto LABEL_13;
      }
      break;
    case '{':
      __p = 0;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_number<double,false>(a1, &__p))return 0;
      v7 = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned long long>(a1, (uint64_t)__p, a2);
LABEL_13:
      v6 = v7;
      break;
    case '\x7F':
      while (1)
      {
        ++a1[3];
        v8 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)-1;
        }
        else
        {
          v9 = *v8;
          *a1 = v8 + 1;
          a1[2] = (unsigned __int8 *)v9;
          if (v9 == 255)
            return 1;
        }
        __p = 0;
        v21 = 0;
        v22 = 0;
        cbor_string = nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string(a1, &__p);
        if ((cbor_string & 1) != 0)
        {
          if (v22 >= 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if (v22 >= 0)
            v12 = HIBYTE(v22);
          else
            v12 = v21;
          std::string::append(a2, p_p, v12);
        }
        if (SHIBYTE(v22) < 0)
        {
          operator delete(__p);
          if ((cbor_string & 1) == 0)
            return 0;
        }
        else if ((cbor_string & 1) == 0)
        {
          return 0;
        }
      }
    default:
      BYTE2(__p) = 0;
      LOWORD(__p) = 0;
      snprintf((char *)&__p, 3uLL, "%.2hhX", v4);
      std::string::basic_string[abi:ne180100]<0>(v23, (char *)&__p);
      v13 = (uint64_t)a1[5];
      v14 = (unint64_t)a1[3];
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(v15, "string");
      nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::exception_message(&v19, (uint64_t)&v17, (uint64_t)v15);
      nlohmann::detail::parse_error::create((nlohmann::detail::exception *)&__p, 113, v14, (uint64_t)&v19);
      v6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(v13, v14, (uint64_t)v23, (uint64_t)&__p);
      __p = &unk_1EA92E178;
      MEMORY[0x1DF0ECA08](&v22);
      std::exception::~exception((std::exception *)&__p);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (v16 < 0)
        operator delete(v15[0]);
      if (v18 < 0)
        operator delete(v17);
      if (v24 < 0)
        operator delete(v23[0]);
      break;
  }
  return v6;
}

void sub_1DEA2ECF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::exception a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  a28.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v33 + 16);
  std::exception::~exception(&a28);
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_array(unsigned __int8 **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned int v7;

  v3 = a2;
  result = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)a1[5], a2, a3);
  if ((_DWORD)result)
  {
    if (v3 == -1)
    {
      while (1)
      {
        ++a1[3];
        v6 = *a1;
        if (*a1 == a1[1])
        {
          a1[2] = (unsigned __int8 *)v3;
        }
        else
        {
          v7 = *v6;
          *a1 = v6 + 1;
          a1[2] = (unsigned __int8 *)v7;
          if (v7 == 255)
            goto LABEL_12;
        }
        if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 0) & 1) == 0)return 0;
      }
    }
    if (v3)
    {
      while ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1) & 1) != 0)
      {
        if (!--v3)
          goto LABEL_12;
      }
      return 0;
    }
    else
    {
LABEL_12:
      *((_QWORD *)a1[5] + 2) -= 8;
      return 1;
    }
  }
  return result;
}

uint64_t nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_object(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  std::string __p;
  std::string *p_p;

  v3 = a2;
  if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(*(uint64_t **)(a1 + 40), a2, a3))return 0;
  memset(&__p, 0, sizeof(__p));
  if (v3 == -1)
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 24);
      v7 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_QWORD *)(a1 + 16) = -1;
      }
      else
      {
        v8 = *v7;
        *(_QWORD *)a1 = v7 + 1;
        *(_QWORD *)(a1 + 16) = v8;
        if (v8 == 255)
          goto LABEL_4;
      }
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &__p))break;
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v9 + 16) - 8) + 8);
      p_p = &__p;
      *(_QWORD *)(v9 + 32) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 7;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1))break;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
    }
  }
  else
  {
    if (!v3)
    {
LABEL_4:
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) -= 8;
      v5 = 1;
      goto LABEL_5;
    }
    while (1)
    {
      ++*(_QWORD *)(a1 + 24);
      v11 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        v12 = -1;
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)a1 = v11 + 1;
      }
      *(_QWORD *)(a1 + 16) = v12;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_cbor_string((unsigned __int8 **)a1, &__p))break;
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(v13 + 16) - 8) + 8);
      p_p = &__p;
      *(_QWORD *)(v13 + 32) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 7;
      if (!nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(a1, 1))break;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      }
      if (!--v3)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_5:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1DEA2F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::parse_cbor_internal(BOOL)::{lambda(void)#1}::operator()(unsigned int a1)
{
  int v1;
  unsigned int v2;
  double result;

  v1 = (a1 >> 10) & 0x1F;
  v2 = a1 & 0x3FF;
  if (v1 == 31)
  {
    result = NAN;
    if ((a1 & 0x3FF) == 0)
      return INFINITY;
  }
  else if (v1)
  {
    return ldexp((double)(v2 | 0x400), v1 - 25);
  }
  else
  {
    return ldexp((double)v2, -24);
  }
  return result;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_string<unsigned long long>(unsigned __int8 **a1, uint64_t a2, std::string *a3)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;

  if (a2)
  {
    v4 = a2;
    v6 = 1;
    do
    {
      ++a1[3];
      v7 = *a1;
      if (*a1 == a1[1])
      {
        v8 = -1;
      }
      else
      {
        v8 = *v7;
        *a1 = v7 + 1;
      }
      a1[2] = (unsigned __int8 *)v8;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "string") & 1) == 0)v6 = 0;
      std::string::push_back(a3, *((_BYTE *)a1 + 16));
      --v4;
    }
    while (v4);
  }
  else
  {
    v6 = 1;
  }
  return v6 != 0;
}

BOOL nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::get_binary<unsigned long long>(unsigned __int8 **a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t *v9;

  v9 = a3;
  if (a2)
  {
    v3 = a2;
    v5 = 1;
    do
    {
      ++a1[3];
      v6 = *a1;
      if (*a1 == a1[1])
      {
        v7 = -1;
      }
      else
      {
        v7 = *v6;
        *a1 = v6 + 1;
      }
      a1[2] = (unsigned __int8 *)v7;
      if ((nlohmann::detail::binary_reader<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>,nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::unexpect_eof(a1, "binary") & 1) == 0)v5 = 0;
      std::back_insert_iterator<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>>::operator=[abi:ne180100](&v9, *((_BYTE *)a1 + 16));
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 1;
  }
  return v5 != 0;
}

void name_from_id(std::string *a1, int a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::push_back(a1, SHIBYTE(a2));
  std::string::push_back(a1, (a2 << 8) >> 24);
  std::string::push_back(a1, SBYTE1(a2));
  std::string::push_back(a1, a2);
}

void sub_1DEA2F258(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void symbol_name_from_id(std::string *a1, unsigned int a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  __int128 v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  std::string *v13;
  uint64_t v14[3];
  unsigned int v15[2];
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  _QWORD v86[3];
  int v87;
  _QWORD v88[3];
  int v89;
  _QWORD v90[3];
  int v91;
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[3];
  int v99;
  _QWORD v100[3];
  int v101;
  _QWORD v102[3];
  int v103;
  _QWORD v104[3];
  int v105;
  _QWORD v106[3];
  int v107;
  _QWORD v108[3];
  int v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[3];
  int v113;
  _QWORD v114[3];
  int v115;
  _QWORD v116[3];
  int v117;
  _QWORD v118[3];
  int v119;
  _QWORD v120[3];
  int v121;
  _QWORD v122[3];
  int v123;
  _QWORD v124[3];
  int v125;
  _QWORD v126[3];
  int v127;
  _QWORD v128[3];
  int v129;
  _QWORD v130[3];
  int v131;
  _QWORD v132[3];
  int v133;
  _QWORD v134[3];
  int v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  _QWORD v142[3];
  int v143;
  _QWORD v144[3];
  int v145;
  _QWORD v146[3];
  int v147;
  _QWORD v148[3];
  int v149;
  _QWORD v150[3];
  int v151;
  _QWORD v152[3];
  int v153;
  _QWORD v154[3];
  int v155;
  _QWORD v156[3];
  int v157;
  _QWORD v158[3];
  int v159;
  _QWORD v160[3];
  int v161;
  _QWORD v162[3];
  int v163;
  _QWORD v164[3];
  int v165;
  _QWORD v166[3];
  int v167;
  _QWORD v168[3];
  int v169;
  _QWORD v170[3];
  int v171;
  _QWORD v172[3];
  int v173;
  _QWORD v174[3];
  int v175;
  _QWORD v176[3];
  int v177;
  _QWORD v178[3];
  int v179;
  _QWORD v180[3];
  int v181;
  _QWORD v182[3];
  int v183;
  _QWORD v184[3];
  int v185;
  _QWORD v186[3];
  int v187;
  _QWORD v188[3];
  int v189;
  _QWORD v190[3];
  int v191;
  _QWORD v192[3];
  int v193;
  _QWORD v194[3];
  int v195;
  _QWORD v196[3];
  int v197;
  _QWORD v198[3];
  int v199;
  _QWORD v200[3];
  int v201;
  _QWORD v202[3];
  int v203;
  _QWORD v204[3];
  int v205;
  _QWORD v206[3];
  int v207;
  _QWORD v208[3];
  int v209;
  _QWORD v210[3];
  int v211;
  _QWORD v212[3];
  int v213;
  _QWORD v214[3];
  int v215;
  _QWORD v216[3];
  int v217;
  _QWORD v218[3];
  int v219;
  _QWORD v220[3];
  int v221;
  _QWORD v222[3];
  int v223;
  _QWORD v224[5];

  v224[3] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v13 = a1;
    v9 = a2;
    a2 = v9;
    v11 = v10;
    a1 = v13;
    if (v11)
    {
      v15[0] = 1768842360;
      std::string::basic_string[abi:ne180100]<0>(v16, "kFeatureIndex");
      v17 = 1937011316;
      std::string::basic_string[abi:ne180100]<0>(v18, "kStringTable");
      v19 = 1633968500;
      std::string::basic_string[abi:ne180100]<0>(v20, "kAudioData");
      v21 = 1886220907;
      std::string::basic_string[abi:ne180100]<0>(v22, "kPitchmarkData");
      v23 = 1714450030;
      std::string::basic_string[abi:ne180100]<0>(v24, "kF0NeuralNet");
      v25 = 1685417582;
      std::string::basic_string[abi:ne180100]<0>(v26, "kDurNeuralNet");
      v27 = 1885889131;
      std::string::basic_string[abi:ne180100]<0>(v28, "kPhoneBook");
      v29 = 1885893488;
      std::string::basic_string[abi:ne180100]<0>(v30, "kPhoneSpec");
      v31 = 1852797549;
      std::string::basic_string[abi:ne180100]<0>(v32, "kNorms");
      v33 = 1835298404;
      std::string::basic_string[abi:ne180100]<0>(v34, "kMDNDirectory");
      v35 = 1835298423;
      std::string::basic_string[abi:ne180100]<0>(v36, "kMDNWeights");
      v37 = 1835298414;
      std::string::basic_string[abi:ne180100]<0>(v38, "kMDNInputNormalizer");
      v39 = 1835298415;
      std::string::basic_string[abi:ne180100]<0>(v40, "kMDNOutputDenormalizer");
      v41 = 1835298409;
      std::string::basic_string[abi:ne180100]<0>(v42, "kMDNInputSelectionDims");
      v43 = 1835298406;
      std::string::basic_string[abi:ne180100]<0>(v44, "kMDNSingleFileFormat");
      v45 = 1919839846;
      std::string::basic_string[abi:ne180100]<0>(v46, "kRNNSingleFileFormat");
      v47 = 1952543344;
      std::string::basic_string[abi:ne180100]<0>(v48, "kTAPAndRAPFile");
      v49 = 1886547316;
      std::string::basic_string[abi:ne180100]<0>(v50, "kPromptData");
      v51 = 1735422573;
      std::string::basic_string[abi:ne180100]<0>(v52, "kGeneratedPromptData");
      v53 = 2003135842;
      std::string::basic_string[abi:ne180100]<0>(v54, "kNormWordEmbedding");
      v55 = 1852990316;
      std::string::basic_string[abi:ne180100]<0>(v56, "kNormClassifier");
      v57 = 1852991854;
      std::string::basic_string[abi:ne180100]<0>(v58, "kNormInput");
      v59 = 1852992627;
      std::string::basic_string[abi:ne180100]<0>(v60, "kNormLabelSymbols");
      v61 = 1852994668;
      std::string::basic_string[abi:ne180100]<0>(v62, "kNormTokenLabels");
      v63 = 1852977512;
      std::string::basic_string[abi:ne180100]<0>(v64, "kNormOneHotFeat");
      v65 = 1852994156;
      std::string::basic_string[abi:ne180100]<0>(v66, "kNormRules");
      v67 = 1852990320;
      std::string::basic_string[abi:ne180100]<0>(v68, "kNormComplexClasses");
      v69 = 1870033522;
      std::string::basic_string[abi:ne180100]<0>(v70, "kOverrideRules");
      v71 = 1886352237;
      std::string::basic_string[abi:ne180100]<0>(v72, "kPartOfSpeechModel");
      v73 = 1886545272;
      std::string::basic_string[abi:ne180100]<0>(v74, "kPronExceptions");
      v75 = 1885892461;
      std::string::basic_string[abi:ne180100]<0>(v76, "kPhonemeMap");
      v77 = 1886547821;
      std::string::basic_string[abi:ne180100]<0>(v78, "kPronModel");
      v79 = 1885893228;
      std::string::basic_string[abi:ne180100]<0>(v80, "kPhonemeRules");
      v81 = 1885893235;
      std::string::basic_string[abi:ne180100]<0>(v82, "kPhrasingModel");
      v83 = 1885893234;
      std::string::basic_string[abi:ne180100]<0>(v84, "kPhrasingRules");
      v85 = 1651664996;
      std::string::basic_string[abi:ne180100]<0>(v86, "kBrokerHeader");
      v87 = 1650550884;
      std::string::basic_string[abi:ne180100]<0>(v88, "kBrokerHeaderAsset");
      v89 = 1885564279;
      std::string::basic_string[abi:ne180100]<0>(v90, "kPCMWave");
      v91 = 1935831659;
      std::string::basic_string[abi:ne180100]<0>(v92, "kSentenceBreakExceptions");
      v93 = 1717790311;
      std::string::basic_string[abi:ne180100]<0>(v94, "kFrontendConfig");
      v95 = 1734567527;
      std::string::basic_string[abi:ne180100]<0>(v96, "kGryphonConfig");
      v97 = 1734700644;
      std::string::basic_string[abi:ne180100]<0>(v98, "kGenderRules");
      v99 = 1735292269;
      std::string::basic_string[abi:ne180100]<0>(v100, "kGrammaticalNumberRules");
      v101 = 1835361122;
      std::string::basic_string[abi:ne180100]<0>(v102, "kMeCabResource");
      v103 = 1835233389;
      std::string::basic_string[abi:ne180100]<0>(v104, "kMeCabPOSMapping");
      v105 = 1718903655;
      std::string::basic_string[abi:ne180100]<0>(v106, "kFilterTextConfig");
      v107 = 1953657708;
      std::string::basic_string[abi:ne180100]<0>(v108, "kTransliterateConfig");
      v109 = 1920234092;
      std::string::basic_string[abi:ne180100]<0>(v110, "kReplaceRules");
      v111 = 1920231009;
      std::string::basic_string[abi:ne180100]<0>(v112, "kReplaceFSTArchive");
      v113 = 1731358822;
      std::string::basic_string[abi:ne180100]<0>(v114, "kG2PFSTArchive");
      v115 = 1718776943;
      std::string::basic_string[abi:ne180100]<0>(v116, "kFRTokenArchive");
      v117 = 1718776677;
      std::string::basic_string[abi:ne180100]<0>(v118, "kFRSentArchive");
      v119 = 1718775913;
      std::string::basic_string[abi:ne180100]<0>(v120, "kFRPitchArchive");
      v121 = 1852139109;
      std::string::basic_string[abi:ne180100]<0>(v122, "kNeuralFEConfig");
      v123 = 1852138085;
      std::string::basic_string[abi:ne180100]<0>(v124, "kNeuralBEConfig");
      v125 = 1953395557;
      std::string::basic_string[abi:ne180100]<0>(v126, "kTNSEQ2SEQ");
      v127 = 1953395570;
      std::string::basic_string[abi:ne180100]<0>(v128, "kTNSEQ2SEQRULE");
      v129 = 1731358835;
      std::string::basic_string[abi:ne180100]<0>(v130, "kG2PSEQ2SEQ");
      v131 = 1731358831;
      std::string::basic_string[abi:ne180100]<0>(v132, "kG2PSEQ2SEQOLD");
      v133 = 1751477859;
      std::string::basic_string[abi:ne180100]<0>(v134, "kHydraG2PEncoder");
      v135 = 1751410019;
      std::string::basic_string[abi:ne180100]<0>(v136, "kHydraG2PDecoder");
      v137 = 1953395813;
      std::string::basic_string[abi:ne180100]<0>(v138, "kTTSNLPTokEnc");
      v139 = 1953395812;
      std::string::basic_string[abi:ne180100]<0>(v140, "kTTSNLPTokDec");
      v141 = 1953390956;
      std::string::basic_string[abi:ne180100]<0>(v142, "kTTSNLPAligner");
      v143 = 1731358834;
      std::string::basic_string[abi:ne180100]<0>(v144, "kG2PSEQ2SEQRULE");
      v145 = 1887007858;
      std::string::basic_string[abi:ne180100]<0>(v146, "kG2PPYTRULE");
      v147 = 2020827506;
      std::string::basic_string[abi:ne180100]<0>(v148, "kG2PXSAMPARULE");
      v149 = 1818783858;
      std::string::basic_string[abi:ne180100]<0>(v150, "kG2PLHPRULE");
      v151 = 1768846450;
      std::string::basic_string[abi:ne180100]<0>(v152, "kG2PINTERNALRULE");
      v153 = 1886352244;
      std::string::basic_string[abi:ne180100]<0>(v154, "kG2PPOSTRULE");
      v155 = 1852731506;
      std::string::basic_string[abi:ne180100]<0>(v156, "kNNPreRule");
      v157 = 1919252338;
      std::string::basic_string[abi:ne180100]<0>(v158, "kRewriteArchive");
      v159 = 1886417510;
      std::string::basic_string[abi:ne180100]<0>(v160, "kPreprocessArchive");
      v161 = 1752523875;
      std::string::basic_string[abi:ne180100]<0>(v162, "kHydraUserDctList");
      v163 = 1752523890;
      std::string::basic_string[abi:ne180100]<0>(v164, "kHydraUserDctRule");
      v165 = 1634100856;
      std::string::basic_string[abi:ne180100]<0>(v166, "kAffixRules");
      v167 = 1852138092;
      std::string::basic_string[abi:ne180100]<0>(v168, "kNeuralFallbackDeprecated");
      v169 = 1852139116;
      std::string::basic_string[abi:ne180100]<0>(v170, "kNeuralFallbacklist");
      v171 = 1634624611;
      std::string::basic_string[abi:ne180100]<0>(v172, "kAnetecDecoder");
      v173 = 1634628452;
      std::string::basic_string[abi:ne180100]<0>(v174, "kAnetecStreamingDecoder");
      v175 = 1885435758;
      std::string::basic_string[abi:ne180100]<0>(v176, "kParallelWaveNet");
      v177 = 1885430125;
      std::string::basic_string[abi:ne180100]<0>(v178, "kParallelAM");
      v179 = 1952539503;
      std::string::basic_string[abi:ne180100]<0>(v180, "kTacotron");
      v181 = 2003988078;
      std::string::basic_string[abi:ne180100]<0>(v182, "kWaveRNN");
      v183 = 1853318509;
      std::string::basic_string[abi:ne180100]<0>(v184, "kNeuralWordEmbedding");
      v185 = 1885890164;
      std::string::basic_string[abi:ne180100]<0>(v186, "kPhonemeFeatures");
      v187 = 1717662576;
      std::string::basic_string[abi:ne180100]<0>(v188, "kFastSpeech");
      v189 = 1852139122;
      std::string::basic_string[abi:ne180100]<0>(v190, "kNeuralFrontend");
      v191 = 1684630631;
      std::string::basic_string[abi:ne180100]<0>(v192, "kDialog");
      v193 = 1954050162;
      std::string::basic_string[abi:ne180100]<0>(v194, "kTextProcessing");
      v195 = 1936946287;
      std::string::basic_string[abi:ne180100]<0>(v196, "kSoundStorm");
      v197 = 1936613746;
      std::string::basic_string[abi:ne180100]<0>(v198, "kS1NAR");
      v199 = 1717662579;
      std::string::basic_string[abi:ne180100]<0>(v200, "kFS2S1");
      v201 = 1920427373;
      std::string::basic_string[abi:ne180100]<0>(v202, "kRobertaWordEmbedding");
      v203 = 1920431214;
      std::string::basic_string[abi:ne180100]<0>(v204, "kRobertaWordEmbTokenizer");
      v205 = 1987015801;
      std::string::basic_string[abi:ne180100]<0>(v206, "kVoiceType");
      v207 = 1701737593;
      std::string::basic_string[abi:ne180100]<0>(v208, "kEngineType");
      v209 = 1818324583;
      std::string::basic_string[abi:ne180100]<0>(v210, "kLanguage");
      v211 = 1987538035;
      std::string::basic_string[abi:ne180100]<0>(v212, "kVowels");
      v213 = 1684629094;
      std::string::basic_string[abi:ne180100]<0>(v214, "kDifferentiatorPhones");
      v215 = 1937011315;
      std::string::basic_string[abi:ne180100]<0>(v216, "kStressablePhones");
      v217 = 1684368485;
      std::string::basic_string[abi:ne180100]<0>(v218, "kUnwantedPhones");
      v219 = 1702389364;
      std::string::basic_string[abi:ne180100]<0>(v220, "kExcludedFeatures");
      v221 = 1885893222;
      std::string::basic_string[abi:ne180100]<0>(v222, "kPhrasingFeat");
      v223 = 1936288870;
      std::string::basic_string[abi:ne180100]<0>(v224, "kSilenceDurationFactor");
      std::map<unsigned int,std::string>::map[abi:ne180100](v14, v15, 105);
      NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>((uint64_t **)&symbol_name_from_id::symbol_map, v14);
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy((char *)v14[1]);
      v12 = 840;
      do
      {
        if (SHIBYTE(v15[v12 - 1]) < 0)
          operator delete((void *)v14[v12 / 2]);
        v12 -= 8;
      }
      while (v12 * 4);
      a1 = v13;
      a2 = v9;
    }
  }
  v3 = *(_QWORD *)(symbol_name_from_id::symbol_map + 8);
  if (!v3)
    goto LABEL_13;
  v4 = symbol_name_from_id::symbol_map + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != symbol_name_from_id::symbol_map + 8 && *(_DWORD *)(v4 + 32) <= a2)
  {
    if (*(char *)(v4 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v4 + 40), *(_QWORD *)(v4 + 48));
    }
    else
    {
      v8 = *(_OWORD *)(v4 + 40);
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 56);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
  }
}

void sub_1DEA30150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, char a13)
{
  uint64_t v14;

  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a11);
  v14 = 3360;
  while (1)
  {
    if (*(&a13 + v14 - 1) < 0)
      operator delete(*(void **)(&a13 + v14 - 24));
    v14 -= 32;
    if (!v14)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *std::map<unsigned int,std::string>::map[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(a1, v4, *a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1DEA303D4(_Unwind_Exception *a1)
{
  char **v1;

  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t **NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v4 = (uint64_t *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = (uint64_t)(v4 + 1);
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(v4, v4 + 1, *((_DWORD *)v6 + 8), (uint64_t)(v6 + 4));
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
  *a1 = v4;
  return a1;
}

void sub_1DEA304A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(char **)(v1 + 8));
  MEMORY[0x1DF0ED014](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  std::string *v23;
  uint64_t v24;

  v5 = result;
  v6 = result + 1;
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = v10;
      else
        v13 = a2;
      if (v8)
        v11 = v10 + 1;
      else
        v11 = a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v17;
          v18 = *(_DWORD *)(v17 + 32);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_51:
      v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3)
      return result;
    v11 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v11 = v12;
        v12 = (uint64_t *)*v12;
        v13 = v11;
        v14 = v11;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v19 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      v6 = v11;
      if (*v11)
        return result;
      goto LABEL_44;
    }
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v20;
          v21 = *(_DWORD *)(v20 + 32);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_51;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
  }
  v13 = result + 1;
LABEL_44:
  v22 = (char *)operator new(0x40uLL);
  *((_DWORD *)v22 + 8) = *(_DWORD *)a4;
  v23 = (std::string *)(v22 + 40);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v22 + 7) = *(_QWORD *)(a4 + 24);
  }
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v13;
  *v6 = (uint64_t)v22;
  v24 = *(_QWORD *)*v5;
  if (v24)
  {
    *v5 = v24;
    v22 = (char *)*v6;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v22);
  ++v5[2];
  return result;
}

void sub_1DEA30728(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void VoiceConfig::report_error(unsigned int a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t *i;
  unsigned int v8;
  std::string *v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *v13;
  __int128 *p_buf;
  uint64_t v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *p_p;
  uint64_t v20;
  int v21;
  std::string *v22;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  const char *v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  NSObject *v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  void *exception;
  std::string *v34;
  _QWORD *v35;
  std::string __p;
  std::string v37;
  std::string v38;
  std::string v39;
  __int128 buf;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
    return;
  if (a2 == 1)
  {
    {
      v35 = (_QWORD *)operator new();
      v35[2] = 0;
      v35[1] = 0;
      *v35 = v35 + 1;
      ignore_if_missing_set(void)::ignore = (uint64_t)v35;
    }
    for (i = *(uint64_t **)(ignore_if_missing_set(void)::ignore + 8); i; i = (uint64_t *)*i)
    {
      v8 = *((_DWORD *)i + 7);
      if (v8 <= a1)
      {
        if (v8 >= a1)
          return;
        ++i;
      }
    }
  }
  file_name_from_id(&v39, a1);
  memset(&v38, 0, sizeof(v38));
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v39.__r_.__value_.__l.__size_)
    {
      v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_14;
    }
LABEL_25:
    name_from_id(&v37, a1);
    v16 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
    v17 = v37.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a1);
    v18 = &v37;
    if (v16 < 0)
      v18 = (std::string *)v17;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v41 & 0x80u) == 0)
      p_buf = &buf;
    else
      p_buf = (__int128 *)buf;
    if ((v41 & 0x80u) == 0)
      v15 = v41;
    else
      v15 = *((_QWORD *)&buf + 1);
    goto LABEL_36;
  }
  if (!*((_BYTE *)&v39.__r_.__value_.__s + 23))
    goto LABEL_25;
  v9 = &v39;
LABEL_14:
  name_from_id(&v37, a1);
  v10 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
  v11 = v37.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&__p, a1);
  v12 = &v37;
  if (v10 < 0)
    v12 = (std::string *)v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v41 & 0x80u) == 0)
    p_buf = &buf;
  else
    p_buf = (__int128 *)buf;
  if ((v41 & 0x80u) == 0)
    v15 = v41;
  else
    v15 = *((_QWORD *)&buf + 1);
LABEL_36:
  MEMORY[0x1DF0ECA8C](&v38, p_buf, v15);
  if ((char)v41 < 0)
    operator delete((void *)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v20 = *(unsigned __int8 *)(a3 + 23);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a3 + 8);
  if (v20)
  {
    v22 = &v38;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v38.__r_.__value_.__l.__size_;
    while (size)
    {
      v24 = v22->__r_.__value_.__s.__data_[--size];
      if (v24 == 46)
      {
        v25 = size;
        goto LABEL_53;
      }
    }
    v25 = -1;
LABEL_53:
    if (v21 >= 0)
      v26 = (const char *)a3;
    else
      v26 = *(const char **)a3;
    StringFormatter::StringFormatter((StringFormatter *)&buf, ": %s", v26);
    if ((v41 & 0x80u) == 0)
      v27 = (const std::string::value_type *)&buf;
    else
      v27 = (const std::string::value_type *)buf;
    if ((v41 & 0x80u) == 0)
      v28 = v41;
    else
      v28 = *((_QWORD *)&buf + 1);
    std::string::replace(&v38, v25, 2uLL, v27, v28);
    if ((char)v41 < 0)
      operator delete((void *)buf);
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v34 = &v38;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)&buf, "%s", (const char *)v34);
    MEMORY[0x1DF0EC99C](exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    v31 = &v38;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v31;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  v32 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = (std::string *)v38.__r_.__value_.__r.__words[0];
  Diagnostics::log(3, "%s", v30, v32);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1DEA30B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void file_name_from_id(std::string *a1, unsigned int a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  __int128 v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  std::string *v13;
  uint64_t v14[3];
  unsigned int v15[2];
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  _QWORD v86[3];
  int v87;
  _QWORD v88[3];
  int v89;
  _QWORD v90[3];
  int v91;
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[3];
  int v99;
  _QWORD v100[3];
  int v101;
  _QWORD v102[3];
  int v103;
  _QWORD v104[3];
  int v105;
  _QWORD v106[3];
  int v107;
  _QWORD v108[3];
  int v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[3];
  int v113;
  _QWORD v114[3];
  int v115;
  _QWORD v116[3];
  int v117;
  _QWORD v118[3];
  int v119;
  _QWORD v120[3];
  int v121;
  _QWORD v122[3];
  int v123;
  _QWORD v124[3];
  int v125;
  _QWORD v126[3];
  int v127;
  _QWORD v128[3];
  int v129;
  _QWORD v130[3];
  int v131;
  _QWORD v132[3];
  int v133;
  _QWORD v134[3];
  int v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  _QWORD v142[3];
  int v143;
  _QWORD v144[3];
  int v145;
  _QWORD v146[3];
  int v147;
  _QWORD v148[3];
  int v149;
  _QWORD v150[3];
  int v151;
  _QWORD v152[3];
  int v153;
  _QWORD v154[3];
  int v155;
  _QWORD v156[3];
  int v157;
  _QWORD v158[3];
  int v159;
  _QWORD v160[3];
  int v161;
  _QWORD v162[3];
  int v163;
  _QWORD v164[3];
  int v165;
  _QWORD v166[3];
  int v167;
  _QWORD v168[3];
  int v169;
  _QWORD v170[4];

  v170[3] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0)
  {
    v13 = a1;
    v9 = a2;
    a2 = v9;
    v11 = v10;
    a1 = v13;
    if (v11)
    {
      v15[0] = 1768842360;
      std::string::basic_string[abi:ne180100]<0>(v16, &byte_1DEBD87CE);
      v17 = 1937011316;
      std::string::basic_string[abi:ne180100]<0>(v18, &byte_1DEBD87CE);
      v19 = 1633968500;
      std::string::basic_string[abi:ne180100]<0>(v20, &byte_1DEBD87CE);
      v21 = 1886220907;
      std::string::basic_string[abi:ne180100]<0>(v22, &byte_1DEBD87CE);
      v23 = 1714450030;
      std::string::basic_string[abi:ne180100]<0>(v24, &byte_1DEBD87CE);
      v25 = 1685417582;
      std::string::basic_string[abi:ne180100]<0>(v26, &byte_1DEBD87CE);
      v27 = 1885889131;
      std::string::basic_string[abi:ne180100]<0>(v28, &byte_1DEBD87CE);
      v29 = 1885893488;
      std::string::basic_string[abi:ne180100]<0>(v30, &byte_1DEBD87CE);
      v31 = 1852797549;
      std::string::basic_string[abi:ne180100]<0>(v32, &byte_1DEBD87CE);
      v33 = 1835298404;
      std::string::basic_string[abi:ne180100]<0>(v34, &byte_1DEBD87CE);
      v35 = 1835298423;
      std::string::basic_string[abi:ne180100]<0>(v36, &byte_1DEBD87CE);
      v37 = 1835298414;
      std::string::basic_string[abi:ne180100]<0>(v38, &byte_1DEBD87CE);
      v39 = 1835298415;
      std::string::basic_string[abi:ne180100]<0>(v40, &byte_1DEBD87CE);
      v41 = 1835298409;
      std::string::basic_string[abi:ne180100]<0>(v42, &byte_1DEBD87CE);
      v43 = 1835298406;
      std::string::basic_string[abi:ne180100]<0>(v44, &byte_1DEBD87CE);
      v45 = 1919839846;
      std::string::basic_string[abi:ne180100]<0>(v46, &byte_1DEBD87CE);
      v47 = 1952543344;
      std::string::basic_string[abi:ne180100]<0>(v48, &byte_1DEBD87CE);
      v49 = 1886547316;
      std::string::basic_string[abi:ne180100]<0>(v50, &byte_1DEBD87CE);
      v51 = 1735422573;
      std::string::basic_string[abi:ne180100]<0>(v52, "generated_prompts");
      v53 = 2003135842;
      std::string::basic_string[abi:ne180100]<0>(v54, "norm_embedding");
      v55 = 1852990316;
      std::string::basic_string[abi:ne180100]<0>(v56, "norm_classify_model");
      v57 = 1852991854;
      std::string::basic_string[abi:ne180100]<0>(v58, "norm_input");
      v59 = 1852992627;
      std::string::basic_string[abi:ne180100]<0>(v60, "norm_labsym");
      v61 = 1852994668;
      std::string::basic_string[abi:ne180100]<0>(v62, "norm_toklab");
      v63 = 1852977512;
      std::string::basic_string[abi:ne180100]<0>(v64, "norm_onehot_feat");
      v65 = 1852994156;
      std::string::basic_string[abi:ne180100]<0>(v66, "norm_rules");
      v67 = 1852990320;
      std::string::basic_string[abi:ne180100]<0>(v68, "norm_complex");
      v69 = 1870033522;
      std::string::basic_string[abi:ne180100]<0>(v70, "override_rules");
      v71 = 1886352237;
      std::string::basic_string[abi:ne180100]<0>(v72, "pos_model");
      v73 = 1886545272;
      std::string::basic_string[abi:ne180100]<0>(v74, "pron_dict.db");
      v75 = 1885892461;
      std::string::basic_string[abi:ne180100]<0>(v76, "phon_map.db");
      v77 = 1886547821;
      std::string::basic_string[abi:ne180100]<0>(v78, "pron_nnmt_model.nnet");
      v79 = 1885893228;
      std::string::basic_string[abi:ne180100]<0>(v80, "phoneme_rules");
      v81 = 1885893235;
      std::string::basic_string[abi:ne180100]<0>(v82, "phrasing_model");
      v83 = 1885893234;
      std::string::basic_string[abi:ne180100]<0>(v84, "phrasing_rules");
      v85 = 1651664996;
      std::string::basic_string[abi:ne180100]<0>(v86, "broker.hdr");
      v87 = 1650550884;
      std::string::basic_string[abi:ne180100]<0>(v88, "broker.hdr.asset");
      v89 = 1885564279;
      std::string::basic_string[abi:ne180100]<0>(v90, "PCMWave");
      v91 = 1935831659;
      std::string::basic_string[abi:ne180100]<0>(v92, "sentence_break_exceptions");
      v93 = 1717790311;
      std::string::basic_string[abi:ne180100]<0>(v94, "frontend.cfg");
      v95 = 1734567527;
      std::string::basic_string[abi:ne180100]<0>(v96, "gryphon.cfg");
      v97 = 1734700644;
      std::string::basic_string[abi:ne180100]<0>(v98, "gender");
      v99 = 1735292269;
      std::string::basic_string[abi:ne180100]<0>(v100, "plural");
      v101 = 1835361122;
      std::string::basic_string[abi:ne180100]<0>(v102, "mecab_dir/");
      v103 = 1835233389;
      std::string::basic_string[abi:ne180100]<0>(v104, "mecab_dir/pos_mapping.json");
      v105 = 1718903655;
      std::string::basic_string[abi:ne180100]<0>(v106, "filter_text.json");
      v107 = 1953657708;
      std::string::basic_string[abi:ne180100]<0>(v108, "transliterate.json");
      v109 = 1920234092;
      std::string::basic_string[abi:ne180100]<0>(v110, "replace_rules.json");
      v111 = 1920231009;
      std::string::basic_string[abi:ne180100]<0>(v112, "replace.far");
      v113 = 1731358822;
      std::string::basic_string[abi:ne180100]<0>(v114, "g2p_rules.far");
      v115 = 1718776943;
      std::string::basic_string[abi:ne180100]<0>(v116, "g2p_token_fr.dat");
      v117 = 1718776677;
      std::string::basic_string[abi:ne180100]<0>(v118, "g2p_sent_fr.dat");
      v119 = 1718775913;
      std::string::basic_string[abi:ne180100]<0>(v120, "g2p_pitch_fr.dat");
      v121 = 1852139109;
      std::string::basic_string[abi:ne180100]<0>(v122, "neural_fe_config.json");
      v123 = 1852138085;
      std::string::basic_string[abi:ne180100]<0>(v124, "neural_be_config.json");
      v125 = 1953395557;
      std::string::basic_string[abi:ne180100]<0>(v126, "tn_seq2seq.bin");
      v127 = 1953395570;
      std::string::basic_string[abi:ne180100]<0>(v128, "tn_seq2seq_rule.dat");
      v129 = 1731358835;
      std::string::basic_string[abi:ne180100]<0>(v130, "g2p/g2p.mdl.bin");
      v131 = 1731358831;
      std::string::basic_string[abi:ne180100]<0>(v132, "g2p_seq2seq.bin");
      v133 = 1751477859;
      std::string::basic_string[abi:ne180100]<0>(v134, "tts_nlp/tts-nlp-encoder.json");
      v135 = 1751410019;
      std::string::basic_string[abi:ne180100]<0>(v136, "tts_nlp/tts-nlp-decoder.json");
      v137 = 1953395813;
      std::string::basic_string[abi:ne180100]<0>(v138, "tts_nlp/tok_encoder.dat");
      v139 = 1953395812;
      std::string::basic_string[abi:ne180100]<0>(v140, "tts_nlp/tok_decoder.dat");
      v141 = 1953390956;
      std::string::basic_string[abi:ne180100]<0>(v142, "tts_nlp/aligner.dat");
      v143 = 1731358834;
      std::string::basic_string[abi:ne180100]<0>(v144, "g2p_seq2seq_rule.dat");
      v145 = 1887007858;
      std::string::basic_string[abi:ne180100]<0>(v146, "g2p_pyt_rule.dat");
      v147 = 2020827506;
      std::string::basic_string[abi:ne180100]<0>(v148, "g2p_xsampa_rule.dat");
      v149 = 1818783858;
      std::string::basic_string[abi:ne180100]<0>(v150, "g2p_lhp_rule.dat");
      v151 = 1768846450;
      std::string::basic_string[abi:ne180100]<0>(v152, "g2p_internal_rule.dat");
      v153 = 1886352244;
      std::string::basic_string[abi:ne180100]<0>(v154, "g2p_post_rule.dat");
      v155 = 1852731506;
      std::string::basic_string[abi:ne180100]<0>(v156, "tn_prefix_rule.dat");
      v157 = 1919252338;
      std::string::basic_string[abi:ne180100]<0>(v158, "rewrite_rule.dat");
      v159 = 1886417510;
      std::string::basic_string[abi:ne180100]<0>(v160, "preprocess_rule.dat");
      v161 = 1752523875;
      std::string::basic_string[abi:ne180100]<0>(v162, "hydra_udct.json");
      v163 = 1752523890;
      std::string::basic_string[abi:ne180100]<0>(v164, "hydra_udct_pp.dat");
      v165 = 1634100856;
      std::string::basic_string[abi:ne180100]<0>(v166, "affix_rules");
      v167 = 1852138092;
      std::string::basic_string[abi:ne180100]<0>(v168, "neural_blacklist.json");
      v169 = 1852139116;
      std::string::basic_string[abi:ne180100]<0>(v170, "neural_fallbacklist.json");
      std::map<unsigned int,std::string>::map[abi:ne180100](v14, v15, 78);
      NeverDestructed<std::map<unsigned int,std::string>>::NeverDestructed<>((uint64_t **)&file_name_from_id::name_map, v14);
      std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy((char *)v14[1]);
      v12 = 624;
      do
      {
        if (SHIBYTE(v15[v12 - 1]) < 0)
          operator delete((void *)v14[v12 / 2]);
        v12 -= 8;
      }
      while (v12 * 4);
      a1 = v13;
      a2 = v9;
    }
  }
  v3 = *(_QWORD *)(file_name_from_id::name_map + 8);
  if (!v3)
    goto LABEL_13;
  v4 = file_name_from_id::name_map + 8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != file_name_from_id::name_map + 8 && *(_DWORD *)(v4 + 32) <= a2)
  {
    if (*(char *)(v4 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v4 + 40), *(_QWORD *)(v4 + 48));
    }
    else
    {
      v8 = *(_OWORD *)(v4 + 40);
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 56);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
  }
}

void sub_1DEA317DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14)
{
  uint64_t v15;

  std::__tree<std::__value_type<unsigned int,std::string>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::string>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::string>>>::destroy(a12);
  v15 = 2496;
  while (1)
  {
    if (*(&a14 + v15 - 1) < 0)
      operator delete(*(void **)(&a14 + v15 - 24));
    v15 -= 32;
    if (!v15)
    {
      _Unwind_Resume(a1);
    }
  }
}

void VoiceConfigEyrie_1::~VoiceConfigEyrie_1(void **this)
{
  VoiceConfigEyrie_1::~VoiceConfigEyrie_1(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *this = &off_1EA91F490;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void VoiceConfig::get_resource(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unsigned __int8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  unsigned __int8 v18;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(v17);
  v7 = v18;
  v8 = v18;
  if ((v18 & 0x80u) != 0)
    v7 = (unint64_t)v17[1];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (v7)
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    MemoryMap::MemoryMap(&v12, (uint64_t)v17);
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)a4, v12, (uint64_t)v13);
    *(_OWORD *)(a4 + 16) = v14;
    v9 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (!*(_QWORD *)a4)
      VoiceConfig::report_error(a2, a3, (uint64_t)__p);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    v8 = v18;
  }
  if ((v8 & 0x80) != 0)
    operator delete(v17[0]);
}

void sub_1DEA31AF8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
    MEMORY[0x1DF0ECA80](va, v8);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DEA31AACLL);
}

void sub_1DEA31B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

void VoiceConfigEyrie_1::get_json(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  NSObject *v9;
  int value_high;
  std::vector<std::string>::pointer begin;
  std::string *v12;
  std::string *p_p;
  std::string *v14;
  int v15;
  std::__split_buffer<std::string>::pointer p_buf;
  const char *v17;
  void *v18;
  _QWORD *v19;
  char *v20;
  int v21;
  std::vector<std::string>::pointer end;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string::size_type size;
  char *v28;
  int v29;
  std::vector<std::string>::pointer v30;
  _QWORD *v31;
  std::string __p;
  std::vector<std::string> v33;
  std::__split_buffer<std::string> buf;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD **)(a1 + 64);
  v6 = *(_DWORD **)(a1 + 72);
  if (v7 != v6)
  {
    v8 = bswap32(a2);
    while (*v7 != v8)
    {
      v7 += 2;
      if (v7 == v6)
        goto LABEL_35;
    }
  }
  if (v7 == v6 || !v7[1])
  {
LABEL_35:
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id((std::string *)&v33, a2);
    value_high = SHIBYTE(v33.__end_cap_.__value_);
    begin = v33.__begin_;
    symbol_name_from_id(&__p, a2);
    v12 = (std::string *)&v33;
    if (value_high < 0)
      v12 = begin;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v14 = (std::string *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
    v15 = v7[1];
    LODWORD(buf.__first_) = 136315906;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v12;
    WORD2(buf.__begin_) = 2080;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__begin_ + 6) = p_p;
    HIWORD(buf.__end_) = 2080;
    buf.__end_cap_.__value_ = v14;
    LOWORD(buf.__end_cap_.__value_) = 1024;
    *(_DWORD *)((char *)&buf.__end_cap_.__value_ + 2) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__end_cap_.__value_) < 0)
      operator delete(v33.__begin_);
  }
  p_buf = (std::__split_buffer<std::string>::pointer)&buf;
  name_from_id((std::string *)&buf, a2);
  if (SHIBYTE(buf.__end_) < 0)
    p_buf = buf.__first_;
  symbol_name_from_id((std::string *)&v33, a2);
  if (SHIBYTE(v33.__end_cap_.__value_) >= 0)
    v18 = &v33;
  else
    v18 = v33.__begin_;
  v19 = (_QWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v19 = (_QWORD *)*v19;
  if (SHIBYTE(v33.__end_cap_.__value_) < 0)
    operator delete(v33.__begin_);
  if (SHIBYTE(buf.__end_) < 0)
    operator delete(buf.__first_);
  v20 = (char *)(*(_QWORD *)(a1 + 24) + v7[1]);
  if (a2 <= 1936288869)
  {
    if (a2 != 1701737593)
    {
      v21 = 1818324583;
      goto LABEL_38;
    }
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(&buf, v20);
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)a3 = 3;
    v31 = operator new(0x18uLL);
    *(_OWORD *)v31 = *(_OWORD *)&buf.__first_;
    v31[2] = buf.__end_;
    *(_QWORD *)(a3 + 8) = v31;
    return;
  }
  if (a2 == 1936288870)
    goto LABEL_59;
  v21 = 1987015801;
LABEL_38:
  if (a2 == v21)
    goto LABEL_59;
  memset(&v33, 0, sizeof(v33));
  if (*v20)
  {
    end = 0;
    do
    {
      if (end >= v33.__end_cap_.__value_)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v33.__begin_) >> 3);
        v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) > v24)
          v24 = 0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) >= 0x555555555555555)
          v25 = 0xAAAAAAAAAAAAAAALL;
        else
          v25 = v24;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v33.__end_cap_;
        if (v25)
          v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v33.__end_cap_, v25);
        else
          v26 = 0;
        buf.__first_ = v26;
        buf.__begin_ = v26 + v23;
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = &v26[v25];
        std::string::basic_string[abi:ne180100]<0>(buf.__begin_->__r_.__value_.__r.__words, v20);
        ++buf.__end_;
        std::vector<std::string>::__swap_out_circular_buffer(&v33, &buf);
        end = v33.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&buf);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(end++, v20);
      }
      v33.__end_ = end;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        size = end[-1].__r_.__value_.__l.__size_;
      else
        size = HIBYTE(end[-1].__r_.__value_.__r.__words[2]);
      v28 = &v20[size];
      v29 = v28[1];
      v20 = v28 + 1;
    }
    while (v29);
    v30 = v33.__begin_;
  }
  else
  {
    end = 0;
    v30 = 0;
  }
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((uint64_t)v30, (uint64_t)end);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1DEA31FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  a13 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  if (a2 != a1)
  {
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](v4, 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3));
    v10 = v5[1];
    v11 = v10;
    v8[0] = v5 + 2;
    v8[1] = &v10;
    v8[2] = &v11;
    v9 = 0;
    v6 = v10;
    do
    {
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)v6 = 3;
      *(_QWORD *)(v6 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a1);
      a1 += 24;
      v6 = v11 + 16;
      v11 += 16;
    }
    while (a1 != a2);
    v9 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
    v5[1] = v6;
  }
  return v5;
}

void sub_1DEA32128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void VoiceConfigDirectory::~VoiceConfigDirectory(void **this)
{
  *this = off_1EA91FB98;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1EA91FB98;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1DF0ED014);
}

double VoiceConfigDirectory::get_broker_data@<D0>(VoiceConfigDirectory *this@<X0>, uint64_t a2@<X8>)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v11;
  const std::__fs::filesystem::directory_entry *v12;
  std::__fs::filesystem::path::__string_view v13;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::__fs::filesystem::path::__string_view v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *cntrl;
  uint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type size;
  char v38;
  double result;
  std::string pn;
  std::__fs::filesystem::path v41;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v42;
  std::__shared_weak_count *v43;
  std::__fs::filesystem::directory_iterator v44;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v45;
  std::__shared_weak_count *v46;
  std::__fs::filesystem::directory_entry::_Path __p;
  std::__fs::filesystem::path v48;
  std::error_code __ec;
  std::string v50;
  std::string __dst;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v50, (char *)this + 8);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, "broker.hdr", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v50, &v48);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v48, &__ec);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (__dst.__r_.__value_.__s.__data_[0])
    {
      if (__dst.__r_.__value_.__s.__data_[0] != 255)
        goto LABEL_23;
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&__p.__pn_, "broker.hdr.asset");
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v50, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__pn_.__r_.__value_.__l.__data_);
  v48.__pn_ = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v48, &__ec);
  if (__dst.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (__dst.__r_.__value_.__s.__data_[0])
    {
      if (__dst.__r_.__value_.__s.__data_[0] != 255)
      {
LABEL_23:
        if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&pn, v48.__pn_.__r_.__value_.__l.__data_, v48.__pn_.__r_.__value_.__l.__size_);
        else
          pn = v48.__pn_;
        goto LABEL_90;
      }
    }
  }
  MEMORY[0x1DF0ECE10](&v45, &v50, 0, 0);
  v3 = v45;
  v4 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v46;
    v44.__imp_.__ptr_ = v3;
    v44.__imp_.__cntrl_ = v4;
    if (v46)
    {
      v8 = (unint64_t *)&v46->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v42 = 0;
      v43 = 0;
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_27;
    }
  }
  else
  {
    v44.__imp_.__ptr_ = v45;
    v44.__imp_.__cntrl_ = 0;
  }
  v42 = 0;
  v43 = 0;
LABEL_27:
  v11 = v42;
  while (v44.__imp_.__ptr_ != v11)
  {
    v12 = std::__fs::filesystem::directory_iterator::__dereference(&v44);
    if (SHIBYTE(v12->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p.__pn_, v12->__p_.__pn_.__r_.__value_.__l.__data_, v12->__p_.__pn_.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = (std::__fs::filesystem::path::string_type)v12->__p_;
    v13 = std::__fs::filesystem::path::__extension(&__p);
    if (v13.__size_ >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13.__size_ >= 0x17)
    {
      v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13.__size_ | 7) != 0x17)
        v15 = v13.__size_ | 7;
      v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v13.__size_;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_39:
      memmove(p_dst, v13.__data_, v13.__size_);
      goto LABEL_40;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13.__size_;
    p_dst = &__dst;
    if (v13.__size_)
      goto LABEL_39;
LABEL_40:
    p_dst->__r_.__value_.__s.__data_[v13.__size_] = 0;
    v41.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, ".hdr", "");
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__data_ = (const std::string_view::value_type *)&__dst;
    else
      v17.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v17.__size_ = __dst.__r_.__value_.__l.__size_;
    v18 = std::__fs::filesystem::path::__compare(&v41, v17);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__pn_.__r_.__value_.__l.__data_);
    if (!v18)
    {
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
      else
      {
        pn = __p.__pn_;
      }
      v28 = v43;
      if (v43)
      {
        v29 = (unint64_t *)&v43->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      cntrl = v44.__imp_.__cntrl_;
      if (v44.__imp_.__cntrl_)
      {
        v32 = &v44.__imp_.__cntrl_->__shared_owners_;
        do
          v33 = __ldaxr((unint64_t *)v32);
        while (__stlxr(v33 - 1, (unint64_t *)v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      v34 = v46;
      if (v46)
      {
        v35 = (unint64_t *)&v46->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      goto LABEL_90;
    }
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    std::__fs::filesystem::directory_iterator::__increment(&v44, 0);
  }
  v19 = v43;
  if (v43)
  {
    v20 = (unint64_t *)&v43->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v44.__imp_.__cntrl_;
  if (v44.__imp_.__cntrl_)
  {
    v23 = &v44.__imp_.__cntrl_->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)v23);
    while (__stlxr(v24 - 1, (unint64_t *)v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v46;
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  memset(&pn, 0, sizeof(pn));
LABEL_90:
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  v38 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = pn.__r_.__value_.__l.__size_;
  if (size)
  {
    MemoryMap::MemoryMap((_QWORD *)a2, (uint64_t)&pn);
    if ((*((_BYTE *)&pn.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_98;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v38 < 0)
LABEL_98:
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1DEA32790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  _Unwind_Resume(a1);
}

void VoiceConfigDirectory::get_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  NSObject *v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::__fs::filesystem::path *v12;
  int v13;
  std::string::size_type v14;
  const char *v15;
  std::string *v16;
  std::string *v17;
  std::__fs::filesystem::path *v18;
  NSObject *v19;
  int v20;
  std::string::size_type v21;
  std::string *p_p;
  std::string *v23;
  std::__fs::filesystem::path *v24;
  int v25;
  std::string::size_type v26;
  const char *v27;
  std::string *p_buf;
  std::string *v29;
  std::__fs::filesystem::path *v30;
  std::string v31;
  std::string __p;
  std::__fs::filesystem::path v33;
  std::string v34;
  std::error_code __ec;
  std::string buf;
  std::__fs::filesystem::path *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  file_name_from_id(&v34, a2);
  size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v34.__r_.__value_.__l.__size_;
  if (size)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (char *)&v34);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&buf, a1 + 8, &v33);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status(&v33, &__ec);
    if (buf.__r_.__value_.__s.__data_[0])
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      if (buf.__r_.__value_.__s.__data_[0])
      {
        if (buf.__r_.__value_.__s.__data_[0] != 255)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            name_from_id(&__p, a2);
            v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v21 = __p.__r_.__value_.__r.__words[0];
            symbol_name_from_id(&v31, a2);
            p_p = &__p;
            if (v20 < 0)
              p_p = (std::string *)v21;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = &v31;
            else
              v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
            v24 = &v33;
            if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v24 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            v37 = v24;
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          name_from_id(&buf, a2);
          v25 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
          v26 = buf.__r_.__value_.__r.__words[0];
          symbol_name_from_id(&__p, a2);
          p_buf = &buf;
          if (v25 < 0)
            p_buf = (std::string *)v26;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &__p;
          else
            v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v30 = &v33;
          if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            *(std::__fs::filesystem::path *)a3 = v33;
            goto LABEL_21;
          }
          goto LABEL_78;
        }
      }
    }
    if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  }
  name_from_id(&__p, a2);
  buf = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&buf, a1 + 8, &v33);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v33, &__ec);
  if (!buf.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !buf.__r_.__value_.__s.__data_[0])
    || buf.__r_.__value_.__s.__data_[0] == 255)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_19;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&__p, a2);
    v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v9 = __p.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&v31, a2);
    v10 = &__p;
    if (v8 < 0)
      v10 = (std::string *)v9;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v31;
    else
      v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v12 = &v33;
    if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v37 = v12;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  name_from_id(&buf, a2);
  v13 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  v14 = buf.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&__p, a2);
  v16 = &buf;
  if (v13 < 0)
    v16 = (std::string *)v14;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v18 = &v33;
  if ((v33.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::__fs::filesystem::path *)v33.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *(std::__fs::filesystem::path *)a3 = v33;
    goto LABEL_19;
  }
LABEL_78:
  std::string::__init_copy_ctor_external(a3, v33.__pn_.__r_.__value_.__l.__data_, v33.__pn_.__r_.__value_.__l.__size_);
LABEL_19:
  if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
LABEL_21:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1DEA32DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_prefix_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  NSObject *v9;
  int v10;
  std::string::size_type v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  std::__fs::filesystem::path *v17;
  int v18;
  std::string::size_type v19;
  int v20;
  std::string::size_type v21;
  const char *v22;
  std::string::size_type v23;
  std::string *p_p;
  std::string *v25;
  std::__fs::filesystem::path *v26;
  std::string v27;
  std::string v28;
  std::__fs::filesystem::path v29;
  std::error_code __ec;
  std::string __p;
  std::string *v32;
  __int16 v33;
  std::__fs::filesystem::path *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
    goto LABEL_11;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a3);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, a1 + 8, &v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v29, &__ec);
  if (!__p.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !__p.__r_.__value_.__s.__data_[0])
    || __p.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__pn_.__r_.__value_.__l.__data_);
LABEL_11:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v28, a2);
    v10 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    v11 = v28.__r_.__value_.__r.__words[0];
    v12 = *(char *)(a3 + 23);
    v13 = *(_QWORD *)a3;
    symbol_name_from_id(&v27, a2);
    if (v12 >= 0)
      v14 = a3;
    else
      v14 = v13;
    v15 = &v28;
    if (v10 < 0)
      v15 = (std::string *)v11;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v27;
    else
      v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
    v17 = &v29;
    if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v14;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    v32 = v16;
    v33 = 2080;
    v34 = v17;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  name_from_id(&__p, a2);
  v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v19 = __p.__r_.__value_.__r.__words[0];
  v20 = *(char *)(a3 + 23);
  v21 = *(_QWORD *)a3;
  symbol_name_from_id(&v28, a2);
  if (v20 >= 0)
    v23 = a3;
  else
    v23 = v21;
  p_p = &__p;
  if (v18 < 0)
    p_p = (std::string *)v19;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v28;
  else
    v25 = (std::string *)v28.__r_.__value_.__r.__words[0];
  v26 = &v29;
  if ((v29.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::__fs::filesystem::path *)v29.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a4, v29.__pn_.__r_.__value_.__l.__data_, v29.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::__fs::filesystem::path *)a4 = v29;
  }
}

void sub_1DEA3318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_locale_path(uint64_t a1@<X0>, unsigned int a2@<W1>, const void **a3@<X2>, std::string *a4@<X8>)
{
  std::string::size_type size;
  size_t v9;
  std::string *v10;
  const void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string::size_type v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *p_s;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  int v25;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  std::__fs::filesystem::path *v29;
  int v30;
  std::string::size_type v31;
  const char *v32;
  std::string *v33;
  std::string *v34;
  std::__fs::filesystem::path *v35;
  NSObject *v36;
  std::string *v37;
  std::string::size_type v38;
  const char *v39;
  std::string *v40;
  const void *v41;
  NSObject *v42;
  int v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *p_p;
  std::__fs::filesystem::path *v47;
  int v48;
  std::string::size_type v49;
  const char *v50;
  std::string *v51;
  std::string *v52;
  std::__fs::filesystem::path *v53;
  std::string __p;
  std::string v55;
  std::__fs::filesystem::path v56;
  std::string __s;
  std::error_code __ec;
  std::string v59;
  std::__fs::filesystem::path *v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  file_name_from_id(&__s, a2);
  size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __s.__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_33:
    name_from_id(&v59, a2);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    __s = v59;
    v16 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = __s.__r_.__value_.__l.__size_;
    if (!v16)
      goto LABEL_94;
    if (*((char *)a3 + 23) >= 0)
      v17 = *((unsigned __int8 *)a3 + 23);
    else
      v17 = (size_t)a3[1];
    if (v17)
    {
      v18 = &v59;
      std::string::basic_string[abi:ne180100]((uint64_t)&v59, v17 + 1);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if (*((char *)a3 + 23) >= 0)
        v19 = a3;
      else
        v19 = *a3;
      memmove(v18, v19, v17);
      *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      else
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v21 = __s.__r_.__value_.__l.__size_;
      v22 = std::string::append(&v59, (const std::string::value_type *)p_s, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, __s.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    }
    else
    {
      v61 = __s;
    }
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v59, (char *)&v61);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v59, a1 + 8, &v56);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status(&v56, &__ec);
    if (!v59.__r_.__value_.__s.__data_[0]
      || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v59.__r_.__value_.__s.__data_[0])
      || v59.__r_.__value_.__s.__data_[0] == 255)
    {
      if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
LABEL_94:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v36 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        name_from_id(&v59, a2);
        v37 = (v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v59
            : (std::string *)v59.__r_.__value_.__r.__words[0];
        v38 = *((char *)a3 + 23) >= 0 ? (std::string::size_type)a3 : (std::string::size_type)*a3;
        LODWORD(v61.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
        WORD2(v61.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v61.__r_.__value_.__r.__words[1] + 6) = v38;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
      }
      name_from_id(&v59, a2);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v59;
      else
        v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
      if (*((char *)a3 + 23) >= 0)
        v41 = a3;
      else
        v41 = *a3;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_114;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v42 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      name_from_id(&v55, a2);
      v43 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
      v44 = v55.__r_.__value_.__r.__words[0];
      symbol_name_from_id(&__p, a2);
      v45 = &v55;
      if (v43 < 0)
        v45 = (std::string *)v44;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v47 = &v56;
      if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v59.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      HIWORD(v59.__r_.__value_.__r.__words[2]) = 2080;
      v60 = v47;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
    name_from_id(&v59, a2);
    v48 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
    v49 = v59.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&v55, a2);
    v51 = &v59;
    if (v48 < 0)
      v51 = (std::string *)v49;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v55;
    else
      v52 = (std::string *)v55.__r_.__value_.__r.__words[0];
    v53 = &v56;
    if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_143;
LABEL_144:
    std::string::__init_copy_ctor_external(a4, v56.__pn_.__r_.__value_.__l.__data_, v56.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_146;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v9)
  {
    v10 = &v59;
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, v9 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    memmove(v10, v11, v9);
    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 95;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__s;
    else
      v12 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v13 = __s.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v59, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else
  {
    v61 = __s;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v59, (char *)&v61);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v59, a1 + 8, &v56);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v56, &__ec);
  if (!v59.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v59.__r_.__value_.__s.__data_[0])
    || v59.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_33;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v55, a2);
    v25 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    v26 = v55.__r_.__value_.__r.__words[0];
    symbol_name_from_id(&__p, a2);
    v27 = &v55;
    if (v25 < 0)
      v27 = (std::string *)v26;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__p;
    else
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v29 = &v56;
    if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(v59.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    HIWORD(v59.__r_.__value_.__r.__words[2]) = 2080;
    v60 = v29;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
  name_from_id(&v59, a2);
  v30 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
  v31 = v59.__r_.__value_.__r.__words[0];
  symbol_name_from_id(&v55, a2);
  v33 = &v59;
  if (v30 < 0)
    v33 = (std::string *)v31;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v55;
  else
    v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
  v35 = &v56;
  if ((v56.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::__fs::filesystem::path *)v56.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_144;
LABEL_143:
  *(std::__fs::filesystem::path *)a4 = v56;
LABEL_146:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_114:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1DEA33A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_locale_prefix_path(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string::size_type a3@<X2>, const void **a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  int v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  NSObject *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  const char *v24;
  std::string *v25;
  std::string::size_type v26;
  const void *v27;
  NSObject *v28;
  int v29;
  std::string::size_type v30;
  int v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *p_p;
  std::__fs::filesystem::path *v36;
  int v37;
  std::string::size_type v38;
  int v39;
  std::string::size_type v40;
  const char *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::__fs::filesystem::path *v45;
  std::string __p;
  std::string v47;
  std::__fs::filesystem::path v48;
  std::string v49;
  std::error_code __ec;
  std::string v51;
  std::string *v52;
  __int16 v53;
  std::__fs::filesystem::path *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
    goto LABEL_33;
  if (*((char *)a4 + 23) >= 0)
    v12 = *((unsigned __int8 *)a4 + 23);
  else
    v12 = (size_t)a4[1];
  if (v12)
  {
    v13 = &v51;
    std::string::basic_string[abi:ne180100]((uint64_t)&v51, v12 + 1);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if (*((char *)a4 + 23) >= 0)
      v14 = a4;
    else
      v14 = *a4;
    memmove(v13, v14, v12);
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a3;
    else
      v16 = *(const std::string::value_type **)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    v18 = std::string::append(&v51, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
  else if (v11 < 0)
  {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v49 = *(std::string *)a3;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v51, (char *)&v49);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v51, a1 + 8, &v48);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v48, &__ec);
  if (!v51.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), !v51.__r_.__value_.__s.__data_[0])
    || v51.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
LABEL_33:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      name_from_id(&v49, a2);
      v21 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v49
          : (std::string *)v49.__r_.__value_.__r.__words[0];
      v22 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
      v23 = *((char *)a4 + 23) >= 0 ? (std::string *)a4 : (std::string *)*a4;
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
      v52 = v23;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    name_from_id(&v51, a2);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v51;
    else
      v25 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 23) >= 0)
      v26 = a3;
    else
      v26 = *(_QWORD *)a3;
    if (*((char *)a4 + 23) >= 0)
      v27 = a4;
    else
      v27 = *a4;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    a5->__r_.__value_.__r.__words[0] = 0;
    a5->__r_.__value_.__l.__size_ = 0;
    a5->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    name_from_id(&v47, a2);
    v29 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
    v30 = v47.__r_.__value_.__r.__words[0];
    v31 = *(char *)(a3 + 23);
    v32 = *(_QWORD *)a3;
    symbol_name_from_id(&__p, a2);
    if (v31 >= 0)
      v33 = a3;
    else
      v33 = v32;
    v34 = &v47;
    if (v29 < 0)
      v34 = (std::string *)v30;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v36 = &v48;
    if ((v48.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::__fs::filesystem::path *)v48.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v33;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    v52 = p_p;
    v53 = 2080;
    v54 = v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
  name_from_id(&v51, a2);
  v37 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  v38 = v51.__r_.__value_.__r.__words[0];
  v39 = *(char *)(a3 + 23);
  v40 = *(_QWORD *)a3;
  symbol_name_from_id(&v47, a2);
  if (v39 >= 0)
    v42 = a3;
  else
    v42 = v40;
  v43 = &v51;
  if (v37 < 0)
    v43 = (std::string *)v38;
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v47;
  else
    v44 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v45 = &v48;
  if ((v48.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = (std::__fs::filesystem::path *)v48.__pn_.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a5, v48.__pn_.__r_.__value_.__l.__data_, v48.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::__fs::filesystem::path *)a5 = v48;
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1DEA34080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void VoiceConfigDirectory::get_subconfig(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  std::error_code __ec;
  std::__fs::filesystem::path v14;

  v7 = a1 + 8;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, v7, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::__status(&v14, &__ec);
  if (__p.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_10;
  v8 = operator new(0x38uLL);
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = &off_1EA91E548;
  *v8 = &off_1EA933238;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = 0;
  *a4 = v8 + 3;
  a4[1] = v8;
  VoiceConfigImpl::add_search_dir((VoiceConfigImpl *)(v8 + 3), &v14);
  (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a4 + 16))(&__p, *a4, 1717790311, 0);
  v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_8;
  v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_8:
    if ((_QWORD)v9)
      goto LABEL_11;
    goto LABEL_9;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
  if (!(_QWORD)v9)
  {
LABEL_9:
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)a4);
LABEL_10:
    VoiceConfig::get_subconfig((uint64_t)a2, a3, a4);
  }
LABEL_11:
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
}

void sub_1DEA34288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void VoiceConfig::get_json(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  lconv *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  int v30;
  _QWORD v31[3];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v20);
  if (!v20)
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    goto LABEL_31;
  }
  v3 = v22;
  v4 = v23;
  v25 = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v27 = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)v26);
  v5 = (uint64_t)v45;
  if (!v45)
    goto LABEL_5;
  if (v45 != v44)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45);
LABEL_5:
    v29 = (_BYTE *)v5;
    goto LABEL_8;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _BYTE *))(v44[0] + 24))(v44, v28);
LABEL_8:
  v30 = 0;
  v31[0] = v3;
  v31[1] = v3 + v4;
  v31[2] = -1;
  v32 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = &byte_1DEBD87CE;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v6 = localeconv();
  if (v6->decimal_point)
    v7 = *v6->decimal_point;
  else
    v7 = 46;
  v42 = v7;
  v43 = 1;
  v30 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan((uint64_t)v31);
  v9 = v45;
  if (v45 == v44)
  {
    v10 = 4;
    v9 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::parse((uint64_t)v28, (unsigned __int8 *)a2, v8);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer((uint64_t)v31);
  v11 = v29;
  if (v29 == v28)
  {
    v12 = 4;
    v11 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_26;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_26:
  v15 = v25;
  if (v25 == v24)
  {
    v16 = 4;
    v15 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_31;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_31:
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1DEA34548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  unsigned __int8 *v21;
  uint64_t **v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  v27 = a21;
  if (a21 == &a18)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, *v21);
  v29 = a17;
  if (a17 == &a14)
  {
    v30 = 4;
    v29 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_16:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  std::string::size_type size;
  int v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  int v19;
  char v20;
  int v21;
  std::string::size_type v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t **v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  std::string v67;
  std::string __p;
  std::string v69;
  std::exception v70;
  _BYTE v71[24];
  std::string v72;
  std::string v73;
  _BYTE v74[24];
  _BYTE *v75;
  unsigned __int8 *v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
  {
    v7 = *(_BYTE *)(a1 + 184);
    v76 = a2;
    v77 = 0u;
    v78 = 0u;
    v79 = 0;
    v80 = v7;
    memset(&v73, 0, sizeof(v73));
    while (1)
    {
      switch(*(_DWORD *)(a1 + 32))
      {
        case 1:
          LOBYTE(v70.__vftable) = 1;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v76, (unsigned __int8 *)&v70, a3);
          goto LABEL_21;
        case 2:
          LOBYTE(v70.__vftable) = 0;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v76, (unsigned __int8 *)&v70, a3);
          goto LABEL_21;
        case 3:
          v70.__vftable = 0;
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>((uint64_t *)&v76, (uint64_t)&v70, a3);
          goto LABEL_21;
        case 4:
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>((uint64_t *)&v76, a1 + 120, a3);
          goto LABEL_21;
        case 5:
          v70.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>((uint64_t *)&v76, (uint64_t *)&v70, a3);
          goto LABEL_21;
        case 6:
          v70.__vftable = *(std::exception_vtbl **)(a1 + 152);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>((uint64_t *)&v76, (uint64_t *)&v70, a3);
          goto LABEL_21;
        case 7:
          if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            v57 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v67, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v58 = std::string::insert(&v67, 0, "number overflow parsing '");
            v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            v60 = std::string::append(&__p, "'");
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v69.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            nlohmann::detail::out_of_range::create(406, (uint64_t)&v69, (nlohmann::detail::exception *)&v70);
            nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v57, (uint64_t)&v72, (uint64_t)&v70);
            v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
            MEMORY[0x1DF0ECA08](v71);
            std::exception::~exception(&v70);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            goto LABEL_107;
          }
          v70.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>((uint64_t *)&v76, (uint64_t *)&v70, a3);
          goto LABEL_21;
        case 8:
          if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)&v76, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_113;
          v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v8;
          if (v8 == 10)
            goto LABEL_16;
          LOBYTE(v70.__vftable) = 1;
          std::vector<BOOL>::push_back((uint64_t)&v73, &v70);
          continue;
        case 9:
          if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object((uint64_t *)&v76, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)goto LABEL_113;
          v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v9;
          if (v9 == 11)
          {
LABEL_16:
            *((_QWORD *)&v77 + 1) -= 8;
LABEL_21:
            size = v73.__r_.__value_.__l.__size_;
            if (!v73.__r_.__value_.__l.__size_)
            {
LABEL_113:
              if (v73.__r_.__value_.__r.__words[0])
                operator delete(v73.__r_.__value_.__l.__data_);
              v40 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
              *(_DWORD *)(a1 + 32) = v40;
              if (v40 != 15)
              {
                v41 = *(_QWORD *)(a1 + 72);
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v73, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v72 = *(std::string *)(a1 + 72);
                std::string::basic_string[abi:ne180100]<0>(&__p, "value");
                nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&v69, a1, 0xFu, (uint64_t)&__p);
                nlohmann::detail::parse_error::create(101, (uint64_t *)&v72, (uint64_t)&v69, (nlohmann::detail::exception *)&v70);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v41, (uint64_t)&v73, (uint64_t)&v70);
                v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
                MEMORY[0x1DF0ECA08](v71);
                std::exception::~exception(&v70);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v69.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v73.__r_.__value_.__l.__data_);
              }
              if (v79)
              {
                v42 = *a2;
                *a2 = 9;
                v43 = (uint64_t *)*((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = 0;
                v62 = v43;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v42);
              }
              if ((_QWORD)v77)
              {
                *((_QWORD *)&v77 + 1) = v77;
                operator delete((void *)v77);
              }
              return;
            }
            while (1)
            {
              if (((*(_QWORD *)(v73.__r_.__value_.__r.__words[0] + (((size - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (size - 1)) & 1) != 0)
              {
                v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                *(_DWORD *)(a1 + 32) = v11;
                if (v11 == 13)
                  goto LABEL_33;
                if (v11 != 10)
                {
                  v45 = *(_QWORD *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  v69 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v67, "array");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xAu, (uint64_t)&v67);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v45, (uint64_t)&v72, (uint64_t)&v70);
                  goto LABEL_106;
                }
              }
              else
              {
                v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                *(_DWORD *)(a1 + 32) = v12;
                if (v12 == 13)
                {
                  v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                  *(_DWORD *)(a1 + 32) = v13;
                  if (v13 == 4)
                  {
                    v14 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)&v77 + 1) - 8) + 8);
                    v70.__vftable = (std::exception_vtbl *)(a1 + 120);
                    *((_QWORD *)&v78 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)(a1 + 120), (uint64_t)&std::piecewise_construct, (__int128 **)&v70)+ 7;
                    v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                    *(_DWORD *)(a1 + 32) = v15;
                    if (v15 == 12)
                    {
LABEL_33:
                      v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
                      goto LABEL_34;
                    }
LABEL_133:
                    v51 = *(_QWORD *)(a1 + 72);
                    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v69 = *(std::string *)(a1 + 72);
                    std::string::basic_string[abi:ne180100]<0>(&v67, "object separator");
                    nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xCu, (uint64_t)&v67);
                    nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
                    nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v51, (uint64_t)&v72, (uint64_t)&v70);
LABEL_106:
                    v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
                    MEMORY[0x1DF0ECA08](v71);
                    std::exception::~exception(&v70);
LABEL_107:
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v67.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v72.__r_.__value_.__l.__data_);
                    goto LABEL_113;
                  }
LABEL_132:
                  v50 = *(_QWORD *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  v69 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v67, "object key");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 4u, (uint64_t)&v67);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v50, (uint64_t)&v72, (uint64_t)&v70);
                  goto LABEL_106;
                }
                if (v12 != 11)
                {
                  v49 = *(_QWORD *)(a1 + 72);
                  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                  v69 = *(std::string *)(a1 + 72);
                  std::string::basic_string[abi:ne180100]<0>(&v67, "object");
                  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xBu, (uint64_t)&v67);
                  nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
                  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v49, (uint64_t)&v72, (uint64_t)&v70);
                  goto LABEL_106;
                }
              }
              *((_QWORD *)&v77 + 1) -= 8;
              size = --v73.__r_.__value_.__l.__size_;
              if (!v73.__r_.__value_.__l.__size_)
                goto LABEL_113;
            }
          }
          if (v9 != 4)
            goto LABEL_132;
          v17 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)&v77 + 1) - 8) + 8);
          v70.__vftable = (std::exception_vtbl *)(a1 + 120);
          *((_QWORD *)&v78 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)(a1 + 120), (uint64_t)&std::piecewise_construct, (__int128 **)&v70)+ 7;
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_133;
          LOBYTE(v70.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v73, &v70);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
LABEL_34:
          *(_DWORD *)(a1 + 32) = v16;
          break;
        case 0xE:
          v38 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v69 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v67, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0, (uint64_t)&v67);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v38, (uint64_t)&v72, (uint64_t)&v70);
          goto LABEL_106;
        default:
          v39 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v69 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v67, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0x10u, (uint64_t)&v67);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v39, (uint64_t)&v72, (uint64_t)&v70);
          goto LABEL_106;
      }
    }
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v74, a1);
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v76, (uint64_t)a2, (uint64_t)v74, *(_BYTE *)(a1 + 184));
  v5 = v75;
  if (v75 == v74)
  {
    v6 = 4;
    v5 = v74;
    goto LABEL_39;
  }
  if (v75)
  {
    v6 = 5;
LABEL_39:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  memset(&v73, 0, sizeof(v73));
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v70.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v76, (unsigned __int8 *)&v70, 0);
        goto LABEL_58;
      case 2:
        LOBYTE(v70.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>((uint64_t *)&v76, (unsigned __int8 *)&v70, 0);
        goto LABEL_58;
      case 3:
        v70.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>((uint64_t *)&v76, (uint64_t)&v70, 0);
        goto LABEL_58;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>((uint64_t *)&v76, a1 + 120, 0);
        goto LABEL_58;
      case 5:
        v70.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>((uint64_t *)&v76, (uint64_t **)&v70, 0);
        goto LABEL_58;
      case 6:
        v70.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>((uint64_t *)&v76, (uint64_t **)&v70, 0);
        goto LABEL_58;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v70.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>((uint64_t *)&v76, (uint64_t **)&v70, 0);
          goto LABEL_58;
        }
        v52 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v67, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v53 = std::string::insert(&v67, 0, "number overflow parsing '");
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        v55 = std::string::append(&__p, "'");
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v69, (nlohmann::detail::exception *)&v70);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v52, (uint64_t)&v72, (uint64_t)&v70);
        v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v71);
        std::exception::~exception(&v70);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        goto LABEL_83;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array((uint64_t *)&v76, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_89;
        v19 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v19;
        if (v19 == 10)
        {
          v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(&v76);
          goto LABEL_52;
        }
        LOBYTE(v70.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v73, &v70);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object((uint64_t *)&v76, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_89;
        v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v21;
        if (v21 != 11)
        {
          if (v21 != 4)
            goto LABEL_129;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(&v76, (__int128 *)(a1 + 120)))goto LABEL_89;
          v29 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v29;
          if (v29 != 12)
            goto LABEL_130;
          LOBYTE(v70.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v73, &v70);
          v28 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
LABEL_74:
          *(_DWORD *)(a1 + 32) = v28;
          continue;
        }
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(&v76);
LABEL_52:
        if ((v20 & 1) == 0)
          goto LABEL_89;
LABEL_58:
        v22 = v73.__r_.__value_.__l.__size_;
        if (!v73.__r_.__value_.__l.__size_)
          goto LABEL_89;
        while (2)
        {
          if (((*(_QWORD *)(v73.__r_.__value_.__r.__words[0] + (((v22 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v22 - 1)) & 1) != 0)
          {
            v23 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
            *(_DWORD *)(a1 + 32) = v23;
            if (v23 == 13)
              goto LABEL_73;
            if (v23 != 10)
            {
              v44 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v69 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v67, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xAu, (uint64_t)&v67);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
              nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v44, (uint64_t)&v72, (uint64_t)&v70);
              goto LABEL_82;
            }
            v24 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(&v76);
LABEL_66:
            if ((v24 & 1) == 0)
              goto LABEL_89;
            v22 = --v73.__r_.__value_.__l.__size_;
            if (!v73.__r_.__value_.__l.__size_)
              goto LABEL_89;
            continue;
          }
          break;
        }
        v25 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v25;
        if (v25 != 13)
        {
          if (v25 != 11)
          {
            v46 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v69 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v67, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xBu, (uint64_t)&v67);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v46, (uint64_t)&v72, (uint64_t)&v70);
            goto LABEL_82;
          }
          v24 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(&v76);
          goto LABEL_66;
        }
        v26 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v26;
        if (v26 != 4)
        {
LABEL_129:
          v47 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v69 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v67, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 4u, (uint64_t)&v67);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v47, (uint64_t)&v72, (uint64_t)&v70);
          goto LABEL_82;
        }
        if (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(&v76, (__int128 *)(a1 + 120)))
        {
          v27 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v27;
          if (v27 == 12)
          {
LABEL_73:
            v28 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
            goto LABEL_74;
          }
LABEL_130:
          v48 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v69 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v67, "object separator");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0xCu, (uint64_t)&v67);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v48, (uint64_t)&v72, (uint64_t)&v70);
LABEL_82:
          v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
          MEMORY[0x1DF0ECA08](v71);
          std::exception::~exception(&v70);
LABEL_83:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v72.__r_.__value_.__l.__data_);
        }
LABEL_89:
        if (v73.__r_.__value_.__r.__words[0])
          operator delete(v73.__r_.__value_.__l.__data_);
        v32 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v32;
        if (v32 != 15)
        {
          v33 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v73, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v72 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&__p, "value");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&v69, a1, 0xFu, (uint64_t)&__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v72, (uint64_t)&v69, (nlohmann::detail::exception *)&v70);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v33, (uint64_t)&v73, (uint64_t)&v70);
          v70.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
          MEMORY[0x1DF0ECA08](v71);
          std::exception::~exception(&v70);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v73.__r_.__value_.__l.__data_);
        }
        if (v81)
        {
          v34 = (uint64_t **)&v66;
          v35 = *a2;
          *a2 = 9;
          v65 = v35;
          v36 = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          v66 = v36;
          goto LABEL_102;
        }
        if (*a2 == 9)
        {
          v34 = (uint64_t **)&v64;
          *a2 = 0;
          v63 = 9;
          v37 = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          v64 = v37;
          v35 = 9;
LABEL_102:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v34, v35);
        }
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v76);
        return;
      case 0xE:
        v30 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v69 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v67, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0, (uint64_t)&v67);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v30, (uint64_t)&v72, (uint64_t)&v70);
        goto LABEL_82;
      default:
        v31 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&v72, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v69 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v67, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(&__p, a1, 0x10u, (uint64_t)&v67);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v69, (uint64_t)&__p, (nlohmann::detail::exception *)&v70);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v76, v31, (uint64_t)&v72, (uint64_t)&v70);
        goto LABEL_82;
    }
  }
}

void sub_1DEA358B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,std::exception a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;
  void *v58;

  a35.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v55 + 16);
  std::exception::~exception(&a35);
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a45 < 0)
    operator delete(a40);
  if (a46)
    operator delete(a46);
  v58 = *(void **)(v56 - 232);
  if (v58)
  {
    *(_QWORD *)(v56 - 224) = v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~parser(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::~lexer((uint64_t)(a1 + 5));
  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::scan(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char byte_in_range;
  uint64_t v18;
  unsigned int codepoint;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 239)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
      goto LABEL_7;
    }
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 187
      || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 191)
    {
      v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
      goto LABEL_138;
    }
  }
  do
  {
LABEL_7:
    while (2)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 > 31)
      {
        if (v3 > 90)
        {
          if (v3 <= 109)
          {
            if (v3 == 91)
            {
              return 8;
            }
            else
            {
              if (v3 != 93)
              {
                if (v3 == 102)
                {
                  v13 = 0;
                  while (aFalse_2[v13 + 1] == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                  {
                    if (++v13 == 4)
                      return 2;
                  }
                }
                goto LABEL_132;
              }
              return 10;
            }
          }
          else
          {
            if (v3 <= 122)
            {
              if (v3 == 110)
              {
                LODWORD(v29) = 1819047278;
                v21 = 1;
                while (*((unsigned __int8 *)&v29 + v21) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                {
                  if (++v21 == 4)
                    return 3;
                }
              }
              else if (v3 == 116)
              {
                LODWORD(v29) = 1702195828;
                v12 = 1;
                while (*((unsigned __int8 *)&v29 + v12) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1))
                {
                  if (++v12 == 4)
                    return 1;
                }
              }
              goto LABEL_132;
            }
            if (v3 == 123)
            {
              return 9;
            }
            else
            {
              if (v3 != 125)
                goto LABEL_132;
              return 11;
            }
          }
        }
        switch(v3)
        {
          case ' ':
            continue;
          case '"':
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(a1);
            while (2)
            {
              v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                  + 1;
              result = 4;
              v2 = "invalid string: missing closing quote";
              switch(v15)
              {
                case 0:
                  goto LABEL_138;
                case 1:
                  v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                  goto LABEL_138;
                case 2:
                  v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                  goto LABEL_138;
                case 3:
                  v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                  goto LABEL_138;
                case 4:
                  v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                  goto LABEL_138;
                case 5:
                  v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                  goto LABEL_138;
                case 6:
                  v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                  goto LABEL_138;
                case 7:
                  v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                  goto LABEL_138;
                case 8:
                  v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                  goto LABEL_138;
                case 9:
                  v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                  goto LABEL_138;
                case 10:
                  v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                  goto LABEL_138;
                case 11:
                  v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                  goto LABEL_138;
                case 12:
                  v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                  goto LABEL_138;
                case 13:
                  v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                  goto LABEL_138;
                case 14:
                  v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                  goto LABEL_138;
                case 15:
                  v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                  goto LABEL_138;
                case 16:
                  v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                  goto LABEL_138;
                case 17:
                  v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                  goto LABEL_138;
                case 18:
                  v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                  goto LABEL_138;
                case 19:
                  v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                  goto LABEL_138;
                case 20:
                  v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                  goto LABEL_138;
                case 21:
                  v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                  goto LABEL_138;
                case 22:
                  v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                  goto LABEL_138;
                case 23:
                  v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                  goto LABEL_138;
                case 24:
                  v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                  goto LABEL_138;
                case 25:
                  v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                  goto LABEL_138;
                case 26:
                  v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                  goto LABEL_138;
                case 27:
                  v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                  goto LABEL_138;
                case 28:
                  v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                  goto LABEL_138;
                case 29:
                  v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                  goto LABEL_138;
                case 30:
                  v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                  goto LABEL_138;
                case 31:
                  v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                  goto LABEL_138;
                case 32:
                  v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                  goto LABEL_138;
                case 33:
                case 34:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                  LOBYTE(v16) = *(_BYTE *)(a1 + 16);
                  goto LABEL_59;
                case 35:
                  return result;
                case 93:
                  v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
                  v2 = "invalid string: forbidden character after backslash";
                  if (v18 <= 97)
                  {
                    switch(v18)
                    {
                      case '"':
                        LOBYTE(v16) = 34;
                        break;
                      case '/':
                        LOBYTE(v16) = 47;
                        break;
                      case '\\':
                        LOBYTE(v16) = 92;
                        break;
                      default:
                        goto LABEL_138;
                    }
LABEL_59:
                    std::string::push_back((std::string *)(a1 + 80), v16);
                    continue;
                  }
                  break;
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                  v29 = xmmword_1DED16C10;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 2);
                  goto LABEL_62;
                case 225:
                  v29 = xmmword_1DED003B8;
                  v30 = unk_1DED003C8;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 237:
                case 239:
                case 240:
                  v29 = xmmword_1DED003D8;
                  v30 = unk_1DED003E8;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 238:
                  v29 = xmmword_1DED003F8;
                  v30 = unk_1DED00408;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 4);
                  goto LABEL_62;
                case 241:
                  v29 = xmmword_1DED00418;
                  v30 = unk_1DED00428;
                  v31 = xmmword_1DED00438;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
                  goto LABEL_62;
                case 242:
                case 243:
                case 244:
                  v29 = xmmword_1DED00448;
                  v30 = unk_1DED00458;
                  v31 = xmmword_1DED00468;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
                  goto LABEL_62;
                case 245:
                  v29 = xmmword_1DED00478;
                  v30 = unk_1DED00488;
                  v31 = xmmword_1DED00498;
                  byte_in_range = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(a1, (unint64_t *)&v29, 6);
LABEL_62:
                  if ((byte_in_range & 1) == 0)
                    return 14;
                  continue;
                default:
                  v2 = "invalid string: ill-formed UTF-8 byte";
                  goto LABEL_138;
              }
              break;
            }
            switch(v18)
            {
              case 'n':
                LOBYTE(v16) = 10;
                goto LABEL_59;
              case 'o':
              case 'p':
              case 'q':
              case 's':
                goto LABEL_138;
              case 'r':
                LOBYTE(v16) = 13;
                goto LABEL_59;
              case 't':
                LOBYTE(v16) = 9;
                goto LABEL_59;
              case 'u':
                codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(a1);
                v16 = codepoint;
                if (codepoint == -1)
                  goto LABEL_174;
                if ((codepoint & 0xFFFFFC00) == 0xD800)
                {
                  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 92
                    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1) != 117)
                  {
                    goto LABEL_175;
                  }
                  v20 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(a1);
                  if (v20 == -1)
                  {
LABEL_174:
                    v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                    goto LABEL_138;
                  }
                  if (v20 >> 10 != 55)
                  {
LABEL_175:
                    v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                    goto LABEL_138;
                  }
                  v16 = v20 + (v16 << 10) - 56613888;
                }
                else
                {
                  if ((codepoint & 0xFFFFFC00) == 0xDC00)
                  {
                    v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                    goto LABEL_138;
                  }
                  if ((int)codepoint <= 127)
                    goto LABEL_59;
                  if (codepoint <= 0x7FF)
                  {
                    std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
                    goto LABEL_91;
                  }
                  if (!HIWORD(codepoint))
                  {
                    std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
                    std::string::push_back((std::string *)(a1 + 80), (v16 >> 6) & 0x3F | 0x80);
                    LOBYTE(v16) = v16 & 0x3F | 0x80;
                    goto LABEL_59;
                  }
                }
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 18) | 0xF0);
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 12) & 0x3F | 0x80);
                std::string::push_back((std::string *)(a1 + 80), (v16 >> 6) & 0x3F | 0x80);
LABEL_91:
                LOBYTE(v16) = v16 & 0x3F | 0x80;
                goto LABEL_59;
              default:
                if (v18 == 98)
                {
                  LOBYTE(v16) = 8;
                }
                else
                {
                  if (v18 != 102)
                    goto LABEL_138;
                  LOBYTE(v16) = 12;
                }
                goto LABEL_59;
            }
          case ',':
            return 13;
          case '-':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(a1);
            v6 = *(_QWORD *)(a1 + 16);
            if ((unint64_t)(v6 - 49) < 9)
            {
              v7 = 5;
LABEL_18:
              v8 = (std::string *)(a1 + 80);
              while (1)
              {
                std::string::push_back((std::string *)(a1 + 80), v6);
                v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
                if ((unint64_t)(v9 - 48) >= 0xA)
                  break;
                v6 = *(_QWORD *)(a1 + 16);
              }
              if (v9 != 46)
              {
                if (v9 == 69 || v9 == 101)
                  goto LABEL_24;
LABEL_122:
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
                *(_QWORD *)&v29 = 0;
                *__error() = 0;
                if (v7 == 6)
                {
                  v27 = (const char *)(a1 + 80);
                  if (*(char *)(a1 + 103) < 0)
                    v27 = *(const char **)v27;
                  v28 = strtoll(v27, (char **)&v29, 10);
                  if (!*__error())
                  {
                    *(_QWORD *)(a1 + 112) = v28;
                    return 6;
                  }
                }
                else
                {
                  v25 = (const char *)(a1 + 80);
                  if (*(char *)(a1 + 103) < 0)
                    v25 = *(const char **)v25;
                  v26 = strtoull(v25, (char **)&v29, 10);
                  if (!*__error())
                  {
                    *(_QWORD *)(a1 + 120) = v26;
                    return 5;
                  }
                }
LABEL_119:
                v24 = (const char *)(a1 + 80);
                if (*(char *)(a1 + 103) < 0)
                  v24 = *(const char **)v24;
                *(double *)(a1 + 128) = strtod(v24, (char **)&v29);
                return 7;
              }
              goto LABEL_113;
            }
            if (v6 == 48)
            {
              std::string::push_back((std::string *)(a1 + 80), 48);
              v7 = 5;
            }
            else
            {
              if (v6 == 45)
                std::string::push_back((std::string *)(a1 + 80), 45);
              v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
              if ((unint64_t)(v14 - 49) < 9)
              {
                v6 = *(_QWORD *)(a1 + 16);
                v7 = 6;
                goto LABEL_18;
              }
              if (v14 != 48)
              {
                v2 = "invalid number; expected digit after '-'";
                goto LABEL_138;
              }
              std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
              v7 = 6;
            }
            v22 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            if (v22 == 101 || v22 == 69)
            {
              v8 = (std::string *)(a1 + 80);
              goto LABEL_24;
            }
            if (v22 != 46)
              goto LABEL_122;
            v8 = (std::string *)(a1 + 80);
LABEL_113:
            std::string::push_back(v8, *(_BYTE *)(a1 + 136));
            if ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                  - 48) > 9)
            {
              v2 = "invalid number; expected digit after '.'";
              goto LABEL_138;
            }
            v8 = (std::string *)(a1 + 80);
            do
            {
              std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
              v23 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            }
            while ((unint64_t)(v23 - 48) < 0xA);
            if (v23 != 101 && v23 != 69)
            {
LABEL_118:
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(a1);
              *(_QWORD *)&v29 = 0;
              *__error() = 0;
              goto LABEL_119;
            }
LABEL_24:
            std::string::push_back(v8, *(_BYTE *)(a1 + 16));
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
            if ((unint64_t)(v10 - 48) >= 0xA)
            {
              if (v10 != 45 && v10 != 43)
              {
                v2 = "invalid number; expected '+', '-', or digit after exponent";
                goto LABEL_138;
              }
              v11 = (std::string *)(a1 + 80);
              std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
              if ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                    - 48) >= 0xA)
              {
                v2 = "invalid number; expected digit after exponent sign";
                goto LABEL_138;
              }
            }
            else
            {
              v11 = (std::string *)(a1 + 80);
            }
            std::string::push_back(v11, *(_BYTE *)(a1 + 16));
            while ((unint64_t)(nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1)
                                     - 48) <= 9)
              std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
            goto LABEL_118;
          case ':':
            return 12;
          default:
            goto LABEL_132;
        }
      }
      break;
    }
  }
  while ((unint64_t)(v3 - 9) < 2 || v3 == 13);
  if ((unint64_t)(v3 + 1) < 2)
    return 15;
LABEL_132:
  v2 = "invalid literal";
LABEL_138:
  *(_QWORD *)(a1 + 104) = v2;
  return 14;
}

void sub_1DEA36774(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        v8 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        std::string::append(this, __str);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_1DEA36844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::exception_message(std::string *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a1, "syntax error ");
  v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a1, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "- ");
  v13 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a2 + 144));
    v14 = std::string::append(&v36, "; last read: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_token_string(&__p, *(unsigned __int8 **)(a2 + 96), *(unsigned __int8 **)(a2 + 104));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a1, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_52;
    }
LABEL_49:
    if (!a3)
      return;
    goto LABEL_53;
  }
  if (v13 > 0x10)
    v25 = "unknown token";
  else
    v25 = off_1EA94B170[v13];
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a1, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_49;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_52:
  operator delete(v24);
  if (!a3)
    return;
LABEL_53:
  if (a3 > 0x10)
    v30 = "unknown token";
  else
    v30 = off_1EA94B170[a3];
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a1, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1DEA36BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get(unsigned __int8 **a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  uint64_t result;
  uint64_t v18;

  *((int64x2_t *)a1 + 2) = vaddq_s64(*((int64x2_t *)a1 + 2), vdupq_n_s64(1uLL));
  if (*((_BYTE *)a1 + 24))
  {
    *((_BYTE *)a1 + 24) = 0;
    v2 = (uint64_t)a1[2];
  }
  else
  {
    v3 = *a1;
    if (*a1 == a1[1])
    {
      v2 = -1;
    }
    else
    {
      v2 = *v3;
      *a1 = v3 + 1;
    }
    a1[2] = (unsigned __int8 *)v2;
  }
  if (v2 == -1)
    return -1;
  v5 = a1[8];
  v4 = (unint64_t)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1 + 7;
    v8 = (unint64_t)a1[7];
    v9 = &v5[-v8];
    v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unsigned __int8 *)operator new(v12);
    else
      v13 = 0;
    v14 = &v13[v12];
    v9[(_QWORD)v13] = v2;
    v6 = (uint64_t)&v9[(_QWORD)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      v13 = &v9[(_QWORD)v13];
    }
    else
    {
      v15 = &v5[~v8];
      do
      {
        v16 = *--v5;
        (v15--)[(_QWORD)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      v5 = *v7;
    }
    a1[7] = v13;
    a1[8] = (unsigned __int8 *)v6;
    a1[9] = v14;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[8] = (unsigned __int8 *)v6;
  result = (uint64_t)a1[2];
  if (result == 10)
  {
    v18 = (uint64_t)(a1[6] + 1);
    a1[5] = 0;
    a1[6] = (unsigned __int8 *)v18;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::reset(uint64_t a1)
{
  _BYTE *v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v9 + 1;
    *(_QWORD *)(a1 + 72) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(_QWORD *)(result + 32);
  if (v2 || (v1 = (_QWORD *)(result + 48), (v2 = *(_QWORD *)(result + 48)) != 0))
    *v1 = v2 - 1;
  if (*(_QWORD *)(result + 16) != -1)
    --*(_QWORD *)(result + 64);
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get_codepoint(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v8;
  uint64_t v9;

  v2 = 0;
  LODWORD(v3) = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1DEC40490;
  while (1)
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
    v5 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)(v5 - 48) >= 0xA)
      break;
    v6 = -48;
LABEL_8:
    v3 = (((v6 + (_DWORD)v5) << v4) + v3);
    v2 += 4;
    if (v2 == 16)
      return v3;
  }
  if ((unint64_t)(v5 - 65) < 6)
  {
    v6 = -55;
    goto LABEL_8;
  }
  if ((unint64_t)(v5 - 97) <= 5)
  {
    v6 = -87;
    goto LABEL_8;
  }
  return 0xFFFFFFFFLL;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::next_byte_in_range(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  std::string *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;

  v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 16));
  if (!a3)
    return 1;
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<unsigned char const*>>::get((unsigned __int8 **)a1);
    v8 = *(_QWORD *)(a1 + 16);
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void std::__shared_ptr_emplace<VoiceConfigImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VoiceConfigImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<VoiceConfigImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t FSTGrammarImpl::has_rule(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;

  v2 = *(const void ***)(a1 + 16);
  if (!v2)
    return 0;
  v4 = a1 + 24;
  while (std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
  {
LABEL_6:
    v2 = (const void **)*v2;
    if (!v2)
      return 0;
  }
  if (std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void FSTGrammarImpl::apply_rule(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  NSObject *v12;
  const char *v13;
  const void *v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  __int32 v21;
  __int32 v22;
  int v23;
  unsigned int v24;
  int *v25;
  int16x4_t v26;
  uint8x8_t v27;
  __int32 v28;
  int v29;
  __int32 v30;
  const std::string::value_type *v31;
  unint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned int *v40;
  unsigned int v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int v49;
  int i;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  fst *v55;
  _QWORD *v56;
  fst *v57;
  _QWORD *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  int v62;
  int *v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  int v72;
  int v73;
  uint64_t value_low;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  float v80;
  int v81;
  float v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  fst *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  std::vector<int> *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  fst *v95;
  _QWORD *v96;
  fst *v97;
  _QWORD *v98;
  uint64_t v99;
  fst *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  std::vector<char>::pointer v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  std::vector<char>::pointer end;
  char *v125;
  std::vector<char>::pointer begin;
  int64_t v127;
  int64_t v128;
  unint64_t v129;
  size_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char v135;
  fst *v136;
  _QWORD *v137;
  uint64_t v138;
  fst *v139;
  _QWORD *v140;
  _QWORD *v141;
  fst *v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  int v153;
  int *v154;
  int v155;
  int v156;
  BOOL v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  float *v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  float v171;
  int v172;
  float v173;
  uint64_t v174;
  fst *v175;
  _QWORD *v176;
  void *v177;
  uint64_t v178;
  fst *v179;
  _QWORD *v180;
  uint64_t v181;
  fst *v182;
  _QWORD *v183;
  uint64_t v184;
  fst *v185;
  _QWORD *v186;
  uint64_t v187;
  fst *v188;
  _QWORD *v189;
  _QWORD *v190;
  fst *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  fst *v196;
  _QWORD *v197;
  _QWORD *v198;
  char *v199;
  _DWORD *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int v208;
  fst *v209;
  _QWORD *v210;
  _QWORD *v211;
  char v212;
  fst *v213;
  _QWORD *v214;
  _QWORD *v215;
  unint64_t v216;
  int v217;
  fst *v218;
  _QWORD *v219;
  _QWORD *v220;
  fst *v221;
  _QWORD *v222;
  NSObject *v223;
  const char *v224;
  const void *v225;
  const std::string::value_type *v226;
  const void *v227;
  const std::string::value_type *v228;
  uint64_t v229;
  unint64_t j;
  _BYTE *v231;
  void **v232;
  void *v233;
  void **v234;
  uint64_t v235;
  char v236;
  fst *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int v251;
  int v252;
  fst *v253;
  _QWORD *v254;
  fst *v255;
  _QWORD *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  fst *v264;
  _QWORD *v265;
  fst *v266;
  _QWORD *v267;
  uint64_t v268;
  int v269;
  fst *v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  fst *v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  fst *v278;
  _QWORD *v279;
  _QWORD *v280;
  uint64_t v281;
  fst *v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  fst *v286;
  _QWORD *v287;
  uint64_t v288;
  int v289;
  fst *v290;
  _QWORD *v291;
  _QWORD *v292;
  uint64_t v293;
  fst *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  fst *v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  fst *v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  std::vector<int> *v308;
  unint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  void (**v317)(void **, _QWORD);
  uint64_t v318;
  uint64_t (**v319)(void **, uint64_t, _QWORD);
  uint64_t v320;
  char v321[4];
  int v322;
  void (**v323)(void **);
  uint64_t v324;
  void *v325;
  void *v326;
  uint64_t v327;
  std::vector<char>::value_type v328[8];
  char v329;
  char v330;
  void *v331[2];
  __int128 v332;
  __int128 v333;
  void *__p;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  std::string v339;
  std::vector<char>::value_type __x[8];
  void *v341;
  int v342;
  char v343;
  int v344;
  int v345;
  std::vector<char> v346;
  _BYTE buf[24];
  uint64_t v348;
  unint64_t v349;
  int v350;
  _QWORD *v351;
  void *v352;
  void *v353;
  char v354;
  uint64_t v355;
  _QWORD v356[22];

  v356[19] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_8;
  v8 = a1 + 24;
  v9 = a1 + 16;
  do
  {
    v10 = std::less<std::string>::operator()[abi:ne180100](v8, (const void **)(v7 + 32), (const void **)a2);
    v11 = (uint64_t *)(v7 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v7;
      v9 = v7;
    }
    v7 = *v11;
  }
  while (*v11);
  if (v9 == v6 || std::less<std::string>::operator()[abi:ne180100](v8, (const void **)a2, (const void **)(v9 + 32)))
  {
LABEL_8:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v14 = (const void *)a2;
      else
        v14 = *(const void **)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_ERROR, "Ignore unknown rule '%s'", buf, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const void *)a2;
    else
      v15 = *(const void **)a2;
    Diagnostics::log(3, "Ignore unknown rule '%s'", v13, v15);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
    return;
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(&v323);
  __p = 0;
  v335 = 0uLL;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  if (!v18)
    goto LABEL_76;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  while (1)
  {
    v22 = v21 + 1;
    v23 = v17[v20];
    v24 = v23;
    if ((v23 & 0x80000000) == 0)
    {
      if ((unint64_t)v19 < *((_QWORD *)&v335 + 1))
      {
        *v19 = v23;
        v25 = v19 + 1;
        goto LABEL_75;
      }
      v34 = (int *)__p;
      v35 = ((char *)v19 - (_BYTE *)__p) >> 2;
      v36 = v35 + 1;
      if (!((unint64_t)(v35 + 1) >> 62))
      {
        v37 = *((_QWORD *)&v335 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v335 + 1) - (_QWORD)__p) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v335 + 8, v38);
          v34 = (int *)__p;
          v19 = (int *)v335;
        }
        else
        {
          v39 = 0;
        }
        v40 = (unsigned int *)&v39[4 * v35];
        *v40 = v24;
        v25 = (int *)(v40 + 1);
        while (v19 != v34)
        {
          v41 = *--v19;
          *--v40 = v41;
        }
        __p = v40;
        *(_QWORD *)&v335 = v25;
        *((_QWORD *)&v335 + 1) = &v39[4 * v38];
        if (v34)
          operator delete(v34);
        goto LABEL_75;
      }
LABEL_613:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if ((v23 & 0xC0) == 0x80)
      break;
    v26 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)vdup_n_s16(v23), (uint16x4_t)0xF700EF00BF00DFLL), (int8x8_t)0x8000400020001);
    v26.i32[0] = vaddv_s16(v26) & 0xF;
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v23 <= 0xFBu)
      v28 = v27.i32[0];
    else
      v28 = v27.i32[0] + 1;
    v29 = v24 & ~(-1 << (6 - v28));
    if (!v28)
    {
      v30 = v21 + 1;
      v33 = v24 & 0x3F;
      goto LABEL_52;
    }
    v30 = v27.i32[0] + (v24 > 0xFB) + v21 + 1;
    v31 = &v17[v22];
    v32 = v18 - v22;
    do
    {
      if (!v32)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "ERROR");
        v55 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
        v56 = (_QWORD *)fst::cerr(v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"UTF8StringToLabels: truncated utf-8 byte sequence", 49);
        goto LABEL_85;
      }
      if ((*v31 & 0xC0) != 0x80)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "ERROR");
        v57 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
        v58 = (_QWORD *)fst::cerr(v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"UTF8StringToLabels: missing/invalid continuation byte", 53);
        goto LABEL_85;
      }
      v33 = *v31++ & 0x3F | (v29 << 6);
      --v32;
      v29 = v33;
      --v28;
    }
    while (v28);
    if (v33 < 0)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "ERROR");
      v264 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
      v265 = (_QWORD *)fst::cerr(v264);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)"UTF8StringToLabels: Invalid character found: ", 45);
      std::ostream::operator<<();
      goto LABEL_85;
    }
LABEL_52:
    if ((unint64_t)v19 < *((_QWORD *)&v335 + 1))
    {
      *v19 = v33;
      v25 = v19 + 1;
      goto LABEL_74;
    }
    v42 = (int *)__p;
    v43 = ((char *)v19 - (_BYTE *)__p) >> 2;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 62)
      goto LABEL_613;
    v45 = *((_QWORD *)&v335 + 1) - (_QWORD)__p;
    if ((uint64_t)(*((_QWORD *)&v335 + 1) - (_QWORD)__p) >> 1 > v44)
      v44 = v45 >> 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v335 + 8, v46);
      v42 = (int *)__p;
      v19 = (int *)v335;
    }
    else
    {
      v47 = 0;
    }
    v48 = (int *)&v47[4 * v43];
    *v48 = v33;
    v25 = v48 + 1;
    while (v19 != v42)
    {
      v49 = *--v19;
      *--v48 = v49;
    }
    __p = v48;
    *(_QWORD *)&v335 = v25;
    *((_QWORD *)&v335 + 1) = &v47[4 * v46];
    if (v42)
      operator delete(v42);
LABEL_74:
    v22 = v30;
LABEL_75:
    *(_QWORD *)&v335 = v25;
    v20 = v22;
    v19 = v25;
    v21 = v22;
    if (v18 <= v22)
    {
LABEL_76:
      v323[27]((void **)&v323);
      for (i = ((uint64_t (*)(void **))v323[19])((void **)&v323);
            ;
            i = ((uint64_t (*)(void **))v323[19])((void **)&v323))
      {
        v51 = __p;
        if (i > (unint64_t)((uint64_t)(v335 - (_QWORD)__p) >> 2))
          break;
        v323[24]((void **)&v323);
      }
      if ((void *)v335 != __p)
      {
        v52 = 0;
        do
        {
          v53 = v52 + 1;
          *(_DWORD *)buf = v51[v52];
          *(_DWORD *)&buf[4] = *(_DWORD *)buf;
          *(_DWORD *)&buf[8] = 0;
          *(_DWORD *)&buf[12] = v52 + 1;
          v323[25]((void **)&v323);
          v51 = __p;
          v52 = v53;
        }
        while (v53 < (uint64_t)(v335 - (_QWORD)__p) >> 2);
      }
      ((void (*)(void (***)(void **), _QWORD))v323[21])(&v323, 0);
      ((void (*)(void (***)(void **), _QWORD, float))v323[22])(&v323, ((_QWORD)v335 - (_QWORD)__p) >> 2, 0.0);
      v54 = 1;
      goto LABEL_88;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "ERROR");
  v97 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
  v98 = (_QWORD *)fst::cerr(v97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"UTF8StringToLabels: continuation byte as lead byte", 50);
LABEL_85:
  fst::LogMessage::~LogMessage((fst::LogMessage *)v331);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v54 = 0;
LABEL_88:
  if (__p)
  {
    *(_QWORD *)&v335 = __p;
    operator delete(__p);
  }
  if ((v54 & 1) == 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v83 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v83, OS_LOG_TYPE_ERROR, "FSTGrammar unable to compile input FST.", buf, 2u);
    }
    Diagnostics::log(3, "FSTGrammar unable to compile input FST.", v84);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
    goto LABEL_566;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "in");
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v321[0] = 1;
  v322 = 3;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(&v319);
  std::string::basic_string[abi:ne180100]<0>(buf, "rule");
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)&v323, v9 + 56, (uint64_t)&v319, (uint64_t)v321);
  std::string::basic_string[abi:ne180100]<0>(buf, "out");
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(&v317);
  v325 = 0;
  v326 = 0;
  v327 = 0;
  LODWORD(v335) = 7;
  BYTE4(v335) = 0;
  __p = &off_1EA925798;
  v338 = 0u;
  v336 = 0u;
  v337 = 0u;
  v59 = v319[8]((void **)&v319, 0x4E00000000, 0);
  if ((v59 & 0x4000000000) != 0
    || ((unsigned int (*)(uint64_t (***)(void **, uint64_t, _QWORD)))v319[3])(&v319) == -1)
  {
    v85 = operator new();
    *(_DWORD *)(v85 + 8) = 5;
    *(_BYTE *)(v85 + 12) = 0;
    *(_QWORD *)v85 = &off_1EA924DF8;
    *(_QWORD *)(v85 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v85 + 32) = 0;
    *(_QWORD *)(v85 + 40) = 0;
    *(_QWORD *)(v85 + 24) = 0;
    *((_QWORD *)&v335 + 1) = v85;
    if (FLAGS_v < 2)
      goto LABEL_296;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v86 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v87 = (_QWORD *)fst::cerr(v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_161;
  }
  if ((v59 & 0x800000000) != 0)
  {
    v89 = operator new();
    *(_DWORD *)(v89 + 8) = 4;
    *(_BYTE *)(v89 + 12) = 0;
    *(_QWORD *)v89 = &off_1EA924900;
    *(_QWORD *)(v89 + 16) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v89 + 24) = 0u;
    v90 = (std::vector<int> *)(v89 + 48);
    *(_OWORD *)(v89 + 40) = 0u;
    *(_OWORD *)(v89 + 56) = 0u;
    LOBYTE(v345) = 0;
    v306 = v89 + 24;
    v339.__r_.__value_.__r.__words[0] = v89 + 24;
    v339.__r_.__value_.__l.__size_ = (std::string::size_type)&v345;
    v91 = (_QWORD *)operator new();
    *v91 = 0;
    v91[1] = 0;
    v91[2] = 0;
    v339.__r_.__value_.__r.__words[2] = (std::string::size_type)v91;
    LOBYTE(v345) = 1;
    LODWORD(v92) = ((uint64_t (*)(uint64_t (***)(void **, uint64_t, _QWORD)))v319[3])(&v319);
    if ((_DWORD)v92 == -1)
    {
      fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit((char ***)&v339);
    }
    else
    {
      memset(&v346, 0, sizeof(v346));
      v332 = 0u;
      v333 = 0u;
      *(_OWORD *)v331 = 0u;
      v308 = (std::vector<int> *)(v89 + 48);
      v311 = v89;
      fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(buf, 64);
      v314 = v319[8]((void **)&v319, 1, 0);
      if (v314)
        v93 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)&v319);
      else
        v93 = (v92 + 1);
      __x[0] = 0;
      if ((std::vector<char>::pointer)(int)v93 <= (std::vector<char>::pointer)(v346.__end_ - v346.__begin_))
      {
        if ((std::vector<char>::pointer)(int)v93 < (std::vector<char>::pointer)(v346.__end_ - v346.__begin_))
          v346.__end_ = &v346.__begin_[(int)v93];
      }
      else
      {
        std::vector<char>::__append(&v346, (int)v93 - (unint64_t)(v346.__end_ - v346.__begin_), __x);
      }
      v342 = 0;
      ((void (*)(uint64_t (***)(void **, uint64_t, _QWORD), std::vector<char>::value_type *))v319[16])(&v319, __x);
      v313 = v92;
      if ((int)v92 < (int)v93)
      {
        v92 = v92;
        while (1)
        {
          v346.__begin_[(int)v92] = 1;
          v102 = (uint64_t)v351;
          if (v351)
          {
            v351 = (_QWORD *)v351[6];
          }
          else
          {
            v102 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(&buf[8], 1);
            *(_QWORD *)(v102 + 48) = 0;
          }
          *(_DWORD *)v102 = v92;
          *(_QWORD *)(v102 + 40) = 0;
          v319[17]((void **)&v319, v92, v102 + 8);
          *(_QWORD *)v328 = v102;
          std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v331, v328);
          v103 = *((_QWORD *)&v333 + 1);
          if (*((_QWORD *)&v333 + 1))
            break;
          v104 = 1;
LABEL_233:
          if ((_DWORD)v92 == v313)
            v92 = 0;
          else
            v92 = (v92 + 1);
          if ((int)v92 < (int)v93)
          {
            v92 = (int)v92;
            while (v346.__begin_[v92])
            {
              if ((int)v93 == ++v92)
              {
                v92 = v93;
                break;
              }
            }
          }
          if (!v314 && (_DWORD)v92 == (_DWORD)v93)
          {
            while (1)
            {
              if (*(_QWORD *)__x)
              {
                if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
                  goto LABEL_272;
                v123 = *(_QWORD *)__x
                     ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x)
                     : v342;
              }
              else
              {
                v123 = v342;
                if (v342 >= (int)v341)
                  goto LABEL_272;
              }
              if (v123 == (_DWORD)v93)
                break;
              if (*(_QWORD *)__x)
                (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
              else
                ++v342;
            }
            end = v346.__end_;
            if (v346.__end_ >= v346.__end_cap_.__value_)
            {
              begin = v346.__begin_;
              v127 = v346.__end_ - v346.__begin_;
              v128 = v346.__end_ - v346.__begin_ + 1;
              if (v128 < 0)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v129 = v346.__end_cap_.__value_ - v346.__begin_;
              if (2 * (v346.__end_cap_.__value_ - v346.__begin_) > (unint64_t)v128)
                v128 = 2 * v129;
              if (v129 >= 0x3FFFFFFFFFFFFFFFLL)
                v130 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v130 = v128;
              if (v130)
                v131 = (char *)operator new(v130);
              else
                v131 = 0;
              v132 = &v131[v127];
              v133 = &v131[v127];
              *v133 = 0;
              v125 = v133 + 1;
              if (end != begin)
              {
                v134 = &end[~(unint64_t)begin];
                do
                {
                  v135 = *--end;
                  (v134--)[(_QWORD)v131] = v135;
                }
                while (end != begin);
                end = v346.__begin_;
                v132 = v131;
              }
              v346.__begin_ = v132;
              v346.__end_ = v125;
              v346.__end_cap_.__value_ = &v131[v130];
              if (end)
                operator delete(end);
            }
            else
            {
              *v346.__end_ = 0;
              v125 = end + 1;
            }
            v346.__end_ = v125;
            v93 = (v93 + 1);
          }
LABEL_272:
          if ((v104 & 1) == 0 || (int)v92 >= (int)v93)
            goto LABEL_274;
        }
        v104 = 1;
        while (1)
        {
          v105 = *(_QWORD **)(*(_QWORD *)((char *)v331[1]
                                        + (((unint64_t)(v103 + v333 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v103 + v333 - 1) & 0x1FF));
          v106 = *(int *)v105;
          v107 = v346.__end_ - v346.__begin_;
          if (v346.__end_ - v346.__begin_ <= v106)
          {
            v93 = v106 + 1;
            v328[0] = 0;
            if (v106 + 1 <= v107)
            {
              if (v106 + 1 < v107)
                v346.__end_ = &v346.__begin_[v93];
            }
            else
            {
              std::vector<char>::__append(&v346, v106 + 1 - v107, v328);
            }
          }
          if ((v104 & 1) == 0)
          {
LABEL_199:
            v346.__begin_[v106] = 2;
            v112 = v105[1];
            if (v112)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
            }
            else
            {
              v113 = (_DWORD *)v105[4];
              if (v113)
                --*v113;
            }
            v105[6] = v351;
            v351 = v105;
            --*((_QWORD *)&v333 + 1);
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v331);
            if (*((_QWORD *)&v333 + 1))
            {
              v105 = *(_QWORD **)(*(_QWORD *)((char *)v331[1]
                                            + (((unint64_t)(*((_QWORD *)&v333 + 1) + v333 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * ((*((_QWORD *)&v333 + 1) + v333 - 1) & 0x1FF));
              v114 = v105[1];
              if (v114)
                (*(void (**)(uint64_t))(*(_QWORD *)v114 + 32))(v114);
              fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(v339.__r_.__value_.__r.__words[2], v106);
              v115 = v105[1];
              if (!v115)
                goto LABEL_226;
              (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
            }
            else
            {
              fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(v339.__r_.__value_.__r.__words[2], v106);
            }
            goto LABEL_230;
          }
          v108 = v105[1];
          if (!v108)
            break;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 24))(v108))
            goto LABEL_199;
          v109 = v105[1];
          if (!v109)
          {
            v111 = v105[5];
LABEL_210:
            v110 = v105[2] + 16 * v111;
            goto LABEL_211;
          }
          v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 32))(v109);
LABEL_211:
          v116 = *(int *)(v110 + 12);
          v117 = v346.__begin_;
          v118 = v346.__end_ - v346.__begin_;
          if (v346.__end_ - v346.__begin_ <= v116)
          {
            v93 = (v116 + 1);
            v328[0] = 0;
            if ((int)v93 <= v118)
            {
              if ((int)v93 < v118)
                v346.__end_ = &v346.__begin_[(int)v93];
            }
            else
            {
              std::vector<char>::__append(&v346, (int)v93 - v118, v328);
              v116 = *(int *)(v110 + 12);
              v117 = v346.__begin_;
            }
          }
          v119 = v117[v116];
          if (v119 != 1)
          {
            if (v119 == 2)
            {
              v120 = v105[1];
              if (v120)
                (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
              else
                ++v105[5];
            }
            else
            {
              v117[v116] = 1;
              v122 = (uint64_t)v351;
              if (v351)
              {
                v351 = (_QWORD *)v351[6];
              }
              else
              {
                v122 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(&buf[8], 1);
                *(_QWORD *)(v122 + 48) = 0;
              }
              *(_DWORD *)v122 = *(_DWORD *)(v110 + 12);
              *(_QWORD *)(v122 + 40) = 0;
              ((void (*)(uint64_t (***)(void **, uint64_t, _QWORD)))v319[17])(&v319);
              *(_QWORD *)v328 = v122;
              std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v331, v328);
            }
            v104 = 1;
            goto LABEL_230;
          }
          *(_BYTE *)v339.__r_.__value_.__l.__size_ = 0;
          v121 = v105[1];
          if (!v121)
          {
            v104 = 0;
LABEL_226:
            ++v105[5];
            goto LABEL_230;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
          v104 = 0;
LABEL_230:
          v103 = *((_QWORD *)&v333 + 1);
          if (!*((_QWORD *)&v333 + 1))
            goto LABEL_233;
        }
        v111 = v105[5];
        if (v111 >= v105[3])
          goto LABEL_199;
        goto LABEL_210;
      }
LABEL_274:
      fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit((char ***)&v339);
      v90 = v308;
      v89 = v311;
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
      *(_QWORD *)buf = &unk_1EA924000;
      fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(&buf[8]);
      kaldi::CuMatrixBase<float>::~CuMatrixBase(buf);
      std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)v331);
      if (v346.__begin_)
      {
        v346.__end_ = v346.__begin_;
        operator delete(v346.__begin_);
      }
    }
    if (!(_BYTE)v345)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(v328, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(v328, "ERROR");
      v136 = fst::LogMessage::LogMessage((fst *)&v330, (uint64_t)v328);
      v137 = (_QWORD *)fst::cerr(v136);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v330);
      if (v329 < 0)
        operator delete(*(void **)v328);
      *(_BYTE *)(v89 + 12) = 1;
    }
    std::vector<int>::resize(v90, (uint64_t)(*(_QWORD *)(v89 + 32) - *(_QWORD *)(v89 + 24)) >> 2, &fst::kNoStateId);
    *((_QWORD *)&v335 + 1) = v89;
    if (FLAGS_v < 2)
      goto LABEL_296;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v142 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v143 = (_QWORD *)fst::cerr(v142);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_161;
  }
  if ((v59 & 0x200000000) == 0)
  {
    v339.__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)buf = (char *)&v337 + 8;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v348 = (uint64_t)&v339;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v319, (uint64_t *)buf, 0);
    v60 = (int *)*((_QWORD *)&v337 + 1);
    if (*((_QWORD *)&v337 + 1) != (_QWORD)v338)
    {
      v61 = *((_QWORD *)&v337 + 1) + 4;
      if (*((_QWORD *)&v337 + 1) + 4 != (_QWORD)v338)
      {
        v62 = **((_DWORD **)&v337 + 1);
        v63 = (int *)(*((_QWORD *)&v337 + 1) + 4);
        do
        {
          v65 = *v63++;
          v64 = v65;
          v66 = v62 < v65;
          if (v62 <= v65)
            v62 = v64;
          if (v66)
            v60 = (int *)v61;
          v61 = (uint64_t)v63;
        }
        while (v63 != (int *)v338);
      }
    }
    v67 = *v60;
    v68 = *v60 + 1;
    std::vector<fst::QueueType>::vector(__x, v68);
    v69 = operator new();
    v70 = (_QWORD *)operator new();
    *v70 = &v325;
    if (v341 != *(void **)__x)
    {
      v71 = ((uint64_t)v341 - *(_QWORD *)__x) >> 2;
      if (v71 <= 1)
        v71 = 1;
      bzero(*(void **)__x, 4 * v71);
    }
    LODWORD(v346.__end_cap_.__value_) = 0;
    ((void (*)(uint64_t (***)(void **, uint64_t, _QWORD), std::vector<char> *))v319[16])(&v319, &v346);
    v307 = v68;
    v310 = v67;
    v72 = 1;
    v73 = 1;
    while (1)
    {
      if (v346.__begin_)
      {
        if ((*(unsigned int (**)(std::vector<char>::pointer))(*(_QWORD *)v346.__begin_ + 16))(v346.__begin_))
        {
          if (v346.__begin_)
            (*(void (**)(void))(*(_QWORD *)v346.__begin_ + 8))();
LABEL_173:
          if (v73)
          {
            v99 = operator new();
            *(_DWORD *)(v99 + 8) = 2;
            *(_BYTE *)(v99 + 12) = 0;
            *(_OWORD *)(v99 + 16) = 0u;
            *(_OWORD *)(v99 + 32) = 0u;
            *(_OWORD *)(v99 + 48) = 0u;
            *(_QWORD *)v99 = &off_1EA925F10;
            *((_QWORD *)&v335 + 1) = v99;
            if (FLAGS_v >= 2)
            {
              std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
              v100 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
              v101 = (_QWORD *)fst::cerr(v100);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_284:
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
              if (SBYTE7(v332) < 0)
                operator delete(v331[0]);
            }
            goto LABEL_286;
          }
          if (v72)
          {
            v138 = operator new();
            fst::TopOrderQueue<int>::TopOrderQueue(v138, (uint64_t)&v337 + 8);
            *((_QWORD *)&v335 + 1) = v138;
            if (FLAGS_v >= 2)
            {
              std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
              v139 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
              v140 = (_QWORD *)fst::cerr(v139);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"AutoQueue: using top-order discipline", 37);
              goto LABEL_284;
            }
LABEL_286:
            v141 = v70;
LABEL_287:
            MEMORY[0x1DF0ED014](v141, 0x60C40B37CB4BBLL);
            MEMORY[0x1DF0ED014](v69, 0xC400A2AC0F1);
            v88 = *(void **)__x;
            if (*(_QWORD *)__x)
            {
              v341 = *(void **)__x;
LABEL_289:
              operator delete(v88);
            }
            goto LABEL_296;
          }
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
            v266 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
            v267 = (_QWORD *)fst::cerr(v266);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
            if (SBYTE7(v332) < 0)
              operator delete(v331[0]);
          }
          std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)&v336, v307);
          if (v310 < 0)
          {
LABEL_592:
            v285 = operator new();
            *(_DWORD *)(v285 + 8) = 6;
            *(_BYTE *)(v285 + 12) = 0;
            *(_QWORD *)v285 = &off_1EA925748;
            *(_QWORD *)(v285 + 16) = &v336;
            *(_QWORD *)(v285 + 24) = (char *)&v337 + 8;
            *(_QWORD *)(v285 + 32) = 0xFFFFFFFF00000000;
            *(_QWORD *)(v285 + 48) = 0;
            *(_QWORD *)(v285 + 56) = 0;
            *(_QWORD *)(v285 + 40) = 0;
            *((_QWORD *)&v335 + 1) = v285;
            v141 = v70;
            goto LABEL_287;
          }
          v268 = 0;
          while (2)
          {
            v269 = *(_DWORD *)(*(_QWORD *)__x + 4 * v268);
            if (v269 == 3)
            {
              v277 = operator new();
              *(_DWORD *)(v277 + 8) = 3;
              *(_BYTE *)(v277 + 12) = 0;
              *(_QWORD *)v277 = &off_1EA925518;
              *(_OWORD *)(v277 + 16) = *(_OWORD *)v70;
              *(_OWORD *)(v277 + 32) = 0u;
              *(_OWORD *)(v277 + 48) = 0u;
              *(_OWORD *)(v277 + 64) = 0u;
              *(_OWORD *)(v277 + 80) = 0u;
              *(_OWORD *)(v277 + 92) = 0u;
              *(_QWORD *)(v277 + 120) = 0;
              *(_QWORD *)(v277 + 128) = 0;
              *(_QWORD *)(v277 + 112) = 0;
              *(_QWORD *)(v336 + 8 * v268) = v277;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v278 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v279 = (_QWORD *)fst::cerr(v278);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v279, (uint64_t)"AutoQueue: SCC #", 16);
                v280 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)": using shortest-first discipline", 33);
                goto LABEL_589;
              }
            }
            else if (v269 == 2)
            {
              v273 = operator new();
              *(_DWORD *)(v273 + 8) = 2;
              *(_BYTE *)(v273 + 12) = 0;
              *(_OWORD *)(v273 + 16) = 0u;
              *(_OWORD *)(v273 + 32) = 0u;
              *(_OWORD *)(v273 + 48) = 0u;
              *(_QWORD *)v273 = &off_1EA925F10;
              *(_QWORD *)(v336 + 8 * v268) = v273;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v274 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v275 = (_QWORD *)fst::cerr(v274);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)"AutoQueue: SCC #", 16);
                v276 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)": using LIFO disciplle", 22);
                goto LABEL_589;
              }
            }
            else if (v269)
            {
              v281 = operator new();
              *(_DWORD *)(v281 + 8) = 1;
              *(_BYTE *)(v281 + 12) = 0;
              *(_OWORD *)(v281 + 16) = 0u;
              *(_OWORD *)(v281 + 32) = 0u;
              *(_OWORD *)(v281 + 48) = 0u;
              *(_QWORD *)v281 = &off_1EA9257E8;
              *(_QWORD *)(v336 + 8 * v268) = v281;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v282 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v283 = (_QWORD *)fst::cerr(v282);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"AutoQueue: SCC #", 16);
                v284 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)": using FIFO disciplle", 22);
                goto LABEL_589;
              }
            }
            else
            {
              *(_QWORD *)(v336 + 8 * v268) = 0;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v270 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v271 = (_QWORD *)fst::cerr(v270);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)"AutoQueue: SCC #", 16);
                v272 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)": using trivial discipline", 26);
LABEL_589:
                fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
                if (SBYTE7(v332) < 0)
                  operator delete(v331[0]);
              }
            }
            if (v307 == ++v268)
              goto LABEL_592;
            continue;
          }
        }
        if (v346.__begin_)
          value_low = (*(uint64_t (**)(void))(*(_QWORD *)v346.__begin_ + 24))();
        else
          value_low = LODWORD(v346.__end_cap_.__value_);
      }
      else
      {
        value_low = LODWORD(v346.__end_cap_.__value_);
        if (SLODWORD(v346.__end_cap_.__value_) >= SLODWORD(v346.__end_))
          goto LABEL_173;
      }
      *(_QWORD *)&v333 = 0;
      ((uint64_t (**)(void **, uint64_t, void **))v319)[17]((void **)&v319, value_low, v331);
      v75 = (int)value_low;
      while (1)
      {
        if (!v331[0])
        {
          v77 = v333;
          if ((unint64_t)v333 >= (unint64_t)v332)
            goto LABEL_148;
          goto LABEL_129;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v331[0] + 24))(v331[0]))
          break;
        if (v331[0])
        {
          v76 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v331[0] + 32))();
          goto LABEL_130;
        }
        v77 = v333;
LABEL_129:
        v76 = (float *)((char *)v331[1] + 16 * v77);
LABEL_130:
        v78 = *(int *)(*((_QWORD *)&v337 + 1) + 4 * v75);
        if ((_DWORD)v78 == *(_DWORD *)(*((_QWORD *)&v337 + 1) + 4 * *((int *)v76 + 3)))
        {
          v79 = *(_DWORD **)__x;
          v80 = v76[2];
          if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v80, 0.0))
          {
            v81 = 1;
          }
          else
          {
            if ((v79[v78] | 2) != 2)
            {
              v72 = 0;
              goto LABEL_139;
            }
            *(float *)v328 = v80;
            v345 = 2139095040;
            if (v80 == INFINITY || (*(float *)v328 = v80, v345 = 0, v80 == 0.0))
              v81 = 2;
            else
              v81 = 3;
          }
          v72 = 0;
          v79[v78] = v81;
        }
LABEL_139:
        *(_DWORD *)v328 = 0;
        v82 = v76[2];
        *(float *)v328 = v82;
        v345 = 2139095040;
        if (v82 != INFINITY)
        {
          *(float *)v328 = v82;
          v345 = 0;
          if (v82 != 0.0)
            v73 = 0;
        }
        if (v331[0])
          (*(void (**)(void *))(*(_QWORD *)v331[0] + 40))(v331[0]);
        else
          *(_QWORD *)&v333 = v333 + 1;
      }
      if (v331[0])
      {
        (*(void (**)(void))(*(_QWORD *)v331[0] + 8))();
        goto LABEL_150;
      }
LABEL_148:
      if (*((_QWORD *)&v332 + 1))
        --**((_DWORD **)&v332 + 1);
LABEL_150:
      if (v346.__begin_)
        (*(void (**)(std::vector<char>::pointer))(*(_QWORD *)v346.__begin_ + 32))(v346.__begin_);
      else
        ++LODWORD(v346.__end_cap_.__value_);
    }
  }
  v94 = operator new();
  *(_DWORD *)(v94 + 8) = 2;
  *(_BYTE *)(v94 + 12) = 0;
  *(_OWORD *)(v94 + 16) = 0u;
  *(_OWORD *)(v94 + 32) = 0u;
  *(_OWORD *)(v94 + 48) = 0u;
  *(_QWORD *)v94 = &off_1EA925F10;
  *((_QWORD *)&v335 + 1) = v94;
  if (FLAGS_v < 2)
    goto LABEL_296;
  std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
  v95 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
  v96 = (_QWORD *)fst::cerr(v95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_161:
  fst::LogMessage::~LogMessage((fst::LogMessage *)v331);
  if ((buf[23] & 0x80000000) != 0)
  {
    v88 = *(void **)buf;
    goto LABEL_289;
  }
LABEL_296:
  *(_QWORD *)buf = &__p;
  *(_QWORD *)&buf[12] = 0x3A800000FFFFFFFFLL;
  buf[20] = 0;
  v348 = 1;
  v349 = 0x7F80000000000000;
  v350 = -1;
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((std::string::size_type)&v319, (uint64_t)&v317, (float **)&v325, (uint64_t *)buf);
  fst::AutoQueue<int>::~AutoQueue(&__p);
  if (v325)
  {
    v326 = v325;
    operator delete(v325);
  }
  v317[34]((void **)&v317, 0);
  if (((unsigned int (*)(void (***)(void **, _QWORD)))v317[3])(&v317) != -1)
  {
    v144 = ((uint64_t (*)(void (***)(void **, _QWORD), uint64_t, _QWORD))v317[8])(&v317, 0x3FFFFFFF0007, 0);
    if (((int (*)(void (***)(void **, _QWORD)))v317[19])(&v317) >= 1)
    {
      v145 = 0;
      do
      {
        ((void (*)(void (***)(void **, _QWORD), uint64_t, void **))v317[36])(&v317, v145, &__p);
        while (!(*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        {
          v146 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
          v147 = *(_QWORD *)(v146 + 8);
          *(_DWORD *)buf = *(_DWORD *)(v146 + 4);
          *(_DWORD *)&buf[4] = *(_DWORD *)(v146 + 4);
          *(_QWORD *)&buf[8] = v147;
          (*(void (**)(void *, _BYTE *))(*(_QWORD *)__p + 88))(__p, buf);
          (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
        }
        if (__p)
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
        v317[4]((void **)&v317, v145);
        v317[22]((void **)&v317, v145);
        v145 = (v145 + 1);
      }
      while ((int)v145 < ((int (*)(void (***)(void **, _QWORD)))v317[19])(&v317));
    }
    v148 = fst::ProjectProperties(v144, 0);
    ((void (*)(void (***)(void **, _QWORD), unint64_t, uint64_t))v317[23])(&v317, v148, 0x3FFFFFFF0007);
  }
  v149 = ((uint64_t (*)(void (***)(void **, _QWORD)))v317[15])(&v317);
  v317[34]((void **)&v317, v149);
  memset(&v339, 0, sizeof(v339));
  LODWORD(v335) = 7;
  BYTE4(v335) = 0;
  __p = &off_1EA925798;
  v338 = 0u;
  v336 = 0u;
  v337 = 0u;
  v150 = ((uint64_t (*)(void (***)(void **, _QWORD), uint64_t, _QWORD))v317[8])(&v317, 0x4E00000000, 0);
  if ((v150 & 0x4000000000) != 0
    || ((unsigned int (*)(void (***)(void **, _QWORD)))v317[3])(&v317) == -1)
  {
    v174 = operator new();
    *(_DWORD *)(v174 + 8) = 5;
    *(_BYTE *)(v174 + 12) = 0;
    *(_QWORD *)v174 = &off_1EA924DF8;
    *(_QWORD *)(v174 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v174 + 32) = 0;
    *(_QWORD *)(v174 + 40) = 0;
    *(_QWORD *)(v174 + 24) = 0;
    *((_QWORD *)&v335 + 1) = v174;
    if (FLAGS_v < 2)
      goto LABEL_394;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v175 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v176 = (_QWORD *)fst::cerr(v175);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v150 & 0x800000000) != 0)
  {
    v178 = operator new();
    *(_DWORD *)(v178 + 8) = 4;
    *(_BYTE *)(v178 + 12) = 0;
    *(_QWORD *)v178 = &off_1EA924900;
    *(_QWORD *)(v178 + 16) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v178 + 24) = 0u;
    *(_OWORD *)(v178 + 40) = 0u;
    *(_OWORD *)(v178 + 56) = 0u;
    LOBYTE(v331[0]) = 0;
    *(_QWORD *)buf = v178 + 24;
    *(_QWORD *)&buf[8] = v331;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v317, (uint64_t)buf);
    if (!LOBYTE(v331[0]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__x, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__x, "ERROR");
      v179 = fst::LogMessage::LogMessage((fst *)&v345, (uint64_t)__x);
      v180 = (_QWORD *)fst::cerr(v179);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v345);
      if (v343 < 0)
        operator delete(*(void **)__x);
      *(_BYTE *)(v178 + 12) = 1;
    }
    std::vector<int>::resize((std::vector<int> *)(v178 + 48), (uint64_t)(*(_QWORD *)(v178 + 32) - *(_QWORD *)(v178 + 24)) >> 2, &fst::kNoStateId);
    *((_QWORD *)&v335 + 1) = v178;
    if (FLAGS_v < 2)
      goto LABEL_394;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v191 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v192 = (_QWORD *)fst::cerr(v191);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v150 & 0x200000000) == 0)
    {
      v325 = 0;
      *(_QWORD *)buf = (char *)&v337 + 8;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      v348 = (uint64_t)&v325;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v317, (uint64_t *)buf);
      v151 = (int *)*((_QWORD *)&v337 + 1);
      if (*((_QWORD *)&v337 + 1) != (_QWORD)v338)
      {
        v152 = *((_QWORD *)&v337 + 1) + 4;
        if (*((_QWORD *)&v337 + 1) + 4 != (_QWORD)v338)
        {
          v153 = **((_DWORD **)&v337 + 1);
          v154 = (int *)(*((_QWORD *)&v337 + 1) + 4);
          do
          {
            v156 = *v154++;
            v155 = v156;
            v157 = v153 < v156;
            if (v153 <= v156)
              v153 = v155;
            if (v157)
              v151 = (int *)v152;
            v152 = (uint64_t)v154;
          }
          while (v154 != (int *)v338);
        }
      }
      v158 = *v151;
      v159 = *v151 + 1;
      std::vector<fst::QueueType>::vector(__x, v159);
      v160 = operator new();
      v161 = (_QWORD *)operator new();
      *v161 = &v339;
      if (v341 != *(void **)__x)
      {
        v162 = ((uint64_t)v341 - *(_QWORD *)__x) >> 2;
        if (v162 <= 1)
          v162 = 1;
        bzero(*(void **)__x, 4 * v162);
      }
      LODWORD(v346.__end_cap_.__value_) = 0;
      ((void (**)(void **, std::vector<char> *))v317)[16]((void **)&v317, &v346);
      v309 = v159;
      v312 = v158;
      v163 = 1;
      v164 = 1;
      while (1)
      {
        if (v346.__begin_)
        {
          if ((*(unsigned int (**)(std::vector<char>::pointer))(*(_QWORD *)v346.__begin_ + 16))(v346.__begin_))
          {
            if (v346.__begin_)
              (*(void (**)(void))(*(_QWORD *)v346.__begin_ + 8))();
LABEL_376:
            if (v164)
            {
              v184 = operator new();
              *(_DWORD *)(v184 + 8) = 2;
              *(_BYTE *)(v184 + 12) = 0;
              *(_OWORD *)(v184 + 16) = 0u;
              *(_OWORD *)(v184 + 32) = 0u;
              *(_OWORD *)(v184 + 48) = 0u;
              *(_QWORD *)v184 = &off_1EA925F10;
              *((_QWORD *)&v335 + 1) = v184;
              if (FLAGS_v >= 2)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v185 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v186 = (_QWORD *)fst::cerr(v185);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_382:
                fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
                if (SBYTE7(v332) < 0)
                  operator delete(v331[0]);
              }
              goto LABEL_384;
            }
            if (v163)
            {
              v187 = operator new();
              fst::TopOrderQueue<int>::TopOrderQueue(v187, (uint64_t)&v337 + 8);
              *((_QWORD *)&v335 + 1) = v187;
              if (FLAGS_v >= 2)
              {
                std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                v188 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                v189 = (_QWORD *)fst::cerr(v188);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"AutoQueue: using top-order discipline", 37);
                goto LABEL_382;
              }
LABEL_384:
              v190 = v161;
LABEL_385:
              MEMORY[0x1DF0ED014](v190, 0x60C40B37CB4BBLL);
              MEMORY[0x1DF0ED014](v160, 0xC400A2AC0F1);
              v177 = *(void **)__x;
              if (*(_QWORD *)__x)
              {
                v341 = *(void **)__x;
LABEL_387:
                operator delete(v177);
              }
              goto LABEL_394;
            }
            if (FLAGS_v >= 2)
            {
              std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
              v286 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
              v287 = (_QWORD *)fst::cerr(v286);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
              if (SBYTE7(v332) < 0)
                operator delete(v331[0]);
            }
            std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)&v336, v309);
            if (v312 < 0)
            {
LABEL_612:
              v305 = operator new();
              *(_DWORD *)(v305 + 8) = 6;
              *(_BYTE *)(v305 + 12) = 0;
              *(_QWORD *)v305 = &off_1EA925748;
              *(_QWORD *)(v305 + 16) = &v336;
              *(_QWORD *)(v305 + 24) = (char *)&v337 + 8;
              *(_QWORD *)(v305 + 32) = 0xFFFFFFFF00000000;
              *(_QWORD *)(v305 + 48) = 0;
              *(_QWORD *)(v305 + 56) = 0;
              *(_QWORD *)(v305 + 40) = 0;
              *((_QWORD *)&v335 + 1) = v305;
              v190 = v161;
              goto LABEL_385;
            }
            v288 = 0;
            while (2)
            {
              v289 = *(_DWORD *)(*(_QWORD *)__x + 4 * v288);
              if (v289 == 3)
              {
                v297 = operator new();
                *(_DWORD *)(v297 + 8) = 3;
                *(_BYTE *)(v297 + 12) = 0;
                *(_QWORD *)v297 = &off_1EA925518;
                *(_OWORD *)(v297 + 16) = *(_OWORD *)v161;
                *(_OWORD *)(v297 + 32) = 0u;
                *(_OWORD *)(v297 + 48) = 0u;
                *(_OWORD *)(v297 + 64) = 0u;
                *(_OWORD *)(v297 + 80) = 0u;
                *(_OWORD *)(v297 + 92) = 0u;
                *(_QWORD *)(v297 + 120) = 0;
                *(_QWORD *)(v297 + 128) = 0;
                *(_QWORD *)(v297 + 112) = 0;
                *(_QWORD *)(v336 + 8 * v288) = v297;
                if (FLAGS_v >= 3)
                {
                  std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                  v298 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                  v299 = (_QWORD *)fst::cerr(v298);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)"AutoQueue: SCC #", 16);
                  v300 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v300, (uint64_t)": using shortest-first discipline", 33);
                  goto LABEL_609;
                }
              }
              else if (v289 == 2)
              {
                v293 = operator new();
                *(_DWORD *)(v293 + 8) = 2;
                *(_BYTE *)(v293 + 12) = 0;
                *(_OWORD *)(v293 + 16) = 0u;
                *(_OWORD *)(v293 + 32) = 0u;
                *(_OWORD *)(v293 + 48) = 0u;
                *(_QWORD *)v293 = &off_1EA925F10;
                *(_QWORD *)(v336 + 8 * v288) = v293;
                if (FLAGS_v >= 3)
                {
                  std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                  v294 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                  v295 = (_QWORD *)fst::cerr(v294);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)"AutoQueue: SCC #", 16);
                  v296 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)": using LIFO disciplle", 22);
                  goto LABEL_609;
                }
              }
              else if (v289)
              {
                v301 = operator new();
                *(_DWORD *)(v301 + 8) = 1;
                *(_BYTE *)(v301 + 12) = 0;
                *(_OWORD *)(v301 + 16) = 0u;
                *(_OWORD *)(v301 + 32) = 0u;
                *(_OWORD *)(v301 + 48) = 0u;
                *(_QWORD *)v301 = &off_1EA9257E8;
                *(_QWORD *)(v336 + 8 * v288) = v301;
                if (FLAGS_v >= 3)
                {
                  std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                  v302 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                  v303 = (_QWORD *)fst::cerr(v302);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v303, (uint64_t)"AutoQueue: SCC #", 16);
                  v304 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)": using FIFO disciplle", 22);
                  goto LABEL_609;
                }
              }
              else
              {
                *(_QWORD *)(v336 + 8 * v288) = 0;
                if (FLAGS_v >= 3)
                {
                  std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
                  v290 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
                  v291 = (_QWORD *)fst::cerr(v290);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)"AutoQueue: SCC #", 16);
                  v292 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)": using trivial discipline", 26);
LABEL_609:
                  fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
                  if (SBYTE7(v332) < 0)
                    operator delete(v331[0]);
                }
              }
              if (v309 == ++v288)
                goto LABEL_612;
              continue;
            }
          }
          if (v346.__begin_)
            v165 = (*(uint64_t (**)(void))(*(_QWORD *)v346.__begin_ + 24))();
          else
            v165 = LODWORD(v346.__end_cap_.__value_);
        }
        else
        {
          v165 = LODWORD(v346.__end_cap_.__value_);
          if (SLODWORD(v346.__end_cap_.__value_) >= SLODWORD(v346.__end_))
            goto LABEL_376;
        }
        *(_QWORD *)&v333 = 0;
        ((void (*)(void (***)(void **, _QWORD), uint64_t, void **))v317[17])(&v317, v165, v331);
        v166 = (int)v165;
        while (1)
        {
          if (!v331[0])
          {
            v168 = v333;
            if ((unint64_t)v333 >= (unint64_t)v332)
              goto LABEL_360;
            goto LABEL_340;
          }
          if ((*(unsigned int (**)(void *))(*(_QWORD *)v331[0] + 24))(v331[0]))
            break;
          if (v331[0])
          {
            v167 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v331[0] + 32))();
            goto LABEL_341;
          }
          v168 = v333;
LABEL_340:
          v167 = (float *)((char *)v331[1] + 16 * v168);
LABEL_341:
          if (*(_QWORD *)v167)
            goto LABEL_354;
          v169 = *(int *)(*((_QWORD *)&v337 + 1) + 4 * v166);
          if ((_DWORD)v169 == *(_DWORD *)(*((_QWORD *)&v337 + 1) + 4 * *((int *)v167 + 3)))
          {
            v170 = *(_DWORD **)__x;
            v171 = v167[2];
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v171, 0.0))
            {
              v172 = 1;
            }
            else
            {
              if ((v170[v169] | 2) != 2)
              {
                v163 = 0;
                goto LABEL_351;
              }
              v345 = LODWORD(v171);
              v344 = 2139095040;
              if (v171 == INFINITY || (v345 = LODWORD(v171), v344 = 0, v171 == 0.0))
                v172 = 2;
              else
                v172 = 3;
            }
            v163 = 0;
            v170[v169] = v172;
          }
LABEL_351:
          v345 = 0;
          v173 = v167[2];
          v345 = LODWORD(v173);
          v344 = 2139095040;
          if (v173 != INFINITY)
          {
            v345 = LODWORD(v173);
            v344 = 0;
            if (v173 != 0.0)
              v164 = 0;
          }
LABEL_354:
          if (v331[0])
            (*(void (**)(void *))(*(_QWORD *)v331[0] + 40))(v331[0]);
          else
            *(_QWORD *)&v333 = v333 + 1;
        }
        if (v331[0])
        {
          (*(void (**)(void))(*(_QWORD *)v331[0] + 8))();
          goto LABEL_362;
        }
LABEL_360:
        if (*((_QWORD *)&v332 + 1))
          --**((_DWORD **)&v332 + 1);
LABEL_362:
        if (v346.__begin_)
          (*(void (**)(std::vector<char>::pointer))(*(_QWORD *)v346.__begin_ + 32))(v346.__begin_);
        else
          ++LODWORD(v346.__end_cap_.__value_);
      }
    }
    v181 = operator new();
    *(_DWORD *)(v181 + 8) = 2;
    *(_BYTE *)(v181 + 12) = 0;
    *(_OWORD *)(v181 + 16) = 0u;
    *(_OWORD *)(v181 + 32) = 0u;
    *(_OWORD *)(v181 + 48) = 0u;
    *(_QWORD *)v181 = &off_1EA925F10;
    *((_QWORD *)&v335 + 1) = v181;
    if (FLAGS_v < 2)
      goto LABEL_394;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v182 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v183 = (_QWORD *)fst::cerr(v182);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v331);
  if ((buf[23] & 0x80000000) != 0)
  {
    v177 = *(void **)buf;
    goto LABEL_387;
  }
LABEL_394:
  *(_QWORD *)buf = &__p;
  *(_QWORD *)&buf[12] = 0x3A800000FFFFFFFFLL;
  *(_WORD *)&buf[20] = 256;
  v348 = -2155872256;
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(&v317, (char *)&v339, (uint64_t)buf);
  fst::AutoQueue<int>::~AutoQueue(&__p);
  if (v339.__r_.__value_.__r.__words[0])
  {
    v339.__r_.__value_.__l.__size_ = v339.__r_.__value_.__r.__words[0];
    operator delete(v339.__r_.__value_.__l.__data_);
  }
  LODWORD(__p) = 3;
  v335 = 0u;
  v336 = 0u;
  memset(&v339, 0, sizeof(v339));
  *(_QWORD *)&v336 = 0;
  v193 = ((uint64_t (*)(void (***)(void **, _QWORD)))v317[3])(&v317);
  if ((_DWORD)v193 == -1)
  {
    v217 = FLAGS_v;
    if (FLAGS_v > 1)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
      v218 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
      v219 = (_QWORD *)fst::cerr(v218);
      v220 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"StringPrinter::FstToLabels: Invalid starting state for ", 55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"string fst.", 11);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v331);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
LABEL_449:
      v217 = FLAGS_v;
    }
    if (v217 < 1)
      goto LABEL_454;
    std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
    v221 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
    v222 = (_QWORD *)fst::cerr(v221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"StringPrinter::operator(): Fst is not a string.", 47);
    goto LABEL_452;
  }
  while (1)
  {
    *(_DWORD *)buf = ((float (*)(void **, uint64_t))v317[4])((void **)&v317, v193);
    LODWORD(v331[0]) = 2139095040;
    if (*(float *)buf != INFINITY)
      break;
    v349 = 0;
    ((void (*)(void (***)(void **, _QWORD), uint64_t, _BYTE *))v317[17])(&v317, v193, buf);
    if (*(_QWORD *)buf)
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)buf + 24))(*(_QWORD *)buf))
      {
        if (*(_QWORD *)buf)
        {
          v194 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
        }
        else
        {
          v195 = v349;
LABEL_406:
          v194 = *(_QWORD *)&buf[8] + 16 * v195;
        }
        v199 = (char *)v336;
        if ((unint64_t)v336 >= *((_QWORD *)&v336 + 1))
        {
          v201 = (char *)*((_QWORD *)&v335 + 1);
          v202 = (uint64_t)(v336 - *((_QWORD *)&v335 + 1)) >> 2;
          v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v204 = *((_QWORD *)&v336 + 1) - *((_QWORD *)&v335 + 1);
          if ((uint64_t)(*((_QWORD *)&v336 + 1) - *((_QWORD *)&v335 + 1)) >> 1 > v203)
            v203 = v204 >> 1;
          if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
            v205 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v205 = v203;
          if (v205)
          {
            v206 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v336 + 8, v205);
            v201 = (char *)*((_QWORD *)&v335 + 1);
            v199 = (char *)v336;
          }
          else
          {
            v206 = 0;
          }
          v207 = &v206[4 * v202];
          *(_DWORD *)v207 = *(_DWORD *)(v194 + 4);
          v200 = v207 + 4;
          while (v199 != v201)
          {
            v208 = *((_DWORD *)v199 - 1);
            v199 -= 4;
            *((_DWORD *)v207 - 1) = v208;
            v207 -= 4;
          }
          *((_QWORD *)&v335 + 1) = v207;
          *(_QWORD *)&v336 = v200;
          *((_QWORD *)&v336 + 1) = &v206[4 * v205];
          if (v201)
            operator delete(v201);
        }
        else
        {
          *(_DWORD *)v336 = *(_DWORD *)(v194 + 4);
          v200 = v199 + 4;
        }
        *(_QWORD *)&v336 = v200;
        v193 = *(unsigned int *)(v194 + 12);
        if ((_DWORD)v193 == -1)
        {
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
            v213 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
            v214 = (_QWORD *)fst::cerr(v213);
            v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"StringPrinter::FstToLabels: Transition to invalid ", 50);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"state.", 6);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
            if (SBYTE7(v332) < 0)
              operator delete(v331[0]);
          }
          v212 = 0;
          v193 = 0xFFFFFFFFLL;
          goto LABEL_440;
        }
        if (*(_QWORD *)buf)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf);
          if (*(_QWORD *)buf)
          {
            if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 24))(*(_QWORD *)buf) & 1) != 0)
              goto LABEL_439;
            goto LABEL_427;
          }
          v216 = v349;
        }
        else
        {
          v216 = ++v349;
        }
        if (v216 >= *(_QWORD *)&buf[16])
        {
LABEL_439:
          v212 = 1;
          goto LABEL_440;
        }
LABEL_427:
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
          v209 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
          v210 = (_QWORD *)fst::cerr(v209);
          v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)"StringPrinter::FstToLabels: State with multiple ", 48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)"outgoing arcs found.", 20);
LABEL_429:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
          if (SBYTE7(v332) < 0)
            operator delete(v331[0]);
          goto LABEL_431;
        }
        goto LABEL_431;
      }
    }
    else
    {
      v195 = v349;
      if (v349 < *(_QWORD *)&buf[16])
        goto LABEL_406;
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v331, "INFO");
      v196 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
      v197 = (_QWORD *)fst::cerr(v196);
      v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"StringPrinter::FstToLabels: String fst traversal does ", 54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"not reach final state.", 22);
      goto LABEL_429;
    }
LABEL_431:
    v212 = 0;
LABEL_440:
    if (*(_QWORD *)buf)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    }
    else if (v348)
    {
      --*(_DWORD *)v348;
    }
    if ((v212 & 1) == 0)
      goto LABEL_449;
  }
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
  {
    *v339.__r_.__value_.__l.__data_ = 0;
    v339.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v339.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v339.__r_.__value_.__s + 23) = 0;
  }
  switch((_DWORD)__p)
  {
    case 3:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      v249 = *((_QWORD *)&v335 + 1);
      if ((_QWORD)v336 == *((_QWORD *)&v335 + 1))
      {
LABEL_544:
        std::stringbuf::str();
        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v339.__r_.__value_.__l.__data_);
        *(_OWORD *)&v339.__r_.__value_.__l.__data_ = *(_OWORD *)v331;
        v339.__r_.__value_.__r.__words[2] = v332;
        v252 = 1;
      }
      else
      {
        v250 = 0;
        while (1)
        {
          v251 = *(_DWORD *)(v249 + 4 * v250);
          if ((v251 & 0x80000000) != 0)
            break;
          if (v251 > 0x7F)
          {
            if (v251 > 0x7FF)
            {
              if (HIWORD(v251))
              {
                if (v251 >> 21)
                {
                  if (v251 >> 26)
                  {
                    LOBYTE(v331[0]) = (v251 >> 30) | 0xFC;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                    LOBYTE(v331[0]) = HIBYTE(v251) & 0x3F | 0x80;
                  }
                  else
                  {
                    LOBYTE(v331[0]) = HIBYTE(v251) | 0xF8;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = (v251 >> 18) & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = (v251 >> 12) & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = (v251 >> 6) & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = v251 & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                }
                else
                {
                  LOBYTE(v331[0]) = (v251 >> 18) | 0xF0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = (v251 >> 12) & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = (v251 >> 6) & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                  LOBYTE(v331[0]) = v251 & 0x3F | 0x80;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                }
              }
              else
              {
                LOBYTE(v331[0]) = (v251 >> 12) | 0xE0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                LOBYTE(v331[0]) = (v251 >> 6) & 0x3F | 0x80;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
                LOBYTE(v331[0]) = v251 & 0x3F | 0x80;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
              }
            }
            else
            {
              LOBYTE(v331[0]) = (v251 >> 6) | 0xC0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
              LOBYTE(v331[0]) = v251 & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
            }
          }
          else
          {
            LOBYTE(v331[0]) = *(_DWORD *)(v249 + 4 * v250);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v331, 1);
          }
          ++v250;
          v249 = *((_QWORD *)&v335 + 1);
          if (v250 >= (uint64_t)(v336 - *((_QWORD *)&v335 + 1)) >> 2)
            goto LABEL_544;
        }
        std::string::basic_string[abi:ne180100]<0>(v331, "ERROR");
        v255 = fst::LogMessage::LogMessage((fst *)&v346, (uint64_t)v331);
        v256 = (_QWORD *)fst::cerr(v255);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)"LabelsToUTF8String: Invalid character found: ", 45);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v346);
        if (SBYTE7(v332) < 0)
          operator delete(v331[0]);
        v252 = 0;
      }
      *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v353) < 0)
        operator delete(v352);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1DF0ECF6C](&v355);
      if (!v252)
      {
LABEL_454:
        if (*(_BYTE *)(a1 + 32))
        {
          std::string::basic_string[abi:ne180100]<0>(a4, &byte_1DEBD87CE);
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v223 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a2 + 23) >= 0)
              v225 = (const void *)a2;
            else
              v225 = *(const void **)a2;
            if (*(char *)(a3 + 23) >= 0)
              v226 = (const std::string::value_type *)a3;
            else
              v226 = *(const std::string::value_type **)a3;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v225;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v226;
            _os_log_impl(&dword_1DE3F6000, v223, OS_LOG_TYPE_ERROR, "FSTGrammar unable to print output FST for %s(%s).", buf, 0x16u);
          }
          if (*(char *)(a2 + 23) >= 0)
            v227 = (const void *)a2;
          else
            v227 = *(const void **)a2;
          if (*(char *)(a3 + 23) >= 0)
            v228 = (const std::string::value_type *)a3;
          else
            v228 = *(const std::string::value_type **)a3;
          Diagnostics::log(3, "FSTGrammar unable to print output FST for %s(%s).", v224, v227, v228, v306);
          if (*(char *)(a3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
          }
          else
          {
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
            a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          }
        }
        goto LABEL_556;
      }
      break;
    case 2:
      std::string::reserve(&v339, (uint64_t)(v336 - *((_QWORD *)&v335 + 1)) >> 2);
      v247 = *((_QWORD *)&v335 + 1);
      if ((_QWORD)v336 != *((_QWORD *)&v335 + 1))
      {
        v248 = 0;
        do
        {
          std::string::push_back(&v339, *(_BYTE *)(v247 + 4 * v248++));
          v247 = *((_QWORD *)&v335 + 1);
        }
        while (v248 < (uint64_t)(v336 - *((_QWORD *)&v335 + 1)) >> 2);
      }
      break;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
      v229 = *((_QWORD *)&v335 + 1);
      if ((_QWORD)v336 != *((_QWORD *)&v335 + 1))
      {
        for (j = 0; j < (uint64_t)(v336 - *((_QWORD *)&v335 + 1)) >> 2; ++j)
        {
          if (j)
          {
            std::string::basic_string[abi:ne180100]<0>(v331, FLAGS_fst_field_separator);
            v231 = (_BYTE *)BYTE7(v332);
            if ((SBYTE7(v332) & 0x80u) == 0)
              v232 = v331;
            else
              v232 = (void **)v331[0];
            if (SBYTE7(v332) < 0)
              v231 = v331[1];
            LOBYTE(v346.__begin_) = v231[(_QWORD)v232 - 1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)&v346, 1);
            if (SBYTE7(v332) < 0)
              operator delete(v331[0]);
            v229 = *((_QWORD *)&v335 + 1);
          }
          if (!(_QWORD)v335)
          {
            std::ostream::operator<<();
            goto LABEL_517;
          }
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v335 + 88))(v331, v335, *(int *)(v229 + 4 * j));
          if (SBYTE7(v332) < 0)
          {
            v233 = v331[1];
            if (v331[1])
              goto LABEL_497;
          }
          else if (BYTE7(v332))
          {
            v233 = v331[1];
LABEL_497:
            if ((SBYTE7(v332) & 0x80u) == 0)
              v234 = v331;
            else
              v234 = (void **)v331[0];
            if ((SBYTE7(v332) & 0x80u) == 0)
              v235 = BYTE7(v332);
            else
              v235 = (uint64_t)v233;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)v234, v235);
            v236 = 1;
            goto LABEL_514;
          }
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(&v346, "INFO");
            v237 = fst::LogMessage::LogMessage((fst *)&v325, (uint64_t)&v346);
            v238 = (_QWORD *)fst::cerr(v237);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"StringPrinter::PrintLabel: Integer ", 35);
            v239 = (_QWORD *)std::ostream::operator<<();
            v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)" is not ", 8);
            v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)"mapped to any textual symbol, symbol table = ", 45);
            v242 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v335 + 48))(v335);
            v243 = *(char *)(v242 + 23);
            v244 = v243 >= 0 ? v242 : *(_QWORD *)v242;
            v245 = v243 >= 0 ? *(unsigned __int8 *)(v242 + 23) : *(_QWORD *)(v242 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, v244, v245);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v325);
            if (SHIBYTE(v346.__end_cap_.__value_) < 0)
              operator delete(v346.__begin_);
          }
          v236 = 0;
LABEL_514:
          if (SBYTE7(v332) < 0)
            operator delete(v331[0]);
          if ((v236 & 1) == 0)
          {
            *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
            v263 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
            *(_QWORD *)&buf[16] = v263;
            v348 = MEMORY[0x1E0DE4FB8] + 16;
            if (v354 < 0)
              operator delete(v353);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1DF0ECF6C](v356);
            goto LABEL_454;
          }
LABEL_517:
          v229 = *((_QWORD *)&v335 + 1);
        }
      }
      std::stringbuf::str();
      if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v339.__r_.__value_.__l.__data_);
      *(_OWORD *)&v339.__r_.__value_.__l.__data_ = *(_OWORD *)v331;
      v339.__r_.__value_.__r.__words[2] = v332;
      *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
      v246 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&buf[16] = v246;
      v348 = MEMORY[0x1E0DE4FB8] + 16;
      if (v354 < 0)
        operator delete(v353);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0ECF6C](v356);
      break;
    default:
      if (FLAGS_v < 1)
        goto LABEL_454;
      std::string::basic_string[abi:ne180100]<0>(buf, "INFO");
      v253 = fst::LogMessage::LogMessage((fst *)v331, (uint64_t)buf);
      v254 = (_QWORD *)fst::cerr(v253);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"StringPrinter::operator(): Unknown token type: ", 47);
      std::ostream::operator<<();
LABEL_452:
      fst::LogMessage::~LogMessage((fst::LogMessage *)v331);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_454;
  }
  *a4 = v339;
  memset(&v339, 0, sizeof(v339));
LABEL_556:
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v339.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v335 + 1))
  {
    *(_QWORD *)&v336 = *((_QWORD *)&v335 + 1);
    operator delete(*((void **)&v335 + 1));
  }
  v317 = (void (**)(void **, _QWORD))&unk_1EA925AA8;
  v257 = v318;
  if (v318)
  {
    v258 = *(_DWORD *)(v318 + 56) - 1;
    *(_DWORD *)(v318 + 56) = v258;
    if (!v258)
      (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  }
  v319 = (uint64_t (**)(void **, uint64_t, _QWORD))&unk_1EA925AA8;
  v259 = v320;
  if (v320)
  {
    v260 = *(_DWORD *)(v320 + 56) - 1;
    *(_DWORD *)(v320 + 56) = v260;
    if (!v260)
      (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  }
LABEL_566:
  v323 = (void (**)(void **))&unk_1EA925AA8;
  v261 = v324;
  if (v324)
  {
    v262 = *(_DWORD *)(v324 + 56) - 1;
    *(_DWORD *)(v324 + 56) = v262;
    if (!v262)
      (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  }
}

void sub_1DEA3A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20,uint64_t a21,_DWORD *a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55)
{
  int v56;
  int v57;
  int v58;

  if (a38 < 0)
    operator delete(__p);
  if (a55)
    operator delete(a55);
  if (a49)
    operator delete(a49);
  if (a46)
    operator delete(a46);
  if (a52)
    operator delete(a52);
  if (a20)
  {
    v56 = a20[14] - 1;
    a20[14] = v56;
    if (!v56)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
  }
  if (a22)
  {
    v57 = a22[14] - 1;
    a22[14] = v57;
    if (!v57)
      (*(void (**)(_DWORD *))(*(_QWORD *)a22 + 8))(a22);
  }
  if (a25)
  {
    v58 = a25[14] - 1;
    a25[14] = v58;
    if (!v58)
      (*(void (**)(_DWORD *))(*(_QWORD *)a25 + 8))(a25);
  }
  _Unwind_Resume(a1);
}

void FSTGrammarImpl::~FSTGrammarImpl(FSTGrammarImpl *this)
{
  *(_QWORD *)this = off_1EA91D880;
  std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = off_1EA91D880;
  std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*((_QWORD **)this + 2));
  JUMPOUT(0x1DF0ED014);
}

void std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>(uint64_t a1)
{
  _DWORD *v2;
  int v3;

  *(_QWORD *)(a1 + 24) = &unk_1EA925AA8;
  v2 = *(_DWORD **)(a1 + 32);
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1DEA3B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  int v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  _QWORD *v13;
  __int32 v14;
  _BYTE *v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *v25;
  fst *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  fst *v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  __int128 v41;
  _QWORD *v42;
  fst *v43;
  _QWORD *v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int64x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  __int32 v61;
  _BYTE *v62;
  uint64_t v63;
  fst *v64;
  _QWORD *v65;
  fst *v66;
  _QWORD *v67;
  fst *v68;
  _QWORD *v69;
  fst *v70;
  _QWORD *v71;
  fst *v72;
  _QWORD *v73;
  fst *v74;
  _QWORD *v75;
  fst *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  fst *v88;
  _QWORD *v89;
  int v90;
  int v91;
  BOOL v92;
  int v93;
  fst *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  fst *v106;
  _QWORD *v107;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  fst *v112;
  _QWORD *v113;
  fst *v114;
  _QWORD *v115;
  fst *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  void (**v136)();
  _DWORD *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char v142;
  void *__p;
  _DWORD *v144;
  char v145;
  char v146;
  char v147;
  void (**v148)();
  _DWORD *v149;
  char v150;

  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      v8 = FLAGS_fst_default_cache_gc;
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher((uint64_t)&v138, a1, 1);
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher((uint64_t)&v148, a2, 0);
      v9 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(&v138, &v148);
      if (v148)
        (*((void (**)(void (**)()))*v148 + 1))(v148);
      if (v138)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      if (v9)
      {
        if (v9 != 1)
        {
          LOBYTE(v138) = v8;
          v139 = 0u;
          v140 = 0u;
          v141 = 0u;
          v142 = 0;
          v10 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)&v138);
          goto LABEL_216;
        }
        LOBYTE(v138) = v8;
        v139 = 0u;
        v140 = 0u;
        v141 = 0u;
        v142 = 0;
        v10 = operator new();
        fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v10, a1, a2, (char *)&v138);
        *(_QWORD *)v10 = &off_1EA924BB0;
        v11 = (int64x2_t *)operator new();
        v12 = operator new();
        fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(v12, a1, 1);
        v11->i64[0] = v12;
        v13 = (_QWORD *)operator new();
        fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher((uint64_t)v13, a2, 0);
        v11->i64[1] = (uint64_t)v13;
        v11[1].i64[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 32))(*v13);
        v11[1].i64[1] = -1;
        v11[2].i8[0] = -1;
        v14 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v11->i64[0], (_QWORD *)v11->i64[1]);
        v11[2].i32[2] = v14;
        v15 = (_BYTE *)v11->i64[1];
        v11[3].i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v11->i64[0], 0);
        v11[3].i64[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v15, 0);
        v11[4].i32[0] = v14;
        v16 = *(_QWORD *)v11->i64[v11[2].i32[2] != 1];
        v11[4].i32[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
        if (v11[2].i32[2] == 3)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
          v17 = fst::LogMessage::LogMessage((fst *)&v146, (uint64_t)&__p);
          v18 = (_QWORD *)fst::cerr(v17);
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
          v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"cannot match/look-ahead on input labels.", 40);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v146);
          if (v145 < 0)
            operator delete(__p);
        }
        v80 = 7;
        if (v11[4].i32[0] == 1)
          v81 = 6;
        else
          v81 = 7;
        v82 = (_BYTE *)v11->i64[v81];
        if (v11[4].i32[0] != 1)
          v80 = 6;
        v83 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v11->i64[v80] + 32))(*(_QWORD *)v11->i64[v80]);
        if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v82))
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v82 + 112))(*(_QWORD *)v82, v83, 0);
        v11[5] = vdupq_n_s64(0x7F800000000000FFuLL);
        v11[6].i32[0] = -1;
        v11[6].i64[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v11->i64[0] + 32))(*(_QWORD *)v11->i64[0]);
        v11[7].i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v11->i64[1] + 32))(*(_QWORD *)v11->i64[1]);
        if (v11[2].i32[2] == 1)
          v84 = 1;
        else
          v84 = 2;
        fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v11[7].i64[1], v11[6].i64[1], 1, v84, v11->i64[0]);
        if (v11[2].i32[2] == 1)
          v85 = 2;
        else
          v85 = 1;
        v86 = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v11[12].i64[1], v11[7].i64[0], 0, v85, v11->i64[1]);
        *(_QWORD *)(v10 + 136) = v11;
        *(_QWORD *)(v10 + 144) = (char *)v11 + 120;
        *(_QWORD *)(v10 + 152) = v86;
        *(_QWORD *)(v10 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v11[7].i64[1] + 32))(*(_QWORD *)v11[7].i64[1]);
        *(_QWORD *)(v10 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 152) + 32))(***(_QWORD ***)(v10 + 152));
        v87 = (_QWORD *)operator new();
        v87[1] = v87;
        v87[2] = v87;
        std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v87 + 3), 0, v87 + 1, v87 + 2);
        v87[12] = 0;
        v87[13] = 0;
        v87[14] = 0;
        *(_QWORD *)(v10 + 176) = v87;
        if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 144) + 48))(***(_QWORD ***)(v10 + 144)) & 1) != 0
          && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 1) != 1)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
          v94 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
          v95 = (_QWORD *)fst::cerr(v94);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
          goto LABEL_203;
        }
        if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 152) + 48))(***(_QWORD ***)(v10 + 152)) & 1) != 0
          && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 1))
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
          v88 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
          v89 = (_QWORD *)fst::cerr(v88);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_203:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v147);
          if (v150 < 0)
            operator delete(v148);
          *(_DWORD *)(v10 + 184) = 3;
          *(_QWORD *)(v10 + 8) |= 4uLL;
          goto LABEL_211;
        }
        v90 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 0);
        v91 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 0);
        if (v91)
          v92 = 0;
        else
          v92 = v90 == 1;
        if (v92)
          v93 = 2;
        else
          v93 = 1;
        if (v90 != 1)
        {
          v93 = 0;
          if (v91)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 1) == 1)
            {
              v93 = 1;
            }
            else
            {
              if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 1))
              {
                if (FLAGS_fst_error_fatal)
                  std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
                else
                  std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
                v114 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
                v115 = (_QWORD *)fst::cerr(v114);
                v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
                goto LABEL_203;
              }
              v93 = 0;
            }
          }
        }
        *(_DWORD *)(v10 + 184) = v93;
        goto LABEL_211;
      }
      LOBYTE(v138) = v8;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0;
      v10 = operator new();
      fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v10, a1, a2, (char *)&v138);
      *(_QWORD *)v10 = &off_1EA924B50;
      v57 = (int64x2_t *)operator new();
      v58 = operator new();
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(v58, a1, 1);
      v57->i64[0] = v58;
      v59 = operator new();
      fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(v59, a2, 0);
      v60 = (_QWORD *)v57->i64[0];
      v57->i64[1] = v59;
      v57[1].i64[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v60 + 32))(*v60);
      v57[1].i64[1] = -1;
      v57[2].i8[0] = -1;
      v61 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(v57->i64[0], (_QWORD *)v57->i64[1]);
      v57[2].i32[2] = v61;
      v62 = (_BYTE *)v57->i64[1];
      v57[3].i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v57->i64[0], 0);
      v57[3].i64[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v62, 0);
      v57[4].i32[0] = v61;
      v63 = *(_QWORD *)v57->i64[v57[2].i32[2] != 1];
      v57[4].i32[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 48))(v63);
      if (v57[2].i32[2] == 3)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v64 = fst::LogMessage::LogMessage((fst *)&v146, (uint64_t)&__p);
        v65 = (_QWORD *)fst::cerr(v64);
        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"cannot match/look-ahead on input labels.", 40);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v146);
        if (v145 < 0)
          operator delete(__p);
      }
      v98 = 7;
      if (v57[4].i32[0] == 1)
        v99 = 6;
      else
        v99 = 7;
      v100 = (_BYTE *)v57->i64[v99];
      if (v57[4].i32[0] != 1)
        v98 = 6;
      v101 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v57->i64[v98] + 32))(*(_QWORD *)v57->i64[v98]);
      if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v100))
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v100 + 112))(*(_QWORD *)v100, v101, 0);
      v57[5] = vdupq_n_s64(0x7F800000000000FFuLL);
      v57[6].i32[0] = -1;
      v57[6].i64[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v57->i64[0] + 32))(*(_QWORD *)v57->i64[0]);
      v57[7].i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v57->i64[1] + 32))(*(_QWORD *)v57->i64[1]);
      if (v57[2].i32[2] == 1)
        v102 = 1;
      else
        v102 = 2;
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v57[7].i64[1], v57[6].i64[1], 1, v102, v57->i64[0]);
      if (v57[2].i32[2] == 1)
        v103 = 2;
      else
        v103 = 1;
      v104 = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v57[12].i64[1], v57[7].i64[0], 0, v103, v57->i64[1]);
      *(_QWORD *)(v10 + 136) = v57;
      *(_QWORD *)(v10 + 144) = (char *)v57 + 120;
      *(_QWORD *)(v10 + 152) = v104;
      *(_QWORD *)(v10 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v57[7].i64[1] + 32))(*(_QWORD *)v57[7].i64[1]);
      *(_QWORD *)(v10 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 152) + 32))(***(_QWORD ***)(v10 + 152));
      v105 = (_QWORD *)operator new();
      v105[1] = v105;
      v105[2] = v105;
      std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v105 + 3), 0, v105 + 1, v105 + 2);
      v105[12] = 0;
      v105[13] = 0;
      v105[14] = 0;
      *(_QWORD *)(v10 + 176) = v105;
      if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 144) + 48))(***(_QWORD ***)(v10 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 1) != 1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v112 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
        v113 = (_QWORD *)fst::cerr(v112);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_208;
      }
      if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v10 + 152) + 48))(***(_QWORD ***)(v10 + 152)) & 1) == 0
        || !(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 1))
      {
        v108 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 0);
        v109 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 0);
        if (v109)
          v110 = 0;
        else
          v110 = v108 == 1;
        if (v110)
          v111 = 2;
        else
          v111 = 1;
        if (v108 != 1)
        {
          v111 = 0;
          if (v109)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 144) + 24))(***(_QWORD ***)(v10 + 144), 1) == 1)
            {
              v111 = 1;
            }
            else
            {
              if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 152) + 24))(***(_QWORD ***)(v10 + 152), 1))
              {
                if (FLAGS_fst_error_fatal)
                  std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
                else
                  std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
                v116 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
                v117 = (_QWORD *)fst::cerr(v116);
                v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
                goto LABEL_208;
              }
              v111 = 0;
            }
          }
        }
        *(_DWORD *)(v10 + 184) = v111;
        goto LABEL_211;
      }
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
      v106 = fst::LogMessage::LogMessage((fst *)&v147, (uint64_t)&v148);
      v107 = (_QWORD *)fst::cerr(v106);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_208:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v147);
      if (v150 < 0)
        operator delete(v148);
      *(_DWORD *)(v10 + 184) = 3;
      *(_QWORD *)(v10 + 8) |= 4uLL;
LABEL_211:
      v127 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
      v128 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
      v129 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 144) + 40))(***(_QWORD ***)(v10 + 144), v127);
      v130 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(v10 + 152) + 40))(***(_QWORD ***)(v10 + 152), v128);
      v131 = fst::ComposeProperties(v129, v130);
      v132 = *(_DWORD *)(*(_QWORD *)(v10 + 136) + 40);
      v133 = v131 | 4;
      if (v132 != 3)
        v133 = v131;
      v47 = v132 == 1;
      v134 = 0x3FFCCC300004;
      if (v47)
        v134 = 0x3FFC330C0004;
      *(_QWORD *)(v10 + 8) = v133 & v134 | *(_QWORD *)(v10 + 8) & 0xFFFFC0000000FFFFLL;
LABEL_216:
      v136 = (void (**)())&off_1EA923998;
      v137 = (_DWORD *)v10;
      (*(void (**)(uint64_t, void (***)()))(*(_QWORD *)a3 + 160))(a3, &v136);
      v136 = off_1EA925D18;
      v37 = v137;
      if (v137)
        goto LABEL_217;
LABEL_219:
      if (*(_BYTE *)a4)
        fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a3);
      return;
    case 1:
      LOBYTE(v138) = FLAGS_fst_default_cache_gc;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0;
      v19 = operator new();
      fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v19, a1, a2, (char *)&v138);
      *(_QWORD *)v19 = &off_1EA924A30;
      v28 = (_QWORD *)operator new();
      v29 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v29, a1, 1);
      *v28 = v29;
      v30 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v30, a2, 0);
      v31 = (_QWORD *)*v28;
      v28[1] = v30;
      v28[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v31 + 32))(*v31);
      v28[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v28[1] + 32))(*(_QWORD *)v28[1]);
      *(_QWORD *)(v19 + 136) = v28;
      v32 = *(_OWORD *)v28;
      *(_OWORD *)(v19 + 144) = *(_OWORD *)v28;
      *(_QWORD *)(v19 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v32 + 32))(*(_QWORD *)v32);
      *(_QWORD *)(v19 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 32))(**(_QWORD **)(v19 + 152));
      v33 = (_QWORD *)operator new();
      v33[1] = v33;
      v33[2] = v33;
      std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v33 + 3), 0, v33 + 1, v33 + 2);
      v33[12] = 0;
      v33[13] = 0;
      v33[14] = 0;
      *(_QWORD *)(v19 + 176) = v33;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 144) + 48))(**(_QWORD **)(v19 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) != 1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v70 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v71 = (_QWORD *)fst::cerr(v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_188;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 48))(**(_QWORD **)(v19 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v34 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v35 = (_QWORD *)fst::cerr(v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_188:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v136);
        if (v150 < 0)
          operator delete(v148);
        *(_DWORD *)(v19 + 184) = 3;
        *(_QWORD *)(v19 + 8) |= 4uLL;
        goto LABEL_191;
      }
      v53 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 0);
      v54 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 0);
      if (v54)
        v55 = 0;
      else
        v55 = v53 == 1;
      if (v55)
        v56 = 2;
      else
        v56 = 1;
      if (v53 != 1)
      {
        v56 = 0;
        if (v54)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) == 1)
          {
            v56 = 1;
          }
          else
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
            {
              if (FLAGS_fst_error_fatal)
                std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
              else
                std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
              v76 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
              v77 = (_QWORD *)fst::cerr(v76);
              v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
              goto LABEL_188;
            }
            v56 = 0;
          }
        }
      }
      *(_DWORD *)(v19 + 184) = v56;
      goto LABEL_191;
    case 2:
      LOBYTE(v138) = FLAGS_fst_default_cache_gc;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0;
      v36 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)&v138);
      v148 = (void (**)())&off_1EA923998;
      v149 = (_DWORD *)v36;
      (*(void (**)(uint64_t, void (***)()))(*(_QWORD *)a3 + 160))(a3, &v148);
      v148 = off_1EA925D18;
      v37 = v149;
      if (!v149)
        goto LABEL_219;
      goto LABEL_217;
    case 3:
      LOBYTE(v138) = FLAGS_fst_default_cache_gc;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0;
      v19 = operator new();
      fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v19, a1, a2, (char *)&v138);
      *(_QWORD *)v19 = &off_1EA924C10;
      v38 = operator new();
      v39 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v39, a1, 1);
      *(_QWORD *)v38 = v39;
      v40 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v40, a2, 0);
      *(_QWORD *)(v38 + 8) = v40;
      *(_QWORD *)(v38 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v40 + 32))(*v40);
      *(_QWORD *)(v38 + 24) = -1;
      *(_BYTE *)(v38 + 32) = -1;
      *(_QWORD *)(v19 + 136) = v38;
      v41 = *(_OWORD *)v38;
      *(_OWORD *)(v19 + 144) = *(_OWORD *)v38;
      *(_QWORD *)(v19 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v41 + 32))(*(_QWORD *)v41);
      *(_QWORD *)(v19 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 32))(**(_QWORD **)(v19 + 152));
      v42 = (_QWORD *)operator new();
      v42[1] = v42;
      v42[2] = v42;
      std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v42 + 3), 0, v42 + 1, v42 + 2);
      v42[12] = 0;
      v42[13] = 0;
      v42[14] = 0;
      *(_QWORD *)(v19 + 176) = v42;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 144) + 48))(**(_QWORD **)(v19 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) != 1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v66 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v67 = (_QWORD *)fst::cerr(v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_178;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 48))(**(_QWORD **)(v19 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v43 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v44 = (_QWORD *)fst::cerr(v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_178:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v136);
        if (v150 < 0)
          operator delete(v148);
        *(_DWORD *)(v19 + 184) = 3;
        *(_QWORD *)(v19 + 8) |= 4uLL;
        goto LABEL_191;
      }
      v45 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 0);
      v46 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 0);
      if (v46)
        v47 = 0;
      else
        v47 = v45 == 1;
      if (v47)
        v48 = 2;
      else
        v48 = 1;
      if (v45 != 1)
      {
        v48 = 0;
        if (v46)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) == 1)
          {
            v48 = 1;
          }
          else
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
            {
              if (FLAGS_fst_error_fatal)
                std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
              else
                std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
              v72 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
              v73 = (_QWORD *)fst::cerr(v72);
              v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
              goto LABEL_178;
            }
            v48 = 0;
          }
        }
      }
      *(_DWORD *)(v19 + 184) = v48;
      goto LABEL_191;
    case 4:
      LOBYTE(v138) = FLAGS_fst_default_cache_gc;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v142 = 0;
      v19 = operator new();
      fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v19, a1, a2, (char *)&v138);
      *(_QWORD *)v19 = &off_1EA924A90;
      v20 = operator new();
      v21 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v21, a1, 1);
      *(_QWORD *)v20 = v21;
      v22 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v22, a2, 0);
      v23 = *(_QWORD **)v20;
      *(_QWORD *)(v20 + 8) = v22;
      *(_QWORD *)(v20 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
      *(_QWORD *)(v20 + 24) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v20 + 8) + 32))(**(_QWORD **)(v20 + 8));
      *(_QWORD *)(v20 + 32) = -1;
      *(_BYTE *)(v20 + 40) = -1;
      *(_QWORD *)(v19 + 136) = v20;
      v24 = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 144) = *(_OWORD *)v20;
      *(_QWORD *)(v19 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 32))(*(_QWORD *)v24);
      *(_QWORD *)(v19 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 32))(**(_QWORD **)(v19 + 152));
      v25 = (_QWORD *)operator new();
      v25[1] = v25;
      v25[2] = v25;
      std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v25 + 3), 0, v25 + 1, v25 + 2);
      v25[12] = 0;
      v25[13] = 0;
      v25[14] = 0;
      *(_QWORD *)(v19 + 176) = v25;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 144) + 48))(**(_QWORD **)(v19 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) != 1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v68 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v69 = (_QWORD *)fst::cerr(v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_183;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v19 + 152) + 48))(**(_QWORD **)(v19 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
        v26 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
        v27 = (_QWORD *)fst::cerr(v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_183:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v136);
        if (v150 < 0)
          operator delete(v148);
        *(_DWORD *)(v19 + 184) = 3;
        *(_QWORD *)(v19 + 8) |= 4uLL;
LABEL_191:
        v121 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
        v122 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
        v123 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 40))(**(_QWORD **)(v19 + 144), v121);
        v124 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 40))(**(_QWORD **)(v19 + 152), v122);
        *(_QWORD *)(v19 + 8) = *(_QWORD *)(v19 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v123, v124) & 0x3FFFFFFF0004;
        __p = &off_1EA923998;
        v144 = (_DWORD *)v19;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 160))(a3, &__p);
        __p = off_1EA925D18;
        v37 = v144;
        if (v144)
        {
LABEL_217:
          v135 = v37[14] - 1;
          v37[14] = v135;
          if (!v135)
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
        }
        goto LABEL_219;
      }
      v49 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 0);
      v50 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 0);
      if (v50)
        v51 = 0;
      else
        v51 = v49 == 1;
      if (v51)
        v52 = 2;
      else
        v52 = 1;
      if (v49 != 1)
      {
        v52 = 0;
        if (v50)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 144) + 24))(**(_QWORD **)(v19 + 144), 1) == 1)
          {
            v52 = 1;
          }
          else
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v19 + 152) + 24))(**(_QWORD **)(v19 + 152), 1))
            {
              if (FLAGS_fst_error_fatal)
                std::string::basic_string[abi:ne180100]<0>(&v148, "FATAL");
              else
                std::string::basic_string[abi:ne180100]<0>(&v148, "ERROR");
              v74 = fst::LogMessage::LogMessage((fst *)&v136, (uint64_t)&v148);
              v75 = (_QWORD *)fst::cerr(v74);
              v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
              goto LABEL_183;
            }
            v52 = 0;
          }
        }
      }
      *(_DWORD *)(v19 + 184) = v52;
      goto LABEL_191;
    default:
      goto LABEL_219;
  }
}

void sub_1DEA3D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v26 - 105));
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v25);
  MEMORY[0x1DF0ED014](v25, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>(void *a1, char *a2, uint64_t a3)
{
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  std::vector<int>::pointer v20;
  uint64_t v21;
  int v22;
  std::vector<int>::pointer v23;
  unint64_t v24;
  int v25;
  std::vector<int>::pointer v26;
  int *v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  int v35;
  int i;
  std::vector<int>::pointer end;
  int *v38;
  std::vector<int>::pointer begin;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int v46;
  int begin_low;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  std::vector<int>::pointer v51;
  fst *v52;
  _QWORD *v53;
  std::vector<int>::pointer v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  void **v60;
  void **v61;
  char *v62;
  _BYTE *v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  void **v96;
  void **v97;
  char *v98;
  void *v99;
  unint64_t k;
  unint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  char *v108;
  char *v109;
  int v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  char *v118;
  char *v119;
  int v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  void **v124;
  void **v125;
  char *v126;
  void *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _DWORD *v136;
  char *v137;
  char *v138;
  int v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  char *v147;
  char *v148;
  int v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  int v160;
  float *v161;
  uint64_t v162;
  float v163;
  float v164;
  BOOL v165;
  float v166;
  float v167;
  float v168;
  float v172;
  float v173;
  BOOL v175;
  float v176;
  uint64_t v177;
  char v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v188;
  _OWORD *v189;
  uint64_t v190;
  float v191;
  float v192;
  BOOL v193;
  float v194;
  int v195;
  int begin_high;
  unint64_t end_high;
  unint64_t v198;
  unint64_t v199;
  uint8x8_t v200;
  uint64_t v201;
  uint64_t **v202;
  uint64_t *v203;
  unint64_t v204;
  _OWORD *v205;
  uint8x8_t v206;
  uint64_t **v207;
  uint64_t *m;
  unint64_t v209;
  _QWORD *v210;
  float v211;
  _BOOL8 v212;
  unint64_t v213;
  unint64_t v214;
  int8x8_t prime;
  void *v216;
  void *v217;
  uint64_t v218;
  _QWORD **v219;
  unint64_t v220;
  uint8x8_t v221;
  unint64_t v222;
  uint8x8_t v223;
  uint64_t v224;
  _QWORD *n;
  unint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  char *v237;
  char *v238;
  _OWORD *v239;
  void *v240;
  uint64_t v241;
  float v242;
  float v243;
  BOOL v245;
  float v246;
  __int128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  float v253;
  float v254;
  float v255;
  BOOL v256;
  float v257;
  float v258;
  BOOL v260;
  float v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t j;
  unint64_t v265;
  unint64_t v266;
  float v267;
  __n128 v268;
  int v269;
  int v271;
  unint64_t v272;
  int *v273;
  uint64_t v274;
  int *v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  std::vector<int>::pointer v279;
  std::vector<int>::pointer v280;
  int *v281;
  int v282;
  std::vector<int>::pointer v283;
  std::vector<int>::pointer v284;
  int v285;
  _QWORD *v286;
  _QWORD *v287;
  int v288;
  int v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  int v300;
  int v301;
  float v302;
  float v303;
  BOOL v304;
  float v305;
  int v306;
  int v307;
  int v308;
  int v309;
  _DWORD *v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  std::vector<int>::pointer v318;
  float v319;
  float v320;
  float v321;
  BOOL v322;
  float v323;
  std::vector<int>::pointer v324;
  float v325;
  float v326;
  int v328;
  unint64_t v329;
  float v330;
  float v331;
  BOOL v332;
  float v333;
  float v334;
  float *v336;
  float v337;
  _BOOL4 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  int v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  int v364;
  void *p_p;
  char *v366;
  void *v367;
  void **v368;
  unint64_t v369;
  float v370;
  char v371;
  char v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  _OWORD v376[2];
  __int128 v377;
  __int128 v378;
  float v379;
  _QWORD v380[4];
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  unint64_t v385;
  float v386;
  int v387;
  void *v388[2];
  char v389;
  char v390;
  std::vector<int> v391;
  void *v392;
  __int128 v393;
  uint64_t v394;
  int v395;
  void *v396;
  char *v397;
  char *v398;
  void *v399[3];
  void *v400;
  unint64_t v401;
  void *__p;
  std::vector<int> *v403;
  unint64_t v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  _QWORD v408[4];
  std::vector<int> v409;
  std::vector<int> v410;

  v5 = a1;
  if ((*(unsigned int (**)(void *))(*(_QWORD *)a1 + 24))(a1) == -1)
    return;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 152))(v5);
  LOBYTE(p_p) = 0;
  std::vector<BOOL>::vector(&v392, v6, (unsigned __int8 *)&p_p);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 24))(v5);
  v8 = 0;
  *(_QWORD *)((char *)v392 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(_QWORD *)v5 + 152))(v5))
  {
    v369 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)v5 + 136))(v5, v8, &p_p);
    while (p_p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)p_p + 24))(p_p))
      {
        if (p_p)
        {
          (*(void (**)(void))(*(_QWORD *)p_p + 8))();
          goto LABEL_30;
        }
LABEL_28:
        if (v368)
          --*(_DWORD *)v368;
LABEL_30:
        v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!p_p)
      {
        v12 = v369;
        goto LABEL_14;
      }
      v9 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)p_p + 32))();
      v10 = p_p;
      if (*v9)
        goto LABEL_17;
      if (p_p)
      {
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)p_p + 32))();
        v10 = p_p;
        goto LABEL_16;
      }
      v13 = v366;
      v12 = v369;
LABEL_15:
      v10 = 0;
      v11 = (uint64_t)&v13[16 * v12];
LABEL_16:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_17:
        if (v10)
        {
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v10);
          v10 = p_p;
        }
        else
        {
          v13 = v366;
          v12 = v369;
LABEL_20:
          v10 = 0;
          v14 = (uint64_t)&v13[16 * v12];
        }
        *(_QWORD *)((char *)v392 + (((unint64_t)*(int *)(v14 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v14 + 12);
      }
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v369;
    }
    v12 = v369;
    if (v369 >= (unint64_t)v367)
      goto LABEL_28;
LABEL_14:
    v13 = v366;
    if (*(_DWORD *)&v366[16 * v12])
      goto LABEL_20;
    goto LABEL_15;
  }
  memset(&v391, 0, sizeof(v391));
  v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 152))(v5);
  std::vector<int>::reserve(&v391, v15);
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0x4000000000, 0) & 0x4000000000) != 0)
  {
    for (i = 0; i < (*(int (**)(void *))(*(_QWORD *)v5 + 152))(v5); ++i)
    {
      end = v391.__end_;
      if (v391.__end_ >= v391.__end_cap_.__value_)
      {
        begin = v391.__begin_;
        v40 = v391.__end_ - v391.__begin_;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v42 = (char *)v391.__end_cap_.__value_ - (char *)v391.__begin_;
        if (((char *)v391.__end_cap_.__value_ - (char *)v391.__begin_) >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v391.__end_cap_, v43);
          begin = v391.__begin_;
          end = v391.__end_;
        }
        else
        {
          v44 = 0;
        }
        v45 = (int *)&v44[4 * v40];
        *v45 = i;
        v38 = v45 + 1;
        while (end != begin)
        {
          v46 = *--end;
          *--v45 = v46;
        }
        v391.__begin_ = v45;
        v391.__end_ = v38;
        v391.__end_cap_.__value_ = (int *)&v44[4 * v43];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v391.__end_ = i;
        v38 = end + 1;
      }
      v391.__end_ = v38;
    }
LABEL_103:
    p_p = v5;
    v366 = a2;
    v367 = v5;
    v368 = (void **)a2;
    v369 = *(_QWORD *)a3;
    v370 = *(float *)(a3 + 16);
    v371 = *(_BYTE *)(a3 + 20);
    v372 = 1;
    v373 = 0u;
    v374 = 0u;
    v375 = 0u;
    memset(v376, 0, 29);
    *((_QWORD *)a2 + 1) = *(_QWORD *)a2;
    v377 = 0u;
    v378 = 0u;
    v379 = 1.0;
    v387 = 0;
    v384 = 0u;
    memset(v380, 0, sizeof(v380));
    v381 = 0u;
    v382 = 0u;
    v383 = 0u;
    v385 = 0;
    v54 = v391.__end_;
    v358 = v5;
    if (v391.__begin_ == v391.__end_)
    {
LABEL_541:
      v263 = a3;
      if (*(_BYTE *)(a3 + 21)
        || (LODWORD(__p) = 0,
            LODWORD(__p) = *(_DWORD *)(a3 + 24),
            LODWORD(v410.__begin_) = 2139095040,
            *(float *)&__p != INFINITY)
        || *(_DWORD *)(a3 + 28) != -1)
      {
        for (j = 0; (uint64_t)j < (*(int (**)(void *))(*(_QWORD *)v5 + 152))(v5); ++j)
        {
          if (((*(_QWORD *)((char *)v392 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
            (*(void (**)(void *, unint64_t))(*(_QWORD *)v5 + 232))(v5, j);
        }
      }
      if (BYTE12(v376[1]))
        (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, 4, 4);
      v265 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0x3FFFFFFF0007, 0);
      v266 = fst::RmEpsilonProperties(v265, 0);
      (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, v266, 0x3FFFFFFF0007);
      LODWORD(__p) = 0;
      v267 = *(float *)(a3 + 24);
      *(float *)&__p = v267;
      LODWORD(v410.__begin_) = 2139095040;
      v268.n128_f32[0] = v267;
      v269 = *(_DWORD *)(a3 + 28);
      if (v267 == INFINITY && v269 == -1)
        goto LABEL_572;
      v271 = (*(uint64_t (**)(void *, __n128))(*(_QWORD *)v5 + 152))(v5, v268);
      if (!v271)
        goto LABEL_572;
      memset(&v410, 0, sizeof(v410));
      if (v271 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v272 = v271;
      v273 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v271);
      v410.__begin_ = v273;
      v410.__end_cap_.__value_ = &v273[v274];
      v275 = &v273[v272];
      v276 = 4 * v272;
      do
      {
        *v273++ = 2139095040;
        v276 -= 4;
      }
      while (v276);
      v410.__end_ = v275;
      memset(&v409, 0, sizeof(v409));
      v277 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v272);
      v280 = v409.__begin_;
      v279 = v409.__end_;
      v281 = v277;
      if (v409.__end_ != v409.__begin_)
      {
        do
        {
          v282 = *--v279;
          *--v281 = v282;
        }
        while (v279 != v280);
        v279 = v409.__begin_;
      }
      v409.__begin_ = v281;
      v409.__end_ = v277;
      v409.__end_cap_.__value_ = &v277[v278];
      if (v279)
        operator delete(v279);
      fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)v5, (char **)&v409, 0.00097656);
      if (!v269
        || (v284 = v409.__begin_,
            v283 = v409.__end_,
            (*(int (**)(void *))(*(_QWORD *)v5 + 24))(v5) >= (unint64_t)(v283 - v284))
        || (v285 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 24))(v5),
            LODWORD(__p) = 0,
            LODWORD(__p) = v409.__begin_[v285],
            LODWORD(v400) = 2139095040,
            *(float *)&__p == INFINITY))
      {
        (*(void (**)(void *))(*(_QWORD *)v5 + 216))(v5);
LABEL_568:
        if (v409.__begin_)
        {
          v409.__end_ = v409.__begin_;
          operator delete(v409.__begin_);
        }
        if (v410.__begin_)
        {
          v410.__end_ = v410.__begin_;
          operator delete(v410.__begin_);
        }
LABEL_572:
        if (*(_BYTE *)(v263 + 21))
        {
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v263 + 24);
          LODWORD(v410.__begin_) = 2139095040;
          if (*(float *)&__p == INFINITY && *(_DWORD *)(v263 + 28) == -1)
            fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)v5);
        }
        if ((_QWORD)v384)
        {
          *((_QWORD *)&v384 + 1) = v384;
          operator delete((void *)v384);
        }
        v286 = (_QWORD *)*((_QWORD *)&v383 + 1);
        if (*((_QWORD *)&v383 + 1))
        {
          do
          {
            v287 = (_QWORD *)*v286;
            operator delete(v286);
            v286 = v287;
          }
          while (v287);
        }
        *((_QWORD *)&v383 + 1) = 0;
        if ((_QWORD)v382)
          operator delete((void *)v382);
        std::deque<int>::~deque[abi:ne180100]((uint64_t)v380);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v377);
        fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&v367);
        goto LABEL_583;
      }
      __p = &v410;
      v403 = &v409;
      v405 = 0u;
      v406 = 0u;
      v407 = 0u;
      memset(v408, 0, 28);
      LOBYTE(v399[0]) = 0;
      std::vector<BOOL>::vector(&v400, v272, (unsigned __int8 *)v399);
      v396 = (void *)-1;
      std::vector<unsigned long>::vector(v399, v272, &v396);
      v397 = 0;
      v396 = 0;
      v398 = 0;
      v288 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 192))(v5);
      v289 = v288;
      v290 = v397;
      if (v397 >= v398)
      {
        v292 = (char *)v396;
        v293 = (v397 - (_BYTE *)v396) >> 2;
        v294 = v293 + 1;
        if ((unint64_t)(v293 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v295 = v398 - (_BYTE *)v396;
        if ((v398 - (_BYTE *)v396) >> 1 > v294)
          v294 = v295 >> 1;
        if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFFCLL)
          v296 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v296 = v294;
        if (v296)
        {
          v297 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v398, v296);
          v290 = v397;
          v292 = (char *)v396;
        }
        else
        {
          v297 = 0;
        }
        v298 = &v297[4 * v293];
        v299 = &v297[4 * v296];
        *(_DWORD *)v298 = v289;
        v291 = v298 + 4;
        while (v290 != v292)
        {
          v300 = *((_DWORD *)v290 - 1);
          v290 -= 4;
          *((_DWORD *)v298 - 1) = v300;
          v298 -= 4;
        }
        v396 = v298;
        v397 = v291;
        v398 = v299;
        if (v292)
          operator delete(v292);
      }
      else
      {
        *(_DWORD *)v397 = v288;
        v291 = v290 + 4;
      }
      v397 = v291;
      v301 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 24))(v5);
      v302 = *(float *)&v409.__begin_[v301];
      v303 = NAN;
      if (v302 != -INFINITY && v267 != -INFINITY)
      {
        v304 = v267 == INFINITY || v302 == INFINITY;
        v305 = v302 + v267;
        if (v304)
          v303 = INFINITY;
        else
          v303 = v305;
      }
      v306 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 24))(v5);
      v395 = v306;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v303, *(float *)&v409.__begin_[v306]))
      {
        v307 = 0;
      }
      else
      {
        v410.__begin_[v306] = 0;
        v308 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)&__p, &v395);
        *((_QWORD *)v399[0] + v306) = v308;
        v307 = 1;
      }
      v309 = v408[3];
      if (!LODWORD(v408[3]))
      {
LABEL_685:
        v346 = v401;
        v263 = a3;
        v5 = v358;
        if (v401)
        {
          v347 = 0;
          do
          {
            if (((*(_QWORD *)((char *)v400 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v347) & 1) == 0)
            {
              v348 = v397;
              if (v397 >= v398)
              {
                v350 = (char *)v396;
                v351 = (v397 - (_BYTE *)v396) >> 2;
                v352 = v351 + 1;
                if ((unint64_t)(v351 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v353 = v398 - (_BYTE *)v396;
                if ((v398 - (_BYTE *)v396) >> 1 > v352)
                  v352 = v353 >> 1;
                if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL)
                  v354 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v354 = v352;
                if (v354)
                {
                  v355 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v398, v354);
                  v348 = v397;
                  v350 = (char *)v396;
                }
                else
                {
                  v355 = 0;
                }
                v356 = &v355[4 * v351];
                *(_DWORD *)v356 = v347;
                v349 = v356 + 4;
                while (v348 != v350)
                {
                  v357 = *((_DWORD *)v348 - 1);
                  v348 -= 4;
                  *((_DWORD *)v356 - 1) = v357;
                  v356 -= 4;
                }
                v396 = v356;
                v397 = v349;
                v398 = &v355[4 * v354];
                if (v350)
                  operator delete(v350);
              }
              else
              {
                *(_DWORD *)v397 = v347;
                v349 = v348 + 4;
              }
              v397 = v349;
              v346 = v401;
            }
            ++v347;
          }
          while (v347 < v346);
        }
        (*(void (**)(void *, void **))(*(_QWORD *)v358 + 208))(v358, &v396);
        if (v396)
        {
          v397 = (char *)v396;
          operator delete(v396);
        }
        if (v399[0])
        {
          v399[1] = v399[0];
          operator delete(v399[0]);
        }
        if (v400)
          operator delete(v400);
        fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&__p);
        goto LABEL_568;
      }
LABEL_618:
      v310 = (_DWORD *)v408[0];
      v311 = *((_QWORD *)&v406 + 1);
      v312 = *(unsigned int *)v408[0];
      v313 = v309 - 1;
      v314 = (int)**((_DWORD **)&v406 + 1);
      v315 = *(int *)(*((_QWORD *)&v406 + 1) + 4 * v313);
      **((_DWORD **)&v406 + 1) = v315;
      v316 = v405;
      *(_DWORD *)(v405 + 4 * v315) = 0;
      *(_DWORD *)(v311 + 4 * v313) = v314;
      *(_DWORD *)(v316 + 4 * v314) = v313;
      LODWORD(v311) = *v310;
      *v310 = v310[v313];
      v310[v313] = v311;
      --LODWORD(v408[3]);
      fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify((_BOOL8)&__p, 0);
      v317 = (int)v312;
      *((_QWORD *)v399[0] + (int)v312) = -1;
      *(_QWORD *)((char *)v400 + (((unint64_t)(int)v312 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v312;
      v318 = v410.__begin_;
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v358 + 32))(v358, v312);
      v320 = *(float *)&v318[(int)v312];
      v321 = NAN;
      if (v320 != -INFINITY && v319 != -INFINITY)
      {
        v321 = INFINITY;
        v322 = v320 == INFINITY || v319 == INFINITY;
        v323 = v319 + v320;
        if (!v322)
          v321 = v323;
      }
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v303, v321))
        (*(void (**)(void *, _QWORD, float))(*(_QWORD *)v358 + 176))(v358, (int)v312, INFINITY);
      (*(void (**)(void *, _QWORD, uint64_t *))(*(_QWORD *)v358 + 288))(v358, (int)v312, &v394);
      while (1)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v394 + 24))(v394))
        {
          if (v394)
            (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
          v309 = v408[3];
          if (!LODWORD(v408[3]))
            goto LABEL_685;
          goto LABEL_618;
        }
        v393 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v394 + 32))(v394);
        v324 = v410.__begin_;
        v325 = *(float *)&v410.__begin_[v317];
        v326 = NAN;
        if (v325 != -INFINITY)
        {
          v326 = NAN;
          if (*((float *)&v393 + 2) != -INFINITY)
          {
            v326 = INFINITY;
            if (*((float *)&v393 + 2) != INFINITY && v325 != INFINITY)
              v326 = v325 + *((float *)&v393 + 2);
          }
        }
        v328 = HIDWORD(v393);
        v329 = SHIDWORD(v393);
        if (SHIDWORD(v393) >= (unint64_t)(v409.__end_ - v409.__begin_))
          v330 = INFINITY;
        else
          v330 = *(float *)&v409.__begin_[SHIDWORD(v393)];
        v331 = NAN;
        if (v326 != -INFINITY && v330 != -INFINITY)
        {
          v331 = INFINITY;
          v332 = v330 == INFINITY || v326 == INFINITY;
          v333 = v326 + v330;
          if (!v332)
            v331 = v333;
        }
        if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v303, v331))
        {
          HIDWORD(v393) = *(_DWORD *)v396;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v394 + 88))(v394, &v393);
          goto LABEL_681;
        }
        if (v325 == -INFINITY)
        {
          v336 = (float *)&v324[v329];
          v337 = NAN;
          if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(NAN, *v336))
            goto LABEL_666;
        }
        else
        {
          v334 = NAN;
          if (*((float *)&v393 + 2) != -INFINITY)
          {
            v334 = INFINITY;
            if (*((float *)&v393 + 2) != INFINITY && v325 != INFINITY)
              v334 = v325 + *((float *)&v393 + 2);
          }
          v336 = (float *)&v324[v329];
          if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v334, *v336))
            goto LABEL_666;
          v337 = NAN;
          if (v325 != -INFINITY)
          {
            v337 = NAN;
            if (*((float *)&v393 + 2) != -INFINITY)
            {
              if (*((float *)&v393 + 2) == INFINITY || v325 == INFINITY)
                v337 = INFINITY;
              else
                v337 = v325 + *((float *)&v393 + 2);
            }
          }
        }
        *v336 = v337;
        v328 = HIDWORD(v393);
        v329 = SHIDWORD(v393);
LABEL_666:
        v340 = v269 == -1 || v307 < v269;
        if (((*(_QWORD *)((char *)v400 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v329) & 1) == 0 && v340)
        {
          v341 = *((_QWORD *)v399[0] + v329);
          if (v341 == -1)
          {
            v345 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)&__p, (int *)&v393 + 3);
            *((_QWORD *)v399[0] + SHIDWORD(v393)) = v345;
            ++v307;
          }
          else
          {
            v342 = v408[0];
            v343 = *(int *)(v405 + 4 * (int)v341);
            v344 = v343 - 1;
            if ((int)v343 < 1)
              v344 = v343;
            if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)&__p, v328, *(_DWORD *)(v408[0] + 4 * (v344 >> 1))))
            {
              fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)&__p, (int *)&v393 + 3, v343);
            }
            else
            {
              *(_DWORD *)(v342 + 4 * v343) = v328;
              fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify((_BOOL8)&__p, v343);
            }
          }
        }
LABEL_681:
        (*(void (**)(uint64_t))(*(_QWORD *)v394 + 40))(v394);
      }
    }
    v55 = 0;
    while (1)
    {
      v57 = *(v54 - 1);
      v56 = v57;
      v391.__end_ = v54 - 1;
      v58 = (int)v57;
      if (((*(_QWORD *)((char *)v392 + (((unint64_t)(int)v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v57) & 1) != 0)
        break;
      if (!*(_BYTE *)(a3 + 21))
      {
        LODWORD(__p) = 0;
        LODWORD(__p) = *(_DWORD *)(a3 + 24);
        LODWORD(v410.__begin_) = 2139095040;
        if (*(float *)&__p == INFINITY && *(_DWORD *)(a3 + 28) == -1)
          break;
      }
LABEL_540:
      v54 = v391.__end_;
      if (v391.__begin_ == v391.__end_)
        goto LABEL_541;
    }
    v360 = v56;
    LODWORD(v409.__begin_) = v56;
    v386 = INFINITY;
    *((_QWORD *)&v384 + 1) = v55;
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v367 + 24))(v367) == -1)
    {
      v180 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v367 + 64))(v367, 4, 0);
      goto LABEL_333;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v369 + 16) + 56))(*(_QWORD *)(v369 + 16));
    if (!v372)
    {
      v368[1] = *v368;
      *((_QWORD *)&v373 + 1) = v373;
      *(_QWORD *)&v375 = 0;
    }
    v59 = v360;
    if ((_DWORD)v360 == -1)
    {
      v59 = (*(uint64_t (**)(void *))(*(_QWORD *)v367 + 24))(v367);
      v58 = (int)v59;
    }
    while (1)
    {
      v60 = v368;
      v61 = v368 + 1;
      v62 = (char *)v368[1];
      v63 = *v368;
      v64 = (v62 - (_BYTE *)*v368) >> 2;
      if (v64 > v58)
        break;
      v65 = (char *)v368[2];
      if (v62 >= v65)
      {
        if ((v64 + 1) >> 62)
          goto LABEL_714;
        v67 = v65 - v63;
        v68 = v67 >> 1;
        if (v67 >> 1 <= v64 + 1)
          v68 = v64 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69)
          v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v69);
        else
          v70 = 0;
        v71 = (_DWORD *)(v69 + 4 * v64);
        *v71 = 2139095040;
        v66 = v71 + 1;
        v72 = (char *)*v61;
        v73 = (char *)*v60;
        if (*v61 != *v60)
        {
          do
          {
            v74 = *((_DWORD *)v72 - 1);
            v72 -= 4;
            *--v71 = v74;
          }
          while (v72 != v73);
          v72 = (char *)*v60;
        }
        *v60 = v71;
        *v61 = v66;
        v60[2] = (void *)(v69 + 4 * v70);
        if (v72)
          operator delete(v72);
      }
      else
      {
        *(_DWORD *)v62 = 2139095040;
        v66 = v62 + 4;
      }
      *v61 = v66;
      v75 = *((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1) >= (unint64_t)v374)
      {
        v77 = (uint64_t)(*((_QWORD *)&v373 + 1) - v373) >> 2;
        if ((unint64_t)(v77 + 1) >> 62)
LABEL_714:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v78 = (uint64_t)(v374 - v373) >> 1;
        if (v78 <= v77 + 1)
          v78 = v77 + 1;
        if ((_QWORD)v374 - (_QWORD)v373 >= 0x7FFFFFFFFFFFFFFCuLL)
          v79 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v79 = v78;
        if (v79)
          v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v79);
        else
          v80 = 0;
        v81 = (_DWORD *)(v79 + 4 * v77);
        *v81 = 2139095040;
        v76 = v81 + 1;
        v82 = (char *)*((_QWORD *)&v373 + 1);
        v83 = (char *)v373;
        if (*((_QWORD *)&v373 + 1) != (_QWORD)v373)
        {
          do
          {
            v84 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *--v81 = v84;
          }
          while (v82 != v83);
          v82 = (char *)v373;
        }
        *(_QWORD *)&v373 = v81;
        *((_QWORD *)&v373 + 1) = v76;
        *(_QWORD *)&v374 = v79 + 4 * v80;
        if (v82)
          operator delete(v82);
      }
      else
      {
        **((_DWORD **)&v373 + 1) = 2139095040;
        v76 = (_DWORD *)(v75 + 4);
      }
      *((_QWORD *)&v373 + 1) = v76;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)&v374 + 8, &__p);
    }
    if (v372)
    {
      v86 = (char *)*((_QWORD *)&v376[0] + 1);
      v85 = *(char **)&v376[0];
      v87 = (uint64_t)(*((_QWORD *)&v376[0] + 1) - *(_QWORD *)&v376[0]) >> 2;
      if (v87 <= v58)
      {
        do
        {
          if ((unint64_t)v86 >= *(_QWORD *)&v376[1])
          {
            v89 = v87 + 1;
            if ((v87 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v90 = *(_QWORD *)&v376[1] - (_QWORD)v85;
            if ((uint64_t)(*(_QWORD *)&v376[1] - (_QWORD)v85) >> 1 > v89)
              v89 = v90 >> 1;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v376[1], v91);
              v86 = (char *)*((_QWORD *)&v376[0] + 1);
              v85 = *(char **)&v376[0];
            }
            else
            {
              v92 = 0;
            }
            v93 = &v92[4 * v87];
            *(_DWORD *)v93 = -1;
            v88 = v93 + 4;
            while (v86 != v85)
            {
              v94 = *((_DWORD *)v86 - 1);
              v86 -= 4;
              *((_DWORD *)v93 - 1) = v94;
              v93 -= 4;
            }
            *(_QWORD *)&v376[0] = v93;
            *((_QWORD *)&v376[0] + 1) = v88;
            *(_QWORD *)&v376[1] = &v92[4 * v91];
            if (v85)
            {
              operator delete(v85);
              v85 = *(char **)&v376[0];
            }
            else
            {
              v85 = v93;
            }
          }
          else
          {
            *(_DWORD *)v86 = -1;
            v88 = v86 + 4;
          }
          *((_QWORD *)&v376[0] + 1) = v88;
          v87 = (v88 - v85) >> 2;
          v86 = v88;
        }
        while (v87 <= v58);
        v63 = *v368;
      }
      *(_DWORD *)&v85[4 * v58] = DWORD2(v376[1]);
    }
    *(_DWORD *)&v63[4 * v58] = 0;
    *(_DWORD *)(v373 + 4 * v58) = 0;
    *(_QWORD *)(*((_QWORD *)&v374 + 1) + ((v58 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v58;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v369 + 16) + 24))(*(_QWORD *)(v369 + 16), v59);
LABEL_168:
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v369 + 16) + 48))(*(_QWORD *)(v369 + 16)) & 1) != 0)
      goto LABEL_331;
    v95 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v369 + 16) + 16))(*(_QWORD *)(v369 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v369 + 16) + 32))(*(_QWORD *)(v369 + 16));
    v96 = v368;
    v97 = v368 + 1;
    v98 = (char *)v368[1];
    v99 = *v368;
    for (k = (v98 - (_BYTE *)*v368) >> 2; k <= (int)v95; k = (v98 - (_BYTE *)*v368) >> 2)
    {
      v101 = (unint64_t)v96[2];
      if ((unint64_t)v98 >= v101)
      {
        if ((k + 1) >> 62)
          goto LABEL_714;
        v103 = v101 - (_QWORD)v99;
        v104 = v103 >> 1;
        if (v103 >> 1 <= k + 1)
          v104 = k + 1;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
          v105 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
          v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v105);
        else
          v106 = 0;
        v107 = (_DWORD *)(v105 + 4 * k);
        *v107 = 2139095040;
        v102 = v107 + 1;
        v108 = (char *)*v97;
        v109 = (char *)*v96;
        if (*v97 != *v96)
        {
          do
          {
            v110 = *((_DWORD *)v108 - 1);
            v108 -= 4;
            *--v107 = v110;
          }
          while (v108 != v109);
          v108 = (char *)*v96;
        }
        *v96 = v107;
        *v97 = v102;
        v96[2] = (void *)(v105 + 4 * v106);
        if (v108)
          operator delete(v108);
      }
      else
      {
        *(_DWORD *)v98 = 2139095040;
        v102 = v98 + 4;
      }
      *v97 = v102;
      v111 = *((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1) >= (unint64_t)v374)
      {
        v113 = (uint64_t)(*((_QWORD *)&v373 + 1) - v373) >> 2;
        if ((unint64_t)(v113 + 1) >> 62)
          goto LABEL_714;
        v114 = (uint64_t)(v374 - v373) >> 1;
        if (v114 <= v113 + 1)
          v114 = v113 + 1;
        if ((_QWORD)v374 - (_QWORD)v373 >= 0x7FFFFFFFFFFFFFFCuLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
          v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v115);
        else
          v116 = 0;
        v117 = (_DWORD *)(v115 + 4 * v113);
        *v117 = 2139095040;
        v112 = v117 + 1;
        v118 = (char *)*((_QWORD *)&v373 + 1);
        v119 = (char *)v373;
        if (*((_QWORD *)&v373 + 1) != (_QWORD)v373)
        {
          do
          {
            v120 = *((_DWORD *)v118 - 1);
            v118 -= 4;
            *--v117 = v120;
          }
          while (v118 != v119);
          v118 = (char *)v373;
        }
        *(_QWORD *)&v373 = v117;
        *((_QWORD *)&v373 + 1) = v112;
        *(_QWORD *)&v374 = v115 + 4 * v116;
        if (v118)
          operator delete(v118);
      }
      else
      {
        **((_DWORD **)&v373 + 1) = 2139095040;
        v112 = (_DWORD *)(v111 + 4);
      }
      *((_QWORD *)&v373 + 1) = v112;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)&v374 + 8, &__p);
      v96 = v368;
      v97 = v368 + 1;
      v98 = (char *)v368[1];
      v99 = *v368;
    }
    if (v371)
    {
      LODWORD(__p) = (*(float (**)(void *, uint64_t))(*(_QWORD *)v367 + 32))(v367, v95);
      LODWORD(v410.__begin_) = 2139095040;
      if (*(float *)&__p != INFINITY)
      {
LABEL_331:
        ++DWORD2(v376[1]);
        v180 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v367 + 64))(v367, 4, 0);
LABEL_333:
        if (!v180)
          goto LABEL_335;
        BYTE12(v376[1]) = 1;
        goto LABEL_537;
      }
    }
    *(_QWORD *)(*((_QWORD *)&v374 + 1) + (((unint64_t)(int)v95 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v95);
    v121 = *(float *)(v373 + 4 * (int)v95);
    *(_DWORD *)(v373 + 4 * (int)v95) = 2139095040;
    *((_QWORD *)&v405 + 1) = 0;
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)v367 + 136))(v367, v95, &__p);
    while (__p)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)__p + 24))(__p) & 1) != 0)
        goto LABEL_317;
      if (!__p)
      {
        v123 = *((_QWORD *)&v405 + 1);
LABEL_213:
        v122 = (uint64_t)v403 + 16 * v123;
        goto LABEL_214;
      }
      v122 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
LABEL_214:
      if (!*(_QWORD *)v122)
      {
        v124 = v368;
        v125 = v368 + 1;
        v126 = (char *)v368[1];
        v127 = *v368;
        v128 = (v126 - (_BYTE *)*v368) >> 2;
        if (v128 <= *(int *)(v122 + 12))
        {
          do
          {
            v130 = (unint64_t)v124[2];
            if ((unint64_t)v126 >= v130)
            {
              if ((v128 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v132 = v130 - (_QWORD)v127;
              v133 = v132 >> 1;
              if (v132 >> 1 <= v128 + 1)
                v133 = v128 + 1;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
                v134 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v134 = v133;
              if (v134)
                v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v134);
              else
                v135 = 0;
              v136 = (_DWORD *)(v134 + 4 * v128);
              *v136 = 2139095040;
              v131 = v136 + 1;
              v137 = (char *)*v125;
              v138 = (char *)*v124;
              if (*v125 != *v124)
              {
                do
                {
                  v139 = *((_DWORD *)v137 - 1);
                  v137 -= 4;
                  *--v136 = v139;
                }
                while (v137 != v138);
                v137 = (char *)*v124;
              }
              *v124 = v136;
              *v125 = v131;
              v124[2] = (void *)(v134 + 4 * v135);
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_DWORD *)v126 = 2139095040;
              v131 = v126 + 4;
            }
            *v125 = v131;
            v140 = *((_QWORD *)&v373 + 1);
            if (*((_QWORD *)&v373 + 1) >= (unint64_t)v374)
            {
              v142 = (uint64_t)(*((_QWORD *)&v373 + 1) - v373) >> 2;
              if ((unint64_t)(v142 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v143 = (uint64_t)(v374 - v373) >> 1;
              if (v143 <= v142 + 1)
                v143 = v142 + 1;
              if ((_QWORD)v374 - (_QWORD)v373 >= 0x7FFFFFFFFFFFFFFCuLL)
                v144 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
                v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v144);
              else
                v145 = 0;
              v146 = (_DWORD *)(v144 + 4 * v142);
              *v146 = 2139095040;
              v141 = v146 + 1;
              v147 = (char *)*((_QWORD *)&v373 + 1);
              v148 = (char *)v373;
              if (*((_QWORD *)&v373 + 1) != (_QWORD)v373)
              {
                do
                {
                  v149 = *((_DWORD *)v147 - 1);
                  v147 -= 4;
                  *--v146 = v149;
                }
                while (v147 != v148);
                v147 = (char *)v373;
              }
              *(_QWORD *)&v373 = v146;
              *((_QWORD *)&v373 + 1) = v141;
              *(_QWORD *)&v374 = v144 + 4 * v145;
              if (v147)
                operator delete(v147);
            }
            else
            {
              **((_DWORD **)&v373 + 1) = 2139095040;
              v141 = (_DWORD *)(v140 + 4);
            }
            *((_QWORD *)&v373 + 1) = v141;
            LOBYTE(v410.__begin_) = 0;
            std::vector<BOOL>::push_back((uint64_t)&v374 + 8, &v410);
            v124 = v368;
            v125 = v368 + 1;
            v126 = (char *)v368[1];
            v127 = *v368;
            v128 = (v126 - (_BYTE *)*v368) >> 2;
            v129 = *(int *)(v122 + 12);
          }
          while (v128 <= v129);
        }
        else
        {
          LODWORD(v129) = *(_DWORD *)(v122 + 12);
        }
        if (v372)
        {
          v151 = (char *)*((_QWORD *)&v376[0] + 1);
          v150 = *(char **)&v376[0];
          v152 = (uint64_t)(*((_QWORD *)&v376[0] + 1) - *(_QWORD *)&v376[0]) >> 2;
          if (v152 <= (int)v129)
          {
            do
            {
              if ((unint64_t)v151 >= *(_QWORD *)&v376[1])
              {
                v155 = v152 + 1;
                if ((v152 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v156 = *(_QWORD *)&v376[1] - (_QWORD)v150;
                if ((uint64_t)(*(_QWORD *)&v376[1] - (_QWORD)v150) >> 1 > v155)
                  v155 = v156 >> 1;
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                  v157 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v157 = v155;
                if (v157)
                {
                  v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v376[1], v157);
                  v151 = (char *)*((_QWORD *)&v376[0] + 1);
                  v150 = *(char **)&v376[0];
                }
                else
                {
                  v158 = 0;
                }
                v159 = &v158[4 * v152];
                *(_DWORD *)v159 = -1;
                v154 = v159 + 4;
                while (v151 != v150)
                {
                  v160 = *((_DWORD *)v151 - 1);
                  v151 -= 4;
                  *((_DWORD *)v159 - 1) = v160;
                  v159 -= 4;
                }
                *(_QWORD *)&v376[0] = v159;
                *((_QWORD *)&v376[0] + 1) = v154;
                *(_QWORD *)&v376[1] = &v158[4 * v157];
                if (v150)
                {
                  operator delete(v150);
                  v150 = *(char **)&v376[0];
                }
                else
                {
                  v150 = v159;
                }
              }
              else
              {
                *(_DWORD *)v151 = -1;
                v154 = v151 + 4;
              }
              *((_QWORD *)&v376[0] + 1) = v154;
              v152 = (v154 - v150) >> 2;
              LODWORD(v129) = *(_DWORD *)(v122 + 12);
              v151 = v154;
            }
            while (v152 <= (int)v129);
            v153 = (int)v129;
            v124 = v368;
          }
          else
          {
            v153 = (int)v129;
          }
          if (*(_DWORD *)&v150[4 * v153] != DWORD2(v376[1]))
          {
            *((_DWORD *)*v124 + v153) = 2139095040;
            *(_DWORD *)(v373 + 4 * *(int *)(v122 + 12)) = 2139095040;
            v129 = *(int *)(v122 + 12);
            *(_QWORD *)(*((_QWORD *)&v374 + 1) + ((v129 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v129);
            *(_DWORD *)(*(_QWORD *)&v376[0] + 4 * v129) = DWORD2(v376[1]);
            v124 = v368;
            LODWORD(v129) = *(_DWORD *)(v122 + 12);
          }
        }
        v161 = (float *)*v124;
        v162 = v373;
        v163 = NAN;
        if (v121 != -INFINITY)
        {
          v164 = *(float *)(v122 + 8);
          v163 = NAN;
          if (v164 != -INFINITY)
          {
            v163 = INFINITY;
            v165 = v164 == INFINITY || v121 == INFINITY;
            v166 = v121 + v164;
            if (!v165)
              v163 = v166;
          }
        }
        v167 = v161[(int)v129];
        if (v167 >= v163)
          v168 = v163;
        else
          v168 = v161[(int)v129];
        if (v163 == -INFINITY || v167 == -INFINITY)
          v168 = NAN;
        if (v168 > (float)(v167 + v370) || v167 > (float)(v370 + v168))
        {
          v161[(int)v129] = v168;
          v172 = *(float *)(v162 + 4 * (int)v129);
          if (v172 >= v163)
            v173 = v163;
          else
            v173 = *(float *)(v162 + 4 * (int)v129);
          v175 = v163 == -INFINITY || v172 == -INFINITY;
          v176 = NAN;
          if (!v175)
            v176 = v173;
          *(float *)(v162 + 4 * (int)v129) = v176;
          if (v161[(int)v129] != -INFINITY && (v176 < -INFINITY || v176 > -INFINITY))
          {
            v177 = **(_QWORD **)(v369 + 16);
            if (((*(_QWORD *)(*((_QWORD *)&v374 + 1)
                             + (((unint64_t)*(int *)(v122 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v122 + 12)) & 1) != 0)
            {
              (*(void (**)(void))(v177 + 40))();
            }
            else
            {
              (*(void (**)(void))(v177 + 24))();
              *(_QWORD *)(*((_QWORD *)&v374 + 1) + (((unint64_t)*(int *)(v122 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v122 + 12);
            }
            goto LABEL_314;
          }
          v178 = 0;
          BYTE12(v376[1]) = 1;
LABEL_318:
          if (__p)
          {
            (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
          }
          else if ((_QWORD)v405)
          {
            --*(_DWORD *)v405;
          }
          if ((v178 & 1) == 0)
          {
LABEL_335:
            if (!BYTE12(v376[1]))
            {
              std::deque<int>::push_back(v380, &v409);
              v181 = *((_QWORD *)&v381 + 1);
              v182 = (uint64_t)&v382;
              if (*((_QWORD *)&v381 + 1))
              {
                while (1)
                {
                  v183 = v181 - 1;
                  v184 = *(unsigned int *)(*(_QWORD *)(v380[1]
                                                     + (((unint64_t)(v381 + v183) >> 7) & 0x1FFFFFFFFFFFFF8))
                                         + 4 * ((v381 + v183) & 0x3FF));
                  *((_QWORD *)&v381 + 1) = v183;
                  std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v380);
                  v185 = (int)v184;
                  while (*((_QWORD *)&v382 + 1) <= (unint64_t)(int)v184)
                  {
                    LOBYTE(__p) = 0;
                    std::vector<BOOL>::push_back((uint64_t)&v382, &__p);
                  }
                  v186 = *(_QWORD *)(v382 + 8 * ((unint64_t)(int)v184 >> 6));
                  if ((v186 & (1 << v184)) == 0)
                    break;
LABEL_532:
                  v181 = *((_QWORD *)&v381 + 1);
                  if (!*((_QWORD *)&v381 + 1))
                    goto LABEL_535;
                }
                v359 = v184;
                *(_QWORD *)(v382 + 8 * ((unint64_t)(int)v184 >> 6)) = v186 | (1 << v184);
                v187 = *((_QWORD *)&v383 + 1);
                v188 = operator new(0x10uLL);
                *(_QWORD *)v188 = v187;
                v188[2] = v359;
                *((_QWORD *)&v383 + 1) = v188;
                *((_QWORD *)&v405 + 1) = 0;
                (*(void (**)(void *))(*(_QWORD *)p_p + 136))(p_p);
                v361 = v185;
                while (2)
                {
                  if (__p)
                  {
                    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
                    {
                      if (__p)
                      {
                        (*(void (**)(void))(*(_QWORD *)__p + 8))();
                      }
                      else
                      {
LABEL_511:
                        if ((_QWORD)v405)
                          --*(_DWORD *)v405;
                      }
                      v252 = *(_QWORD *)v366;
                      (*(void (**)(void *, uint64_t))(*(_QWORD *)p_p + 32))(p_p, v359);
                      v254 = *(float *)(v252 + 4 * v185);
                      v255 = NAN;
                      if (v254 != -INFINITY && v253 != -INFINITY)
                      {
                        v255 = INFINITY;
                        v256 = v253 == INFINITY || v254 == INFINITY;
                        v257 = v254 + v253;
                        if (!v256)
                          v255 = v257;
                      }
                      if (v386 >= v255)
                        v258 = v255;
                      else
                        v258 = v386;
                      v260 = v255 == -INFINITY || v386 == -INFINITY;
                      v261 = NAN;
                      if (!v260)
                        v261 = v258;
                      v386 = v261;
                      goto LABEL_532;
                    }
                    if (__p)
                    {
                      v189 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
                      goto LABEL_349;
                    }
                    v190 = *((_QWORD *)&v405 + 1);
                  }
                  else
                  {
                    v190 = *((_QWORD *)&v405 + 1);
                    if (*((_QWORD *)&v405 + 1) >= v404)
                      goto LABEL_511;
                  }
                  v189 = (_OWORD *)((char *)v403 + 16 * v190);
LABEL_349:
                  *(_OWORD *)&v410.__begin_ = *v189;
                  v191 = *(float *)(*(_QWORD *)v366 + 4 * v185);
                  v192 = NAN;
                  if (v191 != -INFINITY)
                  {
                    v192 = NAN;
                    if (*(float *)&v410.__end_ != -INFINITY)
                    {
                      v192 = INFINITY;
                      v193 = *(float *)&v410.__end_ == INFINITY || v191 == INFINITY;
                      v194 = v191 + *(float *)&v410.__end_;
                      if (!v193)
                        v192 = v194;
                    }
                  }
                  *(float *)&v410.__end_ = v192;
                  v195 = (int)v410.__begin_;
                  begin_high = HIDWORD(v410.__begin_);
                  if (!v410.__begin_)
                  {
                    end_high = SHIDWORD(v410.__end_);
                    while (*((_QWORD *)&v382 + 1) <= end_high)
                    {
                      LOBYTE(v400) = 0;
                      std::vector<BOOL>::push_back((uint64_t)&v382, &v400);
                    }
                    if (((*(_QWORD *)(v382 + ((end_high >> 3) & 0x1FFFFFFFFFFFFFF8)) >> end_high) & 1) == 0)
                      std::deque<int>::push_back(v380, (_DWORD *)&v410.__end_ + 1);
                    goto LABEL_470;
                  }
                  v364 = HIDWORD(v410.__end_);
                  v198 = SHIDWORD(v410.__end_) + 7853 * SLODWORD(v410.__begin_) + 7867 * SHIDWORD(v410.__begin_);
                  v199 = *((_QWORD *)&v377 + 1);
                  if (!*((_QWORD *)&v377 + 1))
                  {
                    v363 = (uint64_t)(*((_QWORD *)&v384 + 1) - v384) >> 4;
                    v362 = v387;
                    goto LABEL_397;
                  }
                  v200 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v377 + 8));
                  v200.i16[0] = vaddlv_u8(v200);
                  if (v200.u32[0] > 1uLL)
                  {
                    v201 = SHIDWORD(v410.__end_) + 7853 * SLODWORD(v410.__begin_) + 7867 * SHIDWORD(v410.__begin_);
                    if (v198 >= *((_QWORD *)&v377 + 1))
                      v201 = v198 % *((_QWORD *)&v377 + 1);
                  }
                  else
                  {
                    v201 = v198 & (*((_QWORD *)&v377 + 1) - 1);
                  }
                  v202 = *(uint64_t ***)(v377 + 8 * v201);
                  if (!v202 || (v203 = *v202) == 0)
                  {
                    v205 = (_OWORD *)*((_QWORD *)&v384 + 1);
                    v363 = (uint64_t)(*((_QWORD *)&v384 + 1) - v384) >> 4;
                    v362 = v387;
                    goto LABEL_381;
                  }
                  while (1)
                  {
                    v204 = v203[1];
                    if (v204 != v198)
                    {
                      if (v200.u32[0] > 1uLL)
                      {
                        if (v204 >= *((_QWORD *)&v377 + 1))
                          v204 %= *((_QWORD *)&v377 + 1);
                      }
                      else
                      {
                        v204 &= *((_QWORD *)&v377 + 1) - 1;
                      }
                      if (v204 == v201)
                        goto LABEL_378;
LABEL_379:
                      v205 = (_OWORD *)*((_QWORD *)&v384 + 1);
                      v363 = (uint64_t)(*((_QWORD *)&v384 + 1) - v384) >> 4;
                      v362 = v387;
LABEL_381:
                      v206 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v377 + 8));
                      v206.i16[0] = vaddlv_u8(v206);
                      if (v206.u32[0] > 1uLL)
                      {
                        v182 = SHIDWORD(v410.__end_)
                             + 7853 * SLODWORD(v410.__begin_)
                             + 7867 * SHIDWORD(v410.__begin_);
                        if (v198 >= *((_QWORD *)&v377 + 1))
                          v182 = v198 % *((_QWORD *)&v377 + 1);
                      }
                      else
                      {
                        v182 = v198 & (*((_QWORD *)&v377 + 1) - 1);
                      }
                      v207 = *(uint64_t ***)(v377 + 8 * v182);
                      if (v207)
                      {
                        for (m = *v207; m; m = (uint64_t *)*m)
                        {
                          v209 = m[1];
                          if (v209 == v198)
                          {
                            if ((std::vector<int>::pointer)m[2] == v410.__begin_
                              && *((_DWORD *)m + 6) == HIDWORD(v410.__end_))
                            {
                              goto LABEL_453;
                            }
                          }
                          else
                          {
                            if (v206.u32[0] > 1uLL)
                            {
                              if (v209 >= *((_QWORD *)&v377 + 1))
                                v209 %= *((_QWORD *)&v377 + 1);
                            }
                            else
                            {
                              v209 &= *((_QWORD *)&v377 + 1) - 1;
                            }
                            if (v209 != v182)
                              break;
                          }
                        }
                      }
LABEL_397:
                      v210 = operator new(0x30uLL);
                      *v210 = 0;
                      v210[1] = v198;
                      *((_DWORD *)v210 + 4) = v195;
                      *((_DWORD *)v210 + 5) = begin_high;
                      *((_DWORD *)v210 + 6) = v364;
                      *((_DWORD *)v210 + 8) = v362;
                      v210[5] = v363;
                      v211 = (float)(unint64_t)(*((_QWORD *)&v378 + 1) + 1);
                      if (!v199 || (float)(v379 * (float)v199) < v211)
                      {
                        v212 = (v199 & (v199 - 1)) != 0;
                        if (v199 < 3)
                          v212 = 1;
                        v213 = v212 | (2 * v199);
                        v214 = vcvtps_u32_f32(v211 / v379);
                        if (v213 <= v214)
                          prime = (int8x8_t)v214;
                        else
                          prime = (int8x8_t)v213;
                        if (*(_QWORD *)&prime == 1)
                        {
                          prime = (int8x8_t)2;
                        }
                        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                        {
                          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                          v199 = *((_QWORD *)&v377 + 1);
                        }
                        if (*(_QWORD *)&prime <= v199)
                        {
                          if (*(_QWORD *)&prime < v199)
                          {
                            v222 = vcvtps_u32_f32((float)*((unint64_t *)&v378 + 1) / v379);
                            if (v199 < 3
                              || (v223 = (uint8x8_t)vcnt_s8((int8x8_t)v199),
                                  v223.i16[0] = vaddlv_u8(v223),
                                  v223.u32[0] > 1uLL))
                            {
                              v222 = std::__next_prime(v222);
                            }
                            else
                            {
                              v224 = 1 << -(char)__clz(v222 - 1);
                              if (v222 >= 2)
                                v222 = v224;
                            }
                            if (*(_QWORD *)&prime <= v222)
                              prime = (int8x8_t)v222;
                            if (*(_QWORD *)&prime >= v199)
                            {
                              v199 = *((_QWORD *)&v377 + 1);
                            }
                            else
                            {
                              if (prime)
                                goto LABEL_409;
                              v240 = (void *)v377;
                              *(_QWORD *)&v377 = 0;
                              if (v240)
                                operator delete(v240);
                              v199 = 0;
                              *((_QWORD *)&v377 + 1) = 0;
                            }
                          }
                        }
                        else
                        {
LABEL_409:
                          if (*(_QWORD *)&prime >> 61)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v216 = operator new(8 * *(_QWORD *)&prime);
                          v217 = (void *)v377;
                          *(_QWORD *)&v377 = v216;
                          if (v217)
                            operator delete(v217);
                          v218 = 0;
                          *((int8x8_t *)&v377 + 1) = prime;
                          do
                            *(_QWORD *)(v377 + 8 * v218++) = 0;
                          while (*(_QWORD *)&prime != v218);
                          v219 = (_QWORD **)v378;
                          if ((_QWORD)v378)
                          {
                            v220 = *(_QWORD *)(v378 + 8);
                            v221 = (uint8x8_t)vcnt_s8(prime);
                            v221.i16[0] = vaddlv_u8(v221);
                            if (v221.u32[0] > 1uLL)
                            {
                              if (v220 >= *(_QWORD *)&prime)
                                v220 %= *(_QWORD *)&prime;
                            }
                            else
                            {
                              v220 &= *(_QWORD *)&prime - 1;
                            }
                            *(_QWORD *)(v377 + 8 * v220) = &v378;
                            for (n = *v219; n; v220 = v226)
                            {
                              v226 = n[1];
                              if (v221.u32[0] > 1uLL)
                              {
                                if (v226 >= *(_QWORD *)&prime)
                                  v226 %= *(_QWORD *)&prime;
                              }
                              else
                              {
                                v226 &= *(_QWORD *)&prime - 1;
                              }
                              if (v226 != v220)
                              {
                                if (!*(_QWORD *)(v377 + 8 * v226))
                                {
                                  *(_QWORD *)(v377 + 8 * v226) = v219;
                                  goto LABEL_434;
                                }
                                *v219 = (_QWORD *)*n;
                                *n = **(_QWORD **)(v377 + 8 * v226);
                                **(_QWORD **)(v377 + 8 * v226) = n;
                                n = v219;
                              }
                              v226 = v220;
LABEL_434:
                              v219 = (_QWORD **)n;
                              n = (_QWORD *)*n;
                            }
                          }
                          v199 = (unint64_t)prime;
                        }
                        if ((v199 & (v199 - 1)) != 0)
                        {
                          if (v198 >= v199)
                            v182 = v198 % v199;
                          else
                            v182 = v198;
                        }
                        else
                        {
                          v182 = (v199 - 1) & v198;
                        }
                      }
                      v227 = v377;
                      v228 = *(_QWORD **)(v377 + 8 * v182);
                      if (v228)
                      {
                        *v210 = *v228;
                        goto LABEL_451;
                      }
                      *v210 = v378;
                      *(_QWORD *)&v378 = v210;
                      *(_QWORD *)(v227 + 8 * v182) = &v378;
                      if (*v210)
                      {
                        v229 = *(_QWORD *)(*v210 + 8);
                        if ((v199 & (v199 - 1)) != 0)
                        {
                          if (v229 >= v199)
                            v229 %= v199;
                        }
                        else
                        {
                          v229 &= v199 - 1;
                        }
                        v228 = (_QWORD *)(v377 + 8 * v229);
LABEL_451:
                        *v228 = v210;
                      }
                      v205 = (_OWORD *)*((_QWORD *)&v384 + 1);
                      ++*((_QWORD *)&v378 + 1);
LABEL_453:
                      v182 = (uint64_t)&v382;
                      v185 = v361;
                      if ((unint64_t)v205 < v385)
                      {
                        *v205 = *(_OWORD *)&v410.__begin_;
                        v230 = (uint64_t)(v205 + 1);
LABEL_469:
                        *((_QWORD *)&v384 + 1) = v230;
                        goto LABEL_470;
                      }
                      v231 = (uint64_t)((uint64_t)v205 - v384) >> 4;
                      v232 = v231 + 1;
                      if ((unint64_t)(v231 + 1) >> 60)
                        goto LABEL_715;
                      v233 = v385 - v384;
                      if ((uint64_t)(v385 - v384) >> 3 > v232)
                        v232 = v233 >> 3;
                      if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF0)
                        v234 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v234 = v232;
                      if (v234)
                        v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v234);
                      else
                        v235 = 0;
                      v236 = (_OWORD *)(v234 + 16 * v231);
                      *v236 = *(_OWORD *)&v410.__begin_;
                      v237 = (char *)*((_QWORD *)&v384 + 1);
                      v238 = (char *)v384;
                      v239 = v236;
                      if (*((_QWORD *)&v384 + 1) != (_QWORD)v384)
                      {
                        do
                        {
                          *--v239 = *((_OWORD *)v237 - 1);
                          v237 -= 16;
                        }
                        while (v237 != v238);
                        goto LABEL_466;
                      }
LABEL_467:
                      v230 = (uint64_t)(v236 + 1);
                      *(_QWORD *)&v384 = v239;
                      *((_QWORD *)&v384 + 1) = v236 + 1;
                      v385 = v234 + 16 * v235;
                      if (v237)
                        operator delete(v237);
                      goto LABEL_469;
                    }
                    if ((std::vector<int>::pointer)v203[2] == v410.__begin_
                      && *((_DWORD *)v203 + 6) == HIDWORD(v410.__end_))
                    {
                      break;
                    }
LABEL_378:
                    v203 = (uint64_t *)*v203;
                    if (!v203)
                      goto LABEL_379;
                  }
                  if (*((_DWORD *)v203 + 8) != v387)
                  {
                    *((_DWORD *)v203 + 8) = v387;
                    v247 = v384;
                    v248 = (uint64_t)(*((_QWORD *)&v384 + 1) - v384) >> 4;
                    v203[5] = v248;
                    v182 = (uint64_t)&v382;
                    v185 = v361;
                    if (*((_QWORD *)&v247 + 1) < v385)
                    {
                      **((_OWORD **)&v247 + 1) = *(_OWORD *)&v410.__begin_;
                      v230 = *((_QWORD *)&v247 + 1) + 16;
                      goto LABEL_469;
                    }
                    v249 = v248 + 1;
                    if ((unint64_t)(v248 + 1) >> 60)
LABEL_715:
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v250 = v385 - v247;
                    if ((unint64_t)((uint64_t)(v385 - v247) >> 3) > *((_QWORD *)&v247 + 1))
                      v249 = v250 >> 3;
                    if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0)
                      v234 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v234 = v249;
                    if (v234)
                      v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v234);
                    else
                      v235 = 0;
                    v236 = (_OWORD *)(v234 + 16 * v248);
                    *v236 = *(_OWORD *)&v410.__begin_;
                    v237 = (char *)*((_QWORD *)&v384 + 1);
                    v251 = (char *)v384;
                    v239 = v236;
                    if (*((_QWORD *)&v384 + 1) != (_QWORD)v384)
                    {
                      do
                      {
                        *--v239 = *((_OWORD *)v237 - 1);
                        v237 -= 16;
                      }
                      while (v237 != v251);
LABEL_466:
                      v237 = (char *)v384;
                      goto LABEL_467;
                    }
                    goto LABEL_467;
                  }
                  v241 = v384 + 16 * v203[5];
                  v242 = *(float *)(v241 + 8);
                  if (v242 >= v192)
                    v243 = v192;
                  else
                    v243 = *(float *)(v241 + 8);
                  v245 = v192 == -INFINITY || v242 == -INFINITY;
                  v246 = NAN;
                  if (!v245)
                    v246 = v243;
                  *(float *)(v241 + 8) = v246;
                  v182 = (uint64_t)&v382;
                  v185 = v361;
LABEL_470:
                  if (__p)
                    (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
                  else
                    ++*((_QWORD *)&v405 + 1);
                  continue;
                }
              }
LABEL_535:
              while (1)
              {
                v262 = (_QWORD *)*((_QWORD *)&v383 + 1);
                if (!*((_QWORD *)&v383 + 1))
                  break;
                *(_QWORD *)(v382
                          + (((unint64_t)*(int *)(*((_QWORD *)&v383 + 1) + 8) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *(_DWORD *)(*((_QWORD *)&v383 + 1) + 8));
                *((_QWORD *)&v383 + 1) = *v262;
                operator delete(v262);
              }
              ++v387;
            }
LABEL_537:
            (*(void (**)(void *, uint64_t, float))(*(_QWORD *)v358 + 176))(v358, v360, v386);
            (*(void (**)(void *, uint64_t))(*(_QWORD *)v358 + 232))(v358, v360);
            v5 = v358;
            (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v358 + 248))(v358, v360, (uint64_t)(*((_QWORD *)&v384 + 1) - v384) >> 4);
            v55 = v384;
            if ((_QWORD)v384 != *((_QWORD *)&v384 + 1))
            {
              v55 = *((_QWORD *)&v384 + 1);
              do
              {
                (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v358 + 200))(v358, v360, v55 - 16);
                v55 = *((_QWORD *)&v384 + 1) - 16;
                *((_QWORD *)&v384 + 1) = v55;
              }
              while ((_QWORD)v384 != v55);
            }
            goto LABEL_540;
          }
          goto LABEL_168;
        }
      }
LABEL_314:
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++*((_QWORD *)&v405 + 1);
    }
    v123 = *((_QWORD *)&v405 + 1);
    if (*((_QWORD *)&v405 + 1) >= v404)
    {
LABEL_317:
      v178 = 1;
      goto LABEL_318;
    }
    goto LABEL_213;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0x800000000, 0) & 0x800000000) == 0)
  {
    v400 = 0;
    v403 = 0;
    __p = 0;
    v404 = 0;
    p_p = &__p;
    v366 = 0;
    v367 = 0;
    v368 = &v400;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v5, (uint64_t *)&p_p);
    std::vector<int>::vector(&v410, ((char *)v403 - (_BYTE *)__p) >> 2, &fst::kNoStateId);
    std::vector<int>::vector(&v409, ((char *)v403 - (_BYTE *)__p) >> 2, &fst::kNoStateId);
    v16 = (int *)__p;
    v17 = v410.__begin_;
    if (v403 != __p)
    {
      v18 = 0;
      v19 = ((char *)v403 - (_BYTE *)__p) >> 2;
      v20 = v409.__begin_;
      if (v19 <= 1)
        v19 = 1;
      do
      {
        v21 = v16[v18];
        v22 = v17[v21];
        if (v22 != -1)
        {
          v20[v18] = v22;
          v21 = v16[v18];
        }
        v17[v21] = v18++;
      }
      while (v19 != v18);
    }
    v23 = v410.__end_;
    if (v410.__end_ != v17)
    {
      v24 = 0;
      do
      {
        v25 = v17[v24];
        if (v25 != -1)
        {
          v26 = v391.__end_;
          do
          {
            if (v26 >= v391.__end_cap_.__value_)
            {
              v28 = v391.__begin_;
              v29 = v26 - v391.__begin_;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v31 = (char *)v391.__end_cap_.__value_ - (char *)v391.__begin_;
              if (((char *)v391.__end_cap_.__value_ - (char *)v391.__begin_) >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v391.__end_cap_, v32);
                v28 = v391.__begin_;
                v26 = v391.__end_;
              }
              else
              {
                v33 = 0;
              }
              v34 = (int *)&v33[4 * v29];
              *v34 = v25;
              v27 = v34 + 1;
              while (v26 != v28)
              {
                v35 = *--v26;
                *--v34 = v35;
              }
              v391.__begin_ = v34;
              v391.__end_ = v27;
              v391.__end_cap_.__value_ = (int *)&v33[4 * v32];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *v26 = v25;
              v27 = v26 + 1;
            }
            v391.__end_ = v27;
            v25 = v409.__begin_[v25];
            v26 = v27;
          }
          while (v25 != -1);
          v17 = v410.__begin_;
          v23 = v410.__end_;
        }
        ++v24;
      }
      while (v24 < v23 - v17);
    }
    if (v409.__begin_)
    {
      v409.__end_ = v409.__begin_;
      operator delete(v409.__begin_);
      v17 = v410.__begin_;
    }
    if (v17)
    {
      v410.__end_ = v17;
      operator delete(v17);
    }
    if (__p)
    {
      v403 = (std::vector<int> *)__p;
      operator delete(__p);
    }
    goto LABEL_103;
  }
  p_p = 0;
  v366 = 0;
  v367 = 0;
  LOBYTE(v410.__begin_) = 0;
  __p = &p_p;
  v403 = &v410;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)v5, (uint64_t)&__p);
  begin_low = LOBYTE(v410.__begin_);
  if (!LOBYTE(v410.__begin_))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v388, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v388, "ERROR");
    v52 = fst::LogMessage::LogMessage((fst *)&v390, (uint64_t)v388);
    v53 = (_QWORD *)fst::cerr(v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RmEpsilon: inconsistent acyclic property bit", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v390);
    if (v389 < 0)
      operator delete(v388[0]);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, 4, 4);
    v48 = (char *)p_p;
LABEL_100:
    if (v48)
      goto LABEL_101;
    goto LABEL_102;
  }
  std::vector<int>::resize(&v391, (v366 - (_BYTE *)p_p) >> 2);
  v48 = (char *)p_p;
  if (v366 == p_p)
  {
    v48 = v366;
    goto LABEL_100;
  }
  v49 = 0;
  v50 = (v366 - (_BYTE *)p_p) >> 2;
  v51 = v391.__begin_;
  if (v50 <= 1)
    v50 = 1;
  do
  {
    v51[*(int *)&v48[4 * v49]] = v49;
    ++v49;
  }
  while (v50 != v49);
LABEL_101:
  v366 = v48;
  operator delete(v48);
LABEL_102:
  if (begin_low)
    goto LABEL_103;
LABEL_583:
  if (v391.__begin_)
  {
    v391.__end_ = v391.__begin_;
    operator delete(v391.__begin_);
  }
  if (v392)
    operator delete(v392);
}

void sub_1DEA3FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  void *a68;
  uint64_t v68;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  v70 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v71;
    operator delete(v71);
  }
  if (STACK[0x248])
    operator delete((void *)STACK[0x248]);
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&STACK[0x260]);
  v72 = *(void **)(v68 - 184);
  if (v72)
  {
    *(_QWORD *)(v68 - 176) = v72;
    operator delete(v72);
  }
  v73 = *(void **)(v68 - 160);
  if (v73)
  {
    *(_QWORD *)(v68 - 152) = v73;
    operator delete(v73);
  }
  fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(&a24);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
    operator delete(a68);
  _Unwind_Resume(a1);
}

_QWORD *fst::AutoQueue<int>::~AutoQueue(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *a1 = &off_1EA925798;
  v3 = a1[3];
  v2 = a1[4];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = a1[3];
        v2 = a1[4];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[2];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void fst::AutoQueue<int>::~AutoQueue(_QWORD *a1)
{
  fst::AutoQueue<int>::~AutoQueue(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::AutoQueue<int>::Head_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Enqueue_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Dequeue_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Update_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Empty_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t fst::AutoQueue<int>::Clear_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16));
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  uint64_t v34;
  std::vector<char>::pointer begin;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *(_QWORD *)(a2 + 16) = v4;
  **(_BYTE **)(a2 + 8) = 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v5 == -1)
  {
    fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit((char ***)a2);
  }
  else
  {
    v6 = v5;
    memset(&v56, 0, sizeof(v56));
    v55 = 0u;
    memset(v54, 0, sizeof(v54));
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(&v51, 64);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
    if (v46)
      v7 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
    else
      v7 = (v6 + 1);
    __x[0] = 0;
    if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
    {
      if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
        v56.__end_ = &v56.__begin_[(int)v7];
    }
    else
    {
      std::vector<char>::__append(&v56, (int)v7 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
    }
    v50 = 0;
    (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
    if ((int)v6 < (int)v7)
    {
      v45 = a1;
      v8 = v6;
      while (1)
      {
        v56.__begin_[(int)v8] = 1;
        v9 = (uint64_t)v53;
        if (v53)
        {
          v53 = (_QWORD *)v53[6];
        }
        else
        {
          v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v52, 1);
          *(_QWORD *)(v9 + 48) = 0;
        }
        *(_DWORD *)v9 = v8;
        *(_QWORD *)(v9 + 40) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
        *(_QWORD *)v47 = v9;
        std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v54, v47);
        v10 = *((_QWORD *)&v55 + 1);
        if (*((_QWORD *)&v55 + 1))
          break;
        v11 = 1;
LABEL_66:
        if ((_DWORD)v8 == (_DWORD)v6)
          v8 = 0;
        else
          v8 = (v8 + 1);
        if ((int)v8 < (int)v7)
        {
          v8 = (int)v8;
          while (v56.__begin_[v8])
          {
            if ((int)v7 == ++v8)
            {
              v8 = v7;
              break;
            }
          }
        }
        if (!v46 && (_DWORD)v8 == (_DWORD)v7)
        {
          while (1)
          {
            if (*(_QWORD *)__x)
            {
              if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
                goto LABEL_106;
              v31 = *(_QWORD *)__x ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) : v50;
            }
            else
            {
              v31 = v50;
              if (v50 >= v49)
                goto LABEL_106;
            }
            if (v31 == (_DWORD)v7)
              break;
            if (*(_QWORD *)__x)
              (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
            else
              ++v50;
          }
          end = v56.__end_;
          if (v56.__end_ >= v56.__end_cap_.__value_)
          {
            v34 = v6;
            begin = v56.__begin_;
            v36 = v56.__end_ - v56.__begin_;
            v37 = v56.__end_ - v56.__begin_ + 1;
            if (v37 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v38 = v56.__end_cap_.__value_ - v56.__begin_;
            if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v37)
              v37 = 2 * v38;
            if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
              v39 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
              v40 = (char *)operator new(v39);
            else
              v40 = 0;
            v41 = &v40[v36];
            v42 = &v40[v36];
            *v42 = 0;
            v33 = v42 + 1;
            if (end != begin)
            {
              v43 = &end[~(unint64_t)begin];
              do
              {
                v44 = *--end;
                (v43--)[(_QWORD)v40] = v44;
              }
              while (end != begin);
              end = v56.__begin_;
              v41 = v40;
            }
            v56.__begin_ = v41;
            v56.__end_ = v33;
            v56.__end_cap_.__value_ = &v40[v39];
            v6 = v34;
            if (end)
              operator delete(end);
            a1 = v45;
          }
          else
          {
            *v56.__end_ = 0;
            v33 = end + 1;
          }
          v56.__end_ = v33;
          v7 = (v7 + 1);
        }
LABEL_106:
        if ((v11 & 1) == 0 || (int)v8 >= (int)v7)
          goto LABEL_108;
      }
      v11 = 1;
      while (1)
      {
        v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                     + (((unint64_t)(v10 + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v10 + v55 - 1) & 0x1FF));
        v13 = *(int *)v12;
        v14 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v13)
        {
          v7 = v13 + 1;
          v47[0] = 0;
          if (v13 + 1 <= v14)
          {
            if (v13 + 1 < v14)
              v56.__end_ = &v56.__begin_[v7];
          }
          else
          {
            std::vector<char>::__append(&v56, v13 + 1 - v14, v47);
          }
        }
        if ((v11 & 1) == 0)
        {
LABEL_28:
          v56.__begin_[v13] = 2;
          v19 = v12[1];
          if (v19)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          else
          {
            v20 = (_DWORD *)v12[4];
            if (v20)
              --*v20;
          }
          v12[6] = v53;
          v53 = v12;
          --*((_QWORD *)&v55 + 1);
          std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v54);
          if (!*((_QWORD *)&v55 + 1))
          {
            fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(*(_QWORD *)(a2 + 16), v13);
            goto LABEL_63;
          }
          v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
          fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(*(_QWORD *)(a2 + 16), v13);
          v23 = *(_QWORD *)(v21 + 8);
          if (!v23)
          {
            ++*(_QWORD *)(v21 + 40);
            goto LABEL_63;
          }
          goto LABEL_36;
        }
        v15 = v12[1];
        if (v15)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
            goto LABEL_28;
          v16 = v12[1];
          if (v16)
          {
            v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            goto LABEL_41;
          }
          v18 = v12[5];
        }
        else
        {
          v18 = v12[5];
          if (v18 >= v12[3])
            goto LABEL_28;
        }
        v17 = v12[2] + 16 * v18;
LABEL_41:
        v24 = *(int *)(v17 + 12);
        v25 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v24)
        {
          v7 = v24 + 1;
          v47[0] = 0;
          if (v24 + 1 <= v25)
          {
            if (v24 + 1 < v25)
              v56.__end_ = &v56.__begin_[v7];
          }
          else
          {
            std::vector<char>::__append(&v56, v24 + 1 - v25, v47);
          }
        }
        if (*(_QWORD *)v17)
        {
          v23 = v12[1];
          if (!v23)
            goto LABEL_59;
LABEL_36:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
          goto LABEL_63;
        }
        v26 = *(int *)(v17 + 12);
        v27 = v56.__begin_[v26];
        if (v27 != 1)
        {
          if (v27 == 2)
          {
            v28 = v12[1];
            if (v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
            else
              ++v12[5];
          }
          else
          {
            v56.__begin_[v26] = 1;
            v30 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v30 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v30 + 48) = 0;
            }
            *(_DWORD *)v30 = *(_DWORD *)(v17 + 12);
            *(_QWORD *)(v30 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v30;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v54, v47);
          }
          v11 = 1;
          goto LABEL_63;
        }
        **(_BYTE **)(a2 + 8) = 0;
        v29 = v12[1];
        if (!v29)
        {
          v11 = 0;
LABEL_59:
          ++v12[5];
          goto LABEL_63;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        v11 = 0;
LABEL_63:
        v10 = *((_QWORD *)&v55 + 1);
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_66;
      }
    }
LABEL_108:
    fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit((char ***)a2);
    if (*(_QWORD *)__x)
      (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
    v51 = &unk_1EA924000;
    fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(v52);
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)v54);
    if (v56.__begin_)
    {
      v56.__end_ = v56.__begin_;
      operator delete(v56.__begin_);
    }
  }
}

void sub_1DEA409C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena((uint64_t *)va1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((void **)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char inited;
  char v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  std::vector<char>::pointer end;
  char *v29;
  std::vector<char>::pointer begin;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  int v41;
  std::vector<char>::value_type v42[8];
  std::vector<char>::value_type __x[8];
  int v44;
  int v45;
  void *v46;
  _QWORD v47[6];
  _QWORD *v48;
  _OWORD v49[2];
  __int128 v50;
  std::vector<char> v51;

  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v41 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v51, 0, sizeof(v51));
  v50 = 0u;
  memset(v49, 0, sizeof(v49));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(&v46, 64);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v40)
    v4 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v4 = (v41 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v4 <= (std::vector<char>::pointer)(v51.__end_ - v51.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v4 < (std::vector<char>::pointer)(v51.__end_ - v51.__begin_))
      v51.__end_ = &v51.__begin_[(int)v4];
  }
  else
  {
    std::vector<char>::__append(&v51, (int)v4 - (unint64_t)(v51.__end_ - v51.__begin_), __x);
  }
  v45 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v41 >= (int)v4)
    goto LABEL_101;
  v5 = v41;
  do
  {
    v51.__begin_[(int)v5] = 1;
    v6 = (uint64_t)v48;
    if (v48)
    {
      v48 = (_QWORD *)v48[6];
    }
    else
    {
      v6 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v47, 1);
      *(_QWORD *)(v6 + 48) = 0;
    }
    *(_DWORD *)v6 = v5;
    *(_QWORD *)(v6 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v5, v6 + 8);
    *(_QWORD *)v42 = v6;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v49, v42);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v5, v5);
LABEL_16:
    v8 = inited;
    while (*((_QWORD *)&v50 + 1))
    {
      v9 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v49[0] + 1)
                                  + (((unint64_t)(*((_QWORD *)&v50 + 1) + v50 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((_QWORD *)&v50 + 1) + v50 - 1) & 0x1FF));
      v10 = *(int *)v9;
      v11 = v51.__end_ - v51.__begin_;
      if (v51.__end_ - v51.__begin_ <= v10)
      {
        v4 = v10 + 1;
        v42[0] = 0;
        if (v10 + 1 <= v11)
        {
          if (v10 + 1 < v11)
            v51.__end_ = &v51.__begin_[v4];
        }
        else
        {
          std::vector<char>::__append(&v51, v10 + 1 - v11, v42);
        }
      }
      if ((v8 & 1) == 0)
        goto LABEL_29;
      v12 = v9[1];
      if (v12)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
          goto LABEL_29;
        v13 = v9[1];
        if (!v13)
        {
          v15 = v9[5];
LABEL_40:
          v14 = v9[2] + 16 * v15;
          goto LABEL_41;
        }
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
LABEL_41:
        v22 = *(int *)(v14 + 12);
        v23 = v51.__end_ - v51.__begin_;
        if (v51.__end_ - v51.__begin_ <= v22)
        {
          v4 = v22 + 1;
          v42[0] = 0;
          if (v22 + 1 <= v23)
          {
            if (v22 + 1 < v23)
              v51.__end_ = &v51.__begin_[v4];
          }
          else
          {
            std::vector<char>::__append(&v51, v22 + 1 - v23, v42);
          }
        }
        if (*(_QWORD *)v14)
        {
          v21 = v9[1];
          if (v21)
            goto LABEL_54;
LABEL_55:
          ++v9[5];
        }
        else
        {
          v24 = *(int *)(v14 + 12);
          v25 = v51.__begin_[v24];
          if (v25 == 1)
          {
            v8 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v10, v14);
            v21 = v9[1];
            if (v21)
              goto LABEL_54;
            goto LABEL_55;
          }
          if (v25 != 2)
          {
            v51.__begin_[v24] = 1;
            v26 = (uint64_t)v48;
            if (v48)
            {
              v48 = (_QWORD *)v48[6];
            }
            else
            {
              v26 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v47, 1);
              *(_QWORD *)(v26 + 48) = 0;
            }
            *(_DWORD *)v26 = *(_DWORD *)(v14 + 12);
            *(_QWORD *)(v26 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v42 = v26;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v49, v42);
            inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v14 + 12), v5);
            goto LABEL_16;
          }
          v8 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v10, v14);
          v21 = v9[1];
          if (!v21)
            goto LABEL_55;
LABEL_54:
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
        }
      }
      else
      {
        v15 = v9[5];
        if (v15 < v9[3])
          goto LABEL_40;
LABEL_29:
        v51.__begin_[v10] = 2;
        v16 = v9[1];
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        else
        {
          v17 = (_DWORD *)v9[4];
          if (v17)
            --*v17;
        }
        v9[6] = v48;
        v48 = v9;
        --*((_QWORD *)&v50 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v49);
        if (*((_QWORD *)&v50 + 1))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v49[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v50 + 1) + v50 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v50 + 1) + v50 - 1) & 0x1FF));
          v19 = *(_DWORD *)v18;
          v20 = *(_QWORD *)(v18 + 8);
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v10, v19);
          v21 = *(_QWORD *)(v18 + 8);
          if (v21)
            goto LABEL_54;
          ++*(_QWORD *)(v18 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v10, -1);
        }
      }
    }
    if ((_DWORD)v5 == v41)
      v5 = 0;
    else
      v5 = (v5 + 1);
    if ((int)v5 < (int)v4)
    {
      v5 = (int)v5;
      while (v51.__begin_[v5])
      {
        if ((int)v4 == ++v5)
        {
          v5 = v4;
          break;
        }
      }
    }
    if (!v40 && (_DWORD)v5 == (_DWORD)v4)
    {
      while (1)
      {
        if (*(_QWORD *)__x)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
            goto LABEL_99;
          v27 = *(_QWORD *)__x ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) : v45;
        }
        else
        {
          v27 = v45;
          if (v45 >= v44)
            goto LABEL_99;
        }
        if (v27 == (_DWORD)v4)
          break;
        if (*(_QWORD *)__x)
          (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
        else
          ++v45;
      }
      end = v51.__end_;
      if (v51.__end_ >= v51.__end_cap_.__value_)
      {
        begin = v51.__begin_;
        v31 = v51.__end_ - v51.__begin_;
        v32 = v51.__end_ - v51.__begin_ + 1;
        if (v32 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v33 = v51.__end_cap_.__value_ - v51.__begin_;
        if (2 * (v51.__end_cap_.__value_ - v51.__begin_) > (unint64_t)v32)
          v32 = 2 * v33;
        if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
          v35 = (char *)operator new(v34);
        else
          v35 = 0;
        v36 = &v35[v31];
        v37 = &v35[v31];
        *v37 = 0;
        v29 = v37 + 1;
        if (end != begin)
        {
          v38 = &end[~(unint64_t)begin];
          do
          {
            v39 = *--end;
            (v38--)[(_QWORD)v35] = v39;
          }
          while (end != begin);
          end = v51.__begin_;
          v36 = v35;
        }
        v51.__begin_ = v36;
        v51.__end_ = v29;
        v51.__end_cap_.__value_ = &v35[v34];
        if (end)
          operator delete(end);
      }
      else
      {
        *v51.__end_ = 0;
        v29 = end + 1;
      }
      v51.__end_ = v29;
      v4 = (v4 + 1);
    }
LABEL_99:
    ;
  }
  while ((v8 & 1) != 0 && (int)v5 < (int)v4);
LABEL_101:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v46 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(v47);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)v49);
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
}

void sub_1DEA41140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena((uint64_t *)va1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((void **)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1DEA413B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>>::~RmEpsilonState(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[32];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  a1[32] = 0;
  v5 = (void *)a1[29];
  if (v5)
    operator delete(v5);
  std::deque<int>::~deque[abi:ne180100]((uint64_t)(a1 + 23));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 17));
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(a1 + 2);
  return a1;
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, char **a2, float a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t value_low;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  float v27;
  int v28;
  float v29;
  uint64_t v30;
  fst *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  std::vector<int> *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  fst *v41;
  _QWORD *v42;
  uint64_t v43;
  fst *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  std::vector<char>::pointer begin;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  std::vector<char>::pointer end;
  char *v73;
  std::vector<char>::pointer v74;
  int64_t v75;
  int64_t v76;
  unint64_t v77;
  size_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char v83;
  fst *v84;
  _QWORD *v85;
  uint64_t v86;
  fst *v87;
  _QWORD *v88;
  fst *v89;
  _QWORD *v90;
  fst *v91;
  _QWORD *v92;
  uint64_t v93;
  int v94;
  fst *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  fst *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  fst *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  fst *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  void **v113;
  char *v114;
  _DWORD *v115;
  unint64_t i;
  unint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  char *v134;
  char *v135;
  int v136;
  char *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  void **v149;
  char *v150;
  void **v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  _DWORD *v161;
  char *v162;
  char *v163;
  int v164;
  uint64_t v165;
  _DWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  char *v172;
  char *v173;
  int v174;
  float v175;
  uint64_t v176;
  uint64_t v177;
  void **v178;
  void **v179;
  char *v180;
  void *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  char *v191;
  char *v192;
  int v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  char *v201;
  char *v202;
  int v203;
  char *v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  int v214;
  float *v215;
  uint64_t v216;
  float v217;
  float v218;
  BOOL v219;
  float v220;
  float v221;
  float v222;
  float v226;
  float v227;
  BOOL v229;
  float v230;
  uint64_t (**v231)();
  uint64_t (*v232)();
  char v233;
  uint64_t v234;
  char *v235;
  _DWORD *v236;
  unint64_t v237;
  char *v238;
  unint64_t v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  int v249;
  uint64_t result;
  int v251;
  char **v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t (**v256)();
  int v257;
  char v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  void *v263;
  _BYTE *v264;
  uint64_t v265;
  void (**v266)();
  uint64_t v267;
  char **v268;
  int *v269;
  _QWORD *v270;
  std::vector<char>::value_type v271[8];
  std::vector<char>::value_type __x[8];
  void *v273;
  int v274;
  __int128 __p;
  __int128 v276;
  __int128 v277;
  std::vector<char> v278;
  int v279;
  void (***v280)();
  void **v281;
  uint64_t (***v282)();
  char ***v283;
  __int16 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  _QWORD v288[6];

  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(&v266);
  fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, (uint64_t *)&v266);
  v263 = 0;
  v264 = 0;
  v265 = 0;
  v257 = 7;
  v258 = 0;
  v256 = &off_1EA925798;
  v261 = 0u;
  v262 = 0u;
  v260 = 0u;
  v6 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))v266[8])(&v266, 0x4E00000000, 0);
  v252 = a2;
  if ((v6 & 0x4000000000) != 0
    || ((unsigned int (*)(void (***)()))v266[3])(&v266) == -1)
  {
    v30 = operator new();
    *(_DWORD *)(v30 + 8) = 5;
    *(_BYTE *)(v30 + 12) = 0;
    *(_QWORD *)v30 = &off_1EA924DF8;
    *(_QWORD *)(v30 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 40) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    v259 = v30;
    if (FLAGS_v < 2)
      goto LABEL_213;
    std::string::basic_string[abi:ne180100]<0>(&v280, "INFO");
    v31 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v280);
    v32 = (_QWORD *)fst::cerr(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_59;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 4;
    *(_BYTE *)(v34 + 12) = 0;
    *(_QWORD *)v34 = &off_1EA924900;
    *(_QWORD *)(v34 + 16) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v34 + 24) = 0u;
    v35 = (std::vector<int> *)(v34 + 48);
    *(_OWORD *)(v34 + 40) = 0u;
    *(_OWORD *)(v34 + 56) = 0u;
    LOBYTE(v279) = 0;
    v268 = (char **)(v34 + 24);
    v269 = &v279;
    v36 = (_QWORD *)operator new();
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    v270 = v36;
    LOBYTE(v279) = 1;
    v37 = ((uint64_t (*)(void (***)()))v266[3])(&v266);
    if ((_DWORD)v37 == -1)
    {
      fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit(&v268);
    }
    else
    {
      memset(&v278, 0, sizeof(v278));
      v276 = 0u;
      v277 = 0u;
      __p = 0u;
      v253 = v34;
      fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool((uint64_t)&v280);
      v38 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))v266[8])(&v266, 1, 0);
      if (v38)
        v39 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v266);
      else
        v39 = (v37 + 1);
      __x[0] = 0;
      if ((std::vector<char>::pointer)(int)v39 <= (std::vector<char>::pointer)(v278.__end_ - v278.__begin_))
      {
        if ((std::vector<char>::pointer)(int)v39 < (std::vector<char>::pointer)(v278.__end_ - v278.__begin_))
          v278.__end_ = &v278.__begin_[(int)v39];
      }
      else
      {
        std::vector<char>::__append(&v278, (int)v39 - (unint64_t)(v278.__end_ - v278.__begin_), __x);
      }
      v274 = 0;
      ((void (*)(void (***)(), std::vector<char>::value_type *))v266[16])(&v266, __x);
      if ((int)v37 < (int)v39)
      {
        v46 = v37;
        while (1)
        {
          v278.__begin_[(int)v46] = 1;
          v47 = v286;
          if ((_QWORD)v286)
          {
            *(_QWORD *)&v286 = *(_QWORD *)(v286 + 48);
          }
          else
          {
            v47 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(&v281);
            *(_QWORD *)(v47 + 48) = 0;
          }
          *(_DWORD *)v47 = v46;
          *(_QWORD *)(v47 + 40) = 0;
          ((void (*)(void (***)(), uint64_t, uint64_t))v266[17])(&v266, v46, v47 + 8);
          *(_QWORD *)v271 = v47;
          std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(&__p, v271);
          v48 = *((_QWORD *)&v277 + 1);
          if (*((_QWORD *)&v277 + 1))
          {
            v49 = 1;
            while (1)
            {
              v50 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                           + (((unint64_t)(v48 + v277 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * ((v48 + v277 - 1) & 0x1FF));
              v51 = *(int *)v50;
              v52 = v278.__end_ - v278.__begin_;
              if (v278.__end_ - v278.__begin_ <= v51)
              {
                v39 = v51 + 1;
                v271[0] = 0;
                if (v51 + 1 <= v52)
                {
                  if (v51 + 1 < v52)
                    v278.__end_ = &v278.__begin_[v39];
                }
                else
                {
                  std::vector<char>::__append(&v278, v51 + 1 - v52, v271);
                }
              }
              if ((v49 & 1) == 0)
              {
LABEL_95:
                v278.__begin_[v51] = 2;
                v57 = v50[1];
                if (v57)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
                }
                else
                {
                  v58 = (_DWORD *)v50[4];
                  if (v58)
                    --*v58;
                }
                v50[6] = v286;
                *(_QWORD *)&v286 = v50;
                --*((_QWORD *)&v277 + 1);
                std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](&__p);
                if (*((_QWORD *)&v277 + 1))
                {
                  v59 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                              + (((unint64_t)(*((_QWORD *)&v277 + 1) + v277 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((*((_QWORD *)&v277 + 1) + v277 - 1) & 0x1FF));
                  v60 = *(_QWORD *)(v59 + 8);
                  if (v60)
                    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
                  fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState((uint64_t)v270, v51);
                  v61 = *(_QWORD *)(v59 + 8);
                  if (v61)
                    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
                  else
                    ++*(_QWORD *)(v59 + 40);
                }
                else
                {
                  fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState((uint64_t)v270, v51);
                }
                goto LABEL_126;
              }
              v53 = v50[1];
              if (!v53)
                break;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53))
                goto LABEL_95;
              v54 = v50[1];
              if (!v54)
              {
                v56 = v50[5];
LABEL_107:
                v55 = v50[2] + 16 * v56;
                goto LABEL_108;
              }
              v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
LABEL_108:
              v62 = *(int *)(v55 + 12);
              begin = v278.__begin_;
              v64 = v278.__end_ - v278.__begin_;
              if (v278.__end_ - v278.__begin_ <= v62)
              {
                v39 = (v62 + 1);
                v271[0] = 0;
                if ((int)v39 <= v64)
                {
                  if ((int)v39 < v64)
                    v278.__end_ = &v278.__begin_[(int)v39];
                }
                else
                {
                  std::vector<char>::__append(&v278, (int)v39 - v64, v271);
                  v62 = *(int *)(v55 + 12);
                  begin = v278.__begin_;
                }
              }
              v65 = begin[v62];
              if (v65 == 1)
              {
                *(_BYTE *)v269 = 0;
                v67 = v50[1];
                if (v67)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
                  v49 = 0;
                }
                else
                {
                  v49 = 0;
                  ++v50[5];
                }
              }
              else
              {
                if (v65 == 2)
                {
                  v66 = v50[1];
                  if (v66)
                    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
                  else
                    ++v50[5];
                }
                else
                {
                  begin[v62] = 1;
                  v68 = v286;
                  if ((_QWORD)v286)
                  {
                    *(_QWORD *)&v286 = *(_QWORD *)(v286 + 48);
                  }
                  else
                  {
                    v68 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(&v281);
                    *(_QWORD *)(v68 + 48) = 0;
                  }
                  *(_DWORD *)v68 = *(_DWORD *)(v55 + 12);
                  *(_QWORD *)(v68 + 40) = 0;
                  ((void (*)(void (***)()))v266[17])(&v266);
                  *(_QWORD *)v271 = v68;
                  std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(&__p, v271);
                }
                v49 = 1;
              }
LABEL_126:
              v48 = *((_QWORD *)&v277 + 1);
              if (!*((_QWORD *)&v277 + 1))
                goto LABEL_129;
            }
            v56 = v50[5];
            if (v56 >= v50[3])
              goto LABEL_95;
            goto LABEL_107;
          }
          v49 = 1;
LABEL_129:
          v46 = (_DWORD)v46 == (_DWORD)v37 ? 0 : (v46 + 1);
          if ((int)v46 < (int)v39)
            break;
LABEL_137:
          if (!v38)
            goto LABEL_140;
LABEL_170:
          if ((v49 & 1) == 0 || (int)v46 >= (int)v39)
            goto LABEL_172;
        }
        v46 = (int)v46;
        while (v278.__begin_[v46])
        {
          if ((int)v39 == ++v46)
          {
            v46 = v39;
            goto LABEL_137;
          }
        }
        if (v38)
          goto LABEL_170;
LABEL_140:
        if ((_DWORD)v46 == (_DWORD)v39)
        {
          while (1)
          {
            if (*(_QWORD *)__x)
            {
              if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
                goto LABEL_170;
              v69 = *(_QWORD *)__x
                  ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x)
                  : v274;
            }
            else
            {
              v69 = v274;
              if (v274 >= (int)v273)
                goto LABEL_170;
            }
            if (v69 == (_DWORD)v39)
              break;
            if (*(_QWORD *)__x)
              (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
            else
              ++v274;
          }
          v70 = v37;
          v71 = v38;
          end = v278.__end_;
          if (v278.__end_ >= v278.__end_cap_.__value_)
          {
            v74 = v278.__begin_;
            v75 = v278.__end_ - v278.__begin_;
            v76 = v278.__end_ - v278.__begin_ + 1;
            if (v76 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v77 = v278.__end_cap_.__value_ - v278.__begin_;
            if (2 * (v278.__end_cap_.__value_ - v278.__begin_) > (unint64_t)v76)
              v76 = 2 * v77;
            if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
              v78 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
              v79 = (char *)operator new(v78);
            else
              v79 = 0;
            v80 = &v79[v75];
            v81 = &v79[v75];
            *v81 = 0;
            v73 = v81 + 1;
            if (end != v74)
            {
              v82 = &end[~(unint64_t)v74];
              do
              {
                v83 = *--end;
                (v82--)[(_QWORD)v79] = v83;
              }
              while (end != v74);
              end = v278.__begin_;
              v80 = v79;
            }
            v278.__begin_ = v80;
            v278.__end_ = v73;
            v278.__end_cap_.__value_ = &v79[v78];
            if (end)
              operator delete(end);
          }
          else
          {
            *v278.__end_ = 0;
            v73 = end + 1;
          }
          v278.__end_ = v73;
          v39 = (v39 + 1);
          v38 = v71;
          v37 = v70;
        }
        goto LABEL_170;
      }
LABEL_172:
      fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit(&v268);
      v34 = v253;
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
      v280 = (void (***)())&off_1EA923FB0;
      fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(&v281);
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v280);
      std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)&__p);
      if (v278.__begin_)
      {
        v278.__end_ = v278.__begin_;
        operator delete(v278.__begin_);
      }
    }
    if (!(_BYTE)v279)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&v278, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&v278, "ERROR");
      v84 = fst::LogMessage::LogMessage((fst *)v271, (uint64_t)&v278);
      v85 = (_QWORD *)fst::cerr(v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v271);
      if (SHIBYTE(v278.__end_cap_.__value_) < 0)
        operator delete(v278.__begin_);
      *(_BYTE *)(v34 + 12) = 1;
    }
    std::vector<int>::resize(v35, (uint64_t)(*(_QWORD *)(v34 + 32) - *(_QWORD *)(v34 + 24)) >> 2, &fst::kNoStateId);
    v259 = v34;
    if (FLAGS_v < 2)
      goto LABEL_213;
    std::string::basic_string[abi:ne180100]<0>(&v280, "INFO");
    v89 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v280);
    v90 = (_QWORD *)fst::cerr(v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_59;
  }
  if ((v6 & 0x200000000) == 0)
  {
    v268 = 0;
    v280 = (void (***)())&v261 + 1;
    v281 = 0;
    v282 = 0;
    v283 = &v268;
    fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)&v266, (uint64_t)&v280);
    v7 = (int *)*((_QWORD *)&v261 + 1);
    if (*((_QWORD *)&v261 + 1) != (_QWORD)v262)
    {
      v8 = *((_QWORD *)&v261 + 1) + 4;
      if (*((_QWORD *)&v261 + 1) + 4 != (_QWORD)v262)
      {
        v9 = **((_DWORD **)&v261 + 1);
        v10 = (int *)(*((_QWORD *)&v261 + 1) + 4);
        do
        {
          v12 = *v10++;
          v11 = v12;
          v13 = v9 < v12;
          if (v9 <= v12)
            v9 = v11;
          if (v13)
            v7 = (int *)v8;
          v8 = (uint64_t)v10;
        }
        while (v10 != (int *)v262);
      }
    }
    v14 = *v7;
    v15 = *v7 + 1;
    std::vector<fst::QueueType>::vector(__x, v15);
    v16 = operator new();
    v17 = (_QWORD *)operator new();
    v255 = v16;
    *v17 = &v263;
    if (v273 != *(void **)__x)
    {
      v18 = ((uint64_t)v273 - *(_QWORD *)__x) >> 2;
      if (v18 <= 1)
        v18 = 1;
      bzero(*(void **)__x, 4 * v18);
    }
    LODWORD(v278.__end_cap_.__value_) = 0;
    ((void (*)(void (***)(), std::vector<char> *))v266[16])(&v266, &v278);
    v19 = 1;
    v20 = 1;
    while (1)
    {
      if (v278.__begin_)
      {
        if ((*(unsigned int (**)(std::vector<char>::pointer))(*(_QWORD *)v278.__begin_ + 16))(v278.__begin_))
        {
          if (v278.__begin_)
            (*(void (**)(void))(*(_QWORD *)v278.__begin_ + 8))();
LABEL_69:
          if (v20)
          {
            v43 = operator new();
            *(_DWORD *)(v43 + 8) = 2;
            *(_BYTE *)(v43 + 12) = 0;
            *(_OWORD *)(v43 + 16) = 0u;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_QWORD *)v43 = &off_1EA925F10;
            v259 = v43;
            if (FLAGS_v >= 2)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
              v44 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
              v45 = (_QWORD *)fst::cerr(v44);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_182:
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v278);
              if (SBYTE7(v276) < 0)
                operator delete((void *)__p);
            }
            goto LABEL_210;
          }
          if (v19)
          {
            v86 = operator new();
            fst::TopOrderQueue<int>::TopOrderQueue(v86, (uint64_t)&v261 + 8);
            v259 = v86;
            if (FLAGS_v >= 2)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
              v87 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
              v88 = (_QWORD *)fst::cerr(v87);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"AutoQueue: using top-order discipline", 37);
              goto LABEL_182;
            }
LABEL_210:
            MEMORY[0x1DF0ED014](v17, 0x60C40B37CB4BBLL);
            MEMORY[0x1DF0ED014](v255, 0xC400A2AC0F1);
            v33 = *(void **)__x;
            if (*(_QWORD *)__x)
            {
              v273 = *(void **)__x;
LABEL_212:
              operator delete(v33);
            }
            goto LABEL_213;
          }
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
            v91 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
            v92 = (_QWORD *)fst::cerr(v91);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v278);
            if (SBYTE7(v276) < 0)
              operator delete((void *)__p);
          }
          std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((char **)&v260, v15);
          if (v14 < 0)
          {
LABEL_209:
            v110 = operator new();
            *(_DWORD *)(v110 + 8) = 6;
            *(_BYTE *)(v110 + 12) = 0;
            *(_QWORD *)v110 = &off_1EA925748;
            *(_QWORD *)(v110 + 16) = &v260;
            *(_QWORD *)(v110 + 24) = (char *)&v261 + 8;
            *(_QWORD *)(v110 + 32) = 0xFFFFFFFF00000000;
            *(_QWORD *)(v110 + 48) = 0;
            *(_QWORD *)(v110 + 56) = 0;
            *(_QWORD *)(v110 + 40) = 0;
            v259 = v110;
            goto LABEL_210;
          }
          v93 = 0;
          while (2)
          {
            v94 = *(_DWORD *)(*(_QWORD *)__x + 4 * v93);
            if (v94 == 3)
            {
              v102 = operator new();
              *(_DWORD *)(v102 + 8) = 3;
              *(_BYTE *)(v102 + 12) = 0;
              *(_QWORD *)v102 = &off_1EA925518;
              *(_OWORD *)(v102 + 16) = *(_OWORD *)v17;
              *(_OWORD *)(v102 + 32) = 0u;
              *(_OWORD *)(v102 + 48) = 0u;
              *(_OWORD *)(v102 + 64) = 0u;
              *(_OWORD *)(v102 + 80) = 0u;
              *(_OWORD *)(v102 + 92) = 0u;
              *(_QWORD *)(v102 + 120) = 0;
              *(_QWORD *)(v102 + 128) = 0;
              *(_QWORD *)(v102 + 112) = 0;
              *(_QWORD *)(v260 + 8 * v93) = v102;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
                v103 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
                v104 = (_QWORD *)fst::cerr(v103);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"AutoQueue: SCC #", 16);
                v105 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)": using shortest-first discipline", 33);
                goto LABEL_206;
              }
            }
            else if (v94 == 2)
            {
              v98 = operator new();
              *(_DWORD *)(v98 + 8) = 2;
              *(_BYTE *)(v98 + 12) = 0;
              *(_OWORD *)(v98 + 16) = 0u;
              *(_OWORD *)(v98 + 32) = 0u;
              *(_OWORD *)(v98 + 48) = 0u;
              *(_QWORD *)v98 = &off_1EA925F10;
              *(_QWORD *)(v260 + 8 * v93) = v98;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
                v99 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
                v100 = (_QWORD *)fst::cerr(v99);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"AutoQueue: SCC #", 16);
                v101 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)": using LIFO disciplle", 22);
                goto LABEL_206;
              }
            }
            else if (v94)
            {
              v106 = operator new();
              *(_DWORD *)(v106 + 8) = 1;
              *(_BYTE *)(v106 + 12) = 0;
              *(_OWORD *)(v106 + 16) = 0u;
              *(_OWORD *)(v106 + 32) = 0u;
              *(_OWORD *)(v106 + 48) = 0u;
              *(_QWORD *)v106 = &off_1EA9257E8;
              *(_QWORD *)(v260 + 8 * v93) = v106;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
                v107 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
                v108 = (_QWORD *)fst::cerr(v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"AutoQueue: SCC #", 16);
                v109 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)": using FIFO disciplle", 22);
                goto LABEL_206;
              }
            }
            else
            {
              *(_QWORD *)(v260 + 8 * v93) = 0;
              if (FLAGS_v >= 3)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
                v95 = fst::LogMessage::LogMessage((fst *)&v278, (uint64_t)&__p);
                v96 = (_QWORD *)fst::cerr(v95);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"AutoQueue: SCC #", 16);
                v97 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)": using trivial discipline", 26);
LABEL_206:
                fst::LogMessage::~LogMessage((fst::LogMessage *)&v278);
                if (SBYTE7(v276) < 0)
                  operator delete((void *)__p);
              }
            }
            if (v15 == ++v93)
              goto LABEL_209;
            continue;
          }
        }
        if (v278.__begin_)
          value_low = (*(uint64_t (**)(void))(*(_QWORD *)v278.__begin_ + 24))();
        else
          value_low = LODWORD(v278.__end_cap_.__value_);
      }
      else
      {
        value_low = LODWORD(v278.__end_cap_.__value_);
        if (SLODWORD(v278.__end_cap_.__value_) >= SLODWORD(v278.__end_))
          goto LABEL_69;
      }
      *(_QWORD *)&v277 = 0;
      ((void (*)(void (***)(), uint64_t, __int128 *))v266[17])(&v266, value_low, &__p);
      v22 = (int)value_low;
      while (1)
      {
        if (!(_QWORD)__p)
        {
          v24 = v277;
          if ((unint64_t)v277 >= (unint64_t)v276)
            goto LABEL_52;
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)__p + 24))(__p))
          break;
        if ((_QWORD)__p)
        {
          v23 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
          goto LABEL_34;
        }
        v24 = v277;
LABEL_33:
        v23 = *((_QWORD *)&__p + 1) + 16 * v24;
LABEL_34:
        v25 = *(int *)(*((_QWORD *)&v261 + 1) + 4 * v22);
        if ((_DWORD)v25 == *(_DWORD *)(*((_QWORD *)&v261 + 1) + 4 * *(int *)(v23 + 12)))
        {
          v26 = *(_DWORD **)__x;
          v27 = *(float *)(v23 + 8);
          if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v27, 0.0))
          {
            v28 = 1;
          }
          else
          {
            if ((v26[v25] | 2) != 2)
            {
              v19 = 0;
              goto LABEL_43;
            }
            *(float *)v271 = v27;
            v279 = 2139095040;
            if (v27 == INFINITY || (*(float *)v271 = v27, v279 = 0, v27 == 0.0))
              v28 = 2;
            else
              v28 = 3;
          }
          v19 = 0;
          v26[v25] = v28;
        }
LABEL_43:
        *(_DWORD *)v271 = 0;
        v29 = *(float *)(v23 + 8);
        *(float *)v271 = v29;
        v279 = 2139095040;
        if (v29 != INFINITY)
        {
          *(float *)v271 = v29;
          v279 = 0;
          if (v29 != 0.0)
            v20 = 0;
        }
        if ((_QWORD)__p)
          (*(void (**)(_QWORD))(*(_QWORD *)__p + 40))(__p);
        else
          *(_QWORD *)&v277 = v277 + 1;
      }
      if ((_QWORD)__p)
      {
        (*(void (**)(void))(*(_QWORD *)__p + 8))();
        goto LABEL_54;
      }
LABEL_52:
      if (*((_QWORD *)&v276 + 1))
        --**((_DWORD **)&v276 + 1);
LABEL_54:
      if (v278.__begin_)
        (*(void (**)(std::vector<char>::pointer))(*(_QWORD *)v278.__begin_ + 32))(v278.__begin_);
      else
        ++LODWORD(v278.__end_cap_.__value_);
    }
  }
  v40 = operator new();
  *(_DWORD *)(v40 + 8) = 2;
  *(_BYTE *)(v40 + 12) = 0;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_OWORD *)(v40 + 48) = 0u;
  *(_QWORD *)v40 = &off_1EA925F10;
  v259 = v40;
  if (FLAGS_v < 2)
    goto LABEL_213;
  std::string::basic_string[abi:ne180100]<0>(&v280, "INFO");
  v41 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v280);
  v42 = (_QWORD *)fst::cerr(v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_59:
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
  if (SHIBYTE(v282) < 0)
  {
    v33 = v280;
    goto LABEL_212;
  }
LABEL_213:
  v280 = &v266;
  v281 = &v263;
  v282 = &v256;
  *((float *)&v283 + 1) = a3;
  v284 = 0;
  v285 = 0u;
  v286 = 0u;
  v287 = 0u;
  memset(v288, 0, 29);
  v264 = v263;
  if (((unsigned int (*)(void (***)()))v266[3])(&v266) == -1)
  {
    v234 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))(*v280)[8])(v280, 4, 0);
LABEL_431:
    if (v234)
      BYTE4(v288[3]) = 1;
    goto LABEL_433;
  }
  (*((void (**)(uint64_t (**)()))*v282[2] + 7))(v282[2]);
  if (!HIBYTE(v284))
  {
    v281[1] = *v281;
    *((_QWORD *)&v285 + 1) = v285;
    *(_QWORD *)&v287 = 0;
  }
  v111 = ((uint64_t (*)(void (***)()))(*v280)[3])(v280);
  v112 = v281;
  v113 = v281 + 1;
  v114 = (char *)v281[1];
  v115 = *v281;
  for (i = (v114 - (_BYTE *)*v281) >> 2; i <= (int)v111; i = (v114 - (_BYTE *)*v281) >> 2)
  {
    v117 = (unint64_t)v112[2];
    if ((unint64_t)v114 >= v117)
    {
      if ((i + 1) >> 62)
        goto LABEL_466;
      v119 = v117 - (_QWORD)v115;
      v120 = v119 >> 1;
      if (v119 >> 1 <= i + 1)
        v120 = i + 1;
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
        v121 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v121 = v120;
      if (v121)
        v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v121);
      else
        v122 = 0;
      v123 = (_DWORD *)(v121 + 4 * i);
      *v123 = 2139095040;
      v118 = v123 + 1;
      v124 = (char *)*v113;
      v125 = (char *)*v112;
      if (*v113 != *v112)
      {
        do
        {
          v126 = *((_DWORD *)v124 - 1);
          v124 -= 4;
          *--v123 = v126;
        }
        while (v124 != v125);
        v124 = (char *)*v112;
      }
      *v112 = v123;
      *v113 = v118;
      v112[2] = (void *)(v121 + 4 * v122);
      if (v124)
        operator delete(v124);
    }
    else
    {
      *(_DWORD *)v114 = 2139095040;
      v118 = v114 + 4;
    }
    *v113 = v118;
    v127 = *((_QWORD *)&v285 + 1);
    if (*((_QWORD *)&v285 + 1) >= (unint64_t)v286)
    {
      v129 = (uint64_t)(*((_QWORD *)&v285 + 1) - v285) >> 2;
      if ((unint64_t)(v129 + 1) >> 62)
LABEL_466:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v130 = (uint64_t)(v286 - v285) >> 1;
      if (v130 <= v129 + 1)
        v130 = v129 + 1;
      if ((_QWORD)v286 - (_QWORD)v285 >= 0x7FFFFFFFFFFFFFFCuLL)
        v131 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v131 = v130;
      if (v131)
        v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v131);
      else
        v132 = 0;
      v133 = (_DWORD *)(v131 + 4 * v129);
      *v133 = 2139095040;
      v128 = v133 + 1;
      v134 = (char *)*((_QWORD *)&v285 + 1);
      v135 = (char *)v285;
      if (*((_QWORD *)&v285 + 1) != (_QWORD)v285)
      {
        do
        {
          v136 = *((_DWORD *)v134 - 1);
          v134 -= 4;
          *--v133 = v136;
        }
        while (v134 != v135);
        v134 = (char *)v285;
      }
      *(_QWORD *)&v285 = v133;
      *((_QWORD *)&v285 + 1) = v128;
      *(_QWORD *)&v286 = v131 + 4 * v132;
      if (v134)
        operator delete(v134);
    }
    else
    {
      **((_DWORD **)&v285 + 1) = 2139095040;
      v128 = (_DWORD *)(v127 + 4);
    }
    *((_QWORD *)&v285 + 1) = v128;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)&v286 + 8, &__p);
    v112 = v281;
    v113 = v281 + 1;
    v114 = (char *)v281[1];
    v115 = *v281;
  }
  if (HIBYTE(v284))
  {
    v137 = (char *)v288[0];
    v138 = (char *)v288[1];
    v139 = (uint64_t)(v288[1] - v288[0]) >> 2;
    if (v139 <= (int)v111)
    {
      do
      {
        if ((unint64_t)v138 >= v288[2])
        {
          v141 = v139 + 1;
          if ((v139 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v142 = v288[2] - (_QWORD)v137;
          if ((uint64_t)(v288[2] - (_QWORD)v137) >> 1 > v141)
            v141 = v142 >> 1;
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
            v143 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v143 = v141;
          if (v143)
          {
            v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v288[2], v143);
            v137 = (char *)v288[0];
            v138 = (char *)v288[1];
          }
          else
          {
            v144 = 0;
          }
          v145 = &v144[4 * v139];
          *(_DWORD *)v145 = -1;
          v140 = v145 + 4;
          while (v138 != v137)
          {
            v146 = *((_DWORD *)v138 - 1);
            v138 -= 4;
            *((_DWORD *)v145 - 1) = v146;
            v145 -= 4;
          }
          v288[0] = v145;
          v288[1] = v140;
          v288[2] = &v144[4 * v143];
          if (v137)
          {
            operator delete(v137);
            v137 = (char *)v288[0];
          }
          else
          {
            v137 = v145;
          }
        }
        else
        {
          *(_DWORD *)v138 = -1;
          v140 = v138 + 4;
        }
        v288[1] = v140;
        v139 = (v140 - v137) >> 2;
        v138 = v140;
      }
      while (v139 <= (int)v111);
      v115 = *v281;
    }
    *(_DWORD *)&v137[4 * (int)v111] = v288[3];
  }
  v115[(int)v111] = 0;
  *(_DWORD *)(v285 + 4 * (int)v111) = 0;
  *(_QWORD *)(*((_QWORD *)&v286 + 1) + (((unint64_t)(int)v111 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v111;
  (*((void (**)(uint64_t (**)(), uint64_t))*v282[2] + 3))(v282[2], v111);
  do
  {
    if (((*((uint64_t (**)(uint64_t (**)()))*v282[2] + 6))(v282[2]) & 1) != 0)
      goto LABEL_429;
    v147 = (*((uint64_t (**)(uint64_t (**)()))*v282[2] + 2))(v282[2]);
    (*((void (**)(uint64_t (**)()))*v282[2] + 4))(v282[2]);
    v148 = (int)v147;
    v149 = v281;
    v151 = v281 + 1;
    v150 = (char *)v281[1];
    v152 = *v281;
    v153 = v147;
    v154 = (v150 - (_BYTE *)*v281) >> 2;
    v254 = v153;
    if (v154 <= (int)v153)
    {
      do
      {
        v155 = (unint64_t)v149[2];
        if ((unint64_t)v150 >= v155)
        {
          if ((v154 + 1) >> 62)
            goto LABEL_466;
          v157 = v155 - (_QWORD)v152;
          v158 = v157 >> 1;
          if (v157 >> 1 <= v154 + 1)
            v158 = v154 + 1;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
            v159 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v159 = v158;
          if (v159)
            v159 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v159);
          else
            v160 = 0;
          v161 = (_DWORD *)(v159 + 4 * v154);
          *v161 = 2139095040;
          v156 = v161 + 1;
          v162 = (char *)*v151;
          v163 = (char *)*v149;
          if (*v151 != *v149)
          {
            do
            {
              v164 = *((_DWORD *)v162 - 1);
              v162 -= 4;
              *--v161 = v164;
            }
            while (v162 != v163);
            v162 = (char *)*v149;
          }
          *v149 = v161;
          *v151 = v156;
          v149[2] = (void *)(v159 + 4 * v160);
          if (v162)
            operator delete(v162);
        }
        else
        {
          *(_DWORD *)v150 = 2139095040;
          v156 = v150 + 4;
        }
        *v151 = v156;
        v165 = *((_QWORD *)&v285 + 1);
        if (*((_QWORD *)&v285 + 1) >= (unint64_t)v286)
        {
          v167 = (uint64_t)(*((_QWORD *)&v285 + 1) - v285) >> 2;
          if ((unint64_t)(v167 + 1) >> 62)
            goto LABEL_466;
          v168 = (uint64_t)(v286 - v285) >> 1;
          if (v168 <= v167 + 1)
            v168 = v167 + 1;
          if ((_QWORD)v286 - (_QWORD)v285 >= 0x7FFFFFFFFFFFFFFCuLL)
            v169 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v169 = v168;
          if (v169)
            v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v169);
          else
            v170 = 0;
          v171 = (_DWORD *)(v169 + 4 * v167);
          *v171 = 2139095040;
          v166 = v171 + 1;
          v172 = (char *)*((_QWORD *)&v285 + 1);
          v173 = (char *)v285;
          if (*((_QWORD *)&v285 + 1) != (_QWORD)v285)
          {
            do
            {
              v174 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *--v171 = v174;
            }
            while (v172 != v173);
            v172 = (char *)v285;
          }
          *(_QWORD *)&v285 = v171;
          *((_QWORD *)&v285 + 1) = v166;
          *(_QWORD *)&v286 = v169 + 4 * v170;
          if (v172)
            operator delete(v172);
        }
        else
        {
          **((_DWORD **)&v285 + 1) = 2139095040;
          v166 = (_DWORD *)(v165 + 4);
        }
        *((_QWORD *)&v285 + 1) = v166;
        LOBYTE(__p) = 0;
        std::vector<BOOL>::push_back((uint64_t)&v286 + 8, &__p);
        v149 = v281;
        v151 = v281 + 1;
        v150 = (char *)v281[1];
        v152 = *v281;
        v154 = (v150 - (_BYTE *)*v281) >> 2;
      }
      while (v154 <= v148);
    }
    if ((_BYTE)v284)
    {
      LODWORD(__p) = ((float (*)(void (***)(), uint64_t))(*v280)[4])(v280, v254);
      *(_DWORD *)__x = 2139095040;
      if (*(float *)&__p != INFINITY)
      {
LABEL_429:
        ++LODWORD(v288[3]);
        v234 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))(*v280)[8])(v280, 4, 0);
        goto LABEL_431;
      }
    }
    *(_QWORD *)(*((_QWORD *)&v286 + 1) + ((v148 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v148);
    v175 = *(float *)(v285 + 4 * v148);
    *(_DWORD *)(v285 + 4 * v148) = 2139095040;
    *(_QWORD *)&v277 = 0;
    ((void (*)(void (***)(), uint64_t, __int128 *))(*v280)[17])(v280, v254, &__p);
    while (1)
    {
      if ((_QWORD)__p)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)__p + 24))(__p) & 1) != 0)
          goto LABEL_421;
        if ((_QWORD)__p)
        {
          v176 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)__p + 32))(__p);
          goto LABEL_319;
        }
        v177 = v277;
      }
      else
      {
        v177 = v277;
        if ((unint64_t)v277 >= (unint64_t)v276)
        {
LABEL_421:
          v233 = 1;
          goto LABEL_423;
        }
      }
      v176 = *((_QWORD *)&__p + 1) + 16 * v177;
LABEL_319:
      v178 = v281;
      v179 = v281 + 1;
      v180 = (char *)v281[1];
      v181 = *v281;
      v182 = (v180 - (_BYTE *)*v281) >> 2;
      if (v182 <= *(int *)(v176 + 12))
      {
        do
        {
          v184 = (unint64_t)v178[2];
          if ((unint64_t)v180 >= v184)
          {
            if ((v182 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v186 = v184 - (_QWORD)v181;
            v187 = v186 >> 1;
            if (v186 >> 1 <= v182 + 1)
              v187 = v182 + 1;
            if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
              v188 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v188 = v187;
            if (v188)
              v188 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v188);
            else
              v189 = 0;
            v190 = (_DWORD *)(v188 + 4 * v182);
            *v190 = 2139095040;
            v185 = v190 + 1;
            v191 = (char *)*v179;
            v192 = (char *)*v178;
            if (*v179 != *v178)
            {
              do
              {
                v193 = *((_DWORD *)v191 - 1);
                v191 -= 4;
                *--v190 = v193;
              }
              while (v191 != v192);
              v191 = (char *)*v178;
            }
            *v178 = v190;
            *v179 = v185;
            v178[2] = (void *)(v188 + 4 * v189);
            if (v191)
              operator delete(v191);
          }
          else
          {
            *(_DWORD *)v180 = 2139095040;
            v185 = v180 + 4;
          }
          *v179 = v185;
          v194 = *((_QWORD *)&v285 + 1);
          if (*((_QWORD *)&v285 + 1) >= (unint64_t)v286)
          {
            v196 = (uint64_t)(*((_QWORD *)&v285 + 1) - v285) >> 2;
            if ((unint64_t)(v196 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v197 = (uint64_t)(v286 - v285) >> 1;
            if (v197 <= v196 + 1)
              v197 = v196 + 1;
            if ((_QWORD)v286 - (_QWORD)v285 >= 0x7FFFFFFFFFFFFFFCuLL)
              v198 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v198 = v197;
            if (v198)
              v198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v198);
            else
              v199 = 0;
            v200 = (_DWORD *)(v198 + 4 * v196);
            *v200 = 2139095040;
            v195 = v200 + 1;
            v201 = (char *)*((_QWORD *)&v285 + 1);
            v202 = (char *)v285;
            if (*((_QWORD *)&v285 + 1) != (_QWORD)v285)
            {
              do
              {
                v203 = *((_DWORD *)v201 - 1);
                v201 -= 4;
                *--v200 = v203;
              }
              while (v201 != v202);
              v201 = (char *)v285;
            }
            *(_QWORD *)&v285 = v200;
            *((_QWORD *)&v285 + 1) = v195;
            *(_QWORD *)&v286 = v198 + 4 * v199;
            if (v201)
              operator delete(v201);
          }
          else
          {
            **((_DWORD **)&v285 + 1) = 2139095040;
            v195 = (_DWORD *)(v194 + 4);
          }
          *((_QWORD *)&v285 + 1) = v195;
          __x[0] = 0;
          std::vector<BOOL>::push_back((uint64_t)&v286 + 8, __x);
          v178 = v281;
          v179 = v281 + 1;
          v180 = (char *)v281[1];
          v181 = *v281;
          v182 = (v180 - (_BYTE *)*v281) >> 2;
          v183 = *(int *)(v176 + 12);
        }
        while (v182 <= v183);
      }
      else
      {
        LODWORD(v183) = *(_DWORD *)(v176 + 12);
      }
      if (HIBYTE(v284))
      {
        v204 = (char *)v288[0];
        v205 = (char *)v288[1];
        v206 = (uint64_t)(v288[1] - v288[0]) >> 2;
        if (v206 <= (int)v183)
        {
          do
          {
            if ((unint64_t)v205 >= v288[2])
            {
              v209 = v206 + 1;
              if ((v206 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v210 = v288[2] - (_QWORD)v204;
              if ((uint64_t)(v288[2] - (_QWORD)v204) >> 1 > v209)
                v209 = v210 >> 1;
              if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL)
                v211 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v211 = v209;
              if (v211)
              {
                v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v288[2], v211);
                v204 = (char *)v288[0];
                v205 = (char *)v288[1];
              }
              else
              {
                v212 = 0;
              }
              v213 = &v212[4 * v206];
              *(_DWORD *)v213 = -1;
              v208 = v213 + 4;
              while (v205 != v204)
              {
                v214 = *((_DWORD *)v205 - 1);
                v205 -= 4;
                *((_DWORD *)v213 - 1) = v214;
                v213 -= 4;
              }
              v288[0] = v213;
              v288[1] = v208;
              v288[2] = &v212[4 * v211];
              if (v204)
              {
                operator delete(v204);
                v204 = (char *)v288[0];
              }
              else
              {
                v204 = v213;
              }
            }
            else
            {
              *(_DWORD *)v205 = -1;
              v208 = v205 + 4;
            }
            v288[1] = v208;
            v206 = (v208 - v204) >> 2;
            LODWORD(v183) = *(_DWORD *)(v176 + 12);
            v205 = v208;
          }
          while (v206 <= (int)v183);
          v207 = (int)v183;
          v178 = v281;
        }
        else
        {
          v207 = (int)v183;
        }
        if (*(_DWORD *)&v204[4 * v207] != LODWORD(v288[3]))
        {
          *((_DWORD *)*v178 + v207) = 2139095040;
          *(_DWORD *)(v285 + 4 * *(int *)(v176 + 12)) = 2139095040;
          v183 = *(int *)(v176 + 12);
          *(_QWORD *)(*((_QWORD *)&v286 + 1) + ((v183 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v183);
          *(_DWORD *)(v288[0] + 4 * v183) = v288[3];
          v178 = v281;
          LODWORD(v183) = *(_DWORD *)(v176 + 12);
        }
      }
      v215 = (float *)*v178;
      v216 = v285;
      v217 = NAN;
      if (v175 != -INFINITY)
      {
        v218 = *(float *)(v176 + 8);
        v217 = NAN;
        if (v218 != -INFINITY)
        {
          v217 = INFINITY;
          v219 = v218 == INFINITY || v175 == INFINITY;
          v220 = v175 + v218;
          if (!v219)
            v217 = v220;
        }
      }
      v221 = v215[(int)v183];
      if (v221 >= v217)
        v222 = v217;
      else
        v222 = v215[(int)v183];
      if (v217 == -INFINITY || v221 == -INFINITY)
        v222 = NAN;
      if (v222 > (float)(v221 + *((float *)&v283 + 1)) || v221 > (float)(*((float *)&v283 + 1) + v222))
        break;
LABEL_418:
      if ((_QWORD)__p)
        (*(void (**)(_QWORD))(*(_QWORD *)__p + 40))(__p);
      else
        *(_QWORD *)&v277 = v277 + 1;
    }
    v215[(int)v183] = v222;
    v226 = *(float *)(v216 + 4 * (int)v183);
    if (v226 >= v217)
      v227 = v217;
    else
      v227 = *(float *)(v216 + 4 * (int)v183);
    v229 = v217 == -INFINITY || v226 == -INFINITY;
    v230 = NAN;
    if (!v229)
      v230 = v227;
    *(float *)(v216 + 4 * (int)v183) = v230;
    if (v215[(int)v183] != -INFINITY && (v230 < -INFINITY || v230 > -INFINITY))
    {
      v231 = v282[2];
      v232 = *v231;
      if (((*(_QWORD *)(*((_QWORD *)&v286 + 1) + (((unint64_t)*(int *)(v176 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v176 + 12)) & 1) != 0)
      {
        (*((void (**)(uint64_t (**)()))v232 + 5))(v231);
      }
      else
      {
        (*((void (**)(uint64_t (**)()))v232 + 3))(v231);
        *(_QWORD *)(*((_QWORD *)&v286 + 1) + (((unint64_t)*(int *)(v176 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v176 + 12);
      }
      goto LABEL_418;
    }
    v233 = 0;
    BYTE4(v288[3]) = 1;
LABEL_423:
    if ((_QWORD)__p)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)__p + 8))(__p);
    }
    else if (*((_QWORD *)&v276 + 1))
    {
      --**((_DWORD **)&v276 + 1);
    }
  }
  while ((v233 & 1) != 0);
LABEL_433:
  if (BYTE4(v288[3]))
  {
    v264 = v263;
    LODWORD(__p) = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize(&v263, &__p);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&v280);
  v235 = *v252;
  v252[1] = *v252;
  v236 = v263;
  if (v264 - (_BYTE *)v263 == 4)
  {
    if (*(float *)v263 >= -INFINITY && *(float *)v263 <= -INFINITY)
    {
      LODWORD(v280) = 2143289344;
      std::vector<fst::TropicalWeightTpl<float>>::resize(v252, &v280);
    }
  }
  else
  {
    v237 = 0;
    v238 = v235;
    do
    {
      v239 = v237 + 1;
      v240 = v236[v237 + 1];
      v241 = (unint64_t)v252[2];
      if ((unint64_t)v238 >= v241)
      {
        if (v239 >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v242 = v241 - (_QWORD)v235;
        v243 = v242 >> 1;
        if (v242 >> 1 <= v239)
          v243 = v237 + 1;
        if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
          v244 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v244 = v243;
        if (v244)
          v244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v244);
        else
          v245 = 0;
        v246 = (char *)(v244 + 4 * v237);
        *(_DWORD *)v246 = v240;
        v238 = v246 + 4;
        v248 = *v252;
        v247 = v252[1];
        if (v247 != *v252)
        {
          do
          {
            v249 = *((_DWORD *)v247 - 1);
            v247 -= 4;
            *((_DWORD *)v246 - 1) = v249;
            v246 -= 4;
          }
          while (v247 != v248);
          v247 = *v252;
        }
        *v252 = v246;
        v252[1] = v238;
        v252[2] = (char *)(v244 + 4 * v245);
        if (v247)
          operator delete(v247);
      }
      else
      {
        *(_DWORD *)v238 = v240;
        v238 += 4;
      }
      v252[1] = v238;
      v235 = *v252;
      v237 = (v238 - *v252) >> 2;
      v236 = v263;
    }
    while (v237 < ((v264 - (_BYTE *)v263) >> 2) - 1);
  }
  fst::AutoQueue<int>::~AutoQueue(&v256);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  v266 = off_1EA925838;
  result = v267;
  if (v267)
  {
    v251 = *(_DWORD *)(v267 + 56) - 1;
    *(_DWORD *)(v267 + 56) = v251;
    if (!v251)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1DEA433D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  int v51;

  if (a40 < 0)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a20)
    operator delete(a20);
  if (a17)
    operator delete(a17);
  if (a23)
    operator delete(a23);
  if (a27)
  {
    v51 = a27[14] - 1;
    a27[14] = v51;
    if (!v51)
      (*(void (**)(_DWORD *))(*(_QWORD *)a27 + 8))(a27);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(float a1, float a2)
{
  float v2;

  if (a1 >= a2)
    v2 = a2;
  else
    v2 = a1;
  if (a2 == -INFINITY || a1 == -INFINITY)
    v2 = NAN;
  return v2 == a1 && a1 != a2;
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 72;
  v4 = *(int **)(a1 + 72);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 88);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
        v4 = *(int **)(a1 + 72);
        v7 = *(int **)(a1 + 80);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 72) = v15;
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 80) = v10;
    v19 = *(char **)(a1 + 32);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 24);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
        v21 = *(char **)(a1 + 24);
        v19 = *(char **)(a1 + 32);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 96);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 96);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 32) = v20;
    v31 = *(char **)(a1 + 56);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 96);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 56) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 48);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        v33 = *(char **)(a1 + 48);
        v31 = *(char **)(a1 + 56);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 96);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v39;
      *(_QWORD *)(a1 + 56) = v32;
      *(_QWORD *)(a1 + 64) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *(int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a2, v42);
}

_QWORD *fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

BOOL fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;

  v3 = **a1;
  v4 = ((*a1)[1] - v3) >> 2;
  if (v4 <= a2)
    v5 = INFINITY;
  else
    v5 = *(float *)(v3 + 4 * a2);
  v6 = *a1[1];
  v7 = (a1[1][1] - v6) >> 2;
  if (v7 <= a2)
    v8 = INFINITY;
  else
    v8 = *(float *)(v6 + 4 * a2);
  v9 = NAN;
  if (v5 != -INFINITY && v8 != -INFINITY)
  {
    v9 = INFINITY;
    v10 = v8 == INFINITY || v5 == INFINITY;
    v11 = v5 + v8;
    if (!v10)
      v9 = v11;
  }
  if (v4 <= a3)
    v12 = INFINITY;
  else
    v12 = *(float *)(v3 + 4 * a3);
  if (v7 <= a3)
    v13 = INFINITY;
  else
    v13 = *(float *)(v6 + 4 * a3);
  v14 = NAN;
  if (v12 != -INFINITY && v13 != -INFINITY)
  {
    v14 = INFINITY;
    v15 = v13 == INFINITY || v12 == INFINITY;
    v16 = v12 + v13;
    if (!v15)
      v14 = v16;
  }
  return fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v9, v14);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 72);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      LODWORD(v9) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v9;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  while (1)
  {
    v4 = (2 * (_DWORD)a2) | 1u;
    v5 = *(_DWORD *)(v3 + 96);
    if ((int)v4 >= v5
      || !(result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)a2))))
    {
      v4 = a2;
    }
    v6 = 2 * a2 + 2;
    if (v6 < v5)
    {
      result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * v6), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4));
      if (result)
        v4 = v6;
      else
        v4 = v4;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v7 = *(_QWORD *)(v3 + 48);
    v8 = *(int *)(v7 + 4 * (int)a2);
    v9 = *(int *)(v7 + 4 * (int)v4);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    v10 = *(_QWORD *)(v3 + 24);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v4) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v4;
    v11 = *(_QWORD *)(v3 + 72);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v4);
    *(_DWORD *)(v11 + 4 * (int)v4) = v8;
    a2 = v4;
  }
  return result;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;
  std::string __str;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1EA925668;
  *(_QWORD *)(v2 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 16), "null");
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 1;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 88) = -1;
  *(_QWORD *)v2 = &off_1EA924950;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=((std::string *)(v2 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 8) & 4 | 0x156A5A950003;
  *a1 = &off_1EA925F60;
  a1[1] = v2;
  return a1;
}

void sub_1DEA43E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v15);
  MEMORY[0x1DF0ED014](v15, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __n128 v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;

  (*(void (**)(uint64_t *))(*a2 + 216))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 272))(a2, v4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v5);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 240))(a2, (v6 + 1));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8 = (*(uint64_t (**)(uint64_t *))(*a2 + 192))(a2);
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v33);
  while (1)
  {
    if (!v33)
    {
      v10 = v35;
      if ((int)v35 >= v34)
        goto LABEL_42;
      goto LABEL_11;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33))
      break;
    if (v33)
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v9);
    else
      v10 = v35;
LABEL_11:
    v11 = v10 + 1;
    while ((*(int (**)(uint64_t *))(*a2 + 152))(a2) <= v11)
      (*(void (**)(uint64_t *))(*a2 + 192))(a2);
    if ((_DWORD)v10 == v7)
      (*(void (**)(uint64_t *, _QWORD, float))(*a2 + 176))(a2, (v10 + 1), 0.0);
    v12.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v10);
    LODWORD(v28) = v12.n128_u32[0];
    LODWORD(v25) = 2139095040;
    v13.n128_u32[0] = v12.n128_u32[0];
    if (v12.n128_f32[0] != INFINITY)
    {
      v28 = 0;
      LODWORD(v29) = v12.n128_u32[0];
      HIDWORD(v29) = v10 + 1;
      v12.n128_f64[0] = (*(double (**)(uint64_t *, _QWORD, uint64_t *, float, float))(*a2 + 200))(a2, 0, &v28, v12.n128_f32[0], v12.n128_f32[0]);
    }
    v32 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128, __n128))(*(_QWORD *)a1 + 136))(a1, v10, &v28, v12, v13);
    while (1)
    {
      if (!v28)
      {
        v16 = v32;
        if (v32 >= v30)
          goto LABEL_35;
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
        break;
      if (!v28)
      {
        v16 = v32;
LABEL_26:
        v15 = v29 + 16 * v16;
        goto LABEL_27;
      }
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v14);
LABEL_27:
      v17 = (*(_DWORD *)(v15 + 12) + 1);
      v18 = *(_DWORD *)(v15 + 8);
      v25 = *(_QWORD *)v15;
      v26 = v18;
      v27 = v11;
      while (1)
      {
        v19 = (*(uint64_t (**)(uint64_t *))(*a2 + 152))(a2);
        v20 = *a2;
        if (v19 > (int)v17)
          break;
        (*(void (**)(uint64_t *))(v20 + 192))(a2);
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(v20 + 200))(a2, v17, &v25);
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
      else
        ++v32;
    }
    if (v28)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 8))(v28, v14);
      goto LABEL_37;
    }
LABEL_35:
    if (v31)
      --*v31;
LABEL_37:
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
    else
      ++v35;
  }
  if (v33)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 8))(v33, v9);
LABEL_42:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, v8);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v23 = fst::ReverseProperties(v21, 1);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 184))(a2, v22 | v23, 0x3FFFFFFF0007);
}

void sub_1DEA44278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  v3 = (_DWORD *)a1[1];
  if (v3 != (_DWORD *)*a1)
  {
    if ((unint64_t)v3 - *a1 < 5)
      return;
    v4 = *a1 + 4;
    goto LABEL_6;
  }
  if (a1[2] != (_QWORD)v3)
  {
    *v3 = *a2;
    v4 = (uint64_t)(v3 + 1);
LABEL_6:
    a1[1] = v4;
    return;
  }
  v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(1uLL);
  *v6 = *a2;
  v7 = v6 + 1;
  v9 = &v6[v8];
  v11 = (_DWORD *)*a1;
  v10 = (_DWORD *)a1[1];
  if (v10 != (_DWORD *)*a1)
  {
    do
    {
      v12 = *--v10;
      *--v6 = v12;
    }
    while (v10 != v11);
    v10 = (_DWORD *)*a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v9;
  if (v10)
    operator delete(v10);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a1 + 136))(a1, a2, &v22);
  if (v22 || (a4 & 1) != 0)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2);
    v10 = 2;
    if (!a4)
      v10 = 0;
    v11 = v9 + v10;
    if (*(_QWORD *)(a3 + 8) < (unint64_t)(v9 + v10))
    {
      if (*(_QWORD *)a3)
        free(*(void **)a3);
      v21 = 0x4000;
      if (v11 > 0x4000)
        v21 = v11;
      *(_QWORD *)(a3 + 8) = v21;
      v13 = malloc_type_malloc(16 * v21, 0x1000040451B5BE8uLL);
      *(_QWORD *)a3 = v13;
      *(_QWORD *)(a3 + 16) = v13;
      v12 = v13;
    }
    else
    {
      v12 = *(_OWORD **)(a3 + 16);
      v13 = *(_OWORD **)a3;
    }
    *(_QWORD *)(a3 + 24) = &v12[v11];
    v14 = v22;
    v15 = v23;
    v17 = v24;
    v16 = v25;
    if (v25)
      ++*v25;
    v18 = 0;
    if (!v14)
      goto LABEL_15;
    while (1)
    {
      v19 = (*(uint64_t (**)(uint64_t *))(*v14 + 24))(v14);
      v20 = *v14;
      if (v19)
        break;
      *v13 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v20 + 32))(v14);
      (*(void (**)(uint64_t *))(*v14 + 40))(v14);
      while (1)
      {
        ++v13;
        if (v14)
          break;
LABEL_15:
        if (v18 >= v17)
        {
          if (v16)
            --*v16;
          return;
        }
        *v13 = *(_OWORD *)(v15 + 16 * v18++);
      }
    }
    (*(void (**)(uint64_t *))(v20 + 8))(v14);
  }
  else
  {
    v8 = v23 + 16 * v24;
    *(_QWORD *)(a3 + 16) = v23;
    *(_QWORD *)(a3 + 24) = v8;
    if (*(_QWORD *)a3)
    {
      free(*(void **)a3);
      *(_QWORD *)a3 = 0;
    }
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_1DEA4469C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DEA4476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DEA4484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1DEA4494C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1DEA44A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  float v25;
  int v26;
  std::vector<int>::pointer end;
  int *v28;
  std::vector<int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  int *v35;
  int v36;
  std::vector<int>::pointer v37;
  int *v38;
  std::vector<int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int v46;
  unint64_t v47;
  std::vector<int>::pointer v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  std::vector<int>::pointer v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  float v59;
  int v60;
  uint64_t *v62;
  uint64_t v64;
  int v65;
  unsigned int v66;
  std::vector<int> v67;
  std::vector<int> v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v74 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = &v74;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, (uint64_t)&v69);
      v8 = v74;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v62 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v74 = v13;
      memset(&v68, 0, sizeof(v68));
      memset(&v67, 0, sizeof(v67));
      v66 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v64);
      v16 = 0;
LABEL_12:
      if (v64)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64))
        {
          if (v64)
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v64 + 24))();
          else
            v17 = v66;
          goto LABEL_19;
        }
        if (v64)
          (*(void (**)(void))(*(_QWORD *)v64 + 8))();
      }
      else
      {
        v17 = v66;
        if ((int)v66 < v65)
        {
LABEL_19:
          v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
          v68.__end_ = v68.__begin_;
          v67.__end_ = v67.__begin_;
          if (v11)
            std::vector<int>::reserve(&v68, v18);
          if (v14)
            std::vector<int>::reserve(&v67, v18);
          v73 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v69);
          v19 = 1;
          while (1)
          {
            if (v69)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69))
              {
                if (v69)
                {
                  (*(void (**)(void))(*(_QWORD *)v69 + 8))();
                }
                else
                {
LABEL_95:
                  if (v72)
                    --*(_DWORD *)v72;
                }
                v15 = a1;
                if (v11
                  && (std::__sort<std::__less<int,int> &,int *>(),
                      (std::vector<int>::pointer)((char *)v68.__end_ - (char *)v68.__begin_) >= (std::vector<int>::pointer)5))
                {
                  v47 = v68.__end_ - v68.__begin_;
                  if (v47 <= 2)
                    v47 = 2;
                  v48 = v68.__begin_ + 1;
                  v49 = *v68.__begin_;
                  v50 = v47 - 1;
                  while (1)
                  {
                    v52 = *v48++;
                    v51 = v52;
                    if (v52 == v49)
                      break;
                    v49 = v51;
                    if (!--v50)
                      goto LABEL_104;
                  }
                  v74 = v74 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                  if (!v14)
                  {
LABEL_115:
                    if (v16 >= 1)
                      v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                    v59 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                    *(float *)&v69 = v59;
                    v76 = 2139095040;
                    if (v59 == INFINITY)
                    {
                      if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v59) != 1)v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                    }
                    else
                    {
                      *(float *)&v69 = v59;
                      v76 = 0;
                      if (v59 != 0.0)
                        v74 = v74 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                      ++v16;
                    }
                    if (v64)
                      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
                    else
                      ++v66;
                    goto LABEL_12;
                  }
                }
                else
                {
LABEL_104:
                  if (!v14)
                    goto LABEL_115;
                }
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<int>::pointer)5)
                {
                  v53 = v67.__end_ - v67.__begin_;
                  if (v53 <= 2)
                    v53 = 2;
                  v54 = v67.__begin_ + 1;
                  v55 = *v67.__begin_;
                  v56 = v53 - 1;
                  while (1)
                  {
                    v58 = *v54++;
                    v57 = v58;
                    if (v58 == v55)
                      break;
                    v55 = v57;
                    if (!--v56)
                      goto LABEL_115;
                  }
                  v74 = v74 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_115;
              }
              if (v69)
              {
                v20 = (*(uint64_t (**)(void))(*(_QWORD *)v69 + 32))();
                goto LABEL_32;
              }
              v21 = v73;
            }
            else
            {
              v21 = v73;
              if (v73 >= v71)
                goto LABEL_95;
            }
            v20 = v70 + 16 * v21;
LABEL_32:
            v22 = *(_DWORD *)v20;
            v23 = *(_DWORD *)v20;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
            {
              v74 = v74 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
              v23 = *(_DWORD *)(v20 + 4);
            }
            if (v22 | v23)
            {
              if (v22)
              {
                if (!v23)
                  goto LABEL_42;
                goto LABEL_38;
              }
              v24 = v74;
            }
            else
            {
              v24 = v74 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
            }
            v74 = v24 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
            if (!v23)
            {
LABEL_42:
              v74 = v74 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v19 & 1) != 0)
                goto LABEL_47;
              goto LABEL_43;
            }
LABEL_38:
            if ((v19 & 1) != 0)
              goto LABEL_47;
LABEL_43:
            if (v22 < (int)v8)
              v74 = v74 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v23 < (int)a2)
              v74 = v74 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_47:
            v76 = 0;
            v25 = *(float *)(v20 + 8);
            v76 = LODWORD(v25);
            v75 = 0;
            if (v25 != 0.0)
            {
              v76 = LODWORD(v25);
              v75 = 2139095040;
              if (v25 != INFINITY)
                v74 = v74 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
            }
            v26 = *(_DWORD *)(v20 + 12);
            if (v26 <= (int)v17)
              v74 = v74 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
            if (v26 != (_DWORD)v17 + 1)
              v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            LODWORD(v8) = *(_DWORD *)v20;
            LODWORD(a2) = *(_DWORD *)(v20 + 4);
            if (v11)
            {
              end = v68.__end_;
              if (v68.__end_ >= v68.__end_cap_.__value_)
              {
                begin = v68.__begin_;
                v30 = v68.__end_ - v68.__begin_;
                v31 = v30 + 1;
                if ((unint64_t)(v30 + 1) >> 62)
                  goto LABEL_138;
                v32 = (char *)v68.__end_cap_.__value_ - (char *)v68.__begin_;
                if (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 1 > v31)
                  v31 = v32 >> 1;
                if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                  v33 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v33 = v31;
                if (v33)
                {
                  v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68.__end_cap_, v33);
                  begin = v68.__begin_;
                  end = v68.__end_;
                }
                else
                {
                  v34 = 0;
                }
                v35 = (int *)&v34[4 * v30];
                *v35 = *(_DWORD *)v20;
                v28 = v35 + 1;
                while (end != begin)
                {
                  v36 = *--end;
                  *--v35 = v36;
                }
                v68.__begin_ = v35;
                v68.__end_ = v28;
                v68.__end_cap_.__value_ = (int *)&v34[4 * v33];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *v68.__end_ = v8;
                v28 = end + 1;
              }
              v68.__end_ = v28;
            }
            if (v14)
            {
              v37 = v67.__end_;
              if (v67.__end_ >= v67.__end_cap_.__value_)
              {
                v39 = v67.__begin_;
                v40 = v67.__end_ - v67.__begin_;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
LABEL_138:
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v42 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v43);
                  v39 = v67.__begin_;
                  v37 = v67.__end_;
                }
                else
                {
                  v44 = 0;
                }
                v45 = (int *)&v44[4 * v40];
                *v45 = *(_DWORD *)(v20 + 4);
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  v46 = *--v37;
                  *--v45 = v46;
                }
                v67.__begin_ = v45;
                v67.__end_ = v38;
                v67.__end_cap_.__value_ = (int *)&v44[4 * v43];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                *v67.__end_ = *(_DWORD *)(v20 + 4);
                v38 = v37 + 1;
              }
              v67.__end_ = v38;
            }
            if (v69)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
              v19 = 0;
            }
            else
            {
              v19 = 0;
              ++v73;
            }
          }
        }
      }
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v62;
      if (v60 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v74 = v74 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      if (v68.__begin_)
      {
        v68.__end_ = v68.__begin_;
        operator delete(v68.__begin_);
      }
      v8 = v74;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1DEA4528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::vector<char>::pointer begin;
  unint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  int64_t v52;
  int64_t v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char v60;
  int v61;
  uint64_t v62;
  std::vector<char>::value_type v63[8];
  std::vector<char>::value_type __x[8];
  int v65;
  int v66;
  uint64_t (**v67)();
  _QWORD v68[6];
  int *v69;
  _OWORD v70[2];
  __int128 v71;
  std::vector<char> v72;

  if (*(_QWORD *)a2)
    *(_QWORD *)(*(_QWORD *)a2 + 8) = **(_QWORD **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *(_QWORD *)(a2 + 16) = v7;
    v6 = 1;
  }
  *(_BYTE *)(a2 + 52) = v6;
  **(_QWORD **)(a2 + 24) = **(_QWORD **)(a2 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(a2 + 32) = a1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 40) = v8;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(a2 + 56) = v9;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(a2 + 64) = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(a2 + 72) = v11;
  v12 = (_QWORD *)operator new();
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *(_QWORD *)(a2 + 80) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v13 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(a2);
    return;
  }
  v14 = (char *)v13;
  memset(&v72, 0, sizeof(v72));
  v71 = 0u;
  memset(v70, 0, sizeof(v70));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool((uint64_t)&v67);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v62)
    v15 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1);
  else
    v15 = ((_DWORD)v14 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v15 <= (std::vector<char>::pointer)(v72.__end_ - v72.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v15 < (std::vector<char>::pointer)(v72.__end_ - v72.__begin_))
      v72.__end_ = &v72.__begin_[(int)v15];
  }
  else
  {
    std::vector<char>::__append(&v72, (int)v15 - (unint64_t)(v72.__end_ - v72.__begin_), __x);
  }
  v66 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if ((int)v14 >= (int)v15)
    goto LABEL_112;
  v16 = (unint64_t)v14;
  v61 = (int)v14;
  do
  {
    v72.__begin_[(int)v16] = 1;
    v17 = (uint64_t)v69;
    if (v69)
    {
      v69 = (int *)*((_QWORD *)v69 + 6);
    }
    else
    {
      v17 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(v68);
      *(_QWORD *)(v17 + 48) = 0;
    }
    *(_DWORD *)v17 = v16;
    *(_QWORD *)(v17 + 40) = 0;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v16, v17 + 8);
    *(_QWORD *)v63 = v17;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v70, v63);
    fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState((uint64_t *)a2, v16, v16);
    while (*((_QWORD *)&v71 + 1))
    {
      v18 = *(int **)(*(_QWORD *)(*((_QWORD *)&v70[0] + 1)
                                + (((unint64_t)(*((_QWORD *)&v71 + 1) + v71 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((*((_QWORD *)&v71 + 1) + v71 - 1) & 0x1FF));
      v19 = *v18;
      v20 = v72.__end_ - v72.__begin_;
      if (v72.__end_ - v72.__begin_ <= v19)
      {
        v15 = v19 + 1;
        v63[0] = 0;
        if (v19 + 1 <= v20)
        {
          if (v19 + 1 < v20)
            v72.__end_ = &v72.__begin_[v15];
        }
        else
        {
          std::vector<char>::__append(&v72, v19 + 1 - v20, v63);
        }
      }
      v21 = *((_QWORD *)v18 + 1);
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
          goto LABEL_34;
        v22 = *((_QWORD *)v18 + 1);
        if (!v22)
        {
          v24 = *((_QWORD *)v18 + 5);
LABEL_45:
          v23 = *((_QWORD *)v18 + 2) + 16 * v24;
          goto LABEL_46;
        }
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
LABEL_46:
        v30 = *(_DWORD *)(v23 + 12);
        v31 = v30;
        begin = v72.__begin_;
        v33 = v72.__end_ - v72.__begin_;
        if ((std::vector<char>::pointer)(v72.__end_ - v72.__begin_) <= (std::vector<char>::pointer)v30)
        {
          v15 = v30 + 1;
          v63[0] = 0;
          if (v15 <= v33)
          {
            if (v30 + 1 < v33)
              v72.__end_ = &v72.__begin_[v15];
          }
          else
          {
            std::vector<char>::__append(&v72, v30 + 1 - v33, v63);
            v30 = *(_DWORD *)(v23 + 12);
            begin = v72.__begin_;
            v31 = v30;
          }
        }
        v34 = begin[v31];
        if (v34 == 1)
        {
          v41 = *(_DWORD *)(**(_QWORD **)(a2 + 56) + 4 * v30);
          v42 = **(_QWORD **)(a2 + 64);
          if (v41 < *(_DWORD *)(v42 + 4 * v19))
            *(_DWORD *)(v42 + 4 * v19) = v41;
          v43 = v30;
          v44 = **(_QWORD **)(a2 + 16);
          if (((*(_QWORD *)(v44 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v43) & 1) != 0)
            *(_QWORD *)(v44 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
          v45 = *(unint64_t **)(a2 + 24);
          v46 = *v45 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
          *v45 = v46;
          if (*(_DWORD *)(v23 + 12) == *(_DWORD *)(a2 + 40))
            *v45 = v46 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
LABEL_68:
          v29 = *((_QWORD *)v18 + 1);
          if (!v29)
            goto LABEL_69;
LABEL_42:
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        }
        else
        {
          if (v34 == 2)
          {
            v35 = v30;
            v36 = **(_QWORD **)(a2 + 56);
            v37 = *(_DWORD *)(v36 + 4 * v30);
            if (v37 >= *(_DWORD *)(v36 + 4 * v19))
            {
              v38 = (unint64_t)v30 >> 6;
              v39 = 1 << v35;
            }
            else
            {
              v38 = (unint64_t)v30 >> 6;
              v39 = 1 << v35;
              if ((*(_QWORD *)(**(_QWORD **)(a2 + 72) + 8 * v38) & v39) != 0)
              {
                v40 = **(_QWORD **)(a2 + 64);
                if (v37 < *(_DWORD *)(v40 + 4 * v19))
                  *(_DWORD *)(v40 + 4 * v19) = v37;
              }
            }
            v48 = **(_QWORD **)(a2 + 16);
            if ((*(_QWORD *)(v48 + 8 * v38) & v39) != 0)
              *(_QWORD *)(v48 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
            goto LABEL_68;
          }
          begin[v31] = 1;
          v47 = (uint64_t)v69;
          if (v69)
          {
            v69 = (int *)*((_QWORD *)v69 + 6);
          }
          else
          {
            v47 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(v68);
            *(_QWORD *)(v47 + 48) = 0;
          }
          *(_DWORD *)v47 = *(_DWORD *)(v23 + 12);
          *(_QWORD *)(v47 + 40) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
          *(_QWORD *)v63 = v47;
          std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(v70, v63);
          fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState((uint64_t *)a2, *(_DWORD *)(v23 + 12), v16);
        }
      }
      else
      {
        v24 = *((_QWORD *)v18 + 5);
        if (v24 < *((_QWORD *)v18 + 3))
          goto LABEL_45;
LABEL_34:
        v72.__begin_[v19] = 2;
        v25 = *((_QWORD *)v18 + 1);
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          v26 = (_DWORD *)*((_QWORD *)v18 + 4);
          if (v26)
            --*v26;
        }
        *((_QWORD *)v18 + 6) = v69;
        v69 = v18;
        --*((_QWORD *)&v71 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v70);
        if (*((_QWORD *)&v71 + 1))
        {
          v18 = *(int **)(*(_QWORD *)(*((_QWORD *)&v70[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v71 + 1) + v71 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v71 + 1) + v71 - 1) & 0x1FF));
          v27 = *v18;
          v28 = *((_QWORD *)v18 + 1);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v19, v27);
          v29 = *((_QWORD *)v18 + 1);
          if (v29)
            goto LABEL_42;
LABEL_69:
          ++*((_QWORD *)v18 + 5);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(a2, v19, -1);
        }
      }
    }
    if ((_DWORD)v16 == (_DWORD)v14)
      v16 = 0;
    else
      v16 = (v16 + 1);
    if ((int)v16 < (int)v15)
    {
      v16 = (int)v16;
      while (v72.__begin_[v16])
      {
        if ((int)v15 == ++v16)
        {
          v16 = v15;
          break;
        }
      }
    }
    if (!v62 && (_DWORD)v16 == (_DWORD)v15)
    {
      while (1)
      {
        if (*(_QWORD *)__x)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
            goto LABEL_111;
          v49 = *(_QWORD *)__x ? (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) : v66;
        }
        else
        {
          v49 = v66;
          if (v66 >= v65)
            goto LABEL_111;
        }
        if (v49 == (_DWORD)v15)
          break;
        if (*(_QWORD *)__x)
          (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
        else
          ++v66;
      }
      end = v72.__end_;
      if (v72.__end_ >= v72.__end_cap_.__value_)
      {
        v51 = v72.__begin_;
        v52 = v72.__end_ - v72.__begin_;
        v53 = v72.__end_ - v72.__begin_ + 1;
        if (v53 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v72.__end_cap_.__value_ - v72.__begin_;
        if (2 * (v72.__end_cap_.__value_ - v72.__begin_) > (unint64_t)v53)
          v53 = 2 * v54;
        if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
          v56 = (char *)operator new(v55);
        else
          v56 = 0;
        v57 = &v56[v52];
        v58 = &v56[v52];
        *v58 = 0;
        v14 = v58 + 1;
        if (end != v51)
        {
          v59 = &end[~(unint64_t)v51];
          do
          {
            v60 = *--end;
            (v59--)[(_QWORD)v56] = v60;
          }
          while (end != v51);
          end = v72.__begin_;
          v57 = v56;
        }
        v72.__begin_ = v57;
        v72.__end_ = v14;
        v72.__end_cap_.__value_ = &v56[v55];
        if (end)
          operator delete(end);
      }
      else
      {
        *v72.__end_ = 0;
        v14 = end + 1;
      }
      v72.__end_ = v14;
      v15 = (v15 + 1);
      LODWORD(v14) = v61;
    }
LABEL_111:
    ;
  }
  while ((int)v16 < (int)v15);
LABEL_112:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v67 = &off_1EA923FB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(v68);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)v70);
  if (v72.__begin_)
  {
    v72.__end_ = v72.__begin_;
    operator delete(v72.__begin_);
  }
}

void sub_1DEA45B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  uint64_t (**v12)();
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &off_1EA923FB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena((uint64_t *)va1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((uint64_t (***)())va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((uint64_t)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1EA923FB0;
  *(_QWORD *)(a1 + 8) = &off_1EA9245D8;
  *(_OWORD *)(a1 + 16) = xmmword_1DED16C20;
  v2 = a1 + 32;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *v4 = v2;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v6 + 1;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1DEA45CC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v5);
  v3 = 0;
  while (1)
  {
    while (!v5)
    {
      v4 = v7;
      if (v7 >= v6)
        return v3;
      v3 = (v3 + 1);
LABEL_11:
      v7 = v4 + 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
      break;
    v3 = (v3 + 1);
    if (!v5)
    {
      v4 = v7;
      goto LABEL_11;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 32))();
  }
  if (v5)
    (*(void (**)(void))(*(_QWORD *)v5 + 8))();
  return v3;
}

void sub_1DEA45DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0xDF)
  {
    v7 = v1[2];
    if (v7 + 56 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 56;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1DEA46428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  char v65;
  char v66;

  v6 = a1[10];
  v7 = *(_DWORD **)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    v10 = *(_DWORD **)v6;
    v11 = ((uint64_t)v7 - *(_QWORD *)v6) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      v10 = *(_DWORD **)v6;
      v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a2;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)v6 = v16;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v7 = a2;
    v9 = v7 + 1;
  }
  *(_QWORD *)(v6 + 8) = v9;
  v19 = a2;
  v20 = *(_QWORD *)a1[7];
  if (a2 >= (unint64_t)((*(_QWORD *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      v21 = *a1;
      if (*a1)
      {
        v22 = *(_QWORD *)(v21 + 16);
        v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          v25 = *(_DWORD **)v21;
          v26 = ((uint64_t)v23 - *(_QWORD *)v21) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_78;
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            v25 = *(_DWORD **)v21;
            v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = -1;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(_QWORD *)v21 = v31;
          *(_QWORD *)(v21 + 8) = v24;
          *(_QWORD *)(v21 + 16) = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v23 = -1;
          v24 = v23 + 1;
        }
        *(_QWORD *)(v21 + 8) = v24;
      }
      v33 = a1[1];
      if (v33)
      {
        v66 = 0;
        std::vector<BOOL>::push_back(v33, &v66);
      }
      v34 = a1[2];
      v65 = 0;
      std::vector<BOOL>::push_back(v34, &v65);
      v35 = a1[7];
      v36 = *(_DWORD **)(v35 + 8);
      v37 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        v39 = *(_DWORD **)v35;
        v40 = ((uint64_t)v36 - *(_QWORD *)v35) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_78;
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          v39 = *(_DWORD **)v35;
          v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = -1;
        v38 = v45 + 4;
        while (v36 != v39)
        {
          v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)v35 = v45;
        *(_QWORD *)(v35 + 8) = v38;
        *(_QWORD *)(v35 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v36 = -1;
        v38 = v36 + 1;
      }
      *(_QWORD *)(v35 + 8) = v38;
      v47 = a1[8];
      v48 = *(_DWORD **)(v47 + 8);
      v49 = *(_QWORD *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        v51 = *(_DWORD **)v47;
        v52 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
LABEL_78:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v49 - (_QWORD)v51;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          v51 = *(_DWORD **)v47;
          v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v52];
        *(_DWORD *)v57 = -1;
        v50 = v57 + 4;
        while (v48 != v51)
        {
          v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(_QWORD *)v47 = v57;
        *(_QWORD *)(v47 + 8) = v50;
        *(_QWORD *)(v47 + 16) = &v56[4 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v48 = -1;
        v50 = v48 + 1;
      }
      *(_QWORD *)(v47 + 8) = v50;
      v59 = a1[9];
      v64 = 0;
      std::vector<BOOL>::push_back(v59, &v64);
      v20 = *(_QWORD *)a1[7];
    }
    while (v19 >= (*(_QWORD *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  v60 = (_QWORD *)a1[9];
  *(_DWORD *)(*(_QWORD *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  v61 = v19 >> 6;
  v62 = 1 << v19;
  *(_QWORD *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  v63 = (_QWORD *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) |= v62;
  }
  else
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) &= ~v62;
    *(_QWORD *)a1[3] = *(_QWORD *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
}

double fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9245D8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Size()
{
  return 56;
}

double fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923FB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923FB0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Size()
{
  return 48;
}

_QWORD *std::vector<fst::QueueType>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v4 = 4 * a2;
    v5 = (char *)operator new(4 * a2);
    *a1 = v5;
    a1[2] = &v5[4 * a2];
    bzero(v5, 4 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1DEA469E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_1EA924900;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::vector<int>::vector((std::vector<int> *)(a1 + 48), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1DEA46A8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

_QWORD *fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1EA925748;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::SccQueue<int,fst::QueueBase<int>>::~SccQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1EA925748;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Head_(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 <= *(_DWORD *)(a1 + 36))
  {
    while (1)
    {
      v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v4)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
        v3 = *(_DWORD *)(a1 + 32);
        if ((v5 & 1) != 0)
          goto LABEL_10;
        v6 = v3;
        if (*(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3))
          goto LABEL_11;
      }
      else
      {
        v6 = v2;
        v3 = v2;
      }
      v7 = *(_QWORD *)(a1 + 40);
      if (v6 < (*(_QWORD *)(a1 + 48) - v7) >> 2 && *(_DWORD *)(v7 + 4 * v6) != -1)
        goto LABEL_11;
LABEL_10:
      v2 = v3 + 1;
      *(_DWORD *)(a1 + 32) = v3 + 1;
      if (v3++ >= *(_DWORD *)(a1 + 36))
        goto LABEL_11;
    }
  }
  v3 = *(_DWORD *)(a1 + 32);
LABEL_11:
  v9 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3);
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v3);
}

char *fst::SccQueue<int,fst::QueueBase<int>>::Enqueue_(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = (int)a2;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_DWORD *)(v7 + 4 * (int)a2);
  if (v4 > v5)
  {
    *(_DWORD *)(a1 + 36) = v8;
LABEL_3:
    *(_DWORD *)(a1 + 32) = v8;
    goto LABEL_7;
  }
  if (v8 <= v5)
  {
    if (v8 < v4)
      goto LABEL_3;
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
  }
LABEL_7:
  v9 = *(int *)(v7 + 4 * (int)a2);
  v10 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v9);
  if (v10)
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2);
  result = *(char **)(a1 + 40);
  v12 = *(char **)(a1 + 48);
  v13 = (v12 - result) >> 2;
  if (v13 <= v9)
  {
    v14 = (_QWORD *)(a1 + 56);
    do
    {
      if ((unint64_t)v12 >= *v14)
      {
        v16 = v13 + 1;
        if ((v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = *v14 - (_QWORD)result;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v18);
          result = *(char **)(a1 + 40);
          v12 = *(char **)(a1 + 48);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v13];
        *(_DWORD *)v20 = -1;
        v15 = v20 + 4;
        while (v12 != result)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *(_QWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = &v19[4 * v18];
        if (result)
        {
          operator delete(result);
          result = *(char **)(a1 + 40);
        }
        else
        {
          result = v20;
        }
      }
      else
      {
        *(_DWORD *)v12 = -1;
        v15 = v12 + 4;
      }
      *(_QWORD *)(a1 + 48) = v15;
      v13 = (v15 - result) >> 2;
      v9 = *(int *)(**(_QWORD **)(a1 + 24) + 4 * v6);
      v12 = v15;
    }
    while (v13 <= v9);
  }
  *(_DWORD *)&result[4 * v9] = v2;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Dequeue_(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 32);
  v2 = *(_QWORD *)(**(_QWORD **)(result + 16) + 8 * v1);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = *(_QWORD *)(result + 40);
  if (v1 < (*(_QWORD *)(result + 48) - v3) >> 2)
    *(_DWORD *)(v3 + 4 * v1) = -1;
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Update_(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * *(int *)(**(_QWORD **)(a1 + 24) + 4 * a2));
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t fst::SccQueue<int,fst::QueueBase<int>>::Empty_(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 36);
  v2 = *(int *)(a1 + 32);
  if ((int)v2 < v1)
    return 0;
  if ((int)v2 > v1)
    return 1;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (v2 >= (*(_QWORD *)(a1 + 48) - v5) >> 2)
    return 1;
  return *(_DWORD *)(v5 + 4 * v2) == -1;
}

double fst::SccQueue<int,fst::QueueBase<int>>::Clear_(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *(int *)(a1 + 32);
  if ((int)v2 <= *(_DWORD *)(a1 + 36))
  {
    do
    {
      v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v2);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 40);
        if (v2 < (*(_QWORD *)(a1 + 48) - v4) >> 2)
          *(_DWORD *)(v4 + 4 * v2) = -1;
      }
    }
    while ((uint64_t)v2++ < *(int *)(a1 + 36));
  }
  result = NAN;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  return a1;
}

void fst::FifoQueue<int>::~FifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::FifoQueue<int>::Head_(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[7] + a1[6] - 1;
  return *(unsigned int *)(*(_QWORD *)(a1[3] + ((v1 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v1 & 0x3FF));
}

void fst::FifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front((char **)(a1 + 16), &v2);
}

void fst::FifoQueue<int>::Dequeue_(uint64_t a1)
{
  --*(_QWORD *)(a1 + 56);
  std::deque<int>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)(a1 + 16));
}

BOOL fst::FifoQueue<int>::Empty_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

void fst::FifoQueue<int>::Clear_(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[6] = v6;
}

void std::deque<int>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 7) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void std::deque<int>::push_front(char **a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;

  v4 = (unint64_t)a1[4];
  if (!v4)
  {
    v5 = a1[1];
    v6 = a1[2];
    v7 = ((v6 - v5) << 7) - 1;
    if (v6 == v5)
      v7 = 0;
    if ((unint64_t)(v7 - (_QWORD)a1[5]) < 0x400)
    {
      v8 = a1[3];
      v9 = *a1;
      v10 = v8 - *a1;
      if (v6 - v5 >= (unint64_t)v10)
      {
        if (v8 == v9)
          v11 = 1;
        else
          v11 = v10 >> 2;
        v47 = a1 + 3;
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
        v44 = v43;
        v45 = v43;
        v46 = &v43[8 * v12];
        v42 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v43, &v42);
        v14 = (uint64_t *)a1[1];
        v13 = a1[2];
        v15 = v45;
        while (v14 != (uint64_t *)v13)
        {
          if (v15 == v46)
          {
            v17 = v43;
            v16 = v44;
            if (v44 <= v43)
            {
              if (v15 == v43)
                v23 = 1;
              else
                v23 = (v15 - v43) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
              v27 = v15 - v16;
              v26 = v15 == v16;
              v15 = &v24[8 * (v23 >> 2)];
              if (!v26)
              {
                v15 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v16;
                  v16 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v43 = v24;
              v44 = &v24[8 * (v23 >> 2)];
              v45 = v15;
              v46 = &v24[8 * v25];
              if (v17)
                operator delete(v17);
            }
            else
            {
              v18 = (v44 - v43) >> 3;
              if (v18 >= -1)
                v19 = v18 + 1;
              else
                v19 = v18 + 2;
              v20 = &v44[-8 * (v19 >> 1)];
              v21 = v15 - v44;
              if (v15 != v44)
              {
                memmove(&v44[-8 * (v19 >> 1)], v44, v15 - v44);
                v15 = v16;
              }
              v22 = &v15[-8 * (v19 >> 1)];
              v15 = &v20[v21];
              v44 = v22;
              v45 = &v20[v21];
            }
          }
          v31 = *v14++;
          *(_QWORD *)v15 = v31;
          v15 = v45 + 8;
          v45 += 8;
          v13 = a1[2];
        }
        v32 = *a1;
        v33 = v44;
        *a1 = v43;
        a1[1] = v33;
        v34 = v46;
        a1[2] = v15;
        a1[3] = v34;
        if (v15 - v33 == 8)
          v35 = 512;
        else
          v35 = (uint64_t)(a1[4] + 1024);
        a1[4] = (char *)v35;
        if (v32)
          operator delete(v32);
      }
      else
      {
        if (v5 == v9)
        {
          v43 = (char *)operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v43);
          v36 = a1[2];
          v43 = (char *)*((_QWORD *)v36 - 1);
          a1[2] = v36 - 8;
        }
        else
        {
          v43 = (char *)operator new(0x1000uLL);
        }
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v43);
        if (a1[2] - a1[1] == 8)
          v37 = 512;
        else
          v37 = (uint64_t)(a1[4] + 1024);
        a1[4] = (char *)v37;
      }
    }
    else
    {
      a1[4] = (char *)1024;
      v43 = (char *)*((_QWORD *)v6 - 1);
      a1[2] = v6 - 8;
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v43);
    }
    v4 = (unint64_t)a1[4];
  }
  v38 = a1[1];
  v39 = &v38[8 * (v4 >> 10)];
  if (a1[2] == v38)
    v40 = 0;
  else
    v40 = *(_QWORD *)v39 + 4 * (v4 & 0x3FF);
  if (v40 == *(_QWORD *)v39)
    v40 = *((_QWORD *)v39 - 1) + 4096;
  *(_DWORD *)(v40 - 4) = *a2;
  v41 = (uint64_t)(a1[5] + 1);
  a1[4] = (char *)(v4 - 1);
  a1[5] = (char *)v41;
}

void sub_1DEA474A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1EA925518;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1EA925518;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1 + 80;
  v4 = *(char **)(a1 + 80);
  v6 = *(int *)(v5 + 24);
  v7 = *(char **)(v5 + 8);
  v8 = (v7 - v4) >> 2;
  if (v8 > v6)
  {
    *(_DWORD *)&v4[4 * v6] = a2;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * *(int *)(*(_QWORD *)(a1 + 56) + 4 * *(int *)(a1 + 104))) = *(_DWORD *)(a1 + 104);
    goto LABEL_52;
  }
  v9 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v7 >= v9)
  {
    if ((v8 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 - (_QWORD)v4;
    v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
    if (v12 <= v8 + 1)
      v12 = v8 + 1;
    if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v13);
      v4 = *(char **)(a1 + 80);
      v7 = *(char **)(a1 + 88);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v8];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = a2;
    v10 = v15 + 4;
    while (v7 != v4)
    {
      v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v10;
    *(_QWORD *)(a1 + 96) = v16;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_DWORD *)v7 = a2;
    v10 = v7 + 4;
  }
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 88) = v10;
  v19 = *(char **)(a1 + 40);
  if ((unint64_t)v19 >= v18)
  {
    v21 = *(char **)(a1 + 32);
    v22 = (v19 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62)
      goto LABEL_57;
    v23 = v18 - (_QWORD)v21;
    v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
    if (v24 <= v22 + 1)
      v24 = v22 + 1;
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v25);
      v21 = *(char **)(a1 + 32);
      v19 = *(char **)(a1 + 40);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v28 = &v26[4 * v25];
    *(_DWORD *)v27 = *(_DWORD *)(a1 + 104);
    v20 = v27 + 4;
    while (v19 != v21)
    {
      v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 48) = v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_DWORD *)v19 = *(_DWORD *)(a1 + 104);
    v20 = v19 + 4;
  }
  v30 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 40) = v20;
  v31 = *(char **)(a1 + 64);
  if ((unint64_t)v31 >= v30)
  {
    v33 = *(char **)(a1 + 56);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v37);
        v33 = *(char **)(a1 + 56);
        v31 = *(char **)(a1 + 64);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 104);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 56) = v39;
      *(_QWORD *)(a1 + 64) = v32;
      *(_QWORD *)(a1 + 72) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_57:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  *(_DWORD *)v31 = *(_DWORD *)(a1 + 104);
  v32 = v31 + 4;
LABEL_51:
  *(_QWORD *)(a1 + 64) = v32;
LABEL_52:
  v42 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = v42 + 1;
  if ((int)v42 >= 1)
  {
    v43 = *(_QWORD *)(a1 + 80);
    v44 = **(_QWORD **)(a1 + 16);
    do
    {
      v45 = v42 - 1;
      v46 = (v42 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(v44 + 4 * *(int *)(v43 + 4 * v46)), *(float *)(v44 + 4 * a2)))
      {
        break;
      }
      v47 = *(_QWORD *)(a1 + 56);
      v48 = *(int *)(v47 + 4 * v42);
      v49 = *(int *)(v47 + 4 * v46);
      *(_DWORD *)(v47 + 4 * v42) = v49;
      v50 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(v50 + 4 * v49) = v42;
      *(_DWORD *)(v47 + 4 * v46) = v48;
      *(_DWORD *)(v50 + 4 * v48) = v46;
      LODWORD(v47) = *(_DWORD *)(v43 + 4 * v42);
      *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v43 + 4 * v46);
      *(_DWORD *)(v43 + 4 * v46) = v47;
      v42 = v45 >> 1;
    }
    while (v45 > 1);
  }
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Dequeue_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = *(int *)(result + 104) - 1;
  v4 = *(int **)(result + 56);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(result + 32);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  v8 = *(_DWORD **)(result + 80);
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v5) = *v8;
  *v8 = v8[v3];
  v8[v3] = v5;
  v9 = *(_DWORD *)(result + 104) - 1;
  *(_DWORD *)(result + 104) = v9;
  while (1)
  {
    v10 = (2 * (_DWORD)v2) | 1u;
    if ((int)v10 >= v9
      || (result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(**(_QWORD **)(v1 + 16) + 4 * (int)v8[(int)v10]), *(float *)(**(_QWORD **)(v1 + 16) + 4 * (int)v8[(int)v2])), (result & 1) == 0))
    {
      v10 = v2;
    }
    v11 = 2 * v2 + 2;
    if (v11 < v9)
    {
      result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(*(float *)(**(_QWORD **)(v1 + 16) + 4 * (int)v8[v11]), *(float *)(**(_QWORD **)(v1 + 16) + 4 * (int)v8[(int)v10]));
      if ((_DWORD)result)
        v10 = v11;
      else
        v10 = v10;
    }
    if ((_DWORD)v10 == (_DWORD)v2)
      break;
    v12 = v4[(int)v2];
    v13 = v4[(int)v10];
    v4[(int)v2] = v13;
    *(_DWORD *)(v7 + 4 * v13) = v2;
    v4[(int)v10] = v12;
    *(_DWORD *)(v7 + 4 * v12) = v10;
    LODWORD(v12) = v8[(int)v2];
    v8[(int)v2] = v8[(int)v10];
    v8[(int)v10] = v12;
    v9 = *(_DWORD *)(v1 + 104);
    v2 = v10;
  }
  return result;
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

_QWORD *fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~Heap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA924900;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void fst::TopOrderQueue<int>::~TopOrderQueue(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA924900;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::TopOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 16));
}

uint64_t fst::TopOrderQueue<int>::Enqueue_(uint64_t result, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(_DWORD *)(result + 20);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_DWORD *)(v4 + 4 * a2);
  if (v2 > v3)
  {
    *(_DWORD *)(result + 20) = v5;
LABEL_6:
    *(_DWORD *)(result + 16) = v5;
    goto LABEL_7;
  }
  if (v5 <= v3)
  {
    if (v5 < v2)
      goto LABEL_6;
  }
  else
  {
    *(_DWORD *)(result + 20) = v5;
  }
LABEL_7:
  *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * *(int *)(v4 + 4 * a2)) = a2;
  return result;
}

uint64_t fst::TopOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;

  v1 = *(_QWORD *)(result + 48);
  *(_DWORD *)(v1 + 4 * *(int *)(result + 16)) = -1;
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  if ((int)v3 <= v2)
  {
    v4 = v3 - 1;
    v5 = (int *)(v1 + 4 * v3);
    do
    {
      v6 = *v5++;
      if (v6 != -1)
        break;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::TopOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::TopOrderQueue<int>::Clear_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *(int *)(a1 + 16);
  if ((int)v1 <= *(_DWORD *)(a1 + 20))
  {
    v2 = *(_QWORD *)(a1 + 48);
    do
      *(_DWORD *)(v2 + 4 * v1) = -1;
    while (v1++ < *(int *)(a1 + 20));
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  return a1;
}

void fst::LifoQueue<int>::~LifoQueue(uint64_t a1)
{
  std::deque<int>::~deque[abi:ne180100](a1 + 16);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::LifoQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*(_QWORD *)(a1 + 48) & 0x3FFLL));
}

void fst::LifoQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v2;

  v2 = a2;
  std::deque<int>::push_front((char **)(a1 + 16), &v2);
}

void fst::LifoQueue<int>::Dequeue_(uint64_t a1)
{
  int64x2_t v1;

  v1 = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_1DED16B70);
  *(int64x2_t *)(a1 + 48) = v1;
  if (v1.i64[0] >= 0x800uLL)
  {
    operator delete(**(void ***)(a1 + 24));
    *(_QWORD *)(a1 + 24) += 8;
    *(_QWORD *)(a1 + 48) -= 1024;
  }
}

BOOL fst::LifoQueue<int>::Empty_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) == 0;
}

void fst::LifoQueue<int>::Clear_(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  a1[6] = v6;
}

char ***fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishVisit(char ***result)
{
  char ***v1;
  char ****v2;
  unint64_t v3;
  char **v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;

  v1 = result;
  if (*(_BYTE *)result[1])
  {
    (*result)[1] = **result;
    v2 = (char ****)result[2];
    result = v2[1];
    if (result == *v2)
    {
      v16 = ((char *)result - (char *)*v2) >> 2;
      if (!v16)
        goto LABEL_22;
    }
    else
    {
      v3 = 0;
      do
      {
        v4 = *v1;
        v5 = (*v1)[1];
        v6 = (unint64_t)(*v1)[2];
        if ((unint64_t)v5 >= v6)
        {
          v8 = *v4;
          v9 = (v5 - *v4) >> 2;
          v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v11 = v6 - (_QWORD)v8;
          if (v11 >> 1 > v10)
            v10 = v11 >> 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v10;
          if (v12)
          {
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(*v1 + 2), v12);
            v8 = *v4;
            v5 = v4[1];
          }
          else
          {
            v13 = 0;
          }
          v14 = &v13[4 * v9];
          *(_DWORD *)v14 = -1;
          v7 = v14 + 4;
          while (v5 != v8)
          {
            v15 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          *v4 = v14;
          v4[1] = v7;
          v4[2] = &v13[4 * v12];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *(_DWORD *)v5 = -1;
          v7 = v5 + 4;
        }
        v4[1] = v7;
        ++v3;
        v2 = (char ****)v1[2];
        result = *v2;
        v16 = ((char *)v2[1] - (char *)*v2) >> 2;
      }
      while (v16 > v3);
      if (!v16)
      {
LABEL_22:
        if (!result)
          goto LABEL_34;
        goto LABEL_23;
      }
    }
    v17 = 0;
    v18 = **v1;
    v19 = (int *)result + v16 - 1;
    do
    {
      v20 = *v19--;
      *(_DWORD *)&v18[4 * v20] = v17++;
    }
    while (v16 != v17);
  }
  else
  {
    v2 = (char ****)result[2];
  }
  if (v2)
  {
    result = *v2;
    if (!*v2)
LABEL_34:
      JUMPOUT(0x1DF0ED014);
LABEL_23:
    v2[1] = result;
    operator delete(result);
    goto LABEL_34;
  }
  return result;
}

void fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::FinishState(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

_QWORD *fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1EA924DF8;
  v2 = (void *)a1[3];
  if (v2)
    operator delete(v2);
  return a1;
}

void fst::StateOrderQueue<int>::~StateOrderQueue(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1EA924DF8;
  v1 = (void *)a1[3];
  if (v1)
    operator delete(v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::StateOrderQueue<int>::Head_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void fst::StateOrderQueue<int>::Enqueue_(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v3 > v4)
  {
    *(_DWORD *)(a1 + 20) = a2;
LABEL_6:
    *(_DWORD *)(a1 + 16) = a2;
    goto LABEL_7;
  }
  if (v4 < a2)
  {
    *(_DWORD *)(a1 + 20) = a2;
    goto LABEL_7;
  }
  if (v3 > a2)
    goto LABEL_6;
LABEL_7:
  v5 = (_QWORD *)(a1 + 24);
  v6 = a2;
  while (*(_QWORD *)(a1 + 32) <= v6)
  {
    v7 = 0;
    std::vector<BOOL>::push_back(a1 + 24, &v7);
  }
  *(_QWORD *)(*v5 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
}

uint64_t fst::StateOrderQueue<int>::Dequeue_(uint64_t result)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;

  v1 = *(_QWORD *)(result + 24);
  v2 = *(_DWORD *)(result + 20);
  v3 = *(int *)(result + 16);
  *(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
  if ((int)v3 <= v2)
  {
    v4 = v3 - 1;
    do
    {
      if (((*(_QWORD *)(v1 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
        break;
      ++v3;
      *(_DWORD *)(result + 16) = v4 + 2;
      ++v4;
    }
    while (v2 != v4);
  }
  return result;
}

BOOL fst::StateOrderQueue<int>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a1 + 20);
}

double fst::StateOrderQueue<int>::Clear_(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  double result;

  v1 = *(_DWORD *)(a1 + 20);
  v2 = *(int *)(a1 + 16);
  if ((int)v2 <= v1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v1 - v2 + 1;
    do
    {
      *(_QWORD *)(v3 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
      ++v2;
      --v4;
    }
    while (v4);
  }
  result = NAN;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  return result;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1EA925838;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1EA925838;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1DF0ED014);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &off_1EA925F60;
  result[1] = v3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Write(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  fst *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  fst *v36;
  _QWORD *v37;
  fst *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  std::string v46;
  _BYTE v47[8];
  void *v48[2];
  void *__p[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  _QWORD v56[17];
  _BYTE __str[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v50 = 0u;
  v51 = 0u;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)__p = 0u;
  v53 = 0;
  v54 = 0;
  v52 = -1;
  v52 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v53 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v45 = v6;
    v7 = 0;
    v53 = (int)fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__str, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v64;
    if (v64 != -1)
      goto LABEL_3;
  }
  v45 = -1;
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__str, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, (std::string *)__str, v10, (uint64_t)v47);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      *(_DWORD *)__str = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      *(_QWORD *)__str = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          *(_DWORD *)__str = *(v19 - 2);
          std::ostream::write();
          *(_DWORD *)__str = *(v19 - 1);
          std::ostream::write();
          *(_DWORD *)__str = *v19;
          std::ostream::write();
          *(_DWORD *)__str = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v26 = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v53 == v12)
    {
      v26 = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v36 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    v37 = (_QWORD *)fst::cerr(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v53 = v12;
  std::string::basic_string[abi:ne180100]<0>(&v46, "vector");
  MEMORY[0x1DF0ECC6C](v55, a2);
  v28 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v28[32] & 5) == 0)
  {
    v29 = *((_QWORD *)v28 + 5);
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    v64 = v45;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v29 + 40))(v56, v29, __str, 16);
    if (v56[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1DF0ECC78](v55);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v30 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    v31 = (_QWORD *)fst::cerr(v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v33 = *(char *)(a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
LABEL_68:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v26 = 0;
    goto LABEL_71;
  }
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, &v46, v10, (uint64_t)v47);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v38 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    v39 = (_QWORD *)fst::cerr(v38);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v40 = *(char *)(a3 + 23);
    if (v40 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v40 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
    goto LABEL_68;
  }
  MEMORY[0x1DF0ECC6C](v56, a2);
  v41 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v41[32] & 5) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v41 + 5) + 32))(__str, *((_QWORD *)v41 + 5), 0, 2, 16);
    if (v64 == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1DF0ECC78](v56);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__str);
    v43 = (_QWORD *)fst::cerr(v42);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v44 = *(char *)(a3 + 23);
    if (v44 >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    if (v44 >= 0)
      v35 = *(unsigned __int8 *)(a3 + 23);
    else
      v35 = *(_QWORD *)(a3 + 8);
    goto LABEL_68;
  }
  v26 = 1;
LABEL_71:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v50) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v48[0]);
  return v26;
}

void sub_1DEA48928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  MEMORY[0x1DF0ECC78](&a37);
  if (a16 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Write(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1DF0ECB94](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1DF0ECF6C](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1DEA48C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,_QWORD *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  a21 = (_QWORD *)*MEMORY[0x1E0DE4F48];
  *(_QWORD **)((char *)&a21 + *(a21 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1DF0ECB94](&a22);
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](&a72);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1DEA48E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  float v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6[8] + 8 * a2) + 32);
  if (v7 == *(_QWORD *)(*(_QWORD *)(v6[8] + 8 * a2) + 24))
    v8 = 0;
  else
    v8 = (_DWORD *)(v7 - 16);
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v10 = *a3;
  v11 = *((_DWORD *)a3 + 1);
  v12 = v9 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v11)
    v12 = v9;
  v13 = v12 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v11)
    v13 = v12 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v10 == 0.0)
    v12 = v13;
  if (!v11)
    v12 = v12 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (v8)
  {
    if (*v8 > SLODWORD(v10))
      v12 = v12 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (v8[1] > v11)
      v12 = v12 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if (a3[2] != INFINITY && a3[2] != 0.0)
    v12 = v12 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (*((_DWORD *)a3 + 3) <= a2)
    v12 = v12 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v12 & 0x4000000000) != 0)
    v14 = v12 & 0x5D7FFEB0007 | 0x2800000000;
  else
    v14 = v12 & 0x5D7FFEB0007;
  v6[1] = v6[1] & 4 | v14;
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(v6[8] + 8 * a2), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t result;
  int64x2_t v46;
  std::vector<int>::value_type __x;
  std::vector<int> v48;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v48, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v48.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(char **)(v4 + 64);
  v12 = *(char **)(v4 + 72);
  if (v12 == v11)
  {
    v16 = 0;
    v14 = 0;
    v15 = *(char **)(v4 + 72);
    v11 = v15;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      if (v48.__begin_[v13] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)&v11[8 * v13]);
      }
      else
      {
        v48.__begin_[v13] = v14;
        if (v13 != v14)
          *(_QWORD *)&v11[8 * v14] = *(_QWORD *)&v11[8 * v13];
        ++v14;
      }
      ++v13;
      v11 = *(char **)(v4 + 64);
      v15 = *(char **)(v4 + 72);
      v16 = (v15 - v11) >> 3;
    }
    while (v16 > v13);
    v12 = *(char **)(v4 + 64);
  }
  v17 = v14 - v16;
  if (v14 <= v16)
  {
    if (v14 >= v16)
      goto LABEL_32;
    v15 = &v11[8 * v14];
    goto LABEL_31;
  }
  v18 = *(_QWORD *)(v4 + 80);
  if (v17 <= (v18 - (uint64_t)v15) >> 3)
  {
    bzero(v15, 8 * v17);
    v15 += 8 * v17;
LABEL_31:
    *(_QWORD *)(v4 + 72) = v15;
    goto LABEL_32;
  }
  if (v14 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v19 = v18 - (_QWORD)v12;
  v20 = v19 >> 2;
  if (v19 >> 2 <= (unint64_t)v14)
    v20 = v14;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v21);
  v23 = &v22[8 * v16];
  v25 = &v22[8 * v24];
  bzero(v23, 8 * v17);
  v15 = &v23[8 * v17];
  v27 = *(char **)(v4 + 64);
  v26 = *(char **)(v4 + 72);
  if (v26 != v27)
  {
    do
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *((_QWORD *)v23 - 1) = v28;
      v23 -= 8;
    }
    while (v26 != v27);
    v26 = *(char **)(v4 + 64);
  }
  *(_QWORD *)(v4 + 64) = v23;
  *(_QWORD *)(v4 + 72) = v15;
  *(_QWORD *)(v4 + 80) = v25;
  if (v26)
  {
    operator delete(v26);
    v15 = *(char **)(v4 + 72);
  }
LABEL_32:
  v29 = *(char **)(v4 + 64);
  if (v15 != v29)
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)&v29[8 * v30];
      v33 = *(_QWORD *)(v31 + 24);
      v32 = *(_QWORD *)(v31 + 32);
      v34 = *(int64x2_t *)(v31 + 8);
      v35 = v32 - v33;
      if (v32 == v33)
      {
        v46 = *(int64x2_t *)(v31 + 8);
        v41 = 0;
        v42 = v35 >> 4;
      }
      else
      {
        v36 = 0;
        v41 = 0;
        v37 = *(_QWORD *)(v31 + 24);
        do
        {
          v38 = v48.__begin_[*(int *)(v37 + 12)];
          if (v38 == -1)
          {
            v39.i64[0] = *(_QWORD *)v37;
            v39.i64[1] = HIDWORD(*(_QWORD *)v37);
            v34 = vaddq_s64(v34, vceqzq_s64(v39));
          }
          else
          {
            *(_DWORD *)(v37 + 12) = v38;
            if (v36 != v41)
            {
              *(_OWORD *)(v33 + 16 * v41) = *(_OWORD *)v37;
              v29 = *(char **)(v4 + 64);
            }
            ++v41;
          }
          v31 = *(_QWORD *)&v29[8 * v30];
          ++v36;
          v40 = *(_QWORD *)(v31 + 32) - *(_QWORD *)(v31 + 24);
          v37 += 16;
        }
        while (v36 < v40 >> 4);
        v46 = v34;
        v42 = v40 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs((_QWORD *)v31, v42 - v41);
      v29 = *(char **)(v4 + 64);
      *(int64x2_t *)(*(_QWORD *)&v29[8 * v30++] + 8) = v46;
    }
    while (v30 < (uint64_t)(*(_QWORD *)(v4 + 72) - (_QWORD)v29) >> 3);
  }
  v43 = *(int *)(v4 + 88);
  if ((_DWORD)v43 != -1)
  {
    v44 = v48.__begin_;
    *(_DWORD *)(v4 + 88) = v48.__begin_[v43];
LABEL_48:
    v48.__end_ = v44;
    operator delete(v44);
    goto LABEL_49;
  }
  v44 = v48.__begin_;
  if (v48.__begin_)
    goto LABEL_48;
LABEL_49:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 8) & 4 | result & 0x6A5A950007;
  return result;
}

void sub_1DEA49470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3 != *(_QWORD *)(v2 + 64))
  {
    v4 = 0;
    v3 = *(_QWORD *)(v2 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v3 + 8 * v4++));
      v3 = *(_QWORD *)(v2 + 64);
    }
    while (v4 < (*(_QWORD *)(v2 + 72) - v3) >> 3);
  }
  *(_QWORD *)(v2 + 72) = v3;
  *(_DWORD *)(v2 + 88) = -1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *(_QWORD *)(v2 + 8) = (*(_DWORD *)(v2 + 8) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA925358;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1DEA49800(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1DEA4989C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string::size_type v17;
  std::string __p;
  _DWORD *v20;
  std::string::size_type v21;
  uint64_t v22;
  int v23;
  unsigned int v24;

  *(_QWORD *)a1 = &off_1EA925668;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &off_1EA924950;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v22);
  while (1)
  {
    if (!v22)
    {
      v14 = v24;
      if ((int)v24 >= v23)
        goto LABEL_48;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      break;
    if (v22)
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 24))();
    else
      v14 = v24;
LABEL_27:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v21 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        v17 = v21;
        if (v21 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_41;
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
      {
        v17 = v21;
LABEL_35:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v17);
        goto LABEL_36;
      }
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_36:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_43;
    }
LABEL_41:
    if (v20)
      --*v20;
LABEL_43:
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      ++v24;
  }
  if (v22)
    (*(void (**)(void))(*(_QWORD *)v22 + 8))();
LABEL_48:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1DEA49C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> *>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_DWORD *)v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v5 = (_QWORD *)a1[9];
  v4 = a1[10];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v11);
    else
      v12 = 0;
    v13 = (_QWORD *)(v11 + 8 * v8);
    v14 = v11 + 8 * v12;
    *v13 = v3;
    v6 = v13 + 1;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

void std::vector<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;

  if (!*a2)
    ++a1[1];
  if (!a2[1])
    ++a1[2];
  v5 = (_OWORD *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[3];
    v8 = ((uint64_t)v5 - v7) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v11);
    else
      v12 = 0;
    v13 = (_OWORD *)(v11 + 16 * v8);
    v14 = v11 + 16 * v12;
    *v13 = *(_OWORD *)a2;
    v6 = v13 + 1;
    v16 = (char *)a1[3];
    v15 = (char *)a1[4];
    if (v15 != v16)
    {
      do
      {
        *--v13 = *((_OWORD *)v15 - 1);
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)a1[3];
    }
    a1[3] = v13;
    a1[4] = v6;
    a1[5] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = *(_OWORD *)a2;
    v6 = v5 + 1;
  }
  a1[4] = v6;
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &off_1EA9250A8;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1EA925668;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetValue_(uint64_t result, float *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(_QWORD **)(result + 8);
  v3 = *(_QWORD *)(result + 24);
  v4 = v2[3];
  v5 = (int *)(v4 + 16 * v3);
  v7 = *v5;
  v6 = v5[1];
  if (*v5 != v6)
    **(_QWORD **)(result + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v6)
    {
      v8 = *(unint64_t **)(result + 16);
      v9 = *v8;
LABEL_8:
      *v8 = v9 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v8 = *(unint64_t **)(result + 16);
    v10 = *v8;
    *v8 &= ~0x1000000uLL;
    if (!v6)
    {
      v9 = v10 & 0xFFFFFFFFFEBFFFFFLL;
      *v8 = v9;
      goto LABEL_8;
    }
  }
  if (*(float *)(v4 + 16 * v3 + 8) != INFINITY && *(float *)(v4 + 16 * v3 + 8) != 0.0)
    **(_QWORD **)(result + 16) &= ~0x100000000uLL;
  v11 = 0x30FC30007;
  v13 = *a2;
  v12 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 == v7 && v12 == v6)
  {
    if (*((_DWORD *)a2 + 3) == *(_DWORD *)(v4 + 16 * v3 + 12))
      v11 = 0x3FFFFFFF0007;
    if (v7)
    {
LABEL_17:
      if (v6)
        goto LABEL_18;
      goto LABEL_30;
    }
  }
  else if (v7)
  {
    goto LABEL_17;
  }
  --v2[1];
  if (v6)
  {
LABEL_18:
    if (v13 != 0.0)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_30:
  --v2[2];
  if (v13 != 0.0)
  {
LABEL_19:
    if (v12)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_31:
  ++v2[1];
  if (!v12)
LABEL_20:
    ++v2[2];
LABEL_21:
  *(_OWORD *)v5 = *(_OWORD *)a2;
  v15 = *(_DWORD *)a2;
  v16 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v16)
    **(_QWORD **)(result + 16) = **(_QWORD **)(result + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v15)
  {
    if (!v16)
    {
      v17 = *(unint64_t **)(result + 16);
      v18 = *v17;
LABEL_35:
      *v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v17 = *(unint64_t **)(result + 16);
    v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v17 = v19;
    if (!v16)
    {
      v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v17 = v18;
      goto LABEL_35;
    }
  }
  if (a2[2] != INFINITY && a2[2] != 0.0)
    **(_QWORD **)(result + 16) = **(_QWORD **)(result + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(result + 16) &= v11;
  return result;
}

_QWORD *fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = result[4];
    v3 = (_DWORD *)(v2 - 16);
    v4 = a2;
    do
    {
      if (!*v3)
        --result[1];
      if (!v3[1])
        --result[2];
      v3 -= 4;
      --v4;
    }
    while (v4);
    result[4] = v2 - 16 * a2;
  }
  return result;
}

void sub_1DEA4A55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, std::string *__str, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a6 + 8), __str);
    if ((v11 & 1) == 0
    {
      v22 = operator new();
      fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
      std::operator+<char>();
      fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type = v22;
    }
    std::string::operator=((std::string *)(a6 + 32), (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type(void)::type);
    *(_DWORD *)(a6 + 56) = 2;
    *(_QWORD *)(a6 + 64) = a5;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v12 = a3[25] == 0;
    else
      v12 = 1;
    v13 = !v12;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v15 = v14 == 0;
    else
      v15 = 1;
    v16 = v13 | 2;
    if (v15)
      v16 = v13;
    if (a3[27])
      v16 |= 4u;
    *(_DWORD *)(a6 + 60) = v16;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v17 = a3[25] == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 72))(v18, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v20 = a3[26] == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 72))(v21, a2);
  }
  return result;
}

void sub_1DEA4A76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  BOOL v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v8 = a1[4];
  v7 = a1[5];
  v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x400)
    {
      v23 = (v4 - v5) >> 3;
      v24 = (char *)a1[3];
      v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1)
          v26 = 1;
        else
          v26 = v25 >> 2;
        v84 = a1 + 3;
        *(_QWORD *)&v82 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v26);
        *((_QWORD *)&v82 + 1) = v82 + 8 * v23;
        *(_QWORD *)&v83 = *((_QWORD *)&v82 + 1);
        *((_QWORD *)&v83 + 1) = v82 + 8 * v27;
        v81 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v82, &v81);
        v28 = a1[2];
        v30 = (char *)*((_QWORD *)&v82 + 1);
        v29 = (char *)v82;
        v32 = (char *)*((_QWORD *)&v83 + 1);
        v31 = (char *)v83;
        while (v28 != a1[1])
        {
          if (v30 == v29)
          {
            if (v31 >= v32)
            {
              if (v32 == v29)
                v38 = 1;
              else
                v38 = (v32 - v29) >> 2;
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v38);
              v41 = v39;
              v30 = &v39[(2 * v38 + 6) & 0xFFFFFFFFFFFFFFF8];
              v42 = v31 - v29;
              v36 = v31 == v29;
              v31 = v30;
              if (!v36)
              {
                v31 = &v30[v42 & 0xFFFFFFFFFFFFFFF8];
                v43 = 8 * (v42 >> 3);
                v44 = v30;
                v45 = v29;
                do
                {
                  v46 = *(_QWORD *)v45;
                  v45 += 8;
                  *(_QWORD *)v44 = v46;
                  v44 += 8;
                  v43 -= 8;
                }
                while (v43);
              }
              v32 = &v39[8 * v40];
              if (v29)
                operator delete(v29);
              v29 = v41;
            }
            else
            {
              v33 = (v32 - v31) >> 3;
              if (v33 >= -1)
                v34 = v33 + 1;
              else
                v34 = v33 + 2;
              v35 = &v31[8 * (v34 >> 1)];
              v30 = &v35[-(v31 - v29)];
              v37 = v31 - v29;
              v36 = v31 == v29;
              v31 = v35;
              if (!v36)
                memmove(v30, v29, v37);
            }
          }
          v47 = *(_QWORD *)(v28 - 8);
          v28 -= 8;
          *((_QWORD *)v30 - 1) = v47;
          v30 -= 8;
        }
        *(_QWORD *)&v82 = v29;
        *((_QWORD *)&v82 + 1) = v30;
        *(_QWORD *)&v83 = v31;
        *((_QWORD *)&v83 + 1) = v32;
        v49 = v82;
        v50 = v83;
        *(_QWORD *)&v82 = *a1;
        v48 = (void *)v82;
        *((_QWORD *)&v82 + 1) = v28;
        *(_OWORD *)a1 = v49;
        *((_OWORD *)a1 + 1) = v50;
        if (v48)
          operator delete(v48);
        goto LABEL_60;
      }
      if (v24 != v4)
      {
        *(_QWORD *)&v82 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v82);
LABEL_60:
        v5 = (char *)a1[1];
        v7 = a1[5];
        v9 = a1[4] + v7;
        goto LABEL_61;
      }
      *(_QWORD *)&v82 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v82);
      v62 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v64 = *v62;
      v63 = (char *)(v62 + 1);
      v11 = v64;
      a1[1] = v63;
      if (v4 == (char *)a1[3])
      {
        v65 = (uint64_t)&v63[-*a1];
        if ((unint64_t)v63 > *a1)
        {
          v66 = v65 >> 3;
          v15 = v65 >> 3 < -1;
          v67 = (v65 >> 3) + 2;
          if (v15)
            v68 = v67;
          else
            v68 = v66 + 1;
          v69 = -(v68 >> 1);
          v70 = v68 >> 1;
          v71 = &v63[-8 * v70];
          v72 = v4 - v63;
          if (v4 != v63)
          {
            memmove(&v63[-8 * v70], v63, v4 - v63);
            v63 = (char *)a1[1];
          }
          v4 = &v71[v72];
          v73 = &v63[8 * v69];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v74 = 1;
        else
          v74 = (uint64_t)&v4[-*a1] >> 2;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v74);
        v53 = &v52[8 * (v74 >> 2)];
        v55 = &v52[8 * v75];
        v76 = (uint64_t *)a1[1];
        v4 = v53;
        v77 = a1[2] - (_QWORD)v76;
        if (v77)
        {
          v4 = &v53[v77 & 0xFFFFFFFFFFFFFFF8];
          v78 = 8 * (v77 >> 3);
          v79 = &v52[8 * (v74 >> 2)];
          do
          {
            v80 = *v76++;
            *(_QWORD *)v79 = v80;
            v79 += 8;
            v78 -= 8;
          }
          while (v78);
        }
LABEL_46:
        v61 = (void *)*a1;
        *a1 = v52;
        a1[1] = v53;
        a1[2] = v4;
        a1[3] = v55;
        if (v61)
        {
          operator delete(v61);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 1024;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          v73 = &v22[8 * v18];
LABEL_58:
          a1[1] = v73;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v51 = 1;
        else
          v51 = (uint64_t)&v4[-*a1] >> 2;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v51);
        v53 = &v52[8 * (v51 >> 2)];
        v55 = &v52[8 * v54];
        v56 = (uint64_t *)a1[1];
        v4 = v53;
        v57 = a1[2] - (_QWORD)v56;
        if (v57)
        {
          v4 = &v53[v57 & 0xFFFFFFFFFFFFFFF8];
          v58 = 8 * (v57 >> 3);
          v59 = &v52[8 * (v51 >> 2)];
          do
          {
            v60 = *v56++;
            *(_QWORD *)v59 = v60;
            v59 += 8;
            v58 -= 8;
          }
          while (v58);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v11;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  *(_DWORD *)(*(_QWORD *)&v5[(v9 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v9 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1DEA4AB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(std::string::size_type a1, uint64_t a2, float **a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void **size;
  void **v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  void **v47;
  uint64_t v48;
  void **v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  char *v70;
  char *v71;
  int v72;
  float v73;
  uint64_t v74;
  unint64_t v75;
  void **v76;
  void **v77;
  _DWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  char *v89;
  char *v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  char *v99;
  char *v100;
  int v101;
  char *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  float *v113;
  uint64_t v114;
  float v115;
  float v116;
  BOOL v117;
  float v118;
  float v119;
  float v120;
  float v124;
  float v125;
  BOOL v127;
  float v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  float *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  float *v146;
  float *v147;
  float *v148;
  int v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  fst *v158;
  _QWORD *v159;
  fst *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  float *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float *v168;
  uint64_t v169;
  unint64_t v170;
  float *v171;
  float *v172;
  float v173;
  unint64_t v174;
  float v175;
  float v176;
  float v177;
  BOOL v178;
  float v179;
  float v180;
  BOOL v182;
  unint64_t v183;
  float *v184;
  float *v185;
  float *v186;
  int v187;
  int *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  int *v192;
  uint64_t v193;
  int *v194;
  float *v195;
  int *v196;
  uint64_t v197;
  char *v198;
  float *v199;
  float *v200;
  int v201;
  float *v202;
  int64_t v203;
  float *v204;
  int v205;
  char v206;
  unint64_t v207;
  fst *v208;
  _QWORD *v209;
  unint64_t v210;
  float *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  std::string::size_type v223;
  std::string::size_type v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  fst *v242;
  _QWORD *v243;
  _QWORD *v244;
  uint64_t v245;
  int v246;
  float *v247;
  float *v248;
  float *v249;
  int64_t v250;
  uint64_t v251;
  int v252;
  float *v253;
  unint64_t v254;
  float *v255;
  float *v256;
  int v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  float v264;
  float v265;
  float v266;
  float v267;
  BOOL v268;
  float v269;
  float v270;
  unsigned int v273;
  char v274;
  std::string::size_type v275;
  std::string::size_type v276;
  std::string::size_type v277;
  unint64_t v278;
  float *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  float *v284;
  float *v285;
  float *v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  char *v294;
  float *v295;
  float *v296;
  unint64_t v297;
  unint64_t v298;
  float v299;
  float v300;
  BOOL v301;
  float v302;
  float v303;
  float v304;
  BOOL v306;
  float v307;
  float v308;
  float v309;
  BOOL v311;
  float v312;
  uint64_t v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  int v317;
  uint64_t *v319;
  unint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v325;
  uint64_t v326;
  void (**v327)();
  uint64_t v328;
  int v329;
  void (**v330)();
  uint64_t v331;
  void *__p;
  void *v333;
  uint64_t v334;
  std::string __str;
  _DWORD *v336;
  std::string::size_type v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  _QWORD v341[4];
  char *v342;
  unint64_t v343;
  unint64_t v344;
  _DWORD *v345;
  unint64_t v346;
  char v347;
  _BYTE v348[9];

  v4 = a4;
  v6 = a1;
  v7 = a4[3];
  if (v7 == 1 && *((_BYTE *)a4 + 35) == 0)
  {
    if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1) == -1)
    {
      v138 = 0;
      v157 = 0xFFFFFFFFLL;
    }
    else
    {
      v342 = 0;
      v343 = 0;
      v344 = 0;
      v131 = *v4;
      v132 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v132 == -1)
        v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      a3[1] = *a3;
      (*(void (**)(_QWORD))(**(_QWORD **)(v131 + 16) + 56))(*(_QWORD *)(v131 + 16));
      if (v4[3] == 1)
      {
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        LODWORD(__str.__r_.__value_.__l.__data_) = *((_DWORD *)v4 + 9);
        LODWORD(__p) = 2139095040;
        if (*(float *)&__str.__r_.__value_.__l.__data_ == INFINITY && *((_DWORD *)v4 + 10) == -1)
        {
          v319 = v4;
          v133 = *a3;
          v134 = a3[1];
          v135 = v134 - *a3;
          v325 = v132;
          v136 = 0;
          if (v135 >= (int)v132)
          {
            v150 = 0;
            v138 = 0;
          }
          else
          {
            v137 = 0;
            v138 = 0;
            v139 = (int)v132;
            do
            {
              v140 = (unint64_t)a3[2];
              if ((unint64_t)v134 >= v140)
              {
                if ((v135 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v142 = v140 - (_QWORD)v133;
                v143 = v142 >> 1;
                if (v142 >> 1 <= v135 + 1)
                  v143 = v135 + 1;
                if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
                  v144 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v144 = v143;
                if (v144)
                  v144 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v144);
                else
                  v145 = 0;
                v146 = (float *)(v144 + 4 * v135);
                *v146 = INFINITY;
                v141 = v146 + 1;
                v148 = *a3;
                v147 = a3[1];
                if (v147 != *a3)
                {
                  do
                  {
                    v149 = *((_DWORD *)v147-- - 1);
                    *((_DWORD *)v146-- - 1) = v149;
                  }
                  while (v147 != v148);
                  v147 = *a3;
                }
                *a3 = v146;
                a3[1] = v141;
                a3[2] = (float *)(v144 + 4 * v145);
                if (v147)
                  operator delete(v147);
              }
              else
              {
                *v134 = INFINITY;
                v141 = v134 + 1;
              }
              a3[1] = v141;
              __str.__r_.__value_.__s.__data_[0] = 0;
              std::vector<BOOL>::push_back((uint64_t)&v342, &__str);
              if ((unint64_t)v137 >= v136)
              {
                v151 = (v137 - v138) >> 4;
                v152 = v151 + 1;
                if ((unint64_t)(v151 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v136 - (_QWORD)v138) >> 3 > v152)
                  v152 = (uint64_t)(v136 - (_QWORD)v138) >> 3;
                if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
                  v153 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v153 = v152;
                if (v153)
                  v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v153);
                else
                  v154 = 0;
                v155 = v153 + 16 * v151;
                *(_DWORD *)v155 = -1;
                *(_QWORD *)(v155 + 8) = -1;
                if (v137 == v138)
                {
                  v138 = (char *)(v153 + 16 * v151);
                }
                else
                {
                  v156 = (char *)(v153 + 16 * v151);
                  do
                  {
                    *((_OWORD *)v156 - 1) = *((_OWORD *)v137 - 1);
                    v156 -= 16;
                    v137 -= 16;
                  }
                  while (v137 != v138);
                  v137 = v138;
                  v138 = v156;
                }
                v136 = v153 + 16 * v154;
                v150 = (char *)(v155 + 16);
                if (v137)
                  operator delete(v137);
              }
              else
              {
                *(_DWORD *)v137 = -1;
                *((_QWORD *)v137 + 1) = -1;
                v150 = v137 + 16;
              }
              v133 = *a3;
              v134 = a3[1];
              v135 = v134 - *a3;
              v137 = v150;
            }
            while (v135 < v139);
          }
          v210 = (unint64_t)a3[2];
          if ((unint64_t)v134 >= v210)
          {
            if ((v135 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v212 = v210 - (_QWORD)v133;
            v213 = v212 >> 1;
            if (v212 >> 1 <= v135 + 1)
              v213 = v135 + 1;
            if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFFCLL)
              v214 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v214 = v213;
            if (v214)
              v214 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v214);
            else
              v215 = 0;
            v253 = (float *)(v214 + 4 * v135);
            v254 = v214 + 4 * v215;
            *v253 = 0.0;
            v211 = v253 + 1;
            v256 = *a3;
            v255 = a3[1];
            if (v255 != *a3)
            {
              do
              {
                v257 = *((_DWORD *)v255-- - 1);
                *((_DWORD *)v253-- - 1) = v257;
              }
              while (v255 != v256);
              v255 = *a3;
            }
            *a3 = v253;
            a3[1] = v211;
            a3[2] = (float *)v254;
            if (v255)
              operator delete(v255);
          }
          else
          {
            *v134 = 0.0;
            v211 = v134 + 1;
          }
          a3[1] = v211;
          if ((unint64_t)v150 >= v136)
          {
            v259 = (v150 - v138) >> 4;
            v260 = v259 + 1;
            if ((unint64_t)(v259 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v136 - (_QWORD)v138) >> 3 > v260)
              v260 = (uint64_t)(v136 - (_QWORD)v138) >> 3;
            if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
              v261 = 0xFFFFFFFFFFFFFFFLL;
            else
              v261 = v260;
            if (v261)
              v261 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v261);
            else
              v262 = 0;
            v263 = (_QWORD *)(v261 + 16 * v259);
            v136 = v261 + 16 * v262;
            *(_DWORD *)v263 = -1;
            v263[1] = -1;
            v258 = (char *)(v263 + 2);
            if (v150 != v138)
            {
              do
              {
                *((_OWORD *)v263 - 1) = *((_OWORD *)v150 - 1);
                v263 -= 2;
                v150 -= 16;
              }
              while (v150 != v138);
              v150 = v138;
            }
            v138 = (char *)v263;
            if (v150)
              operator delete(v150);
          }
          else
          {
            *(_DWORD *)v150 = -1;
            *((_QWORD *)v150 + 1) = -1;
            v258 = v150 + 16;
          }
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v131 + 16) + 24))(*(_QWORD *)(v131 + 16), v325);
          __str.__r_.__value_.__s.__data_[0] = 1;
          std::vector<BOOL>::push_back((uint64_t)&v342, &__str);
          v264 = INFINITY;
          v321 = -1;
          while (1)
          {
            if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v131 + 16) + 48))(*(_QWORD *)(v131 + 16)) & 1) != 0)
            {
LABEL_576:
              v216 = 1;
              goto LABEL_368;
            }
            v326 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v131 + 16) + 16))(*(_QWORD *)(v131 + 16));
            (*(void (**)(_QWORD))(**(_QWORD **)(v131 + 16) + 32))(*(_QWORD *)(v131 + 16));
            *(_QWORD *)&v342[((unint64_t)(int)v326 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v326);
            v265 = (*a3)[(int)v326];
            LODWORD(__str.__r_.__value_.__l.__data_) = (*(float (**)(std::string::size_type))(*(_QWORD *)a1 + 32))(a1);
            LODWORD(__p) = 2139095040;
            if (*(float *)&__str.__r_.__value_.__l.__data_ != INFINITY)
            {
              (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)a1 + 32))(a1, v326);
              v267 = NAN;
              if (v265 != -INFINITY && v266 != -INFINITY)
              {
                v267 = INFINITY;
                v268 = v266 == INFINITY || v265 == INFINITY;
                v269 = v265 + v266;
                if (!v268)
                  v267 = v269;
              }
              v216 = 0;
              if (v264 >= v267)
                v270 = v267;
              else
                v270 = v264;
              if (v267 == -INFINITY || v264 == -INFINITY)
                v270 = NAN;
              *(float *)&__str.__r_.__value_.__l.__data_ = v264;
              *(float *)&__p = v270;
              v273 = v321;
              if (v264 != v270)
                v273 = v326;
              v321 = v273;
              if (v264 != v270)
                v264 = v270;
              if (v264 == -INFINITY)
                goto LABEL_368;
              if (*((_BYTE *)v319 + 34))
                goto LABEL_576;
            }
            v337 = 0;
            (*(void (**)(std::string::size_type, uint64_t, std::string *))(*(_QWORD *)a1 + 136))(a1, v326, &__str);
            while (1)
            {
              if (!__str.__r_.__value_.__r.__words[0])
              {
                v277 = v337;
                if (v337 >= __str.__r_.__value_.__r.__words[2])
                {
                  v317 = 0;
                  goto LABEL_572;
                }
                goto LABEL_493;
              }
              v274 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                       + 24))(__str.__r_.__value_.__r.__words[0]);
              v275 = __str.__r_.__value_.__r.__words[0];
              if ((v274 & 1) != 0)
                break;
              if (__str.__r_.__value_.__r.__words[0])
              {
                v276 = (*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
                goto LABEL_528;
              }
              v277 = v337;
LABEL_493:
              v276 = __str.__r_.__value_.__l.__size_ + 16 * v277;
LABEL_528:
              while (1)
              {
                v295 = *a3;
                v296 = a3[1];
                v297 = v296 - *a3;
                v298 = *(int *)(v276 + 12);
                if (v297 > v298)
                  break;
                v278 = (unint64_t)a3[2];
                if ((unint64_t)v296 >= v278)
                {
                  if ((v297 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v280 = v278 - (_QWORD)v295;
                  v281 = v280 >> 1;
                  if (v280 >> 1 <= v297 + 1)
                    v281 = v297 + 1;
                  if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFFCLL)
                    v282 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v282 = v281;
                  if (v282)
                    v282 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v282);
                  else
                    v283 = 0;
                  v284 = (float *)(v282 + 4 * v297);
                  *v284 = INFINITY;
                  v279 = v284 + 1;
                  v286 = *a3;
                  v285 = a3[1];
                  if (v285 != *a3)
                  {
                    do
                    {
                      v287 = *((_DWORD *)v285-- - 1);
                      *((_DWORD *)v284-- - 1) = v287;
                    }
                    while (v285 != v286);
                    v285 = *a3;
                  }
                  *a3 = v284;
                  a3[1] = v279;
                  a3[2] = (float *)(v282 + 4 * v283);
                  if (v285)
                    operator delete(v285);
                }
                else
                {
                  *v296 = INFINITY;
                  v279 = v296 + 1;
                }
                a3[1] = v279;
                LOBYTE(__p) = 0;
                std::vector<BOOL>::push_back((uint64_t)&v342, &__p);
                if ((unint64_t)v258 >= v136)
                {
                  v288 = (v258 - v138) >> 4;
                  v289 = v288 + 1;
                  if ((unint64_t)(v288 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v136 - (_QWORD)v138) >> 3 > v289)
                    v289 = (uint64_t)(v136 - (_QWORD)v138) >> 3;
                  if (v136 - (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
                    v290 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v290 = v289;
                  if (v290)
                    v290 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v290);
                  else
                    v291 = 0;
                  v292 = v290 + 16 * v288;
                  *(_DWORD *)v292 = -1;
                  *(_QWORD *)(v292 + 8) = -1;
                  if (v258 == v138)
                  {
                    v294 = v258;
                    v138 = (char *)(v290 + 16 * v288);
                  }
                  else
                  {
                    v293 = (char *)(v290 + 16 * v288);
                    do
                    {
                      *((_OWORD *)v293 - 1) = *((_OWORD *)v258 - 1);
                      v293 -= 16;
                      v258 -= 16;
                    }
                    while (v258 != v138);
                    v294 = v138;
                    v138 = v293;
                  }
                  v136 = v290 + 16 * v291;
                  v258 = (char *)(v292 + 16);
                  if (v294)
                    operator delete(v294);
                }
                else
                {
                  *(_DWORD *)v258 = -1;
                  *((_QWORD *)v258 + 1) = -1;
                  v258 += 16;
                }
              }
              v299 = NAN;
              if (v265 != -INFINITY)
              {
                v300 = *(float *)(v276 + 8);
                v299 = NAN;
                if (v300 != -INFINITY)
                {
                  v299 = INFINITY;
                  v301 = v300 == INFINITY || v265 == INFINITY;
                  v302 = v265 + v300;
                  if (!v301)
                    v299 = v302;
                }
              }
              v303 = v295[v298];
              if (v303 >= v299)
                v304 = v299;
              else
                v304 = v295[v298];
              v306 = v299 == -INFINITY || v303 == -INFINITY;
              v307 = NAN;
              if (!v306)
                v307 = v304;
              LODWORD(__p) = 0;
              *(float *)&__p = v295[v298];
              *(float *)&v330 = v307;
              if (*(float *)&__p != v307)
              {
                v308 = v295[v298];
                if (v308 >= v299)
                  v309 = v299;
                else
                  v309 = v295[v298];
                v311 = v299 == -INFINITY || v308 == -INFINITY;
                v312 = NAN;
                if (!v311)
                  v312 = v309;
                v295[v298] = v312;
                v317 = 1;
                v275 = __str.__r_.__value_.__r.__words[0];
                if (v312 == -INFINITY)
                  goto LABEL_570;
                if (__str.__r_.__value_.__r.__words[0])
                  v313 = (*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 48))();
                else
                  v313 = v337;
                v314 = *(int *)(v276 + 12);
                v315 = &v138[16 * v314];
                *(_DWORD *)v315 = v326;
                *((_QWORD *)v315 + 1) = v313;
                v316 = **(_QWORD **)(v131 + 16);
                if (((*(_QWORD *)&v342[(v314 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v314) & 1) != 0)
                {
                  (*(void (**)(void))(v316 + 40))();
                }
                else
                {
                  (*(void (**)(void))(v316 + 24))();
                  *(_QWORD *)&v342[((unint64_t)*(int *)(v276 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v276 + 12);
                }
              }
              if (__str.__r_.__value_.__r.__words[0])
                (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
              else
                ++v337;
            }
            v317 = 0;
LABEL_570:
            if (v275)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)v275 + 8))(v275);
            }
            else
            {
LABEL_572:
              if (v336)
                --*v336;
            }
            if (v317)
            {
              v216 = 0;
              goto LABEL_368;
            }
          }
        }
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v160 = fst::LogMessage::LogMessage((fst *)&v330, (uint64_t)&__p);
        v161 = (_QWORD *)fst::cerr(v160);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
      }
      else
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v158 = fst::LogMessage::LogMessage((fst *)&v330, (uint64_t)&__p);
        v159 = (_QWORD *)fst::cerr(v158);
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" instead", 8);
      }
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v330);
      if (SHIBYTE(v334) < 0)
        operator delete(__p);
      v138 = 0;
      v216 = 0;
      v321 = -1;
LABEL_368:
      if (v342)
        operator delete(v342);
      v6 = a1;
      v157 = v321;
      if (!v216)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
        goto LABEL_392;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
    v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 272))(a2, v217);
    v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v218);
    if ((_DWORD)v157 != -1)
    {
      v219 = -1;
      v220 = -1;
      v221 = v157;
      while (1)
      {
        v222 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
        if (v220 != -1)
          break;
        (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)a1 + 32))(a1, v157);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v222);
LABEL_385:
        v220 = v221;
        v219 = v222;
        v221 = *(unsigned int *)&v138[16 * (int)v221];
        if ((_DWORD)v221 == -1)
          goto LABEL_389;
      }
      v337 = 0;
      (*(void (**)(std::string::size_type, uint64_t, std::string *))(*(_QWORD *)a1 + 136))(a1, v221, &__str);
      v223 = *(_QWORD *)&v138[16 * v220 + 8];
      if (__str.__r_.__value_.__r.__words[0])
      {
        (*(void (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                               + 64))(__str.__r_.__value_.__r.__words[0], v223);
        if (__str.__r_.__value_.__r.__words[0])
        {
          v224 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))(__str.__r_.__value_.__r.__words[0]);
          goto LABEL_381;
        }
        v223 = v337;
      }
      else
      {
        v337 = *(_QWORD *)&v138[16 * v220 + 8];
      }
      v224 = __str.__r_.__value_.__l.__size_ + 16 * v223;
LABEL_381:
      v225 = *(_DWORD *)(v224 + 8);
      v342 = *(char **)v224;
      v343 = __PAIR64__(v219, v225);
      (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)a2 + 200))(a2, v222, &v342);
      if (__str.__r_.__value_.__r.__words[0])
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))(__str.__r_.__value_.__r.__words[0]);
      }
      else if (v336)
      {
        --*v336;
      }
      goto LABEL_385;
    }
    v222 = 0xFFFFFFFFLL;
LABEL_389:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, v222);
    if ((*(uint64_t (**)(std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
    v226 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
    v227 = fst::ShortestPathProperties(v226, 0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v227, 0x3FFFFFFF0007);
LABEL_392:
    if (v138)
      operator delete(v138);
    return;
  }
  if (!v7)
    return;
  v320 = a4[3];
  if (*((_BYTE *)a4 + 33))
    goto LABEL_286;
  __str.__r_.__value_.__r.__words[0] = a1;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  __str.__r_.__value_.__r.__words[2] = *a4;
  HIDWORD(v336) = *((_DWORD *)a4 + 4);
  LOWORD(v337) = *((unsigned __int8 *)a4 + 20);
  v338 = 0u;
  v339 = 0u;
  v340 = 0u;
  memset(v341, 0, 29);
  a3[1] = *a3;
  v9 = *((_DWORD *)a4 + 3);
  if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)a1 + 24))(a1) == -1)
  {
    v163 = (*(uint64_t (**)(std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                              + 64))(__str.__r_.__value_.__r.__words[0], 4, 0);
LABEL_278:
    if (v163)
      BYTE4(v341[3]) = 1;
    goto LABEL_280;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16) + 56))(*(_QWORD *)(__str.__r_.__value_.__r.__words[2] + 16));
  if (!BYTE1(v337))
  {
    *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 8) = *(_QWORD *)__str.__r_.__value_.__l.__size_;
    *((_QWORD *)&v338 + 1) = v338;
    *(_QWORD *)&v340 = 0;
  }
  if (v9 == -1)
    v9 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]);
  size = (void **)__str.__r_.__value_.__l.__size_;
  v11 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
  v12 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
  v13 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
  for (i = ((uint64_t)v12 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2;
        i <= v9;
        i = ((uint64_t)v12 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2)
  {
    v15 = (unint64_t)size[2];
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 62)
        goto LABEL_582;
      v17 = v15 - v13;
      v18 = v17 >> 1;
      if (v17 >> 1 <= i + 1)
        v18 = i + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v19);
      else
        v20 = 0;
      v21 = (_DWORD *)(v19 + 4 * i);
      *v21 = 2139095040;
      v16 = v21 + 1;
      v22 = (char *)*v11;
      v23 = (char *)*size;
      if (*v11 != *size)
      {
        do
        {
          v24 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *--v21 = v24;
        }
        while (v22 != v23);
        v22 = (char *)*size;
      }
      *size = v21;
      *v11 = v16;
      size[2] = (void *)(v19 + 4 * v20);
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v12 = 2139095040;
      v16 = v12 + 1;
    }
    *v11 = v16;
    v25 = *((_QWORD *)&v338 + 1);
    if (*((_QWORD *)&v338 + 1) >= (unint64_t)v339)
    {
      v27 = (uint64_t)(*((_QWORD *)&v338 + 1) - v338) >> 2;
      if ((unint64_t)(v27 + 1) >> 62)
LABEL_582:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)(v339 - v338) >> 1;
      if (v28 <= v27 + 1)
        v28 = v27 + 1;
      if ((_QWORD)v339 - (_QWORD)v338 >= 0x7FFFFFFFFFFFFFFCuLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v29);
      else
        v30 = 0;
      v31 = (_DWORD *)(v29 + 4 * v27);
      *v31 = 2139095040;
      v26 = v31 + 1;
      v32 = (char *)*((_QWORD *)&v338 + 1);
      v33 = (char *)v338;
      if (*((_QWORD *)&v338 + 1) != (_QWORD)v338)
      {
        do
        {
          v34 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *--v31 = v34;
        }
        while (v32 != v33);
        v32 = (char *)v338;
      }
      *(_QWORD *)&v338 = v31;
      *((_QWORD *)&v338 + 1) = v26;
      *(_QWORD *)&v339 = v29 + 4 * v30;
      if (v32)
        operator delete(v32);
    }
    else
    {
      **((_DWORD **)&v338 + 1) = 2139095040;
      v26 = (_DWORD *)(v25 + 4);
    }
    *((_QWORD *)&v338 + 1) = v26;
    LOBYTE(v342) = 0;
    std::vector<BOOL>::push_back((uint64_t)&v339 + 8, &v342);
    size = (void **)__str.__r_.__value_.__l.__size_;
    v11 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
    v12 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
    v13 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
  }
  if (BYTE1(v337))
  {
    v35 = (char *)v341[0];
    v36 = (char *)v341[1];
    v37 = (uint64_t)(v341[1] - v341[0]) >> 2;
    if (v37 <= v9)
    {
      do
      {
        if ((unint64_t)v36 >= v341[2])
        {
          v39 = v37 + 1;
          if ((v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = v341[2] - (_QWORD)v35;
          if ((uint64_t)(v341[2] - (_QWORD)v35) >> 1 > v39)
            v39 = v40 >> 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v341[2], v41);
            v35 = (char *)v341[0];
            v36 = (char *)v341[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[4 * v37];
          *(_DWORD *)v43 = -1;
          v38 = v43 + 4;
          while (v36 != v35)
          {
            v44 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          v341[0] = v43;
          v341[1] = v38;
          v341[2] = &v42[4 * v41];
          if (v35)
          {
            operator delete(v35);
            v35 = (char *)v341[0];
          }
          else
          {
            v35 = v43;
          }
        }
        else
        {
          *(_DWORD *)v36 = -1;
          v38 = v36 + 4;
        }
        v341[1] = v38;
        v37 = (v38 - v35) >> 2;
        v36 = v38;
      }
      while (v37 <= v9);
      v13 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
    }
    *(_DWORD *)&v35[4 * v9] = v341[3];
  }
  *(_DWORD *)(v13 + 4 * v9) = 0;
  *(_DWORD *)(v338 + 4 * v9) = 0;
  *(_QWORD *)(*((_QWORD *)&v339 + 1) + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16) + 24))(*(_QWORD *)(__str.__r_.__value_.__r.__words[2] + 16), v9);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16) + 48))(*(_QWORD *)(__str.__r_.__value_.__r.__words[2] + 16)) & 1) != 0)
      goto LABEL_276;
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16) + 16))(*(_QWORD *)(__str.__r_.__value_.__r.__words[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16) + 32))(*(_QWORD *)(__str.__r_.__value_.__r.__words[2] + 16));
    v46 = (int)v45;
    v47 = (void **)__str.__r_.__value_.__l.__size_;
    v48 = v45;
    v49 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
    v50 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
    v51 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
    v52 = ((uint64_t)v50 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2;
    v322 = v48;
    if (v52 <= (int)v48)
    {
      do
      {
        v53 = (unint64_t)v47[2];
        if ((unint64_t)v50 >= v53)
        {
          if ((v52 + 1) >> 62)
            goto LABEL_582;
          v55 = v53 - v51;
          v56 = v55 >> 1;
          if (v55 >> 1 <= v52 + 1)
            v56 = v52 + 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
            v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v57);
          else
            v58 = 0;
          v59 = (_DWORD *)(v57 + 4 * v52);
          *v59 = 2139095040;
          v54 = v59 + 1;
          v60 = (char *)*v49;
          v61 = (char *)*v47;
          if (*v49 != *v47)
          {
            do
            {
              v62 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v59 = v62;
            }
            while (v60 != v61);
            v60 = (char *)*v47;
          }
          *v47 = v59;
          *v49 = v54;
          v47[2] = (void *)(v57 + 4 * v58);
          if (v60)
            operator delete(v60);
        }
        else
        {
          *v50 = 2139095040;
          v54 = v50 + 1;
        }
        *v49 = v54;
        v63 = *((_QWORD *)&v338 + 1);
        if (*((_QWORD *)&v338 + 1) >= (unint64_t)v339)
        {
          v65 = (uint64_t)(*((_QWORD *)&v338 + 1) - v338) >> 2;
          if ((unint64_t)(v65 + 1) >> 62)
            goto LABEL_582;
          v66 = (uint64_t)(v339 - v338) >> 1;
          if (v66 <= v65 + 1)
            v66 = v65 + 1;
          if ((_QWORD)v339 - (_QWORD)v338 >= 0x7FFFFFFFFFFFFFFCuLL)
            v67 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v67);
          else
            v68 = 0;
          v69 = (_DWORD *)(v67 + 4 * v65);
          *v69 = 2139095040;
          v64 = v69 + 1;
          v70 = (char *)*((_QWORD *)&v338 + 1);
          v71 = (char *)v338;
          if (*((_QWORD *)&v338 + 1) != (_QWORD)v338)
          {
            do
            {
              v72 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *--v69 = v72;
            }
            while (v70 != v71);
            v70 = (char *)v338;
          }
          *(_QWORD *)&v338 = v69;
          *((_QWORD *)&v338 + 1) = v64;
          *(_QWORD *)&v339 = v67 + 4 * v68;
          if (v70)
            operator delete(v70);
        }
        else
        {
          **((_DWORD **)&v338 + 1) = 2139095040;
          v64 = (_DWORD *)(v63 + 4);
        }
        *((_QWORD *)&v338 + 1) = v64;
        LOBYTE(v342) = 0;
        std::vector<BOOL>::push_back((uint64_t)&v339 + 8, &v342);
        v47 = (void **)__str.__r_.__value_.__l.__size_;
        v49 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
        v50 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
        v51 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
        v52 = ((uint64_t)v50 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2;
      }
      while (v52 <= v46);
    }
    if ((_BYTE)v337)
    {
      LODWORD(v342) = (*(float (**)(std::string::size_type, uint64_t))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                               + 32))(__str.__r_.__value_.__r.__words[0], v322);
      LODWORD(__p) = 2139095040;
      if (*(float *)&v342 != INFINITY)
      {
LABEL_276:
        ++LODWORD(v341[3]);
        v163 = (*(uint64_t (**)(std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                                  + 64))(__str.__r_.__value_.__r.__words[0], 4, 0);
        goto LABEL_278;
      }
    }
    *(_QWORD *)(*((_QWORD *)&v339 + 1) + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    v73 = *(float *)(v338 + 4 * v46);
    *(_DWORD *)(v338 + 4 * v46) = 2139095040;
    v346 = 0;
    (*(void (**)(std::string::size_type, uint64_t, char **))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 136))(__str.__r_.__value_.__r.__words[0], v322, &v342);
    while (1)
    {
      if (v342)
      {
        if (((*(uint64_t (**)(char *))(*(_QWORD *)v342 + 24))(v342) & 1) != 0)
          goto LABEL_217;
        if (v342)
        {
          v74 = (*(uint64_t (**)(char *))(*(_QWORD *)v342 + 32))(v342);
          goto LABEL_115;
        }
        v75 = v346;
      }
      else
      {
        v75 = v346;
        if (v346 >= v344)
        {
LABEL_217:
          v130 = 1;
          goto LABEL_219;
        }
      }
      v74 = v343 + 16 * v75;
LABEL_115:
      v76 = (void **)__str.__r_.__value_.__l.__size_;
      v77 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
      v78 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
      v79 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
      v80 = ((uint64_t)v78 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2;
      if (v80 <= *(int *)(v74 + 12))
      {
        do
        {
          v82 = (unint64_t)v76[2];
          if ((unint64_t)v78 >= v82)
          {
            if ((v80 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v84 = v82 - v79;
            v85 = v84 >> 1;
            if (v84 >> 1 <= v80 + 1)
              v85 = v80 + 1;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
              v86 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v86 = v85;
            if (v86)
              v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v86);
            else
              v87 = 0;
            v88 = (_DWORD *)(v86 + 4 * v80);
            *v88 = 2139095040;
            v83 = v88 + 1;
            v89 = (char *)*v77;
            v90 = (char *)*v76;
            if (*v77 != *v76)
            {
              do
              {
                v91 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *--v88 = v91;
              }
              while (v89 != v90);
              v89 = (char *)*v76;
            }
            *v76 = v88;
            *v77 = v83;
            v76[2] = (void *)(v86 + 4 * v87);
            if (v89)
              operator delete(v89);
          }
          else
          {
            *v78 = 2139095040;
            v83 = v78 + 1;
          }
          *v77 = v83;
          v92 = *((_QWORD *)&v338 + 1);
          if (*((_QWORD *)&v338 + 1) >= (unint64_t)v339)
          {
            v94 = (uint64_t)(*((_QWORD *)&v338 + 1) - v338) >> 2;
            if ((unint64_t)(v94 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v95 = (uint64_t)(v339 - v338) >> 1;
            if (v95 <= v94 + 1)
              v95 = v94 + 1;
            if ((_QWORD)v339 - (_QWORD)v338 >= 0x7FFFFFFFFFFFFFFCuLL)
              v96 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v96 = v95;
            if (v96)
              v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v96);
            else
              v97 = 0;
            v98 = (_DWORD *)(v96 + 4 * v94);
            *v98 = 2139095040;
            v93 = v98 + 1;
            v99 = (char *)*((_QWORD *)&v338 + 1);
            v100 = (char *)v338;
            if (*((_QWORD *)&v338 + 1) != (_QWORD)v338)
            {
              do
              {
                v101 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *--v98 = v101;
              }
              while (v99 != v100);
              v99 = (char *)v338;
            }
            *(_QWORD *)&v338 = v98;
            *((_QWORD *)&v338 + 1) = v93;
            *(_QWORD *)&v339 = v96 + 4 * v97;
            if (v99)
              operator delete(v99);
          }
          else
          {
            **((_DWORD **)&v338 + 1) = 2139095040;
            v93 = (_DWORD *)(v92 + 4);
          }
          *((_QWORD *)&v338 + 1) = v93;
          LOBYTE(__p) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v339 + 8, &__p);
          v76 = (void **)__str.__r_.__value_.__l.__size_;
          v77 = (void **)(__str.__r_.__value_.__l.__size_ + 8);
          v78 = *(_DWORD **)(__str.__r_.__value_.__l.__size_ + 8);
          v79 = *(_QWORD *)__str.__r_.__value_.__l.__size_;
          v80 = ((uint64_t)v78 - *(_QWORD *)__str.__r_.__value_.__l.__size_) >> 2;
          v81 = *(int *)(v74 + 12);
        }
        while (v80 <= v81);
      }
      else
      {
        LODWORD(v81) = *(_DWORD *)(v74 + 12);
      }
      if (BYTE1(v337))
      {
        v102 = (char *)v341[0];
        v103 = (char *)v341[1];
        v104 = (uint64_t)(v341[1] - v341[0]) >> 2;
        if (v104 <= (int)v81)
        {
          do
          {
            if ((unint64_t)v103 >= v341[2])
            {
              v107 = v104 + 1;
              if ((v104 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v108 = v341[2] - (_QWORD)v102;
              if ((uint64_t)(v341[2] - (_QWORD)v102) >> 1 > v107)
                v107 = v108 >> 1;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                v109 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109)
              {
                v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v341[2], v109);
                v102 = (char *)v341[0];
                v103 = (char *)v341[1];
              }
              else
              {
                v110 = 0;
              }
              v111 = &v110[4 * v104];
              *(_DWORD *)v111 = -1;
              v106 = v111 + 4;
              while (v103 != v102)
              {
                v112 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v111 - 1) = v112;
                v111 -= 4;
              }
              v341[0] = v111;
              v341[1] = v106;
              v341[2] = &v110[4 * v109];
              if (v102)
              {
                operator delete(v102);
                v102 = (char *)v341[0];
              }
              else
              {
                v102 = v111;
              }
            }
            else
            {
              *(_DWORD *)v103 = -1;
              v106 = v103 + 4;
            }
            v341[1] = v106;
            v104 = (v106 - v102) >> 2;
            LODWORD(v81) = *(_DWORD *)(v74 + 12);
            v103 = v106;
          }
          while (v104 <= (int)v81);
          v105 = (int)v81;
          v76 = (void **)__str.__r_.__value_.__l.__size_;
        }
        else
        {
          v105 = (int)v81;
        }
        if (*(_DWORD *)&v102[4 * v105] != LODWORD(v341[3]))
        {
          *((_DWORD *)*v76 + v105) = 2139095040;
          *(_DWORD *)(v338 + 4 * *(int *)(v74 + 12)) = 2139095040;
          v81 = *(int *)(v74 + 12);
          *(_QWORD *)(*((_QWORD *)&v339 + 1) + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v81);
          *(_DWORD *)(v341[0] + 4 * v81) = v341[3];
          v76 = (void **)__str.__r_.__value_.__l.__size_;
          LODWORD(v81) = *(_DWORD *)(v74 + 12);
        }
      }
      v113 = (float *)*v76;
      v114 = v338;
      v115 = NAN;
      if (v73 != -INFINITY)
      {
        v116 = *(float *)(v74 + 8);
        v115 = NAN;
        if (v116 != -INFINITY)
        {
          v115 = INFINITY;
          v117 = v116 == INFINITY || v73 == INFINITY;
          v118 = v73 + v116;
          if (!v117)
            v115 = v118;
        }
      }
      v119 = v113[(int)v81];
      if (v119 >= v115)
        v120 = v115;
      else
        v120 = v113[(int)v81];
      if (v115 == -INFINITY || v119 == -INFINITY)
        v120 = NAN;
      if (v120 > (float)(v119 + *((float *)&v336 + 1)) || v119 > (float)(*((float *)&v336 + 1) + v120))
        break;
LABEL_214:
      if (v342)
        (*(void (**)(char *))(*(_QWORD *)v342 + 40))(v342);
      else
        ++v346;
    }
    v113[(int)v81] = v120;
    v124 = *(float *)(v114 + 4 * (int)v81);
    if (v124 >= v115)
      v125 = v115;
    else
      v125 = *(float *)(v114 + 4 * (int)v81);
    v127 = v115 == -INFINITY || v124 == -INFINITY;
    v128 = NAN;
    if (!v127)
      v128 = v125;
    *(float *)(v114 + 4 * (int)v81) = v128;
    if (v113[(int)v81] != -INFINITY && (v128 < -INFINITY || v128 > -INFINITY))
    {
      v129 = **(_QWORD **)(__str.__r_.__value_.__r.__words[2] + 16);
      if (((*(_QWORD *)(*((_QWORD *)&v339 + 1) + (((unint64_t)*(int *)(v74 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v74 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v129 + 40))();
      }
      else
      {
        (*(void (**)(void))(v129 + 24))();
        *(_QWORD *)(*((_QWORD *)&v339 + 1) + (((unint64_t)*(int *)(v74 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v74 + 12);
      }
      goto LABEL_214;
    }
    v130 = 0;
    BYTE4(v341[3]) = 1;
LABEL_219:
    if (v342)
    {
      (*(void (**)(char *))(*(_QWORD *)v342 + 8))(v342);
    }
    else if (v345)
    {
      --*v345;
    }
  }
  while ((v130 & 1) != 0);
LABEL_280:
  v4 = a4;
  v6 = a1;
  if (BYTE4(v341[3]))
  {
    a3[1] = *a3;
    LODWORD(v342) = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize(a3, &v342);
  }
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ShortestDistanceState(&__str);
  v164 = *a3;
  if ((char *)a3[1] - (char *)*a3 == 4 && *v164 >= -INFINITY && *v164 <= -INFINITY)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
    return;
  }
LABEL_286:
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorFst(&v330);
  fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(v6, (uint64_t *)&v330);
  v329 = 2139095040;
  v165 = **(_QWORD **)(v331 + 64);
  v167 = *(_QWORD *)(v165 + 24);
  v166 = *(_QWORD *)(v165 + 32);
  v168 = *a3;
  if (v166 == v167)
    v169 = 0;
  else
    v169 = *(_QWORD *)(v165 + 24);
  if (v166 == v167)
  {
    v171 = a3[1];
    v173 = INFINITY;
  }
  else
  {
    v170 = (v166 - v167) >> 4;
    v171 = a3[1];
    if (v170 <= 1)
      v170 = 1;
    v172 = (float *)(v169 + 12);
    v173 = INFINITY;
    do
    {
      v174 = *(int *)v172 - 1;
      if (v171 - v168 > v174)
      {
        v175 = *(v172 - 1);
        v176 = NAN;
        if (v175 != -INFINITY)
        {
          v177 = v168[v174];
          v176 = NAN;
          if (v177 != -INFINITY)
          {
            v176 = INFINITY;
            v178 = v177 == INFINITY || v175 == INFINITY;
            v179 = v175 + v177;
            if (!v178)
              v176 = v179;
          }
        }
        if (v173 >= v176)
          v180 = v176;
        else
          v180 = v173;
        v182 = v173 == -INFINITY || v176 == -INFINITY;
        v173 = NAN;
        if (!v182)
          v173 = v180;
        v329 = LODWORD(v173);
      }
      v172 += 4;
      --v170;
    }
    while (v170);
  }
  v183 = (unint64_t)a3[2];
  if ((unint64_t)v171 < v183)
  {
    if (v168 == v171)
    {
      *v171 = v173;
      a3[1] = v171 + 1;
    }
    else
    {
      v184 = v168 + 1;
      v185 = v171 - 1;
      v186 = v171;
      if ((unint64_t)v171 >= 4)
      {
        v186 = v171;
        do
        {
          v187 = *(_DWORD *)v185++;
          *(_DWORD *)v186++ = v187;
        }
        while (v185 < v171);
      }
      a3[1] = v186;
      if (v171 != v184)
        memmove(&v171[-(v171 - v184)], v168, (char *)v171 - (char *)v184);
      v188 = &v329;
      if (v168 <= (float *)&v329)
        v188 = &v329 + (a3[1] > (float *)&v329);
      *(_DWORD *)v168 = *v188;
    }
    goto LABEL_347;
  }
  v189 = v171 - v168 + 1;
  if (v189 >> 62)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v190 = v183 - (_QWORD)v168;
  if (v190 >> 1 > v189)
    v189 = v190 >> 1;
  if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
    v191 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v191 = v189;
  if (!v191)
  {
    v194 = 0;
    goto LABEL_337;
  }
  v192 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v191);
  v194 = v192;
  if (!v193)
  {
LABEL_337:
    v196 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(1uLL);
    v195 = (float *)&v196[v197];
    if (v194)
      operator delete(v194);
    v194 = v196;
    goto LABEL_340;
  }
  v195 = (float *)&v192[v193];
LABEL_340:
  *v194 = v329;
  v198 = (char *)(v194 + 1);
  v199 = *a3;
  if (*a3 != v168)
  {
    v200 = v168;
    do
    {
      v201 = *((_DWORD *)v200-- - 1);
      *--v194 = v201;
    }
    while (v200 != v199);
  }
  v202 = a3[1];
  v203 = (char *)v202 - (char *)v168;
  if (v202 != v168)
    memmove(v198, v168, (char *)v202 - (char *)v168);
  v204 = *a3;
  *a3 = (float *)v194;
  a3[1] = (float *)&v198[v203];
  a3[2] = v195;
  if (v204)
    operator delete(v204);
LABEL_347:
  if (*((_BYTE *)v4 + 32))
  {
    __p = 0;
    v333 = 0;
    v334 = 0;
    v205 = *((_DWORD *)v4 + 4);
    v206 = FLAGS_fst_default_cache_gc;
    v207 = FLAGS_fst_default_cache_gc_limit;
    v327 = (void (**)())&off_1EA924C70;
    v328 = 0;
    if (!((uint64_t (*)(void (***)(), uint64_t, uint64_t))v330[8])(&v330, 0x10000, 1))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&v342, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&v342, "ERROR");
      v208 = fst::LogMessage::LogMessage((fst *)&v347, (uint64_t)&v342);
      v209 = (_QWORD *)fst::cerr(v208);
      v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"DeterminizeFst:", 15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, (uint64_t)" distance to final states computed for acceptors only", 53);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v347);
      if (SHIBYTE(v344) < 0)
        operator delete(v342);
      MEMORY[8] |= 4uLL;
    }
    v229 = operator new();
    *(_QWORD *)v229 = &off_1EA925668;
    *(_QWORD *)(v229 + 8) = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v229 + 16), "null");
    *(_QWORD *)(v229 + 40) = 0;
    v230 = (uint64_t *)(v229 + 40);
    *(_QWORD *)(v229 + 48) = 0;
    *(_DWORD *)(v229 + 56) = 1;
    *(_QWORD *)v229 = &off_1EA924718;
    *(_BYTE *)(v229 + 60) = 0;
    *(_DWORD *)(v229 + 64) = -1;
    *(_OWORD *)(v229 + 68) = 0u;
    *(_OWORD *)(v229 + 84) = 0u;
    *(_DWORD *)(v229 + 100) = -1;
    *(_BYTE *)(v229 + 104) = v206;
    *(_QWORD *)(v229 + 112) = v207;
    v231 = operator new();
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(v231, v206);
    *(_BYTE *)(v231 + 88) = v207 == 0;
    *(_DWORD *)(v231 + 92) = -1;
    *(_QWORD *)(v231 + 96) = 0;
    *(_BYTE *)(v231 + 104) = v206;
    v232 = 8096;
    if (v207 > 0x1FA0)
      v232 = v207;
    *(_QWORD *)(v231 + 112) = v232;
    *(_BYTE *)(v231 + 120) = 0;
    *(_QWORD *)(v231 + 128) = 0;
    *(_QWORD *)(v229 + 120) = v231;
    *(_BYTE *)(v229 + 128) = 1;
    *(_QWORD *)v229 = off_1EA9255B8;
    *(_QWORD *)(v229 + 136) = ((uint64_t (*)(void (***)(), _QWORD))v330[11])(&v330, 0);
    std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
    std::string::operator=((std::string *)(v229 + 16), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v233 = ((uint64_t (*)(void (***)(), uint64_t, _QWORD))v330[8])(&v330, 0x3FFFFFFF0007, 0);
    *(_QWORD *)(v229 + 8) = *(_QWORD *)(v229 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v233, 0, 1) & 0x3FFFFFFF0004;
    v234 = ((uint64_t (*)(void (***)()))v330[14])(&v330);
    v235 = *v230;
    if (*v230 != v234)
    {
      if (v235)
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
      if (v234)
        v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v234 + 16))(v234);
      else
        v236 = 0;
      *v230 = v236;
    }
    v237 = ((uint64_t (*)(void (***)()))v330[15])(&v330);
    v238 = *(_QWORD *)(v229 + 48);
    if (v238 != v237)
    {
      if (v238)
        (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
      if (v237)
        v239 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v237 + 16))(v237);
      else
        v239 = 0;
      *(_QWORD *)(v229 + 48) = v239;
    }
    *(_QWORD *)v229 = &off_1EA9252A8;
    *(_DWORD *)(v229 + 144) = v205;
    *(_QWORD *)(v229 + 152) = a3;
    *(_QWORD *)(v229 + 160) = &__p;
    v240 = (_QWORD *)operator new();
    *v240 = ((uint64_t (*)(void (***)(), _QWORD))v330[11])(&v330, 0);
    *(_QWORD *)(v229 + 176) = v240;
    v241 = (_QWORD *)operator new();
    *v241 = 0;
    v241[2] = v241 + 1;
    v241[3] = v241 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v241 + 4), 0, v241 + 2, v241 + 3);
    v241[13] = 0;
    v241[14] = 0;
    v241[15] = 0;
    *(_QWORD *)(v229 + 184) = v241;
    if (!((uint64_t (*)(void (***)(), uint64_t, uint64_t))v330[8])(&v330, 0x10000, 1))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
      v242 = fst::LogMessage::LogMessage((fst *)v348, (uint64_t)&__str);
      v243 = (_QWORD *)fst::cerr(v242);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v348);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      *(_QWORD *)(v229 + 8) |= 4uLL;
    }
    v244 = *(_QWORD **)(v229 + 160);
    if (v244)
      v244[1] = *v244;
    v328 = v229;
    fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v327, a2, (uint64_t *)&__p, v320, *((_DWORD *)v4 + 10), *((unsigned __int8 *)v4 + 35), *((float *)v4 + 4), *((float *)v4 + 9));
    v327 = off_1EA925DC0;
    v245 = v328;
    if (v328)
    {
      v246 = *(_DWORD *)(v328 + 56) - 1;
      *(_DWORD *)(v328 + 56) = v246;
      if (!v246)
        (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
    }
    if (__p)
    {
      v333 = __p;
      operator delete(__p);
    }
  }
  else
  {
    fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>((uint64_t)&v330, a2, (uint64_t *)a3, v320, *((_DWORD *)v4 + 10), *((unsigned __int8 *)v4 + 35), *((float *)v4 + 4), *((float *)v4 + 9));
  }
  v248 = *a3;
  v247 = a3[1];
  v249 = *a3 + 1;
  v250 = (char *)v247 - (char *)v249;
  if (v247 != v249)
    memmove(*a3, v249, (char *)v247 - (char *)v249);
  a3[1] = (float *)((char *)v248 + v250);
  v330 = off_1EA925838;
  v251 = v331;
  if (v331)
  {
    v252 = *(_DWORD *)(v331 + 56) - 1;
    *(_DWORD *)(v331 + 56) = v252;
    if (!v252)
      (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  }
}

void sub_1DEA4CCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  int v39;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v36 - 105));
  if (a33 < 0)
    operator delete(__p);
  *v35 = v34;
  v38 = v35[17];
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v35);
  MEMORY[0x1DF0ED014](v35, 0x10F3C405CF36722);
  if (a22)
    operator delete(a22);
  if (a21)
  {
    v39 = a21[14] - 1;
    a21[14] = v39;
    if (!v39)
      (*(void (**)(_DWORD *))(*(_QWORD *)a21 + 8))(a21);
  }
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5, int a6, float a7, float a8)
{
  float v8;
  fst *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t i;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  int v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  char *v53;
  int *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int *v70;
  uint64_t v71;
  float *v72;
  float v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v106;
  float v107;
  __n128 *v109;
  unint64_t v110;
  uint64_t v111;
  __n128 v112;
  BOOL v113;
  float v114;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  float v139;
  uint64_t v140;
  __n128 v141;
  float v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t *v153;
  uint64_t *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  BOOL v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  char *v179;
  __n128 v180;
  char *v181;
  char *v182;
  uint64_t *v183[2];
  int v184;
  float v185;
  uint64_t *v186[2];
  int v187;
  float v188;
  __n128 v189;
  void *__p;
  unint64_t v191;
  unint64_t v192;
  _DWORD *v193;
  unint64_t v194;
  uint64_t *v195[2];
  int v196;
  float v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t *v204;
  uint64_t *v205;
  unint64_t v206;

  if (a6 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v16 = fst::LogMessage::LogMessage((fst *)&v204, (uint64_t)&__p);
    v17 = (_QWORD *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v204);
    if (SHIBYTE(v192) < 0)
      operator delete(__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 272))(a2, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v19);
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1
    || (v21 = *a3,
        v20 = a3[1],
        (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v20 - v21) >> 2))
    || (v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1),
        v23 = *a3,
        LODWORD(__p) = 0,
        LODWORD(__p) = *(_DWORD *)(v23 + 4 * v22),
        v189.n128_u32[0] = 2139095040,
        *(float *)&__p == INFINITY)
    || fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a8, 0.0)
    || !a5)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
  }
  else
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, v24);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 176))(a2, v25, 0.0);
    v171 = a4;
    v175 = a5;
    v172 = a6;
    v173 = a1;
    v26 = v204;
    v27 = v205;
    for (i = v205 - v204; i <= (int)v25; i = v27 - v26)
    {
      if ((unint64_t)v27 >= v206)
      {
        v29 = i + 1;
        if ((i + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = v206 - (_QWORD)v26;
        if ((uint64_t)(v206 - (_QWORD)v26) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v31);
        else
          v32 = 0;
        v26 = (uint64_t *)(v31 + 8 * i);
        *v26 = 0x7F800000FFFFFFFFLL;
        v27 = v26 + 1;
        v34 = v204;
        v33 = v205;
        if (v205 != v204)
        {
          do
          {
            v35 = *--v33;
            *--v26 = v35;
          }
          while (v33 != v34);
          v33 = v204;
        }
        v204 = v26;
        v206 = v31 + 8 * v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v27++ = 0x7F800000FFFFFFFFLL;
        v26 = v204;
      }
      v205 = v27;
    }
    v204[(int)v25] = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v36 = v202;
    if (v202 >= v203)
    {
      v39 = v201;
      v40 = (v202 - v201) >> 2;
      v41 = v40 + 1;
      v38 = v175;
      if ((unint64_t)(v40 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v42 = v203 - v201;
      if ((v203 - v201) >> 1 > v41)
        v41 = v42 >> 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v203, v43);
        v45 = v25;
        v39 = v201;
        v36 = v202;
      }
      else
      {
        v45 = v25;
        v44 = 0;
      }
      v46 = &v44[4 * v40];
      v47 = &v44[4 * v43];
      *(_DWORD *)v46 = v45;
      v37 = v46 + 4;
      while (v36 != v39)
      {
        v48 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *((_DWORD *)v46 - 1) = v48;
        v46 -= 4;
      }
      v201 = v46;
      v202 = v37;
      v203 = v47;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_DWORD *)v202 = v25;
      v37 = v36 + 4;
      v38 = v175;
    }
    v202 = v37;
    v49 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    v50 = NAN;
    if (v49 != -INFINITY && a8 != -INFINITY)
    {
      v51 = a8 == INFINITY || v49 == INFINITY;
      v52 = v49 + a8;
      if (v51)
        v50 = INFINITY;
      else
        v50 = v52;
    }
    v54 = (int *)v201;
    v53 = v202;
    if (v201 != v202)
    {
      v55 = 0;
      v169 = 0;
      v56 = 0;
      v170 = 0;
      v174 = a2;
      while (1)
      {
        v195[0] = (uint64_t *)&v204;
        v195[1] = a3;
        v196 = -1;
        v197 = a7;
        v57 = v53 - (char *)v54;
        v181 = v56;
        if (v53 - (char *)v54 >= 5)
        {
          v179 = v53;
          v58 = 0;
          v59 = v57 >> 2;
          v177 = *v54;
          v116 = __OFSUB__(v57 >> 2, 2);
          v60 = (v57 >> 2) - 2;
          if (v60 < 0 != v116)
            v60 = v59 - 1;
          v61 = v60 >> 1;
          v176 = (uint64_t)v54;
          do
          {
            v62 = &v54[v58];
            v65 = v62[1];
            v63 = v62 + 1;
            v64 = v65;
            v66 = (2 * v58) | 1;
            v67 = 2 * v58 + 2;
            if (v67 < v59)
            {
              v68 = v63[1];
              v69 = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(v195, v64, v68);
              if (v69)
              {
                v64 = v68;
                ++v63;
              }
              v56 = v181;
              if (v69)
                v66 = v67;
            }
            *v54 = v64;
            v54 = v63;
            v58 = v66;
          }
          while (v66 <= v61);
          v53 = v179;
          v70 = (int *)(v179 - 4);
          if (v179 - 4 == (char *)v63)
          {
            *v63 = v177;
          }
          else
          {
            *v63 = *v70;
            *v70 = v177;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v176, (uint64_t)(v63 + 1), v195, ((uint64_t)v63 - v176 + 4) >> 2);
            v53 = v202;
          }
          a2 = v174;
          v38 = v175;
        }
        v71 = *((int *)v53 - 1);
        v72 = (float *)&v204[v71];
        v73 = v72[1];
        v74 = *(int *)v72;
        v75 = v73;
        v202 = v53 - 4;
        if ((_DWORD)v74 == -1)
        {
          v76 = 0.0;
        }
        else if (v74 >= (a3[1] - *a3) >> 2)
        {
          v76 = INFINITY;
        }
        else
        {
          v76 = *(float *)(*a3 + 4 * v74);
          v77 = NAN;
          if (v76 == -INFINITY)
            goto LABEL_90;
        }
        v77 = NAN;
        if (v73 != -INFINITY)
        {
          v77 = INFINITY;
          v78 = v76 == INFINITY || v73 == INFINITY;
          v79 = v76 + v73;
          if (!v78)
            v77 = v79;
        }
LABEL_90:
        if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v50, v77)
          || v38 != -1 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2) >= v38)
        {
          goto LABEL_266;
        }
        v80 = v74 + 1;
        v81 = v198;
        v82 = v199;
        v83 = (v199 - v198) >> 2;
        while (v83 <= v80)
        {
          if (v82 >= v200)
          {
            v85 = v83 + 1;
            if ((v83 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v86 = v200 - v81;
            if ((v200 - v81) >> 1 > v85)
              v85 = v86 >> 1;
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
              v87 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v87 = v85;
            if (v87)
            {
              v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v87);
              v81 = v198;
              v82 = v199;
            }
            else
            {
              v88 = 0;
            }
            v89 = &v88[4 * v83];
            *(_DWORD *)v89 = 0;
            v84 = v89 + 4;
            while (v82 != v81)
            {
              v90 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *((_DWORD *)v89 - 1) = v90;
              v89 -= 4;
            }
            v198 = v89;
            v199 = v84;
            v200 = &v88[4 * v87];
            if (v81)
            {
              operator delete(v81);
              v81 = v198;
            }
            else
            {
              v81 = v89;
            }
          }
          else
          {
            *(_DWORD *)v82 = 0;
            v84 = v82 + 4;
          }
          v199 = v84;
          v83 = (v84 - v81) >> 2;
          v82 = v84;
        }
        if (v172)
        {
          v91 = (v55 - v181) >> 2;
          if (v91 <= v80)
          {
            v92 = v169;
            do
            {
              if ((unint64_t)v55 >= v92)
              {
                v94 = v92;
                v95 = v91 + 1;
                if ((v91 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v96 = v92 - (_QWORD)v181;
                v97 = (uint64_t)(v94 - (_QWORD)v181) >> 1;
                if (v97 > v95)
                  v95 = v97;
                if (v96 >= 0x7FFFFFFFFFFFFFFCLL)
                  v98 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v98 = v95;
                if (v98)
                  v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v98);
                else
                  v99 = 0;
                v100 = (char *)(v98 + 4 * v91);
                *(_DWORD *)v100 = 2139095040;
                v101 = v100 + 4;
                if (v55 != v181)
                {
                  do
                  {
                    v102 = *((_DWORD *)v55 - 1);
                    v55 -= 4;
                    *((_DWORD *)v100 - 1) = v102;
                    v100 -= 4;
                  }
                  while (v55 != v181);
                  v55 = v181;
                }
                v93 = v100;
                v92 = v98 + 4 * v99;
                if (v55)
                {
                  v103 = v98 + 4 * v99;
                  operator delete(v55);
                  v92 = v103;
                }
                v55 = v101;
              }
              else
              {
                *(_DWORD *)v55 = 2139095040;
                v55 += 4;
                v93 = v181;
              }
              v181 = v93;
              v91 = (v55 - v93) >> 2;
            }
            while (v91 <= v80);
            v169 = v92;
            ++*(_DWORD *)&v198[4 * v80];
          }
          else
          {
            ++*(_DWORD *)&v81[4 * v80];
          }
          v56 = v181;
          if ((_DWORD)v74 != -1)
          {
            v104 = *(int *)&v198[4 * v80];
            if (v104 == v171)
            {
              *(float *)&v181[4 * v80] = v73;
            }
            else if (v104 > v171)
            {
              v107 = *(float *)&v181[4 * v80];
              if (v107 > (float)(v73 + 0.00097656) || (float)(v107 + 0.00097656) < v73)
                goto LABEL_266;
            }
LABEL_159:
            v194 = 0;
            v182 = v56;
            (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)v173 + 136))(v173, v74, &__p);
            while (2)
            {
              if (__p)
              {
                if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
                {
                  if (__p)
                  {
                    (*(void (**)(void))(*(_QWORD *)__p + 8))();
                    goto LABEL_221;
                  }
LABEL_219:
                  if (v193)
                    --*v193;
LABEL_221:
                  v139 = (*(float (**)(uint64_t, unint64_t))(*(_QWORD *)v173 + 32))(v173, v74);
                  *(float *)&__p = v139;
                  v189.n128_u32[0] = 2139095040;
                  if (v139 != INFINITY)
                  {
                    v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
                    v141.n128_u32[0] = 2139095040;
                    if (v75 != INFINITY)
                      v141.n128_f32[0] = v139 + v75;
                    if (v139 == -INFINITY || v75 == -INFINITY)
                      v144 = NAN;
                    else
                      v144 = v141.n128_f32[0];
                    v145 = v205;
                    if ((unint64_t)v205 >= v206)
                    {
                      v147 = v205 - v204;
                      v148 = v147 + 1;
                      if ((unint64_t)(v147 + 1) >> 61)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v149 = v206 - (_QWORD)v204;
                      if ((uint64_t)(v206 - (_QWORD)v204) >> 2 > v148)
                        v148 = v149 >> 2;
                      if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8)
                        v150 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v150 = v148;
                      if (v150)
                        v150 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v150);
                      else
                        v151 = 0;
                      v152 = (_DWORD *)(v150 + 8 * v147);
                      *v152 = -1;
                      *((float *)v152 + 1) = v144;
                      v154 = v204;
                      v153 = v205;
                      v155 = (char *)v152;
                      if (v205 != v204)
                      {
                        do
                        {
                          v156 = *--v153;
                          *((_QWORD *)v155 - 1) = v156;
                          v155 -= 8;
                        }
                        while (v153 != v154);
                        v153 = v204;
                      }
                      v146 = (uint64_t *)(v152 + 2);
                      v204 = (uint64_t *)v155;
                      v205 = (uint64_t *)(v152 + 2);
                      v206 = v150 + 8 * v151;
                      if (v153)
                        operator delete(v153);
                    }
                    else
                    {
                      *(_DWORD *)v205 = -1;
                      *((float *)v145 + 1) = v144;
                      v146 = v145 + 1;
                    }
                    v205 = v146;
                    __p = 0;
                    v191 = __PAIR64__(v71, LODWORD(v139));
                    (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(_QWORD *)a2 + 200))(a2, v140, &__p, v141);
                    v157 = v202;
                    if (v202 >= v203)
                    {
                      v159 = v201;
                      v160 = (v202 - v201) >> 2;
                      v161 = v160 + 1;
                      if ((unint64_t)(v160 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v162 = v203 - v201;
                      if ((v203 - v201) >> 1 > v161)
                        v161 = v162 >> 1;
                      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
                        v163 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v163 = v161;
                      if (v163)
                      {
                        v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v203, v163);
                        v159 = v201;
                        v157 = v202;
                      }
                      else
                      {
                        v164 = 0;
                      }
                      v165 = &v164[4 * v160];
                      *(_DWORD *)v165 = v140;
                      v158 = (uint64_t)(v165 + 4);
                      while (v157 != v159)
                      {
                        v166 = *((_DWORD *)v157 - 1);
                        v157 -= 4;
                        *((_DWORD *)v165 - 1) = v166;
                        v165 -= 4;
                      }
                      v201 = v165;
                      v202 = (char *)v158;
                      v203 = &v164[4 * v163];
                      if (v159)
                        operator delete(v159);
                    }
                    else
                    {
                      *(_DWORD *)v202 = v140;
                      v158 = (uint64_t)(v157 + 4);
                    }
                    v202 = (char *)v158;
                    v183[0] = (uint64_t *)&v204;
                    v183[1] = a3;
                    v184 = -1;
                    v185 = a7;
                    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v201, v158, v183, (v158 - (uint64_t)v201) >> 2);
                  }
                  goto LABEL_266;
                }
                if (__p)
                {
                  v109 = (__n128 *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_168:
                  v189 = *v109;
                  v180 = v189;
                  v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
                  v112 = v180;
                  v112.n128_u32[0] = v180.n128_u32[2];
                  v113 = v180.n128_f32[2] == INFINITY || v75 == INFINITY;
                  v114 = v180.n128_f32[2] + v75;
                  if (v113)
                    v114 = INFINITY;
                  v116 = v180.n128_f32[2] == -INFINITY || v75 == -INFINITY;
                  v117 = v189.n128_u32[3];
                  if (v116)
                    v118 = 2143289344;
                  else
                    v118 = LODWORD(v114);
                  v119 = v205;
                  if ((unint64_t)v205 >= v206)
                  {
                    v121 = v205 - v204;
                    if ((unint64_t)(v121 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v122 = (uint64_t)(v206 - (_QWORD)v204) >> 2;
                    if (v122 <= v121 + 1)
                      v122 = v121 + 1;
                    if (v206 - (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
                      v123 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v123 = v122;
                    if (v123)
                      v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v123);
                    else
                      v124 = 0;
                    v125 = (uint64_t *)(v123 + 8 * v121);
                    *v125 = v117 | (v118 << 32);
                    v120 = v125 + 1;
                    v127 = v204;
                    v126 = v205;
                    if (v205 != v204)
                    {
                      do
                      {
                        v128 = *--v126;
                        *--v125 = v128;
                      }
                      while (v126 != v127);
                      v126 = v204;
                    }
                    v204 = v125;
                    v205 = v120;
                    v206 = v123 + 8 * v124;
                    if (v126)
                      operator delete(v126);
                  }
                  else
                  {
                    *v205 = v189.n128_u32[3] | (unint64_t)(v118 << 32);
                    v120 = v119 + 1;
                  }
                  v205 = v120;
                  v189.n128_u32[3] = v71;
                  v56 = v182;
                  (*(void (**)(uint64_t, uint64_t, __n128 *, __n128))(*(_QWORD *)a2 + 200))(a2, v111, &v189, v112);
                  v129 = v202;
                  if (v202 >= v203)
                  {
                    v131 = v201;
                    v132 = (v202 - v201) >> 2;
                    v133 = v132 + 1;
                    if ((unint64_t)(v132 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v134 = v203 - v201;
                    if ((v203 - v201) >> 1 > v133)
                      v133 = v134 >> 1;
                    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
                      v135 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v135 = v133;
                    if (v135)
                    {
                      v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v203, v135);
                      v131 = v201;
                      v129 = v202;
                    }
                    else
                    {
                      v136 = 0;
                    }
                    v137 = &v136[4 * v132];
                    *(_DWORD *)v137 = v111;
                    v130 = (uint64_t)(v137 + 4);
                    while (v129 != v131)
                    {
                      v138 = *((_DWORD *)v129 - 1);
                      v129 -= 4;
                      *((_DWORD *)v137 - 1) = v138;
                      v137 -= 4;
                    }
                    v201 = v137;
                    v202 = (char *)v130;
                    v203 = &v136[4 * v135];
                    if (v131)
                      operator delete(v131);
                  }
                  else
                  {
                    *(_DWORD *)v202 = v111;
                    v130 = (uint64_t)(v129 + 4);
                  }
                  v202 = (char *)v130;
                  v186[0] = (uint64_t *)&v204;
                  v186[1] = a3;
                  v187 = -1;
                  v188 = a7;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v201, v130, v186, (v130 - (uint64_t)v201) >> 2);
                  if (__p)
                    (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
                  else
                    ++v194;
                  continue;
                }
                v110 = v194;
              }
              else
              {
                v110 = v194;
                if (v194 >= v192)
                  goto LABEL_219;
              }
              break;
            }
            v109 = (__n128 *)(v191 + 16 * v110);
            goto LABEL_168;
          }
        }
        else
        {
          ++*(_DWORD *)&v81[4 * v80];
          v56 = v181;
          if ((_DWORD)v74 != -1)
          {
            if (*(int *)&v198[4 * v80] > v171)
              goto LABEL_266;
            goto LABEL_159;
          }
        }
        if (v170 && ((float)(v8 + 0.00097656) < v73 || v8 > (float)(v73 + 0.00097656)))
          goto LABEL_269;
        v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        __p = 0;
        LODWORD(v191) = 0;
        HIDWORD(v191) = v71;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, v106, &__p);
        if (v170)
        {
          v170 = 1;
          goto LABEL_266;
        }
        v170 = *(int *)&v198[4 * v80] == v171;
        if (*(_DWORD *)&v198[4 * v80] == v171)
        {
          v8 = v73;
          if ((v172 & 1) == 0)
            goto LABEL_269;
        }
LABEL_266:
        v54 = (int *)v201;
        v53 = v202;
        if (v201 == v202)
          goto LABEL_269;
      }
    }
    v56 = 0;
LABEL_269:
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v173 + 64))(v173, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, 4, 4);
    v167 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
    v168 = fst::ShortestPathProperties(v167, 0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v168, 0x3FFFFFFF0007);
    if (v56)
      operator delete(v56);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
}

void sub_1DEA4E064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  v44 = *(void **)(v42 - 208);
  if (v44)
  {
    *(_QWORD *)(v42 - 200) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 184);
  if (v45)
  {
    *(_QWORD *)(v42 - 176) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 160);
  if (v46)
  {
    *(_QWORD *)(v42 - 152) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Start(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 60))
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 32))(*(_QWORD *)(a1 + 8), 4))
    {
      *(_BYTE *)(v1 + 60) = 1;
    }
    else if (!*(_BYTE *)(v1 + 60))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(_BYTE *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3)
          *(_DWORD *)(v1 + 68) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Final(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float *MutableState;
  uint64_t v13;

  v2 = a2;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = v3[15];
  v5 = *(_DWORD *)(v4 + 92);
  if (v5 == (_DWORD)a2)
  {
    v6 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v7 = (int)a2 + 1;
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 >= (*(_QWORD *)(v4 + 16) - v8) >> 3)
    {
LABEL_7:
      v11 = (*(float (**)(_QWORD, uint64_t))(*v3 + 64))(*(_QWORD *)(a1 + 8), a2);
      MutableState = (float *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(v3[15], v2);
      *MutableState = v11;
      *((_DWORD *)MutableState + 14) |= 9u;
      v4 = v3[15];
      v5 = *(_DWORD *)(v4 + 92);
      goto LABEL_9;
    }
    v6 = (uint64_t *)(v8 + 8 * v7);
  }
  v9 = *v6;
  if (!v9)
    goto LABEL_7;
  v10 = *(_DWORD *)(v9 + 56);
  if ((v10 & 1) == 0)
    goto LABEL_7;
  *(_DWORD *)(v9 + 56) = v10 | 8;
LABEL_9:
  if (v5 == v2)
    v13 = v4 + 96;
  else
    v13 = *(_QWORD *)(v4 + 8) + 8 * v2 + 8;
  return **(float **)v13;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (*(_DWORD *)(a1 + 92) == a2)
  {
    v2 = (uint64_t *)(a1 + 96);
  }
  else
  {
    v3 = a2 + 1;
    v4 = *(_QWORD *)(a1 + 8);
    if (v3 >= (*(_QWORD *)(a1 + 16) - v4) >> 3)
      return 0;
    v2 = (uint64_t *)(v4 + 8 * v3);
  }
  v5 = *v2;
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 2) == 0)
    return 0;
  *(_DWORD *)(v5 + 56) = v6 | 8;
  return 1;
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t MutableState;
  uint64_t v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(_DWORD *)(MutableState + 56);
    if ((v5 & 4) == 0)
    {
      *(_DWORD *)(MutableState + 56) = v5 | 4;
      v6 = *(_QWORD *)(MutableState + 32) - *(_QWORD *)(MutableState + 24) + *(_QWORD *)(a1 + 128) + 64;
      *(_QWORD *)(a1 + 128) = v6;
      *(_BYTE *)(a1 + 120) = 1;
      if (v6 > *(_QWORD *)(a1 + 112))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, MutableState, 0);
    }
  }
  return v4;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t MutableState;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2)
    return *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, 0);
      v4 = MutableState;
      *(_QWORD *)(a1 + 96) = MutableState;
      *(_DWORD *)(MutableState + 56) |= 4u;
      v8 = *(_QWORD *)(MutableState + 40);
      v9 = *(_QWORD *)(MutableState + 24);
      if ((unint64_t)(v8 - v9) > 0x7FF)
        return v4;
      v10 = *(_QWORD *)(MutableState + 32);
      v18 = MutableState + 48;
      v11 = (char *)operator new(0x800uLL);
      v12 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
      if (v10 == v9)
      {
        v14 = vdupq_n_s64(v10);
        v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
      }
      else
      {
        v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          *((_OWORD *)v13 - 1) = *(_OWORD *)(v10 - 16);
          v13 -= 16;
          v10 -= 16;
        }
        while (v10 != v9);
        v14 = *(int64x2_t *)(v4 + 24);
      }
      *(_QWORD *)(v4 + 24) = v13;
      *(_QWORD *)(v4 + 32) = v12;
      v16 = v14;
      *(_QWORD *)(v4 + 40) = v11 + 2048;
      v17 = v8;
      v15 = v14.i64[0];
      std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)&v15);
      return *(_QWORD *)(a1 + 96);
    }
    v6 = *(_QWORD *)(a1 + 96);
    if (!*(_DWORD *)(v6 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)v6 = 2139095040;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v6 + 24);
      v4 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v4 + 56) |= 4u;
      return v4;
    }
    *(_DWORD *)(v6 + 56) &= ~4u;
    *(_BYTE *)(a1 + 88) = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2 + 1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(uint64_t a1, uint64_t a2, char a3)
{
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t MutableState;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  fst *v31;
  _QWORD *v32;
  fst *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41[2];
  char v42;
  char v43;
  char v44;
  void *__p[2];
  char v46;

  if (*(_BYTE *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v6 = fst::LogMessage::LogMessage((fst *)v41, (uint64_t)__p);
      v7 = (_QWORD *)fst::cerr(v6);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v41);
      if (v46 < 0)
        operator delete(__p[0]);
    }
    v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * 0.666);
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      v16 = *(_DWORD *)(v15 + 16);
      if (v16)
        v17 = v16 - 1;
      else
        v17 = *(_DWORD *)(a1 + 92);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1, v17);
      v19 = *(_QWORD *)(a1 + 128);
      if (v19 > v14 && !*(_DWORD *)(MutableState + 60))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v20 = *(_DWORD *)(MutableState + 56);
LABEL_19:
            if ((v20 & 4) != 0)
            {
              v21 = *(_QWORD *)(MutableState + 32) - *(_QWORD *)(MutableState + 24) + 64;
              FstCheck(v21 <= v19, "(size) <= (cache_size_)", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 128) -= v21;
            }
            v22 = *(_QWORD *)(a1 + 64);
            v23 = *(_DWORD *)(v22 + 16);
            if (!v23 || v23 - 1 == *(_DWORD *)(a1 + 92))
            {
              *(_DWORD *)(a1 + 92) = -1;
              *(_QWORD *)(a1 + 96) = 0;
              v23 = *(_DWORD *)(v22 + 16);
            }
            fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8 * v23), (uint64_t **)(a1 + 72));
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)) = 0;
            v24 = *(uint64_t **)(a1 + 64);
            v25 = v24[1];
            *(_QWORD *)(a1 + 64) = v25;
            v26 = *v24;
            *(_QWORD *)(v26 + 8) = v25;
            *(_QWORD *)v24[1] = v26;
            v27 = *(uint64_t **)(a1 + 56);
            --*(_QWORD *)(a1 + 48);
            std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v27, (uint64_t)v24);
            v15 = *(_QWORD *)(a1 + 64);
            continue;
          }
        }
        else
        {
          v20 = *(_DWORD *)(MutableState + 56);
          if ((v20 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *(_DWORD *)(MutableState + 56) &= ~8u;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v15;
    }
    v28 = *(_QWORD *)(a1 + 128);
    if ((a3 & 1) != 0 || v28 <= v14)
    {
      if (v14)
      {
        if (v28 > v14)
        {
          v29 = *(_QWORD *)(a1 + 112);
          do
          {
            v29 *= 2;
            v30 = v28 > 2 * v14;
            v14 *= 2;
          }
          while (v30);
          *(_QWORD *)(a1 + 112) = v29;
        }
      }
      else if (v28)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v31 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)__p);
        v32 = (_QWORD *)fst::cerr(v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
        if (v46 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(a1, a2, 1);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "INFO");
      v33 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)v41);
      v34 = (_QWORD *)fst::cerr(v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"), free recently cached = ", 26);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", cache size = ", 15);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", cache frac = ", 15);
      v39 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", cache limit = ", 16);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
      if (v42 < 0)
        operator delete(v41[0]);
    }
  }
}

void sub_1DEA4EBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void FstCheck(char a1, const char *a2, const char *a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  if ((a1 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v5 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: \"", 15);
    v8 = strlen(a2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\" file: ", 8);
    v11 = strlen(a3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" line: ", 7);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
  }
}

void sub_1DEA4ECEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(uint64_t **result, uint64_t **a2)
{
  uint64_t **v3;
  uint64_t *v4;

  if (result)
  {
    v3 = result;
    v4 = result[3];
    if (v4)
    {
      result[4] = v4;
      fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(result + 6, v4, ((char *)result[5] - (char *)v4) >> 4);
    }
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3 + 6);
    result = (uint64_t **)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*a2);
    v3[8] = result[7];
    result[7] = (uint64_t *)v3;
  }
  return result;
}

_QWORD *std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;

  result = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(a1);
  if (a2)
  {
    *(_QWORD *)(a2 + 24) = result[7];
    result[7] = a2;
  }
  return result;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC7)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x19uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 192);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923E70;
    v4[1] = &off_1EA924498;
    v4[2] = 32 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 192) = v4;
  }
  return v4;
}

void sub_1DEA4EEB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void std::vector<fst::MemoryPoolBase *>::resize(char **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v5 = *a1;
  v6 = a1[1];
  v7 = (v6 - *a1) >> 3;
  if (a2 <= v7)
  {
    if (a2 >= v7)
      return;
    v20 = &v5[8 * a2];
    goto LABEL_21;
  }
  v9 = a1[2];
  if (a2 - v7 <= (v9 - v6) >> 3)
  {
    v20 = &v6[8 * (a2 - v7)];
    v21 = 8 * a2 - 8 * v7;
    do
    {
      *(_QWORD *)v6 = *a3;
      v6 += 8;
      v21 -= 8;
    }
    while (v21);
LABEL_21:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = v10 >> 2;
  if (v10 >> 2 <= a2)
    v11 = a2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  if (v12 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v13 = (char *)operator new(8 * v12);
  v14 = &v13[8 * v7];
  v15 = *a3;
  v16 = 8 * a2 - 8 * v7;
  v17 = v14;
  do
  {
    *(_QWORD *)v17 = v15;
    v17 += 8;
    v16 -= 8;
  }
  while (v16);
  v18 = *a1;
  if (v6 != *a1)
  {
    do
    {
      v19 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v14 - 1) = v19;
      v14 -= 8;
    }
    while (v6 != v18);
    v6 = *a1;
  }
  *a1 = v14;
  a1[1] = &v13[8 * a2];
  a1[2] = &v13[8 * v12];
  if (v6)
    operator delete(v6);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::Size()
{
  return 32;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924498;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923E70;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923E70;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>::Size()
{
  return 24;
}

fst::MemoryPoolCollection **fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(fst::MemoryPoolCollection **a1)
{
  fst::MemoryPoolCollection *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)v2 + 1) - 1;
  *((_QWORD *)v2 + 1) = v3;
  if (!v3)
  {
    fst::MemoryPoolCollection::~MemoryPoolCollection(v2);
    MEMORY[0x1DF0ED014]();
  }
  return a1;
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x41uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923A88;
    v4[1] = &off_1EA9240B0;
    v4[2] = 72 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 512) = v4;
  }
  return v4;
}

void sub_1DEA4F28C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::Size()
{
  return 72;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9240B0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923A88;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923A88;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>::Size()
{
  return 64;
}

void fst::MemoryPoolCollection::~MemoryPoolCollection(fst::MemoryPoolCollection *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(v2[v5]);
      v2 = (_QWORD *)*((_QWORD *)this + 2);
      v3 = (_QWORD *)*((_QWORD *)this + 3);
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

void fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*a1);
    __p[4] = v4[7];
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*a1);
    __p[2] = v4[7];
LABEL_15:
    v4[7] = __p;
    return;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*a1);
    __p[8] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*a1);
    __p[16] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*a1);
    __p[32] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*a1);
    __p[64] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x40)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*a1);
    __p[128] = v4[7];
    goto LABEL_15;
  }
  operator delete(__p);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x11uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923B28;
    v4[1] = &off_1EA924150;
    v4[2] = 24 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 128) = v4;
  }
  return v4;
}

void sub_1DEA4F648(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x21uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923B50;
    v4[1] = &off_1EA924178;
    v4[2] = 40 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 256) = v4;
  }
  return v4;
}

void sub_1DEA4F784(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x41uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923BA0;
    v4[1] = &off_1EA9241C8;
    v4[2] = 72 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 512) = v4;
  }
  return v4;
}

void sub_1DEA4F8C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x81uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923BF0;
    v4[1] = &off_1EA924218;
    v4[2] = 136 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 1024) = v4;
  }
  return v4;
}

void sub_1DEA4F9FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x101uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923B00;
    v4[1] = &off_1EA924128;
    v4[2] = 264 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 2048) = v4;
  }
  return v4;
}

void sub_1DEA4FB38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x201uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923B78;
    v4[1] = &off_1EA9241A0;
    v4[2] = 520 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 4096) = v4;
  }
  return v4;
}

void sub_1DEA4FC78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x401uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923BC8;
    v4[1] = &off_1EA9241F0;
    v4[2] = 1032 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 0x2000) = v4;
  }
  return v4;
}

void sub_1DEA4FDB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::Size()
{
  return 1032;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9241F0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923BC8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923BC8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>::Size()
{
  return 1024;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::Size()
{
  return 520;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9241A0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923B78;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923B78;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>::Size()
{
  return 512;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::Size()
{
  return 264;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924128;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923B00;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923B00;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>::Size()
{
  return 256;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::Size()
{
  return 136;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924218;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923BF0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923BF0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>::Size()
{
  return 128;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::Size()
{
  return 72;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9241C8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923BA0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923BA0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::Size()
{
  return 40;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924178;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923B50;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923B50;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>::Size()
{
  return 32;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::Size()
{
  return 24;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924150;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923B28;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923B28;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>::Size()
{
  return 16;
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v37;

  v37 = a2;
  v3 = a2;
  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = v4 - v5;
  if (v6 > a2)
  {
    v7 = v5[a2];
    if (v7)
      return v7;
    goto LABEL_25;
  }
  v8 = a2 + 1;
  v9 = v8 - v6;
  if (v8 > v6)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v9 > (v10 - (uint64_t)v4) >> 3)
    {
      if (a2 <= -2)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v10 - (_QWORD)v5;
      v12 = (v10 - (uint64_t)v5) >> 2;
      if (v12 <= v8)
        v12 = a2 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(8 * v13);
      v15 = &v14[8 * v6];
      v16 = 8 * v8 - 8 * v6;
      v17 = v15;
      do
      {
        *(_QWORD *)v17 = 0;
        v17 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v4 != v5)
      {
        do
        {
          v18 = *--v4;
          *((_QWORD *)v15 - 1) = v18;
          v15 -= 8;
        }
        while (v4 != v5);
        v4 = *(_QWORD **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = &v14[8 * v8];
      *(_QWORD *)(a1 + 24) = &v14[8 * v13];
      if (v4)
        operator delete(v4);
      goto LABEL_25;
    }
    v19 = &v4[v9];
    v20 = 8 * v8 - 8 * v6;
    do
    {
      *v4++ = 0;
      v20 -= 8;
    }
    while (v20);
    goto LABEL_24;
  }
  if (a2 + 1 < v6)
  {
    v19 = &v5[v8];
LABEL_24:
    *(_QWORD *)(a1 + 16) = v19;
  }
LABEL_25:
  v21 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::TN<1>>(*(uint64_t **)(a1 + 72));
  v22 = v21;
  v7 = v21[7];
  if (v7)
  {
    v21[7] = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v23 = v21[2];
    if (v23 > 0x11F)
    {
      v27 = v22[3];
      if (v27 + 72 <= v23)
      {
        v28 = *(_QWORD *)(v22[5] + 16);
      }
      else
      {
        v28 = operator new[]();
        v22[3] = 0;
        v29 = operator new(0x18uLL);
        v27 = 0;
        v29[2] = v28;
        v30 = (_QWORD *)v22[5];
        v31 = v22[6];
        *v29 = v22 + 4;
        v29[1] = v30;
        *v30 = v29;
        v22[5] = v29;
        v22[6] = v31 + 1;
      }
      v7 = v28 + v27;
      v22[3] = v27 + 72;
    }
    else
    {
      v7 = operator new[]();
      v24 = operator new(0x18uLL);
      v24[2] = v7;
      v26 = v22[4];
      v25 = v22 + 4;
      *v24 = v26;
      v24[1] = v25;
      *(_QWORD *)(v26 + 8) = v24;
      *v25 = v24;
      ++v25[2];
    }
    *(_QWORD *)(v7 + 64) = 0;
  }
  *(_DWORD *)v7 = 2139095040;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(v7 + 40) = 0;
  v32 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v7 + 48) = v32;
  ++*(_QWORD *)(v32 + 8);
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = v7;
  if (*(_BYTE *)a1)
  {
    v33 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(*(fst::MemoryPoolCollection **)(a1 + 56), &v37);
    v35 = *(_QWORD *)(a1 + 32);
    v34 = (_QWORD *)(a1 + 32);
    *v33 = v35;
    v33[1] = v34;
    *(_QWORD *)(v35 + 8) = v33;
    *v34 = v33;
    ++v34[2];
  }
  return v7;
}

uint64_t std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::deallocate(*(uint64_t ***)(a1 + 32), *(_QWORD **)a1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 4);
  return a1;
}

_QWORD *std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(fst::MemoryPoolCollection *a1, _DWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  fst::MemoryPoolCollection *v17;
  fst::MemoryPoolCollection *v18[2];
  _QWORD *v19;

  v17 = a1;
  v18[0] = a1;
  *((_QWORD *)a1 + 1) += 2;
  v18[1] = (fst::MemoryPoolCollection *)1;
  v3 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__list_node<int,void *>>::TN<1>>((uint64_t *)a1);
  v4 = v3;
  v5 = v3[7];
  if (v5)
  {
    v3[7] = *(_QWORD *)(v5 + 24);
  }
  else
  {
    v6 = v3[2];
    if (v6 > 0x7F)
    {
      v10 = v4[3];
      if (v10 + 32 <= v6)
      {
        v11 = *(_QWORD *)(v4[5] + 16);
      }
      else
      {
        v11 = operator new[]();
        v4[3] = 0;
        v12 = operator new(0x18uLL);
        v10 = 0;
        v12[2] = v11;
        *v12 = v4 + 4;
        v13 = (_QWORD *)v4[5];
        v12[1] = v13;
        *v13 = v12;
        v14 = v4[6] + 1;
        v4[5] = v12;
        v4[6] = v14;
      }
      v5 = v11 + v10;
      v4[3] = v10 + 32;
    }
    else
    {
      v5 = operator new[]();
      v7 = operator new(0x18uLL);
      v7[2] = v5;
      v9 = v4[4];
      v8 = v4 + 4;
      *v7 = v9;
      v7[1] = v8;
      *(_QWORD *)(v9 + 8) = v7;
      *v8 = v7;
      ++v8[2];
    }
    *(_QWORD *)(v5 + 24) = 0;
  }
  v19 = (_QWORD *)v5;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&v17);
  v15 = v19;
  *v19 = 0;
  v15[1] = 0;
  *((_DWORD *)v15 + 4) = *a2;
  v19 = 0;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v18);
  return v15;
}

void sub_1DEA509F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, fst::MemoryPoolCollection *a9, fst::MemoryPoolCollection *a10)
{
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&a10);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  fst::MemoryPoolCollection *v8;
  uint64_t v9;
  fst::MemoryPoolCollection *v11;

  v8 = (fst::MemoryPoolCollection *)operator new();
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_1DED16C30;
  v11 = v8;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_1DED16C40;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1DEA50AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_1EA924718;
  v2 = a1[15];
  if (v2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1[15]);
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 80));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 72));
    std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(v2 + 32));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 56));
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x1DF0ED014](v2, 0x10A0C40690396FALL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 8);
    do
    {
      fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Destroy(*(uint64_t ***)(v2 + 8 * v3++), (uint64_t **)(a1 + 72));
      v2 = *(_QWORD *)(a1 + 8);
    }
    while (v3 < (*(_QWORD *)(a1 + 16) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(a1 + 32));
}

uint64_t *std::__list_imp<int,fst::PoolAllocator<int>>::clear(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (result[2])
  {
    v1 = result;
    v3 = *result;
    v2 = (uint64_t *)result[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*result + 8);
    **(_QWORD **)(v3 + 8) = v4;
    result[2] = 0;
    while (v2 != v1)
    {
      v5 = (uint64_t *)v2[1];
      result = std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>((uint64_t *)v1[3], (uint64_t)v2);
      v2 = v5;
    }
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v2);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(a1 + 16));
  return a1;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  size_t *v4;
  int8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = (size_t *)(a1 + 8);
  v5 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v5)
  {
    if (prime >= *(_QWORD *)&v5)
      return;
    v12 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(_QWORD *)&v5 < 3uLL || (v13 = (uint8x8_t)vcnt_s8(v5), v13.i16[0] = vaddlv_u8(v13), v13.u32[0] > 1uLL))
    {
      v12 = std::__next_prime(v12);
    }
    else
    {
      v14 = 1 << -(char)__clz(v12 - 1);
      if (v12 >= 2)
        v12 = v14;
    }
    if (prime <= v12)
      prime = v12;
    if (prime >= *(_QWORD *)&v5)
      return;
    if (!prime)
    {
      v17 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v17)
        std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v17);
      *v4 = 0;
      return;
    }
  }
  v6 = fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate((uint64_t **)(a1 + 16), prime);
  v7 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](a1 + 8, v7);
  v8 = 0;
  *v4 = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v8++) = 0;
  while (prime != v8);
  v9 = *(_QWORD **)(a1 + 24);
  if (v9)
  {
    v10 = v9[1];
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= prime)
        v10 %= prime;
    }
    else
    {
      v10 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = a1 + 24;
    v15 = (_QWORD *)*v9;
    if (*v9)
    {
      do
      {
        v16 = v15[1];
        if (v11.u32[0] > 1uLL)
        {
          if (v16 >= prime)
            v16 %= prime;
        }
        else
        {
          v16 &= prime - 1;
        }
        if (v16 != v10)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v16))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = v9;
            goto LABEL_30;
          }
          *v9 = *v15;
          *v15 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v16) = v15;
          v15 = v9;
        }
        v16 = v10;
LABEL_30:
        v9 = v15;
        v15 = (_QWORD *)*v15;
        v10 = v16;
      }
      while (v15);
    }
  }
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (uint64_t **)(a1 + 32);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = v5[7];
      v5[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0xC7)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x19uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 192);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923E48;
    v4[1] = &off_1EA924470;
    v4[2] = 32 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 192) = v4;
  }
  return v4;
}

void sub_1DEA51034(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::Size()
{
  return 32;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924470;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923E48;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923E48;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>::Size()
{
  return 24;
}

_QWORD *fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  if (a2 == 2)
  {
    v6 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*a1);
    v3 = v6;
    v4 = (_QWORD *)v6[7];
    if (!v4)
    {
      v14 = v6[2];
      if (v14 > 0x5F)
      {
        v25 = v3[3];
        if (v25 + 24 <= v14)
        {
          v26 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v26 = operator new[]();
          v3[3] = 0;
          v27 = operator new(0x18uLL);
          v25 = 0;
          v27[2] = v26;
          v28 = (_QWORD *)v3[5];
          v29 = v3[6];
          *v27 = v3 + 4;
          v27[1] = v28;
          *v28 = v27;
          v3[5] = v27;
          v3[6] = v29 + 1;
        }
        v4 = (_QWORD *)(v26 + v25);
        v3[3] = v25 + 24;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v15 = operator new(0x18uLL);
        v15[2] = v4;
        v17 = v3[4];
        v16 = v3 + 4;
        *v15 = v17;
        v15[1] = v16;
        *(_QWORD *)(v17 + 8) = v15;
        *v16 = v15;
        ++v16[2];
      }
      v4[2] = 0;
      return v4;
    }
    v5 = v4[2];
LABEL_13:
    v3[7] = v5;
    return v4;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*a1);
    v3 = v2;
    v4 = (_QWORD *)v2[7];
    if (!v4)
    {
      v10 = v2[2];
      if (v10 > 0x3F)
      {
        v20 = v3[3];
        if (v20 + 16 <= v10)
        {
          v21 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v21 = operator new[]();
          v3[3] = 0;
          v22 = operator new(0x18uLL);
          v20 = 0;
          v22[2] = v21;
          v23 = (_QWORD *)v3[5];
          v24 = v3[6];
          *v22 = v3 + 4;
          v22[1] = v23;
          *v23 = v22;
          v3[5] = v22;
          v3[6] = v24 + 1;
        }
        v4 = (_QWORD *)(v21 + v20);
        v3[3] = v20 + 16;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v11 = operator new(0x18uLL);
        v11[2] = v4;
        v13 = v3[4];
        v12 = v3 + 4;
        *v11 = v13;
        v11[1] = v12;
        *(_QWORD *)(v13 + 8) = v11;
        *v12 = v11;
        ++v12[2];
      }
      v4[1] = 0;
      return v4;
    }
    v5 = v4[1];
    goto LABEL_13;
  }
  if (a2 <= 4)
  {
    v7 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*a1);
    v3 = v7;
    v4 = (_QWORD *)v7[7];
    if (!v4)
    {
      v30 = v7[2];
      if (v30 > 0x9F)
      {
        v38 = v3[3];
        if (v38 + 40 <= v30)
        {
          v39 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v39 = operator new[]();
          v3[3] = 0;
          v40 = operator new(0x18uLL);
          v38 = 0;
          v40[2] = v39;
          v41 = (_QWORD *)v3[5];
          v42 = v3[6];
          *v40 = v3 + 4;
          v40[1] = v41;
          *v41 = v40;
          v3[5] = v40;
          v3[6] = v42 + 1;
        }
        v4 = (_QWORD *)(v39 + v38);
        v3[3] = v38 + 40;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v31 = operator new(0x18uLL);
        v31[2] = v4;
        v33 = v3[4];
        v32 = v3 + 4;
        *v31 = v33;
        v31[1] = v32;
        *(_QWORD *)(v33 + 8) = v31;
        *v32 = v31;
        ++v32[2];
      }
      v4[4] = 0;
      return v4;
    }
    v5 = v4[4];
    goto LABEL_13;
  }
  if (a2 <= 8)
  {
    v8 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*a1);
    v3 = v8;
    v4 = (_QWORD *)v8[7];
    if (!v4)
    {
      v34 = v8[2];
      if (v34 > 0x11F)
      {
        v43 = v3[3];
        if (v43 + 72 <= v34)
        {
          v44 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v44 = operator new[]();
          v3[3] = 0;
          v45 = operator new(0x18uLL);
          v43 = 0;
          v45[2] = v44;
          v46 = (_QWORD *)v3[5];
          v47 = v3[6];
          *v45 = v3 + 4;
          v45[1] = v46;
          *v46 = v45;
          v3[5] = v45;
          v3[6] = v47 + 1;
        }
        v4 = (_QWORD *)(v44 + v43);
        v3[3] = v43 + 72;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v35 = operator new(0x18uLL);
        v35[2] = v4;
        v37 = v3[4];
        v36 = v3 + 4;
        *v35 = v37;
        v35[1] = v36;
        *(_QWORD *)(v37 + 8) = v35;
        *v36 = v35;
        ++v36[2];
      }
      v4[8] = 0;
      return v4;
    }
    v5 = v4[8];
    goto LABEL_13;
  }
  if (a2 <= 0x10)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Allocate(v18 + 1);
      v4[16] = 0;
      return v4;
    }
    v19 = v4[16];
    goto LABEL_44;
  }
  if (a2 <= 0x20)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate(v18 + 1);
      v4[32] = 0;
      return v4;
    }
    v19 = v4[32];
    goto LABEL_44;
  }
  if (a2 <= 0x40)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate(v18 + 1);
      v4[64] = 0;
      return v4;
    }
    v19 = v4[64];
LABEL_44:
    v18[7] = v19;
    return v4;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  unint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(*(uint64_t **)(a1 + 8));
    __p[2] = v4[7];
    goto LABEL_15;
  }
  if (v3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(*(uint64_t **)(a1 + 8));
    __p[1] = v4[7];
LABEL_15:
    v4[7] = __p;
    return;
  }
  if (v3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(*(uint64_t **)(a1 + 8));
    __p[4] = v4[7];
    goto LABEL_15;
  }
  if (v3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(*(uint64_t **)(a1 + 8));
    __p[8] = v4[7];
    goto LABEL_15;
  }
  if (v3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(*(uint64_t **)(a1 + 8));
    __p[16] = v4[7];
    goto LABEL_15;
  }
  if (v3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(*(uint64_t **)(a1 + 8));
    __p[32] = v4[7];
    goto LABEL_15;
  }
  if (v3 <= 0x40)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(*(uint64_t **)(a1 + 8));
    __p[64] = v4[7];
    goto LABEL_15;
  }
  operator delete(__p);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x47)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 9uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 64);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923EC0;
    v4[1] = &off_1EA9244E8;
    v4[2] = 16 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 64) = v4;
  }
  return v4;
}

void sub_1DEA51814(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x11uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923EE8;
    v4[1] = &off_1EA924510;
    v4[2] = 24 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 128) = v4;
  }
  return v4;
}

void sub_1DEA51950(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x21uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923F38;
    v4[1] = &off_1EA924560;
    v4[2] = 40 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 256) = v4;
  }
  return v4;
}

void sub_1DEA51A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x41uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923F88;
    v4[1] = &off_1EA9245B0;
    v4[2] = 72 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 512) = v4;
  }
  return v4;
}

void sub_1DEA51BC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x81uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923E98;
    v4[1] = &off_1EA9244C0;
    v4[2] = 136 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 1024) = v4;
  }
  return v4;
}

void sub_1DEA51D04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x101uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923F10;
    v4[1] = &off_1EA924538;
    v4[2] = 264 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 2048) = v4;
  }
  return v4;
}

void sub_1DEA51E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x201uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923F60;
    v4[1] = &off_1EA924588;
    v4[2] = 520 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 4096) = v4;
  }
  return v4;
}

void sub_1DEA51F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Size()
{
  return 520;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924588;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923F60;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923F60;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Size()
{
  return 512;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Size()
{
  return 264;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924538;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923F10;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923F10;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Size()
{
  return 256;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Size()
{
  return 136;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9244C0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923E98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923E98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Size()
{
  return 128;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::Size()
{
  return 72;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9245B0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923F88;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923F88;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<8>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::Size()
{
  return 40;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924560;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923F38;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923F38;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<4>>::Size()
{
  return 32;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::Size()
{
  return 24;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924510;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923EE8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923EE8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<2>>::Size()
{
  return 16;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::Size()
{
  return 16;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9244E8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923EC0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923EC0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<1>>::Size()
{
  return 8;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<16>>::Link>::Allocate(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x21F)
  {
    v7 = v1[2];
    if (v7 + 136 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 136;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x41F)
  {
    v7 = v1[2];
    if (v7 + 264 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 264;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x81F)
  {
    v7 = v1[2];
    if (v7 + 520 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 520;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  fst *v23;
  _QWORD *v24;
  char v26;
  std::string __str;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1EA925668;
  *(_QWORD *)(v2 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v2 + 16), "null");
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 1;
  *(_QWORD *)v2 = &off_1EA924718;
  *(_BYTE *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 64) = -1;
  *(_OWORD *)(v2 + 68) = 0u;
  *(_OWORD *)(v2 + 84) = 0u;
  *(_DWORD *)(v2 + 100) = -1;
  *(_BYTE *)(v2 + 104) = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(v2 + 112) = *(_QWORD *)(a1 + 112);
  v3 = operator new();
  v4 = *(_BYTE *)(v2 + 104);
  v5 = *(_QWORD *)(v2 + 112);
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(v3, v4);
  *(_BYTE *)(v3 + 88) = v5 == 0;
  *(_DWORD *)(v3 + 92) = -1;
  *(_QWORD *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 104) = v4;
  v6 = 8096;
  if (v5 > 0x1FA0)
    v6 = v5;
  *(_QWORD *)(v3 + 112) = v6;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v2 + 120) = v3;
  *(_BYTE *)(v2 + 128) = 1;
  *(_QWORD *)v2 = off_1EA9255B8;
  *(_QWORD *)(v2 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 88))(*(_QWORD *)(a1 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(v2 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 0x3FFFFFFF0004;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(v2 + 40);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(v2 + 40) = v9;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(v2 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(v2 + 48) = v12;
  }
  *(_QWORD *)v2 = &off_1EA9252A8;
  *(_DWORD *)(v2 + 144) = *(_DWORD *)(a1 + 144);
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  v13 = (_QWORD *)operator new();
  if (*(_QWORD *)(v2 + 136))
    v14 = *(_QWORD *)(v2 + 136);
  else
    v14 = **(_QWORD **)(a1 + 176);
  *v13 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 88))(v14, 0);
  *(_QWORD *)(v2 + 176) = v13;
  v15 = (_QWORD *)operator new();
  v16 = **(_QWORD **)(a1 + 184);
  *v15 = v16;
  v15[2] = v15 + 1;
  v15[3] = v15 + 1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v15 + 4), v16, v15 + 2, v15 + 3);
  v15[13] = 0;
  v15[14] = 0;
  v15[15] = 0;
  if (v16)
  {
    if (v16 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v16);
    v20 = (char *)v15[13];
    v19 = (char *)v15[14];
    v21 = v17;
    if (v19 != v20)
    {
      do
      {
        v22 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v21 - 1) = v22;
        v21 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)v15[13];
    }
    v15[13] = v21;
    v15[14] = v17;
    v15[15] = &v17[8 * v18];
    if (v19)
      operator delete(v19);
  }
  *(_QWORD *)(v2 + 184) = v15;
  if (*(_QWORD *)(a1 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    v23 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)&__str);
    v24 = (_QWORD *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(v2 + 8) |= 4uLL;
  }
  return v2;
}

void sub_1DEA52E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  *v18 = v19;
  v21 = v18[17];
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(v18);
  MEMORY[0x1DF0ED014](v18, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  int v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  float *v29;
  float *v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float *v36;
  _QWORD *v37;
  float *v38;
  float v39;
  float v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  int State;
  _QWORD *MutableState;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  int64x2_t v101;
  _DWORD *v102;
  uint64_t *v103;
  uint64_t **v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  int *v148;
  int v149;
  int v150;
  __int128 v152;
  uint64_t **v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  int64x2_t v158;
  _DWORD *v159;
  _QWORD *v160;

  v155 = 0;
  v156 = 0;
  v154 = &v155;
  v2 = **(float ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 8 * a2);
  if (!v2)
    goto LABEL_180;
  do
  {
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *((unsigned int *)v2 + 2);
    v160 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 136))(v3, v4, &v157);
    while (1)
    {
      if (!v157)
      {
        v7 = v160;
        if ((unint64_t)v160 >= v158.i64[1])
          goto LABEL_39;
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v157 + 24))(v157))
        break;
      if (!v157)
      {
        v7 = v160;
LABEL_10:
        v6 = v158.i64[0] + 16 * (_QWORD)v7;
        goto LABEL_11;
      }
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v157 + 32))();
LABEL_11:
      v8 = v2[3];
      v9 = NAN;
      if (v8 != -INFINITY)
      {
        v10 = *(float *)(v6 + 8);
        v9 = NAN;
        if (v10 != -INFINITY)
        {
          v11 = v10 == INFINITY || v8 == INFINITY;
          v12 = v8 + v10;
          if (v11)
            v9 = INFINITY;
          else
            v9 = v12;
        }
      }
      v13 = *(_DWORD *)(v6 + 12);
      v14 = v155;
      v15 = &v155;
      v16 = &v155;
      if (v155)
      {
        v17 = *(_DWORD *)v6;
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v14;
            v18 = *((_DWORD *)v14 + 8);
            if (v17 >= v18)
              break;
            v14 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_27;
          }
          if (v18 >= v17)
            break;
          v14 = v16[1];
          if (!v14)
          {
            v15 = v16 + 1;
            goto LABEL_27;
          }
        }
        v19 = v16;
      }
      else
      {
LABEL_27:
        v19 = operator new(0x38uLL);
        *((_DWORD *)v19 + 8) = *(_DWORD *)v6;
        *((_QWORD *)v19 + 5) = 0x7F800000FFFFFFFFLL;
        *((_QWORD *)v19 + 6) = 0;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v16;
        *v15 = (uint64_t *)v19;
        v20 = (uint64_t *)v19;
        if (*v154)
        {
          v154 = (uint64_t **)*v154;
          v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v155, v20);
        ++v156;
      }
      if (*((_DWORD *)v19 + 10) == -1)
      {
        v23 = *(_DWORD *)v6;
        v21 = operator new();
        v22 = 0;
        *(_QWORD *)v21 = 0;
        *((_DWORD *)v19 + 10) = v23;
        *((_DWORD *)v19 + 11) = 2139095040;
        *((_QWORD *)v19 + 6) = v21;
        *(_BYTE *)(v21 + 8) = 0;
      }
      else
      {
        v21 = *((_QWORD *)v19 + 6);
        v22 = *(_QWORD *)v21;
      }
      v24 = (float *)operator new(0x10uLL);
      *(_QWORD *)v24 = v22;
      *((_DWORD *)v24 + 2) = v13;
      v24[3] = v9;
      *(_QWORD *)v21 = v24;
      if (v157)
        (*(void (**)(uint64_t))(*(_QWORD *)v157 + 40))(v157);
      else
        v160 = (_QWORD *)((char *)v160 + 1);
    }
    if (v157)
    {
      (*(void (**)(void))(*(_QWORD *)v157 + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v159)
      --*v159;
LABEL_41:
    v2 = *(float **)v2;
  }
  while (v2);
  v25 = v154;
  if (v154 == &v155)
    goto LABEL_180;
  do
  {
    v26 = v25[6];
    if (!*v26)
    {
      *v26 = 0;
      goto LABEL_77;
    }
    v27 = 0;
    v28 = (_QWORD *)*v26;
    do
    {
      ++v27;
      v28 = (_QWORD *)*v28;
    }
    while (v28);
    v29 = (float *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>((_DWORD *)*v26, v27);
    *v26 = (uint64_t)v29;
    v30 = v29;
    if (!v29)
      goto LABEL_77;
    do
    {
      v31 = *((float *)v25 + 11);
      v32 = 2143289344;
      if (v31 != -INFINITY)
      {
        v33 = v30[3];
        v32 = 2143289344;
        if (v33 != -INFINITY)
        {
          if (v31 >= v33)
            v32 = *((_DWORD *)v30 + 3);
          else
            v32 = *((_DWORD *)v25 + 11);
        }
      }
      *((_DWORD *)v25 + 11) = v32;
      if (v29 == v30 || *((_DWORD *)v30 + 2) != *((_DWORD *)v29 + 2))
      {
        v36 = *(float **)v30;
        v29 = v30;
        goto LABEL_65;
      }
      v34 = v29[3];
      if (v34 == -INFINITY || (v35 = v30[3], v35 >= -INFINITY) && v35 <= -INFINITY)
      {
        v29[3] = NAN;
      }
      else
      {
        if (v34 >= v35)
          v34 = v30[3];
        v29[3] = v34;
        if (v34 < -INFINITY || v34 > -INFINITY)
          goto LABEL_64;
      }
      *(_QWORD *)(a1 + 8) |= 4uLL;
LABEL_64:
      v36 = *(float **)v30;
      v37 = *(_QWORD **)v29;
      *(_QWORD *)v29 = **(_QWORD **)v29;
      operator delete(v37);
LABEL_65:
      v30 = v36;
    }
    while (v36);
    v38 = (float *)*v26;
    if (*v26)
    {
      do
      {
        v39 = v38[3];
        v40 = NAN;
        if (v39 != -INFINITY)
        {
          if ((*((_DWORD *)v25 + 11) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v40 = INFINITY;
            if (v39 != INFINITY)
              v40 = v39 - *((float *)v25 + 11);
          }
          else
          {
            v40 = NAN;
          }
        }
        v38[3] = v40;
        if ((LODWORD(v40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          v40 = *(float *)(a1 + 144) * floorf((float)(v40 / *(float *)(a1 + 144)) + 0.5);
        v38[3] = v40;
        v38 = *(float **)v38;
      }
      while (v38);
    }
LABEL_77:
    v41 = v25[1];
    if (v41)
    {
      do
      {
        v42 = (uint64_t **)v41;
        v41 = (uint64_t *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (uint64_t **)v25[2];
        v11 = *v42 == (uint64_t *)v25;
        v25 = v42;
      }
      while (!v11);
    }
    v25 = v42;
  }
  while (v42 != &v155);
  v43 = v154;
  if (v154 != &v155)
  {
    while (1)
    {
      *(_QWORD *)&v5 = v43[5];
      v152 = v5;
      State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, v43[6]);
      MutableState = (_QWORD *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      v46 = MutableState;
      *((_QWORD *)&v5 + 1) = *((_QWORD *)&v152 + 1);
      v47 = MutableState[4];
      v48 = MutableState[5];
      if (v47 >= v48)
        break;
      *(_DWORD *)v47 = v152;
      *(_QWORD *)(v47 + 4) = v152;
      v49 = (_QWORD *)(v47 + 16);
      *(_DWORD *)(v47 + 12) = State;
LABEL_142:
      v46[4] = v49;
      v103 = v43[1];
      if (v103)
      {
        do
        {
          v104 = (uint64_t **)v103;
          v103 = (uint64_t *)*v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (uint64_t **)v43[2];
          v11 = *v104 == (uint64_t *)v43;
          v43 = v104;
        }
        while (!v11);
      }
      v43 = v104;
      if (v104 == &v155)
        goto LABEL_180;
    }
    v50 = MutableState[3];
    v51 = (uint64_t)(v47 - v50) >> 4;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v52 = (uint64_t **)(MutableState + 6);
    v53 = v48 - v50;
    v54 = v53 >> 3;
    if (v53 >> 3 <= (unint64_t)(v51 + 1))
      v54 = v51 + 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v55 = 0xFFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    v160 = MutableState + 6;
    if (v55)
    {
      if (v55 == 2)
      {
        v60 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<2>>(*v52);
        v57 = v60;
        v58 = (_QWORD *)v60[7];
        if (!v58)
        {
          v63 = v60[2];
          if (v63 > 0x9F)
          {
            v72 = v57[3];
            if (v72 + 40 <= v63)
            {
              v73 = *(_QWORD *)(v57[5] + 16);
            }
            else
            {
              v73 = operator new[]();
              v57[3] = 0;
              v74 = operator new(0x18uLL);
              v72 = 0;
              v74[2] = v73;
              *v74 = v57 + 4;
              v75 = (_QWORD *)v57[5];
              v74[1] = v75;
              *v75 = v74;
              v76 = v57[6] + 1;
              v57[5] = v74;
              v57[6] = v76;
            }
            v58 = (_QWORD *)(v73 + v72);
            v57[3] = v72 + 40;
          }
          else
          {
            v58 = (_QWORD *)operator new[]();
            v64 = operator new(0x18uLL);
            v64[2] = v58;
            v66 = v57[4];
            v65 = v57 + 4;
            *v64 = v66;
            v64[1] = v65;
            *(_QWORD *)(v66 + 8) = v64;
            *v65 = v64;
            ++v65[2];
          }
          v58[4] = 0;
          goto LABEL_136;
        }
        v59 = v58[4];
      }
      else
      {
        if (v55 == 1)
        {
          v56 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<1>>(*v52);
          v57 = v56;
          v58 = (_QWORD *)v56[7];
          if (v58)
          {
            v59 = v58[2];
            goto LABEL_135;
          }
          v67 = v56[2];
          if (v67 > 0x5F)
          {
            v81 = v57[3];
            if (v81 + 24 <= v67)
            {
              v82 = *(_QWORD *)(v57[5] + 16);
            }
            else
            {
              v82 = operator new[]();
              v57[3] = 0;
              v83 = operator new(0x18uLL);
              v81 = 0;
              v83[2] = v82;
              *v83 = v57 + 4;
              v84 = (_QWORD *)v57[5];
              v83[1] = v84;
              *v84 = v83;
              v85 = v57[6] + 1;
              v57[5] = v83;
              v57[6] = v85;
            }
            v58 = (_QWORD *)(v82 + v81);
            v57[3] = v81 + 24;
          }
          else
          {
            v58 = (_QWORD *)operator new[]();
            v68 = operator new(0x18uLL);
            v68[2] = v58;
            v70 = v57[4];
            v69 = v57 + 4;
            *v68 = v70;
            v68[1] = v69;
            *(_QWORD *)(v70 + 8) = v68;
            *v69 = v68;
            ++v69[2];
          }
          v58[2] = 0;
LABEL_136:
          v97 = &v58[2 * v51];
          *(_DWORD *)v97 = v152;
          *(_QWORD *)((char *)v97 + 4) = v152;
          *((_DWORD *)v97 + 3) = State;
          v98 = v46[3];
          v99 = v46[4];
          if (v99 == v98)
          {
            v101 = vdupq_n_s64(v99);
            v100 = &v58[2 * v51];
          }
          else
          {
            v100 = &v58[2 * v51];
            do
            {
              *((_OWORD *)v100 - 1) = *(_OWORD *)(v99 - 16);
              v100 -= 2;
              v99 -= 16;
            }
            while (v99 != v98);
            v101 = *(int64x2_t *)(v46 + 3);
          }
          v49 = v97 + 2;
          v46[3] = v100;
          v46[4] = v97 + 2;
          v158 = v101;
          v102 = (_DWORD *)v46[5];
          v46[5] = &v58[2 * v55];
          v159 = v102;
          v157 = v101.i64[0];
          std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> &>::~__split_buffer((uint64_t)&v157);
          goto LABEL_142;
        }
        if (v55 > 4)
        {
          if (v55 > 8)
          {
            if (v55 > 0x10)
            {
              if (v55 > 0x20)
              {
                if (v55 > 0x40)
                {
                  if (v55 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v58 = operator new(16 * v55);
                  goto LABEL_136;
                }
                v96 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<64>>(*v52);
                v57 = v96;
                v58 = (_QWORD *)v96[7];
                if (!v58)
                {
                  v123 = v96[2];
                  if (v123 >> 5 > 0x80)
                  {
                    v132 = v57[3];
                    if (v132 + 1032 <= v123)
                    {
                      v133 = *(_QWORD *)(v57[5] + 16);
                    }
                    else
                    {
                      v133 = operator new[]();
                      v57[3] = 0;
                      v134 = operator new(0x18uLL);
                      v132 = 0;
                      v134[2] = v133;
                      *v134 = v57 + 4;
                      v135 = (_QWORD *)v57[5];
                      v134[1] = v135;
                      *v135 = v134;
                      v136 = v57[6] + 1;
                      v57[5] = v134;
                      v57[6] = v136;
                    }
                    v58 = (_QWORD *)(v133 + v132);
                    v57[3] = v132 + 1032;
                  }
                  else
                  {
                    v58 = (_QWORD *)operator new[]();
                    v124 = operator new(0x18uLL);
                    v124[2] = v58;
                    v126 = v57[4];
                    v125 = v57 + 4;
                    *v124 = v126;
                    v124[1] = v125;
                    *(_QWORD *)(v126 + 8) = v124;
                    *v125 = v124;
                    ++v125[2];
                  }
                  v58[128] = 0;
                  goto LABEL_136;
                }
                v59 = v58[128];
              }
              else
              {
                v86 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<32>>(*v52);
                v57 = v86;
                v58 = (_QWORD *)v86[7];
                if (!v58)
                {
                  v114 = v86[2];
                  if (v114 > 0x81F)
                  {
                    v127 = v57[3];
                    if (v127 + 520 <= v114)
                    {
                      v128 = *(_QWORD *)(v57[5] + 16);
                    }
                    else
                    {
                      v128 = operator new[]();
                      v57[3] = 0;
                      v129 = operator new(0x18uLL);
                      v127 = 0;
                      v129[2] = v128;
                      *v129 = v57 + 4;
                      v130 = (_QWORD *)v57[5];
                      v129[1] = v130;
                      *v130 = v129;
                      v131 = v57[6] + 1;
                      v57[5] = v129;
                      v57[6] = v131;
                    }
                    v58 = (_QWORD *)(v128 + v127);
                    v57[3] = v127 + 520;
                  }
                  else
                  {
                    v58 = (_QWORD *)operator new[]();
                    v115 = operator new(0x18uLL);
                    v115[2] = v58;
                    v117 = v57[4];
                    v116 = v57 + 4;
                    *v115 = v117;
                    v115[1] = v116;
                    *(_QWORD *)(v117 + 8) = v115;
                    *v116 = v115;
                    ++v116[2];
                  }
                  v58[64] = 0;
                  goto LABEL_136;
                }
                v59 = v58[64];
              }
            }
            else
            {
              v71 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<16>>(*v52);
              v57 = v71;
              v58 = (_QWORD *)v71[7];
              if (!v58)
              {
                v105 = v71[2];
                if (v105 > 0x41F)
                {
                  v118 = v57[3];
                  if (v118 + 264 <= v105)
                  {
                    v119 = *(_QWORD *)(v57[5] + 16);
                  }
                  else
                  {
                    v119 = operator new[]();
                    v57[3] = 0;
                    v120 = operator new(0x18uLL);
                    v118 = 0;
                    v120[2] = v119;
                    *v120 = v57 + 4;
                    v121 = (_QWORD *)v57[5];
                    v120[1] = v121;
                    *v121 = v120;
                    v122 = v57[6] + 1;
                    v57[5] = v120;
                    v57[6] = v122;
                  }
                  v58 = (_QWORD *)(v119 + v118);
                  v57[3] = v118 + 264;
                }
                else
                {
                  v58 = (_QWORD *)operator new[]();
                  v106 = operator new(0x18uLL);
                  v106[2] = v58;
                  v108 = v57[4];
                  v107 = v57 + 4;
                  *v106 = v108;
                  v106[1] = v107;
                  *(_QWORD *)(v108 + 8) = v106;
                  *v107 = v106;
                  ++v107[2];
                }
                v58[32] = 0;
                goto LABEL_136;
              }
              v59 = v58[32];
            }
          }
          else
          {
            v62 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<8>>(*v52);
            v57 = v62;
            v58 = (_QWORD *)v62[7];
            if (!v58)
            {
              v87 = v62[2];
              if (v87 > 0x21F)
              {
                v109 = v57[3];
                if (v109 + 136 <= v87)
                {
                  v110 = *(_QWORD *)(v57[5] + 16);
                }
                else
                {
                  v110 = operator new[]();
                  v57[3] = 0;
                  v111 = operator new(0x18uLL);
                  v109 = 0;
                  v111[2] = v110;
                  *v111 = v57 + 4;
                  v112 = (_QWORD *)v57[5];
                  v111[1] = v112;
                  *v112 = v111;
                  v113 = v57[6] + 1;
                  v57[5] = v111;
                  v57[6] = v113;
                }
                v58 = (_QWORD *)(v110 + v109);
                v57[3] = v109 + 136;
              }
              else
              {
                v58 = (_QWORD *)operator new[]();
                v88 = operator new(0x18uLL);
                v88[2] = v58;
                v90 = v57[4];
                v89 = v57 + 4;
                *v88 = v90;
                v88[1] = v89;
                *(_QWORD *)(v90 + 8) = v88;
                *v89 = v88;
                ++v89[2];
              }
              v58[16] = 0;
              goto LABEL_136;
            }
            v59 = v58[16];
          }
        }
        else
        {
          v61 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::TN<4>>(*v52);
          v57 = v61;
          v58 = (_QWORD *)v61[7];
          if (!v58)
          {
            v77 = v61[2];
            if (v77 > 0x11F)
            {
              v91 = v57[3];
              if (v91 + 72 <= v77)
              {
                v92 = *(_QWORD *)(v57[5] + 16);
              }
              else
              {
                v92 = operator new[]();
                v57[3] = 0;
                v93 = operator new(0x18uLL);
                v91 = 0;
                v93[2] = v92;
                *v93 = v57 + 4;
                v94 = (_QWORD *)v57[5];
                v93[1] = v94;
                *v94 = v93;
                v95 = v57[6] + 1;
                v57[5] = v93;
                v57[6] = v95;
              }
              v58 = (_QWORD *)(v92 + v91);
              v57[3] = v91 + 72;
            }
            else
            {
              v58 = (_QWORD *)operator new[]();
              v78 = operator new(0x18uLL);
              v78[2] = v58;
              v80 = v57[4];
              v79 = v57 + 4;
              *v78 = v80;
              v78[1] = v79;
              *(_QWORD *)(v80 + 8) = v78;
              *v79 = v78;
              ++v79[2];
            }
            v58[8] = 0;
            goto LABEL_136;
          }
          v59 = v58[8];
        }
      }
LABEL_135:
      v57[7] = v59;
      goto LABEL_136;
    }
    v58 = 0;
    goto LABEL_136;
  }
LABEL_180:
  v137 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v138 = *(_QWORD *)(a1 + 120);
  v139 = *(_QWORD *)(v137 + 24);
  v140 = *(_QWORD *)(v137 + 32);
  v141 = v140 - v139;
  if (v140 != v139)
  {
    v142 = v141 >> 4;
    if ((unint64_t)(v141 >> 4) <= 1)
      v142 = 1;
    v143 = (_DWORD *)(v139 + 4);
    do
    {
      if (!*(v143 - 1))
        ++*(_QWORD *)(v137 + 8);
      if (!*v143)
        ++*(_QWORD *)(v137 + 16);
      v143 += 4;
      --v142;
    }
    while (v142);
  }
  if (*(_BYTE *)(v138 + 120))
  {
    if ((*(_BYTE *)(v137 + 56) & 4) != 0)
    {
      v144 = v141 + *(_QWORD *)(v138 + 128);
      *(_QWORD *)(v138 + 128) = v144;
      if (v144 > *(_QWORD *)(v138 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GC(v138, v137, 0);
        v139 = *(_QWORD *)(v137 + 24);
        v140 = *(_QWORD *)(v137 + 32);
      }
    }
  }
  v145 = v140 - v139;
  if (v145)
  {
    v146 = v145 >> 4;
    v147 = *(_DWORD *)(a1 + 68);
    if (v146 <= 1)
      v146 = 1;
    v148 = (int *)(v139 + 12);
    do
    {
      v150 = *v148;
      v148 += 4;
      v149 = v150;
      if (v150 >= v147)
      {
        v147 = v149 + 1;
        *(_DWORD *)(a1 + 68) = v149 + 1;
      }
      --v146;
    }
    while (v146);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(a1, a2);
  *(_DWORD *)(v137 + 56) |= 0xAu;
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v155);
}

void sub_1DEA53DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a16);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = -1;
    v5 = operator new(0x10uLL);
    *(_QWORD *)v5 = 0;
    v5[2] = v3;
    v5[3] = 0;
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = 0;
    return fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (_QWORD *)v4);
  }
  return result;
}

float fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  float *v2;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;

  v2 = **(float ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 8 * a2);
  if (!v2)
    return INFINITY;
  v4 = INFINITY;
  do
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), *((unsigned int *)v2 + 2));
    v6 = v2[3];
    v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      v7 = INFINITY;
      v8 = v5 == INFINITY || v6 == INFINITY;
      v9 = v6 + v5;
      if (!v8)
        v7 = v9;
    }
    if (v4 >= v7)
      v10 = v7;
    else
      v10 = v4;
    if (v7 == -INFINITY || v4 == -INFINITY)
      v4 = NAN;
    else
      v4 = v10;
    if (v4 >= -INFINITY && v4 <= -INFINITY)
      *(_QWORD *)(a1 + 8) |= 4uLL;
    v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *i;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  float **v49;
  float *v50;
  unint64_t v51;
  float *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  float v63;
  unint64_t v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float *v74;
  unint64_t v75;
  float *v76;
  float *v77;
  int v78;
  _QWORD **v82;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(v2 + 104);
  v4 = *(_QWORD **)(v2 + 112);
  *(_QWORD *)(v2 + 128) = &v82;
  v82 = (_QWORD **)a2;
  v5 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(v2 + 80), -1);
  v6 = *(int8x8_t *)(v2 + 40);
  if (!*(_QWORD *)&v6)
    goto LABEL_17;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v10 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v11 = *(uint64_t ***)(*(_QWORD *)(v2 + 32) + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_17:
    v73 = (unint64_t)v4 - v3;
    v14 = (uint64_t)((uint64_t)v4 - v3) >> 3;
    v15 = *(_QWORD *)(v2 + 120);
    if ((unint64_t)v4 >= v15)
    {
      v18 = v14 + 1;
      v17 = (_QWORD *)(v2 + 32);
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = v15 - v3;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v20);
        v22 = v82;
      }
      else
      {
        v21 = 0;
        v22 = a2;
      }
      v23 = (_QWORD *)(v20 + 8 * v14);
      v24 = v20 + 8 * v21;
      *v23 = v22;
      v16 = v23 + 1;
      v26 = *(char **)(v2 + 104);
      v25 = *(char **)(v2 + 112);
      if (v25 != v26)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v23 = v27;
        }
        while (v25 != v26);
        v25 = *(char **)(v2 + 104);
      }
      *(_QWORD *)(v2 + 104) = v23;
      *(_QWORD *)(v2 + 112) = v16;
      *(_QWORD *)(v2 + 120) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v4 = a2;
      v16 = v4 + 1;
      v17 = (_QWORD *)(v2 + 32);
    }
    *(_QWORD *)(v2 + 112) = v16;
    v28 = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()((uint64_t *)(v2 + 80), v14);
    v29 = v28;
    v30 = *(_QWORD *)(v2 + 40);
    if (v30)
    {
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.u32[0];
      if (v31.u32[0] > 1uLL)
      {
        v3 = v28;
        if (v28 >= v30)
          v3 = v28 % v30;
      }
      else
      {
        v3 = (v30 - 1) & v28;
      }
      v33 = *(uint64_t ***)(*v17 + 8 * v3);
      if (v33)
      {
        for (i = *v33; i; i = (uint64_t *)*i)
        {
          v35 = i[1];
          if (v35 == v29)
          {
            if (fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(v2 + 96), *((_DWORD *)i + 4), v14))
            {
              v72 = a1;
              goto LABEL_73;
            }
          }
          else
          {
            if (v32 > 1)
            {
              if (v35 >= v30)
                v35 %= v30;
            }
            else
            {
              v35 &= v30 - 1;
            }
            if (v35 != v3)
              break;
          }
        }
        v17 = (_QWORD *)(v2 + 32);
      }
    }
    v36 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(v2 + 64));
    *(_QWORD *)v36 = 0;
    *(_QWORD *)(v36 + 8) = v29;
    *(_DWORD *)(v36 + 16) = v14;
    v37 = (float)(unint64_t)(*(_QWORD *)(v2 + 72) + 1);
    v38 = *(float *)(v2 + 88);
    if (!v30 || (float)(v38 * (float)v30) < v37)
    {
      v39 = 1;
      if (v30 >= 3)
        v39 = (v30 & (v30 - 1)) != 0;
      v40 = v39 | (2 * v30);
      v41 = vcvtps_u32_f32(v37 / v38);
      if (v40 <= v41)
        v42 = v41;
      else
        v42 = v40;
      std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>((uint64_t)v17, v42);
      v30 = *(_QWORD *)(v2 + 40);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v29 >= v30)
          v3 = v29 % v30;
        else
          v3 = v29;
      }
      else
      {
        v3 = (v30 - 1) & v29;
      }
    }
    v43 = *(uint64_t **)(*v17 + 8 * v3);
    if (v43)
    {
      *(_QWORD *)v36 = *v43;
      v72 = a1;
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = v36;
      *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8 * v3) = v2 + 56;
      v72 = a1;
      if (!*(_QWORD *)v36)
      {
LABEL_72:
        ++*(_QWORD *)(v2 + 72);
        goto LABEL_73;
      }
      v44 = *(_QWORD *)(*(_QWORD *)v36 + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v44 >= v30)
          v44 %= v30;
      }
      else
      {
        v44 &= v30 - 1;
      }
      v43 = (uint64_t *)(*v17 + 8 * v44);
    }
    *v43 = v36;
    goto LABEL_72;
  }
  while (1)
  {
    v13 = v12[1];
    if (v13 == v7)
      break;
    if (v9 > 1)
    {
      if (v13 >= *(_QWORD *)&v6)
        v13 %= *(_QWORD *)&v6;
    }
    else
    {
      v13 &= *(_QWORD *)&v6 - 1;
    }
    if (v13 != v10)
      goto LABEL_17;
LABEL_16:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_17;
  }
  v14 = *((unsigned int *)v12 + 4);
  if (!fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(v2 + 96), *((_DWORD *)v12 + 4), -1))goto LABEL_16;
  v72 = a1;
  v73 = (unint64_t)v4 - v3;
LABEL_73:
  if ((_DWORD)v14 != (v73 >> 3))
  {
    v45 = v82;
    if (v82)
    {
      v46 = *v82;
      if (*v82)
      {
        do
        {
          v47 = (_QWORD *)*v46;
          operator delete(v46);
          v46 = v47;
        }
        while (v47);
      }
      *v45 = 0;
      MEMORY[0x1DF0ED014](v45, 0x1020C405F07FB98);
    }
  }
  v48 = *(_QWORD **)(v72 + 152);
  if (v48)
  {
    v49 = *(float ***)(v72 + 160);
    v50 = v49[1];
    v51 = v50 - *v49;
    if (v51 <= (int)v14)
    {
      v52 = (float *)*a2;
      if (*a2)
      {
        v54 = v48;
        v53 = *v48;
        v55 = (v54[1] - v53) >> 2;
        v56 = INFINITY;
        do
        {
          v57 = *((int *)v52 + 2);
          if (v55 <= v57)
            v58 = INFINITY;
          else
            v58 = *(float *)(v53 + 4 * v57);
          v59 = v52[3];
          v60 = NAN;
          if (v59 != -INFINITY && v58 != -INFINITY)
          {
            v60 = INFINITY;
            v61 = v59 == INFINITY || v58 == INFINITY;
            v62 = v58 + v59;
            if (!v61)
              v60 = v62;
          }
          if (v56 >= v60)
            v63 = v60;
          else
            v63 = v56;
          if (v60 == -INFINITY || v56 == -INFINITY)
            v56 = NAN;
          else
            v56 = v63;
          v52 = *(float **)v52;
        }
        while (v52);
      }
      else
      {
        v56 = INFINITY;
      }
      v66 = (unint64_t)v49[2];
      if ((unint64_t)v50 >= v66)
      {
        if ((v51 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v68 = v66 - (_QWORD)*v49;
        v69 = v68 >> 1;
        if (v68 >> 1 <= v51 + 1)
          v69 = v51 + 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        if (v70)
          v70 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::TropicalWeightTpl<float>>>(v70);
        else
          v71 = 0;
        v74 = (float *)(v70 + 4 * v51);
        v75 = v70 + 4 * v71;
        *v74 = v56;
        v67 = v74 + 1;
        v77 = *v49;
        v76 = v49[1];
        if (v76 != *v49)
        {
          do
          {
            v78 = *((_DWORD *)v76-- - 1);
            *((_DWORD *)v74-- - 1) = v78;
          }
          while (v76 != v77);
          v76 = *v49;
        }
        *v49 = v74;
        v49[1] = v67;
        v49[2] = (float *)v75;
        if (v76)
          operator delete(v76);
      }
      else
      {
        *v50 = v56;
        v67 = v50 + 1;
      }
      v49[1] = v67;
    }
  }
  return v14;
}

void sub_1DEA54544(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t ***v3;
  unint64_t result;
  uint64_t **v5;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  if (a2 == -1)
    v3 = *(uint64_t ****)(v2 + 120);
  else
    v3 = (uint64_t ***)(*(_QWORD *)(v2 + 96) + 8 * a2);
  v5 = *v3;
  for (result = *((char *)v5 + 8);
        ;
        result ^= (2 * result) ^ (32 * *((int *)v5 + 2)) ^ ((unint64_t)*((int *)v5 + 2) >> 59) ^ *((unsigned int *)v5 + 3))
  {
    v5 = (uint64_t **)*v5;
    if (!v5)
      break;
  }
  return result;
}

BOOL fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t ***)(v3 + 120);
  else
    v4 = (uint64_t **)(*(_QWORD *)(v3 + 96) + 8 * a2);
  v6 = *v4;
  if (a3 == -1)
    v7 = *(uint64_t ***)(v3 + 120);
  else
    v7 = (uint64_t **)(*(_QWORD *)(v3 + 96) + 8 * a3);
  v8 = *v7;
  if (*((unsigned __int8 *)v8 + 8) != *((unsigned __int8 *)v6 + 8))
    return 0;
  while (1)
  {
    v8 = (uint64_t *)*v8;
    v6 = (uint64_t *)*v6;
    if (!v8 || v6 == 0)
      break;
    if (*((_DWORD *)v8 + 2) != *((_DWORD *)v6 + 2) || *((float *)v8 + 3) != *((float *)v6 + 3))
      return 0;
  }
  return (v8 != 0) ^ (v6 == 0);
}

uint64_t fst::PoolAllocator<std::__hash_node<int,void *>>::allocate(uint64_t **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*a1);
  v2 = v1;
  v3 = v1[7];
  if (v3)
  {
    v1[7] = *(_QWORD *)(v3 + 24);
  }
  else
  {
    v4 = v1[2];
    if (v4 > 0x7F)
    {
      v8 = v2[3];
      if (v8 + 32 <= v4)
      {
        v9 = *(_QWORD *)(v2[5] + 16);
      }
      else
      {
        v9 = operator new[]();
        v2[3] = 0;
        v10 = operator new(0x18uLL);
        v8 = 0;
        v10[2] = v9;
        v11 = (_QWORD *)v2[5];
        v12 = v2[6];
        *v10 = v2 + 4;
        v10[1] = v11;
        *v11 = v10;
        v2[5] = v10;
        v2[6] = v12 + 1;
      }
      v3 = v9 + v8;
      v2[3] = v8 + 32;
    }
    else
    {
      v3 = operator new[]();
      v5 = operator new(0x18uLL);
      v5[2] = v3;
      v7 = v2[4];
      v6 = v2 + 4;
      *v5 = v7;
      v5[1] = v6;
      *(_QWORD *)(v7 + 8) = v5;
      *v6 = v5;
      ++v6[2];
    }
    *(_QWORD *)(v3 + 24) = 0;
  }
  return v3;
}

uint64_t **std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  if (a2)
  {
    result = (uint64_t **)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*result);
    a2[3] = (uint64_t)result[7];
    result[7] = a2;
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(uint64_t a1, int a2)
{
  int v3;
  _QWORD *v4;
  unint64_t v5;
  char v6;

  if (*(_DWORD *)(a1 + 100) < a2)
    *(_DWORD *)(a1 + 100) = a2;
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= a2)
  {
    if (v3 == a2)
      *(_DWORD *)(a1 + 96) = a2 + 1;
    if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    {
      v4 = (_QWORD *)(a1 + 72);
      v5 = a2;
      while (*(_QWORD *)(a1 + 80) <= v5)
      {
        v6 = 0;
        std::vector<BOOL>::push_back(a1 + 72, &v6);
      }
      *(_QWORD *)(*v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
    }
  }
}

_DWORD *std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(_DWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t **v20;
  BOOL v21;

  if ((unint64_t)a2 >= 2)
  {
    if (a2 == 2)
    {
      v2 = *(_QWORD **)result;
      if (*(_DWORD *)(*(_QWORD *)result + 8) < result[2])
      {
        *v2 = result;
        *(_QWORD *)result = 0;
        return v2;
      }
    }
    else
    {
      if (a2 >= 0)
        v4 = a2;
      else
        v4 = a2 + 1;
      v5 = v4 >> 1;
      v6 = a2 - (v4 >> 1);
      v7 = result;
      if (a2 >= 4)
      {
        v8 = v5;
        v7 = result;
        do
        {
          --v8;
          v7 = (_QWORD *)*v7;
        }
        while (v8 > 1);
      }
      v9 = (_QWORD *)*v7;
      *v7 = 0;
      v10 = std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(result, v5);
      result = (_DWORD *)std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::__sort<std::__less<void,void>>(v9, v6);
      if (v10)
      {
        if (result)
        {
          v11 = *(_DWORD *)(v10 + 8);
          if (result[2] >= v11)
          {
            v12 = (uint64_t *)result;
            result = (_DWORD *)v10;
          }
          else
          {
            v12 = (uint64_t *)result;
            do
            {
              v13 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12 && *((_DWORD *)v12 + 2) < v11);
            *v13 = v10;
          }
          v14 = *(_QWORD *)v10;
          v15 = v12 != 0;
          if (*(_QWORD *)v10)
            v16 = v12 == 0;
          else
            v16 = 1;
          if (!v16)
          {
            do
            {
              v17 = (uint64_t *)v14;
              v18 = *(_DWORD *)(v14 + 8);
              if (*((_DWORD *)v12 + 2) < v18)
              {
                v19 = v12;
                do
                {
                  v20 = (uint64_t **)v19;
                  v19 = (uint64_t *)*v19;
                }
                while (v19 && *((_DWORD *)v19 + 2) < v18);
                *(_QWORD *)v10 = v12;
                v12 = *v20;
                *v20 = v17;
              }
              v14 = *v17;
              v15 = v12 != 0;
              if (*v17)
                v21 = v12 == 0;
              else
                v21 = 1;
              v10 = (uint64_t)v17;
            }
            while (!v21);
            v10 = (uint64_t)v17;
          }
          if (v15)
            *(_QWORD *)v10 = v12;
        }
        else
        {
          return (_DWORD *)v10;
        }
      }
    }
  }
  return result;
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::VectorCacheStore(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1DED16C40;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_1DED16C40;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_1DED16C40;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(a1 + 80) = v5;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Clear(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_1DEA54AE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  fst::MemoryPoolCollection **v4;
  void *v6;

  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 72));
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 56));
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = &off_1EA9252A8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 104);
    v5 = *(_QWORD *)(v3 + 112);
    if ((int)((unint64_t)(v5 - (_QWORD)v4) >> 3) >= 1)
    {
      v6 = 0;
      do
      {
        v7 = (_QWORD **)v4[v6];
        if (v7)
        {
          v8 = *v7;
          if (*v7)
          {
            do
            {
              v9 = (_QWORD *)*v8;
              operator delete(v8);
              v8 = v9;
            }
            while (v9);
          }
          *v7 = 0;
          MEMORY[0x1DF0ED014](v7, 0x1020C405F07FB98);
          v4 = *(_QWORD **)(v3 + 104);
          v5 = *(_QWORD *)(v3 + 112);
        }
        ++v6;
      }
      while (v6 < (int)((unint64_t)(v5 - (_QWORD)v4) >> 3));
    }
    if (v4)
    {
      *(_QWORD *)(v3 + 112) = v4;
      operator delete(v4);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v3 + 32);
    MEMORY[0x1DF0ED014](v3, 0x10E0C40FE6675DCLL);
  }
  *a1 = off_1EA9255B8;
  v10 = a1[17];
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheBaseImpl(a1);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1EA925DC0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1EA925DC0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1DF0ED014);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;
  _DWORD *v5;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA924C70;
  v4[1] = 0;
  v5 = *(_DWORD **)(a1 + 8);
  if (a2)
    v5 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 40))(v5);
  else
    ++v5[14];
  v4[1] = v5;
  return v4;
}

void sub_1DEA54D98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1EA925DC0;
  MEMORY[0x1DF0ED014](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA9251C8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &off_1EA924880;
  *a2 = v4;
  return result;
}

void sub_1DEA54E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(uint64_t **)(a1 + 8);
  result = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v5[15], a2);
  if ((result & 1) == 0)
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 48))(v5, a2);
  v7 = v5[15];
  if (*(_DWORD *)(v7 + 92) == (_DWORD)a2)
    v8 = (uint64_t *)(v7 + 96);
  else
    v8 = (uint64_t *)(*(_QWORD *)(v7 + 8) + 8 * ((int)a2 + 1));
  v9 = *v8;
  v12 = *(_DWORD *)(v9 + 60);
  v10 = (_DWORD *)(v9 + 60);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 9);
  v14 = (*(_QWORD *)(v10 - 7) - v13) >> 4;
  if (*(_QWORD *)(v10 - 7) == v13)
    v13 = 0;
  *a3 = 0;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v10;
  *v10 = v11 + 1;
  return result;
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
  JUMPOUT(0x1DF0ED014);
}

BOOL fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done_(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t MutableState;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::GetMutableState(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 120), v6);
    ++*(_DWORD *)(MutableState + 60);
    if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 120), v6) & 1) == 0)(*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v7 + 8) + 48))(*(_QWORD *)(v7 + 8), v6);
    v9 = *(_QWORD *)(MutableState + 24);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(MutableState + 32) - v9;
    if (v11)
    {
      v12 = v11 >> 4;
      v13 = *(_DWORD *)(v10 + 68);
      v14 = (int *)(v9 + 12);
      do
      {
        v16 = *v14;
        v14 += 4;
        v15 = v16;
        if (v13 <= v16)
        {
          v13 = v15 + 1;
          *(_DWORD *)(v10 + 68) = v15 + 1;
        }
        --v12;
      }
      while (v12);
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(v10, v6);
    v17 = *(_DWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_DWORD *)(v18 + 68);
    --*(_DWORD *)(MutableState + 60);
    result = v17 >= v19;
    if (v17 < v19)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v18);
    if ((int)v6 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
      return 1;
  }
  return result;
}

void sub_1DEA55040(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

unint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 96);
  v3 = *(_DWORD *)(a1 + 100);
  result = v2;
  if ((int)v2 <= v3)
  {
    result = (int)v2;
    v5 = *(unsigned __int8 *)(a1 + 104);
    v6 = (v3 + 1);
    v7 = 8 * result + 8;
    do
    {
      if (v5 || !*(_QWORD *)(a1 + 112))
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 72) + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
          return result;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 128))
          return result;
        v8 = *(_QWORD *)(a1 + 120);
        if ((_DWORD)result == *(_DWORD *)(v8 + 92))
        {
          v9 = (_QWORD *)(v8 + 96);
        }
        else
        {
          v11 = v8 + 8;
          v10 = *(_QWORD *)(v8 + 8);
          if (result + 1 >= (*(_QWORD *)(v11 + 8) - v10) >> 3)
            return result;
          v9 = (_QWORD *)(v10 + v7);
        }
        if (!*v9)
          return result;
      }
      *(_DWORD *)(a1 + 96) = result + 1;
      v7 += 8;
      ++result;
    }
    while ((_DWORD)v6 != (_DWORD)result);
    return v6;
  }
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int v9;
  int v10;
  int *v11;
  int *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = *v8;
    v11 = (int *)(a2 - 4);
    v10 = *(_DWORD *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
    if ((_DWORD)result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        v9 = *v8;
        result = fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(a3, *v8, v10);
        v11 = v12;
      }
      while ((result & 1) != 0);
      *v12 = v10;
    }
  }
  return result;
}

uint64_t fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  uint64_t result;
  int v22;
  BOOL v23;
  float v24;
  float v25;

  v4 = **a1;
  v5 = *(int *)(v4 + 8 * a2);
  v6 = *((_DWORD *)a1 + 4);
  v7 = 0.0;
  v8 = 0.0;
  if ((_DWORD)v5 != v6)
  {
    v9 = *a1[1];
    if (v5 >= (a1[1][1] - v9) >> 2)
      v8 = INFINITY;
    else
      v8 = *(float *)(v9 + 4 * v5);
  }
  v10 = *(int *)(v4 + 8 * a3);
  if ((_DWORD)v10 != v6)
  {
    v11 = *a1[1];
    if (v10 >= (a1[1][1] - v11) >> 2)
      v7 = INFINITY;
    else
      v7 = *(float *)(v11 + 4 * v10);
  }
  v12 = NAN;
  if (v8 != -INFINITY)
  {
    v13 = *(float *)(v4 + 8 * a2 + 4);
    v12 = NAN;
    if (v13 != -INFINITY)
    {
      v14 = v13 == INFINITY || v8 == INFINITY;
      v15 = v8 + v13;
      if (v14)
        v12 = INFINITY;
      else
        v12 = v15;
    }
  }
  v16 = NAN;
  if (v7 != -INFINITY)
  {
    v17 = *(float *)(v4 + 8 * a3 + 4);
    v16 = NAN;
    if (v17 != -INFINITY)
    {
      v18 = v17 == INFINITY || v7 == INFINITY;
      v19 = v7 + v17;
      if (v18)
        v16 = INFINITY;
      else
        v16 = v19;
    }
  }
  if ((_DWORD)v5 != v6 || (_DWORD)v10 == v6)
  {
    LODWORD(result) = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v16, v12);
    v22 = result;
    v23 = (_DWORD)v5 != v6 && (_DWORD)v10 == v6;
    if (v23)
      result = 0;
    else
      result = result;
    if (v23 && v22)
    {
      v24 = *((float *)a1 + 5);
      return v12 > (float)(v24 + v16) || v16 > (float)(v24 + v12);
    }
  }
  else if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v16, v12))
  {
    return 1;
  }
  else
  {
    v25 = *((float *)a1 + 5);
    return v12 <= (float)(v25 + v16) && v16 <= (float)(v25 + v12);
  }
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 v10;
  _QWORD *v11;
  fst *v12;
  _QWORD *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  fst *v19;
  _QWORD *v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *__p[2];
  char v30;
  char v31;

  v6 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(v6, a1, a2, (char *)a3);
  *(_QWORD *)v6 = &off_1EA924AF0;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
  {
    v7 = operator new();
    v9 = *(uint64_t **)(a3 + 24);
    v8 = *(uint64_t **)(a3 + 32);
    if (!v9)
    {
      v9 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v9, a1, 1);
    }
    *(_QWORD *)v7 = v9;
    if (!v8)
    {
      v8 = (uint64_t *)operator new();
      fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(v8, a2, 0);
      v9 = *(uint64_t **)v7;
    }
    *(_QWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9);
    *(_QWORD *)(v7 + 24) = -1;
    *(_BYTE *)(v7 + 32) = -1;
  }
  *(_QWORD *)(v6 + 136) = v7;
  v10 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 144) = *(_OWORD *)v7;
  *(_QWORD *)(v6 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 32))(*(_QWORD *)v10);
  *(_QWORD *)(v6 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 152) + 32))(**(_QWORD **)(v6 + 152));
  v11 = *(_QWORD **)(a3 + 48);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    v11[1] = v11;
    v11[2] = v11;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(v11 + 3), 0, v11 + 1, v11 + 2);
    v11[12] = 0;
    v11[13] = 0;
    v11[14] = 0;
  }
  *(_QWORD *)(v6 + 176) = v11;
  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 144) + 48))(**(_QWORD **)(v6 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 144) + 24))(**(_QWORD **)(v6 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v20 = (_QWORD *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 152) + 48))(**(_QWORD **)(v6 + 152)) & 1) != 0
      && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 152) + 24))(**(_QWORD **)(v6 + 152), 1))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v12 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
      v13 = (_QWORD *)fst::cerr(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
      goto LABEL_40;
    }
    v14 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v6 + 144) + 24))(**(_QWORD **)(v6 + 144), 0);
    v15 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v6 + 152) + 24))(**(_QWORD **)(v6 + 152), 0);
    if (v15)
      v16 = 0;
    else
      v16 = v14 == 1;
    if (v16)
      v17 = 2;
    else
      v17 = 1;
    if (v14 == 1)
    {
      v18 = 1;
    }
    else
    {
      v17 = 0;
      v18 = v15 == 0;
    }
    if (v18)
    {
LABEL_37:
      *(_DWORD *)(v6 + 184) = v17;
      goto LABEL_43;
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 144) + 24))(**(_QWORD **)(v6 + 144), 1) == 1)
    {
      v17 = 1;
      goto LABEL_37;
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 152) + 24))(**(_QWORD **)(v6 + 152), 1))
    {
      v17 = 0;
      goto LABEL_37;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
LABEL_40:
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
  if (v30 < 0)
    operator delete(__p[0]);
  *(_DWORD *)(v6 + 184) = 3;
  *(_QWORD *)(v6 + 8) |= 4uLL;
LABEL_43:
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v26 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 144) + 40))(**(_QWORD **)(v6 + 144), v24);
  v27 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v6 + 152) + 40))(**(_QWORD **)(v6 + 152), v25);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v6 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v26, v27) & 0x3FFFFFFF0004;
  return v6;
}

void sub_1DEA55880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v18);
  MEMORY[0x1DF0ED014](v18, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  std::string *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string::size_type size;
  unint64_t v20;
  int v21;
  void **v22;
  uint64_t v23;
  std::string *p_str;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  fst *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  fst *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unsigned __int8 v45;
  std::string __str;

  *(_QWORD *)a1 = &unk_1EA9256D8;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &off_1EA924788;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *a4;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a4 + 1);
  v10 = *((_QWORD *)a4 + 2);
  v11 = v10;
  if (!v10)
  {
    v11 = operator new();
    v12 = *a4;
    v13 = *((_QWORD *)a4 + 1);
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(v11, *a4);
    *(_BYTE *)(v11 + 88) = v13 == 0;
    *(_DWORD *)(v11 + 92) = -1;
    *(_QWORD *)(v11 + 96) = 0;
    *(_BYTE *)(v11 + 104) = v12;
    v14 = 8096;
    if (v13 > 0x1FA0)
      v14 = v13;
    *(_QWORD *)(v11 + 112) = v14;
    *(_BYTE *)(v11 + 120) = 0;
    *(_QWORD *)(v11 + 128) = 0;
    v10 = *((_QWORD *)a4 + 2);
  }
  *(_QWORD *)(a1 + 120) = v11;
  *(_BYTE *)(a1 + 128) = v10 == 0;
  *(_QWORD *)a1 = off_1EA925248;
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=(v8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  if (FLAGS_fst_compat_symbols)
  {
    if (v15)
    {
      v17 = v16;
      if (v16)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v15 + 64))(&__str, v15);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v17 + 64))(__p, v17);
        v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v20 = v45;
        v21 = (char)v45;
        if ((v45 & 0x80u) != 0)
          v20 = (unint64_t)__p[1];
        if (size != v20)
        {
          v28 = 1;
          if (((char)v45 & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_36;
        }
        if ((v45 & 0x80u) == 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v28 = memcmp(__str.__r_.__value_.__l.__data_, v22, __str.__r_.__value_.__l.__size_) != 0;
        }
        else
        {
          if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
          {
            v28 = 0;
            if (((char)v45 & 0x80000000) == 0)
            {
LABEL_32:
              if ((v18 & 0x80) == 0)
                goto LABEL_33;
              goto LABEL_37;
            }
LABEL_36:
            operator delete(__p[0]);
            if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_33:
              if (!v28)
                goto LABEL_46;
              goto LABEL_38;
            }
LABEL_37:
            operator delete(__str.__r_.__value_.__l.__data_);
            if (!v28)
              goto LABEL_46;
LABEL_38:
            std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
            v30 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
            v31 = (_QWORD *)fst::cerr(v30);
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"CompatSymbols: Symbol table check sums do not match. ", 53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Table sizes are ", 16);
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 120))(v15);
            v33 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 120))(v17);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (FLAGS_fst_error_fatal)
              std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
            else
              std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
            v34 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
            v35 = (_QWORD *)fst::cerr(v34);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"does not match input symbol table of 2nd argument", 49);
            fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            *(_QWORD *)(a1 + 8) |= 4uLL;
            goto LABEL_46;
          }
          v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
          p_str = &__str;
          do
          {
            v26 = p_str->__r_.__value_.__s.__data_[0];
            p_str = (std::string *)((char *)p_str + 1);
            v25 = v26;
            v27 = *(unsigned __int8 *)v22;
            v22 = (void **)((char *)v22 + 1);
            v28 = v25 != v27;
          }
          while (v25 == v27 && v23-- != 0);
        }
        if ((v21 & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_36;
      }
    }
  }
LABEL_46:
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v38 = *v9;
  if (*v9 != v37)
  {
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    if (v37)
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
    else
      v39 = 0;
    *v9 = v39;
  }
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  v41 = *(_QWORD *)(a1 + 48);
  if (v41 != v40)
  {
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v40)
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
    else
      v42 = 0;
    *(_QWORD *)(a1 + 48) = v42;
  }
  return a1;
}

void sub_1DEA55E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a9);
  if (a17 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  fst::MemoryPoolCollection *v8;
  uint64_t v9;
  fst::MemoryPoolCollection *v11;

  v8 = (fst::MemoryPoolCollection *)operator new();
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_1DED16C30;
  v11 = v8;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_1DED16C40;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1DEA55F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_1EA924788;
  v2 = a1[15];
  if (v2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1[15]);
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 80));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 72));
    std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(v2 + 32));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v2 + 56));
    v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x1DF0ED014](v2, 0x10A0C40690396FALL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 8);
    do
    {
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(fst::MemoryPoolCollection ***)(v2 + 8 * v3++), (uint64_t **)(a1 + 72));
      v2 = *(_QWORD *)(a1 + 8);
    }
    while (v3 < (*(_QWORD *)(a1 + 16) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v2;
  return std::__list_imp<int,fst::PoolAllocator<int>>::clear((uint64_t *)(a1 + 32));
}

fst::MemoryPoolCollection **fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(fst::MemoryPoolCollection **result, uint64_t **a2)
{
  fst::MemoryPoolCollection **v3;

  if (result)
  {
    v3 = result;
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)(result + 3));
    fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v3 + 6);
    result = (fst::MemoryPoolCollection **)fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a2);
    v3[8] = result[7];
    result[7] = (fst::MemoryPoolCollection *)v3;
  }
  return result;
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__destroy_vector::operator()[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v1;
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate((uint64_t **)(a1 + 24), v1, (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v1) >> 4);
  }
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x41uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923AD8;
    v4[1] = &off_1EA924100;
    v4[2] = 72 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 512) = v4;
  }
  return v4;
}

void sub_1DEA56228(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::Size()
{
  return 72;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924100;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923AD8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923AD8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Size()
{
  return 64;
}

void fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  _QWORD *v4;

  if (a3 == 2)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    __p[4] = v4[7];
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    __p[2] = v4[7];
LABEL_15:
    v4[7] = __p;
    return;
  }
  if (a3 <= 4)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    __p[8] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 8)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    __p[16] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x10)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    __p[32] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x20)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    __p[64] = v4[7];
    goto LABEL_15;
  }
  if (a3 <= 0x40)
  {
    v4 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    __p[128] = v4[7];
    goto LABEL_15;
  }
  operator delete(__p);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x87)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x11uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 128);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923D58;
    v4[1] = &off_1EA924380;
    v4[2] = 24 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 128) = v4;
  }
  return v4;
}

void sub_1DEA56570(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x107)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x21uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 256);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923D80;
    v4[1] = &off_1EA9243A8;
    v4[2] = 40 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 256) = v4;
  }
  return v4;
}

void sub_1DEA566AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x207)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x41uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 512);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923DD0;
    v4[1] = &off_1EA9243F8;
    v4[2] = 72 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 512) = v4;
  }
  return v4;
}

void sub_1DEA567E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x407)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x81uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 1024);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923E20;
    v4[1] = &off_1EA924448;
    v4[2] = 136 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 1024) = v4;
  }
  return v4;
}

void sub_1DEA56924(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) <= 0x807)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x101uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 2048);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923D30;
    v4[1] = &off_1EA924358;
    v4[2] = 264 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 2048) = v4;
  }
  return v4;
}

void sub_1DEA56A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x200)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x201uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 4096);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923DA8;
    v4[1] = &off_1EA9243D0;
    v4[2] = 520 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 4096) = v4;
  }
  return v4;
}

void sub_1DEA56BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = a1[2];
  v3 = a1 + 2;
  if ((unint64_t)(a1[3] - v2) >> 3 <= 0x400)
  {
    v11 = 0;
    std::vector<fst::MemoryPoolBase *>::resize((char **)a1 + 2, 0x401uLL, &v11);
    v2 = *v3;
  }
  v4 = *(_QWORD **)(v2 + 0x2000);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v5 = (char *)*a1;
    *v4 = &off_1EA923DF8;
    v4[1] = &off_1EA924420;
    v4[2] = 1032 * (_QWORD)v5;
    v4[3] = 0;
    v4[4] = v4 + 4;
    v4[5] = v4 + 4;
    v4[6] = 0;
    v6 = operator new[]();
    v7 = operator new(0x18uLL);
    v8 = (_QWORD *)v4[5];
    v9 = v4[6];
    *v7 = v4 + 4;
    v7[1] = v8;
    v7[2] = v6;
    *v8 = v7;
    v4[5] = v7;
    v4[6] = v9 + 1;
    v4[7] = 0;
    *(_QWORD *)(*v3 + 0x2000) = v4;
  }
  return v4;
}

void sub_1DEA56CE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v5;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  v5 = kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  MEMORY[0x1DF0ED014](v5);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Size()
{
  return 1032;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924420;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923DF8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923DF8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Size()
{
  return 1024;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::Size()
{
  return 520;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9243D0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923DA8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923DA8;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Size()
{
  return 512;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::Size()
{
  return 264;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924358;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923D30;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923D30;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Size()
{
  return 256;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::Size()
{
  return 136;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924448;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923E20;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923E20;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Size()
{
  return 128;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::Size()
{
  return 72;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9243F8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923DD0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923DD0;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::Size()
{
  return 40;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA9243A8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923D80;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923D80;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>::Size()
{
  return 32;
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::Size()
{
  return 24;
}

double fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924380;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

double fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923D58;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923D58;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>::Size()
{
  return 16;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (uint64_t **)(a1 + 32);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = v5[7];
      v5[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Matcher(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *a1 = v6;
  if (!v6)
  {
    v7 = operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v7, a2, v3);
    *a1 = v7;
  }
  return a1;
}

void sub_1DEA575DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1EA9247C0;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 36) = 0xFFFFFFFF00000001;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1DED16C50;
  *(_BYTE *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(a1 + 80);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 && v5 != 3)
  {
    if (v5 == 1)
    {
      *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v7 = (_QWORD *)fst::cerr(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_DWORD *)(a1 + 32) = 3;
      *(_BYTE *)(a1 + 74) = 1;
    }
  }
  return a1;
}

void sub_1DEA57748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &off_1EA923A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1EA923A60;
  *(_QWORD *)(a1 + 8) = &off_1EA924088;
  *(_OWORD *)(a1 + 16) = xmmword_1DED16C60;
  v2 = a1 + 32;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *v4 = v2;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v6 + 1;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1DEA57848(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

double fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &off_1EA924088;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Size()
{
  return 48;
}

double fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &off_1EA923A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &off_1EA923A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Size()
{
  return 40;
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA9247C0;
  *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2);
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + 56);
  *(_BYTE *)(v4 + 74) = *(_BYTE *)(a1 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(v4 + 80);
  return v4;
}

void sub_1DEA57A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState_(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  char v21;

  if (*(_DWORD *)(result + 16) == (_DWORD)a2)
    return result;
  v3 = result;
  *(_DWORD *)(result + 16) = a2;
  if (*(_DWORD *)(result + 32) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v3 + 74) = 1;
  }
  v6 = *(_QWORD **)(v3 + 24);
  if (!v6)
  {
    v8 = *(_QWORD **)(v3 + 136);
    if (v8)
    {
      *(_QWORD *)(v3 + 136) = v8[5];
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 96);
      if (v10 > 0xBF)
      {
        v13 = *(_QWORD *)(v3 + 104);
        if (v13 + 48 <= v10)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v3 + 120) + 16);
        }
        else
        {
          v14 = operator new[]();
          *(_QWORD *)(v3 + 104) = 0;
          v15 = operator new(0x18uLL);
          v13 = 0;
          v16 = *(_QWORD **)(v3 + 120);
          *v15 = v3 + 112;
          v15[1] = v16;
          v15[2] = v14;
          *v16 = v15;
          v17 = *(_QWORD *)(v3 + 128) + 1;
          *(_QWORD *)(v3 + 120) = v15;
          *(_QWORD *)(v3 + 128) = v17;
        }
        v8 = (_QWORD *)(v14 + v13);
        *(_QWORD *)(v3 + 104) = v13 + 48;
      }
      else
      {
        v8 = (_QWORD *)operator new[]();
        v11 = operator new(0x18uLL);
        v12 = *(_QWORD *)(v3 + 112);
        v11[1] = v3 + 112;
        v11[2] = v8;
        *v11 = v12;
        *(_QWORD *)(v12 + 8) = v11;
        *(_QWORD *)(v3 + 112) = v11;
        ++*(_QWORD *)(v3 + 128);
      }
      v8[5] = 0;
    }
    v18 = *(_QWORD *)(v3 + 8);
    v8[4] = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v18 + 136))(v18, a2, v8);
    *(_QWORD *)(v3 + 24) = v8;
    goto LABEL_28;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (!*v6)
    goto LABEL_16;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2) & 1) == 0)
  {
    if (*v6)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
LABEL_18:
      v6[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, a2, v6);
      goto LABEL_19;
    }
LABEL_16:
    v9 = (_DWORD *)v6[3];
    if (v9)
      --*v9;
    goto LABEL_18;
  }
LABEL_19:
  v8 = *(_QWORD **)(v3 + 24);
LABEL_28:
  if (*v8)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 80))(*v8, 16, 16);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
  *(_QWORD *)(v3 + 48) = result;
  *(_DWORD *)(v3 + 68) = a2;
  return result;
}

void sub_1DEA57DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find_(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  *(_BYTE *)(a1 + 72) = a2 == 0;
  if (a2 == -1)
    v4 = 0;
  else
    v4 = a2;
  *(_DWORD *)(a1 + 40) = v4;
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 32))
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 40);
  }
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    v7 = *(_QWORD **)(a1 + 24);
    if (*v7)
      (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 56))(*v7);
    else
      v7[4] = 0;
    while (1)
    {
      v20 = *(_QWORD **)(a1 + 24);
      if (*v20)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 24))(*v20) & 1) != 0)
          return *(_BYTE *)(a1 + 72) != 0;
        v20 = *(_QWORD **)(a1 + 24);
        v21 = *v20;
      }
      else
      {
        if (v20[4] >= v20[2])
          return *(_BYTE *)(a1 + 72) != 0;
        v21 = 0;
      }
      if (*(_DWORD *)(a1 + 32))
      {
        v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21) : v20[1]
                                                                                                 + 16 * v20[4]);
      }
      v24 = *(_DWORD *)(a1 + 40);
      v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24)
        v25 = 1;
      if (v25)
        break;
      v26 = *(_QWORD **)(a1 + 24);
      if (*v26)
        (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 40))(*v26);
      else
        ++v26[4];
    }
    if (v25 == 1)
      return 1;
    return *(_BYTE *)(a1 + 72) != 0;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
  {
    v9 = 0;
LABEL_74:
    v27 = *(_QWORD **)(a1 + 24);
    if (*v27)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v27 + 64))(*v27, v9);
    else
      v27[4] = v9;
    return *(_BYTE *)(a1 + 72) != 0;
  }
  v9 = 0;
  while (1)
  {
    v10 = (v8 + v9) >> 1;
    v11 = *(uint64_t **)(a1 + 24);
    v12 = *v11;
    if (*v11)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 64))(v12, (v8 + v9) >> 1);
      v11 = *(uint64_t **)(a1 + 24);
      v12 = *v11;
    }
    else
    {
      v11[4] = v10;
    }
    if (*(_DWORD *)(a1 + 32))
    {
      v13 = v12 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) : v11[1] + 16 * v11[4];
      v14 = (_DWORD *)(v13 + 4);
    }
    else
    {
      v14 = (_DWORD *)(v12 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) : v11[1] + 16 * v11[4]);
    }
    v15 = *(_DWORD *)(a1 + 40);
    if (*v14 <= v15)
      break;
    v8 = (v8 + v9) >> 1;
LABEL_30:
    if (v9 >= v8)
      goto LABEL_74;
  }
  if (*v14 < v15)
  {
    v9 = v10 + 1;
    goto LABEL_30;
  }
  while (v10 > v9)
  {
    v16 = *(uint64_t **)(a1 + 24);
    --v10;
    v17 = *v16;
    if (*v16)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 64))(v17, v10);
      v16 = *(uint64_t **)(a1 + 24);
      v17 = *v16;
    }
    else
    {
      v16[4] = v10;
    }
    if (*(_DWORD *)(a1 + 32))
    {
      if (v17)
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
      else
        v18 = v16[1] + 16 * v16[4];
      v19 = (_DWORD *)(v18 + 4);
    }
    else if (v17)
    {
      v19 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    }
    else
    {
      v19 = (_DWORD *)(v16[1] + 16 * v16[4]);
    }
    if (*v19 != *(_DWORD *)(a1 + 40))
    {
      v28 = v10 + 1;
      v29 = *(_QWORD **)(a1 + 24);
      if (*v29)
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 64))(*v29, v28);
      else
        v29[4] = v28;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done_(uint64_t a1)
{
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(uint64_t **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *v4;
  if (*v4)
  {
    if (v5)
      v7 = 2;
    else
      v7 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v7, 15);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(uint64_t **)(a1 + 24);
    v6 = *v4;
  }
  if (v5)
  {
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    else
      v8 = v4[1] + 16 * v4[4];
    v9 = (_DWORD *)(v8 + 4);
  }
  else if (v6)
  {
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  }
  else
  {
    v9 = (_DWORD *)(v4[1] + 16 * v4[4]);
  }
  return *v9 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value_(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 80))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  }
  else
  {
    return v3[1] + 16 * v3[4];
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1EA9247C0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &off_1EA923A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 11);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1 + 10);
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  __int128 v5;
  _QWORD *v6;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924A90;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD ***)(a1 + 136);
  *v3 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*v4, 1);
  v3[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v4[1], 1);
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  v3[4] = (_QWORD *)-1;
  *((_BYTE *)v3 + 40) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v5 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v6 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v6;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA585C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v13;
  fst *v15;
  _QWORD *v16;
  void *__p[2];
  char v18;
  char v19;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 136);
  LOBYTE(__p[0]) = *((_BYTE *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  v8 = *(_DWORD *)(a1 + 184);
  if (v8)
  {
    if (v8 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v9 == -1 && v10 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v15 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
      if (v18 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v13 = v10 == -1 || v9 <= v10;
      if (v9 == -1 || !v13)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_1DEA587E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1EA924F28;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  *(_QWORD *)(v6 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 144), 0);
  *(_QWORD *)(v6 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 152), 0);
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_1DEA5890C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 96);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

void fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  if (*(_DWORD *)(a1 + 32) != (_DWORD)a2 || *(_DWORD *)(a1 + 36) != (_DWORD)a3 || *a4 != *(_BYTE *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 36) = a3;
    *(_BYTE *)(a1 + 40) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(_BYTE *)(a1 + 41) = v10;
    *(_BYTE *)(a1 + 43) = v8 == 0;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24), a3);
    v14 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a3) == INFINITY
       && v11 == v12;
    *(_BYTE *)(a1 + 42) = v14;
    *(_BYTE *)(a1 + 44) = v12 == 0;
  }
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD *v30;
  int v31;

  a1[15] = a2;
  v30 = a1 + 3;
  v4 = (int8x8_t)a1[4];
  if (v4)
  {
    v5 = **(int **)(a1[9] + 120)
       + 7853 * *(int *)(*(_QWORD *)(a1[9] + 120) + 4)
       + 7867 * *(char *)(*(_QWORD *)(a1[9] + 120) + 8);
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL)
    {
      v8 = **(int **)(a1[9] + 120)
         + 7853 * *(int *)(*(_QWORD *)(a1[9] + 120) + 4)
         + 7867 * *(char *)(*(_QWORD *)(a1[9] + 120) + 8);
      if (v5 >= *(_QWORD *)&v4)
        v8 = v5 % *(_QWORD *)&v4;
    }
    else
    {
      v8 = (*(_QWORD *)&v4 - 1) & v5;
    }
    v9 = *(uint64_t ***)(*v30 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == v5)
        {
          v12 = *((unsigned int *)i + 4);
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(a1 + 11, *((_DWORD *)i + 4), -1))
          {
            return v12;
          }
        }
        else
        {
          if (v7 > 1)
          {
            if (v11 >= *(_QWORD *)&v4)
              v11 %= *(_QWORD *)&v4;
          }
          else
          {
            v11 &= *(_QWORD *)&v4 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  v14 = a1[12];
  v13 = a1[13];
  v12 = (uint64_t)(v13 - v14) / 12;
  v31 = v12;
  v15 = a1[14];
  if (v13 >= v15)
  {
    if ((unint64_t)(v12 + 1) > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v14) >> 2);
    v19 = 2 * v18;
    if (2 * v18 <= v12 + 1)
      v19 = v12 + 1;
    if (v18 >= 0xAAAAAAAAAAAAAAALL)
      v20 = 0x1555555555555555;
    else
      v20 = v19;
    if (v20)
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v20);
    else
      v21 = 0;
    v22 = v20 + 12 * v12;
    v23 = v20 + 12 * v21;
    v24 = *a2;
    *(_DWORD *)(v22 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v22 = v24;
    v17 = v22 + 12;
    v26 = (_DWORD *)a1[12];
    v25 = (_DWORD *)a1[13];
    if (v25 != v26)
    {
      do
      {
        v27 = *(_QWORD *)(v25 - 3);
        v25 -= 3;
        v28 = v25[2];
        *(_QWORD *)(v22 - 12) = v27;
        v22 -= 12;
        *(_DWORD *)(v22 + 8) = v28;
      }
      while (v25 != v26);
      v25 = (_DWORD *)a1[12];
    }
    a1[12] = v22;
    a1[13] = v17;
    a1[14] = v23;
    if (v25)
      operator delete(v25);
  }
  else
  {
    v16 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v13 = v16;
    v17 = v13 + 12;
  }
  a1[13] = v17;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v30, v12, &v31);
  return v12;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t *v23;
  unint64_t v24;

  if (a2 < -1)
  {
    v9 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (a2 == -1)
      v8 = *(int **)(v7 + 120);
    else
      v8 = (int *)(*(_QWORD *)(v7 + 96) + 12 * a2);
    v9 = *v8 + 7853 * v8[1] + 7867 * *((char *)v8 + 8);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), a2))
          {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(a1 + 32));
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v16 = *v23;
LABEL_44:
    *v23 = v16;
    goto LABEL_45;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)v16)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (uint64_t *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 40);
}

void sub_1DEA590E0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    v3 = *a1;
    if (a2 == -1)
      v4 = *(_QWORD *)(v3 + 120);
    else
      v4 = *(_QWORD *)(v3 + 96) + 12 * a2;
    if (a3 == -1)
      v6 = *(_QWORD *)(v3 + 120);
    else
      v6 = *(_QWORD *)(v3 + 96) + 12 * a3;
    if (v4 == v6)
      return 1;
    if (*(_DWORD *)v4 != *(_DWORD *)v6 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v6 + 4))
      return 0;
    return *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8);
  }
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a2);
  return v4;
}

void sub_1DEA591EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA924F28;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  *(_QWORD *)(v4 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 32), a2);
  *(_QWORD *)(v4 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 40), a2);
  *(_BYTE *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_1DEA59378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 96) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 32);
      v3 = (_QWORD **)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 40);
    v3 = (_QWORD **)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Final_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  uint64_t v25;
  char v26;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      if (v11)
        v12 = v10;
      else
        v12 = v9;
      v13 = *(_QWORD *)v12;
      if (v11)
        v14 = v9;
      else
        v14 = v10;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(a1 + 16);
      v17 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(*(unsigned __int8 **)(v16 + 136), SHIDWORD(v13), *(_QWORD *)v14);
      if (v17 != -1)
      {
        v18 = *(_DWORD *)(v14 + 12);
        v19 = *(float *)(v14 + 8);
        v20 = *(float *)(v12 + 8);
        LODWORD(v25) = *(_DWORD *)(v12 + 12);
        HIDWORD(v25) = v18;
        v26 = v17;
        *(_DWORD *)(a1 + 68) = v13;
        *(_DWORD *)(a1 + 72) = HIDWORD(v15);
        v21 = NAN;
        if (v20 != -INFINITY && v19 != -INFINITY)
        {
          v21 = INFINITY;
          v22 = v19 == INFINITY || v20 == INFINITY;
          v23 = v20 + v19;
          if (!v22)
            v21 = v23;
        }
        *(float *)(a1 + 76) = v21;
        *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v16 + 176), &v25);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t result;

  if (a3 == -1)
  {
    result = a1[40];
    if ((_DWORD)result == 1)
      return result;
    if ((_DWORD)result)
      return 255;
    if (a1[44])
      return 0;
    if (a1[42])
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
    if (a2)
    {
      if (a2 != -1)
        return 0;
      result = a1[40];
      if ((_DWORD)result == 2)
        return result;
      if (!(_DWORD)result)
      {
        if (!a1[43])
        {
          if (a1[41])
            return 0xFFFFFFFFLL;
          else
            return 2;
        }
        return 0;
      }
      return 255;
    }
    if (a1[40])
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1EA924F28;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_9:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA59C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  char v15;
  unsigned int *v16;
  __int128 *v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v19 = *(_OWORD *)a4;
        v20 = v12;
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          v14 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(v13, SDWORD1(v19), v20);
          if (v14 != -1)
          {
            v15 = v14;
            v16 = (unsigned int *)&v19;
            v17 = &v20;
LABEL_10:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v16, (uint64_t)v17, v15);
          }
        }
        else
        {
          v18 = fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::FilterArc(v13, SDWORD1(v20), v19);
          if (v18 != -1)
          {
            v15 = v18;
            v16 = (unsigned int *)&v20;
            v17 = &v19;
            goto LABEL_10;
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(uint64_t a1, int a2)
{
  uint64_t MutableState;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(MutableState + 24);
  v7 = *(_QWORD *)(MutableState + 32);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1)
      v9 = 1;
    v10 = (_DWORD *)(v6 + 4);
    do
    {
      if (!*(v10 - 1))
        ++*(_QWORD *)(MutableState + 8);
      if (!*v10)
        ++*(_QWORD *)(MutableState + 16);
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  if (*(_BYTE *)(v5 + 120))
  {
    if ((*(_BYTE *)(MutableState + 56) & 4) != 0)
    {
      v11 = v8 + *(_QWORD *)(v5 + 128);
      *(_QWORD *)(v5 + 128) = v11;
      if (v11 > *(_QWORD *)(v5 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(v5, MutableState, 0);
        v6 = *(_QWORD *)(MutableState + 24);
        v7 = *(_QWORD *)(MutableState + 32);
      }
    }
  }
  v12 = v7 - v6;
  if (v12)
  {
    v13 = v12 >> 4;
    v14 = *(_DWORD *)(a1 + 68);
    if (v13 <= 1)
      v13 = 1;
    v15 = (int *)(v6 + 12);
    do
    {
      v17 = *v15;
      v15 += 4;
      v16 = v17;
      if (v17 >= v14)
      {
        v14 = v16 + 1;
        *(_DWORD *)(a1 + 68) = v16 + 1;
      }
      --v13;
    }
    while (v13);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(a1, a2);
  *(_DWORD *)(MutableState + 56) |= 0xAu;
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t MutableState;
  uint64_t v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 104))
  {
    v5 = *(_DWORD *)(MutableState + 56);
    if ((v5 & 4) == 0)
    {
      *(_DWORD *)(MutableState + 56) = v5 | 4;
      v6 = *(_QWORD *)(MutableState + 32) - *(_QWORD *)(MutableState + 24) + *(_QWORD *)(a1 + 128) + 64;
      *(_QWORD *)(a1 + 128) = v6;
      *(_BYTE *)(a1 + 120) = 1;
      if (v6 > *(_QWORD *)(a1 + 112))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, MutableState, 0);
    }
  }
  return v4;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(uint64_t a1, uint64_t a2, char a3)
{
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t MutableState;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  fst *v31;
  _QWORD *v32;
  fst *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41[2];
  char v42;
  char v43;
  char v44;
  void *__p[2];
  char v46;

  if (*(_BYTE *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v6 = fst::LogMessage::LogMessage((fst *)v41, (uint64_t)__p);
      v7 = (_QWORD *)fst::cerr(v6);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"), free recently cached = ", 26);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cache size = ", 15);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", cache frac = ", 15);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache limit = ", 16);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v41);
      if (v46 < 0)
        operator delete(__p[0]);
    }
    v14 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * 0.666);
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 64) = v15;
    while (v15 != a1 + 32)
    {
      v16 = *(_DWORD *)(v15 + 16);
      if (v16)
        v17 = v16 - 1;
      else
        v17 = *(_DWORD *)(a1 + 92);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v17);
      v19 = *(_QWORD *)(a1 + 128);
      if (v19 > v14 && !*(_DWORD *)(MutableState + 60))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v20 = *(_DWORD *)(MutableState + 56);
LABEL_19:
            if ((v20 & 4) != 0)
            {
              v21 = *(_QWORD *)(MutableState + 32) - *(_QWORD *)(MutableState + 24) + 64;
              FstCheck(v21 <= v19, "(size) <= (cache_size_)", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 128) -= v21;
            }
            v22 = *(_QWORD *)(a1 + 64);
            v23 = *(_DWORD *)(v22 + 16);
            if (!v23 || v23 - 1 == *(_DWORD *)(a1 + 92))
            {
              *(_DWORD *)(a1 + 92) = -1;
              *(_QWORD *)(a1 + 96) = 0;
              v23 = *(_DWORD *)(v22 + 16);
            }
            fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(fst::MemoryPoolCollection ***)(*(_QWORD *)(a1 + 8) + 8 * v23), (uint64_t **)(a1 + 72));
            *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(*(_QWORD *)(a1 + 64) + 16)) = 0;
            v24 = *(uint64_t **)(a1 + 64);
            v25 = v24[1];
            *(_QWORD *)(a1 + 64) = v25;
            v26 = *v24;
            *(_QWORD *)(v26 + 8) = v25;
            *(_QWORD *)v24[1] = v26;
            v27 = *(uint64_t **)(a1 + 56);
            --*(_QWORD *)(a1 + 48);
            std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>(v27, (uint64_t)v24);
            v15 = *(_QWORD *)(a1 + 64);
            continue;
          }
        }
        else
        {
          v20 = *(_DWORD *)(MutableState + 56);
          if ((v20 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *(_DWORD *)(MutableState + 56) &= ~8u;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v15;
    }
    v28 = *(_QWORD *)(a1 + 128);
    if ((a3 & 1) != 0 || v28 <= v14)
    {
      if (v14)
      {
        if (v28 > v14)
        {
          v29 = *(_QWORD *)(a1 + 112);
          do
          {
            v29 *= 2;
            v30 = v28 > 2 * v14;
            v14 *= 2;
          }
          while (v30);
          *(_QWORD *)(a1 + 112) = v29;
        }
      }
      else if (v28)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v31 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)__p);
        v32 = (_QWORD *)fst::cerr(v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
        if (v46 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, a2, 1);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "INFO");
      v33 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)v41);
      v34 = (_QWORD *)fst::cerr(v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"), free recently cached = ", 26);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", cache size = ", 15);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", cache frac = ", 15);
      v39 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", cache limit = ", 16);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
      if (v42 < 0)
        operator delete(v41[0]);
    }
  }
}

void sub_1DEA5A36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t MutableState;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2)
    return *(_QWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
      v4 = MutableState;
      *(_QWORD *)(a1 + 96) = MutableState;
      *(_DWORD *)(MutableState + 56) |= 4u;
      v8 = *(_QWORD *)(MutableState + 40);
      v9 = *(_QWORD *)(MutableState + 24);
      if ((unint64_t)(v8 - v9) > 0x7FF)
        return v4;
      v10 = *(_QWORD *)(MutableState + 32);
      v18 = MutableState + 48;
      v11 = (char *)operator new(0x800uLL);
      v12 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
      if (v10 == v9)
      {
        v14 = vdupq_n_s64(v10);
        v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
      }
      else
      {
        v13 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          *((_OWORD *)v13 - 1) = *(_OWORD *)(v10 - 16);
          v13 -= 16;
          v10 -= 16;
        }
        while (v10 != v9);
        v14 = *(int64x2_t *)(v4 + 24);
      }
      *(_QWORD *)(v4 + 24) = v13;
      *(_QWORD *)(v4 + 32) = v12;
      v16 = v14;
      *(_QWORD *)(v4 + 40) = v11 + 2048;
      v17 = v8;
      v15 = v14.i64[0];
      std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v15);
      return *(_QWORD *)(a1 + 96);
    }
    v6 = *(_QWORD *)(a1 + 96);
    if (!*(_DWORD *)(v6 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)v6 = 2139095040;
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v6 + 24);
      v4 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v4 + 56) |= 4u;
      return v4;
    }
    *(_DWORD *)(v6 + 56) &= ~4u;
    *(_BYTE *)(a1 + 88) = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, a2 + 1);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v31;

  v31 = a2;
  v3 = a2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = ((uint64_t)v4 - v5) >> 3;
  if (v6 <= a2)
  {
    v8 = a2 + 1;
    v9 = v8 - v6;
    if (v8 <= v6)
    {
      if (a2 + 1 < v6)
        *(_QWORD *)(a1 + 16) = v5 + 8 * v8;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v9 <= (v10 - (uint64_t)v4) >> 3)
      {
        v24 = &v4[v9];
        v25 = 8 * v8 - 8 * v6;
        do
        {
          *v4++ = 0;
          v25 -= 8;
        }
        while (v25);
        *(_QWORD *)(a1 + 16) = v24;
      }
      else
      {
        if (a2 <= -2)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v10 - v5;
        v12 = (v10 - v5) >> 2;
        if (v12 <= v8)
          v12 = a2 + 1;
        if (v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v13);
        v16 = &v14[8 * v6];
        v17 = &v14[8 * v8];
        v18 = 8 * v8 - 8 * v6;
        v19 = v16;
        do
        {
          *(_QWORD *)v19 = 0;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
        v20 = &v14[8 * v15];
        v22 = *(char **)(a1 + 8);
        v21 = *(char **)(a1 + 16);
        if (v21 != v22)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v16 - 1) = v23;
            v16 -= 8;
          }
          while (v21 != v22);
          v21 = *(char **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v20;
        if (v21)
          operator delete(v21);
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 8 * a2);
    if (v7)
      return v7;
  }
  v7 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t **)(a1 + 72));
  *(_DWORD *)v7 = 2139095040;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(v7 + 40) = 0;
  v26 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v7 + 48) = v26;
  ++*(_QWORD *)(v26 + 8);
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = v7;
  if (*(_BYTE *)a1)
  {
    v27 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(*(fst::MemoryPoolCollection **)(a1 + 56), &v31);
    v29 = *(_QWORD *)(a1 + 32);
    v28 = (_QWORD *)(a1 + 32);
    *v27 = v29;
    v27[1] = v28;
    *(_QWORD *)(v29 + 8) = v27;
    *v28 = v27;
    ++v28[2];
  }
  return v7;
}

_QWORD *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(uint64_t **a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;

  if (a2 == 2)
  {
    v6 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    v3 = v6;
    v4 = (_QWORD *)v6[7];
    if (!v4)
    {
      v14 = v6[2];
      if (v14 > 0x9F)
      {
        v25 = v3[3];
        if (v25 + 40 <= v14)
        {
          v26 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v26 = operator new[]();
          v3[3] = 0;
          v27 = operator new(0x18uLL);
          v25 = 0;
          v27[2] = v26;
          v28 = (_QWORD *)v3[5];
          v29 = v3[6];
          *v27 = v3 + 4;
          v27[1] = v28;
          *v28 = v27;
          v3[5] = v27;
          v3[6] = v29 + 1;
        }
        v4 = (_QWORD *)(v26 + v25);
        v3[3] = v25 + 40;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v15 = operator new(0x18uLL);
        v15[2] = v4;
        v17 = v3[4];
        v16 = v3 + 4;
        *v15 = v17;
        v15[1] = v16;
        *(_QWORD *)(v17 + 8) = v15;
        *v16 = v15;
        ++v16[2];
      }
      v4[4] = 0;
      return v4;
    }
    v5 = v4[4];
LABEL_13:
    v3[7] = v5;
    return v4;
  }
  if (a2 == 1)
  {
    v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    v3 = v2;
    v4 = (_QWORD *)v2[7];
    if (!v4)
    {
      v10 = v2[2];
      if (v10 > 0x5F)
      {
        v20 = v3[3];
        if (v20 + 24 <= v10)
        {
          v21 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v21 = operator new[]();
          v3[3] = 0;
          v22 = operator new(0x18uLL);
          v20 = 0;
          v22[2] = v21;
          v23 = (_QWORD *)v3[5];
          v24 = v3[6];
          *v22 = v3 + 4;
          v22[1] = v23;
          *v23 = v22;
          v3[5] = v22;
          v3[6] = v24 + 1;
        }
        v4 = (_QWORD *)(v21 + v20);
        v3[3] = v20 + 24;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v11 = operator new(0x18uLL);
        v11[2] = v4;
        v13 = v3[4];
        v12 = v3 + 4;
        *v11 = v13;
        v11[1] = v12;
        *(_QWORD *)(v13 + 8) = v11;
        *v12 = v11;
        ++v12[2];
      }
      v4[2] = 0;
      return v4;
    }
    v5 = v4[2];
    goto LABEL_13;
  }
  if (a2 <= 4)
  {
    v7 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    v3 = v7;
    v4 = (_QWORD *)v7[7];
    if (!v4)
    {
      v30 = v7[2];
      if (v30 > 0x11F)
      {
        v38 = v3[3];
        if (v38 + 72 <= v30)
        {
          v39 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v39 = operator new[]();
          v3[3] = 0;
          v40 = operator new(0x18uLL);
          v38 = 0;
          v40[2] = v39;
          v41 = (_QWORD *)v3[5];
          v42 = v3[6];
          *v40 = v3 + 4;
          v40[1] = v41;
          *v41 = v40;
          v3[5] = v40;
          v3[6] = v42 + 1;
        }
        v4 = (_QWORD *)(v39 + v38);
        v3[3] = v38 + 72;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v31 = operator new(0x18uLL);
        v31[2] = v4;
        v33 = v3[4];
        v32 = v3 + 4;
        *v31 = v33;
        v31[1] = v32;
        *(_QWORD *)(v33 + 8) = v31;
        *v32 = v31;
        ++v32[2];
      }
      v4[8] = 0;
      return v4;
    }
    v5 = v4[8];
    goto LABEL_13;
  }
  if (a2 <= 8)
  {
    v8 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    v3 = v8;
    v4 = (_QWORD *)v8[7];
    if (!v4)
    {
      v34 = v8[2];
      if (v34 > 0x21F)
      {
        v43 = v3[3];
        if (v43 + 136 <= v34)
        {
          v44 = *(_QWORD *)(v3[5] + 16);
        }
        else
        {
          v44 = operator new[]();
          v3[3] = 0;
          v45 = operator new(0x18uLL);
          v43 = 0;
          v45[2] = v44;
          v46 = (_QWORD *)v3[5];
          v47 = v3[6];
          *v45 = v3 + 4;
          v45[1] = v46;
          *v46 = v45;
          v3[5] = v45;
          v3[6] = v47 + 1;
        }
        v4 = (_QWORD *)(v44 + v43);
        v3[3] = v43 + 136;
      }
      else
      {
        v4 = (_QWORD *)operator new[]();
        v35 = operator new(0x18uLL);
        v35[2] = v4;
        v37 = v3[4];
        v36 = v3 + 4;
        *v35 = v37;
        v35[1] = v36;
        *(_QWORD *)(v37 + 8) = v35;
        *v36 = v35;
        ++v36[2];
      }
      v4[16] = 0;
      return v4;
    }
    v5 = v4[16];
    goto LABEL_13;
  }
  if (a2 <= 0x10)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<32>>::Link>::Allocate(v18 + 1);
      v4[32] = 0;
      return v4;
    }
    v19 = v4[32];
    goto LABEL_44;
  }
  if (a2 <= 0x20)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>::TN<64>>::Link>::Allocate(v18 + 1);
      v4[64] = 0;
      return v4;
    }
    v19 = v4[64];
    goto LABEL_44;
  }
  if (a2 <= 0x40)
  {
    v18 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    v4 = (_QWORD *)v18[7];
    if (!v4)
    {
      v4 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Allocate(v18 + 1);
      v4[128] = 0;
      return v4;
    }
    v19 = v4[128];
LABEL_44:
    v18[7] = v19;
    return v4;
  }
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(*(uint64_t ***)(a1 + 32), *(_QWORD **)a1, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 4);
  return a1;
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::Allocate(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 >> 5 > 0x80)
  {
    v7 = v1[2];
    if (v7 + 1032 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 1032;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(uint64_t **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a1);
  v2 = v1;
  v3 = v1[7];
  if (v3)
  {
    v1[7] = *(_QWORD *)(v3 + 64);
  }
  else
  {
    v4 = v1[2];
    if (v4 > 0x11F)
    {
      v8 = v2[3];
      if (v8 + 72 <= v4)
      {
        v9 = *(_QWORD *)(v2[5] + 16);
      }
      else
      {
        v9 = operator new[]();
        v2[3] = 0;
        v10 = operator new(0x18uLL);
        v8 = 0;
        v10[2] = v9;
        v11 = (_QWORD *)v2[5];
        v12 = v2[6];
        *v10 = v2 + 4;
        v10[1] = v11;
        *v11 = v10;
        v2[5] = v10;
        v2[6] = v12 + 1;
      }
      v3 = v9 + v8;
      v2[3] = v8 + 72;
    }
    else
    {
      v3 = operator new[]();
      v5 = operator new(0x18uLL);
      v5[2] = v3;
      v7 = v2[4];
      v6 = v2 + 4;
      *v5 = v7;
      v5[1] = v6;
      *(_QWORD *)(v7 + 8) = v5;
      *v6 = v5;
      ++v6[2];
    }
    *(_QWORD *)(v3 + 64) = 0;
  }
  return v3;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, char a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  unsigned int Id;
  _QWORD *MutableState;
  __int128 v17;
  uint64_t v18;
  char v19;

  v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v18) = a3[3];
  HIDWORD(v18) = v7;
  v19 = a5;
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *((float *)a3 + 2);
  v11 = NAN;
  if (v10 != -INFINITY)
  {
    v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY)
        v11 = INFINITY;
      else
        v11 = v10 + v12;
    }
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v18);
  *(_QWORD *)&v17 = __PAIR64__(v9, v8);
  *((_QWORD *)&v17 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = (_QWORD *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v17);
}

_QWORD *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(_QWORD *result, _OWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = result;
  v5 = (_OWORD *)result[4];
  v4 = result[5];
  if ((unint64_t)v5 >= v4)
  {
    v7 = result[3];
    v8 = ((uint64_t)v5 - v7) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = (uint64_t **)(result + 6);
    v11 = v4 - v7;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v23 = v3 + 6;
    if (v12)
      v13 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(v10, v12);
    else
      v13 = 0;
    v14 = &v13[2 * v8];
    *v14 = *a2;
    v15 = v3[3];
    v16 = v3[4];
    if (v16 == v15)
    {
      v18 = vdupq_n_s64(v16);
      v17 = &v13[2 * v8];
    }
    else
    {
      v17 = &v13[2 * v8];
      do
      {
        *((_OWORD *)v17 - 1) = *(_OWORD *)(v16 - 16);
        v17 -= 2;
        v16 -= 16;
      }
      while (v16 != v15);
      v18 = *(int64x2_t *)(v3 + 3);
    }
    v6 = v14 + 1;
    v3[3] = v17;
    v3[4] = v14 + 1;
    v21 = v18;
    v19 = v3[5];
    v3[5] = &v13[2 * v12];
    v22 = v19;
    v20 = v18.i64[0];
    result = (_QWORD *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  v3[4] = v6;
  return result;
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t MutableState;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  std::string *v59;
  void **v60;
  int v61;

  v3 = a1;
  *a1 = &unk_1EA9256D8;
  a1[1] = 0;
  v59 = (std::string *)(a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(a1 + 2, "null");
  v3[5] = 0;
  v58 = v3 + 5;
  v3[6] = 0;
  *((_DWORD *)v3 + 14) = 1;
  *v3 = &off_1EA924788;
  *((_BYTE *)v3 + 60) = 0;
  *((_DWORD *)v3 + 16) = -1;
  v60 = (void **)(v3 + 9);
  *(_OWORD *)((char *)v3 + 68) = 0u;
  *(_OWORD *)((char *)v3 + 84) = 0u;
  *((_DWORD *)v3 + 25) = -1;
  *((_BYTE *)v3 + 104) = *(_BYTE *)(a2 + 104);
  v3[14] = *(_QWORD *)(a2 + 112);
  v4 = operator new();
  v5 = *((_BYTE *)v3 + 104);
  v6 = v3[14];
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(v4, v5);
  *(_BYTE *)(v4 + 88) = v6 == 0;
  *(_DWORD *)(v4 + 92) = -1;
  *(_BYTE *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 96) = 0;
  v7 = 8096;
  if (v6 > 0x1FA0)
    v7 = v6;
  *(_QWORD *)(v4 + 112) = v7;
  *(_BYTE *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  v3[15] = v4;
  *((_BYTE *)v3 + 128) = *(_BYTE *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 120);
  if (v4 != v8)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(v4);
    v56 = a2;
    v57 = v3;
    v9 = *(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v4 + 8);
    if (v9 >> 3 > (unint64_t)((*(_QWORD *)(v4 + 24) - v10) >> 3))
    {
      if (v9 < 0)
LABEL_56:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = *(_QWORD *)(v4 + 16);
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v9 >> 3);
      v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
      v15 = &v12[8 * v14];
      v17 = *(char **)(v4 + 8);
      v16 = *(char **)(v4 + 16);
      v18 = v13;
      if (v16 != v17)
      {
        do
        {
          v19 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v18 - 1) = v19;
          v18 -= 8;
        }
        while (v16 != v17);
        v16 = *(char **)(v4 + 8);
      }
      *(_QWORD *)(v4 + 8) = v18;
      *(_QWORD *)(v4 + 16) = v13;
      *(_QWORD *)(v4 + 24) = v15;
      if (v16)
        operator delete(v16);
    }
    v61 = 0;
    v20 = *(_QWORD *)(v8 + 8);
    if (*(_QWORD *)(v8 + 16) != v20)
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v20 + 8 * v21);
        if (v22)
        {
          v23 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t **)(v4 + 72));
          v24 = v23;
          *(_DWORD *)v23 = *(_DWORD *)v22;
          v25 = *(_OWORD *)(v22 + 8);
          v27 = *(_BYTE **)(v22 + 24);
          v26 = *(_BYTE **)(v22 + 32);
          *(_QWORD *)(v23 + 32) = 0;
          *(_QWORD *)(v23 + 40) = 0;
          *(_QWORD *)(v23 + 24) = 0;
          v28 = *(_QWORD *)(v4 + 80);
          *(_QWORD *)(v23 + 48) = v28;
          *(_OWORD *)(v23 + 8) = v25;
          ++*(_QWORD *)(v28 + 8);
          v29 = v26 - v27;
          if (v26 != v27)
          {
            if (v29 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate((uint64_t **)(v23 + 48), v29 >> 4);
            *(_QWORD *)(v24 + 24) = v30;
            *(_QWORD *)(v24 + 32) = v30;
            v31 = &v30[2 * (v29 >> 4)];
            *(_QWORD *)(v24 + 40) = v31;
            memmove(v30, v27, v29);
            *(_QWORD *)(v24 + 32) = v31;
          }
          *(_DWORD *)(v24 + 56) = *(_DWORD *)(v22 + 56);
          *(_DWORD *)(v24 + 60) = 0;
          if (*(_BYTE *)v4)
          {
            v32 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(*(fst::MemoryPoolCollection **)(v4 + 56), &v61);
            v33 = *(_QWORD *)(v4 + 32);
            *v32 = v33;
            v32[1] = v4 + 32;
            *(_QWORD *)(v33 + 8) = v32;
            *(_QWORD *)(v4 + 32) = v32;
            ++*(_QWORD *)(v4 + 48);
          }
        }
        else
        {
          v24 = 0;
        }
        v35 = *(uint64_t **)(v4 + 16);
        v34 = *(_QWORD *)(v4 + 24);
        if ((unint64_t)v35 >= v34)
        {
          v37 = *(_QWORD *)(v4 + 8);
          v38 = ((uint64_t)v35 - v37) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            goto LABEL_56;
          v39 = v34 - v37;
          v40 = v39 >> 2;
          if (v39 >> 2 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
            v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v41);
          else
            v42 = 0;
          v43 = (uint64_t *)(v41 + 8 * v38);
          *v43 = v24;
          v36 = v43 + 1;
          v45 = *(char **)(v4 + 8);
          v44 = *(char **)(v4 + 16);
          if (v44 != v45)
          {
            do
            {
              v46 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *--v43 = v46;
            }
            while (v44 != v45);
            v44 = *(char **)(v4 + 8);
          }
          *(_QWORD *)(v4 + 8) = v43;
          *(_QWORD *)(v4 + 16) = v36;
          *(_QWORD *)(v4 + 24) = v41 + 8 * v42;
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v35 = v24;
          v36 = v35 + 1;
        }
        *(_QWORD *)(v4 + 16) = v36;
        v61 = ++v21;
        v20 = *(_QWORD *)(v8 + 8);
      }
      while (v21 < (*(_QWORD *)(v8 + 16) - v20) >> 3);
    }
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(v4 + 40);
    *(_BYTE *)(v4 + 88) = *(_BYTE *)(v8 + 88);
    *(_DWORD *)(v4 + 92) = *(_DWORD *)(v8 + 92);
    if (*(_DWORD *)(v8 + 92) == -1)
    {
      MutableState = 0;
      a2 = v56;
      v3 = v57;
    }
    else
    {
      v3 = v57;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(v4, 0);
      a2 = v56;
    }
    *(_QWORD *)(v4 + 96) = MutableState;
  }
  v48 = *(_OWORD *)(v8 + 120);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v4 + 120) = v48;
  *((_BYTE *)v3 + 60) = *(_BYTE *)(a2 + 60);
  v3[8] = *(_QWORD *)(a2 + 64);
  std::vector<BOOL>::operator=(v60, a2 + 72);
  v3[12] = *(_QWORD *)(a2 + 96);
  *v3 = off_1EA925248;
  std::string::operator=(v59, (const std::string *)(a2 + 16));
  v3[1] = v3[1] & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v49 = *(_QWORD *)(a2 + 40);
  v50 = v3[5];
  if (v50 != v49)
  {
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    if (v49)
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
    else
      v51 = 0;
    *v58 = v51;
  }
  v52 = *(_QWORD *)(a2 + 48);
  v53 = v3[6];
  if (v53 != v52)
  {
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    if (v52)
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
    else
      v54 = 0;
    v3[6] = v54;
  }
  return v3;
}

void sub_1DEA5B460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x1DF0ED014](v16, 0x10A0C40690396FALL);
  if (*a15)
    operator delete(*a15);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;

  a1[1] = a1;
  a1[2] = a1;
  v4 = (uint64_t)(a1 + 3);
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(a1 + 3), a2[8], a1 + 1, a1 + 2);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  v5 = (uint64_t *)a2[12];
  v6 = (uint64_t *)a2[13];
  if (v6 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 2);
    if (v7 >= 0x1555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v7);
    a1[12] = v8;
    a1[13] = v8;
    a1[14] = &v8[3 * v9];
    do
    {
      v10 = *v5;
      v8[2] = *((_DWORD *)v5 + 2);
      *(_QWORD *)v8 = v10;
      v8 += 3;
      v5 = (uint64_t *)((char *)v5 + 12);
    }
    while (v5 != v6);
    a1[13] = v8;
  }
  for (i = (uint64_t *)a2[6]; i; i = (uint64_t *)*i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(v4, *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_1DEA5B5C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorCacheStore(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_1DED16C40;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_1DED16C40;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_1DED16C40;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(a1 + 80) = v5;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_1DEA5B6F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  fst::MemoryPoolCollection **v4;
  void *v6;

  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(v4);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 72));
  std::__list_imp<int,fst::PoolAllocator<int>>::clear(v2);
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)(v1 + 56));
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_1EA924A90;
  v2 = a1[17];
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1DF0ED014](v4, 0x20C4093837F09);
    }
    MEMORY[0x1DF0ED014](v2, 0x1060C4035244DBALL);
  }
  v5 = a1[22];
  if (v5)
  {
    v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(_QWORD *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x1DF0ED014](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924C10;
  v3 = operator new();
  v4 = *(_QWORD ***)(a1 + 136);
  *(_QWORD *)v3 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*v4, 1);
  v5 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v4[1], 1);
  *(_QWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  *(_QWORD *)(v3 + 24) = -1;
  *(_BYTE *)(v3 + 32) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v6 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v6 + 32))(*(_QWORD *)v6);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v7 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v7;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA5BA40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v13;
  fst *v15;
  _QWORD *v16;
  void *__p[2];
  char v18;
  char v19;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 136);
  LOBYTE(__p[0]) = *((_BYTE *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  v8 = *(_DWORD *)(a1 + 184);
  if (v8)
  {
    if (v8 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v9 == -1 && v10 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v15 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
      if (v18 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v13 = v10 == -1 || v9 <= v10;
      if (v9 == -1 || !v13)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_1DEA5BC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1EA925028;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  *(_QWORD *)(v6 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 144), 0);
  *(_QWORD *)(v6 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 152), 0);
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_1DEA5BD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 96);
  v5 = (int *)(v4 + 12 * a2);
  v6 = *v5;
  v7 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v5);
  v11 = v7;
  if (v7 != INFINITY)
  {
    v8 = v5[1];
    v9 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v8);
    v11 = v9;
    if (v9 != INFINITY)
    {
      v10 = *(_QWORD *)(a1 + 136);
      LOBYTE(v11) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

void fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != (_DWORD)a3 || *a4 != *(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a3);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a3);
    v9 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a3) == INFINITY
      && v6 == v7;
    *(_BYTE *)(a1 + 33) = v9;
    *(_BYTE *)(a1 + 34) = v7 == 0;
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA925028;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  *(_QWORD *)(v4 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 32), a2);
  *(_QWORD *)(v4 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 40), a2);
  *(_BYTE *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_1DEA5C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 96) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 32);
      v3 = (_QWORD **)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 40);
    v3 = (_QWORD **)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  float v22;
  unint64_t v25;
  char v26;

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1EA925028;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_9:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA5C9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  int v14;
  char v15;
  int v16;
  unsigned int *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v19 = *(_OWORD *)a4;
        v20 = v12;
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          if ((_DWORD)v20 == -1)
          {
            if (!v13[33])
            {
              v15 = v13[34] ^ 1;
              goto LABEL_27;
            }
          }
          else if (DWORD1(v19))
          {
            if (DWORD1(v19) == -1)
            {
              v14 = v13[32];
              if (v14 == 1)
                v15 = -1;
              else
                v15 = 0;
              if (v14 == 1)
                goto LABEL_31;
            }
            else
            {
              v15 = 0;
            }
LABEL_27:
            v17 = (unsigned int *)&v19;
            v18 = &v20;
LABEL_30:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, v15);
          }
        }
        else if ((_DWORD)v19 == -1)
        {
          if (!v13[33])
          {
            v15 = v13[34] ^ 1;
            goto LABEL_29;
          }
        }
        else if (DWORD1(v20))
        {
          if (DWORD1(v20) == -1)
          {
            v16 = v13[32];
            if (v16 == 1)
              v15 = -1;
            else
              v15 = 0;
            if (v16 == 1)
              goto LABEL_31;
          }
          else
          {
            v15 = 0;
          }
LABEL_29:
          v17 = (unsigned int *)&v20;
          v18 = &v19;
          goto LABEL_30;
        }
LABEL_31:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_1EA924C10;
  v2 = a1[17];
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1DF0ED014](v4, 0x20C4093837F09);
    }
    MEMORY[0x1DF0ED014](v2, 0x1060C40AD892F49);
  }
  v5 = a1[22];
  if (v5)
  {
    v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(_QWORD *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x1DF0ED014](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  __int128 v5;
  _QWORD *v6;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924AF0;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD ***)(a1 + 136);
  *v3 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*v4, 1);
  v3[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v4[1], 1);
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)-1;
  *((_BYTE *)v3 + 32) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v5 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v6 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v6;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA5CE5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v13;
  fst *v15;
  _QWORD *v16;
  void *__p[2];
  char v18;
  char v19;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 136);
  LOBYTE(__p[0]) = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v7, v5, v6, __p);
  v8 = *(_DWORD *)(a1 + 184);
  if (v8)
  {
    if (v8 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v9 == -1 && v10 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v15 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
      if (v18 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v13 = v10 == -1 || v9 <= v10;
      if (v9 == -1 || !v13)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_1DEA5D078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1EA924FA8;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  *(_QWORD *)(v6 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 144), 0);
  *(_QWORD *)(v6 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 152), 0);
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_1DEA5D1A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 96);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  if (*(_DWORD *)(a1 + 24) != (_DWORD)a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    v9 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(_BYTE *)(a1 + 33) = v9;
    *(_BYTE *)(a1 + 34) = v7 == 0;
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA924FA8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  *(_QWORD *)(v4 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 32), a2);
  *(_QWORD *)(v4 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 40), a2);
  *(_BYTE *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_1DEA5D5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 96) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 32);
      v3 = (_QWORD **)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 40);
    v3 = (_QWORD **)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  float v21;
  unint64_t v24;
  char v25;

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1EA924FA8;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_9:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA5DDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  int v15;
  unsigned int *v16;
  __int128 *v17;
  int v18;
  __int128 v19;
  __int128 v20;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v19 = *(_OWORD *)a4;
        v20 = v12;
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (a5)
        {
          if (DWORD1(v19) != -1)
          {
            if ((_DWORD)v20 == -1)
            {
              v15 = v13[32];
              if (v15)
                v14 = -1;
              else
                v14 = 0;
              if (v15)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v19))
                v14 = 0;
              else
                v14 = -1;
              if (!DWORD1(v19))
                goto LABEL_35;
            }
LABEL_28:
            v16 = (unsigned int *)&v19;
            v17 = &v20;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v16, (uint64_t)v17, v14);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            v14 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          if (DWORD1(v20) != -1)
          {
            if ((_DWORD)v19 == -1)
            {
              v18 = v13[32];
              if (v18)
                v14 = -1;
              else
                v14 = 0;
              if (v18)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v20))
                v14 = 0;
              else
                v14 = -1;
              if (!DWORD1(v20))
                goto LABEL_35;
            }
LABEL_33:
            v16 = (unsigned int *)&v20;
            v17 = &v19;
            goto LABEL_34;
          }
          if (!v13[33])
          {
            v14 = v13[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_1EA924AF0;
  v2 = a1[17];
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1DF0ED014](v4, 0x20C4093837F09);
    }
    MEMORY[0x1DF0ED014](v2, 0x1060C40AD892F49);
  }
  v5 = a1[22];
  if (v5)
  {
    v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(_QWORD *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x1DF0ED014](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  __int128 v5;
  _QWORD *v6;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924A30;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD ***)(a1 + 136);
  *v3 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*v4, 1);
  v3[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v4[1], 1);
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  *(_QWORD *)(v2 + 136) = v3;
  v5 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v6 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v6;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA5E290(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v12;
  fst *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  char v18;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_DWORD *)(a1 + 184);
  if (v7)
  {
    if (v7 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v8 == -1 && v9 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
      v15 = (_QWORD *)fst::cerr(v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
      if (v17 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v12 = v9 == -1 || v8 <= v9;
      if (v8 == -1 || !v12)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_1DEA5E478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1EA924EA8;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  *(_QWORD *)(v6 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 144), 0);
  *(_QWORD *)(v6 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 152), 0);
  *(_BYTE *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_1DEA5E5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 12 * a2);
  v4 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v3);
  v5 = v4;
  v6 = v4;
  if (v4 != INFINITY)
  {
    v7 = (*(float (**)(_QWORD, _QWORD, float, float))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v3[1], v4, v4);
    v6 = v7;
    if (v7 != INFINITY)
    {
      v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        v6 = INFINITY;
        v8 = v7 == INFINITY || v5 == INFINITY;
        v9 = v5 + v7;
        if (!v8)
          return v9;
      }
    }
  }
  return v6;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA924EA8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  *(_QWORD *)(v4 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 32), a2);
  *(_QWORD *)(v4 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_QWORD **)(a1 + 40), a2);
  *(_BYTE *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 52) = xmmword_1DED16C50;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_1DEA5E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v18, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 96) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 32);
      v3 = (_QWORD **)(a1 + 40);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 40);
    v3 = (_QWORD **)(a1 + 32);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *v3, *v2);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  unint64_t v23;
  char v24;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      if (v11)
        v12 = (unint64_t *)v10;
      else
        v12 = (unint64_t *)v9;
      v13 = *v12;
      if (v11)
        v14 = (uint64_t *)v9;
      else
        v14 = (uint64_t *)v10;
      v15 = *v14;
      if (v13 <= 0xFFFFFFFEFFFFFFFFLL && *v14 != 0xFFFFFFFFLL)
      {
        v17 = *(_QWORD *)(a1 + 16);
        v18 = v14[1];
        v19 = v12[1];
        v23 = __PAIR64__(HIDWORD(v18), HIDWORD(v19));
        v24 = 0;
        *(_DWORD *)(a1 + 68) = v13;
        *(_DWORD *)(a1 + 72) = HIDWORD(v15);
        v20 = NAN;
        if (*(float *)&v19 != -INFINITY && *(float *)&v18 != -INFINITY)
        {
          v20 = INFINITY;
          if (*(float *)&v18 != INFINITY && *(float *)&v19 != INFINITY)
            v20 = *(float *)&v19 + *(float *)&v18;
        }
        *(float *)(a1 + 76) = v20;
        *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v17 + 176), (uint64_t *)&v23);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1EA924EA8;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_9:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_10;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA5F098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned int *v14;
  __int128 *v15;
  __int128 v17;
  __int128 v18;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v17 = *(_OWORD *)a4;
        v18 = v12;
        if (a5)
        {
          if (DWORD1(v17) == -1 || (_DWORD)v18 == -1)
            goto LABEL_17;
          v14 = (unsigned int *)&v17;
          v15 = &v18;
        }
        else
        {
          if (DWORD1(v18) == -1 || (_DWORD)v17 == -1)
            goto LABEL_17;
          v14 = (unsigned int *)&v18;
          v15 = &v17;
        }
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v14, (uint64_t)v15, 0);
LABEL_17:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_1EA924A30;
  v2 = a1[17];
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1DF0ED014](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1DF0ED014](v4, 0x20C4093837F09);
    }
    MEMORY[0x1DF0ED014](v2, 0x60C40FFD3A10ELL);
  }
  v5 = a1[22];
  if (v5)
  {
    v6 = *(void **)(v5 + 96);
    if (v6)
    {
      *(_QWORD *)(v5 + 104) = v6;
      operator delete(v6);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v5 + 24);
    MEMORY[0x1DF0ED014](v5, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 60))
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 32))(*(_QWORD *)(a1 + 8), 4))
    {
      *(_BYTE *)(v1 + 60) = 1;
    }
    else if (!*(_BYTE *)(v1 + 60))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(_BYTE *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3)
          *(_DWORD *)(v1 + 68) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float *MutableState;
  uint64_t v13;

  v2 = a2;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = v3[15];
  v5 = *(_DWORD *)(v4 + 92);
  if (v5 == (_DWORD)a2)
  {
    v6 = (uint64_t *)(v4 + 96);
  }
  else
  {
    v7 = (int)a2 + 1;
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 >= (*(_QWORD *)(v4 + 16) - v8) >> 3)
    {
LABEL_7:
      v11 = (*(float (**)(_QWORD, uint64_t))(*v3 + 72))(*(_QWORD *)(a1 + 8), a2);
      MutableState = (float *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(v3[15], v2);
      *MutableState = v11;
      *((_DWORD *)MutableState + 14) |= 9u;
      v4 = v3[15];
      v5 = *(_DWORD *)(v4 + 92);
      goto LABEL_9;
    }
    v6 = (uint64_t *)(v8 + 8 * v7);
  }
  v9 = *v6;
  if (!v9)
    goto LABEL_7;
  v10 = *(_DWORD *)(v9 + 56);
  if ((v10 & 1) == 0)
    goto LABEL_7;
  *(_DWORD *)(v9 + 56) = v10 | 8;
LABEL_9:
  if (v5 == v2)
    v13 = v4 + 96;
  else
    v13 = *(_QWORD *)(v4 + 8) + 8 * v2 + 8;
  return **(float **)v13;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 8);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v3[15], a2) & 1) == 0)(*(void (**)(uint64_t *, uint64_t))(*v3 + 48))(v3, a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) == (_DWORD)a2)
    v5 = v4 + 96;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1EA925D18;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1EA925D18;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1DF0ED014);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;
  _DWORD *v5;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA923998;
  v4[1] = 0;
  v5 = *(_DWORD **)(a1 + 8);
  if (a2)
    v5 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 40))(v5);
  else
    ++v5[14];
  v4[1] = v5;
  return v4;
}

void sub_1DEA5F778(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1EA925D18;
  MEMORY[0x1DF0ED014](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA925188;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &off_1EA924840;
  *a2 = v4;
  return result;
}

void sub_1DEA5F820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(uint64_t **)(a1 + 8);
  result = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(v5[15], a2);
  if ((result & 1) == 0)
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 48))(v5, a2);
  v7 = v5[15];
  if (*(_DWORD *)(v7 + 92) == (_DWORD)a2)
    v8 = (uint64_t *)(v7 + 96);
  else
    v8 = (uint64_t *)(*(_QWORD *)(v7 + 8) + 8 * ((int)a2 + 1));
  v9 = *v8;
  v12 = *(_DWORD *)(v9 + 60);
  v10 = (_DWORD *)(v9 + 60);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 9);
  v14 = (*(_QWORD *)(v10 - 7) - v13) >> 4;
  if (*(_QWORD *)(v10 - 7) == v13)
    v13 = 0;
  *a3 = 0;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v10;
  *v10 = v11 + 1;
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1, a2);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~StateIterator()
{
  JUMPOUT(0x1DF0ED014);
}

BOOL fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done_(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t MutableState;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 120), v6);
    ++*(_DWORD *)(MutableState + 60);
    if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::HasArcs(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 120), v6) & 1) == 0)(*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v7 + 8) + 48))(*(_QWORD *)(v7 + 8), v6);
    v9 = *(_QWORD *)(MutableState + 24);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(MutableState + 32) - v9;
    if (v11)
    {
      v12 = v11 >> 4;
      v13 = *(_DWORD *)(v10 + 68);
      v14 = (int *)(v9 + 12);
      do
      {
        v16 = *v14;
        v14 += 4;
        v15 = v16;
        if (v13 <= v16)
        {
          v13 = v15 + 1;
          *(_DWORD *)(v10 + 68) = v15 + 1;
        }
        --v12;
      }
      while (v12);
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetExpandedState(v10, v6);
    v17 = *(_DWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_DWORD *)(v18 + 68);
    --*(_DWORD *)(MutableState + 60);
    result = v17 >= v19;
    if (v17 < v19)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MinUnexpandedState(v18);
    if ((int)v6 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
      return 1;
  }
  return result;
}

void sub_1DEA5FA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  fst::MemoryPoolCollection *v8;
  uint64_t v9;
  fst::MemoryPoolCollection *v11;

  v8 = (fst::MemoryPoolCollection *)operator new();
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)v8 = xmmword_1DED16C30;
  v11 = v8;
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator(&v11);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_1DED16C40;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1DEA5FB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (uint64_t **)(a1 + 32);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<std::__hash_node<int,void *>>::TN<1>>(*v3);
      v2[3] = v5[7];
      v5[7] = v2;
      v2 = v4;
    }
    while (v4);
  }
  fst::PoolAllocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~PoolAllocator((fst::MemoryPoolCollection **)v3);
  return std::unique_ptr<std::__hash_node_base<std::__hash_node<int,void *> *> *[],std::__bucket_list_deallocator<fst::PoolAllocator<std::__hash_node_base<std::__hash_node<int,void *> *> *>>>::~unique_ptr[abi:ne180100](a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  int v11;
  int v12;

  v9 = a5;
  if (!a5)
  {
    v9 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(v9, a2, a3);
  }
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = a4;
  *(_BYTE *)(a1 + 12) = a5 == 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3)
    v11 = 0;
  else
    v11 = -1;
  if ((_DWORD)a3)
    v12 = -1;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 60) = v11;
  *(_DWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1DEA5FCA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      MEMORY[0x1DF0ED014](v2, 0x1020C405F07FB98);
    }
  }
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1DF0ED014](v2, 0x1020C405F07FB98);
  }
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1DF0ED014](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *(_QWORD *)a1 = v6;
  if (!v6)
  {
    v7 = operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(v7, a2, v3);
    *(_QWORD *)a1 = v7;
  }
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

void sub_1DEA5FE34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(_QWORD *a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, 0);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) != 0)
    return 1;
  if (!v5 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) != 0)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) == 0
    || (v6 = *a1,
        v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 24),
        v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) == 0
      || (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, a2);
  *(_BYTE *)(v4 + 8) = a1[8];
  return v4;
}

void sub_1DEA5FFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(_BYTE *a1)
{
  int v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (!a1[8])
  {
    v2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      v4 = (_QWORD *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0)
        operator delete(__p[0]);
    }
  }
  return a1[8];
}

void sub_1DEA600B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  __int32 v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924B50;
  v3 = (int64x2_t *)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v3->i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_BYTE **)v4, 1);
  v3->i64[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_BYTE **)(v4 + 8), 1);
  v3[1].i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[0] + 32))(*(_QWORD *)v3->i64[0]);
  v3[1].i64[1] = -1;
  v3[2].i8[0] = -1;
  v5 = *(_DWORD *)(v4 + 40);
  v3[2].i32[2] = v5;
  v6 = (_BYTE *)v3->i64[1];
  v3[3].i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v3->i64[0], 0);
  v3[3].i64[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v6, 0);
  v3[4].i32[0] = v5;
  v3[4].i32[2] = *(_DWORD *)(v4 + 72);
  v7 = 7;
  if (v5 == 1)
    v8 = 6;
  else
    v8 = 7;
  v9 = (_BYTE *)v3->i64[v8];
  if (v5 != 1)
    v7 = 6;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[v7] + 32))(*(_QWORD *)v3->i64[v7]);
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v9))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v9 + 112))(*(_QWORD *)v9, v10, 1);
  v3[5] = vdupq_n_s64(0x7F800000000000FFuLL);
  v3[6].i32[0] = -1;
  v3[6].i64[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[0] + 32))(*(_QWORD *)v3->i64[0]);
  v3[7].i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[1] + 32))(*(_QWORD *)v3->i64[1]);
  if (v3[2].i32[2] == 1)
    v11 = 1;
  else
    v11 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v3[7].i64[1], v3[6].i64[1], 1, v11, v3->i64[0]);
  if (v3[2].i32[2] == 1)
    v12 = 2;
  else
    v12 = 1;
  v13 = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v3[12].i64[1], v3[7].i64[0], 0, v12, v3->i64[1]);
  *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(v2 + 144) = (char *)v3 + 120;
  *(_QWORD *)(v2 + 152) = v13;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3[7].i64[1] + 32))(*(_QWORD *)v3[7].i64[1]);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v2 + 152) + 32))(***(_QWORD ***)(v2 + 152));
  v14 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v14, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v14;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA60438(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v14;
  fst *v16;
  _QWORD *v17;
  void *__p;
  int v19;
  char v20;
  char v21;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 136);
  v8 = (void *)*((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  __p = v8;
  v19 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v7, v5, v6, (unsigned __int8 *)&__p);
  v9 = *(_DWORD *)(a1 + 184);
  if (v9)
  {
    if (v9 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD ***)(a1 + 144), 0);
      return;
    }
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144), v5);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), v6);
    if (v10 == -1 && v11 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v16 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__p);
      v17 = (_QWORD *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
      if (v20 < 0)
        operator delete(__p);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v14 = v11 == -1 || v10 <= v11;
      if (v10 == -1 || !v14)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD ***)(a1 + 152), 1);
}

void sub_1DEA60698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 96);
  v5 = (unsigned int *)(v4 + 20 * a2);
  v6 = *v5;
  v7 = (*(float (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), v6);
  v8 = v7;
  *(float *)&v16 = v7;
  v18 = 2139095040;
  if (v7 != INFINITY)
  {
    v9 = v5[1];
    v10 = (*(float (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v9);
    *(float *)&v16 = v10;
    v18 = 2139095040;
    if (v10 != INFINITY)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = v4 + 20 * a2;
      v13 = *(_QWORD *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      v16 = v13;
      v17 = v12;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v11, v6, v9, (unsigned __int8 *)&v16);
      v14 = *(_QWORD *)(a1 + 136);
      v15 = *(_DWORD *)(v14 + 72);
      if ((v15 & 0x40) != 0)
      {
        *(float *)&v16 = v7;
        v18 = 2139095040;
        if (v7 != INFINITY)
        {
          v8 = NAN;
          if (v7 != -INFINITY)
          {
            if ((*(_DWORD *)(v14 + 84) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v8 = INFINITY;
              if (v7 != INFINITY)
                v8 = v7 - *(float *)(v14 + 84);
            }
            else
            {
              v8 = NAN;
            }
          }
        }
      }
      if ((v15 & 0x80) != 0)
      {
        *(float *)&v16 = v8;
        v18 = 2139095040;
      }
    }
  }
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t (*v11)(void);
  int v12;
  _QWORD *v13;

  v6 = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)a4;
  if (*(_DWORD *)(a1 + 24) != (_DWORD)a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2) == INFINITY
       && v7 == v8;
    *(_BYTE *)(a1 + 33) = v10;
    *(_BYTE *)(a1 + 34) = v8 == 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v11();
    v12 = *(_DWORD *)(a1 + 96);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v13 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 216, v13);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 120, v12);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 200, v12);
    }
  }
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v6;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v11;
  char v12;

  if (a2)
  {
    LODWORD(__p[0]) = a2;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)(a1 + 16), (int *)__p, __p);
    v3 = *(_DWORD *)(a1 + 40);
    v4 = (int)__p[0];
    if (v3 == -1 || SLODWORD(__p[0]) < v3)
      *(_DWORD *)(a1 + 40) = __p[0];
    v6 = *(_DWORD *)(a1 + 44);
    if (v6 == -1 || v6 < v4)
      *(_DWORD *)(a1 + 44) = v4;
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
  }
}

void sub_1DEA60C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(_QWORD *a1, __int128 *a2)
{
  int8x8_t v4;
  int *v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD *v30;
  int v31;

  a1[15] = a2;
  v30 = a1 + 3;
  v4 = (int8x8_t)a1[4];
  if (v4)
  {
    v5 = *(int **)(a1[9] + 120);
    v6 = *v5
       + 7853 * v5[1]
       + 7867 * (v5[4] ^ __ROR8__(__ROR8__((char)*((_QWORD *)v5 + 1), 59) ^ HIDWORD(*((_QWORD *)v5 + 1)), 59));
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      v9 = v6;
      if (v6 >= *(_QWORD *)&v4)
        v9 = v6 % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & v6;
    }
    v10 = *(uint64_t ***)(*v30 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v6)
        {
          v13 = *((unsigned int *)i + 4);
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(a1 + 11, *((_DWORD *)i + 4), -1))
          {
            return v13;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= *(_QWORD *)&v4)
              v12 %= *(_QWORD *)&v4;
          }
          else
          {
            v12 &= *(_QWORD *)&v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v15 = a1[12];
  v14 = a1[13];
  v13 = (uint64_t)(v14 - v15) / 20;
  v31 = v13;
  v16 = a1[14];
  if (v14 >= v16)
  {
    if ((unint64_t)(v13 + 1) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v15) >> 2);
    v20 = 2 * v19;
    if (2 * v19 <= v13 + 1)
      v20 = v13 + 1;
    if (v19 >= 0x666666666666666)
      v21 = 0xCCCCCCCCCCCCCCCLL;
    else
      v21 = v20;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v21);
    else
      v22 = 0;
    v23 = v21 + 20 * v13;
    v24 = v21 + 20 * v22;
    v25 = *a2;
    *(_DWORD *)(v23 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v23 = v25;
    v18 = v23 + 20;
    v27 = (char *)a1[12];
    v26 = (char *)a1[13];
    if (v26 != v27)
    {
      do
      {
        v28 = *(_OWORD *)(v26 - 20);
        *(_DWORD *)(v23 - 4) = *((_DWORD *)v26 - 1);
        *(_OWORD *)(v23 - 20) = v28;
        v23 -= 20;
        v26 -= 20;
      }
      while (v26 != v27);
      v26 = (char *)a1[12];
    }
    a1[12] = v23;
    a1[13] = v18;
    a1[14] = v24;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v17 = *a2;
    *(_DWORD *)(v14 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v14 = v17;
    v18 = v14 + 20;
  }
  a1[13] = v18;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v30, v13, &v31);
  return v13;
}

void std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t *v23;
  unint64_t v24;

  if (a2 < -1)
  {
    v9 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (a2 == -1)
      v8 = *(int **)(v7 + 120);
    else
      v8 = (int *)(*(_QWORD *)(v7 + 96) + 20 * a2);
    v9 = *v8
       + 7853 * v8[1]
       + 7867 * (v8[4] ^ __ROR8__(__ROR8__((char)*((_QWORD *)v8 + 1), 59) ^ HIDWORD(*((_QWORD *)v8 + 1)), 59));
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 64), *((_DWORD *)i + 4), a2))
          {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = fst::PoolAllocator<std::__hash_node<int,void *>>::allocate((uint64_t **)(a1 + 32));
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,fst::PoolAllocator<int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v16 = *v23;
LABEL_44:
    *v23 = v16;
    goto LABEL_45;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)v16)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (uint64_t *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 40);
}

void sub_1DEA61198(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t **v2;

  std::__hash_node_destructor<fst::PoolAllocator<std::__hash_node<int,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(_QWORD *)(v3 + 120);
  else
    v4 = *(_QWORD *)(v3 + 96) + 20 * a2;
  if (a3 == -1)
    v6 = *(_QWORD *)(v3 + 120);
  else
    v6 = *(_QWORD *)(v3 + 96) + 20 * a3;
  if (v4 == v6)
    return 1;
  v7 = *(_DWORD *)v4 == *(_DWORD *)v6 && *(_DWORD *)(v4 + 4) == *(_DWORD *)(v6 + 4);
  return v7
      && *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8)
      && *(float *)(v4 + 12) == *(float *)(v6 + 12)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v6 + 16);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, int a7)
{
  int v11;
  int *v14;
  unint64_t v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v11 = a3;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v19, a7);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      v15 = v18;
      if (v18 >= v16[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
    {
      v15 = v18;
LABEL_9:
      v14 = (int *)(v16[1] + 16 * v15);
      goto LABEL_10;
    }
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v14, a7);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17)
    --*v17;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA61404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, _QWORD **a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(a3, *v10);
  if ((_DWORD)result && !*((_BYTE *)a3 + 76))
  {
    do
    {
      v12 = (__int128 *)((char *)a3 + 60);
      if (!*((_BYTE *)a3 + 56))
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          v27 = HIDWORD(v14);
          v26 = 2139095040;
          if (*((float *)&v14 + 1) == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          v27 = HIDWORD(v19);
          v26 = 2139095040;
          if (*((float *)&v19 + 1) == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next((uint64_t)a3);
    }
    while (!*((_BYTE *)a3 + 76));
  }
  return result;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(_QWORD **a1, int a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t (*v11)(void);
  uint64_t result;
  _QWORD *v13;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  BOOL v17;

  v3 = (uint64_t *)(a1 + 3);
  a1[6] = a1 + 3;
  *((_BYTE *)a1 + 56) = 0;
  if (a2 == -1)
  {
    if (((_BYTE)a1[1] & 1) != 0)
    {
      v13 = a1[2];
      while (1)
      {
        a1[6] = v13;
        if (v13 == v3)
          break;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 64))(**a1, *((unsigned int *)v13 + 7));
        v15 = a1[6];
        if ((v14 & 1) != 0)
        {
          if (v15 == v3)
            break;
          result = 1;
          goto LABEL_24;
        }
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v13 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v15[2];
            v17 = *v13 == (_QWORD)v15;
            v15 = v13;
          }
          while (!v17);
        }
      }
    }
    v11 = *(uint64_t (**)(void))(*(_QWORD *)**a1 + 64);
  }
  else
  {
    if (a2 && ((_BYTE)a1[1] & 2) != 0)
    {
      v4 = *((_DWORD *)a1 + 10);
      if (v4 != -1 && v4 <= a2 && *((_DWORD *)a1 + 11) >= a2)
      {
        v6 = *v3;
        if (*v3)
        {
          v7 = (uint64_t *)(a1 + 3);
          do
          {
            v8 = *(_DWORD *)(v6 + 28);
            v9 = v8 < a2;
            if (v8 >= a2)
              v10 = (uint64_t *)v6;
            else
              v10 = (uint64_t *)(v6 + 8);
            if (!v9)
              v7 = (uint64_t *)v6;
            v6 = *v10;
          }
          while (*v10);
          if (v7 != v3 && *((_DWORD *)v7 + 7) <= a2)
          {
            result = 1;
            *((_BYTE *)a1 + 56) = 1;
            goto LABEL_24;
          }
        }
      }
    }
    v11 = *(uint64_t (**)(void))(*(_QWORD *)**a1 + 64);
  }
  result = v11();
LABEL_24:
  *((_BYTE *)a1 + 76) = result ^ 1;
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
    return fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v7 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v7 == -1)
  {
    result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    v10 = result;
    if ((_BYTE)result == 0xFF && (v12 = HIDWORD(result), v11 = 2139095040, *((float *)&result + 1) == INFINITY))
    {
      return 0x7F800000000000FFLL;
    }
    else if (*(_BYTE *)(a1 + 76))
    {
      if (*(_DWORD *)(a1 + 40) == 1)
      {
        v8 = v4;
        v9 = v3;
      }
      else
      {
        v8 = v3;
        v9 = v4;
      }
      return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v8, v9, (uint64_t)&v10);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v7);
  }
  return result;
}

_QWORD *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  unsigned int Id;
  _QWORD *MutableState;
  __int128 v17;
  __int128 v18;
  int v19;

  v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v18) = a3[3];
  DWORD1(v18) = v7;
  *((_QWORD *)&v18 + 1) = *(_QWORD *)a5;
  v19 = *(_DWORD *)(a5 + 8);
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *((float *)a3 + 2);
  v11 = NAN;
  if (v10 != -INFINITY)
  {
    v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY)
        v11 = INFINITY;
      else
        v11 = v10 + v12;
    }
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v18);
  *(_QWORD *)&v17 = __PAIR64__(v9, v8);
  *((_QWORD *)&v17 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = (_QWORD *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v17);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  _QWORD **v1;
  char v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_QWORD **)result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = 1;
LABEL_3:
    *((_BYTE *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(_QWORD))(***(_QWORD ***)result + 88))(**(_QWORD **)result);
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v1 + 72))(**v1);
    *((_BYTE *)v1 + 76) = result;
    if ((_DWORD)result)
    {
      v3 = v1 + 3;
      v4 = v1[6];
      if (v4 != v1 + 3)
      {
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3)
            goto LABEL_19;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          v8 = v1[6];
          if ((result & 1) != 0)
            break;
          v9 = (_QWORD *)v8[1];
          if (v9)
          {
            do
            {
              v6 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v6 = (_QWORD *)v8[2];
              v7 = *v6 == (_QWORD)v8;
              v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          v2 = result ^ 1;
          goto LABEL_3;
        }
        *((_BYTE *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  _BYTE *v14;
  float v15;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  unsigned __int8 v23;

  v4 = a2;
  *(_BYTE *)(a1 + 76) = 0;
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == -1)
  {
    if (*(_BYTE *)(a1 + 33))
    {
LABEL_26:
      v11 = 0x7F80000000000000;
      v10 = -1;
      return v11 | v10;
    }
    v23 = *(_BYTE *)(a1 + 34) ^ 1;
  }
  else if (*(_DWORD *)a3 == -1)
  {
    v8 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
      v9 = -1;
    else
      v9 = 0;
    v23 = v9;
    if (v8)
      goto LABEL_26;
  }
  else
  {
    if (v6)
      v7 = 0;
    else
      v7 = -1;
    v23 = v7;
    if (!v6)
      goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = a3;
  else
    a2 = a3;
  v10 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, v4, &v23);
  if (v10 == 0xFF)
    goto LABEL_26;
  if ((*(_BYTE *)(a1 + 72) & 0x40) != 0)
  {
    v12 = 0.0;
    if (*(_BYTE *)(a1 + 76))
    {
      v13 = 56;
      if (*(_DWORD *)(a1 + 64) == 1)
        v13 = 48;
      v14 = *(_BYTE **)(a1 + v13);
      if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v14))
        v12 = *(float *)(*(_QWORD *)v14 + 8);
    }
    v15 = *(float *)(a1 + 84);
    if (v12 == INFINITY)
      goto LABEL_26;
    v17 = *(float *)(a3 + 8);
    v18 = NAN;
    if (v17 != -INFINITY && v12 != -INFINITY)
    {
      if (v12 == INFINITY || v17 == INFINITY)
      {
        v18 = INFINITY;
        if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000)
          v18 = NAN;
      }
      else
      {
        v19 = v12 + v17;
        v18 = NAN;
        if (v19 != -INFINITY)
        {
          v20 = LODWORD(v15) & 0x7FFFFFFF;
          v18 = NAN;
          v21 = v19 - v15;
          if (v19 == INFINITY)
            v21 = INFINITY;
          if (v20 <= 2139095039)
            v18 = v21;
        }
      }
    }
    *(float *)(a3 + 8) = v18;
    v22 = floorf((float)(v12 * 1024.0) + 0.5) * 0.00097656;
    if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000)
      v22 = v12;
    v11 = (unint64_t)LODWORD(v22) << 32;
  }
  else
  {
    v11 = 0;
  }
  return v11 | v10;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = 0x7F800000000000FFLL;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = v5 != 1;
  v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    v9 = 4 * v7;
    v10 = *(_DWORD *)(a2 + v9);
    if (v10 == (_DWORD)a4)
    {
      v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(_QWORD *)(a1 + 280) == 1)
        return *(_QWORD *)(a1 + 88);
      v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v13) + 56))(**(_QWORD **)(a1 + v13), *(unsigned int *)(a2 + 12));
      v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      v15 = *(_BYTE **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v15 + 120))(*(_QWORD *)v15, a4))
      {
        return *(_QWORD *)(a1 + 88);
      }
    }
  }
  return v4;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;

  if (!*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
    if (!*(_DWORD *)(a2 + v9) || (*(_BYTE *)(a1 + 73) & 4) == 0)
    {
      v10 = 56;
      if (*(_DWORD *)(a1 + 64) == 1)
        v10 = 48;
      v11 = *(_BYTE **)(a1 + v10);
      if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v11))
      {
        v12 = *(_QWORD *)v11;
        v13 = *(_DWORD *)(*(_QWORD *)v11 + 24);
        if (v13 != -1)
        {
          v14 = *(_DWORD *)(v12 + 12);
          v15 = *(_DWORD *)(v12 + 16);
          v16 = *(float *)(v12 + 20);
          if (*(_DWORD *)(a1 + 40) == 1)
            v17 = *(_DWORD *)(v12 + 12);
          else
            v17 = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(a2 + v9) = v17;
          *(_DWORD *)a3 = v14;
          *(_DWORD *)(a3 + 4) = v15;
          v18 = *(float *)(a3 + 8);
          v19 = NAN;
          if (v18 != -INFINITY && v16 != -INFINITY)
          {
            v19 = INFINITY;
            v20 = v18 == INFINITY || v16 == INFINITY;
            v21 = v16 + v18;
            if (!v20)
              v19 = v21;
          }
          *(float *)(a3 + 8) = v19;
          *(_DWORD *)(a3 + 12) = v13;
        }
      }
    }
  }
  return *(_QWORD *)a4;
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0)
      return *a4;
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(_BYTE *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1)
    v8 = 48;
  else
    v8 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v8) + 56))(**(_QWORD **)(a1 + v8), *(unsigned int *)(a2 + 12));
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 == 1;
  if (v9 == 1)
    v11 = 48;
  else
    v11 = 56;
  v12 = *(_BYTE **)(a1 + v11);
  if (v10)
    v13 = 56;
  else
    v13 = 48;
  v14 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v13) + 32))(**(_QWORD **)(a1 + v13));
  v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v12 + 128))(*(_QWORD *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

_QWORD *fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *i;

  a1[1] = a1;
  a1[2] = a1;
  v4 = (uint64_t)(a1 + 3);
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::unordered_set((uint64_t)(a1 + 3), a2[8], a1 + 1, a1 + 2);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  v5 = (__int128 *)a2[12];
  v6 = (__int128 *)a2[13];
  if (v6 != v5)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v5) >> 2);
    if (v7 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v7);
    a1[12] = v8;
    a1[13] = v8;
    a1[14] = &v8[5 * v9];
    do
    {
      v10 = *v5;
      v8[4] = *((_DWORD *)v5 + 4);
      *(_OWORD *)v8 = v10;
      v8 += 5;
      v5 = (__int128 *)((char *)v5 + 20);
    }
    while (v5 != v6);
    a1[13] = v8;
  }
  for (i = (uint64_t *)a2[6]; i; i = (uint64_t *)*i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::__emplace_unique_key_args<int,int const&>(v4, *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_1DEA62040(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_1EA924B50;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1DF0ED014](v3, 0x1060C409DA32DC3);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 96);
    if (v5)
    {
      *(_QWORD *)(v4 + 104) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1DF0ED014](v4, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  _QWORD *v5;
  __int32 v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = operator new();
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase((_QWORD *)v2, a1);
  *(_QWORD *)v2 = &off_1EA924BB0;
  v3 = (int64x2_t *)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v3->i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_BYTE **)v4, 1);
  v5 = (_QWORD *)fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(*(_BYTE **)(v4 + 8), 1);
  v3->i64[1] = (uint64_t)v5;
  v3[1].i64[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  v3[1].i64[1] = -1;
  v3[2].i8[0] = -1;
  v6 = *(_DWORD *)(v4 + 40);
  v3[2].i32[2] = v6;
  v7 = (_BYTE *)v3->i64[1];
  v3[3].i64[0] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v3->i64[0], 0);
  v3[3].i64[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy(v7, 0);
  v3[4].i32[0] = v6;
  v3[4].i32[2] = *(_DWORD *)(v4 + 72);
  v8 = 7;
  if (v6 == 1)
    v9 = 6;
  else
    v9 = 7;
  v10 = (_BYTE *)v3->i64[v9];
  if (v6 != 1)
    v8 = 6;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[v8] + 32))(*(_QWORD *)v3->i64[v8]);
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  v3[5] = vdupq_n_s64(0x7F800000000000FFuLL);
  v3[6].i32[0] = -1;
  v3[6].i64[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[0] + 32))(*(_QWORD *)v3->i64[0]);
  v3[7].i64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3->i64[1] + 32))(*(_QWORD *)v3->i64[1]);
  if (v3[2].i32[2] == 1)
    v12 = 1;
  else
    v12 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v3[7].i64[1], v3[6].i64[1], 1, v12, v3->i64[0]);
  if (v3[2].i32[2] == 1)
    v13 = 2;
  else
    v13 = 1;
  v14 = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MultiEpsMatcher((uint64_t)&v3[12].i64[1], v3[7].i64[0], 0, v13, v3->i64[1]);
  *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(v2 + 144) = (char *)v3 + 120;
  *(_QWORD *)(v2 + 152) = v14;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v3[7].i64[1] + 32))(*(_QWORD *)v3[7].i64[1]);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v2 + 152) + 32))(***(_QWORD ***)(v2 + 152));
  v15 = (_QWORD *)operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v15, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v15;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_1DEA62450(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1DF0ED014](v2, 0x10E0C40EB25B5FDLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  MEMORY[0x1DF0ED014](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v14;
  fst *v16;
  _QWORD *v17;
  void *__p;
  int v19;
  char v20;
  char v21;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 96) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 136);
  v8 = (void *)*((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  __p = v8;
  v19 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v7, v5, v6, (unsigned __int8 *)&__p);
  v9 = *(_DWORD *)(a1 + 184);
  if (v9)
  {
    if (v9 == 1)
    {
LABEL_3:
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD ***)(a1 + 144), 0);
      return;
    }
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144), v5);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), v6);
    if (v10 == -1 && v11 == -1)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v16 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__p);
      v17 = (_QWORD *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ComposeFst: both sides can't require match", 42);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
      if (v20 < 0)
        operator delete(__p);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v14 = v11 == -1 || v10 <= v11;
      if (v10 == -1 || !v14)
        goto LABEL_3;
    }
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD ***)(a1 + 152), 1);
}

void sub_1DEA626B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 96);
  v5 = (int *)(v4 + 20 * a2);
  v6 = *v5;
  v7 = (*(float (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), *v5);
  v8 = v7;
  *(float *)&v16 = v7;
  v18 = 2139095040;
  if (v7 != INFINITY)
  {
    v9 = v5[1];
    v10 = (*(float (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v9);
    *(float *)&v16 = v10;
    v18 = 2139095040;
    if (v10 != INFINITY)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = v4 + 20 * a2;
      v13 = *(_QWORD *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      v16 = v13;
      v17 = v12;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(v11, v6, v9, (unsigned __int8 *)&v16);
      v14 = *(_QWORD *)(a1 + 136);
      v15 = *(_DWORD *)(v14 + 72);
      if ((v15 & 0x40) != 0)
      {
        *(float *)&v16 = v7;
        v18 = 2139095040;
        if (v7 != INFINITY)
        {
          v8 = NAN;
          if (v7 != -INFINITY)
          {
            if ((*(_DWORD *)(v14 + 84) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v8 = INFINITY;
              if (v7 != INFINITY)
                v8 = v7 - *(float *)(v14 + 84);
            }
            else
            {
              v8 = NAN;
            }
          }
        }
      }
      if ((v15 & 0x80) != 0)
      {
        *(float *)&v16 = v8;
        v18 = 2139095040;
      }
    }
  }
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t (*v11)(void);
  int v12;
  _QWORD *v13;

  v6 = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)a4;
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != (_DWORD)a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a3);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a3);
    v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a3) == INFINITY
       && v7 == v8;
    *(_BYTE *)(a1 + 33) = v10;
    *(_BYTE *)(a1 + 34) = v8 == 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v11 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v11();
    v12 = *(_DWORD *)(a1 + 96);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v13 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1 + 216, v13);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 120, v12);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddMultiEpsLabel(a1 + 200, v12);
    }
  }
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, int a7)
{
  int v11;
  int *v14;
  unint64_t v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v11 = a3;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v19, a7);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 136))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      v15 = v18;
      if (v18 >= v16[2])
        goto LABEL_15;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
    {
      v15 = v18;
LABEL_9:
      v14 = (int *)(v16[1] + 16 * v15);
      goto LABEL_10;
    }
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a6, v14, a7);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17)
    --*v17;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_1DEA62D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, _QWORD **a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(a3, *v10);
  if ((_DWORD)result && !*((_BYTE *)a3 + 76))
  {
    do
    {
      v12 = (__int128 *)((char *)a3 + 60);
      if (!*((_BYTE *)a3 + 56))
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          v27 = HIDWORD(v14);
          v26 = 2139095040;
          if (*((float *)&v14 + 1) == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          v27 = HIDWORD(v19);
          v26 = 2139095040;
          if (*((float *)&v19 + 1) == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next((uint64_t)a3);
    }
    while (!*((_BYTE *)a3 + 76));
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
    return fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v7 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v7 == -1)
  {
    result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    v10 = result;
    if ((_BYTE)result == 0xFF && (v12 = HIDWORD(result), v11 = 2139095040, *((float *)&result + 1) == INFINITY))
    {
      return 0x7F800000000000FFLL;
    }
    else if (*(_BYTE *)(a1 + 76))
    {
      if (*(_DWORD *)(a1 + 40) == 1)
      {
        v8 = v4;
        v9 = v3;
      }
      else
      {
        v8 = v3;
        v9 = v4;
      }
      return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v8, v9, (uint64_t)&v10);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    return fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v7);
  }
  return result;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned __int8 v7;
  int v8;
  BOOL v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  _BYTE *v15;
  float v16;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  unsigned __int8 v24;

  v4 = a2;
  *(_BYTE *)(a1 + 76) = 0;
  if (*(_DWORD *)a3 == -1)
  {
    if (*(_BYTE *)(a1 + 33))
      goto LABEL_24;
    v7 = *(_BYTE *)(a1 + 34) ^ 1;
LABEL_7:
    v24 = v7;
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 != -1)
  {
    if (!v6)
      goto LABEL_24;
    v7 = 0;
    goto LABEL_7;
  }
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = v8 == 1;
  if (v8 == 1)
    v10 = -1;
  else
    v10 = 0;
  v24 = v10;
  if (v9)
    goto LABEL_24;
LABEL_12:
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = a3;
  else
    a2 = a3;
  v11 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, v4, &v24);
  if (v11 == 0xFF)
    goto LABEL_24;
  if ((*(_BYTE *)(a1 + 72) & 0x40) == 0)
  {
    v12 = 0;
    return v12 | v11;
  }
  v13 = 0.0;
  if (*(_BYTE *)(a1 + 76))
  {
    v14 = 56;
    if (*(_DWORD *)(a1 + 64) == 1)
      v14 = 48;
    v15 = *(_BYTE **)(a1 + v14);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookAheadCheck(v15))
      v13 = *(float *)(*(_QWORD *)v15 + 8);
  }
  v16 = *(float *)(a1 + 84);
  if (v13 == INFINITY)
  {
LABEL_24:
    v12 = 0x7F80000000000000;
    v11 = -1;
    return v12 | v11;
  }
  v18 = *(float *)(a3 + 8);
  v19 = NAN;
  if (v18 != -INFINITY && v13 != -INFINITY)
  {
    if (v13 == INFINITY || v18 == INFINITY)
    {
      v19 = INFINITY;
      if ((LODWORD(v16) & 0x7FFFFFFFu) >= 0x7F800000)
        v19 = NAN;
    }
    else
    {
      v20 = v13 + v18;
      v19 = NAN;
      if (v20 != -INFINITY)
      {
        v21 = LODWORD(v16) & 0x7FFFFFFF;
        v19 = NAN;
        v22 = v20 - v16;
        if (v20 == INFINITY)
          v22 = INFINITY;
        if (v21 <= 2139095039)
          v19 = v22;
      }
    }
  }
  *(float *)(a3 + 8) = v19;
  v23 = floorf((float)(v13 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v13) & 0x7FFFFFFFu) >= 0x7F800000)
    v23 = v13;
  v12 = (unint64_t)LODWORD(v23) << 32;
  return v12 | v11;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_1EA924BB0;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1DF0ED014](v3, 0x1060C409DA32DC3);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 96);
    if (v5)
    {
      *(_QWORD *)(v4 + 104) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1DF0ED014](v4, 0x10E0C40EB25B5FDLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t FSTGrammarJSON::has_rule(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;

  v2 = *(const void ***)(a1 + 16);
  if (!v2)
    return 0;
  v4 = a1 + 24;
  while (std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
  {
LABEL_6:
    v2 = (const void **)*v2;
    if (!v2)
      return 0;
  }
  if (std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

void FSTGrammarJSON::apply_rule(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  NSObject *v14;
  const char *v15;
  const void *v16;
  const void *v17;
  UTFRegex *v18;
  UTFRegex *v19;
  int v20;
  const char *v21;
  int64_t v22;
  UText *v23;
  UText *v24;
  NSObject *v25;
  const char *v26;
  const void *v27;
  const char *v28;
  const void *v29;
  uint64_t *v30;
  uint8_t buf[4];
  const void *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_8;
  v10 = a1 + 24;
  v11 = a1 + 16;
  do
  {
    v12 = std::less<std::string>::operator()[abi:ne180100](v10, (const void **)(v8 + 32), (const void **)a2);
    v13 = (uint64_t *)(v8 + 8);
    if (!v12)
    {
      v13 = (uint64_t *)v8;
      v11 = v8;
    }
    v8 = *v13;
  }
  while (*v13);
  if (v11 == v7 || std::less<std::string>::operator()[abi:ne180100](v10, (const void **)a2, (const void **)(v11 + 32)))
  {
LABEL_8:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v16 = (const void *)a2;
      else
        v16 = *(const void **)a2;
      *(_DWORD *)buf = 136315138;
      v32 = v16;
      _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_ERROR, "Ignore unknown rule '%s'", buf, 0xCu);
    }
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const void *)a2;
    else
      v17 = *(const void **)a2;
    Diagnostics::log(3, "Ignore unknown rule '%s'", v15, v17);
  }
  else
  {
    v18 = *(UTFRegex **)(v11 + 56);
    v19 = *(UTFRegex **)(v11 + 64);
    while (v18 != v19)
    {
      *(_DWORD *)buf = 0;
      v20 = a3[23];
      if (v20 >= 0)
        v21 = a3;
      else
        v21 = *(const char **)a3;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)a3 + 23);
      else
        v22 = *((_QWORD *)a3 + 1);
      v23 = utext_openUTF8(0, v21, v22, (UErrorCode *)buf);
      if (*(int *)buf <= 0)
        v24 = v23;
      else
        v24 = 0;
      UTFRegex::set_text(v18, v24, 1);
      *(_DWORD *)buf = 0;
      if (uregex_matches(*(URegularExpression **)v18, -1, (UErrorCode *)buf))
      {
        UTFString::replace<std::string>(a4, a3, v18, (uint64_t)v18 + 24);
        return;
      }
      v18 = (UTFRegex *)((char *)v18 + 48);
    }
    if (*(_BYTE *)(a1 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(a4, &byte_1DEBD87CE);
      return;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v27 = (const void *)a2;
      else
        v27 = *(const void **)a2;
      if (a3[23] >= 0)
        v28 = a3;
      else
        v28 = *(const char **)a3;
      *(_DWORD *)buf = 136315394;
      v32 = v27;
      v33 = 2080;
      v34 = v28;
      _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_ERROR, "FSTGrammarJSON unable to apply rule %s(%s).", buf, 0x16u);
    }
    if (*(char *)(a2 + 23) >= 0)
      v29 = (const void *)a2;
    else
      v29 = *(const void **)a2;
    if (a3[23] >= 0)
      v30 = (uint64_t *)a3;
    else
      v30 = *(uint64_t **)a3;
    Diagnostics::log(3, "FSTGrammarJSON unable to apply rule %s(%s).", v26, v29, v30);
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  }
}

void FSTGrammarJSON::~FSTGrammarJSON(FSTGrammarJSON *this)
{
  *(_QWORD *)this = off_1EA91D8B0;
  std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = off_1EA91D8B0;
  std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*((_QWORD **)this + 2));
  JUMPOUT(0x1DF0ED014);
}

void std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<FSTGrammarJSON::Rule>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<FSTGrammarJSON::Rule>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100](void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  UTFRegex::~UTFRegex((UTFRegex *)this);
}

uint64_t FSTGrammar::create(const char *a1, char a2)
{
  int v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  std::string *v22;
  const std::string::value_type **v23;
  __int128 v24;
  int64x2_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t **v32;
  const void **v33;
  char *v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD **v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  fst *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  std::string::size_type v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  size_t v74;
  char *v75;
  __int128 v76;
  char *v77;
  char *v78;
  void *v79;
  void *v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  size_t v85;
  _QWORD *v86;
  fst *v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t *v100;
  const void **v101;
  _QWORD *v102;
  std::string *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  __int128 *v109;
  uint64_t v110;
  uint64_t **v111;
  char v112[8];
  uint64_t *v113;
  char v114[8];
  uint64_t *v115;
  int64x2_t *v116;
  int64x2_t v117;
  __int128 v118;
  int64x2_t v119;
  unint64_t v120;
  void *v121[2];
  char v122;
  uint64_t v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  unsigned __int8 v128[8];
  uint64_t *v129;
  int64x2_t *v130;
  int64x2_t v131;
  __int128 v132;
  std::string v133;
  void *v134;
  char v135;
  void *__p;
  char v137;
  void *v138[2];
  _BYTE v139[96];
  _QWORD v140[23];

  v140[20] = *MEMORY[0x1E0C80C00];
  v109 = (__int128 *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = open(a1, 0);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = v3;
    LOBYTE(v138[0]) = 0;
    v5 = read(v3, v138, 1uLL) == 1 && LOBYTE(v138[0]) == 123;
    v6 = v5;
    close(v4);
    if (v6)
    {
      v7 = operator new();
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)v7 = off_1EA91D8B0;
      *(_QWORD *)(v7 + 8) = v7 + 16;
      v110 = v7;
      v111 = (uint64_t **)(v7 + 16);
      *(_BYTE *)(v7 + 32) = a2;
      std::ifstream::basic_ifstream(v138);
      v128[0] = 0;
      v129 = 0;
      nlohmann::operator>>(v138, (uint64_t)v128);
      nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::begin((uint64_t)v121, v128);
      nlohmann::detail::iteration_proxy<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::end((uint64_t)&v133, v128);
      v8 = (_QWORD *)(v110 + 24);
      while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)v121, (unsigned __int8 **)&v133))
      {
        v119 = 0uLL;
        v120 = 0;
        v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)v121);
        *(_QWORD *)&v118 = 0;
        v117 = 0uLL;
        v116 = (int64x2_t *)v9;
        *((_QWORD *)&v118 + 1) = 0x8000000000000000;
        v10 = *v9;
        if (*v9)
        {
          if (v10 == 2)
          {
            v117.i64[1] = **((_QWORD **)v9 + 1);
          }
          else if (v10 == 1)
          {
            v117.i64[0] = **((_QWORD **)v9 + 1);
          }
          else
          {
            *((_QWORD *)&v118 + 1) = 0;
          }
        }
        else
        {
          *((_QWORD *)&v118 + 1) = 1;
        }
        while (1)
        {
          v27 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)v121);
          *(_QWORD *)&v132 = 0;
          v131 = 0uLL;
          v130 = (int64x2_t *)v27;
          *((_QWORD *)&v132 + 1) = 0x8000000000000000;
          v28 = *v27;
          if (v28 == 2)
          {
            v131.i64[1] = *(_QWORD *)(*((_QWORD *)v27 + 1) + 8);
          }
          else if (v28 == 1)
          {
            v131.i64[0] = *((_QWORD *)v27 + 1) + 8;
          }
          else
          {
            *((_QWORD *)&v132 + 1) = 1;
          }
          if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v116, (unsigned __int8 **)&v130))
          {
            break;
          }
          v130 = v116;
          v131 = v117;
          v132 = v118;
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v116);
          v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v114, (uint64_t)v11);
          v130 = v116;
          v131 = v117;
          v132 = v118;
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v116);
          v12 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v130);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v112, (uint64_t)v12);
          v13 = v119.i64[1];
          if (v119.i64[1] >= v120)
          {
            v15 = 0xAAAAAAAAAAAAAAABLL * ((v119.i64[1] - v119.i64[0]) >> 4);
            v16 = v15 + 1;
            if (v15 + 1 > 0x555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v120 - v119.i64[0]) >> 4) > v16)
              v16 = 0x5555555555555556 * ((uint64_t)(v120 - v119.i64[0]) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - v119.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v17 = 0x555555555555555;
            else
              v17 = v16;
            *((_QWORD *)&v132 + 1) = &v120;
            if (v17)
            {
              if (v17 > 0x555555555555555)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v18 = (unsigned __int8 *)operator new(48 * v17);
            }
            else
            {
              v18 = 0;
            }
            v130 = (int64x2_t *)v18;
            v131.i64[0] = (uint64_t)&v18[48 * v15];
            v131.i64[1] = v131.i64[0];
            *(_QWORD *)&v132 = &v18[48 * v17];
            std::allocator<FSTGrammarJSON::Rule>::construct[abi:ne180100]<FSTGrammarJSON::Rule,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &>((std::string *)v131.i64[0], (uint64_t)v114, (uint64_t)v112);
            v19 = v131.i64[0];
            v14 = v131.i64[1] + 48;
            v131.i64[1] += 48;
            v20 = v119;
            if (v119.i64[1] == v119.i64[0])
            {
              v25 = vdupq_n_s64(v119.u64[1]);
            }
            else
            {
              v21 = 0;
              do
              {
                UTFRegex::UTFRegex((UTFRegex *)(v19 + v21 - 48), *(const UTFRegex **)(v20.i64[1] + v21 - 48));
                v22 = (std::string *)(v19 + v21 - 24);
                v23 = (const std::string::value_type **)(v20.i64[1] + v21 - 24);
                if (*(char *)(v20.i64[1] + v21 - 1) < 0)
                {
                  std::string::__init_copy_ctor_external(v22, *v23, *(_QWORD *)(v20.i64[1] + v21 - 16));
                }
                else
                {
                  v24 = *(_OWORD *)v23;
                  *(_QWORD *)(v19 + v21 - 8) = *(_QWORD *)(v20.i64[1] + v21 - 8);
                  *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
                }
                v21 -= 48;
              }
              while (v20.i64[1] + v21 != v20.i64[0]);
              v19 += v21;
              v25 = v119;
              v14 = v131.i64[1];
            }
            v119.i64[0] = v19;
            v119.i64[1] = v14;
            v131 = v25;
            v26 = v120;
            v120 = v132;
            *(_QWORD *)&v132 = v26;
            v130 = (int64x2_t *)v25.i64[0];
            std::__split_buffer<FSTGrammarJSON::Rule>::~__split_buffer((uint64_t)&v130);
          }
          else
          {
            std::allocator<FSTGrammarJSON::Rule>::construct[abi:ne180100]<FSTGrammarJSON::Rule,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &>((std::string *)v119.i64[1], (uint64_t)v114, (uint64_t)v112);
            v14 = v13 + 48;
          }
          v119.i64[1] = v14;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v113, v112[0]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v115, v114[0]);
          v8 = (_QWORD *)(v110 + 24);
        }
        v29 = nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>::key((unsigned __int8 **)v121);
        v30 = v111;
        v31 = *v111;
        v32 = v111;
        if (!*v111)
          goto LABEL_57;
        v32 = v111;
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v31;
            v33 = (const void **)(v31 + 4);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v8, (const void **)v29, (const void **)v31 + 4))break;
            v31 = *v30;
            v32 = v30;
            if (!*v30)
              goto LABEL_57;
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v8, v33, (const void **)v29))
            break;
          v32 = v30 + 1;
          v31 = v30[1];
          if (!v31)
            goto LABEL_57;
        }
        if (!*v32)
        {
LABEL_57:
          v34 = (char *)operator new(0x50uLL);
          v130 = (int64x2_t *)v34;
          v131.i64[0] = (uint64_t)v111;
          v131.i8[8] = 0;
          v35 = (std::string *)(v34 + 32);
          if (*(char *)(v29 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)v29, *(_QWORD *)(v29 + 8));
          }
          else
          {
            v36 = *(_OWORD *)v29;
            *((_QWORD *)v34 + 6) = *(_QWORD *)(v29 + 16);
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          *(int64x2_t *)(v34 + 56) = v119;
          *((_QWORD *)v34 + 9) = v120;
          v120 = 0;
          v119 = 0uLL;
          v131.i8[8] = 1;
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = v30;
          *v32 = (uint64_t *)v34;
          v37 = **(_QWORD **)(v110 + 8);
          if (v37)
          {
            *(_QWORD *)(v110 + 8) = v37;
            v34 = (char *)*v32;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v111, (uint64_t *)v34);
          ++*v8;
          v130 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v130);
        }
        v130 = &v119;
        std::vector<FSTGrammarJSON::Rule>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)v121);
        ++v123;
      }
      if (v137 < 0)
        operator delete(__p);
      if (v135 < 0)
        operator delete(v134);
      if (v127 < 0)
        operator delete(v126);
      if (v125 < 0)
        operator delete(v124);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);
      v138[0] = *(void **)MEMORY[0x1E0DE4F40];
      *(void **)((char *)v138 + *((_QWORD *)v138[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1DF0ECB94](v139);
      std::istream::~istream();
      MEMORY[0x1DF0ECF6C](v140);
      return v110;
    }
  }
  v38 = atomic_load(&FSTGrammar::create(std::string const&,BOOL)::register_fst_types);
  if (v38 != -1)
  {
    v138[0] = &v133;
    v121[0] = v138;
    std::__call_once(&FSTGrammar::create(std::string const&,BOOL)::register_fst_types, v121, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<FSTGrammar::create(std::string const&,BOOL)::$_0 &&>>);
  }
  v39 = operator new();
  *(_QWORD *)(v39 + 16) = 0;
  v40 = (uint64_t **)(v39 + 16);
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)v39 = off_1EA91D880;
  *(_QWORD *)(v39 + 8) = v39 + 16;
  v110 = v39;
  *(_BYTE *)(v39 + 32) = a2;
  v41 = *((unsigned __int8 *)v109 + 23);
  if ((v41 & 0x80u) != 0)
    v41 = *((_QWORD *)v109 + 1);
  if (v41)
  {
    memset(&v133, 0, sizeof(v133));
    v133.__r_.__value_.__l.__size_ = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, v109);
    v42 = operator new();
    *(_OWORD *)(v42 + 8) = 0u;
    *(_OWORD *)(v42 + 24) = 0u;
    *(_OWORD *)(v42 + 40) = 0u;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v42 + 32), (__int128 *)v133.__r_.__value_.__l.__data_, (__int128 *)v133.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3));
    *(_OWORD *)(v42 + 56) = 0u;
    *(_QWORD *)(v42 + 144) = 0;
    *(_BYTE *)(v42 + 152) = 0;
    *(_OWORD *)(v42 + 72) = 0u;
    *(_OWORD *)(v42 + 88) = 0u;
    *(_OWORD *)(v42 + 104) = 0u;
    *(_QWORD *)(v42 + 120) = 0;
    v43 = (_QWORD *)operator new();
    *v43 = v42 + 80;
    *(_QWORD *)(v42 + 136) = v43;
    std::vector<std::string>::resize((std::vector<std::string> *)(v42 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3));
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3);
    v45 = *(_QWORD **)(v42 + 8);
    v46 = *(_QWORD **)(v42 + 16);
    v47 = v46 - v45;
    if (v44 <= v47)
    {
      v52 = (_QWORD **)(v42 + 8);
      if (v44 >= v47)
      {
LABEL_102:
        v62 = v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0];
        v63 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3);
        v64 = *(char **)(v42 + 56);
        v65 = *(char **)(v42 + 64);
        v66 = (char *)(v65 - v64);
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 3);
        if (v63 <= v67)
        {
          if (v63 < v67)
          {
            v81 = &v64[8 * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3)];
            if (v65 != v81)
            {
              v82 = *(char **)(v42 + 64);
              do
              {
                v84 = (void *)*((_QWORD *)v82 - 3);
                v82 -= 24;
                v83 = v84;
                if (v84)
                {
                  *((_QWORD *)v65 - 2) = v83;
                  operator delete(v83);
                }
                v65 = v82;
              }
              while (v82 != v81);
            }
            *(_QWORD *)(v42 + 64) = v81;
          }
        }
        else
        {
          v68 = *(_QWORD *)(v42 + 72);
          if (0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v65) >> 3) >= v63 - v67)
          {
            v85 = 24 * ((v62 - (unint64_t)v66 - 24) / 0x18) + 24;
            bzero(*(void **)(v42 + 64), v85);
            *(_QWORD *)(v42 + 64) = &v65[v85];
          }
          else
          {
            if (v63 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v69 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v64) >> 3);
            if (2 * v69 > v63)
              v63 = 2 * v69;
            if (v69 >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v63;
            if (v70 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v71 = (char *)operator new(24 * v70);
            v72 = &v71[8 * ((v65 - v64) >> 3)];
            v73 = &v71[24 * v70];
            v74 = 24 * ((v62 - (unint64_t)v66 - 24) / 0x18) + 24;
            bzero(v72, v74);
            v75 = &v72[v74];
            if (v65 == v64)
            {
              *(_QWORD *)(v42 + 56) = v72;
              *(_QWORD *)(v42 + 64) = v75;
              *(_QWORD *)(v42 + 72) = v73;
              v52 = (_QWORD **)(v42 + 8);
            }
            else
            {
              do
              {
                *((_QWORD *)v72 - 3) = 0;
                *((_QWORD *)v72 - 2) = 0;
                v72 -= 24;
                *((_QWORD *)v72 + 2) = 0;
                v76 = *(_OWORD *)(v65 - 24);
                v65 -= 24;
                *(_OWORD *)v72 = v76;
                *((_QWORD *)v72 + 2) = *((_QWORD *)v65 + 2);
                *(_QWORD *)v65 = 0;
                *((_QWORD *)v65 + 1) = 0;
                *((_QWORD *)v65 + 2) = 0;
              }
              while (v65 != v64);
              v77 = *(char **)(v42 + 56);
              v65 = *(char **)(v42 + 64);
              *(_QWORD *)(v42 + 56) = v72;
              *(_QWORD *)(v42 + 64) = v75;
              *(_QWORD *)(v42 + 72) = v73;
              v52 = (_QWORD **)(v42 + 8);
              if (v65 != v77)
              {
                v78 = v65;
                do
                {
                  v80 = (void *)*((_QWORD *)v78 - 3);
                  v78 -= 24;
                  v79 = v80;
                  if (v80)
                  {
                    *((_QWORD *)v65 - 2) = v79;
                    operator delete(v79);
                  }
                  v65 = v78;
                }
                while (v78 != v77);
                v65 = v77;
              }
            }
            if (v65)
              operator delete(v65);
          }
        }
        if (v133.__r_.__value_.__l.__size_ == v133.__r_.__value_.__r.__words[0])
        {
          fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(v42);
        }
        else
        {
          v86 = (_QWORD *)operator new();
          std::ifstream::basic_ifstream(v86);
          **v52 = v86;
          LODWORD(v116) = 0;
          v119.i32[0] = 0;
          std::istream::read();
          std::istream::read();
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(v121, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(v121, "ERROR");
          v87 = fst::LogMessage::LogMessage((fst *)v128, (uint64_t)v121);
          v88 = (_QWORD *)fst::cerr(v87);
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"STTableReader::STTableReader: wrong file type: ", 47);
          v90 = *(char *)(v133.__r_.__value_.__r.__words[0] + 23);
          if (v90 >= 0)
            v91 = v133.__r_.__value_.__r.__words[0];
          else
            v91 = *(_QWORD *)v133.__r_.__value_.__l.__data_;
          if (v90 >= 0)
            v92 = *(unsigned __int8 *)(v133.__r_.__value_.__r.__words[0] + 23);
          else
            v92 = *(_QWORD *)(v133.__r_.__value_.__r.__words[0] + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, v91, v92);
          fst::LogMessage::~LogMessage((fst::LogMessage *)v128);
          if (v122 < 0)
            operator delete(v121[0]);
          *(_BYTE *)(v42 + 152) = 1;
        }
        v138[0] = &v133;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v138);
        goto LABEL_146;
      }
      v60 = &v45[0xAAAAAAAAAAAAAABLL
               * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3)];
    }
    else
    {
      v48 = *(_QWORD *)(v42 + 24);
      if (v44 - v47 > (v48 - (uint64_t)v46) >> 3)
      {
        if (v44 >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v48 - (_QWORD)v45;
        v50 = v49 >> 2;
        if (v49 >> 2 <= v44)
          v50 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3);
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        v52 = (_QWORD **)(v42 + 8);
        if (v51 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = (char *)operator new(8 * v51);
        v54 = &v53[8 * v47];
        v55 = v54;
        v56 = 8 * v44 - 8 * v47;
        do
        {
          *(_QWORD *)v55 = 0;
          v55 += 8;
          v56 -= 8;
        }
        while (v56);
        if (v46 != v45)
        {
          do
          {
            v57 = *--v46;
            *((_QWORD *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v46 != v45);
          v46 = *(_QWORD **)(v42 + 8);
        }
        *(_QWORD *)(v42 + 8) = v54;
        *(_QWORD *)(v42 + 16) = &v53[8 * v44];
        *(_QWORD *)(v42 + 24) = &v53[8 * v51];
        if (v46)
          operator delete(v46);
        goto LABEL_102;
      }
      v60 = &v46[v44 - v47];
      v61 = 0x5555555555555558 * ((uint64_t)(v133.__r_.__value_.__l.__size_ - v133.__r_.__value_.__r.__words[0]) >> 3)
          - 8 * v47;
      v52 = (_QWORD **)(v42 + 8);
      do
      {
        *v46++ = 0;
        v61 -= 8;
      }
      while (v61);
    }
    *(_QWORD *)(v42 + 16) = v60;
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(v138, "ERROR");
  v58 = fst::LogMessage::LogMessage((fst *)v121, (uint64_t)v138);
  v59 = (_QWORD *)fst::cerr(v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"STTableReader: reading from standard in not supported", 53);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v121);
  if ((v139[7] & 0x80000000) != 0)
    operator delete(v138[0]);
  v42 = 0;
LABEL_146:
  v93 = (_QWORD *)operator new();
  *v93 = off_1EA924E48;
  v93[1] = v42;
  fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reset(v42);
  v94 = (_QWORD *)(v110 + 24);
  while (((*(uint64_t (**)(_QWORD *))(*v93 + 16))(v93) & 1) == 0)
  {
    v95 = (*(uint64_t (**)(_QWORD *))(*v93 + 32))(v93);
    if (*(char *)(v95 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)v95, *(_QWORD *)(v95 + 8));
    }
    else
    {
      v96 = *(_OWORD *)v95;
      v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(v95 + 16);
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v96;
    }
    v97 = (*(uint64_t (**)(_QWORD *))(*v93 + 40))(v93);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(&v130, v97);
    v98 = *v40;
    v99 = v40;
    v100 = (uint64_t *)v40;
    if (!*v40)
      goto LABEL_160;
    v99 = v40;
    while (1)
    {
      while (1)
      {
        v100 = v98;
        v101 = (const void **)(v98 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v94, (const void **)&v133.__r_.__value_.__l.__data_, (const void **)v98 + 4))break;
        v98 = (uint64_t *)*v100;
        v99 = v100;
        if (!*v100)
          goto LABEL_160;
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v94, v101, (const void **)&v133.__r_.__value_.__l.__data_))break;
      v99 = v100 + 1;
      v98 = (uint64_t *)v100[1];
      if (!v98)
        goto LABEL_160;
    }
    if (!*v99)
    {
LABEL_160:
      v102 = operator new(0x48uLL);
      v138[0] = v102;
      v138[1] = v40;
      v139[0] = 0;
      v103 = (std::string *)(v102 + 4);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v103, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v103->__r_.__value_.__l.__data_ = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
        v102[6] = *((_QWORD *)&v133.__r_.__value_.__l + 2);
      }
      v104 = v131.i64[0];
      v102[8] = v131.i64[0];
      ++*(_DWORD *)(v104 + 56);
      v102[7] = &unk_1EA9261D0;
      v139[0] = 1;
      *v102 = 0;
      v102[1] = 0;
      v102[2] = v100;
      *v99 = v102;
      v105 = **(_QWORD **)(v110 + 8);
      if (v105)
      {
        *(_QWORD *)(v110 + 8) = v105;
        v102 = (_QWORD *)*v99;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v40, v102);
      ++*v94;
      v138[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v138);
    }
    v130 = (int64x2_t *)&unk_1EA925AA8;
    v106 = v131.i64[0];
    if (v131.i64[0])
    {
      v107 = *(_DWORD *)(v131.i64[0] + 56) - 1;
      *(_DWORD *)(v131.i64[0] + 56) = v107;
      if (!v107)
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    (*(void (**)(_QWORD *))(*v93 + 24))(v93);
  }
  (*(void (**)(_QWORD *))(*v93 + 72))(v93);
  return v110;
}

void sub_1DEA64A38(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t p_buf,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,__int128 buf)
{
  void *v55;
  void *v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;

  if (a2)
  {
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a47);
    if (a36 < 0)
      operator delete(__p);
    v55 = (void *)a15[13];
    if (v55)
    {
      a15[14] = v55;
      operator delete(v55);
    }
    p_buf = a11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    p_buf = a16;
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    p_buf = a10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    v56 = *a17;
    if (*a17)
    {
      a15[2] = v56;
      operator delete(v56);
    }
    MEMORY[0x1DF0ED014](a15, 0x10B0C40F71FB6DELL);
    p_buf = (uint64_t)&buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
    std::__tree<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>>::destroy(*(_QWORD **)(a13 + 16));
    MEMORY[0x1DF0ED014](a13, 0x10A1C40CEA811D0);
    __cxa_begin_catch(a1);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a12 + 23) >= 0)
        v59 = a12;
      else
        v59 = *(_QWORD *)a12;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v59;
      _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_ERROR, "Failed to load FST rules from %s.", (uint8_t *)&buf, 0xCu);
    }
    Diagnostics::log(3, "Failed to load FST rules from %s.", v58);
    __cxa_end_catch();
    JUMPOUT(0x1DEA649BCLL);
  }
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<FSTGrammar::create(std::string const&,BOOL)::$_0 &&>>()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::FstRegisterer();
    }
  }
}

void sub_1DEA64FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reset(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (!*(_BYTE *)(a1 + 152))
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 8))
    {
      v2 = 0;
      v3 = 0;
      do
      {
        std::istream::seekg();
        ++v3;
        v2 += 24;
      }
      while (v3 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    }
    fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int64_t v47;
  int64_t v49;
  uint64_t v50;
  void *__p[2];
  char v52;
  std::string::value_type __c;

  v1 = a1;
  v3 = (void **)(a1 + 104);
  v2 = *(_QWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = v2;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
  {
    v18 = v2;
LABEL_26:
    v19 = (char *)v2 - v18;
    if ((char *)v2 - v18 >= 9)
    {
      v20 = v18;
      v45 = **(uint64_t ***)(v1 + 136);
      v46 = v19;
      v21 = v19 >> 3;
      v22 = (unint64_t)((v19 >> 3) - 2) >> 1;
      v23 = v22;
      v49 = v22;
      do
      {
        v24 = v23;
        if (v19 >= 16 && v22 >= v23)
        {
          v25 = (2 * v23) | 1;
          v26 = (uint64_t *)&v20[8 * v25];
          v27 = 2 * v23 + 2;
          v28 = *v26;
          v47 = v23;
          if (v27 >= v21)
          {
            v30 = *v45;
          }
          else
          {
            v29 = v26[1];
            v30 = *v45;
            v31 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*v45, v28, v29);
            if (v31)
              v28 = v29;
            v22 = v49;
            if (v31)
              ++v26;
            v19 = v46;
            v24 = v47;
            if (v31)
              v25 = v27;
          }
          v32 = (uint64_t *)&v20[8 * v24];
          v50 = *v32;
          v33 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, v28, *v32);
          v24 = v47;
          v1 = a1;
          if (!v33)
          {
            do
            {
              *v32 = v28;
              v32 = v26;
              if (v22 < v25)
                break;
              v34 = (2 * v25) | 1;
              v26 = (uint64_t *)&v20[8 * v34];
              v35 = 2 * v25 + 2;
              v28 = *v26;
              if (v35 < v21)
              {
                v36 = v26[1];
                v37 = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, *v26, v36);
                if (v37)
                {
                  v28 = v36;
                  ++v26;
                }
                v22 = v49;
                if (v37)
                  v34 = v35;
              }
              v25 = v34;
            }
            while (!fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v30, v28, v50));
            *v32 = v50;
            v24 = v47;
            v1 = a1;
            v19 = v46;
          }
        }
        v23 = v24 - 1;
      }
      while (v24);
    }
    fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(v1);
  }
  else
  {
    v4 = 0;
    v5 = a1 + 120;
    while (1)
    {
      v6 = *(_QWORD *)(v1 + 80) + 24 * v4;
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
      }
      LODWORD(__p[0]) = 0;
      std::istream::read();
      v1 = a1;
      v7 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v4);
      if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
        break;
      v9 = *(char **)(a1 + 112);
      v8 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v9 >= v8)
      {
        v10 = (char *)*v3;
        v11 = (v9 - (_BYTE *)*v3) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v14);
          v10 = *(char **)(a1 + 104);
          v9 = *(char **)(a1 + 112);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v4;
        v2 = v16 + 8;
        while (v9 != v10)
        {
          v17 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        *(_QWORD *)(a1 + 104) = v16;
        *(_QWORD *)(a1 + 112) = v2;
        *(_QWORD *)(a1 + 120) = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v9 = v4;
        v2 = v9 + 8;
      }
      *(_QWORD *)(a1 + 112) = v2;
      if (++v4 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
      {
        v18 = *v3;
        goto LABEL_26;
      }
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v38 = fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)__p);
    v39 = (_QWORD *)fst::cerr(v38);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"STTableReader: error reading file: ", 35);
    v41 = *(_QWORD *)(a1 + 32) + 24 * v4;
    v42 = *(char *)(v41 + 23);
    if (v42 >= 0)
      v43 = *(_QWORD *)(a1 + 32) + 24 * v4;
    else
      v43 = *(_QWORD *)v41;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v41 + 23);
    else
      v44 = *(_QWORD *)(v41 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v43, v44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
    if (v52 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 152) = 1;
  }
}

void sub_1DEA654E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)(_QWORD, _QWORD);
  uint64_t (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type size;
  _QWORD *v42;
  fst *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v60[2];
  char v61;
  std::string v62;
  _OWORD v63[2];
  void *__p[2];
  char v65;
  char v66;
  void *v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  std::string v74;
  _OWORD v75[3];

  v1 = a1;
  v3 = *(uint64_t **)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 - (uint64_t)v3 >= 9)
  {
    v58 = *(_QWORD *)(a1 + 112);
    v4 = 0;
    v5 = **(uint64_t ***)(a1 + 136);
    v6 = (unint64_t)(v2 - (_QWORD)v3) >> 3;
    v56 = *(_QWORD *)(a1 + 104);
    v57 = *v3;
    v7 = v6 - 2;
    if (v6 < 2)
      v7 = v6 - 1;
    v8 = v7 >> 1;
    do
    {
      v9 = &v3[v4];
      v12 = v9[1];
      v11 = v9 + 1;
      v10 = v12;
      v13 = (2 * v4) | 1;
      v14 = 2 * v4 + 2;
      if (v14 < (uint64_t)v6)
      {
        v15 = v11[1];
        if (fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*v5, v10, v15))
        {
          v10 = v15;
          ++v11;
          v13 = v14;
        }
      }
      *v3 = v10;
      v3 = v11;
      v4 = v13;
    }
    while (v13 <= v8);
    v2 = v58;
    v16 = (uint64_t *)(v58 - 8);
    if ((uint64_t *)(v58 - 8) == v11)
    {
      *v11 = v57;
      v1 = a1;
    }
    else
    {
      *v11 = *v16;
      *v16 = v57;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(v56, (uint64_t)(v11 + 1), v5, ((uint64_t)v11 - v56 + 8) >> 3);
      v1 = a1;
      v2 = *(_QWORD *)(a1 + 112);
    }
  }
  v17 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 128) = v17;
  v18 = *(_QWORD *)(v1 + 144);
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v17 = *(_QWORD *)(v1 + 128);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v17);
  std::string::basic_string[abi:ne180100]<0>(v60, "<unspecified>");
  fst::FstReadOptions::FstReadOptions(&v62, v60, 0, 0, 0);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  else
    v74 = v62;
  v75[0] = v63[0];
  *(_OWORD *)((char *)v75 + 14) = *(_OWORD *)((char *)v63 + 14);
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  *(_OWORD *)v68 = 0u;
  v73 = 0;
  v72 = 0xFFFFFFFFFFFFFFFFLL;
  if (*(_QWORD *)&v63[0])
  {
    v20 = *(_QWORD *)&v63[0];
    LODWORD(v67) = **(_DWORD **)&v63[0];
    std::string::operator=((std::string *)v68, (const std::string *)(*(_QWORD *)&v63[0] + 8));
    std::string::operator=((std::string *)((char *)&v69 + 8), (const std::string *)(v20 + 32));
    v21 = *(_OWORD *)(v20 + 56);
    v22 = *(_OWORD *)(v20 + 72);
    v73 = *(_QWORD *)(v20 + 88);
    v72 = v22;
    v71 = v21;
  }
  else
  {
    if (!fst::FstHeader::Read((uint64_t)&v67, v19, (uint64_t)&v62, 0))
      goto LABEL_47;
    *(_QWORD *)&v75[0] = &v67;
  }
  if ((fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ & 1) == 0)
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Init();
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ = 1;
  v23 = fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_;
  v24 = (uint64_t (**)(_QWORD, _QWORD))(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_
                                                                                             + 32))(fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_, v68);
  if (v24)
  {
    v25 = *v24;
    if (*v24)
    {
LABEL_25:
      v26 = v25(v19, &v74);
      goto LABEL_48;
    }
  }
  else
  {
    v25 = (uint64_t (*)(_QWORD, _QWORD))(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 16))(v23, v68);
    if (v25)
      goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v27 = fst::LogMessage::LogMessage((fst *)&v66, (uint64_t)__p);
  v28 = (_QWORD *)fst::cerr(v27);
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Fst::Read: Unknown FST type \"", 29);
  if ((SBYTE7(v69) & 0x80u) == 0)
    v30 = v68;
  else
    v30 = (void **)v68[0];
  if ((SBYTE7(v69) & 0x80u) == 0)
    v31 = BYTE7(v69);
  else
    v31 = (uint64_t)v68[1];
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\" (arc type = \"", 15);
  v34 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
  v35 = *(char *)(v34 + 23);
  if (v35 >= 0)
    v36 = v34;
  else
    v36 = *(_QWORD *)v34;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(v34 + 23);
  else
    v37 = *(_QWORD *)(v34 + 8);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\"): ", 4);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v74;
  else
    v40 = (std::string *)v74.__r_.__value_.__r.__words[0];
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    size = v74.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, size);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v66);
  if (v65 < 0)
    operator delete(__p[0]);
LABEL_47:
  v26 = 0;
LABEL_48:
  if (SHIBYTE(v70) < 0)
    operator delete(*((void **)&v69 + 1));
  if (SBYTE7(v69) < 0)
    operator delete(v68[0]);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v61 < 0)
    operator delete(v60[0]);
  *(_QWORD *)(v1 + 144) = v26;
  if (!v26)
    *(_BYTE *)(v1 + 152) = 1;
  v42 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * *(_QWORD *)(v1 + 128));
  if ((*((_BYTE *)v42 + *(_QWORD *)(*v42 - 24) + 32) & 5) != 0)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v67, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v67, "ERROR");
    v43 = fst::LogMessage::LogMessage((fst *)&v74, (uint64_t)&v67);
    v44 = (_QWORD *)fst::cerr(v43);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"STTableReader: error reading entry for key: ", 44);
    v46 = *(_QWORD *)(v1 + 80) + 24 * *(_QWORD *)(v1 + 128);
    v47 = *(char *)(v46 + 23);
    if (v47 >= 0)
      v48 = *(_QWORD *)(v1 + 80) + 24 * *(_QWORD *)(v1 + 128);
    else
      v48 = *(_QWORD *)v46;
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(v46 + 23);
    else
      v49 = *(_QWORD *)(v46 + 8);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v48, v49);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", file: ", 8);
    v52 = *(_QWORD *)(v1 + 32) + 24 * *(_QWORD *)(v1 + 128);
    v53 = *(char *)(v52 + 23);
    if (v53 >= 0)
      v54 = *(_QWORD *)(v1 + 32) + 24 * *(_QWORD *)(v1 + 128);
    else
      v54 = *(_QWORD *)v52;
    if (v53 >= 0)
      v55 = *(unsigned __int8 *)(v52 + 23);
    else
      v55 = *(_QWORD *)(v52 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v74);
    if (SHIBYTE(v68[1]) < 0)
      operator delete(v67);
    *(_BYTE *)(v1 + 152) = 1;
  }
}

void sub_1DEA65A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v44 - 160));
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(_BOOL8 result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (uint64_t *)(result + 8 * (v4 >> 1));
    v8 = *v7;
    v10 = (uint64_t *)(a2 - 8);
    v9 = *(_QWORD *)(a2 - 8);
    v11 = *a3;
    result = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(*a3, *v7, v9);
    if (result)
    {
      do
      {
        v12 = v7;
        *v10 = v8;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (uint64_t *)(v5 + 8 * v6);
        v8 = *v7;
        result = fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(v11, *v7, v9);
        v10 = v12;
      }
      while (result);
      *v12 = v9;
    }
  }
  return result;
}

_QWORD *fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Init()
{
  _QWORD *result;

  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_lock_ = operator new();
  result = (_QWORD *)operator new();
  result[3] = 0;
  result[2] = 0;
  *result = &off_1EA924050;
  result[1] = result + 2;
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_ = (uint64_t)result;
  return result;
}

uint64_t fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstRegister(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA924DC0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  return a1;
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstRegister(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA924DC0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(*(char **)(a1 + 16));
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LoadEntryFromSharedObject(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t *v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  size_t v11;
  fst *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;
  void *v22[2];
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(v22);
  if ((v23 & 0x80u) == 0)
    v4 = v22;
  else
    v4 = (void **)v22[0];
  if (dlopen((const char *)v4, 1))
  {
    v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
    if (v5)
    {
      v6 = *v5;
      goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"GenericRegister::GetEntry : ", 28);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lookup failed in shared object: ", 32);
    if ((v23 & 0x80u) == 0)
      v16 = v22;
    else
      v16 = (void **)v22[0];
    if ((v23 & 0x80u) == 0)
      v17 = v23;
    else
      v17 = (uint64_t)v22[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v8 = (_QWORD *)fst::cerr(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"GenericRegister::GetEntry : ", 28);
    v10 = dlerror();
    v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = 0;
LABEL_18:
  if ((char)v23 < 0)
    operator delete(v22[0]);
  return v6;
}

void sub_1DEA65DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ConvertKeyToSoFilename(uint64_t a1@<X1>, void **a2@<X8>)
{
  size_t size;
  std::string *p_p;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  fst::ConvertToLegalCSymbol((unint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 7);
  if (*((char *)a2 + 23) < 0)
    a2 = (void **)*a2;
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
  }
  strcpy((char *)a2 + size, "-fst.so");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DEA65EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::LookupEntry(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    goto LABEL_8;
  v5 = a1 + 24;
  v6 = a1 + 16;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
LABEL_8:
    v6 = v2;
  if (v2 == v6)
    return 0;
  else
    return v6 + 56;
}

BOOL fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void **v3;
  uint64_t v4;
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;

  v3 = (const void **)(a1 + 24 * a2);
  v4 = a1 + 24 * a3;
  v5 = *((char *)v3 + 23);
  v6 = *(char *)(v4 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  if (v6 >= 0)
    v8 = (const void *)(a1 + 24 * a3);
  else
    v8 = *(const void **)v4;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)v3 + 23);
  else
    v9 = (size_t)v3[1];
  if (v5 >= 0)
    v10 = v3;
  else
    v10 = *v3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  if (v12)
    return v12 < 0;
  else
    return v7 < v9;
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Reset(uint64_t a1)
{
  fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reset(*(_QWORD *)(a1 + 8));
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Find(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  const void **v11;
  const void *v12;
  size_t v13;
  _OWORD *v14;
  size_t v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _OWORD v49[8];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 152))
    return 0;
  if (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v2 + 8))
    goto LABEL_60;
  v4 = 0;
  v46 = *(_QWORD *)(a1 + 8);
  do
  {
    v5 = 0;
    v47 = v4;
    v48 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 24 * v4);
    v6 = ((uint64_t)(v48[1] - *v48) >> 3) - 1;
    while (v5 < v6)
    {
      v7 = (v6 + v5) >> 1;
      v8 = *(_QWORD *)(*v48 + 8 * v7);
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v86 = v8;
      std::istream::seekg();
      memset(v49, 0, 24);
      std::istream::read();
      v9 = *((char *)a2 + 23);
      if (v9 >= 0)
        v10 = *((unsigned __int8 *)a2 + 23);
      else
        v10 = (size_t)a2[1];
      v11 = a2;
      if (v9 >= 0)
        v12 = a2;
      else
        v12 = *a2;
      if ((SBYTE7(v49[1]) & 0x80u) == 0)
        v13 = BYTE7(v49[1]);
      else
        v13 = *((_QWORD *)&v49[0] + 1);
      if ((SBYTE7(v49[1]) & 0x80u) == 0)
        v14 = v49;
      else
        v14 = *(_OWORD **)&v49[0];
      if (v13 >= v10)
        v15 = v10;
      else
        v15 = v13;
      v16 = memcmp(v12, v14, v15);
      v17 = v10 < v13;
      if (v16)
        v17 = v16 < 0;
      if (v17)
      {
        v18 = 1;
        v6 = (v6 + v5) >> 1;
      }
      else
      {
        v19 = memcmp(v14, v12, v15);
        v20 = v13 < v10;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
        {
          a2 = v11;
          if (v7 <= v5)
          {
LABEL_51:
            v29 = *(_QWORD *)(*v48 + 8 * v5);
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v59 = v29;
            std::istream::seekg();
          }
          else
          {
            while (1)
            {
              v21 = v7 - 1;
              v22 = *(_QWORD *)(*v48 + 8 * (v7 - 1));
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v77 = v22;
              std::istream::seekg();
              if (SBYTE7(v49[1]) < 0)
              {
                **(_BYTE **)&v49[0] = 0;
                *((_QWORD *)&v49[0] + 1) = 0;
              }
              else
              {
                LOBYTE(v49[0]) = 0;
                BYTE7(v49[1]) = 0;
              }
              std::istream::read();
              v23 = BYTE7(v49[1]);
              if ((SBYTE7(v49[1]) & 0x80u) == 0)
                v24 = (const void *)BYTE7(v49[1]);
              else
                v24 = (const void *)*((_QWORD *)&v49[0] + 1);
              v25 = (const void *)*((unsigned __int8 *)v11 + 23);
              v26 = (char)v25;
              if ((char)v25 < 0)
                v25 = v11[1];
              if (v24 != v25)
                break;
              if (v26 >= 0)
                v27 = (unsigned __int8 *)v11;
              else
                v27 = (unsigned __int8 *)*v11;
              if ((BYTE7(v49[1]) & 0x80) != 0)
              {
                if (memcmp(*(const void **)&v49[0], v27, *((size_t *)&v49[0] + 1)))
                  break;
              }
              else if (BYTE7(v49[1]))
              {
                v28 = (unsigned __int8 *)v49;
                while (*v28 == *v27)
                {
                  ++v28;
                  ++v27;
                  if (!--v23)
                    goto LABEL_50;
                }
                break;
              }
LABEL_50:
              --v7;
              if (v21 <= v5)
                goto LABEL_51;
            }
            v30 = *(_QWORD *)(*v48 + 8 * v7);
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v68 = v30;
            std::istream::seekg();
          }
          v18 = 0;
          goto LABEL_54;
        }
        v5 = v7 + 1;
        v18 = 1;
      }
      a2 = v11;
LABEL_54:
      if (SBYTE7(v49[1]) < 0)
        operator delete(*(void **)&v49[0]);
      if ((v18 & 1) == 0)
        goto LABEL_59;
    }
    v31 = *(_QWORD *)(*v48 + 8 * v5);
    memset(v49, 0, sizeof(v49));
    v50 = v31;
    std::istream::seekg();
LABEL_59:
    v2 = v46;
    v4 = v47 + 1;
  }
  while (v47 + 1 < (unint64_t)((uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 3));
LABEL_60:
  fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MakeHeap(v2);
  v32 = (unsigned __int8 *)(*(_QWORD *)(v2 + 80) + 24 * *(_QWORD *)(v2 + 128));
  v33 = v32[23];
  if ((v33 & 0x80u) == 0)
    v34 = (const void *)v32[23];
  else
    v34 = (const void *)*((_QWORD *)v32 + 1);
  v35 = (const void *)*((unsigned __int8 *)a2 + 23);
  v36 = (char)v35;
  if ((char)v35 < 0)
    v35 = a2[1];
  if (v34 != v35)
    return 0;
  if (v36 >= 0)
    v37 = (unsigned __int8 *)a2;
  else
    v37 = (unsigned __int8 *)*a2;
  if ((v33 & 0x80) != 0)
    return memcmp(*(const void **)v32, v37, *((_QWORD *)v32 + 1)) == 0;
  if (!v32[23])
    return 1;
  v38 = v33 - 1;
  do
  {
    v40 = *v32++;
    v39 = v40;
    v42 = *v37++;
    v41 = v42;
    v44 = v38-- != 0;
    result = v39 == v41;
  }
  while (v39 == v41 && v44);
  return result;
}

void sub_1DEA664DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Done(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return *(_BYTE *)(v1 + 152) || *(_QWORD *)(v1 + 104) == *(_QWORD *)(v1 + 112);
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Next(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type __c;
  void *__p[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 152))
  {
    std::istream::tellg();
    if (v15 > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 24 * *(_QWORD *)(v1 + 128) + 8) - 8))
    {
      v2 = *(_QWORD *)(v1 + 112) - 8;
      *(_QWORD *)(v1 + 112) = v2;
      goto LABEL_11;
    }
    v3 = *(_QWORD *)(v1 + 80) + 24 * *(_QWORD *)(v1 + 128);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
    LODWORD(__p[0]) = 0;
    std::istream::read();
    v4 = *(_QWORD **)(*(_QWORD *)(v1 + 8) + 8 * *(_QWORD *)(v1 + 128));
    if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) == 0)
    {
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Compare &,std::__wrap_iter<long long *>>(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), **(uint64_t ***)(v1 + 136), (uint64_t)(*(_QWORD *)(v1 + 112) - *(_QWORD *)(v1 + 104)) >> 3);
      v2 = *(_QWORD *)(v1 + 112);
LABEL_11:
      if (*(_QWORD *)(v1 + 104) != v2)
        fst::STTableReader<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PopHeap(v1);
      return;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"STTableReader: error reading file: ", 35);
    v8 = *(_QWORD *)(v1 + 32) + 24 * *(_QWORD *)(v1 + 128);
    v9 = *(char *)(v8 + 23);
    if (v9 >= 0)
      v10 = *(_QWORD *)(v1 + 32) + 24 * *(_QWORD *)(v1 + 128);
    else
      v10 = *(_QWORD *)v8;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v8 + 23);
    else
      v11 = *(_QWORD *)(v8 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v10, v11);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v1 + 152) = 1;
  }
}

void sub_1DEA66778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetKey(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 24 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 128);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Type()
{
  return 1;
}

uint64_t fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Error(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 152);
}

void fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(_QWORD *a1)
{
  fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(a1);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *fst::STTableFarReader<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~STTableFarReader(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void **v12;

  *a1 = off_1EA924E48;
  v2 = a1[1];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 != v4)
    {
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(v4 + 8 * v5);
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          v4 = *(_QWORD *)(v2 + 8);
          v3 = *(_QWORD *)(v2 + 16);
        }
        ++v5;
      }
      while (v5 < (v3 - v4) >> 3);
    }
    v7 = *(_QWORD *)(v2 + 136);
    if (v7)
      MEMORY[0x1DF0ED014](v7, 0x60C4044C4A2DFLL);
    v8 = *(_QWORD *)(v2 + 144);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(void **)(v2 + 104);
    if (v9)
    {
      *(_QWORD *)(v2 + 112) = v9;
      operator delete(v9);
    }
    v12 = (void **)(v2 + 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 56);
    std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)(v2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    v10 = *(void **)(v2 + 8);
    if (v10)
    {
      *(_QWORD *)(v2 + 16) = v10;
      operator delete(v10);
    }
    MEMORY[0x1DF0ED014](v2, 0x10B0C40F71FB6DELL);
  }
  return a1;
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::FstRegisterer()
{
  uint64_t v0;
  char *v1;
  char **v2;
  char **v3;
  const void **v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  void *v9;
  uint64_t v10;
  std::string v11;
  std::string v12;
  __int128 v13;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(&v9);
  if (*(char *)(v10 + 39) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v10 + 16), *(_QWORD *)(v10 + 24));
  else
    v11 = *(std::string *)(v10 + 16);
  if ((fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ & 1) == 0)
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Init();
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_init_ = 1;
  v0 = fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::register_;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  *(_QWORD *)&v13 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read;
  *((_QWORD *)&v13 + 1) = fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Convert;
  v2 = (char **)(v0 + 16);
  v1 = *(char **)(v0 + 16);
  if (!v1)
  {
    v3 = (char **)(v0 + 16);
LABEL_17:
    v5 = (char *)operator new(0x48uLL);
    *(std::string *)(v5 + 32) = v12;
    memset(&v12, 0, sizeof(v12));
    *(_OWORD *)(v5 + 56) = v13;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = v3;
    *v2 = v5;
    v6 = **(_QWORD **)(v0 + 8);
    if (v6)
    {
      *(_QWORD *)(v0 + 8) = v6;
      v5 = *v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 16), (uint64_t *)v5);
    ++*(_QWORD *)(v0 + 24);
    goto LABEL_20;
  }
  while (1)
  {
    while (1)
    {
      v3 = (char **)v1;
      v4 = (const void **)(v1 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100](v0 + 24, (const void **)&v12.__r_.__value_.__l.__data_, (const void **)v1 + 4))break;
      v1 = *v3;
      v2 = v3;
      if (!*v3)
        goto LABEL_17;
    }
    if (!std::less<std::string>::operator()[abi:ne180100](v0 + 24, v4, (const void **)&v12.__r_.__value_.__l.__data_))
      break;
    v2 = v3 + 1;
    v1 = v3[1];
    if (!v1)
      goto LABEL_17;
  }
  if (!*v2)
    goto LABEL_17;
LABEL_20:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v9 = &unk_1EA925AA8;
  result = v10;
  if (v10)
  {
    v8 = *(_DWORD *)(v10 + 56) - 1;
    *(_DWORD *)(v10 + 56) = v8;
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1DEA66B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  int v24;

  if (a10)
  {
    v24 = a10[14] - 1;
    a10[14] = v24;
    if (!v24)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Convert(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(v2, a1);
  return v2;
}

void sub_1DEA66C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::allocator<FSTGrammarJSON::Rule>::construct[abi:ne180100]<FSTGrammarJSON::Rule,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &>(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string v8;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(a2, &v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(a3, &__p);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  UTFRegex::UTFRegex((UTFRegex *)a1, (const char *)v5);
  v6 = a1 + 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    a1[1].__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1DEA66D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  UTFRegex *v20;

  UTFRegex::~UTFRegex(v20);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<FSTGrammarJSON::Rule>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<FSTGrammarJSON::Rule>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__split_buffer<FSTGrammarJSON::Rule>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<FSTGrammarJSON::Rule>::destroy[abi:ne180100]((void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void UnitSelectionFeatureStream::~UnitSelectionFeatureStream(void **this)
{
  *this = off_1EA921300;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  Module::~Module((Module *)this);
}

{
  *this = off_1EA921300;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 36));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  Module::~Module((Module *)this);
  JUMPOUT(0x1DF0ED014);
}

void UnitSelectionFeatureStream::process_data(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  const PhoneFeature **v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const PhoneFeature **v7;
  std::string *v8;
  int64x2_t *v9;
  const PhoneFeature *v10;
  int v11;
  std::string::size_type size;
  UnitFeature *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  uint64_t v27;
  __int128 v28;
  std::string::size_type v29;
  std::string::pointer data;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  std::string::size_type v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  std::string::size_type v44;
  __int128 v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::vector<std::string> *v50;
  _QWORD *v51;
  uint64_t v52;
  std::string *v53;
  std::string::pointer v54;
  std::string *v55;
  uint64_t *v56;
  _DWORD *v57;
  char *v58;
  int v59;
  _DWORD *v60;
  int *v61;
  int v62;
  int v63;
  _WORD *v64;
  int v65;
  int v66;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  unsigned __int16 *v79;
  BOOL v80;
  int v81;
  int v82;
  BOOL v83;
  int *v84;
  int v86;
  int v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  char *v98;
  void *v99;
  char *v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  float *v106;
  int v107;
  std::string::size_type v108;
  std::string::size_type v109;
  uint64_t v110;
  _QWORD *v111;
  int **feature_encoding;
  int *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  int64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  float *v125;
  int v126;
  int *v127;
  float *v128;
  float *v129;
  float *v130;
  uint64_t v131;
  float *v132;
  int v133;
  float *v134;
  float *v135;
  int v136;
  char *v137;
  void *v138;
  float *v139;
  _DWORD *v140;
  int v141;
  float *v142;
  int v143;
  BOOL v144;
  BOOL v145;
  uint64_t v146;
  int v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  std::string::size_type v153;
  unint64_t v154;
  int *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::string::size_type v169;
  uint64_t v170;
  std::string::size_type v171;
  uint64_t v172;
  std::string::size_type v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  uint64_t v184;
  _DWORD *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  _DWORD *v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t *copycat_overrides;
  GryphonDebugging *v209;
  uint64_t v210;
  std::string::size_type v211;
  uint64_t v212;
  unint64_t v213;
  std::string::size_type v214;
  std::string::pointer v215;
  unint64_t v216;
  std::string::size_type v217;
  _QWORD *v218;
  _DWORD *v219;
  unint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  NSObject *v255;
  const char *v256;
  NSObject *v257;
  const char *v258;
  unint64_t v259;
  GryphonAnalysis *v260;
  GryphonAnalysis *v261;
  const void **v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  size_t v266;
  std::string *v267;
  const void *v268;
  char *v269;
  char v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  std::string *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  int *v285;
  int *v286;
  int v287;
  int v288;
  GryphonAnalysis *v289;
  int v290;
  int v291;
  unint64_t v292;
  unint64_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  __int128 v305;
  char *v306;
  int v307;
  _QWORD *v308;
  uint64_t v309;
  void **v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  NSObject *v328;
  const char *v329;
  std::string::size_type v330;
  uint64_t *v331;
  uint64_t v332;
  __int128 v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  __int128 v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  void *exception;
  std::string *v359;
  std::string *v360;
  std::string *v361;
  std::string *v362;
  std::string *v363;
  std::string *v364;
  std::string *v365;
  uint64_t *v366;
  std::string *v367;
  std::string *v368;
  std::string *v369;
  std::string *v370;
  std::string *v371;
  std::string *v372;
  std::string *v373;
  std::string *v374;
  std::string *v375;
  std::string *v376;
  std::string *v377;
  std::string *v378;
  std::string *v379;
  std::string *v380;
  std::string *v381[2];
  int *v382;
  std::string *v383;
  std::string *v384;
  int64x2_t *v385;
  std::string *v386;
  std::string *v387;
  std::string *v388;
  std::string *v389;
  const PhoneFeature *v390;
  int *i;
  _DWORD *v392;
  uint64_t *v393;
  const void **j;
  __int128 v395;
  std::string v396;
  void *__p[2];
  char *v398;
  __int128 __s;
  uint64_t v400;
  __int128 v401;
  const PhoneFeature **v402;
  std::__shared_weak_count *v403;
  std::string v404;
  std::string v405;
  std::string v406;
  std::string v407;
  std::string v408;
  std::string v409;
  std::string v410;
  std::string v411;
  std::string v412;
  std::string v413;
  std::string v414;
  std::string v415;
  std::string v416;
  std::string v417[2];
  std::string v418[2];
  std::string v419[2];
  __int128 v420;
  _OWORD v421[2];
  std::string v422[2];
  __int128 v423;
  _OWORD v424[2];
  std::string v425;
  std::string v426;
  std::string v427;
  std::string v428;
  std::string v429;
  std::string v430;
  std::string v431;
  std::string v432;
  std::string v433;
  std::string v434;
  std::string v435;
  std::string v436;
  std::string v437;
  std::string v438;
  std::string v439;
  std::string v440;
  std::string v441;
  std::string v442;
  std::string v443;
  std::string v444;
  std::string v445;
  std::string v446;
  std::string v447;
  std::string v448;
  std::string v449;
  std::string v450;
  std::string v451;
  std::string v452;
  std::string v453;
  std::string v454;
  std::string v455;
  std::string v456;
  std::string v457;
  std::string v458;
  std::string v459;
  std::string v460;
  std::string v461;
  std::string v462;
  std::string v463;
  std::string v464;
  std::string v465;
  std::string v466;
  std::string v467;
  std::string v468;
  std::string v469;
  std::string v470;
  std::string v471;
  std::string v472;
  std::string v473;
  std::string v474;
  std::string v475;
  std::string v476;
  std::string v477;
  std::string v478;
  std::string v479;
  std::string v480;
  std::string v481;
  std::string v482;
  std::string v483;
  std::string v484;
  std::string v485;
  std::string v486;
  std::string v487;
  std::string v488;
  std::string v489;
  std::string v490;
  std::string v491;
  std::string v492;
  std::string v493;
  std::string v494;
  std::string v495;
  std::string v496;
  std::string v497;
  std::string v498;
  std::string v499;
  std::string v500;
  std::string v501;
  std::string v502;
  std::string v503;
  std::string v504;
  std::string v505;
  std::string v506;
  std::string v507;
  std::string v508;
  std::string v509;
  std::string v510;
  std::string v511;
  std::string v512;
  std::string v513;
  std::string v514;
  std::string v515;
  std::string v516;
  std::string v517;
  std::string v518;
  std::string v519;
  std::string v520;
  std::string v521;
  std::string v522;
  std::string v523;
  std::string v524;
  std::string v525;
  std::string v526;
  std::string v527;
  std::string v528;
  std::string v529;
  std::string v530;
  std::string v531;
  std::string v532;
  std::string v533;
  std::string v534;
  std::string v535;
  std::string v536;
  std::string v537;
  std::string v538;
  std::string v539;
  std::string v540;
  std::string v541;
  std::string v542;
  uint64_t v543;
  std::string v544;
  uint64_t v545;

  v366 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v545 = *MEMORY[0x1E0C80C00];
  v4 = *(const PhoneFeature ***)(*(_QWORD *)v2 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)v2 + 16);
  v402 = v4;
  v403 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (const PhoneFeature **)operator new(0x48uLL);
  v8 = (std::string *)v7;
  v7[1] = 0;
  v7[2] = 0;
  *(_OWORD *)(v7 + 3) = 0u;
  v9 = (int64x2_t *)(v7 + 3);
  *v7 = (const PhoneFeature *)&off_1EA933E40;
  *(_OWORD *)(v7 + 5) = 0u;
  *(_OWORD *)(v7 + 7) = 0u;
  *(_QWORD *)&v401 = v7 + 3;
  *((_QWORD *)&v401 + 1) = v7;
  if (v7 != v4)
    std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>((uint64_t)(v7 + 6), (uint64_t *)v4[6], (uint64_t *)v4[7], 0x8E38E38E38E38E39 * ((v4[7] - v4[6]) >> 3));
  v389 = v8;
  v10 = *v4;
  v390 = v4[1];
  v385 = v9;
  if (*v4 != v390)
  {
    *(int32x4_t *)v381 = vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      PhoneFeature::PhoneFeature(&v404, v10);
      HIDWORD(v412.__r_.__value_.__r.__words[2]) = 0x7FFFFFFF;
      memset(&v413, 0, sizeof(v413));
      std::string::basic_string[abi:ne180100]<0>(&v414, "*");
      std::string::basic_string[abi:ne180100]<0>(&v415, "*");
      std::string::basic_string[abi:ne180100]<0>(&v416, "*");
      memset(v419, 0, sizeof(v419));
      memset(v418, 0, sizeof(v418));
      memset(v417, 0, sizeof(v417));
      v420 = *(_OWORD *)v381;
      v421[0] = *(_OWORD *)v381;
      v421[1] = 0u;
      memset(v422, 0, sizeof(v422));
      v423 = 0u;
      v424[0] = 0u;
      v424[1] = *(_OWORD *)v381;
      LODWORD(v425.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
      v11 = SHIDWORD(v405.__r_.__value_.__r.__words[0]) / 2;
      if (SHIDWORD(v405.__r_.__value_.__r.__words[0]) / 2 <= 5)
        v11 = 5;
      HIDWORD(v412.__r_.__value_.__r.__words[2]) = 1;
      HIDWORD(v405.__r_.__value_.__r.__words[0]) = v11;
      size = v389[1].__r_.__value_.__l.__size_;
      if (size >= v389[1].__r_.__value_.__r.__words[2])
      {
        v13 = (UnitFeature *)std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(v9, (const UnitFeature *)&v404);
        v14 = v389;
      }
      else
      {
        UnitFeature::UnitFeature((UnitFeature *)v389[1].__r_.__value_.__l.__size_, (const UnitFeature *)&v404);
        v13 = (UnitFeature *)(size + 608);
        v14 = v389;
        v389[1].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      }
      v14[1].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      HIDWORD(v412.__r_.__value_.__r.__words[2]) = 2;
      v16 = v407.__r_.__value_.__l.__size_;
      v15 = v407.__r_.__value_.__r.__words[0];
      if (v407.__r_.__value_.__l.__size_ != v407.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v16 - 25) < 0)
            operator delete(*(void **)(v16 - 48));
          v16 -= 56;
        }
        while (v16 != v15);
        v14 = v389;
        v13 = (UnitFeature *)v389[1].__r_.__value_.__l.__size_;
      }
      v407.__r_.__value_.__l.__size_ = v15;
      if ((unint64_t)v13 >= v14[1].__r_.__value_.__r.__words[2])
      {
        v9 = v385;
        v17 = std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(v385, (const UnitFeature *)&v404);
        v18 = v389;
      }
      else
      {
        UnitFeature::UnitFeature(v13, (const UnitFeature *)&v404);
        v9 = v385;
        v17 = (uint64_t)v13 + 608;
        v18 = v389;
        v389[1].__r_.__value_.__l.__size_ = (std::string::size_type)v13 + 608;
      }
      v18[1].__r_.__value_.__l.__size_ = v17;
      UnitFeature::~UnitFeature((UnitFeature *)&v404);
      v10 = (const PhoneFeature *)((char *)v10 + 216);
    }
    while (v10 != v390);
    v4 = v402;
  }
  v19 = (int *)v4[3];
  for (i = (int *)v4[4]; v19 != i; v19 += 34)
  {
    v20 = *v19;
    v21 = 2 * v20;
    v22 = v19[1] + v20;
    if (v21 < 2 * v22)
    {
      v23 = 2 * v22;
      v24 = 608 * v21 + 336;
      do
      {
        if (*(_BYTE *)(v9->i64[0] + v24 - 312))
        {
          std::string::basic_string[abi:ne180100]<0>(&v404, "*");
        }
        else if (*((char *)v19 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(&v404, *((const std::string::value_type **)v19 + 8), *((_QWORD *)v19 + 9));
        }
        else
        {
          v404 = *(std::string *)(v19 + 16);
        }
        v25 = v9->i64[0] + v24;
        v26 = v9;
        v27 = v25 - 96;
        if (*(char *)(v25 - 73) < 0)
          operator delete(*(void **)v27);
        v28 = *(_OWORD *)&v404.__r_.__value_.__l.__data_;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)&v404.__r_.__value_.__l + 2);
        *(_OWORD *)v27 = v28;
        std::string::operator=((std::string *)(v26->i64[0] + v24 - 24), (const std::string *)(v19 + 22));
        v9 = v26;
        std::string::operator=((std::string *)(v26->i64[0] + v24), (const std::string *)(v19 + 28));
        ++v21;
        v24 += 608;
      }
      while (v21 < v23);
    }
  }
  data = v389[1].__r_.__value_.__l.__data_;
  v29 = v389[1].__r_.__value_.__l.__size_;
  v31 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v29 - (_QWORD)data) >> 5);
  if ((std::string::pointer)v29 != data)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v29 = v389[1].__r_.__value_.__r.__words[0];
    do
    {
      v37 = *(_DWORD *)(v29 + 608 * v32 + 148);
      if (v36 == v37)
        goto LABEL_43;
      v38 = v32;
      while (v31 > ++v38)
      {
        if (*(_DWORD *)(v29 + 608 * v38 + 148) != v37)
        {
          v35 = v34;
          v34 = v33;
          v33 = v38;
          goto LABEL_43;
        }
      }
      v35 = v34;
      v34 = v33;
LABEL_43:
      std::string::operator=((std::string *)(v29 + 608 * v32 + 264), (const std::string *)(v29 + 608 * v35 + 240));
      std::string::operator=((std::string *)(v385->i64[0] + 608 * v32 + 288), (const std::string *)(v385->i64[0] + 608 * v33 + 240));
      v29 = v389[1].__r_.__value_.__r.__words[0];
      v39 = v389[1].__r_.__value_.__l.__size_;
      v36 = *(_DWORD *)(v29 + 608 * v32++ + 148);
      v31 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v39 - v29) >> 5);
      v9 = v385;
    }
    while (v32 < v31);
    if (!v31)
      goto LABEL_79;
    goto LABEL_47;
  }
  v39 = v389[1].__r_.__value_.__l.__size_;
  if (v31)
  {
LABEL_47:
    v40 = 0;
    while (1)
    {
      std::to_string(&v404, *(_DWORD *)(v9->i64[0] + 608 * v40 + 212));
      std::operator+<char>();
      memset(&v544, 0, sizeof(v544));
      __p[0] = &v544;
      LOBYTE(__p[1]) = 0;
      v41 = (char *)operator new(0x78uLL);
      v42 = 0;
      v544.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      v544.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      v544.__r_.__value_.__r.__words[2] = (std::string::size_type)(v41 + 120);
      do
      {
        v43 = &v41[v42];
        if (SHIBYTE(v400) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v41[v42], (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)v43 = __s;
          *((_QWORD *)v43 + 2) = v400;
        }
        v42 += 24;
      }
      while (v42 != 120);
      v544.__r_.__value_.__l.__size_ = (std::string::size_type)(v41 + 120);
      if (SHIBYTE(v400) < 0)
        operator delete((void *)__s);
      v9 = v385;
      if (v40 >= 4)
        break;
      if (v40 >= 2)
        goto LABEL_60;
LABEL_63:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v385->i64[0] + 608 * v40), (const void **)&v404.__r_.__value_.__l.__data_, (uint64_t)&__s);
      v47 = v544.__r_.__value_.__r.__words[0] + 48;
      if (*(char *)(v544.__r_.__value_.__r.__words[0] + 71) < 0)
        operator delete(*(void **)v47);
      *(_OWORD *)v47 = __s;
      *(_QWORD *)(v47 + 16) = v400;
      if (v40 + 2 < v31)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v385->i64[0] + 608 * (v40 + 2)), (const void **)&v404.__r_.__value_.__l.__data_, (uint64_t)&__s);
        v48 = v544.__r_.__value_.__r.__words[0] + 72;
        if (*(char *)(v544.__r_.__value_.__r.__words[0] + 95) < 0)
          operator delete(*(void **)v48);
        *(_OWORD *)v48 = __s;
        *(_QWORD *)(v48 + 16) = v400;
      }
      if (v40 + 4 < v31)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v385->i64[0] + 608 * (v40 + 4)), (const void **)&v404.__r_.__value_.__l.__data_, (uint64_t)&__s);
        v49 = v544.__r_.__value_.__r.__words[0] + 96;
        if (*(char *)(v544.__r_.__value_.__r.__words[0] + 119) < 0)
          operator delete(*(void **)v49);
        *(_OWORD *)v49 = __s;
        *(_QWORD *)(v49 + 16) = v400;
      }
      v50 = (std::vector<std::string> *)(v385->i64[0] + 608 * v40 + 216);
      if (v50 != (std::vector<std::string> *)&v544)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v50, (std::string *)v544.__r_.__value_.__l.__data_, (__int128 *)v544.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v544.__r_.__value_.__l.__size_ - v544.__r_.__value_.__r.__words[0]) >> 3));
      *(_QWORD *)&__s = &v544;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v404.__r_.__value_.__l.__data_);
      if (++v40 == v31)
      {
        v29 = v389[1].__r_.__value_.__r.__words[0];
        v39 = v389[1].__r_.__value_.__l.__size_;
        goto LABEL_79;
      }
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v385->i64[0] + 608 * v40 - 2432), (const void **)&v404.__r_.__value_.__l.__data_, (uint64_t)&__s);
    v44 = v544.__r_.__value_.__r.__words[0];
    if (*(char *)(v544.__r_.__value_.__r.__words[0] + 23) < 0)
      operator delete(*(void **)v544.__r_.__value_.__l.__data_);
    v45 = __s;
    *(_QWORD *)(v44 + 16) = v400;
    *(_OWORD *)v44 = v45;
LABEL_60:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v385->i64[0] + 608 * v40 - 1216), (const void **)&v404.__r_.__value_.__l.__data_, (uint64_t)&__s);
    v46 = v544.__r_.__value_.__r.__words[0] + 24;
    if (*(char *)(v544.__r_.__value_.__r.__words[0] + 47) < 0)
      operator delete(*(void **)v46);
    *(_OWORD *)v46 = __s;
    *(_QWORD *)(v46 + 16) = v400;
    goto LABEL_63;
  }
LABEL_79:
  v51 = std::vector<std::vector<float>>::vector(&__s, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v39 - v29) >> 5));
  v52 = v366[34];
  v53 = v389;
  if (v52 || v366[36])
  {
    v54 = v389[1].__r_.__value_.__l.__data_;
    if ((std::string::pointer)v389[1].__r_.__value_.__l.__size_ != v54)
    {
      v55 = 0;
      while (1)
      {
        v373 = v55;
        v56 = (uint64_t *)v366[38];
        v398 = 0;
        __p[1] = 0;
        __p[0] = 0;
        v57 = *(_DWORD **)*v56;
        v392 = *(_DWORD **)(*v56 + 8);
        if (v57 != v392)
          break;
LABEL_315:
        v150 = __s;
        v151 = __s + 24 * (_QWORD)v373;
        v51 = *(_QWORD **)v151;
        if (*(_QWORD *)v151)
        {
          *(_QWORD *)(__s + 24 * (_QWORD)v373 + 8) = v51;
          operator delete(v51);
          *(_QWORD *)v151 = 0;
          *(_QWORD *)(v151 + 8) = 0;
          *(_QWORD *)(v151 + 16) = 0;
        }
        *(_OWORD *)v151 = *(_OWORD *)__p;
        *(_QWORD *)(v150 + 24 * (_QWORD)v373 + 16) = v398;
        v55 = (std::string *)((char *)&v373->__r_.__value_.__l.__data_ + 1);
        v53 = v389;
        v54 = v389[1].__r_.__value_.__l.__data_;
        if ((unint64_t)v373->__r_.__value_.__r.__words + 1 >= 0x86BCA1AF286BCA1BLL
                                                                    * ((uint64_t)(v389[1].__r_.__value_.__l.__size_
                                                                               - (_QWORD)v54) >> 5))
        {
          v52 = v366[34];
          goto LABEL_319;
        }
      }
      v58 = &v54[608 * (_QWORD)v55];
      v375 = (std::string *)(v58 + 264);
      v374 = (std::string *)(v58 + 288);
      v365 = (std::string *)(v58 + 240);
      v359 = (std::string *)(v58 + 64);
      v372 = (std::string *)(v58 + 60);
      v370 = (std::string *)(v58 + 56);
      v376 = (std::string *)(v58 + 52);
      v364 = (std::string *)(v58 + 192);
      v371 = (std::string *)(v58 + 188);
      v383 = (std::string *)(v58 + 184);
      v382 = (int *)(v58 + 180);
      v360 = (std::string *)(v58 + 172);
      v363 = (std::string *)(v58 + 168);
      v369 = (std::string *)(v58 + 164);
      v367 = (std::string *)(v58 + 160);
      v380 = (std::string *)(v58 + 156);
      v379 = (std::string *)(v58 + 176);
      v378 = (std::string *)(v58 + 48);
      v377 = (std::string *)(v58 + 152);
      v368 = (std::string *)(v58 + 212);
      v362 = (std::string *)(v58 + 216);
      v361 = (std::string *)(v58 + 224);
      v387 = (std::string *)v56;
      while (1)
      {
        v59 = *((unsigned __int8 *)v57 + 23);
        if ((*((char *)v57 + 23) & 0x80000000) == 0)
        {
          v60 = v57;
          switch(*((_BYTE *)v57 + 23))
          {
            case 2:
              v61 = (int *)v379;
              if (*(_WORD *)v57 == 30563)
                goto LABEL_225;
              v61 = (int *)v369;
              if (*(_WORD *)v57 == 26995)
                goto LABEL_225;
              v61 = (int *)v363;
              if (*(_WORD *)v57 == 28019)
                goto LABEL_225;
              v62 = *(unsigned __int16 *)v57;
              v61 = (int *)v360;
              v63 = 26227;
              goto LABEL_120;
            case 3:
              v69 = *(_WORD *)v57 == 25207 && *((_BYTE *)v57 + 2) == 105;
              v61 = (int *)v380;
              if (!v69)
              {
                v70 = *(_WORD *)v57 == 25207 && *((_BYTE *)v57 + 2) == 102;
                v61 = (int *)v367;
                if (!v70)
                  goto LABEL_113;
              }
              goto LABEL_225;
            case 4:
              v61 = (int *)v378;
              if (*v57 != 1836020336)
                goto LABEL_119;
              goto LABEL_225;
            case 5:
              v74 = *v57 == 1953391987 && *((_BYTE *)v57 + 4) == 105;
              v61 = v382;
              if (!v74)
                goto LABEL_131;
              goto LABEL_225;
            case 6:
              v73 = *v57 == 1701999731 && *((_WORD *)v57 + 2) == 29555;
              v61 = (int *)v377;
              if (!v73)
                goto LABEL_587;
              goto LABEL_225;
            case 7:
              if (*v57 == 1953394531 && *(_DWORD *)((char *)v57 + 3) == 1954047348)
                goto LABEL_246;
              v68 = *v57 == 1952543859 && *(_DWORD *)((char *)v57 + 3) == 1684628852;
              v61 = (int *)v368;
              if (!v68)
                goto LABEL_587;
              goto LABEL_225;
            case 8:
              goto LABEL_203;
            case 0xC:
              goto LABEL_306;
            case 0xD:
              goto LABEL_220;
            default:
              goto LABEL_587;
          }
        }
        switch(*((_QWORD *)v57 + 1))
        {
          case 2:
            v61 = (int *)v379;
            if (**(_WORD **)v57 == 30563)
              goto LABEL_225;
            v64 = *(_WORD **)v57;
            v61 = (int *)v369;
            if (**(_WORD **)v57 == 26995)
              goto LABEL_225;
            v61 = (int *)v363;
            if (*v64 == 28019)
              goto LABEL_225;
            v65 = (unsigned __int16)*v64;
            v61 = (int *)v360;
            v66 = 26227;
LABEL_150:
            if (v65 == v66)
              goto LABEL_225;
            goto LABEL_176;
          case 3:
            v79 = *(unsigned __int16 **)v57;
            v80 = **(_WORD **)v57 == 25207 && *(_BYTE *)(*(_QWORD *)v57 + 2) == 105;
            v61 = (int *)v380;
            if (!v80)
            {
              v81 = *v79;
              v82 = *((unsigned __int8 *)v79 + 2);
              v83 = v81 == 25207 && v82 == 102;
              v61 = (int *)v367;
              if (!v83)
                goto LABEL_176;
            }
            goto LABEL_225;
          case 4:
            v65 = **(_DWORD **)v57;
            v61 = (int *)v378;
            v66 = 1836020336;
            goto LABEL_150;
          case 5:
            v78 = **(_DWORD **)v57 == 1953391987 && *(_BYTE *)(*(_QWORD *)v57 + 4) == 105;
            v61 = v382;
            if (v78)
              goto LABEL_225;
            if ((v59 & 0x80) != 0)
              goto LABEL_176;
            v60 = v57;
            switch(*((_BYTE *)v57 + 23))
            {
              case 3:
                goto LABEL_113;
              case 4:
LABEL_119:
                v62 = *v57;
                v61 = (int *)v372;
                v63 = 1701736308;
LABEL_120:
                if (v62 != v63)
                  goto LABEL_587;
                goto LABEL_225;
              case 5:
LABEL_131:
                v75 = *v57 == 1953391987 && *((_BYTE *)v57 + 4) == 102;
                v61 = (int *)v383;
                if (v75)
                  goto LABEL_225;
                if ((v59 & 0x80) == 0)
                {
                  v60 = v57;
                  switch(*((_BYTE *)v57 + 23))
                  {
                    case 3:
                      goto LABEL_113;
                    case 4:
                      goto LABEL_119;
                    case 5:
                      v76 = *v57 == 1936877680 && *((_BYTE *)v57 + 4) == 105;
                      v61 = (int *)v371;
                      if (!v76)
                        goto LABEL_188;
                      goto LABEL_225;
                    case 8:
                      goto LABEL_203;
                    case 0xC:
                      goto LABEL_306;
                    case 0xD:
                      goto LABEL_220;
                    default:
                      goto LABEL_587;
                  }
                }
                goto LABEL_181;
              case 8:
LABEL_203:
                v61 = (int *)v376;
                if (*(_QWORD *)v57 == 0x65707974746E6573)
                  goto LABEL_225;
LABEL_204:
                v61 = (int *)v370;
                if (*(_QWORD *)v57 == 0x656E6F7476657270)
                  goto LABEL_225;
                if ((v59 & 0x80) == 0)
                {
LABEL_206:
                  v60 = v57;
                  switch(*((_BYTE *)v57 + 23))
                  {
                    case 3:
                      goto LABEL_113;
                    case 4:
                      goto LABEL_119;
                    case 8:
                      v61 = (int *)v359;
                      if (*(_QWORD *)v57 != 0x656E6F747478656ELL)
                        goto LABEL_587;
                      goto LABEL_225;
                    case 0xC:
                      goto LABEL_306;
                    case 0xD:
                      goto LABEL_220;
                    default:
                      goto LABEL_587;
                  }
                }
                break;
              case 0xC:
                goto LABEL_306;
              case 0xD:
                goto LABEL_220;
              default:
                goto LABEL_587;
            }
            goto LABEL_211;
          case 6:
            v77 = **(_DWORD **)v57 == 1701999731 && *(_WORD *)(*(_QWORD *)v57 + 4) == 29555;
            v61 = (int *)v377;
            if (!v77)
              goto LABEL_176;
            goto LABEL_225;
          case 7:
            v84 = *(int **)v57;
            if (**(_DWORD **)v57 == 1953394531 && *(_DWORD *)(*(_QWORD *)v57 + 3) == 1954047348)
            {
LABEL_246:
              v108 = v362->__r_.__value_.__r.__words[0];
              v109 = v361->__r_.__value_.__r.__words[0];
              while (v108 != v109)
              {
                if (*(char *)(v108 + 23) < 0)
                  v110 = *(_QWORD *)(v108 + 8);
                else
                  v110 = *(unsigned __int8 *)(v108 + 23);
                v111 = (_QWORD *)*v56;
                std::string::basic_string(&v544, (const std::string *)v108, 0, v110 - 1, (std::allocator<char> *)&v404);
                std::string::basic_string[abi:ne180100]<0>(&v404, "name");
                feature_encoding = (int **)FeatureBook::get_feature_encoding((uint64_t)v111, (uint64_t)&v404, (uint64_t)&v544);
                if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v404.__r_.__value_.__l.__data_);
                if (SHIBYTE(v544.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v544.__r_.__value_.__l.__data_);
                v114 = *feature_encoding;
                v113 = feature_encoding[1];
                v115 = (char *)v113 - (char *)*feature_encoding;
                if (v115 >= 1)
                {
                  v116 = v115 >> 2;
                  v117 = (float *)__p[1];
                  if (v115 >> 2 <= (v398 - (char *)__p[1]) >> 2)
                  {
                    if (v116 <= 0)
                    {
                      v127 = &v114[v116];
                      v128 = (float *)__p[1];
                      v139 = (float *)((char *)__p[1] - 4 * v116);
                      v140 = __p[1];
                      while (v139 < v117)
                      {
                        v141 = *(_DWORD *)v139++;
                        *v140++ = v141;
                      }
                      v142 = &v117[v116];
                      __p[1] = v140;
                      if (v128 != v142)
                        memmove(&v128[-(v128 - v142)], v117, (char *)v128 - (char *)v142);
                      for (; v114 != v127; ++v117)
                      {
                        v143 = *v114++;
                        *v117 = (float)v143;
                      }
                    }
                    else
                    {
                      if (*feature_encoding == v113)
                      {
                        v125 = (float *)__p[1];
                      }
                      else
                      {
                        v124 = *feature_encoding;
                        v125 = (float *)__p[1];
                        do
                        {
                          v126 = *v124++;
                          *v125++ = (float)v126;
                        }
                        while (v124 != v113);
                      }
                      __p[1] = v125;
                    }
                  }
                  else
                  {
                    v118 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                    if ((unint64_t)(v118 + v116) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v119 = (v398 - (char *)__p[0]) >> 1;
                    if (v119 <= v118 + v116)
                      v119 = v118 + v116;
                    if ((unint64_t)(v398 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFFCLL)
                      v120 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v120 = v119;
                    if (v120)
                    {
                      v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v398, v120);
                      v123 = v122;
                    }
                    else
                    {
                      v121 = 0;
                      v123 = 0;
                    }
                    v129 = (float *)&v121[4 * v118];
                    v130 = &v129[v116];
                    v131 = 4 * v116;
                    v132 = v129;
                    do
                    {
                      v133 = *v114++;
                      *v132++ = (float)v133;
                      v131 -= 4;
                    }
                    while (v131);
                    v134 = (float *)__p[0];
                    if (__p[0] != v117)
                    {
                      v135 = v117;
                      do
                      {
                        v136 = *((_DWORD *)v135-- - 1);
                        *((_DWORD *)v129-- - 1) = v136;
                      }
                      while (v135 != v134);
                    }
                    v137 = (char *)((char *)__p[1] - (char *)v117);
                    if (__p[1] != v117)
                      memmove(v130, v117, (char *)__p[1] - (char *)v117);
                    v138 = __p[0];
                    __p[0] = v129;
                    __p[1] = &v137[(_QWORD)v130];
                    v398 = &v121[4 * v123];
                    v56 = (uint64_t *)v387;
                    if (v138)
                      operator delete(v138);
                  }
                }
                v108 += 24;
              }
              goto LABEL_314;
            }
            v86 = *v84;
            v87 = *(int *)((char *)v84 + 3);
            v88 = v86 == 1952543859 && v87 == 1684628852;
            v61 = (int *)v368;
            if (v88)
              goto LABEL_225;
LABEL_176:
            if (*((_QWORD *)v57 + 1) == 5)
            {
              v89 = **(_DWORD **)v57 == 1953391987 && *(_BYTE *)(*(_QWORD *)v57 + 4) == 102;
              v61 = (int *)v383;
              if (v89)
                goto LABEL_225;
            }
LABEL_181:
            if (*((_QWORD *)v57 + 1) != 5)
              goto LABEL_194;
            v90 = **(_DWORD **)v57 == 1936877680 && *(_BYTE *)(*(_QWORD *)v57 + 4) == 105;
            v61 = (int *)v371;
            if (v90)
              goto LABEL_225;
            if ((v59 & 0x80) == 0)
            {
              v60 = v57;
              switch(*((_BYTE *)v57 + 23))
              {
                case 3:
                  goto LABEL_113;
                case 4:
                  goto LABEL_119;
                case 5:
LABEL_188:
                  v91 = *v57 == 1936877680 && *((_BYTE *)v57 + 4) == 102;
                  v61 = (int *)v364;
                  if (v91)
                    goto LABEL_225;
                  if ((v59 & 0x80) != 0)
                    goto LABEL_199;
                  goto LABEL_206;
                case 8:
                  goto LABEL_203;
                case 0xC:
                  goto LABEL_306;
                case 0xD:
                  goto LABEL_220;
                default:
                  goto LABEL_587;
              }
            }
LABEL_194:
            if (*((_QWORD *)v57 + 1) == 5)
            {
              v92 = **(_DWORD **)v57 == 1936877680 && *(_BYTE *)(*(_QWORD *)v57 + 4) == 102;
              v61 = (int *)v364;
              if (v92)
                goto LABEL_225;
            }
LABEL_199:
            if (*((_QWORD *)v57 + 1) != 8)
              goto LABEL_209;
            v61 = (int *)v376;
            if (**(_QWORD **)v57 == 0x65707974746E6573)
              goto LABEL_225;
            if ((v59 & 0x80) == 0)
            {
              v60 = v57;
              switch(*((_BYTE *)v57 + 23))
              {
                case 3:
                  goto LABEL_113;
                case 4:
                  goto LABEL_119;
                case 8:
                  goto LABEL_204;
                case 0xC:
                  goto LABEL_306;
                case 0xD:
                  goto LABEL_220;
                default:
                  goto LABEL_587;
              }
            }
LABEL_209:
            if (*((_QWORD *)v57 + 1) == 8)
            {
              v61 = (int *)v370;
              if (**(_QWORD **)v57 == 0x656E6F7476657270)
                goto LABEL_225;
            }
LABEL_211:
            if (*((_QWORD *)v57 + 1) != 4)
              goto LABEL_214;
            v61 = (int *)v372;
            if (**(_DWORD **)v57 == 1701736308)
              goto LABEL_225;
            if ((v59 & 0x80) == 0)
              goto LABEL_217;
LABEL_214:
            if (*((_QWORD *)v57 + 1) != 8)
              goto LABEL_290;
            v61 = (int *)v359;
            if (**(_QWORD **)v57 != 0x656E6F747478656ELL)
            {
              if ((v59 & 0x80) == 0)
              {
LABEL_217:
                if (v59 == 3)
                {
LABEL_113:
                  v71 = *(_WORD *)v57 == 28528 && *((_BYTE *)v57 + 2) == 115;
                  v72 = (uint64_t)v365;
                  if (!v71)
                    goto LABEL_587;
                }
                else
                {
                  v60 = v57;
                  if (v59 != 12)
                  {
                    if (v59 != 13)
                      goto LABEL_587;
LABEL_220:
                    v93 = *(_QWORD *)v57 == 0x72775F7468676972 && *(_QWORD *)((char *)v57 + 5) == 0x736F705F6472775FLL;
                    v72 = (uint64_t)v374;
                    if (!v93)
                    {
LABEL_587:
                      exception = __cxa_allocate_exception(0x10uLL);
                      if (*((char *)v57 + 23) < 0)
                        v57 = *(_DWORD **)v57;
                      StringFormatter::StringFormatter((StringFormatter *)&v404, "Feature '%s' is not supported.", (const char *)v57);
                      MEMORY[0x1DF0EC99C](exception, &v404);
                      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
                    }
                    goto LABEL_311;
                  }
LABEL_306:
                  v146 = *(_QWORD *)v60;
                  v147 = v60[2];
                  v148 = v146 == 0x6472775F7466656CLL && v147 == 1936683103;
                  v72 = (uint64_t)v375;
                  if (!v148)
                    goto LABEL_587;
                }
LABEL_311:
                v149 = FeatureBook::get_feature_encoding(*v56, (uint64_t)v57, v72);
                memset(&v404, 0, sizeof(v404));
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v404, *(const void **)v149, *(_QWORD *)(v149 + 8), (uint64_t)(*(_QWORD *)(v149 + 8) - *(_QWORD *)v149) >> 2);
                std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((uint64_t)__p, (char *)__p[1], (int *)v404.__r_.__value_.__l.__data_, (int *)v404.__r_.__value_.__l.__size_, (uint64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) >> 2);
                goto LABEL_312;
              }
LABEL_290:
              if (*((_QWORD *)v57 + 1) == 3)
              {
                v144 = **(_WORD **)v57 == 28528 && *(_BYTE *)(*(_QWORD *)v57 + 2) == 115;
                v72 = (uint64_t)v365;
                if (v144)
                  goto LABEL_311;
                if ((v59 & 0x80) == 0)
                  goto LABEL_587;
              }
              if (*((_QWORD *)v57 + 1) == 13)
              {
                v145 = **(_QWORD **)v57 == 0x72775F7468676972
                    && *(_QWORD *)(*(_QWORD *)v57 + 5) == 0x736F705F6472775FLL;
                v72 = (uint64_t)v374;
                if (v145)
                  goto LABEL_311;
                if ((v59 & 0x80) == 0)
                {
                  v60 = v57;
                  if (v59 != 12)
                    goto LABEL_587;
                  goto LABEL_306;
                }
              }
              if (*((_QWORD *)v57 + 1) != 12)
                goto LABEL_587;
              v60 = *(_DWORD **)v57;
              goto LABEL_306;
            }
LABEL_225:
            v94 = *v61;
            v95 = *v56;
            if (v95 + 32 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*v56 + 24, (const void **)v57))
            {
              v97 = (float)v94;
              v98 = (char *)__p[1];
              if (__p[1] >= v398)
              {
                v100 = (char *)__p[0];
                v101 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v103 = v398 - (char *)__p[0];
                if ((v398 - (char *)__p[0]) >> 1 > v102)
                  v102 = v103 >> 1;
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                  v104 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v104 = v102;
                if (v104)
                {
                  v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v398, v104);
                  v98 = (char *)__p[1];
                  v100 = (char *)__p[0];
                }
                else
                {
                  v105 = 0;
                }
                v106 = (float *)&v105[4 * v101];
                *v106 = v97;
                v99 = v106 + 1;
                while (v98 != v100)
                {
                  v107 = *((_DWORD *)v98 - 1);
                  v98 -= 4;
                  *((_DWORD *)v106-- - 1) = v107;
                }
                __p[0] = v106;
                __p[1] = v99;
                v398 = &v105[4 * v104];
                if (v100)
                  operator delete(v100);
              }
              else
              {
                *(float *)__p[1] = v97;
                v99 = v98 + 4;
              }
              __p[1] = v99;
              goto LABEL_314;
            }
            std::to_string(&v544, v94);
            v96 = FeatureBook::get_feature_encoding(v95, (uint64_t)v57, (uint64_t)&v544);
            memset(&v404, 0, sizeof(v404));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v404, *(const void **)v96, *(_QWORD *)(v96 + 8), (uint64_t)(*(_QWORD *)(v96 + 8) - *(_QWORD *)v96) >> 2);
            if (SHIBYTE(v544.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v544.__r_.__value_.__l.__data_);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((uint64_t)__p, (char *)__p[1], (int *)v404.__r_.__value_.__l.__data_, (int *)v404.__r_.__value_.__l.__size_, (uint64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) >> 2);
LABEL_312:
            if (v404.__r_.__value_.__r.__words[0])
            {
              v404.__r_.__value_.__l.__size_ = v404.__r_.__value_.__r.__words[0];
              operator delete(v404.__r_.__value_.__l.__data_);
            }
LABEL_314:
            v57 += 6;
            if (v57 == v392)
              goto LABEL_315;
            break;
          default:
            goto LABEL_176;
        }
      }
    }
LABEL_319:
    if (v52)
    {
      memset(&v404, 0, sizeof(v404));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v404, __s, *((uint64_t *)&__s + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__s + 1) - __s) >> 3));
      NNetExtractor::compute_output(v366[34], (const float ***)&v404);
      v152 = (uint64_t *)v385;
      v153 = v404.__r_.__value_.__r.__words[0];
      if (v404.__r_.__value_.__l.__size_ != v404.__r_.__value_.__r.__words[0])
      {
        v154 = 0;
        do
        {
          v155 = (int *)v366[40];
          v156 = *v152;
          v157 = v155[2];
          v393 = (uint64_t *)(*v152 + 608 * v154 + 360);
          std::vector<float>::resize((uint64_t)v393, v157);
          v388 = (std::string *)(v156 + 608 * v154 + 408);
          std::vector<float>::resize((uint64_t)v388, v157);
          v386 = (std::string *)(v156 + 608 * v154 + 488);
          std::vector<float>::resize((uint64_t)v386, v157);
          v384 = (std::string *)(v156 + 608 * v154 + 536);
          std::vector<float>::resize((uint64_t)v384, v157);
          std::vector<float>::resize(v156 + 608 * v154 + 384, v157);
          std::vector<float>::resize(v156 + 608 * v154 + 432, v157);
          std::vector<float>::resize(v156 + 608 * v154 + 512, v157);
          std::vector<float>::resize(v156 + 608 * v154 + 560, v157);
          v158 = *(_QWORD *)(v153 + 24 * v154);
          v159 = (unint64_t)(*(_QWORD *)(v153 + 24 * v154 + 8) - v158) >> 3;
          if ((int)v157 >= 1)
          {
            v160 = 0;
            v162 = v155[3];
            v161 = v155[4];
            v163 = v158 + 4 * ((int)v161 + (int)v157 + (int)v159);
            v164 = 4 * v157;
            v165 = v158 + 4 * ((int)v161 + (int)v157);
            v166 = *v393;
            v167 = v158 + 4 * ((int)v161 + (int)v159);
            v168 = *(_QWORD *)(v156 + 608 * v154 + 384);
            v169 = v388->__r_.__value_.__r.__words[0];
            v170 = *(_QWORD *)(v156 + 608 * v154 + 432);
            v171 = v386->__r_.__value_.__r.__words[0];
            v172 = *(_QWORD *)(v156 + 608 * v154 + 512);
            v173 = v384->__r_.__value_.__r.__words[0];
            v174 = v158 + 4 * v161;
            v175 = *(_QWORD *)(v156 + 608 * v154 + 560);
            v176 = v158 + 4 * ((int)v162 + (int)v157 + (int)v159);
            v177 = v158 + 4 * ((int)v162 + (int)v157);
            v178 = v158 + 4 * ((int)v162 + (int)v159);
            v179 = v158 + 4 * v162;
            v152 = (uint64_t *)v385;
            do
            {
              *(_DWORD *)(v166 + v160) = *(_DWORD *)(v179 + v160);
              *(_DWORD *)(v168 + v160) = *(_DWORD *)(v178 + v160);
              *(_DWORD *)(v169 + v160) = *(_DWORD *)(v177 + v160);
              *(_DWORD *)(v170 + v160) = *(_DWORD *)(v176 + v160);
              *(_DWORD *)(v171 + v160) = *(_DWORD *)(v174 + v160);
              *(_DWORD *)(v172 + v160) = *(_DWORD *)(v167 + v160);
              *(_DWORD *)(v173 + v160) = *(_DWORD *)(v165 + v160);
              *(_DWORD *)(v175 + v160) = *(_DWORD *)(v163 + v160);
              v160 += 4;
            }
            while (v164 != v160);
          }
          v180 = v155[5];
          v181 = v155[6];
          v182 = v180 + 1;
          v183 = *(_DWORD *)(v158 + 4 * ((int)v180 + (int)v159));
          v184 = v155[7];
          v185 = (_DWORD *)(v156 + 608 * v154);
          v185[114] = *(_DWORD *)(v158 + 4 * v180);
          v185[115] = v183;
          v186 = *(_DWORD *)(v158 + 4 * ((int)v180 + 1));
          LODWORD(v180) = v180 + 2;
          v187 = *(_DWORD *)(v158 + 4 * (v182 + (int)v159));
          v185[116] = v186;
          v185[117] = v187;
          v188 = *(_DWORD *)(v158 + 4 * ((int)v180 + (int)v159));
          v185[118] = *(_DWORD *)(v158 + 4 * (int)v180);
          v185[119] = v188;
          v189 = *(_DWORD *)(v158 + 4 * ((int)v181 + (int)v159));
          v185[146] = *(_DWORD *)(v158 + 4 * v181);
          v185[147] = v189;
          v190 = *(_DWORD *)(v158 + 4 * ((int)v181 + 1 + (int)v159));
          v185[148] = *(_DWORD *)(v158 + 4 * ((int)v181 + 1));
          v185[149] = v190;
          v191 = *(_DWORD *)(v158 + 4 * ((int)v184 + (int)v159));
          v185[120] = *(_DWORD *)(v158 + 4 * v184);
          v185[121] = v191;
          ++v154;
          v153 = v404.__r_.__value_.__r.__words[0];
        }
        while (v154 < 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) >> 3));
      }
      v544.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v544);
      v53 = v389;
    }
  }
  if (v366[36])
  {
    memset(&v404, 0, sizeof(v404));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v404, __s, *((uint64_t *)&__s + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__s + 1) - __s) >> 3));
    NNetExtractor::compute_output(v366[36], (const float ***)&v404);
    if (v404.__r_.__value_.__l.__size_ != v404.__r_.__value_.__r.__words[0])
    {
      v192 = v366[42];
      v193 = *(int *)(v192 + 20);
      v194 = *(int *)(v192 + 24);
      v195 = v194 + 1;
      v196 = (int)v193 + 1;
      v197 = (int)v193 + 2;
      v198 = (int64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) / 24;
      if (v198 <= 1)
        v198 = 1;
      v199 = (_QWORD *)(v404.__r_.__value_.__r.__words[0] + 8);
      v200 = (_DWORD *)(v385->i64[0] + 456);
      do
      {
        v201 = *(v199 - 1);
        v202 = (unint64_t)(*v199 - v201) >> 3;
        v203 = *(_DWORD *)(v201 + 4 * ((int)v193 + (int)v202));
        *v200 = *(_DWORD *)(v201 + 4 * v193);
        v200[1] = v203;
        v204 = *(_DWORD *)(v201 + 4 * ((int)v196 + (int)v202));
        v200[2] = *(_DWORD *)(v201 + 4 * v196);
        v200[3] = v204;
        v205 = *(_DWORD *)(v201 + 4 * ((int)v197 + (int)v202));
        v200[4] = *(_DWORD *)(v201 + 4 * v197);
        v200[5] = v205;
        v206 = *(_DWORD *)(v201 + 4 * ((int)v194 + (int)v202));
        v200[32] = *(_DWORD *)(v201 + 4 * v194);
        v200[33] = v206;
        v207 = *(_DWORD *)(v201 + 4 * ((int)v195 + (int)v202));
        v200[34] = *(_DWORD *)(v201 + 4 * v195);
        v200[35] = v207;
        v199 += 3;
        v200 += 152;
        --v198;
      }
      while (v198);
    }
    v544.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v544);
  }
  copycat_overrides = (uint64_t *)GryphonDebugging::get_copycat_overrides((GryphonDebugging *)v51);
  memset(&v404, 0, sizeof(v404));
  v209 = (GryphonDebugging *)std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v404, *copycat_overrides, copycat_overrides[1], 0xAAAAAAAAAAAAAAABLL * ((copycat_overrides[1] - *copycat_overrides) >> 3));
  if (v404.__r_.__value_.__r.__words[0] != v404.__r_.__value_.__l.__size_)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) >> 3) == 0x86BCA1AF286BCA1BLL * ((uint64_t)(v53[1].__r_.__value_.__l.__size_ - v53[1].__r_.__value_.__r.__words[0]) >> 5))
    {
      v210 = GryphonDebugging::get_copycat_overrides(v209);
      memset(&v544, 0, sizeof(v544));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v544, *(__int128 **)(v210 + 24), *(__int128 **)(v210 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v210 + 32) - *(_QWORD *)(v210 + 24)) >> 3));
      v211 = v544.__r_.__value_.__r.__words[0];
      if (v544.__r_.__value_.__l.__size_ != v544.__r_.__value_.__r.__words[0])
      {
        v212 = 0;
        v213 = (int64_t)(v544.__r_.__value_.__l.__size_ - v544.__r_.__value_.__r.__words[0]) / 24;
        v215 = v389[1].__r_.__value_.__l.__data_;
        v214 = v389[1].__r_.__value_.__l.__size_;
        v216 = (uint64_t)(v214 - (_QWORD)v215) / 608;
        if (v216 <= 1)
          v216 = 1;
        if (v213 <= 1)
          v213 = 1;
        while ((std::string::pointer)v214 == v215)
        {
LABEL_432:
          if (++v212 == v213)
            goto LABEL_433;
        }
        v217 = v211 + 24 * v212;
        v218 = (_QWORD *)v404.__r_.__value_.__r.__words[0];
        v219 = v215 + 484;
        v220 = v216;
        while (1)
        {
          v221 = *(unsigned __int8 *)(v217 + 23);
          if (*(char *)(v217 + 23) < 0)
          {
            v223 = *(_QWORD *)(v217 + 8);
            if (v223 != 13)
              goto LABEL_357;
            v222 = *(uint64_t **)v217;
          }
          else
          {
            v222 = (uint64_t *)(v211 + 24 * v212);
            if (v221 != 13)
              goto LABEL_353;
          }
          v224 = *v222;
          v225 = *(uint64_t *)((char *)v222 + 5);
          if (v224 == 0x6E6F697461727564 && v225 == 0x6E61656D5F6E6F69)
          {
            *(v219 - 1) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_353:
              if (v221 != 12)
                goto LABEL_364;
              v227 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_359;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_353;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_357:
          if (v223 != 12)
            goto LABEL_368;
          v227 = *(uint64_t **)v217;
LABEL_359:
          v228 = *v227;
          v229 = *((unsigned int *)v227 + 2);
          if (v228 == 0x6E6F697461727564 && v229 == 1918989919)
          {
            *v219 = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_364:
              if (v221 != 13)
                goto LABEL_375;
              v231 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_370;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_364;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_368:
          if (v223 != 13)
            goto LABEL_379;
          v231 = *(uint64_t **)v217;
LABEL_370:
          v232 = *v231;
          v233 = *(uint64_t *)((char *)v231 + 5);
          if (v232 == 0x6E696765625F3066 && v233 == 0x6E61656D5F6E6967)
          {
            *(v219 - 7) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_375:
              if (v221 != 12)
                goto LABEL_386;
              v235 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_381;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_375;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_379:
          if (v223 != 12)
            goto LABEL_390;
          v235 = *(uint64_t **)v217;
LABEL_381:
          v236 = *v235;
          v237 = *((unsigned int *)v235 + 2);
          if (v236 == 0x6E696765625F3066 && v237 == 1918989919)
          {
            *(v219 - 6) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_386:
              if (v221 != 14)
                goto LABEL_397;
              v239 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_392;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_386;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_390:
          if (v223 != 14)
            goto LABEL_401;
          v239 = *(uint64_t **)v217;
LABEL_392:
          v240 = *v239;
          v241 = *(uint64_t *)((char *)v239 + 6);
          if (v240 == 0x6C6464696D5F3066 && v241 == 0x6E61656D5F656C64)
          {
            *(v219 - 5) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_397:
              if (v221 != 13)
                goto LABEL_408;
              v243 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_403;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_397;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_401:
          if (v223 != 13)
            goto LABEL_412;
          v243 = *(uint64_t **)v217;
LABEL_403:
          v244 = *v243;
          v245 = *(uint64_t *)((char *)v243 + 5);
          if (v244 == 0x6C6464696D5F3066 && v245 == 0x7261765F656C6464)
          {
            *(v219 - 4) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_408:
              if (v221 != 11)
                goto LABEL_419;
              v247 = (uint64_t *)(v211 + 24 * v212);
              goto LABEL_414;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_408;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_412:
          if (v223 != 11)
            goto LABEL_423;
          v247 = *(uint64_t **)v217;
LABEL_414:
          v248 = *v247;
          v249 = *(uint64_t *)((char *)v247 + 3);
          if (v248 == 0x6D5F646E655F3066 && v249 == 0x6E61656D5F646E65)
          {
            *(v219 - 3) = *(_DWORD *)(*v218 + 4 * v212);
            v221 = *(unsigned __int8 *)(v217 + 23);
            if ((v221 & 0x80) == 0)
            {
LABEL_419:
              v251 = (uint64_t *)(v211 + 24 * v212);
              if (v221 == 10)
                goto LABEL_425;
              goto LABEL_431;
            }
          }
          else if ((v221 & 0x80) == 0)
          {
            goto LABEL_419;
          }
          v223 = *(_QWORD *)(v217 + 8);
LABEL_423:
          if (v223 == 10)
          {
            v251 = *(uint64_t **)v217;
LABEL_425:
            v252 = *v251;
            v253 = *((unsigned __int16 *)v251 + 4);
            if (v252 == 0x765F646E655F3066 && v253 == 29281)
              *(v219 - 2) = *(_DWORD *)(*v218 + 4 * v212);
          }
LABEL_431:
          v219 += 152;
          v218 += 3;
          if (!--v220)
            goto LABEL_432;
        }
      }
LABEL_433:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v53 = v389;
      v255 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1DE3F6000, v255, OS_LOG_TYPE_DEFAULT, "Copycat override completed.", (uint8_t *)__p, 2u);
      }
      Diagnostics::log(5, "Copycat override completed.", v256);
      __p[0] = &v544;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    else
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v257 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        v259 = 0x86BCA1AF286BCA1BLL
             * ((uint64_t)(v53[1].__r_.__value_.__l.__size_ - v53[1].__r_.__value_.__r.__words[0]) >> 5);
        LODWORD(v544.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v544.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                                * ((uint64_t)(v404.__r_.__value_.__l.__size_
                                                                                           - v404.__r_.__value_.__r.__words[0]) >> 3);
        WORD2(v544.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v544.__r_.__value_.__r.__words[1] + 6) = v259;
        _os_log_impl(&dword_1DE3F6000, v257, OS_LOG_TYPE_ERROR, "Copycat length mismatch\n   units read from file: %ld units to replace: %ld", (uint8_t *)&v544, 0x16u);
      }
      Diagnostics::log(3, "Copycat length mismatch\n   units read from file: %ld units to replace: %ld", v258, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v404.__r_.__value_.__l.__size_ - v404.__r_.__value_.__r.__words[0]) >> 3), 0x86BCA1AF286BCA1BLL * ((uint64_t)(v53[1].__r_.__value_.__l.__size_ - v53[1].__r_.__value_.__r.__words[0]) >> 5));
    }
  }
  v544.__r_.__value_.__r.__words[0] = (std::string::size_type)&v404;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v544);
  v261 = (GryphonAnalysis *)GryphonAnalysis::Storage(v260);
  if (*(_BYTE *)v261)
  {
    v262 = (const void **)v53[1].__r_.__value_.__l.__data_;
    for (j = (const void **)v53[1].__r_.__value_.__l.__size_; v262 != j; v262 += 76)
    {
      v263 = GryphonAnalysis::Storage(v261);
      v265 = *(_QWORD *)(v263 + 120);
      v264 = *(_QWORD *)(v263 + 128);
      if (*((char *)v262 + 23) >= 0)
        v266 = *((unsigned __int8 *)v262 + 23);
      else
        v266 = (size_t)v262[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v404, v266 + 1);
      if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v267 = &v404;
      else
        v267 = (std::string *)v404.__r_.__value_.__r.__words[0];
      if (v266)
      {
        if (*((char *)v262 + 23) >= 0)
          v268 = v262;
        else
          v268 = *v262;
        memmove(v267, v268, v266);
      }
      v269 = (char *)v267 + v266;
      if (((-85 * ((v264 - v265) >> 3)) & 1) != 0)
        v270 = 50;
      else
        v270 = 49;
      *v269 = v270;
      v269[1] = 0;
      std::to_string(&v405, *((_DWORD *)v262 + 7));
      std::to_string(&v406, *((_DWORD *)v262 + 8));
      std::to_string(&v407, *((_DWORD *)v262 + 38));
      std::to_string(&v408, *((_DWORD *)v262 + 36));
      std::to_string(&v409, *((_DWORD *)v262 + 37));
      std::to_string(&v410, *((_DWORD *)v262 + 12));
      std::to_string(&v411, *((_DWORD *)v262 + 10));
      std::to_string(&v412, *((_DWORD *)v262 + 11));
      std::to_string(&v413, *((_DWORD *)v262 + 13));
      std::to_string(&v414, *((_DWORD *)v262 + 14));
      std::to_string(&v415, *((_DWORD *)v262 + 15));
      std::to_string(&v416, *((_DWORD *)v262 + 16));
      std::to_string(v417, *((_DWORD *)v262 + 39));
      std::to_string(&v417[1], *((_DWORD *)v262 + 40));
      std::to_string(v418, *((_DWORD *)v262 + 41));
      std::to_string(&v418[1], *((_DWORD *)v262 + 42));
      std::to_string(v419, *((_DWORD *)v262 + 43));
      std::to_string(&v419[1], *((_DWORD *)v262 + 44));
      std::to_string((std::string *)&v420, *((_DWORD *)v262 + 45));
      std::to_string((std::string *)((char *)v421 + 8), *((_DWORD *)v262 + 46));
      std::to_string(v422, *((_DWORD *)v262 + 47));
      std::to_string(&v422[1], *((_DWORD *)v262 + 48));
      std::to_string((std::string *)&v423, *((_DWORD *)v262 + 50));
      if (*((char *)v262 + 263) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v424 + 8), (const std::string::value_type *)v262[30], (std::string::size_type)v262[31]);
      }
      else
      {
        v271 = *((_OWORD *)v262 + 15);
        *((_QWORD *)&v424[1] + 1) = v262[32];
        *(_OWORD *)((char *)v424 + 8) = v271;
      }
      if (*((char *)v262 + 287) < 0)
      {
        std::string::__init_copy_ctor_external(&v425, (const std::string::value_type *)v262[33], (std::string::size_type)v262[34]);
      }
      else
      {
        v272 = *(_OWORD *)(v262 + 33);
        v425.__r_.__value_.__r.__words[2] = (std::string::size_type)v262[35];
        *(_OWORD *)&v425.__r_.__value_.__l.__data_ = v272;
      }
      if (*((char *)v262 + 311) < 0)
      {
        std::string::__init_copy_ctor_external(&v426, (const std::string::value_type *)v262[36], (std::string::size_type)v262[37]);
      }
      else
      {
        v273 = *((_OWORD *)v262 + 18);
        v426.__r_.__value_.__r.__words[2] = (std::string::size_type)v262[38];
        *(_OWORD *)&v426.__r_.__value_.__l.__data_ = v273;
      }
      std::to_string(&v427, *(float *)v262[45]);
      std::to_string(&v428, *((float *)v262[45] + 1));
      std::to_string(&v429, *((float *)v262[45] + 2));
      std::to_string(&v430, *((float *)v262[45] + 3));
      std::to_string(&v431, *((float *)v262[45] + 4));
      std::to_string(&v432, *((float *)v262[45] + 5));
      std::to_string(&v433, *((float *)v262[45] + 6));
      std::to_string(&v434, *((float *)v262[45] + 7));
      std::to_string(&v435, *((float *)v262[45] + 8));
      std::to_string(&v436, *((float *)v262[45] + 9));
      std::to_string(&v437, *((float *)v262[45] + 10));
      std::to_string(&v438, *((float *)v262[45] + 11));
      std::to_string(&v439, *((float *)v262[45] + 12));
      std::to_string(&v440, *(float *)v262[51]);
      std::to_string(&v441, *((float *)v262[51] + 1));
      std::to_string(&v442, *((float *)v262[51] + 2));
      std::to_string(&v443, *((float *)v262[51] + 3));
      std::to_string(&v444, *((float *)v262[51] + 4));
      std::to_string(&v445, *((float *)v262[51] + 5));
      std::to_string(&v446, *((float *)v262[51] + 6));
      std::to_string(&v447, *((float *)v262[51] + 7));
      std::to_string(&v448, *((float *)v262[51] + 8));
      std::to_string(&v449, *((float *)v262[51] + 9));
      std::to_string(&v450, *((float *)v262[51] + 10));
      std::to_string(&v451, *((float *)v262[51] + 11));
      std::to_string(&v452, *((float *)v262[51] + 12));
      std::to_string(&v453, *(float *)v262[61]);
      std::to_string(&v454, *((float *)v262[61] + 1));
      std::to_string(&v455, *((float *)v262[61] + 2));
      std::to_string(&v456, *((float *)v262[61] + 3));
      std::to_string(&v457, *((float *)v262[61] + 4));
      std::to_string(&v458, *((float *)v262[61] + 5));
      std::to_string(&v459, *((float *)v262[61] + 6));
      std::to_string(&v460, *((float *)v262[61] + 7));
      std::to_string(&v461, *((float *)v262[61] + 8));
      std::to_string(&v462, *((float *)v262[61] + 9));
      std::to_string(&v463, *((float *)v262[61] + 10));
      std::to_string(&v464, *((float *)v262[61] + 11));
      std::to_string(&v465, *((float *)v262[61] + 12));
      std::to_string(&v466, *(float *)v262[67]);
      std::to_string(&v467, *((float *)v262[67] + 1));
      std::to_string(&v468, *((float *)v262[67] + 2));
      std::to_string(&v469, *((float *)v262[67] + 3));
      std::to_string(&v470, *((float *)v262[67] + 4));
      std::to_string(&v471, *((float *)v262[67] + 5));
      std::to_string(&v472, *((float *)v262[67] + 6));
      std::to_string(&v473, *((float *)v262[67] + 7));
      std::to_string(&v474, *((float *)v262[67] + 8));
      std::to_string(&v475, *((float *)v262[67] + 9));
      std::to_string(&v476, *((float *)v262[67] + 10));
      std::to_string(&v477, *((float *)v262[67] + 11));
      std::to_string(&v478, *((float *)v262[67] + 12));
      v274 = expf(*((float *)v262 + 114));
      std::to_string(&v479, v274);
      v275 = expf(*((float *)v262 + 116));
      std::to_string(&v480, v275);
      v276 = expf(*((float *)v262 + 118));
      std::to_string(&v481, v276);
      std::to_string(&v482, *((float *)v262 + 146));
      std::to_string(&v483, *((float *)v262 + 148));
      v277 = expf(*((float *)v262 + 120));
      std::to_string(&v484, v277);
      std::to_string(&v485, *(float *)v262[48]);
      std::to_string(&v486, *((float *)v262[48] + 1));
      std::to_string(&v487, *((float *)v262[48] + 2));
      std::to_string(&v488, *((float *)v262[48] + 3));
      std::to_string(&v489, *((float *)v262[48] + 4));
      std::to_string(&v490, *((float *)v262[48] + 5));
      std::to_string(&v491, *((float *)v262[48] + 6));
      std::to_string(&v492, *((float *)v262[48] + 7));
      std::to_string(&v493, *((float *)v262[48] + 8));
      std::to_string(&v494, *((float *)v262[48] + 9));
      std::to_string(&v495, *((float *)v262[48] + 10));
      std::to_string(&v496, *((float *)v262[48] + 11));
      std::to_string(&v497, *((float *)v262[48] + 12));
      std::to_string(&v498, *(float *)v262[54]);
      std::to_string(&v499, *((float *)v262[54] + 1));
      std::to_string(&v500, *((float *)v262[54] + 2));
      std::to_string(&v501, *((float *)v262[54] + 3));
      std::to_string(&v502, *((float *)v262[54] + 4));
      std::to_string(&v503, *((float *)v262[54] + 5));
      std::to_string(&v504, *((float *)v262[54] + 6));
      std::to_string(&v505, *((float *)v262[54] + 7));
      std::to_string(&v506, *((float *)v262[54] + 8));
      std::to_string(&v507, *((float *)v262[54] + 9));
      std::to_string(&v508, *((float *)v262[54] + 10));
      std::to_string(&v509, *((float *)v262[54] + 11));
      std::to_string(&v510, *((float *)v262[54] + 12));
      std::to_string(&v511, *(float *)v262[64]);
      std::to_string(&v512, *((float *)v262[64] + 1));
      std::to_string(&v513, *((float *)v262[64] + 2));
      std::to_string(&v514, *((float *)v262[64] + 3));
      std::to_string(&v515, *((float *)v262[64] + 4));
      std::to_string(&v516, *((float *)v262[64] + 5));
      std::to_string(&v517, *((float *)v262[64] + 6));
      std::to_string(&v518, *((float *)v262[64] + 7));
      std::to_string(&v519, *((float *)v262[64] + 8));
      std::to_string(&v520, *((float *)v262[64] + 9));
      std::to_string(&v521, *((float *)v262[64] + 10));
      std::to_string(&v522, *((float *)v262[64] + 11));
      std::to_string(&v523, *((float *)v262[64] + 12));
      std::to_string(&v524, *(float *)v262[70]);
      std::to_string(&v525, *((float *)v262[70] + 1));
      std::to_string(&v526, *((float *)v262[70] + 2));
      std::to_string(&v527, *((float *)v262[70] + 3));
      std::to_string(&v528, *((float *)v262[70] + 4));
      std::to_string(&v529, *((float *)v262[70] + 5));
      std::to_string(&v530, *((float *)v262[70] + 6));
      std::to_string(&v531, *((float *)v262[70] + 7));
      std::to_string(&v532, *((float *)v262[70] + 8));
      std::to_string(&v533, *((float *)v262[70] + 9));
      std::to_string(&v534, *((float *)v262[70] + 10));
      std::to_string(&v535, *((float *)v262[70] + 11));
      std::to_string(&v536, *((float *)v262[70] + 12));
      std::to_string(&v537, *((float *)v262 + 115));
      std::to_string(&v538, *((float *)v262 + 117));
      std::to_string(&v539, *((float *)v262 + 119));
      std::to_string(&v540, *((float *)v262 + 147));
      std::to_string(&v541, *((float *)v262 + 149));
      v278 = expf(*((float *)v262 + 121));
      std::to_string(&v542, v278);
      memset(&v544, 0, sizeof(v544));
      __p[0] = &v544;
      LOBYTE(__p[1]) = 0;
      v544.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xD68uLL);
      v544.__r_.__value_.__l.__size_ = v544.__r_.__value_.__r.__words[0];
      v544.__r_.__value_.__r.__words[2] = v544.__r_.__value_.__r.__words[0] + 3432;
      v279 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v544.__r_.__value_.__r.__words[2], (__int128 *)&v404, (__int128 *)&v543, (std::string *)v544.__r_.__value_.__l.__data_);
      v544.__r_.__value_.__l.__size_ = (std::string::size_type)v279;
      v280 = 429;
      do
      {
        if (v404.__r_.__value_.__s.__data_[v280 * 8 - 1] < 0)
          operator delete((&v402)[v280]);
        v280 -= 3;
      }
      while (v280 * 8);
      v281 = GryphonAnalysis::Storage((GryphonAnalysis *)v279);
      v282 = (uint64_t *)(v281 + 120);
      v283 = *(_QWORD *)(v281 + 128);
      if (v283 >= *(_QWORD *)(v281 + 136))
      {
        v284 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v282, (__int128 **)&v544);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)v282, (__int128 **)&v544);
        v284 = v283 + 24;
      }
      *(_QWORD *)(v281 + 128) = v284;
      v404.__r_.__value_.__r.__words[0] = (std::string::size_type)&v544;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
    }
    v285 = (int *)v402[3];
    v286 = (int *)v402[4];
    if (v285 != v286)
    {
      while (1)
      {
        if (*((char *)v285 + 63) < 0)
          std::string::__init_copy_ctor_external(&v396, *((const std::string::value_type **)v285 + 5), *((_QWORD *)v285 + 6));
        else
          v396 = *(std::string *)(v285 + 10);
        v287 = *v285;
        v288 = v285[1];
        v261 = (GryphonAnalysis *)GryphonAnalysis::Storage(v261);
        v289 = v261;
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v404, v396.__r_.__value_.__l.__data_, v396.__r_.__value_.__l.__size_);
        else
          v404 = v396;
        v290 = 2 * v287;
        v291 = 2 * v288;
        v405.__r_.__value_.__r.__words[0] = __PAIR64__(v291, v290);
        v292 = *((_QWORD *)v289 + 13);
        v293 = *((_QWORD *)v289 + 14);
        if (v292 >= v293)
          break;
        v294 = *(_OWORD *)&v404.__r_.__value_.__l.__data_;
        *(_QWORD *)(v292 + 16) = *((_QWORD *)&v404.__r_.__value_.__l + 2);
        *(_OWORD *)v292 = v294;
        memset(&v404, 0, sizeof(v404));
        *(_QWORD *)(v292 + 24) = v405.__r_.__value_.__r.__words[0];
        *((_QWORD *)v289 + 13) = v292 + 32;
LABEL_506:
        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v396.__r_.__value_.__l.__data_);
        v285 += 34;
        if (v285 == v286)
          goto LABEL_512;
      }
      v295 = *((_QWORD *)v289 + 12);
      v296 = (uint64_t)(v292 - v295) >> 5;
      v297 = v296 + 1;
      if ((unint64_t)(v296 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v298 = v293 - v295;
      if (v298 >> 4 > v297)
        v297 = v298 >> 4;
      if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFE0)
        v299 = 0x7FFFFFFFFFFFFFFLL;
      else
        v299 = v297;
      if (v299)
      {
        if (v299 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v261 = (GryphonAnalysis *)operator new(32 * v299);
      }
      else
      {
        v261 = 0;
      }
      v300 = (char *)v261 + 32 * v296;
      v301 = (char *)v261 + 32 * v299;
      *(std::string *)v300 = v404;
      memset(&v404, 0, sizeof(v404));
      *((_DWORD *)v300 + 6) = v290;
      *((_DWORD *)v300 + 7) = v291;
      v302 = v300 + 32;
      v303 = (char *)*((_QWORD *)v289 + 12);
      v304 = (char *)*((_QWORD *)v289 + 13);
      if (v304 == v303)
      {
        *((_QWORD *)v289 + 12) = v300;
        *((_QWORD *)v289 + 13) = v302;
        *((_QWORD *)v289 + 14) = v301;
        if (!v304)
        {
LABEL_504:
          v307 = SHIBYTE(v404.__r_.__value_.__r.__words[2]);
          *((_QWORD *)v289 + 13) = v302;
          if (v307 < 0)
            operator delete(v404.__r_.__value_.__l.__data_);
          goto LABEL_506;
        }
      }
      else
      {
        do
        {
          v305 = *((_OWORD *)v304 - 2);
          *((_QWORD *)v300 - 2) = *((_QWORD *)v304 - 2);
          *((_OWORD *)v300 - 2) = v305;
          *((_QWORD *)v304 - 3) = 0;
          *((_QWORD *)v304 - 2) = 0;
          *((_QWORD *)v304 - 4) = 0;
          *((_DWORD *)v300 - 2) = *((_DWORD *)v304 - 2);
          *((_DWORD *)v300 - 1) = *((_DWORD *)v304 - 1);
          v300 -= 32;
          v304 -= 32;
        }
        while (v304 != v303);
        v306 = (char *)*((_QWORD *)v289 + 12);
        v304 = (char *)*((_QWORD *)v289 + 13);
        *((_QWORD *)v289 + 12) = v300;
        *((_QWORD *)v289 + 13) = v302;
        *((_QWORD *)v289 + 14) = v301;
        if (v304 != v306)
        {
          do
          {
            if (*(v304 - 9) < 0)
              operator delete(*((void **)v304 - 4));
            v304 -= 32;
          }
          while (v304 != v306);
          v304 = v306;
        }
        if (!v304)
          goto LABEL_504;
      }
      operator delete(v304);
      goto LABEL_504;
    }
  }
LABEL_512:
  v308 = (_QWORD *)v366[47];
  if (v308)
  {
    v309 = v401;
    v310 = (void **)(v308 + 56);
    if (v308 + 56 == (_QWORD *)v401)
    {
LABEL_542:
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v328 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        LOWORD(v404.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1DE3F6000, v328, OS_LOG_TYPE_INFO, "Force Prosody is enabled. Use PSOLA to match predicted f0 and duration.", (uint8_t *)&v404, 2u);
      }
      Diagnostics::log(6, "Force Prosody is enabled. Use PSOLA to match predicted f0 and duration.", v329);
      goto LABEL_547;
    }
    v312 = *(_QWORD *)v401;
    v311 = *(_QWORD *)(v401 + 8);
    v313 = 0x86BCA1AF286BCA1BLL * ((v311 - *(_QWORD *)v401) >> 5);
    v314 = v308[58];
    v315 = v308[56];
    if (0x86BCA1AF286BCA1BLL * ((v314 - v315) >> 5) >= v313)
    {
      v324 = v308[57];
      v325 = v324 - v315;
      v326 = 0x86BCA1AF286BCA1BLL * ((v324 - v315) >> 5);
      if (v326 >= v313)
      {
        if (v312 != v311)
        {
          do
          {
            UnitFeature::operator=(v315, v312);
            v312 += 608;
            v315 += 608;
          }
          while (v312 != v311);
          v324 = v308[57];
        }
        while (v324 != v315)
          UnitFeature::~UnitFeature((UnitFeature *)(v324 - 608));
        v308[57] = v315;
        goto LABEL_541;
      }
      if (v324 != v315)
      {
        v327 = *(_QWORD *)v401;
        do
        {
          UnitFeature::operator=(v315, v327);
          v327 += 608;
          v315 += 608;
          v325 -= 608;
        }
        while (v325);
        v315 = v308[57];
      }
      v323 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(v312 + 608 * v326, v311, v315);
    }
    else
    {
      if (v315)
      {
        v316 = v308[57];
        v317 = (void *)v308[56];
        if (v316 != v315)
        {
          do
            UnitFeature::~UnitFeature((UnitFeature *)(v316 - 608));
          while (v316 != v315);
          v317 = *v310;
        }
        v308[57] = v315;
        operator delete(v317);
        v314 = 0;
        *v310 = 0;
        v308[57] = 0;
        v308[58] = 0;
      }
      if (v313 > 0x6BCA1AF286BCA1)
        goto LABEL_594;
      v318 = 0x86BCA1AF286BCA1BLL * (v314 >> 5);
      v319 = 2 * v318;
      if (2 * v318 <= v313)
        v319 = v313;
      v320 = v318 >= 0x35E50D79435E50 ? 0x6BCA1AF286BCA1 : v319;
      if (v320 > 0x6BCA1AF286BCA1)
LABEL_594:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v321 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(v320);
      v308[56] = v321;
      v308[57] = v321;
      v308[58] = &v321[608 * v322];
      v323 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(v312, v311, (uint64_t)v321);
    }
    v308[57] = v323;
LABEL_541:
    std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>((uint64_t)(v308 + 59), *(uint64_t **)(v309 + 24), *(uint64_t **)(v309 + 32), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v309 + 32) - *(_QWORD *)(v309 + 24)) >> 3));
    goto LABEL_542;
  }
LABEL_547:
  v330 = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)(v330 + 8) = 0u;
  *(_QWORD *)v330 = &off_1EA932198;
  *(_OWORD *)(v330 + 32) = 0u;
  *(_QWORD *)(v330 + 24) = v330 + 32;
  v404.__r_.__value_.__r.__words[0] = v330 + 24;
  v404.__r_.__value_.__l.__size_ = v330;
  v544.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v332 = v331[5];
  if (!v332)
  {
    v339 = operator new();
    v340 = v401;
    *(_QWORD *)v339 = &off_1EA923408;
    *(_OWORD *)(v339 + 8) = v340;
    if (*((_QWORD *)&v340 + 1))
    {
      v341 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
      do
        v342 = __ldxr(v341);
      while (__stxr(v342 + 1, v341));
    }
    v343 = v331[5];
    v331[5] = v339;
    if (v343)
      (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
    *(_QWORD *)&v395 = v330 + 24;
    *((_QWORD *)&v395 + 1) = v330;
    goto LABEL_564;
  }
  v333 = v401;
  if (*((_QWORD *)&v401 + 1))
  {
    v334 = (unint64_t *)(*((_QWORD *)&v401 + 1) + 8);
    do
      v335 = __ldxr(v334);
    while (__stxr(v335 + 1, v334));
  }
  v336 = *(std::__shared_weak_count **)(v332 + 16);
  *(_OWORD *)(v332 + 8) = v333;
  if (v336)
  {
    v337 = (unint64_t *)&v336->__shared_owners_;
    do
      v338 = __ldaxr(v337);
    while (__stlxr(v338 - 1, v337));
    if (!v338)
    {
      ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
      std::__shared_weak_count::__release_weak(v336);
    }
  }
  v330 = v404.__r_.__value_.__l.__size_;
  v395 = *(_OWORD *)&v404.__r_.__value_.__l.__data_;
  if (v404.__r_.__value_.__l.__size_)
  {
LABEL_564:
    v344 = (unint64_t *)(v330 + 8);
    do
      v345 = __ldxr(v344);
    while (__stxr(v345 + 1, v344));
  }
  (*(void (**)(uint64_t *, __int128 *))(*v366 + 72))(v366, &v395);
  v346 = (std::__shared_weak_count *)*((_QWORD *)&v395 + 1);
  if (*((_QWORD *)&v395 + 1))
  {
    v347 = (unint64_t *)(*((_QWORD *)&v395 + 1) + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = (std::__shared_weak_count *)v404.__r_.__value_.__l.__size_;
  if (v404.__r_.__value_.__l.__size_)
  {
    v350 = (unint64_t *)(v404.__r_.__value_.__l.__size_ + 8);
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v404.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v404);
  v352 = (std::__shared_weak_count *)*((_QWORD *)&v401 + 1);
  if (*((_QWORD *)&v401 + 1))
  {
    v353 = (unint64_t *)(*((_QWORD *)&v401 + 1) + 8);
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = v403;
  if (v403)
  {
    v356 = (unint64_t *)&v403->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
}

void sub_1DEA6A560(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 456) = v1;
  STACK[0x518] = (unint64_t)&STACK[0x4D8];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x518]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4F0]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x508]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<UnitFeature>::__push_back_slow_path<UnitFeature const&>(int64x2_t *a1, const UnitFeature *a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int64x2_t v53;
  unint64_t v54;
  unint64_t v56;
  int64x2_t v57;
  unint64_t v58;
  uint64_t *v59;

  v2 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x6BCA1AF286BCA1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3)
    v3 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x35E50D79435E50)
    v7 = 0x6BCA1AF286BCA1;
  else
    v7 = v3;
  v59 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(v7);
  else
    v8 = 0;
  v56 = v7;
  v57.i64[0] = v7 + 608 * v2;
  v58 = v7 + 608 * v8;
  UnitFeature::UnitFeature((UnitFeature *)v57.i64[0], a2);
  v9 = v57.i64[0];
  v10 = v57.i64[0] + 608;
  v57.i64[1] = v57.i64[0] + 608;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v53 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = v9 + v13 - 608;
      v16 = v11 + v13;
      v17 = (__int128 *)(v11 + v13 - 608);
      v18 = *v17;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v11 + v13 - 592);
      *(_OWORD *)v15 = v18;
      *(__int128 *)((char *)v17 + 8) = 0uLL;
      *(_QWORD *)v17 = 0;
      v19 = (_OWORD *)(v9 + v13 - 584);
      v20 = *(_OWORD *)(v11 + v13 - 584);
      v21 = *(_OWORD *)(v11 + v13 - 568);
      *(_OWORD *)((char *)v19 + 28) = *(_OWORD *)(v11 + v13 - 556);
      v22 = v9 + v13 - 536;
      v23 = v11 + v13 - 536;
      *v19 = v20;
      v19[1] = v21;
      *(_QWORD *)v22 = 0;
      *(_OWORD *)(v22 + 8) = 0uLL;
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_QWORD *)(v9 + v13 - 520) = *(_QWORD *)(v11 + v13 - 520);
      *(_QWORD *)(v23 + 16) = 0;
      v24 = v9 + v13 - 512;
      v25 = v11 + v13 - 512;
      *(_OWORD *)v23 = 0uLL;
      v26 = *(_OWORD *)v25;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v11 + v13 - 496);
      *(_OWORD *)v24 = v26;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)v25 = 0;
      v27 = v9 + v13 - 488;
      v28 = v11 + v13 - 488;
      v29 = *(_OWORD *)v28;
      *(_QWORD *)(v27 + 16) = *(_QWORD *)(v11 + v13 - 472);
      *(_OWORD *)v27 = v29;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
      v30 = v9 + v13 - 464;
      *(_QWORD *)v28 = 0;
      *(_OWORD *)v30 = *(_OWORD *)(v11 + v13 - 464);
      v32 = *(_OWORD *)(v11 + v13 - 432);
      v31 = *(_OWORD *)(v11 + v13 - 416);
      v33 = *(_OWORD *)(v11 + v13 - 448);
      *(_DWORD *)(v30 + 64) = *(_DWORD *)(v11 + v13 - 400);
      *(_OWORD *)(v30 + 32) = v32;
      *(_OWORD *)(v30 + 48) = v31;
      *(_OWORD *)(v30 + 16) = v33;
      LODWORD(v30) = *(_DWORD *)(v11 + v13 - 396);
      v34 = (_QWORD *)(v9 + v13 - 392);
      v35 = v11 + v13 - 392;
      v34[1] = 0;
      v34[2] = 0;
      *v34 = 0;
      *(_DWORD *)(v9 + v13 - 396) = v30;
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_QWORD *)(v9 + v13 - 376) = *(_QWORD *)(v11 + v13 - 376);
      *(_QWORD *)(v11 + v13 - 384) = 0;
      *(_QWORD *)v35 = 0;
      v36 = v9 + v13 - 368;
      *(_QWORD *)(v35 + 16) = 0;
      v37 = v11 + v13 - 368;
      v38 = *(_OWORD *)v37;
      *(_QWORD *)(v36 + 16) = *(_QWORD *)(v11 + v13 - 352);
      *(_OWORD *)v36 = v38;
      *(_QWORD *)(v37 + 8) = 0;
      *(_QWORD *)(v37 + 16) = 0;
      v39 = v9 + v13 - 344;
      v40 = v11 + v13 - 344;
      v41 = *(_OWORD *)v40;
      v42 = *(_QWORD *)(v11 + v13 - 328);
      *(_QWORD *)v37 = 0;
      *(_QWORD *)(v39 + 16) = v42;
      *(_OWORD *)v39 = v41;
      *(_QWORD *)(v40 + 8) = 0;
      *(_QWORD *)(v40 + 16) = 0;
      v43 = v9 + v13 - 320;
      *(_QWORD *)v40 = 0;
      v44 = v11 + v13 - 320;
      v45 = *(_OWORD *)v44;
      *(_QWORD *)(v43 + 16) = *(_QWORD *)(v11 + v13 - 304);
      *(_OWORD *)v43 = v45;
      *(_QWORD *)(v11 + v13 - 312) = 0;
      *(_QWORD *)v44 = 0;
      *(_QWORD *)(v44 + 16) = 0;
      v46 = v9 + v13 - 296;
      v47 = v11 + v13 - 296;
      v48 = *(_OWORD *)v47;
      *(_QWORD *)(v46 + 16) = *(_QWORD *)(v11 + v13 - 280);
      *(_OWORD *)v46 = v48;
      *(_QWORD *)(v11 + v13 - 288) = 0;
      *(_QWORD *)v47 = 0;
      *(_QWORD *)(v47 + 16) = 0;
      v49 = (__int128 *)(v11 + v13 - 272);
      v50 = *v49;
      *(_QWORD *)(v14 - 256) = *(_QWORD *)(v11 + v13 - 256);
      *(_OWORD *)(v9 + v13 - 272) = v50;
      *(_QWORD *)(v11 + v13 - 264) = 0;
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v16 - 256) = 0;
      *(_QWORD *)(v14 - 248) = 0;
      *(_QWORD *)(v14 - 240) = 0;
      *(_QWORD *)(v14 - 232) = 0;
      *(_OWORD *)(v14 - 248) = *(_OWORD *)(v11 + v13 - 248);
      *(_QWORD *)(v14 - 232) = *(_QWORD *)(v11 + v13 - 232);
      *(_QWORD *)(v16 - 248) = 0;
      *(_QWORD *)(v16 - 240) = 0;
      *(_QWORD *)(v16 - 232) = 0;
      *(_QWORD *)(v14 - 224) = 0;
      *(_QWORD *)(v14 - 216) = 0;
      *(_QWORD *)(v14 - 208) = 0;
      *(_OWORD *)(v14 - 224) = *(_OWORD *)(v11 + v13 - 224);
      *(_QWORD *)(v14 - 208) = *(_QWORD *)(v11 + v13 - 208);
      *(_QWORD *)(v16 - 224) = 0;
      *(_QWORD *)(v16 - 216) = 0;
      *(_QWORD *)(v16 - 208) = 0;
      *(_QWORD *)(v14 - 200) = 0;
      *(_QWORD *)(v14 - 192) = 0;
      *(_QWORD *)(v14 - 184) = 0;
      *(_OWORD *)(v14 - 200) = *(_OWORD *)(v11 + v13 - 200);
      *(_QWORD *)(v14 - 184) = *(_QWORD *)(v11 + v13 - 184);
      *(_QWORD *)(v16 - 200) = 0;
      *(_QWORD *)(v16 - 192) = 0;
      *(_QWORD *)(v16 - 184) = 0;
      *(_QWORD *)(v14 - 176) = 0;
      *(_QWORD *)(v14 - 168) = 0;
      *(_QWORD *)(v14 - 160) = 0;
      *(_OWORD *)(v14 - 176) = *(_OWORD *)(v11 + v13 - 176);
      *(_QWORD *)(v14 - 160) = *(_QWORD *)(v11 + v13 - 160);
      *(_QWORD *)(v16 - 176) = 0;
      *(_QWORD *)(v16 - 168) = 0;
      *(_QWORD *)(v16 - 160) = 0;
      v51 = *(_OWORD *)(v11 + v13 - 152);
      *(_OWORD *)(v14 - 136) = *(_OWORD *)(v11 + v13 - 136);
      *(_OWORD *)(v14 - 152) = v51;
      *(_QWORD *)(v14 - 112) = 0;
      *(_QWORD *)(v14 - 104) = 0;
      *(_QWORD *)(v14 - 120) = 0;
      *(_OWORD *)(v14 - 120) = *(_OWORD *)(v11 + v13 - 120);
      *(_QWORD *)(v14 - 104) = *(_QWORD *)(v11 + v13 - 104);
      *(_QWORD *)(v16 - 120) = 0;
      *(_QWORD *)(v16 - 112) = 0;
      *(_QWORD *)(v16 - 104) = 0;
      *(_QWORD *)(v14 - 96) = 0;
      *(_QWORD *)(v14 - 88) = 0;
      *(_QWORD *)(v14 - 80) = 0;
      *(_OWORD *)(v14 - 96) = *(_OWORD *)(v11 + v13 - 96);
      *(_QWORD *)(v14 - 80) = *(_QWORD *)(v11 + v13 - 80);
      *(_QWORD *)(v16 - 96) = 0;
      *(_QWORD *)(v16 - 88) = 0;
      *(_QWORD *)(v16 - 80) = 0;
      *(_QWORD *)(v14 - 72) = 0;
      *(_QWORD *)(v14 - 64) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v11 + v13 - 72);
      *(_QWORD *)(v14 - 56) = *(_QWORD *)(v11 + v13 - 56);
      *(_QWORD *)(v16 - 72) = 0;
      *(_QWORD *)(v16 - 64) = 0;
      *(_QWORD *)(v16 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 48) = *(_OWORD *)(v11 + v13 - 48);
      *(_QWORD *)(v14 - 32) = *(_QWORD *)(v11 + v13 - 32);
      *(_QWORD *)(v16 - 48) = 0;
      *(_QWORD *)(v16 - 40) = 0;
      *(_QWORD *)(v16 - 32) = 0;
      v52 = *(_OWORD *)(v11 + v13 - 24);
      *(_DWORD *)(v14 - 8) = *(_DWORD *)(v11 + v13 - 8);
      *(_OWORD *)(v14 - 24) = v52;
      v13 -= 608;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    v53 = *a1;
    v10 = v57.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v57 = v53;
  v54 = a1[1].u64[0];
  a1[1].i64[0] = v58;
  v58 = v54;
  v56 = v53.i64[0];
  std::__split_buffer<UnitFeature>::~__split_buffer((uint64_t)&v56);
  return v10;
}

void sub_1DEA6ADF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<UnitFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<UnitSelectionFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923408;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<UnitSelectionFeature>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923408;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__split_buffer<UnitFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 608;
    UnitFeature::~UnitFeature((UnitFeature *)(i - 608));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UnitSelectionFeature>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  v2 = (void **)(a1 + 48);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<RNNOutputDecoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923308;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<RNNOutputDecoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923308;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<MDNOutputDecoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<MDNOutputDecoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9232E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<NNInputEncoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923228;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<NNInputEncoder>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923228;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void UnitSelectionFeatureStreamPersistentModule::~UnitSelectionFeatureStreamPersistentModule(void **this)
{
  *this = off_1EA922518;
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = off_1EA922518;
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t PLSDummyHandler::add_pls_dictionary()
{
  NSObject *v0;
  const char *v1;
  uint8_t v3[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v0 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1DE3F6000, v0, OS_LOG_TYPE_ERROR, "Frontend has no PLS handler", v3, 2u);
  }
  return Diagnostics::log(3, "Frontend has no PLS handler", v1);
}

void PLSDummyHandler::~PLSDummyHandler(PLSDummyHandler *this)
{
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<PLSDummyHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PLSDummyHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PLSDummyHandler>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void DiagRefineMergeAlignment::apply(uint64_t a1@<X0>, uint32x2_t *a2@<X1>, uint32x2_t *a3@<X2>, void ***a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  void **v40;
  uint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v53 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 16, vmul_lane_s32(v53, v53, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 8) = v53;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v54 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 48, vmul_lane_s32(v54, v54, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 40) = v54;
  v55 = (int32x2_t)vmax_u32(*a2, *a3);
  std::vector<BOOL>::resize(a1 + 80, vmul_lane_s32(v55, v55, 1).u32[0], 0);
  *(int32x2_t *)(a1 + 72) = v55;
  std::vector<BOOL>::resize(a1 + 104, *(unsigned int *)(a1 + 8), 0);
  std::vector<BOOL>::resize(a1 + 128, *(unsigned int *)(a1 + 12), 0);
  v8 = *(_DWORD *)(a1 + 40);
  if (v8)
  {
    v9 = 0;
    v10 = *(_DWORD *)(a1 + 44);
    v11 = v10;
    do
    {
      if (v11)
      {
        v12 = 0;
        do
        {
          if ((MergeAlignment::safe((unsigned int *)a2, v9, v12) & 1) != 0)
            v13 = 1;
          else
            v13 = MergeAlignment::safe((unsigned int *)a3, v9, v12);
          v14 = *(_DWORD *)(a1 + 72);
          v15 = *(_DWORD *)(a1 + 76);
          v16 = v14 - 1;
          if (v14 > v9)
            v16 = v9;
          if (v15 <= v12)
            v17 = v15 - 1;
          else
            v17 = v12;
          v18 = v16 + v17 * v14;
          v19 = *(_QWORD *)(a1 + 80);
          v20 = v18 >> 6;
          v21 = 1 << v18;
          if (v13)
            v22 = *(_QWORD *)(v19 + 8 * v20) | v21;
          else
            v22 = *(_QWORD *)(v19 + 8 * v20) & ~v21;
          *(_QWORD *)(v19 + 8 * v20) = v22;
          v23 = MergeAlignment::safe((unsigned int *)a2, v9, v12);
          if (v23)
            v23 = MergeAlignment::safe((unsigned int *)a3, v9, v12);
          v24 = *(_DWORD *)(a1 + 40);
          v25 = v24 - 1;
          if (v24 > v9)
            v25 = v9;
          v26 = v10 - 1;
          if (v10 > v12)
            v26 = v12;
          v27 = v25 + v26 * v24;
          v28 = *(_QWORD *)(a1 + 48);
          v29 = v27 >> 6;
          v30 = 1 << v27;
          if (v23)
            v31 = *(_QWORD *)(v28 + 8 * v29) | v30;
          else
            v31 = *(_QWORD *)(v28 + 8 * v29) & ~v30;
          *(_QWORD *)(v28 + 8 * v29) = v31;
          if ((v31 & v30) != 0)
          {
            DiagRefineMergeAlignment::align(a1, v9, v12);
            v10 = *(_DWORD *)(a1 + 44);
          }
          ++v12;
        }
        while (v12 < v10);
        v8 = *(_DWORD *)(a1 + 40);
        v11 = v10;
      }
      ++v9;
    }
    while (v9 < v8);
  }
  DiagRefineMergeAlignment::grow(a1, (unsigned int (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::koehn_aligned, 0, 0, (unsigned int *)(a1 + 72));
  DiagRefineMergeAlignment::grow(a1, (unsigned int (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::is_one_or_both_unaligned, 0, 1, (unsigned int *)a2);
  DiagRefineMergeAlignment::grow(a1, (unsigned int (*)(uint64_t, uint64_t, uint64_t))DiagRefineMergeAlignment::is_one_or_both_unaligned, 0, 1, (unsigned int *)a3);
  v32 = (void **)operator new(0x30uLL);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_1EA936920;
  v32[4] = 0;
  v32[5] = 0;
  a4[1] = v32;
  v32[3] = 0;
  *a4 = v32 + 3;
  v33 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = *(unsigned int *)(a1 + 12);
    v36 = v35;
    do
    {
      if (v36)
      {
        v37 = 0;
        do
        {
          v38 = *(unsigned int *)(a1 + 8);
          v39 = v38 - 1;
          if (v34 < v38)
            v39 = v34;
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 16)
                           + (((unint64_t)(v39 + v38 * v37) >> 3) & 0x1FFFFFF8)) >> (v39 + v38 * v37)) & 1) != 0)
          {
            v40 = *a4;
            v41 = (uint64_t *)(*a4)[1];
            v42 = (unint64_t)(*a4)[2];
            if ((unint64_t)v41 >= v42)
            {
              v44 = ((char *)v41 - (_BYTE *)*v40) >> 3;
              if ((unint64_t)(v44 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v45 = v42 - (_QWORD)*v40;
              v46 = v45 >> 2;
              if (v45 >> 2 <= (unint64_t)(v44 + 1))
                v46 = v44 + 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(*a4 + 2), v47);
              else
                v48 = 0;
              v49 = &v48[8 * v44];
              *(_QWORD *)v49 = v34 | (v37 << 32);
              v43 = v49 + 8;
              v51 = (char *)*v40;
              v50 = (char *)v40[1];
              if (v50 != *v40)
              {
                do
                {
                  v52 = *((_QWORD *)v50 - 1);
                  v50 -= 8;
                  *((_QWORD *)v49 - 1) = v52;
                  v49 -= 8;
                }
                while (v50 != v51);
                v50 = (char *)*v40;
              }
              *v40 = v49;
              v40[1] = v43;
              v40[2] = &v48[8 * v47];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *v41 = v34 | (v37 << 32);
              v43 = v41 + 1;
            }
            v40[1] = v43;
            v35 = *(unsigned int *)(a1 + 12);
          }
          ++v37;
        }
        while (v37 < v35);
        v33 = *(unsigned int *)(a1 + 8);
        v36 = v35;
      }
      ++v34;
    }
    while (v34 < v33);
  }
}

void sub_1DEA6B684(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MergeAlignment::requires_two_operands(MergeAlignment *this)
{
  return 1;
}

uint64_t DiagRefineMergeAlignment::koehn_aligned(DiagRefineMergeAlignment *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t result;
  BOOL v13;

  if (((*(_QWORD *)(*((_QWORD *)this + 13) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0
    && ((*(_QWORD *)(*((_QWORD *)this + 16) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    return 0;
  }
  v6 = *((_QWORD *)this + 19);
  v5 = *((_QWORD *)this + 20);
  v7 = v5 - v6;
  if (v5 == v6)
    return 0;
  v8 = 0;
  v9 = (unsigned int *)((char *)this + 8);
  v10 = v7 >> 3;
  v11 = 1;
  do
  {
    result = MergeAlignment::safe(v9, *(_DWORD *)(v6 + 8 * v8) + a2, *(_DWORD *)(v6 + 8 * v8 + 4) + a3);
    v8 = v11++;
    if ((_DWORD)result)
      v13 = 0;
    else
      v13 = v10 > v8;
  }
  while (v13);
  return result;
}

void DiagRefineMergeAlignment::grow(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, int a4, unsigned int *a5)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t *v34;
  uint64_t **v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  _QWORD *v47;
  _QWORD **v48;
  _QWORD **v49;
  _QWORD *v50[2];
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;

  if (a4)
  {
    v9 = *a5;
    if (*a5)
    {
      v10 = 0;
      v11 = a5[1];
      do
      {
        if (v11)
        {
          v12 = 0;
          do
          {
            v13 = *a5 - 1;
            if (*a5 > v10)
              v13 = v10;
            if (((*(_QWORD *)(*((_QWORD *)a5 + 1)
                             + (((unint64_t)(v13 + *a5 * v12) >> 3) & 0x1FFFFFF8)) >> (v13 + *a5 * v12)) & 1) != 0)
            {
              v14 = *(_DWORD *)(a1 + 8);
              v15 = *(_DWORD *)(a1 + 12);
              v16 = v14 - 1;
              if (v14 > v10)
                v16 = v10;
              if (v15 <= v12)
                v17 = v15 - 1;
              else
                v17 = v12;
              if (((*(_QWORD *)(*(_QWORD *)(a1 + 16) + (((unint64_t)(v16 + v17 * v14) >> 3) & 0x1FFFFFF8)) >> (v16 + v17 * v14)) & 1) == 0)
              {
                v18 = a2;
                if ((a3 & 1) != 0)
                  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + (a3 >> 1))
                                                                                 + a2);
                if (v18(a1 + (a3 >> 1), v10, v12))
                  DiagRefineMergeAlignment::align(a1, v10, v12);
              }
            }
            v12 = (v12 + 1);
            v11 = a5[1];
          }
          while (v12 < v11);
          v9 = *a5;
        }
        v10 = (v10 + 1);
      }
      while (v10 < v9);
    }
  }
  else
  {
    v52 = 0;
    v53 = 0;
    v51 = &v52;
    v19 = *a5;
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = a5[1];
      v22 = v21;
      do
      {
        if (v22)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = *a5;
            v26 = v25 - 1;
            if (v20 < v25)
              v26 = v20;
            if (((*(_QWORD *)(*((_QWORD *)a5 + 1)
                             + (((unint64_t)(v26 + v25 * v24) >> 3) & 0x1FFFFFF8)) >> (v26 + v25 * v24)) & 1) != 0)
            {
              v27 = *(unsigned int *)(a1 + 8);
              v28 = *(unsigned int *)(a1 + 12);
              v29 = v27 - 1;
              if (v20 < v27)
                v29 = v20;
              if (v24 >= v28)
                v30 = v28 - 1;
              else
                v30 = v24;
              if (((*(_QWORD *)(*(_QWORD *)(a1 + 16)
                               + (((unint64_t)(v29 + v30 * v27) >> 3) & 0x1FFFFFF8)) >> (v29 + v30 * v27)) & 1) == 0)
              {
                std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>((uint64_t *)&v51, v20, v24, v23 | v20);
                v21 = a5[1];
              }
            }
            ++v24;
            v23 += 0x100000000;
          }
          while (v24 < v21);
          v19 = *a5;
          v22 = v21;
        }
        ++v20;
      }
      while (v20 < v19);
      if (v53)
      {
        do
        {
          v50[0] = 0;
          v50[1] = 0;
          v49 = v50;
          v31 = (uint64_t)v51;
          if (v51 == &v52)
          {
            v32 = 0;
          }
          else
          {
            v32 = 0;
            do
            {
              v33 = a2;
              if ((a3 & 1) != 0)
                v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + (a3 >> 1))
                                                                               + a2);
              if (v33(a1 + (a3 >> 1), *(unsigned int *)(v31 + 28), *(unsigned int *)(v31 + 32)))
              {
                DiagRefineMergeAlignment::align(a1, *(_DWORD *)(v31 + 28), *(_DWORD *)(v31 + 32));
                std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>((uint64_t *)&v49, *(_QWORD *)(v31 + 28), HIDWORD(*(_QWORD *)(v31 + 28)), *(_QWORD *)(v31 + 28));
                v32 = 1;
              }
              v34 = *(uint64_t **)(v31 + 8);
              if (v34)
              {
                do
                {
                  v35 = (uint64_t **)v34;
                  v34 = (uint64_t *)*v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  v35 = *(uint64_t ***)(v31 + 16);
                  v36 = *v35 == (uint64_t *)v31;
                  v31 = (uint64_t)v35;
                }
                while (!v36);
              }
              v31 = (uint64_t)v35;
            }
            while (v35 != &v52);
            v37 = (uint64_t)v49;
            if (v49 != v50)
            {
              do
              {
                if (v52)
                {
                  v39 = *(_DWORD *)(v37 + 28);
                  v38 = *(_DWORD *)(v37 + 32);
                  v40 = &v52;
                  v41 = v52;
                  do
                  {
                    v42 = *((_DWORD *)v41 + 7);
                    if (v42 >= v39)
                    {
                      if (v39 >= v42)
                      {
                        if (*((_DWORD *)v41 + 8) < v38)
                          ++v41;
                        else
                          v40 = (uint64_t **)v41;
                      }
                      else
                      {
                        v40 = (uint64_t **)v41;
                      }
                    }
                    else
                    {
                      ++v41;
                    }
                    v41 = (uint64_t *)*v41;
                  }
                  while (v41);
                  if (v40 != &v52)
                  {
                    v43 = *((_DWORD *)v40 + 7);
                    if (v39 >= v43 && (v43 < v39 || v38 >= *((_DWORD *)v40 + 8)))
                    {
                      v44 = v40[1];
                      v45 = v40;
                      if (v44)
                      {
                        do
                        {
                          v46 = (uint64_t **)v44;
                          v44 = (uint64_t *)*v44;
                        }
                        while (v44);
                      }
                      else
                      {
                        do
                        {
                          v46 = (uint64_t **)v45[2];
                          v36 = *v46 == (uint64_t *)v45;
                          v45 = v46;
                        }
                        while (!v36);
                      }
                      if (v51 == v40)
                        v51 = v46;
                      --v53;
                      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v52, (uint64_t *)v40);
                      operator delete(v40);
                    }
                  }
                }
                v47 = *(_QWORD **)(v37 + 8);
                if (v47)
                {
                  do
                  {
                    v48 = (_QWORD **)v47;
                    v47 = (_QWORD *)*v47;
                  }
                  while (v47);
                }
                else
                {
                  do
                  {
                    v48 = *(_QWORD ***)(v37 + 16);
                    v36 = *v48 == (_QWORD *)v37;
                    v37 = (uint64_t)v48;
                  }
                  while (!v36);
                }
                v37 = (uint64_t)v48;
              }
              while (v48 != v50);
            }
          }
          std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v50[0]);
        }
        while ((v32 & 1) != 0);
      }
    }
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(v52);
  }
}

void sub_1DEA6BB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a10);
  std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::destroy(a13);
  _Unwind_Resume(a1);
}

BOOL DiagRefineMergeAlignment::is_one_or_both_unaligned(DiagRefineMergeAlignment *this, int a2, int a3)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 13) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
      || ((*(_QWORD *)(*((_QWORD *)this + 16) + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0;
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<std::pair<int,int>>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t DiagRefineMergeAlignment::align(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_DWORD *)(this + 8);
  v4 = *(_DWORD *)(this + 12);
  v5 = v3 - 1;
  if (v3 > a2)
    v5 = a2;
  if (v4 <= a3)
    v6 = v4 - 1;
  else
    v6 = a3;
  *(_QWORD *)(*(_QWORD *)(this + 16) + (((unint64_t)(v5 + v6 * v3) >> 3) & 0x1FFFFFF8)) |= 1 << (v5 + v6 * v3);
  *(_QWORD *)(*(_QWORD *)(this + 104) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(this + 128) + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) |= 1 << a3;
  return this;
}

uint64_t *std::__tree<std::pair<int,int>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(uint64_t *result, int a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = result;
  v7 = result + 1;
  v6 = result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v6;
        v8 = *(_DWORD *)(v6 + 28);
        if (v8 <= a2)
          break;
LABEL_5:
        v6 = *v7;
        v10 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a2)
      {
        v9 = *((_DWORD *)v7 + 8);
        if (v9 > a3)
          goto LABEL_5;
        if (v9 >= a3)
          return result;
      }
      v10 = (uint64_t **)(v7 + 1);
      v6 = v7[1];
      if (!v6)
        goto LABEL_11;
    }
  }
  v10 = (uint64_t **)(result + 1);
LABEL_11:
  v11 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v11 + 28) = a4;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = (uint64_t)v7;
  *v10 = v11;
  v12 = *(_QWORD *)*v5;
  if (v12)
  {
    *v5 = v12;
    v13 = *v10;
  }
  else
  {
    v13 = v11;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v13);
  ++v5[2];
  return result;
}

uint64_t MergeAlignment::safe(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  if (((a3 | a2) & 0x80000000) != 0)
    return 0;
  v3 = *a1;
  if ((int)*a1 <= (int)a2)
    return 0;
  v4 = a1[1];
  if ((int)v4 <= (int)a3)
    return 0;
  v5 = v3 - 1;
  if (v3 > a2)
    v5 = a2;
  if (v4 <= a3)
    v6 = v4 - 1;
  else
    v6 = a3;
  return (*(_QWORD *)(*((_QWORD *)a1 + 1) + (((unint64_t)(v5 + v6 * v3) >> 3) & 0x1FFFFFF8)) >> (v5 + v6 * v3)) & 1;
}

uint64_t FastAlignment::report_error(FastAlignment *this, uint64_t a2, const char *a3)
{
  NSObject *v6;
  sqlite3 *v7;
  const char *v8;
  sqlite3 *v9;
  const char *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 && (_DWORD)a2 != 101)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v7 = (sqlite3 *)*((_QWORD *)this + 4);
      if (v7)
        v8 = sqlite3_errmsg(v7);
      else
        v8 = sqlite3_errstr(a2);
      *(_DWORD *)buf = 136315394;
      v14 = a3;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "FastAlignment: Failed to %s: %s", buf, 0x16u);
    }
    v9 = (sqlite3 *)*((_QWORD *)this + 4);
    if (v9)
      v10 = sqlite3_errmsg(v9);
    else
      v10 = sqlite3_errstr(a2);
    Diagnostics::log(3, "FastAlignment: Failed to %s: %s", v11, a3, v10);
  }
  return a2;
}

double FastAlignment::get_prob(FastAlignment *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  sqlite3_stmt *v8;
  int v9;
  int v10;
  char v11;
  const char *v12;
  int v13;
  uint64_t v14;
  char v15;
  const char *v16;
  int v17;
  uint64_t v18;
  double v19;

  v7 = 40;
  if (a4)
    v7 = 48;
  v8 = *(sqlite3_stmt **)((char *)a1 + v7);
  if (a4)
    v9 = 2;
  else
    v9 = 1;
  if (a4)
    v10 = 1;
  else
    v10 = 2;
  sqlite3_clear_bindings(v8);
  v11 = *(_BYTE *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_DWORD *)(a2 + 8);
  v14 = sqlite3_bind_text(v8, v9, v12, v13, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  FastAlignment::report_error(a1, v14, "bind src");
  v15 = *(_BYTE *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const char *)a3;
  else
    v16 = *(const char **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_DWORD *)(a3 + 8);
  v18 = sqlite3_bind_text(v8, v10, v16, v17, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  FastAlignment::report_error(a1, v18, "bind tgt");
  if (sqlite3_step(v8) == 100)
    v19 = sqlite3_column_double(v8, 0);
  else
    v19 = 0.000000001;
  sqlite3_reset(v8);
  return v19;
}

uint64_t FastAlignment::shift_spaces(uint64_t result, int *a2, int a3, int *a4, uint64_t *a5)
{
  uint64_t v5;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;

  v5 = *((unsigned __int8 *)a5 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a5[1];
  if (v5)
  {
    v9 = result;
    if ((int)result >= 1)
    {
      v11 = *a2 + result;
      if (v11 < a3)
      {
        v12 = MEMORY[0x1E0C80978];
        do
        {
          if (*((char *)a5 + 23) >= 0)
            v13 = a5;
          else
            v13 = (uint64_t *)*a5;
          v14 = *((char *)v13 + v11);
          if ((v14 & 0x80000000) != 0)
          {
            result = __maskrune(v14, 0x4000uLL);
            if (!(_DWORD)result)
              break;
          }
          else
          {
            result = *(_DWORD *)(v12 + 4 * v14 + 60) & 0x4000;
            if (!(_DWORD)result)
              break;
          }
          v15 = *a2 + 1;
          *a2 = v15;
          v11 = v15 + v9;
        }
        while (v11 < a3);
      }
    }
    v16 = v9 & ~(v9 >> 31);
    v17 = a3 - *a4;
    if (v17 > v16)
    {
      v18 = MEMORY[0x1E0C80978];
      do
      {
        v19 = v17 - 1;
        if (*((char *)a5 + 23) >= 0)
          v20 = a5;
        else
          v20 = (uint64_t *)*a5;
        v21 = *((char *)v20 + v19);
        if ((v21 & 0x80000000) != 0)
        {
          result = __maskrune(v21, 0x4000uLL);
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          result = *(_DWORD *)(v18 + 4 * v21 + 60) & 0x4000;
          if (!(_DWORD)result)
            return result;
        }
        v22 = *a4 + 1;
        *a4 = v22;
        v17 = a3 - v22;
      }
      while (v17 > v16);
    }
  }
  return result;
}

void std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__construct_one_at_end[abi:ne180100]<std::string const&,int,int>(uint64_t a1, __int128 *a2, int *a3, int *a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  v9 = *a4;
  *(_QWORD *)(v7 + 24) = *a3;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(a1 + 8) = v7 + 40;
}

void sub_1DEA6C1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string const&,int,int>(uint64_t *a1, __int128 *a2, int *a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string *v19;
  unint64_t v20;
  uint64_t *v21;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v10 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v5;
  v21 = v10;
  if (v11)
    v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v11);
  else
    v12 = 0;
  v13 = (std::string *)(v11 + 40 * v4);
  v18[0] = v11;
  v18[1] = v13;
  v19 = v13;
  v20 = v11 + 40 * v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v15 = v19;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    v15 = v13;
  }
  v13[1].__r_.__value_.__r.__words[0] = *a3;
  v13[1].__r_.__value_.__l.__size_ = *a4;
  v19 = (std::string *)((char *)v15 + 40);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1DEA6C2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__emplace_back_slow_path<std::string&,int &,int &>(uint64_t *a1, __int128 *a2, int *a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  _QWORD v18[2];
  std::string *v19;
  unint64_t v20;
  uint64_t *v21;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v10 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v11 = 0x666666666666666;
  else
    v11 = v5;
  v21 = v10;
  if (v11)
    v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v11);
  else
    v12 = 0;
  v13 = (std::string *)(v11 + 40 * v4);
  v18[0] = v11;
  v18[1] = v13;
  v19 = v13;
  v20 = v11 + 40 * v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v15 = v19;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    v15 = v13;
  }
  v13[1].__r_.__value_.__r.__words[0] = *a3;
  v13[1].__r_.__value_.__l.__size_ = *a4;
  v19 = (std::string *)((char *)v15 + 40);
  std::vector<std::tuple<std::string,unsigned long,unsigned long>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1DEA6C428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double DiagonalAlignment::ComputeZ(DiagonalAlignment *this, unsigned int a2, unsigned int a3, double a4)
{
  double v6;
  double v7;
  double v8;
  unsigned int v9;
  long double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;

  v6 = (double)this;
  v7 = (double)a3;
  v8 = (double)a2;
  v9 = ((double)this * (double)a3 / (double)a2);
  v10 = exp(-a4 / (double)a3);
  v11 = 0.0;
  v12 = 0.0;
  v13 = a3 - v9;
  if (v13)
  {
    v14 = exp(-(vabdd_f64((double)(v9 + 1) / v7, v6 / v8) * a4));
    v12 = (1.0 - pow(v10, (double)v13)) * v14 / (1.0 - v10);
  }
  if (v9)
  {
    v15 = exp(-(vabdd_f64((double)v9 / v7, v6 / v8) * a4));
    v11 = (1.0 - pow(v10, (double)v9)) * v15 / (1.0 - v10);
  }
  return v12 + v11;
}

_QWORD *std::allocate_shared[abi:ne180100]<Array2D<BOOL>,std::allocator<Array2D<BOOL>>,int,int,void>(_QWORD *a1, int a2, int a3)
{
  _QWORD *v6;
  _QWORD *result;
  unsigned __int8 v8;

  v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935C38;
  *((_DWORD *)v6 + 6) = a2;
  v8 = 0;
  *((_DWORD *)v6 + 7) = a3;
  result = std::vector<BOOL>::vector(v6 + 4, (a3 * a2), &v8);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1DEA6C5B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void DiagRefineMergeAlignment::~DiagRefineMergeAlignment(DiagRefineMergeAlignment *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1EA9209A0;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
    operator delete(v7);
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Array2D<BOOL>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)
    operator delete(v1);
}

void GeneratedPromptDB::~GeneratedPromptDB(GeneratedPromptDB *this)
{
  GeneratedPromptDB::~GeneratedPromptDB(this);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA91EC60;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t GeneratedPromptDB::find_prompt_by_text(uint64_t a1, std::string *__str, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  int data;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  std::string *v15;
  unsigned int v16;
  std::string __p;
  char v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_20;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size != 4)
    {
      if (size != 8)
        goto LABEL_20;
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_9;
    }
    data = *(_DWORD *)__str->__r_.__value_.__l.__data_;
  }
  else
  {
    if (*((_BYTE *)&__str->__r_.__value_.__s + 23) != 4)
    {
      v7 = __str;
      if (*((_BYTE *)&__str->__r_.__value_.__s + 23) != 8)
        goto LABEL_20;
LABEL_9:
      if (v7->__r_.__value_.__r.__words[0] != 0x7661772E70656562)
        goto LABEL_20;
      goto LABEL_14;
    }
    data = (int)__str->__r_.__value_.__l.__data_;
  }
  if (data != 1885693282)
    goto LABEL_20;
LABEL_14:
  v10 = *(char *)(a3 + 23);
  if (v10 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 4)
      goto LABEL_20;
    v11 = *(_DWORD **)a3;
  }
  else
  {
    v11 = (_DWORD *)a3;
    if (v10 != 4)
      goto LABEL_20;
  }
  if (*v11 == -1415208976)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "beep");
    v16 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v6 + 16))(v6, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16 != -1)
      return *(_DWORD *)(a1 + 8) | v16;
  }
LABEL_20:
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12
    || (result = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v12 + 16))(v12, __str, a3),
        (_DWORD)result == -1))
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v15 = __str;
        if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
          return 0xFFFFFFFFLL;
        goto LABEL_28;
      }
      if (__str->__r_.__value_.__l.__size_)
      {
        v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
LABEL_28:
        if (v15->__r_.__value_.__s.__data_[0] != 47)
          return 0xFFFFFFFFLL;
        std::string::basic_string(&__p, __str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
        v16 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v14 + 16))(v14, &__p, a3);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v16 == -1)
          return 0xFFFFFFFFLL;
        return *(_DWORD *)(a1 + 8) | v16;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_1DEA6C8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GeneratedPromptDB::decompress_prompt_audio_data(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & a2) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a2 & ~v2);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t GeneratedPromptDB::get_prompt_pitchmarks(GeneratedPromptDB *this, uint64_t a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), a2 & ~v2);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), a2);
}

uint64_t GeneratedPromptDB::pitchmark_compression_factor(GeneratedPromptDB *this, uint64_t a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), a2 & ~v2);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), a2);
}

uint64_t GeneratedPromptDB::pitchmark_sample_rate(GeneratedPromptDB *this, uint64_t a2)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if ((v2 & a2) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), a2 & ~v2);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2), a2);
}

uint64_t GeneratedPromptDB::has_phatic_responses(GeneratedPromptDB *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t GeneratedPromptDB::has_spell_prompts(GeneratedPromptDB *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL GeneratedPromptDB::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 24) != 0;
}

BOOL GeneratedPromptDB::has_voice_specific_prompts(GeneratedPromptDB *this)
{
  return *((_QWORD *)this + 2) != 0;
}

void GeneratedPromptDBImpl::~GeneratedPromptDBImpl(GeneratedPromptDBImpl *this)
{
  GeneratedPromptDBImpl::~GeneratedPromptDBImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  sqlite3_stmt *v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3 *v6;

  *(_QWORD *)this = &off_1EA91FDB0;
  v2 = (sqlite3_stmt *)*((_QWORD *)this + 7);
  if (v2)
    sqlite3_finalize(v2);
  v3 = (sqlite3_stmt *)*((_QWORD *)this + 8);
  if (v3)
    sqlite3_finalize(v3);
  v4 = (sqlite3_stmt *)*((_QWORD *)this + 10);
  if (v4)
    sqlite3_finalize(v4);
  v5 = (sqlite3_stmt *)*((_QWORD *)this + 9);
  if (v5)
    sqlite3_finalize(v5);
  v6 = (sqlite3 *)*((_QWORD *)this + 6);
  if (v6)
    sqlite3_close(v6);
  std::unique_ptr<DecompressAudio>::reset[abi:ne180100]((_QWORD **)this + 21, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t GeneratedPromptDBImpl::find_prompt_by_text(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v13;
  char v14;
  int v15;
  std::string::size_type size;
  std::string *p_p;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  std::string __p;

  if (!*(_QWORD *)(a1 + 48))
    return 0xFFFFFFFFLL;
  sqlite3_reset(*(sqlite3_stmt **)(a1 + 56));
  sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 56));
  v6 = *(_BYTE *)(a2 + 23);
  v7 = v6 >= 0 ? (const char *)a2 : *(const char **)a2;
  v8 = v6 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_DWORD *)(a2 + 8);
  v9 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 56), 1, v7, v8, 0);
  v10 = v9;
  GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v9, "bind argument");
  if (v10)
    return 0xFFFFFFFFLL;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v15 = __p.__r_.__value_.__r.__words[1];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::push_back(&__p, 42);
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = __p.__r_.__value_.__r.__words[1];
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v14 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    v18 = v13;
  else
    v18 = v15;
  v19 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 56), 2, (const char *)p_p, v18, 0);
  v20 = v19;
  GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v19, "bind argument");
  if (v20)
  {
    v11 = 0xFFFFFFFFLL;
    goto LABEL_39;
  }
  v21 = 0;
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    v22 = sqlite3_step(*(sqlite3_stmt **)(a1 + 56));
    if ((_DWORD)v22 != 100)
      break;
    if (!v21)
    {
      v21 = 1;
      goto LABEL_36;
    }
    ++v21;
    v23 = *(_DWORD *)(a1 + 88);
    v24 = v23 / 0xADC8;
    v25 = 48271 * (v23 % 0xADC8);
    v24 *= 3399;
    v26 = v25 >= v24;
    v27 = v25 - v24;
    if (v26)
      v28 = 0;
    else
      v28 = 0x7FFFFFFF;
    v29 = v28 + v27;
    *(_DWORD *)(a1 + 88) = v29;
    if (!(v29 % v21))
LABEL_36:
      v11 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 56), 0);
  }
  if ((_DWORD)v22 != 101)
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v22, "execute prompt query");
LABEL_39:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1DEA6CC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GeneratedPromptDBImpl::decompress_prompt_audio_data(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  void (***v8)(_QWORD, _OWORD *, uint64_t);
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD *v19;

  v6 = (unint64_t *)(a1 + 96);
  v18 = a1;
  v7 = atomic_load(v6);
  if (v7 != -1)
  {
    *(_QWORD *)&v17[0] = &v18;
    v19 = v17;
    std::__call_once(v6, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<GeneratedPromptDBImpl::decompress_prompt_audio_data(int,std::vector<float> &)::$_0 &&>>);
  }
  std::mutex::lock((std::mutex *)(a1 + 104));
  v8 = *(void (****)(_QWORD, _OWORD *, uint64_t))(a1 + 168);
  if (*(_QWORD *)(a1 + 48)
    && (sqlite3_reset(*(sqlite3_stmt **)(a1 + 64)),
        sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 64)),
        v9 = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 64), 1, a2),
        v10 = v9,
        GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v9, "bind argument"),
        !v10)
    && sqlite3_step(*(sqlite3_stmt **)(a1 + 64)) == 100)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20);
    v12 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 64), 0);
    v13 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 64), 1);
    MemoryMap::subrange(v17, (_QWORD *)(a1 + 8), (v12 + v11), v13);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  (**v8)(v8, v17, a3);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v17[0] + 1);
  if (*((_QWORD *)&v17[0] + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17[0] + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 104));
}

void sub_1DEA6CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

double GeneratedPromptDBImpl::get_prompt_pitchmarks@<D0>(GeneratedPromptDBImpl *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  double result;

  if (*((_QWORD *)this + 6)
    && **((unsigned __int16 **)this + 5) > 1u
    && (sqlite3_reset(*((sqlite3_stmt **)this + 9)),
        sqlite3_clear_bindings(*((sqlite3_stmt **)this + 9)),
        v6 = sqlite3_bind_int(*((sqlite3_stmt **)this + 9), 1, a2),
        v7 = v6,
        GeneratedPromptDBImpl::report_error((sqlite3 **)this, v6, "bind argument"),
        !v7)
    && sqlite3_step(*((sqlite3_stmt **)this + 9)) == 100)
  {
    v8 = *(_DWORD *)(*((_QWORD *)this + 5) + 24);
    v9 = (sqlite3_column_int(*((sqlite3_stmt **)this + 9), 0) + v8);
    v10 = sqlite3_column_int(*((sqlite3_stmt **)this + 9), 1);
    MemoryMap::subrange((_QWORD *)a3, (_QWORD *)this + 1, v9, v10);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t GeneratedPromptDBImpl::pitchmark_compression_factor(GeneratedPromptDBImpl *this)
{
  unsigned __int16 *v1;

  if (*((_QWORD *)this + 6) && (v1 = (unsigned __int16 *)*((_QWORD *)this + 5), *v1 >= 2u))
    return *((unsigned __int8 *)v1 + 28);
  else
    return 1;
}

uint64_t GeneratedPromptDBImpl::pitchmark_sample_rate(GeneratedPromptDBImpl *this)
{
  if (*((_QWORD *)this + 1))
    return (int)*(double *)(*((_QWORD *)this + 3) + *(unsigned int *)(*((_QWORD *)this + 5) + 12));
  else
    return 0;
}

BOOL GeneratedPromptDBImpl::has_phatic_responses(GeneratedPromptDBImpl *this)
{
  int v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "phat");
  std::string::basic_string[abi:ne180100]<0>(__p, "🥫");
  v2 = (*(uint64_t (**)(GeneratedPromptDBImpl *, void **, void **))(*(_QWORD *)this + 16))(this, v6, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2 != -1;
}

void sub_1DEA6CFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL GeneratedPromptDBImpl::has_spell_prompts(GeneratedPromptDBImpl *this)
{
  uint64_t v2;

  if (!*((_QWORD *)this + 6))
    return 1;
  sqlite3_reset(*((sqlite3_stmt **)this + 10));
  sqlite3_clear_bindings(*((sqlite3_stmt **)this + 10));
  v2 = sqlite3_step(*((sqlite3_stmt **)this + 10));
  if ((_DWORD)v2 == 100)
    return sqlite3_column_int(*((sqlite3_stmt **)this + 10), 0) > 20;
  GeneratedPromptDBImpl::report_error((sqlite3 **)this, v2, "execute spell count query");
  return 0;
}

BOOL GeneratedPromptDBImpl::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t GeneratedPromptDBImpl::report_error(sqlite3 **this, uint64_t a2, const char *a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v7 = sqlite3_errmsg(this[6]);
      *(_DWORD *)buf = 136315394;
      v12 = a3;
      v13 = 2080;
      v14 = v7;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "GeneratedPromptDB: Failed to %s: %s", buf, 0x16u);
    }
    v8 = sqlite3_errmsg(this[6]);
    Diagnostics::log(3, "GeneratedPromptDB: Failed to %s: %s", v9, a3, v8);
  }
  return a2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<GeneratedPromptDBImpl::decompress_prompt_audio_data(int,std::vector<float> &)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  DecompressAudio *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  AudioStreamBasicDescription v11;
  __int128 v12;
  __int128 v13;

  v1 = ***a1;
  if (*(_QWORD *)(v1 + 8))
  {
    MemoryMap::subrange(&v12, (_QWORD *)(v1 + 8), *(unsigned int *)(*(_QWORD *)(v1 + 40) + 12) + 40, *(unsigned int *)(*(_QWORD *)(v1 + 40) + 16) - 40);
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(_QWORD *)(v1 + 24) + *(unsigned int *)(*(_QWORD *)(v1 + 40) + 12);
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)&v11.mSampleRate = *(_OWORD *)v2;
      *(_OWORD *)&v11.mBytesPerPacket = v4;
      *(_QWORD *)&v11.mBitsPerChannel = v3;
      goto LABEL_6;
    }
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  memset(&v11, 0, sizeof(v11));
LABEL_6:
  v5 = v13;
  v6 = (DecompressAudio *)operator new();
  DecompressAudio::DecompressAudio(v6, &v11, (const void *)v5, DWORD2(v5), (const char *)v5);
  v10 = 0;
  std::unique_ptr<DecompressAudio>::reset[abi:ne180100]((_QWORD **)(v1 + 168), v6);
  std::unique_ptr<DecompressAudio>::reset[abi:ne180100](&v10, 0);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DEA6D2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x1DF0ED014](v9, 0x10F1C40DC8C0051);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<DecompressAudio>::reset[abi:ne180100](_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_1EA91DDB8;
    v2[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t GeneratedPromptDB::GeneratedPromptDB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char is_personal_voice;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a1 = &off_1EA91EC60;
  *(_DWORD *)(a1 + 8) = 0x40000000;
  is_personal_voice = NeuralTTSUtils::is_personal_voice(a3);
  v6 = operator new();
  v7 = v6;
  v8 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  GeneratedPromptDBImpl::GeneratedPromptDBImpl(v6, &v24, 0, is_personal_voice);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = operator new();
  v14 = v13;
  v15 = *a2;
  v16 = (std::__shared_weak_count *)a2[1];
  v24 = v15;
  v25 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  GeneratedPromptDBImpl::GeneratedPromptDBImpl(v13, &v24, 1, 0);
  *(_QWORD *)(a1 + 24) = v14;
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24)) & 1) == 0)
  {
    v22 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return a1;
}

void sub_1DEA6D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1DF0ED014](v10, 0x10F1C40D9C4C820);
  v12 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

uint64_t GeneratedPromptDBImpl::GeneratedPromptDBImpl(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  _QWORD *v8;
  sqlite3_stmt **v9;
  sqlite3_stmt **v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  sqlite3 **v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string __p;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  std::random_device v39[4];
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v9 = (sqlite3_stmt **)(a1 + 56);
  *(_QWORD *)a1 = &off_1EA91FDB0;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = (sqlite3_stmt **)(a1 + 72);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::random_device::random_device[abi:ne180100](v39);
  v11 = MEMORY[0x1DF0ECD20](v39);
  v12 = v11 + ((v11 / 0x7FFFFFFF) | ((v11 / 0x7FFFFFFF) << 31));
  if (v12 <= 1)
    v12 = 1;
  *(_DWORD *)(a1 + 88) = v12;
  std::random_device::~random_device(v39);
  *(_OWORD *)(a1 + 96) = xmmword_1DED16C70;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (a3)
  {
    SiriTTS::package_path((SiriTTS *)v35);
    *(_OWORD *)&v39[0].__padding_ = *(_OWORD *)v35;
    *(_QWORD *)&v40 = v36;
    v35[1] = 0;
    v36 = 0;
    v35[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "SonicResponse");
    boost::filesystem::path::append_v3((std::string *)v39, &__p);
    *(_OWORD *)v37 = *(_OWORD *)&v39[0].__padding_;
    v38 = v40;
    *(_QWORD *)&v40 = 0;
    memset(v39, 0, sizeof(v39));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SBYTE7(v40) < 0)
        operator delete(*(void **)&v39[0].__padding_);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (v38 >= 0)
      v13 = (char *)v37;
    else
      v13 = (char *)v37[0];
    std::string::basic_string[abi:ne180100]<0>(v35, v13);
    MemoryMap::MemoryMap(v39, (uint64_t)v35);
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v8, *(uint64_t *)&v39[0].__padding_, *(uint64_t *)&v39[2].__padding_);
    *(_OWORD *)(a1 + 24) = v40;
    v14 = *(std::__shared_weak_count **)&v39[2].__padding_;
    if (*(_QWORD *)&v39[2].__padding_)
    {
      v15 = (unint64_t *)(*(_QWORD *)&v39[2].__padding_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
  }
  else if ((a4 & 1) != 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(v39[0].__padding_) = 0;
      _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_INFO, "Ignoring prompts for personal voice", (uint8_t *)v39, 2u);
    }
    Diagnostics::log(6, "Ignoring prompts for personal voice", v18);
  }
  else
  {
    (*(void (**)(std::random_device *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(v39, *a2, 1735422573, 2);
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v8, *(uint64_t *)&v39[0].__padding_, *(uint64_t *)&v39[2].__padding_);
    *(_OWORD *)(a1 + 24) = v40;
    v19 = *(std::__shared_weak_count **)&v39[2].__padding_;
    if (*(_QWORD *)&v39[2].__padding_)
    {
      v20 = (unint64_t *)(*(_QWORD *)&v39[2].__padding_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (*v8)
  {
    v22 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 40) = v22;
    MemoryMap::subrange(v39, v8, *(unsigned int *)(v22 + 4), *(unsigned int *)(v22 + 8));
    v23 = (sqlite3 **)(a1 + 48);
    v24 = sqlite3_open_MemoryMap((const void **)v39, (sqlite3 **)(a1 + 48));
    v25 = v24;
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v24, "open dictionary");
    v26 = *(std::__shared_weak_count **)&v39[2].__padding_;
    if (!*(_QWORD *)&v39[2].__padding_)
      goto LABEL_37;
    v27 = (unint64_t *)(*(_QWORD *)&v39[2].__padding_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (v25)
        return a1;
    }
    else
    {
LABEL_37:
      if (v25)
        return a1;
    }
    v29 = sqlite3_prepare_v2(*v23, "SELECT rowid FROM Prompts WHERE text=? AND context GLOB ?;", -1, v9, 0);
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v29, "compile lookup query");
    v30 = sqlite3_prepare_v2(*v23, "SELECT offset, length FROM Prompts WHERE rowid=?;",
            -1,
            (sqlite3_stmt **)(a1 + 64),
            0);
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v30, "compile data retrieval query");
    v31 = sqlite3_prepare_v2(*v23, "SELECT count() FROM prompts WHERE context='🔠';",
            -1,
            (sqlite3_stmt **)(a1 + 80),
            0);
    GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v31, "compile spell prompt query");
    if (**(unsigned __int16 **)(a1 + 40) >= 2u)
    {
      v32 = sqlite3_prepare_v2(*v23, "SELECT pm_off, pm_length FROM Prompts WHERE rowid=?;", -1, v10, 0);
      GeneratedPromptDBImpl::report_error((sqlite3 **)a1, v32, "compile data retrieval query");
    }
  }
  return a1;
}

void sub_1DEA6DA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t buf,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  std::unique_ptr<DecompressAudio>::reset[abi:ne180100]((_QWORD **)(v36 + 168), 0);
  std::mutex::~mutex((std::mutex *)(v36 + 104));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<GeneratedPromptDB>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<GeneratedPromptDB>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<GeneratedPromptDB>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t NNetExtractor::NNetExtractor(uint64_t a1, uint64_t a2, std::string *__str)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count_vtbl *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  BOOL v73;
  uint64_t v74;
  unint64_t *p_shared_owners;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  uint64_t v102;
  float *v103;
  double v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  double *v110;
  uint64_t v111;
  double v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  uint64_t v118;
  double *v119;
  uint64_t v120;
  double v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *exception;
  void *v128;
  uint64_t *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE v134[112];
  char *__s1;
  unsigned int v136;
  unsigned int v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  _QWORD v141[3];
  char v142;
  __int128 v143;
  uint64_t v144;
  _QWORD v145[5];

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v129 = (uint64_t *)(a1 + 208);
  *(_QWORD *)(a1 + 224) = 0;
  v5 = (_QWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  std::string::operator=((std::string *)(a1 + 464), __str);
  *(_QWORD *)(a1 + 424) = 0;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 424);
  v7 = *(_QWORD *)(a1 + 408);
  v8 = *(unsigned __int16 *)(v7 + v6 + 16);
  *(_WORD *)a1 = v8;
  v9 = 28;
  if (v8 < 3)
    v9 = 26;
  v10 = v9 + v6;
  v11 = v10 + 12;
  *(_QWORD *)(a1 + 424) = v10 + 12;
  v12 = *(_QWORD *)(v7 + v10 + 4);
  *(_QWORD *)(a1 + 336) = v12;
  if ((v8 & 0xFFFE) == 2)
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(v7 + v11 + 4);
    v11 = v10 + 24;
    *(_QWORD *)(a1 + 424) = v10 + 24;
  }
  v13 = 0;
  v14 = (_QWORD *)(v7 + v11);
  v15 = *(_QWORD *)(v7 + v11 + 4);
  *(_QWORD *)(a1 + 344) = v15;
  v16 = *(_QWORD *)(v7 + v11 + 16);
  *(_QWORD *)(a1 + 352) = v16;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)((char *)v14 + 28);
  *(_QWORD *)(a1 + 376) = v14[5];
  *(_QWORD *)(a1 + 384) = *(_QWORD *)((char *)v14 + 52);
  *(_QWORD *)(a1 + 424) = v12;
  do
  {
    v17 = v7 + v12;
    v18 = v12 + 8;
    v19 = *(_DWORD *)(v7 + v12);
    if (v19 <= 1835427179)
    {
      switch(v19)
      {
        case 1667524211:
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(v7 + v18);
          break;
        case 1667526003:
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v7 + v18);
          break;
        case 1667526007:
          v20 = *(unsigned int *)(v17 + 4);
          *(_DWORD *)(a1 + 32) = v20;
          *(_QWORD *)(a1 + 40) = v7 + v18;
          goto LABEL_23;
        default:
          goto LABEL_96;
      }
LABEL_21:
      v12 += 12;
      continue;
    }
    if (v19 <= 1952543586)
    {
      if (v19 == 1835427180)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + v18);
      }
      else
      {
        if (v19 != 1835886191)
          goto LABEL_96;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(v7 + v18);
      }
      goto LABEL_21;
    }
    if (v19 != 1952544613)
    {
      if (v19 != 1952543587)
      {
LABEL_96:
        *(_QWORD *)(a1 + 424) = v18;
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)v134, "Neural net file is unable to read configuration settings, the mdnf file is not valid\n");
        MEMORY[0x1DF0EC99C](exception, v134);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v7 + v18);
      goto LABEL_21;
    }
    v20 = *(unsigned int *)(v17 + 4);
    *(_DWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 24) = v7 + v18;
LABEL_23:
    v12 = v18 + 4 * v20;
  }
  while (v13++ < 6);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(v7 + v15 + 4);
  *(_QWORD *)(a1 + 272) = v7 + v15 + 8;
  v22 = v16 + 20;
  *(_QWORD *)(a1 + 424) = v16 + 20;
  v23 = *(_DWORD *)(v7 + v16 + 8);
  *(_DWORD *)(a1 + 432) = v23;
  v24 = *(_DWORD *)(v7 + v16 + 4);
  *(_DWORD *)(a1 + 436) = v24;
  v25 = *(_QWORD *)(v7 + v16 + 12);
  v26 = (v24 * v23);
  *(_QWORD *)(a1 + 256) = v26;
  LOWORD(v27) = 1;
  if (v25)
  {
    do
    {
      v28 = v22 + v25;
      v29 = v7 + v28;
      v22 = v28 + 20;
      v31 = *(_DWORD *)(v29 + 4);
      v30 = *(_DWORD *)(v29 + 8);
      v26 += (v31 * v30);
      v25 = *(_QWORD *)(v29 + 12);
      LOWORD(v27) = v27 + 1;
    }
    while (v25);
    *(_QWORD *)(a1 + 424) = v22;
    *(_DWORD *)(a1 + 432) = v30;
    *(_DWORD *)(a1 + 436) = v31;
    *(_QWORD *)(a1 + 256) = v26;
  }
  if (v8 - 2 < 2)
  {
    *(_QWORD *)(a1 + 424) = v16;
    RnnComponent::RnnComponent((RnnComponent *)v134);
    if ((_WORD)v27)
    {
      v44 = 0;
      v45 = (unsigned __int16)v27;
      v46 = *(_QWORD *)(a1 + 424);
      do
      {
        v47 = *(_QWORD *)(a1 + 408);
        v48 = v47 + v46;
        v49 = v46 + 20;
        *(_QWORD *)(a1 + 424) = v46 + 20;
        v50 = *(_DWORD *)(v47 + v46 + 8);
        *(_DWORD *)(a1 + 432) = v50;
        v51 = *(_DWORD *)(v47 + v46 + 4);
        *(_DWORD *)(a1 + 436) = v51;
        if ((v44 & 1) != 0)
        {
          v69 = strncmp(__s1, "GRU", 4uLL);
          v70 = (std::__shared_weak_count *)operator new(0x38uLL);
          v71 = v70;
          v72 = (std::__shared_weak_count_vtbl *)(v47 + v49);
          v73 = v69 == 0;
          if (v69)
            v74 = v51;
          else
            v74 = v51 / 3;
          v70->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v70->__shared_owners_;
          v70->__shared_weak_owners_ = 0;
          v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936220;
          v70[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E000;
          v76 = (uint64_t)&v70[1];
          if (v73)
            v77 = 3;
          else
            v77 = v50;
          v70[1].__shared_owners_ = v77;
          v70[1].__shared_weak_owners_ = v74;
          v70[2].__vftable = v72;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
          *(_QWORD *)&v79 = v77;
          *((_QWORD *)&v79 + 1) = v74;
          do
            v80 = __ldxr(p_shared_owners);
          while (__stxr(v80 + 1, p_shared_owners));
          do
            v81 = __ldaxr(p_shared_owners);
          while (__stlxr(v81 - 1, p_shared_owners));
          if (!v81)
          {
            v132 = v79;
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v71);
            v79 = v132;
          }
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            v133 = v79;
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
            v79 = v133;
          }
          v142 = 0;
          v143 = v79;
          v144 = v74;
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v145, v76, (uint64_t)v71);
          v145[2] = v72;
          do
            v83 = __ldaxr(p_shared_owners);
          while (__stlxr(v83 - 1, p_shared_owners));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
          v84 = *(_QWORD *)(a1 + 216);
          if (v84 >= *(_QWORD *)(a1 + 224))
          {
            v85 = std::vector<RnnComponent>::__push_back_slow_path<RnnComponent>(v129, (uint64_t)v134);
          }
          else
          {
            std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(*(_QWORD *)(a1 + 216), (uint64_t)v134);
            v85 = v84 + 248;
          }
          *(_QWORD *)(a1 + 216) = v85;
        }
        else
        {
          RnnComponent::clear((RnnComponent *)v134);
          __s1 = (char *)v48;
          v52 = *(_DWORD *)(v48 + 4);
          v136 = v52;
          v53 = *(_DWORD *)(v48 + 8);
          v137 = v53;
          if (!strncmp((const char *)v48, "GRU", 4uLL))
          {
            v136 = (v53 - 3 * v52) / 3;
            v137 = v52;
          }
          v54 = *(_QWORD *)(a1 + 424);
          v55 = *(_QWORD *)(a1 + 408);
          v56 = *(_QWORD *)(a1 + 432);
          v57 = (std::__shared_weak_count *)operator new(0x38uLL);
          v58 = v57;
          *(_QWORD *)&v59 = v56;
          *((_QWORD *)&v59 + 1) = HIDWORD(v56);
          v60 = v59;
          v61 = (std::__shared_weak_count_vtbl *)(v55 + v54);
          v57->__shared_owners_ = 0;
          v62 = (unint64_t *)&v57->__shared_owners_;
          v57->__shared_weak_owners_ = 0;
          v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936220;
          v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E000;
          v63 = (uint64_t)&v57[1];
          *(_OWORD *)&v57[1].__shared_owners_ = v59;
          v57[2].__vftable = v61;
          do
            v64 = __ldxr(v62);
          while (__stxr(v64 + 1, v62));
          do
            v65 = __ldxr(v62);
          while (__stxr(v65 + 1, v62));
          do
            v66 = __ldaxr(v62);
          while (__stlxr(v66 - 1, v62));
          if (!v66)
          {
            v130 = v60;
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v58);
            v60 = v130;
          }
          do
            v67 = __ldaxr(v62);
          while (__stlxr(v67 - 1, v62));
          if (!v67)
          {
            v131 = v60;
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
            v60 = v131;
          }
          v138 = 0;
          v139 = v60;
          v140 = *((_QWORD *)&v60 + 1);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v141, v63, (uint64_t)v58);
          v141[2] = v61;
          do
            v68 = __ldaxr(v62);
          while (__stlxr(v68 - 1, v62));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v46 = *(_QWORD *)(a1 + 424) + 4 * (*(_DWORD *)(a1 + 436) * *(_DWORD *)(a1 + 432));
        *(_QWORD *)(a1 + 424) = v46;
        ++v44;
      }
      while (v44 != v45);
    }
    v86 = *(_QWORD *)(a1 + 408);
    v87 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)(a1 + 264) = v86 + *(_QWORD *)(a1 + 360);
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(v86 + v87 + 4);
    *(_QWORD *)(a1 + 304) = v86 + v87 + 8;
    v88 = *(_QWORD *)(a1 + 376);
    v89 = v86 + v88;
    v88 += 8;
    *(_QWORD *)(a1 + 424) = v88;
    *(_DWORD *)(a1 + 244) = *(_DWORD *)(v89 + 4);
    *(_QWORD *)(a1 + 320) = v86 + v88;
    RnnComponent::~RnnComponent((RnnComponent *)v134);
  }
  else
  {
    if (v8)
    {
      if (v8 != 1)
      {
        v128 = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)v134, "Undefined version of nnet_meta_info file");
        MEMORY[0x1DF0EC99C](v128, v134);
        __cxa_throw(v128, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      *(_QWORD *)(a1 + 280) = operator new[]();
      v32 = *(_QWORD *)(a1 + 352);
      *(_QWORD *)(a1 + 424) = v32;
      if ((_WORD)v27)
      {
        v33 = 0;
        v27 = (unsigned __int16)v27;
        do
        {
          v34 = *(_QWORD *)(a1 + 408);
          v35 = v34 + v32;
          v36 = v32 + 20;
          *(_QWORD *)(a1 + 424) = v36;
          v37 = *(_DWORD *)(v35 + 8);
          *(_DWORD *)(a1 + 432) = v37;
          LODWORD(v35) = *(_DWORD *)(v35 + 4);
          *(_DWORD *)(a1 + 436) = v35;
          memcpy((void *)(*(_QWORD *)(a1 + 280) + 4 * v33), (const void *)(v34 + v36), 4 * (v35 * v37));
          v38 = (*(_DWORD *)(a1 + 436) * *(_DWORD *)(a1 + 432));
          v33 += v38;
          v32 = *(_QWORD *)(a1 + 424) + 4 * v38;
          *(_QWORD *)(a1 + 424) = v32;
          --v27;
        }
        while (v27);
      }
      v39 = *(_QWORD *)(a1 + 408);
      v40 = *(_QWORD *)(a1 + 376);
      v41 = v39 + *(_QWORD *)(a1 + 368);
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(v41 + 4);
      *(_QWORD *)(a1 + 304) = v41 + 8;
      v42 = v39 + v40;
      v40 += 8;
      *(_QWORD *)(a1 + 424) = v40;
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(v42 + 4);
      *(_QWORD *)(a1 + 320) = v39 + v40;
      v43 = (_OWORD *)operator new();
    }
    else
    {
      v90 = operator new[]();
      *(_QWORD *)(a1 + 280) = v90;
      v91 = *(_QWORD *)(a1 + 352);
      *(_QWORD *)(a1 + 424) = v91;
      v92 = *(_QWORD *)(a1 + 408);
      if ((_WORD)v27)
      {
        v93 = 0;
        v94 = 0;
        do
        {
          v95 = v92 + v91;
          v96 = v91 + 20;
          v99 = v95 + 4;
          v98 = *(_DWORD *)(v95 + 4);
          v97 = *(_DWORD *)(v99 + 4);
          v100 = (v98 * v97);
          if ((_DWORD)v100)
          {
            v101 = (double *)(v92 + v96);
            v102 = 8 * v100;
            v103 = (float *)(v90 + 4 * v94);
            do
            {
              v104 = *v101++;
              v105 = v104;
              *v103++ = v105;
              v102 -= 8;
            }
            while (v102);
          }
          v94 += v100;
          v91 = v96 + 8 * v100;
          ++v93;
        }
        while (v93 != (unsigned __int16)v27);
        *(_QWORD *)(a1 + 424) = v91;
        *(_DWORD *)(a1 + 432) = v97;
        *(_DWORD *)(a1 + 436) = v98;
      }
      v106 = *(_QWORD *)(a1 + 368);
      v107 = v92 + v106;
      v106 += 8;
      *(_QWORD *)(a1 + 424) = v106;
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(v107 + 4);
      *(_QWORD *)(a1 + 312) = v92 + v106;
      v108 = (float *)operator new[]();
      *(_QWORD *)(a1 + 304) = v108;
      v109 = *(unsigned int *)(a1 + 240);
      if ((_DWORD)v109)
      {
        v110 = *(double **)(a1 + 312);
        v111 = 8 * v109;
        do
        {
          v112 = *v110++;
          v113 = v112;
          *v108++ = v113;
          v111 -= 8;
        }
        while (v111);
      }
      v114 = *(_QWORD *)(a1 + 376);
      v115 = *(_QWORD *)(a1 + 408);
      v116 = v115 + v114;
      v114 += 8;
      *(_QWORD *)(a1 + 424) = v114;
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(v116 + 4);
      *(_QWORD *)(a1 + 328) = v115 + v114;
      v117 = (float *)operator new[]();
      *(_QWORD *)(a1 + 320) = v117;
      v118 = *(unsigned int *)(a1 + 244);
      if ((_DWORD)v118)
      {
        v119 = *(double **)(a1 + 328);
        v120 = 8 * v118;
        do
        {
          v121 = *v119++;
          v122 = v121;
          *v117++ = v122;
          v120 -= 8;
        }
        while (v120);
      }
      v43 = (_OWORD *)operator new();
    }
    *v43 = xmmword_1DED16C80;
    v43[1] = xmmword_1DED16C90;
    *(_QWORD *)(a1 + 264) = v43;
  }
  v123 = *(_QWORD *)(a1 + 384);
  v124 = *(_QWORD *)(a1 + 408);
  v125 = v124 + v123;
  v123 += 8;
  *(_QWORD *)(a1 + 424) = v123;
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(v125 + 4);
  *(_QWORD *)(a1 + 296) = v124 + v123;
  *(_DWORD *)(a1 + 56) = 1065353216;
  return a1;
}

void sub_1DEA6E6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  int v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v24 + 487) < 0)
        operator delete(*a10);
      v28 = *a11;
      if (*a11)
      {
        *(_QWORD *)(v24 + 448) = v28;
        operator delete(v28);
      }
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
      __p = a14;
      std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v29 = *(void **)(v24 + 184);
      if (v29)
      {
        *(_QWORD *)(v24 + 192) = v29;
        operator delete(v29);
      }
      v30 = *(void **)(v24 + 160);
      if (v30)
      {
        *(_QWORD *)(v24 + 168) = v30;
        operator delete(v30);
      }
      __p = (void *)(v24 + 136);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = (void *)(v24 + 112);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = (void *)(v24 + 88);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = a13;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void RnnComponent::RnnComponent(RnnComponent *this)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this, 0, 0);
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 56, 0, 0);
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 128, 0, 0);
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 184, 0, 0);
}

void sub_1DEA6E880(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RnnComponent::~RnnComponent(RnnComponent *this)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

void RnnComponent::clear(RnnComponent *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this, 0, 0);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 56, 0, 0);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 128, 0, 0);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  roost::matrix<float>::resize_storage((uint64_t)this + 184, 0, 0);
}

uint64_t std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(result + 56) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(result + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(result + 144) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(result + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(result + 168) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  v14 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(result + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(result + 184) = v14;
  v15 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(result + 224) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(result + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(result + 240) = v18;
  return result;
}

uint64_t std::vector<RnnComponent>::__push_back_slow_path<RnnComponent>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x108421084210842)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 3);
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 3) >= 0x84210842108421)
    v6 = 0x108421084210842;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x108421084210842)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(248 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t)&v7[248 * v2];
  v9 = &v7[248 * v6];
  std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(v8, a2);
  v10 = v8 + 248;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
  }
  else
  {
    do
    {
      v8 -= 248;
      v11 -= 248;
      std::allocator<RnnComponent>::construct[abi:ne180100]<RnnComponent,RnnComponent>(v8, (uint64_t)v11);
    }
    while (v11 != v12);
    v11 = (char *)*a1;
    v13 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    while (v13 != v11)
      RnnComponent::~RnnComponent((RnnComponent *)(v13 - 248));
  }
  if (v11)
    operator delete(v11);
  return v10;
}

void std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        RnnComponent::~RnnComponent((RnnComponent *)(v4 - 248));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *roost::raw_storage<float>::~raw_storage(_QWORD *result)
{
  result[3] = 0;
  *result = &off_1EA92E040;
  return result;
}

void roost::raw_storage<float>::~raw_storage(_QWORD *a1)
{
  a1[3] = 0;
  *a1 = &off_1EA92E040;
  JUMPOUT(0x1DF0ED014);
}

_QWORD *roost::storage<float>::~storage(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1EA92E040;
  v2 = a1[3];
  if (v2)
    MEMORY[0x1DF0ECFFC](v2, 0x1000C8052888210);
  return a1;
}

void roost::storage<float>::~storage(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1EA92E040;
  v1 = a1[3];
  if (v1)
    MEMORY[0x1DF0ECFFC](v1, 0x1000C8052888210);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<roost::raw_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<roost::raw_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<roost::raw_storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void roost::matrix<float>::resize_storage(uint64_t a1, unint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = (std::__shared_weak_count *)operator new(0x38uLL);
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E040;
  v9 = (uint64_t)&v6[1];
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936290;
  v10 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a2 <= 1)
    v10 = a3;
  v6[1].__shared_owners_ = a2;
  v6[1].__shared_weak_owners_ = v10;
  v6[2].__vftable = (std::__shared_weak_count_vtbl *)operator new[]();
  v11.i64[0] = a2;
  v11.i64[1] = a3;
  v12 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 8), v11), (int8x16_t)v11, *(int8x16_t *)(a1 + 8));
  *(int8x16_t *)(a1 + 8) = v12;
  if (*(_QWORD *)(a1 + 48) && v12.i64[0])
  {
    v13 = 0;
    do
    {
      cblas_scopy(*(_DWORD *)(a1 + 16), (const float *)(*(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(a1 + 24) * v13), 1, (float *)v7[2].__vftable + v7[1].__shared_weak_owners_ * v13, 1);
      ++v13;
    }
    while (v13 < *(_QWORD *)(a1 + 8));
  }
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 32), v9, (uint64_t)v7);
  *(_BYTE *)a1 = 0;
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v14 + 16);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1DEA6EEA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<roost::storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<roost::storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<roost::storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<MDN>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9358B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MDN>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9358B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<MDN>::__on_zero_shared(uint64_t a1)
{
  NNetExtractor::~NNetExtractor((NNetExtractor *)(a1 + 24));
}

void NNetExtractor::~NNetExtractor(NNetExtractor *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  if (!*(_WORD *)this)
  {
    v2 = *((_QWORD *)this + 38);
    if (v2)
      MEMORY[0x1DF0ECFFC](v2, 0x1000C8052888210);
    v3 = *((_QWORD *)this + 40);
    if (v3)
      MEMORY[0x1DF0ECFFC](v3, 0x1000C8052888210);
  }
  if (*((char *)this + 487) < 0)
    operator delete(*((void **)this + 58));
  v4 = (void *)*((_QWORD *)this + 55);
  if (v4)
  {
    *((_QWORD *)this + 56) = v4;
    operator delete(v4);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 392);
  v7 = (void **)((char *)this + 208);
  std::vector<RnnComponent>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = (void *)*((_QWORD *)this + 23);
  if (v5)
  {
    *((_QWORD *)this + 24) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 64);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::__shared_ptr_emplace<RNN>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9358F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RNN>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9358F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<RNN>::__on_zero_shared(uint64_t a1)
{
  NNetExtractor::~NNetExtractor((NNetExtractor *)(a1 + 24));
}

void RnnComponent::activation_func(RnnComponent *this)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  float *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  float *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  float *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t i;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  float *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  float *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  float *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  float *v117;
  vDSP_Length v118;
  int v119;
  float *v120;
  unint64_t *v121;
  unint64_t v122;
  float *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  float *v129;
  vDSP_Length v130;
  vDSP_Length v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  float *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  float *j;
  unint64_t *v178;
  unint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  size_t v198;
  std::__shared_weak_count_vtbl *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  void *v204;
  size_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  __int128 v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::runtime_error *v234;
  std::runtime_error *v235;
  std::runtime_error *exception;
  std::runtime_error *v237;
  std::runtime_error *v238;
  std::runtime_error *v239;
  std::runtime_error *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  float *v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  std::logic_error *v253;
  int8x16_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  float *v261;
  float *v262;
  float *v263;
  char v264[8];
  vDSP_Length v265[2];
  uint64_t v266;
  std::__shared_weak_count *v267;
  float *v268;
  void *v269[4];
  void *v270[4];
  char v271[8];
  uint64_t v272;
  vDSP_Stride __IB;
  uint64_t v274;
  std::__shared_weak_count *v275;
  float *__B;
  char *v277;
  int v278[2];
  int __incY[2];
  uint64_t v280;
  std::__shared_weak_count *v281;
  float *__Y;
  uint64_t v283;
  _BYTE v284[24];
  int __lda[2];
  std::__shared_weak_count *v286;
  uint64_t v287;
  float *__A;
  char v289;
  uint64_t v290;
  int v291[2];
  uint64_t v292;
  std::__shared_weak_count *v293;
  float *v294;
  char v295;
  uint64_t v296;
  int v297[2];
  uint64_t v298;
  std::__shared_weak_count *v299;
  float *v300;
  char v301;
  uint64_t v302;
  int v303[2];
  uint64_t v304;
  std::__shared_weak_count *v305;
  float *v306;
  void *filter;
  __int128 __N;
  uint64_t v309;
  std::__shared_weak_count *v310;
  float *__X;
  char v312[8];
  __int128 v313;
  size_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  char *v317;
  char *v318;
  __int128 v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[2];
  char v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  float *v334;
  uint64_t v335;
  char **v336;
  uint64_t v337;
  uint64_t v338;
  int8x16_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  __int128 v343;
  size_t v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  uint64_t v347;

  v2 = *((_QWORD *)this + 1);
  v312[0] = 0;
  v317 = 0;
  v315 = 0;
  v316 = 0;
  v313 = 0uLL;
  roost::matrix<float>::resize_storage((uint64_t)v312, 0, 0);
  if (!strncmp(*((const char **)this + 14), "GRU", 4uLL))
  {
    v12 = (std::__shared_weak_count *)*((unsigned int *)this + 30);
    v13 = *((_QWORD *)this + 18);
    v14 = *((_QWORD *)this + 19);
    v15 = *((_QWORD *)this + 22);
    LOBYTE(v331) = 1;
    *(_QWORD *)&v330 = (char *)this + 128;
    *((_QWORD *)&v330 + 1) = v15;
    v332 = v13;
    v333 = v12;
    v334 = (float *)1;
    v335 = v14;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)&v336, &v330);
    roost::multiply_mm<float>((uint64_t)&v342, (uint64_t)this, (uint64_t)&v336);
    v16 = (std::__shared_weak_count *)v340;
    if (v340)
    {
      v17 = (unint64_t *)(v340 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((unsigned int *)this + 30);
    v20 = *((_QWORD *)this + 18);
    v21 = *((_QWORD *)this + 19);
    v22 = *((_QWORD *)this + 22);
    v325 = 1;
    v324[0] = (char *)this + 128;
    v324[1] = v22 + 4 * v21 * (_QWORD)v19;
    v326 = v20;
    v327 = v19;
    v328 = 1;
    v329 = v21;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)&v330, v324);
    roost::multiply_mm<float>((uint64_t)&v336, (uint64_t)this, (uint64_t)&v330);
    v23 = v334;
    if (v334)
    {
      v24 = (unint64_t *)(v334 + 2);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(float *))(*(_QWORD *)v23 + 16))(v23);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
      }
    }
    v26 = (_QWORD *)*((unsigned int *)this + 30);
    v27 = *((_QWORD *)this + 18);
    v28 = *((_QWORD *)this + 19);
    v29 = *((_QWORD *)this + 22) + 4 * v28 * (2 * (_DWORD)v26);
    BYTE8(v319) = 1;
    v318 = (char *)this + 128;
    *(_QWORD *)&v319 = v29;
    v320 = v27;
    v321 = v26;
    v322 = 1;
    v323 = v28;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)v324, &v318);
    roost::multiply_mm<float>((uint64_t)&v330, (uint64_t)this, (uint64_t)v324);
    v30 = (std::__shared_weak_count *)v328;
    if (v328)
    {
      v31 = (unint64_t *)(v328 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = *((unsigned int *)this + 31);
    if (*(_QWORD *)(v315 + 8) < v2 || (v34 = *((unsigned int *)this + 31), *(_QWORD *)(v315 + 16) < v33))
    {
      roost::matrix<float>::resize_storage((uint64_t)v312, v2, *((unsigned int *)this + 31));
      v34 = *((unsigned int *)this + 31);
    }
    *(_QWORD *)&v313 = v2;
    *((_QWORD *)&v313 + 1) = v33;
    LOBYTE(filter) = 0;
    *(_QWORD *)&__N = v34;
    v309 = 0;
    __X = 0;
    v310 = 0;
    roost::vector<float>::resize_storage((uint64_t)&filter, v34);
    catlas_sset(__N, 0.0, __X, SDWORD2(__N));
    v35 = *((_QWORD *)this + 27);
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    v39 = (float *)*((_QWORD *)this + 29);
    v40 = *((_QWORD *)this + 25);
    v301 = 1;
    v302 = v40;
    *(_QWORD *)v303 = 1;
    v304 = v35;
    v305 = v36;
    if (v36)
    {
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v306 = v39;
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
      v306 = v39;
    }
    v58 = *((_QWORD *)this + 27);
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = *((_QWORD *)this + 25);
    v63 = (float *)(*((_QWORD *)this + 29) + 4 * *((_QWORD *)this + 26));
    v295 = 1;
    v296 = v62;
    *(_QWORD *)v297 = 1;
    v298 = v58;
    v299 = v59;
    if (v59)
    {
      v64 = (unint64_t *)&v59->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
      v300 = v63;
      do
        v66 = __ldaxr(v64);
      while (__stlxr(v66 - 1, v64));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    else
    {
      v300 = v63;
    }
    v67 = *((_QWORD *)this + 27);
    v68 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *((_QWORD *)this + 25);
    v72 = (float *)(*((_QWORD *)this + 29) + 8 * *((_QWORD *)this + 26));
    v289 = 1;
    v290 = v71;
    *(_QWORD *)v291 = 1;
    v292 = v67;
    v293 = v68;
    if (v68)
    {
      v73 = (unint64_t *)&v68->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      v294 = v72;
      do
        v75 = __ldaxr(v73);
      while (__stlxr(v75 - 1, v73));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    else
    {
      v294 = v72;
    }
    v76 = (_QWORD *)*((unsigned int *)this + 31);
    v77 = *((_QWORD *)this + 18);
    v78 = *((_QWORD *)this + 19);
    v79 = *((_QWORD *)this + 22) + 4 * v78 * (3 * *((_DWORD *)this + 30));
    BYTE8(v319) = 1;
    v318 = (char *)this + 128;
    *(_QWORD *)&v319 = v79;
    v320 = v77;
    v321 = v76;
    v322 = 1;
    v323 = v78;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)v324, &v318);
    v80 = (std::__shared_weak_count *)*((unsigned int *)this + 31);
    v81 = (3 * *((_DWORD *)this + 30) + (_DWORD)v80);
    v82 = *((_QWORD *)this + 18);
    v83 = (float *)*((_QWORD *)this + 19);
    v84 = *((_QWORD *)this + 22);
    v284[16] = 1;
    *(_QWORD *)v284 = (char *)this + 128;
    *(_QWORD *)&v284[8] = v84 + 4 * (_QWORD)v83 * v81;
    *(_QWORD *)__lda = v82;
    v286 = v80;
    v287 = 1;
    __A = v83;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)&v318, v284);
    v85 = (std::__shared_weak_count *)*((unsigned int *)this + 31);
    v86 = *((_QWORD *)this + 18);
    v87 = *((_QWORD *)this + 19);
    v88 = *((_QWORD *)this + 22) + 4 * v87 * (3 * *((_DWORD *)this + 30) + 2 * (_DWORD)v85);
    LOBYTE(__incY[0]) = 1;
    v277 = (char *)this + 128;
    *(_QWORD *)v278 = v88;
    v280 = v86;
    v281 = v85;
    __Y = (float *)1;
    v283 = v87;
    roost::_matrix_enumerator<float>::operator roost::matrix<float>((uint64_t)v284, &v277);
    v89 = v302;
    LOBYTE(v277) = 0;
    *(_QWORD *)v278 = v302;
    v280 = 0;
    v281 = 0;
    __Y = 0;
    roost::vector<float>::resize_storage((uint64_t)&v277, v302);
    v271[0] = 0;
    v272 = v290;
    v274 = 0;
    v275 = 0;
    __B = 0;
    roost::vector<float>::resize_storage((uint64_t)v271, v290);
    roost::vector_activation_layer<float>::vector_activation_layer((uint64_t)v270, v89, 3, 0);
    roost::vector_activation_layer<float>::vector_activation_layer((uint64_t)v269, v296, 4, 0);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v91 = v315;
        v92 = v316;
        if (v316)
        {
          v93 = (unint64_t *)&v316->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = (float *)&v317[4 * v314 * i];
        v264[0] = 1;
        v265[0] = *((_QWORD *)&v313 + 1);
        v265[1] = 1;
        v266 = v91;
        v267 = v92;
        if (v92)
        {
          v96 = (unint64_t *)&v92->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
          v268 = v95;
          do
            v98 = __ldaxr(v96);
          while (__stlxr(v98 - 1, v96));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        else
        {
          v268 = (float *)&v317[4 * v314 * i];
        }
        if (*(_QWORD *)v278 != v302)
          goto LABEL_328;
        cblas_scopy(v278[0], v306, v303[0], __Y, __incY[0]);
        v99 = v346;
        if (v346)
        {
          v100 = (unint64_t *)&v346->__shared_owners_;
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v102 = (float *)(v347 + 4 * v344 * i);
        v258 = *((_QWORD *)&v343 + 1);
        if (v99)
        {
          v103 = (unint64_t *)&v99->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
          v261 = v102;
          do
            v105 = __ldaxr(v103);
          while (__stlxr(v105 - 1, v103));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        else
        {
          v261 = (float *)(v347 + 4 * v344 * i);
        }
        if (*(_QWORD *)v278 != v258)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Size mismatch");
          exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_saxpy(v278[0], 1.0, v261, 1, __Y, __incY[0]);
        if (v99)
        {
          v106 = (unint64_t *)&v99->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        roost::multiply_accumulate_vm<float>((uint64_t)&filter, (uint64_t)v324, (uint64_t)&v277);
        roost::_layer_base<float>::apply(v270[0], __Y, __Y);
        if (v265[0] != v296)
          goto LABEL_328;
        cblas_scopy(v265[0], v300, v297[0], v268, v265[1]);
        v108 = (std::__shared_weak_count *)v340;
        if (v340)
        {
          v109 = (unint64_t *)(v340 + 8);
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        v111 = (float *)(v341 + 4 * v339.i64[0] * i);
        v259 = v338;
        if (v108)
        {
          v112 = (unint64_t *)&v108->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
          v262 = v111;
          do
            v114 = __ldaxr(v112);
          while (__stlxr(v114 - 1, v112));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        else
        {
          v262 = (float *)(v341 + 4 * v339.i64[0] * i);
        }
        if (v265[0] != v259)
        {
          v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v235, "Size mismatch");
          v235->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(v235, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_saxpy(v265[0], 1.0, v262, 1, v268, v265[1]);
        if (v108)
        {
          v115 = (unint64_t *)&v108->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        roost::multiply_accumulate_vm<float>((uint64_t)&filter, (uint64_t)&v318, (uint64_t)v264);
        v117 = v268;
        roost::_layer_base<float>::apply(v270[0], v268, v268);
        if (*(_OWORD *)&v284[8] != __PAIR128__(v272, __N))
        {
          v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v234, "Size mismatch");
          v234->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(v234, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_sgemv(CblasRowMajor, CblasTrans, *(const int *)&v284[8], *(const int *)&v284[16], 1.0, __A, __lda[0], __X, SDWORD2(__N), 0.0, __B, __IB);
        v118 = v265[0];
        if (v265[0] != v272)
          goto LABEL_328;
        v119 = v265[1];
        vDSP_vmul(v117, v265[1], __B, __IB, v117, v265[1], v265[0]);
        if (v118 != v290)
          goto LABEL_328;
        cblas_saxpy(v118, 1.0, v294, v291[0], v117, v119);
        v120 = v334;
        if (v334)
        {
          v121 = (unint64_t *)(v334 + 2);
          do
            v122 = __ldxr(v121);
          while (__stxr(v122 + 1, v121));
        }
        v123 = (float *)(v335 + 4 * v332 * i);
        v260 = v331;
        if (v120)
        {
          v124 = (unint64_t *)(v120 + 2);
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
          v263 = v123;
          do
            v126 = __ldaxr(v124);
          while (__stlxr(v126 - 1, v124));
          if (!v126)
          {
            (*(void (**)(float *))(*(_QWORD *)v120 + 16))(v120);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v120);
          }
        }
        else
        {
          v263 = (float *)(v335 + 4 * v332 * i);
        }
        if (v265[0] != v260)
        {
          v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v237, "Size mismatch");
          v237->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(v237, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_saxpy(v265[0], 1.0, v263, 1, v268, v265[1]);
        if (v120)
        {
          v127 = (unint64_t *)(v120 + 2);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            (*(void (**)(float *))(*(_QWORD *)v120 + 16))(v120);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v120);
          }
        }
        v129 = v268;
        roost::_layer_base<float>::apply(v269[0], v268, v268);
        v130 = v265[0];
        if (v265[0] != (_QWORD)__N
          || (v131 = v265[1], cblas_saxpy(v265[0], -1.0, __X, SDWORD2(__N), v129, v265[1]), v130 != *(_QWORD *)v278)
          || (vDSP_vmul(v129, v131, __Y, *(vDSP_Stride *)__incY, v129, v131, v130), v130 != (_QWORD)__N))
        {
LABEL_328:
          v238 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v238, "Size mismatch");
          v238->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(v238, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_saxpy(v130, 1.0, __X, SDWORD2(__N), v129, v131);
        LOBYTE(filter) = v264[0];
        __N = *(_OWORD *)v265;
        v132 = v267;
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v309, v266, (uint64_t)v267);
        __X = v129;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
    }
    roost::_layer_base_data::~_layer_base_data(v269);
    roost::_layer_base_data::~_layer_base_data(v270);
    v135 = v275;
    if (v275)
    {
      v136 = (unint64_t *)&v275->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v138 = v281;
    if (v281)
    {
      v139 = (unint64_t *)&v281->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    v141 = (std::__shared_weak_count *)v287;
    if (v287)
    {
      v142 = (unint64_t *)(v287 + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = (std::__shared_weak_count *)v322;
    if (v322)
    {
      v145 = (unint64_t *)(v322 + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = (std::__shared_weak_count *)v328;
    if (v328)
    {
      v148 = (unint64_t *)(v328 + 8);
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = v293;
    if (v293)
    {
      v151 = (unint64_t *)&v293->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v153 = v299;
    if (v299)
    {
      v154 = (unint64_t *)&v299->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = v305;
    if (v305)
    {
      v157 = (unint64_t *)&v305->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v159 = v310;
    if (v310)
    {
      v160 = (unint64_t *)&v310->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v162 = v334;
    if (v334)
    {
      v163 = (unint64_t *)(v334 + 2);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        (*(void (**)(float *))(*(_QWORD *)v162 + 16))(v162);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v162);
      }
    }
    v165 = (std::__shared_weak_count *)v340;
    if (v340)
    {
      v166 = (unint64_t *)(v340 + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v168 = v346;
    if (v346)
    {
      v169 = (unint64_t *)&v346->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
LABEL_311:
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 27);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (float *)*((_QWORD *)this + 29);
    v8 = *((_QWORD *)this + 25);
    LOBYTE(v277) = 1;
    *(_QWORD *)v278 = v8;
    *(_QWORD *)__incY = 1;
    v280 = v3;
    v281 = v4;
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      __Y = v7;
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      __Y = v7;
    }
    v44 = (const char *)*((_QWORD *)this + 14);
    if (!strncmp(v44, "RELU", 4uLL))
    {
      v45 = 1;
    }
    else if (!strncmp(v44, "STMX", 4uLL))
    {
      v45 = 11;
    }
    else
    {
      v45 = 0;
    }
    filter = 0;
    LODWORD(v309) = 0;
    *((_QWORD *)&__N + 1) = 0;
    v46 = *((_QWORD *)this + 18);
    if (v46 != *((_QWORD *)this + 19))
    {
      std::allocate_shared[abi:ne180100]<roost::contiguous_storage<float>,std::allocator<roost::contiguous_storage<float>>,unsigned long,unsigned long,void>(&v342, *((_QWORD *)this + 17), *((_QWORD *)this + 18));
      v47 = v342;
      v48 = (std::__shared_weak_count *)v343;
      v342 = 0;
      *(_QWORD *)&v343 = 0;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v52 = v47[2];
      v51 = v47[3];
      v53 = v47[1];
      LOBYTE(v318) = 0;
      *(_QWORD *)&v319 = v53;
      *((_QWORD *)&v319 + 1) = v52;
      v320 = v52;
      v321 = v47;
      v322 = (uint64_t)v48;
      if (v48)
      {
        v54 = (unint64_t *)&v48->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
        v323 = v51;
        do
          v56 = __ldaxr(v54);
        while (__stlxr(v56 - 1, v54));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        do
          v57 = __ldaxr(v54);
        while (__stlxr(v57 - 1, v54));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      else
      {
        v323 = v51;
      }
      v171 = (std::__shared_weak_count *)v343;
      if ((_QWORD)v343)
      {
        v172 = (unint64_t *)(v343 + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      if (*((_QWORD *)&v319 + 1) != *((_QWORD *)this + 18))
      {
        v240 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v240, "Size mismatch");
        v240->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(v240, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
      }
      v336 = &v318;
      v337 = v323;
      LOBYTE(v338) = (_BYTE)v318;
      v339.i64[0] = *((_QWORD *)&v319 + 1);
      v339.i64[1] = v319;
      v340 = 1;
      v341 = v320;
      roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)&v342, v323, &v336);
      v174 = *((_BYTE *)this + 128);
      v175 = *((_QWORD *)this + 19);
      v176 = *((_QWORD *)this + 22);
      v336 = (char **)((char *)this + 128);
      v337 = v176;
      LOBYTE(v338) = v174;
      v254 = *(int8x16_t *)((char *)this + 136);
      v339 = vextq_s8(v254, v254, 8uLL);
      v340 = 1;
      v341 = v175;
      roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)&v330, v176, &v336);
      roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)v324, v176 + 4 * v175 * v254.i64[0], &v336);
      for (j = v334; j != (float *)v328; v334 = j)
      {
        *(_OWORD *)v284 = v330;
        *(_QWORD *)&v284[16] = v331;
        *(_QWORD *)__lda = v332;
        v286 = v333;
        if (v333)
        {
          v178 = (unint64_t *)&v333->__shared_owners_;
          do
            v179 = __ldxr(v178);
          while (__stxr(v179 + 1, v178));
          j = v334;
        }
        v287 = (uint64_t)j;
        if ((_QWORD)v343 != *(_QWORD *)&v284[8])
        {
          v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v239, "Size mismatch");
          v239->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
          __cxa_throw(v239, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
        }
        cblas_scopy(v343, j, *(const int *)&v284[16], (float *)v346, SDWORD2(v343));
        v346 = (std::__shared_weak_count *)((char *)v346 + 4 * v347);
        if (v286)
        {
          v180 = &v286->__shared_owners_;
          do
            v181 = __ldaxr((unint64_t *)v180);
          while (__stlxr(v181 - 1, (unint64_t *)v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
            std::__shared_weak_count::__release_weak(v286);
          }
        }
        j = &v334[v335];
      }
      v182 = v327;
      if (v327)
      {
        v183 = (unint64_t *)&v327->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v185 = v333;
      if (v333)
      {
        v186 = (unint64_t *)&v333->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      v188 = v345;
      if (v345)
      {
        v189 = (unint64_t *)&v345->__shared_owners_;
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      *((_BYTE *)this + 128) = (_BYTE)v318;
      *(_OWORD *)((char *)this + 136) = v319;
      v191 = (uint64_t)v321;
      *((_QWORD *)this + 19) = v320;
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)this + 20, v191, v322);
      v192 = (std::__shared_weak_count *)v322;
      *((_QWORD *)this + 22) = v323;
      if (v192)
      {
        v193 = (unint64_t *)&v192->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v46 = *((_QWORD *)this + 18);
    }
    roost::_layer_base_data::create_filter((uint64_t)&filter, *((_QWORD *)this + 22), (uint64_t)__Y, v46, *((_QWORD *)this + 17), v45, 0);
    v195 = *((_QWORD *)this + 1);
    v196 = (std::__shared_weak_count *)operator new(0x38uLL);
    v196->__shared_owners_ = 0;
    v197 = (unint64_t *)&v196->__shared_owners_;
    v196->__shared_weak_owners_ = 0;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936258;
    v198 = __N;
    v199 = (std::__shared_weak_count_vtbl *)operator new[]();
    v196[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E020;
    v196[1].__shared_owners_ = v195;
    v196[1].__shared_weak_owners_ = v198;
    v196[2].__vftable = v199;
    do
      v200 = __ldxr(v197);
    while (__stxr(v200 + 1, v197));
    LOBYTE(v342) = 0;
    *(_QWORD *)&v343 = v195;
    *((_QWORD *)&v343 + 1) = v198;
    v344 = v198;
    v345 = v196 + 1;
    v346 = v196;
    do
      v201 = __ldxr(v197);
    while (__stxr(v201 + 1, v197));
    v347 = (uint64_t)v199;
    do
      v202 = __ldaxr(v197);
    while (__stlxr(v202 - 1, v197));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
    do
      v203 = __ldaxr(v197);
    while (__stlxr(v203 - 1, v197));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
    v204 = filter;
    if (filter)
    {
      v205 = *((_QWORD *)&v343 + 1);
      if (*((_QWORD *)&v343 + 1) != v344)
      {
        std::allocate_shared[abi:ne180100]<roost::contiguous_storage<float>,std::allocator<roost::contiguous_storage<float>>,unsigned long,unsigned long,void>(&v336, v343, *((uint64_t *)&v343 + 1));
        v207 = (uint64_t)v336;
        v206 = (std::__shared_weak_count *)v337;
        v336 = 0;
        v337 = 0;
        if (v206)
        {
          v208 = (unint64_t *)&v206->__shared_owners_;
          do
            v209 = __ldxr(v208);
          while (__stxr(v209 + 1, v208));
          v210 = *(_QWORD *)(v207 + 24);
          v211 = *(_OWORD *)(v207 + 8);
          v212 = (unint64_t *)&v206->__shared_owners_;
          do
            v213 = __ldxr(v212);
          while (__stxr(v213 + 1, v212));
          do
            v214 = __ldaxr(v212);
          while (__stlxr(v214 - 1, v212));
          if (!v214)
          {
            v255 = v211;
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
            v211 = v255;
          }
          do
            v215 = __ldaxr(v212);
          while (__stlxr(v215 - 1, v212));
          if (!v215)
          {
            v256 = v211;
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
            v211 = v256;
          }
        }
        else
        {
          v210 = *(_QWORD *)(v207 + 24);
          v211 = *(_OWORD *)(v207 + 8);
        }
        v221 = (std::__shared_weak_count *)v337;
        if (v337)
        {
          v222 = (unint64_t *)(v337 + 8);
          do
            v223 = __ldaxr(v222);
          while (__stlxr(v223 - 1, v222));
          if (!v223)
          {
            v257 = v211;
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
            v211 = v257;
          }
        }
        LOBYTE(v342) = 0;
        v343 = v211;
        v344 = *((_QWORD *)&v211 + 1);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v345, v207, (uint64_t)v206);
        v347 = v210;
        if (v206)
        {
          v224 = (unint64_t *)&v206->__shared_owners_;
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v204 = filter;
        v205 = v344;
      }
      BNNSFilterApplyBatch(v204, *((_QWORD *)this + 1), *((const void **)this + 6), *((_QWORD *)this + 3), (void *)v347, v205);
      v216 = (uint64_t)v345;
      v217 = v346;
    }
    else
    {
      v216 = (uint64_t)v345;
      v217 = v346;
      if (*((_QWORD *)this + 1))
      {
        if (v346)
        {
          v218 = (unint64_t *)&v346->__shared_owners_;
          do
            v219 = __ldxr(v218);
          while (__stxr(v219 + 1, v218));
        }
        v220 = v347;
        LOBYTE(v336) = 1;
        v337 = *((_QWORD *)&v343 + 1);
        v338 = 1;
        v339.i64[0] = v216;
        v339.i64[1] = (uint64_t)v217;
        if (v217)
        {
          v241 = (unint64_t *)&v217->__shared_owners_;
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
          v340 = v220;
          do
            v243 = __ldaxr(v241);
          while (__stlxr(v243 - 1, v241));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
          }
        }
        else
        {
          v340 = v347;
        }
        v244 = *((_QWORD *)this + 4);
        v245 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
        if (v245)
        {
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldxr(v246);
          while (__stxr(v247 + 1, v246));
        }
        v248 = (float *)*((_QWORD *)this + 6);
        v249 = *((_QWORD *)this + 2);
        LOBYTE(v330) = 1;
        *((_QWORD *)&v330 + 1) = v249;
        v331 = 1;
        v332 = v244;
        v333 = v245;
        if (v245)
        {
          v250 = (unint64_t *)&v245->__shared_owners_;
          do
            v251 = __ldxr(v250);
          while (__stxr(v251 + 1, v250));
          v334 = v248;
          do
            v252 = __ldaxr(v250);
          while (__stlxr(v252 - 1, v250));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
        else
        {
          v334 = v248;
        }
        v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v253, "Cannot emulate this activation function");
        v253->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        __cxa_throw(v253, (struct type_info *)off_1EA909360, MEMORY[0x1E0DE42C0]);
      }
    }
    v312[0] = (char)v342;
    v313 = v343;
    v314 = v344;
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v315, v216, (uint64_t)v217);
    v226 = v346;
    v317 = (char *)v347;
    if (v346)
    {
      v227 = (unint64_t *)&v346->__shared_owners_;
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    roost::_layer_base_data::~_layer_base_data(&filter);
    v168 = v281;
    if (v281)
    {
      v229 = (unint64_t *)&v281->__shared_owners_;
      do
        v170 = __ldaxr(v229);
      while (__stlxr(v170 - 1, v229));
      goto LABEL_311;
    }
  }
  *((_BYTE *)this + 56) = v312[0];
  *((_OWORD *)this + 4) = v313;
  v230 = v315;
  *((_QWORD *)this + 10) = v314;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)this + 11, v230, (uint64_t)v316);
  v231 = v316;
  *((_QWORD *)this + 13) = v317;
  if (v231)
  {
    v232 = (unint64_t *)&v231->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
}

void sub_1DEA70A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v46 - 184);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v45);
  roost::_layer_base_data::~_layer_base_data((void **)&STACK[0x210]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a15);
  _Unwind_Resume(a1);
}

void roost::_layer_base_data::~_layer_base_data(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    BNNSFilterDestroy(v1);
}

void roost::_matrix_enumerator<float>::operator roost::matrix<float>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  float *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  float *v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  float *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::runtime_error *exception;
  _QWORD v222[2];
  char v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  float *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  float *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  float *v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  float *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  float *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  float *v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  float *v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  float *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  float *v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  float *v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  float *v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  float *v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  float *v303;
  uint64_t v304;
  int __N[4];
  int __incY[2];
  uint64_t v307;
  std::__shared_weak_count *v308;
  float *__Y;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  float *v315;
  uint64_t v316;
  __int128 v317;
  int __incX[2];
  uint64_t v319;
  std::__shared_weak_count *v320;
  float *__X;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  float *v331;
  uint64_t v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  float *v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;

  v4 = a2[6];
  if (v4 == 1)
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 32);
    v7 = *(std::__shared_weak_count **)(*a2 + 40);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v5 = *a2;
    }
    v10 = a2[1];
    v11 = *(_QWORD *)(v5 + 24);
    *(_BYTE *)a1 = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    if (!v7)
    {
      *(_QWORD *)(a1 + 48) = v10;
      return;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *(_QWORD *)(a1 + 48) = v10;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
LABEL_22:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  if (a2[5] == 1)
  {
    v15 = *(_QWORD *)(*a2 + 32);
    v7 = *(std::__shared_weak_count **)(*a2 + 40);
    if (v7)
    {
      v16 = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v4 = a2[6];
    }
    v18 = a2[1];
    *(_BYTE *)a1 = *((_BYTE *)a2 + 16);
    *(int8x16_t *)(a1 + 8) = vextq_s8(*(int8x16_t *)(a2 + 3), *(int8x16_t *)(a2 + 3), 8uLL);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v7;
    if (!v7)
    {
      *(_QWORD *)(a1 + 48) = v18;
      return;
    }
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(a1 + 48) = v18;
    do
      v14 = __ldaxr(v19);
    while (__stlxr(v14 - 1, v19));
    goto LABEL_22;
  }
  v21 = a2[3];
  v22 = a2[4];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  roost::matrix<float>::resize_storage(a1, v21, v22);
  roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)&v239, a2[1], a2);
  roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)&v233, a2[1] + 4 * a2[6] * a2[4], a2);
  v23 = *(_BYTE *)a1;
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 48);
  v222[0] = a1;
  v222[1] = v25;
  v223 = v23;
  v224 = *(_OWORD *)(a1 + 8);
  v225 = v24;
  v226 = 1;
  roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)&v227, v25, v222);
  v257 = v239;
  v26 = v241;
  v258 = v240;
  v259 = v241;
  v27 = v242;
  v260 = v242;
  if (v242)
  {
    v28 = (unint64_t *)&v242->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = v243;
  v31 = v244;
  v261 = v243;
  v262 = v244;
  v251 = v233;
  v32 = v235;
  v252 = v234;
  v253 = v235;
  v33 = v236;
  v254 = v236;
  if (v236)
  {
    v34 = (unint64_t *)&v236->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = v237;
  v37 = v238;
  v255 = v237;
  v256 = v238;
  v245 = v227;
  v38 = v229;
  v246 = v228;
  v247 = v229;
  v39 = v230;
  v248 = v230;
  if (v230)
  {
    v40 = (unint64_t *)&v230->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = v231;
  v43 = v232;
  v249 = v231;
  v250 = v232;
  v275 = v257;
  v276 = v258;
  v277 = v26;
  v278 = v27;
  if (v27)
  {
    v44 = (unint64_t *)&v27->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v279 = v30;
  v280 = v31;
  v269 = v251;
  v270 = v252;
  v271 = v32;
  v272 = v33;
  if (v33)
  {
    v46 = (unint64_t *)&v33->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v273 = v36;
  v274 = v37;
  v263 = v245;
  v264 = v246;
  v265 = v38;
  v266 = v39;
  if (v39)
  {
    v48 = (unint64_t *)&v39->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v267 = v42;
  v268 = v43;
  v293 = v275;
  v294 = v276;
  v295 = v26;
  v296 = v27;
  if (v27)
  {
    v50 = (unint64_t *)&v27->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v297 = v30;
  v298 = v31;
  v287 = v269;
  v288 = v270;
  v289 = v32;
  v290 = v33;
  if (v33)
  {
    v52 = (unint64_t *)&v33->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v291 = v36;
  v292 = v37;
  v281 = v263;
  v282 = v264;
  v283 = v38;
  v284 = v39;
  if (v39)
  {
    v54 = (unint64_t *)&v39->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v285 = v42;
  v286 = v43;
  v325 = v293;
  v326 = v294;
  if (v27)
  {
    v56 = (unint64_t *)&v27->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v323 = v287;
  v324 = v288;
  if (v33)
  {
    v58 = (unint64_t *)&v33->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  if (v27)
  {
    v60 = (unint64_t *)&v27->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    do
      v62 = __ldxr(v60);
    while (__stxr(v62 + 1, v60));
    v317 = v325;
    *(_QWORD *)__incX = v326;
    do
      v63 = __ldxr(v60);
    while (__stxr(v63 + 1, v60));
    do
      v64 = __ldaxr(v60);
    while (__stlxr(v64 - 1, v60));
    if (v64)
    {
      if (v33)
      {
LABEL_66:
        v65 = (unint64_t *)&v33->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        do
          v67 = __ldxr(v65);
        while (__stxr(v67 + 1, v65));
        v311 = v323;
        v312 = v324;
        do
          v68 = __ldxr(v65);
        while (__stxr(v68 + 1, v65));
        do
          v69 = __ldaxr(v65);
        while (__stlxr(v69 - 1, v65));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        goto LABEL_78;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v33)
        goto LABEL_66;
    }
  }
  else
  {
    v317 = v325;
    *(_QWORD *)__incX = v326;
    if (v33)
      goto LABEL_66;
  }
  v311 = v323;
  v312 = v324;
LABEL_78:
  v327 = v317;
  v328 = *(_QWORD *)__incX;
  v329 = v26;
  v330 = v27;
  if (v27)
  {
    v70 = (unint64_t *)&v27->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v331 = v30;
  v332 = v31;
  v333 = v311;
  v334 = v312;
  v335 = v32;
  v336 = v33;
  if (v33)
  {
    v72 = (unint64_t *)&v33->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v337 = v36;
    v338 = v37;
    do
      v74 = __ldaxr(v72);
    while (__stlxr(v74 - 1, v72));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    do
      v75 = __ldaxr(v72);
    while (__stlxr(v75 - 1, v72));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    v337 = v36;
    v338 = v37;
  }
  if (v27)
  {
    v76 = (unint64_t *)&v27->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v33)
  {
    v79 = (unint64_t *)&v33->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v27)
  {
    v81 = (unint64_t *)&v27->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v317 = v327;
  *(_QWORD *)__incX = v328;
  v319 = v329;
  v320 = v330;
  if (v330)
  {
    v83 = (unint64_t *)&v330->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  __X = v331;
  v322 = v332;
  v311 = v333;
  v312 = v334;
  v313 = v335;
  v314 = v336;
  if (v336)
  {
    v85 = (unint64_t *)&v336->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v315 = v337;
  v316 = v338;
  v299 = v281;
  v87 = v283;
  v300 = v282;
  v301 = v283;
  v88 = v284;
  v302 = v284;
  if (v284)
  {
    v89 = (unint64_t *)&v284->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    v91 = v285;
    v92 = v286;
    v303 = v285;
    v304 = v286;
    v339 = v299;
    v340 = v300;
    do
      v93 = __ldxr(v89);
    while (__stxr(v93 + 1, v89));
    *(_OWORD *)__N = v339;
    *(_QWORD *)__incY = v340;
    v307 = v87;
    v308 = v88;
    do
      v94 = __ldxr(v89);
    while (__stxr(v94 + 1, v89));
    __Y = v91;
    v310 = v92;
    do
      v95 = __ldaxr(v89);
    while (__stlxr(v95 - 1, v89));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  else
  {
    v303 = v285;
    v304 = v286;
    *(_OWORD *)__N = v281;
    *(_QWORD *)__incY = v282;
    v307 = v283;
    v308 = 0;
    __Y = v285;
    v310 = v286;
  }
  v96 = __X;
  v97 = v315;
  if (__X != v315)
  {
    v98 = *(_QWORD *)&__N[2];
    v99 = *((_QWORD *)&v317 + 1);
    do
    {
      if (v98 != v99)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Size mismatch");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
      }
      v100 = __Y;
      cblas_scopy(v98, v96, __incX[0], __Y, __incY[0]);
      v96 += v322;
      __X = v96;
      __Y = &v100[v310];
    }
    while (v96 != v97);
  }
  v101 = v320;
  if (v320)
  {
    v102 = (unint64_t *)&v320->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = v308;
  if (v308)
  {
    v105 = (unint64_t *)&v308->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
    do
      v107 = __ldaxr(v105);
    while (__stlxr(v107 - 1, v105));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v108 = v302;
  if (v302)
  {
    v109 = (unint64_t *)&v302->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v314;
  if (v314)
  {
    v112 = (unint64_t *)&v314->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v320;
  if (v320)
  {
    v115 = (unint64_t *)&v320->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v296;
  if (v296)
  {
    v118 = (unint64_t *)&v296->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  if (v101)
  {
    v120 = (unint64_t *)&v101->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  if (v117)
  {
    v122 = (unint64_t *)&v117->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  if (v101)
  {
    v124 = (unint64_t *)&v101->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  if (v117)
  {
    v126 = (unint64_t *)&v117->__shared_owners_;
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  if (v101)
  {
    v128 = (unint64_t *)&v101->__shared_owners_;
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
    do
      v130 = __ldxr(v128);
    while (__stxr(v130 + 1, v128));
    do
      v131 = __ldaxr(v128);
    while (__stlxr(v131 - 1, v128));
    v132 = v101;
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      v132 = v101;
    }
  }
  else
  {
    v132 = 0;
  }
  if (v117)
  {
    v133 = (unint64_t *)&v117->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v101)
  {
    v135 = (unint64_t *)&v101->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v117)
  {
    v137 = (unint64_t *)&v117->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v139 = v284;
  if (v284)
  {
    v140 = (unint64_t *)&v284->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  if (v104)
  {
    v142 = (unint64_t *)&v104->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  if (v139)
  {
    v144 = (unint64_t *)&v139->__shared_owners_;
    do
      v145 = __ldxr(v144);
    while (__stxr(v145 + 1, v144));
  }
  if (v104)
  {
    v146 = (unint64_t *)&v104->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
    do
      v148 = __ldxr(v146);
    while (__stxr(v148 + 1, v146));
    do
      v149 = __ldaxr(v146);
    while (__stlxr(v149 - 1, v146));
    v150 = v104;
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
      v150 = v104;
    }
  }
  else
  {
    v150 = 0;
  }
  if (v139)
  {
    v151 = (unint64_t *)&v139->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if (v132)
  {
    v153 = (unint64_t *)&v132->__shared_owners_;
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
  if (v150)
  {
    v155 = (unint64_t *)&v150->__shared_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    do
      v157 = __ldaxr(v155);
    while (__stlxr(v157 - 1, v155));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v104)
  {
    v158 = (unint64_t *)&v104->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v139)
  {
    v160 = (unint64_t *)&v139->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if (v132)
  {
    v162 = (unint64_t *)&v132->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v101)
  {
    v164 = (unint64_t *)&v101->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  if (v117)
  {
    v166 = (unint64_t *)&v117->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (v104)
  {
    v168 = (unint64_t *)&v104->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v101)
  {
    v170 = (unint64_t *)&v101->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v172 = v336;
  if (v336)
  {
    v173 = (unint64_t *)&v336->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = v330;
  if (v330)
  {
    v176 = (unint64_t *)&v330->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v284;
  if (v284)
  {
    v179 = (unint64_t *)&v284->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v290;
  if (v290)
  {
    v182 = (unint64_t *)&v290->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v296;
  if (v296)
  {
    v185 = (unint64_t *)&v296->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v266;
  if (v266)
  {
    v188 = (unint64_t *)&v266->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = v272;
  if (v272)
  {
    v191 = (unint64_t *)&v272->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = v278;
  if (v278)
  {
    v194 = (unint64_t *)&v278->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v150)
  {
    v196 = (unint64_t *)&v150->__shared_owners_;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
    do
      v198 = __ldaxr(v196);
    while (__stlxr(v198 - 1, v196));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (v132)
  {
    v199 = (unint64_t *)&v132->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v201 = v248;
  if (v248)
  {
    v202 = (unint64_t *)&v248->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v254;
  if (v254)
  {
    v205 = (unint64_t *)&v254->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = v260;
  if (v260)
  {
    v208 = (unint64_t *)&v260->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  if (v150)
  {
    v210 = (unint64_t *)&v150->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v212 = v230;
  if (v230)
  {
    v213 = (unint64_t *)&v230->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v236;
  if (v236)
  {
    v216 = (unint64_t *)&v236->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = v242;
  if (v242)
  {
    v219 = (unint64_t *)&v242->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
}

void sub_1DEA72040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a20);
  _Unwind_Resume(a1);
}

void roost::multiply_mm<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;

  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a3 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Size mismatch");
    __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
  }
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  roost::matrix<float>::resize_storage(a1, v6, v7);
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, *(_DWORD *)(a2 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a2 + 16), 1.0, *(const float **)(a2 + 48), *(_DWORD *)(a2 + 24), *(const float **)(a3 + 48), *(_QWORD *)(a3 + 24), 0.0, *(float **)(a1 + 48), *(_QWORD *)(a1 + 24));
}

void sub_1DEA721F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void roost::vector<float>::resize_storage(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  float *v6;
  const float *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)operator new(0x38uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936290;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E040;
  v4[1].__shared_owners_ = 1;
  v4[1].__shared_weak_owners_ = a2;
  v6 = (float *)operator new[]();
  v4[2].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v7 = *(const float **)(a1 + 40);
  if (v7)
    cblas_scopy(*(_DWORD *)(a1 + 8), v7, *(_DWORD *)(a1 + 16), v6, 1);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), (uint64_t)&v4[1], (uint64_t)v4);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)a1 = 0;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1DEA72344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t roost::vector_activation_layer<float>::vector_activation_layer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  roost::_layer_base_data::create_filter(a1, 0, 0, a2, a2, a3, a4);
  return a1;
}

void sub_1DEA723B4(_Unwind_Exception *a1)
{
  void **v1;

  roost::_layer_base_data::~_layer_base_data(v1);
  _Unwind_Resume(a1);
}

void roost::multiply_accumulate_vm<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *exception;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 != *(_QWORD *)(a1 + 8) || (v5 = *(_QWORD *)(a2 + 16), v5 != *(_QWORD *)(a3 + 8)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Size mismatch");
    __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
  }
  cblas_sgemv(CblasRowMajor, CblasTrans, v4, v5, 1.0, *(const float **)(a2 + 48), *(_DWORD *)(a2 + 24), *(const float **)(a1 + 40), *(_DWORD *)(a1 + 16), 1.0, *(float **)(a3 + 40), *(_QWORD *)(a3 + 16));
}

void sub_1DEA7248C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t roost::_layer_base<float>::apply(void *a1, const void *a2, void *a3)
{
  std::logic_error *exception;

  if (!a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception);
    __cxa_throw(exception, (struct type_info *)off_1EA909360, MEMORY[0x1E0DE42C0]);
  }
  return BNNSFilterApply(a1, a2, a3);
}

void sub_1DEA724E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "Cannot emulate this activation function");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  return result;
}

uint64_t roost::_layer_base_data::create_filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD v16[3];
  _QWORD v17[3];

  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 24) = a7;
  v16[2] = 0;
  v17[0] = a4;
  v17[1] = 0x3F80000000010020;
  v17[2] = 0;
  v16[0] = a5;
  v16[1] = 0x3F80000000010020;
  v15[0] = xmmword_1DED03790;
  v15[1] = unk_1DED037A0;
  if (a2)
  {
    v11[5] = 0;
    *(_OWORD *)&v11[1] = 0u;
    v9 = a4;
    *(_QWORD *)&v10 = a5;
    *((_QWORD *)&v10 + 1) = a2;
    v11[0] = 0x3F80000000010020;
    v11[3] = a3;
    v11[4] = 0x3F80000000010020;
    v11[6] = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v11[7] = a6;
    LODWORD(v12) = a7;
    result = MEMORY[0x1DF0EC72C](v17, v16, &v9, v15);
  }
  else
  {
    v10 = 0u;
    memset(v11, 0, 24);
    v9 = a6;
    LODWORD(v10) = a7;
    result = MEMORY[0x1DF0EC738](v17, v16, &v9, v15);
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t roost::_matrix_iterator<float const>::_matrix_iterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(*a3 + 32);
  v6 = *(std::__shared_weak_count **)(*a3 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = a3[3];
  v10 = a3[5];
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_QWORD *)(a1 + 40) = a2;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = a2;
  }
  *(_QWORD *)(a1 + 48) = a3[6];
  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<roost::contiguous_storage<float>,std::allocator<roost::contiguous_storage<float>>,unsigned long,unsigned long,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA936258;
  result = operator new[]();
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = result;
  v6[3] = &off_1EA92E020;
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_1DEA7275C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *roost::contiguous_storage<float>::~contiguous_storage(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1EA92E040;
  v2 = a1[3];
  if (v2)
    MEMORY[0x1DF0ECFFC](v2, 0x1000C8052888210);
  return a1;
}

void roost::contiguous_storage<float>::~contiguous_storage(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1EA92E040;
  v1 = a1[3];
  if (v1)
    MEMORY[0x1DF0ECFFC](v1, 0x1000C8052888210);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<roost::contiguous_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<roost::contiguous_storage<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<roost::contiguous_storage<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void to_roost<float,float>(uint64_t a1, const float ***a2)
{
  const float **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const float **v8;
  const float **v9;
  uint64_t v10;
  const float *v11;
  const float *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error *exception;
  int __N[2];
  float *__Y;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v4 = *a2;
  v5 = (char *)a2[1] - (char *)*a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  if (v5)
    v7 = v4[1] - *v4;
  else
    v7 = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  roost::matrix<float>::resize_storage(a1, v6, v7);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = 0;
    do
    {
      v11 = *v8;
      v12 = v8[1];
      v13 = (std::__shared_weak_count *)operator new(0x38uLL);
      v14 = v13;
      v15 = v12 - v11;
      v13->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      v13->__shared_weak_owners_ = 0;
      v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936220;
      v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E000;
      v13[1].__shared_owners_ = 1;
      v13[1].__shared_weak_owners_ = v15;
      v13[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v35 = v15;
      v36 = v13;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
      }
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v21 = *(std::__shared_weak_count **)(a1 + 40);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(a1 + 24) * v10;
      *(_QWORD *)__N = *(_QWORD *)(a1 + 16);
      if (v21)
      {
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        __Y = (float *)v24;
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      else
      {
        __Y = (float *)(*(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(a1 + 24) * v10);
      }
      if (*(_QWORD *)__N != v35)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Size mismatch");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
      }
      cblas_scopy(__N[0], v11, 1, __Y, 1);
      if (v21)
      {
        v28 = (unint64_t *)&v21->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v36)
      {
        v30 = (unint64_t *)&v36->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      ++v10;
      v8 += 3;
    }
    while (v8 != v9);
  }
}

void sub_1DEA72B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

void to_std<float,float>(uint64_t *a1, char *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int8x16_t v24;
  char v25[32];
  std::__shared_weak_count *v26;
  _DWORD *v27;
  char v28[8];
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a1 + 2;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    if (v5 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v37.i64[1] = (uint64_t)(a1 + 2);
    v34 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), v5);
    v35 = (uint64_t)v34;
    v36 = v34;
    v37.i64[0] = (uint64_t)v34 + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v34);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v34);
  }
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 6);
  v34 = a2;
  v35 = v9;
  LOBYTE(v36) = v7;
  v24 = *(int8x16_t *)(a2 + 8);
  v37 = vextq_s8(v24, v24, 8uLL);
  v38 = 1;
  v39 = v8;
  roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)v28, v9, &v34);
  roost::_matrix_iterator<float const>::_matrix_iterator((uint64_t)v25, v9 + 4 * v8 * v24.i64[0], &v34);
  v10 = v32;
  if (v32 != v27)
  {
    v11 = (_QWORD *)a1[1];
    do
    {
      v12 = v30;
      v13 = &v10[v29 * v30];
      if ((unint64_t)v11 >= *v4)
      {
        v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *a1) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((*v4 - *a1) >> 3) > v15)
          v15 = 0x5555555555555556 * ((*v4 - *a1) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((*v4 - *a1) >> 3) >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v15;
        v44 = v4;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v16);
        else
          v17 = 0;
        v40 = v17;
        v41 = &v17[24 * v14];
        v42 = v41;
        v43 = &v17[24 * v16];
        std::vector<float>::vector<roost::_vector_iterator<float>,0>(v41, v10, v12, v13, v12);
        v42 += 24;
        std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v40);
        v11 = (_QWORD *)a1[1];
        std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v40);
      }
      else
      {
        std::vector<float>::vector<roost::_vector_iterator<float>,0>(v11, v10, v30, &v10[v29 * v30], v30);
        v11 += 3;
        a1[1] = (uint64_t)v11;
      }
      a1[1] = (uint64_t)v11;
      v10 = &v32[v33];
      v32 = v10;
    }
    while (v10 != v27);
  }
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1DEA72E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&a26);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector<roost::_vector_iterator<float>,0>(_QWORD *a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v7;
  unint64_t v9;
  _DWORD *i;
  std::runtime_error *exception;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a5 != a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Stride mismatch");
    __cxa_throw(exception, (struct type_info *)off_1EA909358, MEMORY[0x1E0DE42B0]);
  }
  v7 = a2;
  v9 = (a4 - a2) / a3;
  if (v9)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    for (i = (_DWORD *)a1[1]; v7 != a4; v7 += a3)
      *i++ = *v7;
    a1[1] = i;
  }
  return a1;
}

void sub_1DEA72F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void NNetExtractor::compute_output(uint64_t a1, const float ***a2)
{
  const float **v4;
  const float **v5;
  unint64_t v6;
  uint64_t v7;
  const float **v8;
  uint64_t v9;
  _QWORD *v10;
  const float *v11;
  size_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  vDSP_Length __N;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  const float *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSObject *global_queue;
  size_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  const float *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  int v55;
  int v56;
  vDSP_Length v57;
  vDSP_Length v58;
  uint64_t v59;
  vDSP_Length v60;
  uint64_t v61;
  float *v62;
  float *v63;
  vDSP_Length v64;
  float v65;
  void *exception;
  _QWORD block[8];
  int v68;
  uint8_t buf[8];
  __int128 v70;
  __n128 (*v71)(_QWORD *, uint64_t);
  void (*v72)(uint64_t);
  std::__shared_weak_count *v73;
  uint64_t v74;
  __int128 __B;
  const float **v76;
  void **v77[2];

  v4 = *a2;
  v5 = a2[1];
  if (v5 == *a2)
  {
    v4 = a2[1];
  }
  else
  {
    v6 = 0;
    do
    {
      if (((*(_WORD *)(a1 + 232) - 1) & 0x8000) == 0)
      {
        v7 = (unsigned __int16)(*(_WORD *)(a1 + 232) - 1);
        do
        {
          v8 = &(*a2)[3 * v6];
          v9 = (uint64_t)&(*v8)[*(unsigned int *)(*(_QWORD *)(a1 + 272) + 4 * v7)];
          v11 = v8[1];
          v10 = v8 + 1;
          v12 = (size_t)v11 - v9 - 4;
          if (v11 != (const float *)(v9 + 4))
            memmove((void *)&(*a2)[3 * v6][*(unsigned int *)(*(_QWORD *)(a1 + 272) + 4 * v7)], (const void *)(v9 + 4), v12);
          *v10 = v9 + v12;
        }
        while (v7-- > 0);
        v4 = *a2;
        v5 = a2[1];
      }
      ++v6;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (v5 - v4));
  }
  v14 = (char *)v4[1] - (char *)*v4;
  if ((v14 >> 2) != *(_DWORD *)(a1 + 240) >> 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)buf, "Dimensions of data entering compute output is incorrect, computing mdn output will fail stopping datadim, in_norms_size_ follow.");
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v5 == v4)
  {
    v18 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    __N = (v14 >> 2);
    do
    {
      vDSP_vma(v4[v15], 1, *(const float **)(a1 + 304), 1, (const float *)(*(_QWORD *)(a1 + 304) + 4 * __N), 1, (float *)v4[v15], 1, __N);
      ++v16;
      v4 = *a2;
      v18 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
      v15 += 3;
    }
    while (v16 < v18);
  }
  v19 = v18 << 32;
  if ((*(_WORD *)a1 & 0xFFFE) != 2)
  {
    global_queue = dispatch_get_global_queue(2, 0);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&v70 = buf;
    *((_QWORD *)&v70 + 1) = 0x4002000000;
    v71 = __Block_byref_object_copy__3866;
    v72 = __Block_byref_object_dispose__3867;
    v34 = (int)v18;
    LODWORD(v77[0]) = 0;
    std::vector<float>::vector(&__B, 1uLL, v77);
    std::vector<std::vector<float>>::vector(&v73, (int)v18, (uint64_t)&__B);
    if ((_QWORD)__B)
    {
      *((_QWORD *)&__B + 1) = __B;
      operator delete((void *)__B);
    }
    if (!*(_DWORD *)(a1 + 236))
    {
LABEL_64:
      _Block_object_dispose(buf, 8);
      *(_QWORD *)&__B = &v73;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
      goto LABEL_65;
    }
    v35 = 0;
    v36 = 0;
    if (v34 <= 1)
      v37 = 1;
    else
      v37 = v34;
    while (1)
    {
      v38 = *(_QWORD *)(a1 + 296);
      v39 = *(_DWORD *)(v38 + 4 * v35);
      if (v39 >= 2)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZN13NNetExtractor14compute_outputERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke;
        block[3] = &unk_1EA94BBF0;
        block[4] = buf;
        block[5] = a1;
        block[6] = v35;
        block[7] = a2;
        v68 = v36;
        dispatch_apply(v34, global_queue, block);
        v38 = *(_QWORD *)(a1 + 296);
        v39 = *(_DWORD *)(v38 + 4 * v35);
        v40 = *(_QWORD **)(v70 + 40);
        v36 += ((v40[1] - *v40) >> 2) + ((unint64_t)((char *)(*a2)[1] - (char *)**a2) >> 2) * v39;
        if ((const float ***)(v70 + 40) != a2)
        {
          std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)a2, (uint64_t)v40, *(_QWORD *)(v70 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v70 + 48) - (_QWORD)v40) >> 3));
          v38 = *(_QWORD *)(a1 + 296);
          v39 = *(_DWORD *)(v38 + 4 * v35);
        }
      }
      v41 = *(_DWORD *)(a1 + 236);
      if (v39 != 1)
        goto LABEL_63;
      v42 = v41 - 1;
      if (v35 < v42)
      {
        LODWORD(__B) = 0;
        if (v19)
        {
          v43 = 0;
          v44 = v37;
          do
          {
            vDSP_vthr((*a2)[v43], 1, (const float *)&__B, (float *)(*a2)[v43], 1, (*a2)[v43 + 1] - (*a2)[v43]);
            v43 += 3;
            --v44;
          }
          while (v44);
          v38 = *(_QWORD *)(a1 + 296);
          v41 = *(_DWORD *)(a1 + 236);
        }
        if (*(_DWORD *)(v38 + 4 * v35) != 1)
          goto LABEL_63;
        v42 = v41 - 1;
      }
      if (v35 == v42 && v19 != 0)
      {
        v46 = 0;
        v47 = v37;
        do
        {
          v48 = (*a2)[v46];
          v49 = (unint64_t)((char *)(*a2)[v46 + 1] - (char *)v48) >> 3;
          LODWORD(__B) = v49;
          vvexpf((float *)&v48[(int)v49], &v48[(int)v49], (const int *)&__B);
          v46 += 3;
          --v47;
        }
        while (v47);
        v41 = *(_DWORD *)(a1 + 236);
      }
LABEL_63:
      if (++v35 >= v41)
        goto LABEL_64;
    }
  }
  to_roost<float,float>((uint64_t)buf, a2);
  if (*(_DWORD *)(a1 + 236) >= 2u)
  {
    v20 = 0;
    if ((unint64_t)(int)v18 <= 1)
      v21 = 1;
    else
      v21 = (int)v18;
    do
    {
      v22 = *(_QWORD *)(a1 + 208);
      if (v20)
      {
        v22 += 248 * v20;
        *(_BYTE *)v22 = *(_BYTE *)(v22 - 192);
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v22 - 184);
        v23 = *(_QWORD *)(v22 - 160);
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v22 - 168);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v22 + 32), v23, *(_QWORD *)(v22 - 152));
        v24 = (uint64_t *)(v22 - 144);
      }
      else
      {
        *(_BYTE *)v22 = buf[0];
        *(_OWORD *)(v22 + 8) = v70;
        *(_QWORD *)(v22 + 24) = v71;
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v22 + 32), (uint64_t)v72, (uint64_t)v73);
        v24 = &v74;
      }
      *(_QWORD *)(v22 + 48) = *v24;
      RnnComponent::activation_func((RnnComponent *)(*(_QWORD *)(a1 + 208) + 248 * v20));
      to_std<float,float>((uint64_t *)&__B, (char *)(*(_QWORD *)(a1 + 208) + 248 * v20 + 56));
      std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a2);
      *(_OWORD *)a2 = __B;
      a2[2] = v76;
      v76 = 0;
      __B = 0uLL;
      v77[0] = (void **)&__B;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v77);
      v25 = *(_DWORD *)(a1 + 236);
      if (*(_DWORD *)(*(_QWORD *)(a1 + 296) + 8 * v20 + 4) == 1 && v20 == (v25 >> 1) - 1 && v19)
      {
        v26 = 0;
        v27 = v21;
        do
        {
          v28 = (*a2)[v26];
          v29 = (unint64_t)((char *)(*a2)[v26 + 1] - (char *)v28) >> 3;
          LODWORD(__B) = v29;
          vvexpf((float *)&v28[(int)v29], &v28[(int)v29], (const int *)&__B);
          v26 += 3;
          --v27;
        }
        while (v27);
        v25 = *(_DWORD *)(a1 + 236);
      }
      ++v20;
    }
    while (v20 < v25 >> 1);
  }
  v30 = v73;
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_65:
  v50 = (char *)(*a2)[1] - (char *)**a2;
  v51 = v50 >> 2;
  *(_DWORD *)(a1 + 248) = v50 >> 2;
  if ((*(_BYTE *)(a1 + 320) & 3) != 0)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_ERROR, "Will crash on ARM32 in neural net need 4 byte alignments ", buf, 2u);
    }
    Diagnostics::log(3, "Will crash on ARM32 in neural net need 4 byte alignments ", v53);
  }
  if (v19)
  {
    v54 = 0;
    if ((v51 & 0x80000000) == 0)
      v55 = v50 >> 2;
    else
      v55 = v51 + 1;
    v56 = v55 >> 1;
    v57 = (uint64_t)v55 >> 1;
    v58 = (int)((uint64_t)v50 >> 2);
    if ((unint64_t)(v19 >> 32) <= 1)
      v59 = 1;
    else
      v59 = v19 >> 32;
    v60 = v58 - v56;
    v61 = v56;
    do
    {
      vDSP_vma((*a2)[3 * v54], 1, *(const float **)(a1 + 320), 1, (const float *)(*(_QWORD *)(a1 + 320) + 4 * v57), 1, (float *)(*a2)[3 * v54], 1, v57);
      if (v58 > v57)
      {
        v62 = *(float **)(a1 + 320);
        v63 = (float *)&(*a2)[3 * v54][v61];
        v64 = v60;
        do
        {
          v65 = *v62++;
          *v63 = (float)(v65 * v65) * *v63;
          ++v63;
          --v64;
        }
        while (v64);
      }
      ++v54;
    }
    while (v54 != v59);
  }
}

