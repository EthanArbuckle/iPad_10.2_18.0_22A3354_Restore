void sub_1DE999E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v36);
  _Unwind_Resume(a1);
}

void std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1DE999FEC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v7);
  else
    v8 = 0;
  v14 = v7;
  *(_QWORD *)&v15 = v7 + 80 * v2;
  *((_QWORD *)&v15 + 1) = v15;
  v16 = v7 + 80 * v8;
  std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v15, a2);
  v9 = v15 + 80;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(v6, a1[1], a1[1], *a1, *a1, v15, v15);
  v10 = *(_OWORD *)a1;
  *a1 = v11;
  a1[1] = v9;
  v15 = v10;
  v12 = a1[2];
  a1[2] = v16;
  v16 = v12;
  v14 = v10;
  std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v14);
  return v9;
}

void sub_1DE99A130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void FastRewriter::apply_replace_update(unsigned int *a1, unsigned int *a2, uint64_t **a3, char **a4, int **a5)
{
  int **v5;
  uint64_t **v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  int64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  __int128 v78;

  if (a1 == a2)
    return;
  v5 = a5;
  v7 = a3;
  v8 = a1;
  do
  {
    v9 = *v7;
    v10 = **v7;
    v11 = (*v7)[1];
    if (v11 == v10)
      goto LABEL_72;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      if ((v12 & 1) != 0)
      {
        if (v14 >= (a4[1] - *a4) >> 5)
          goto LABEL_100;
        *(int64x2_t *)&(*a4)[32 * v14 + 16] = vaddq_s64(*(int64x2_t *)&(*a4)[32 * v14 + 16], vdupq_n_s64(v13));
LABEL_8:
        v12 = 1;
        goto LABEL_14;
      }
      v15 = (unsigned int *)(v10 + 80 * v14);
      if (*v8 < *v15)
      {
        if (v14)
        {
          if (v14 - 1 >= (a4[1] - *a4) >> 5)
LABEL_100:
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v16 = *(_DWORD *)&(*a4)[32 * v14 - 8] - *(_DWORD *)&(*a4)[32 * v14 - 24];
        }
        else
        {
          v16 = 0;
        }
        std::vector<FRReplaceInst>::insert(v9, (uint64_t)v15, (unint64_t)v8);
        if (*((char *)v8 + 31) < 0)
          v17 = *((_QWORD *)v8 + 2);
        else
          v17 = *((unsigned __int8 *)v8 + 31);
        v18 = *a4;
        v19 = *v8;
        if (*((char *)v8 + 55) < 0)
          v20 = *((_QWORD *)v8 + 5);
        else
          v20 = *((unsigned __int8 *)v8 + 55);
        v21 = &v18[32 * v14];
        v22 = v17 + v19;
        v23 = (v19 + v16);
        v24 = v20 + v23;
        v25 = a4[1];
        v26 = (unint64_t)a4[2];
        if ((unint64_t)v25 >= v26)
        {
          v31 = ((v25 - v18) >> 5) + 1;
          if (v31 >> 59)
            goto LABEL_101;
          v32 = v26 - (_QWORD)v18;
          if (v32 >> 4 > v31)
            v31 = v32 >> 4;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
            v33 = 0x7FFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v33);
          }
          else
          {
            v35 = 0;
            v34 = 0;
          }
          v36 = &v35[32 * v14];
          v37 = &v35[32 * v34];
          if (v14 == v34)
          {
            if ((uint64_t)v14 < 1)
            {
              if (v14)
                v38 = 2 * v14;
              else
                v38 = 1;
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v38);
              v36 = &v39[32 * (v38 >> 2)];
              v37 = &v39[32 * v40];
              if (v35)
              {
                v41 = v35;
                v42 = v37;
                operator delete(v41);
                v37 = v42;
              }
            }
            else
            {
              v36 -= 32 * ((v14 + 1) >> 1);
            }
          }
          *(_QWORD *)v36 = v19;
          *((_QWORD *)v36 + 1) = v22;
          *((_QWORD *)v36 + 2) = v23;
          *((_QWORD *)v36 + 3) = v24;
          v43 = *a4;
          v44 = v36;
          if (*a4 != v21)
          {
            v45 = v21;
            v46 = v36;
            do
            {
              v47 = *((_OWORD *)v45 - 1);
              v44 = v46 - 32;
              *((_OWORD *)v46 - 2) = *((_OWORD *)v45 - 2);
              *((_OWORD *)v46 - 1) = v47;
              v45 -= 32;
              v46 -= 32;
            }
            while (v45 != v43);
          }
          v48 = v36 + 32;
          v49 = a4[1];
          v50 = v49 - v21;
          v7 = a3;
          if (v49 != v21)
          {
            v51 = v37;
            memmove(v48, v21, v49 - v21);
            v37 = v51;
          }
          v52 = *a4;
          *a4 = v44;
          a4[1] = &v48[v50];
          a4[2] = v37;
          v5 = a5;
          if (v52)
            operator delete(v52);
        }
        else
        {
          if (v21 == v25)
          {
            *(_QWORD *)v21 = v19;
            *((_QWORD *)v21 + 1) = v22;
            *((_QWORD *)v21 + 2) = v23;
            *((_QWORD *)v21 + 3) = v24;
            a4[1] = v21 + 32;
          }
          else
          {
            v27 = v25 - 32;
            v28 = a4[1];
            while (v27 < v25)
            {
              v29 = *(_OWORD *)v27;
              v30 = *((_OWORD *)v27 + 1);
              v27 += 32;
              *(_OWORD *)v28 = v29;
              *((_OWORD *)v28 + 1) = v30;
              v28 += 32;
            }
            a4[1] = v28;
            if (v25 != v21 + 32)
              memmove(&v25[-32 * ((v25 - (v21 + 32)) >> 5)], v21, v25 - (v21 + 32));
            *(_QWORD *)v21 = v19;
            *((_QWORD *)v21 + 1) = v22;
            *((_QWORD *)v21 + 2) = v23;
            *((_QWORD *)v21 + 3) = v24;
          }
          v7 = a3;
        }
        if (*((char *)v8 + 55) < 0)
          v53 = *((_QWORD *)v8 + 5);
        else
          LODWORD(v53) = *((unsigned __int8 *)v8 + 55);
        if (*((char *)v8 + 31) < 0)
          v54 = *((_QWORD *)v8 + 2);
        else
          LODWORD(v54) = *((unsigned __int8 *)v8 + 31);
        v13 = v53 - v54;
        v55 = *v5;
        v56 = v5[1];
        while (v55 != v56)
        {
          v57 = *v55;
          if (*v55 >= 0)
            v58 = v57;
          else
            v58 = -v57;
          if (v14 <= v58)
            *v55 = ((v57 >> 31) | 1) + v57;
          v55 += 5;
        }
        goto LABEL_8;
      }
      v12 = 0;
LABEL_14:
      ++v14;
      v9 = *v7;
      v10 = **v7;
      v11 = (*v7)[1];
    }
    while (v14 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v10) >> 4));
    if ((v12 & 1) == 0)
    {
LABEL_72:
      if (v11 >= v9[2])
      {
        v59 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(v9, (uint64_t)v8);
      }
      else
      {
        std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v11, (uint64_t)v8);
        v59 = v11 + 80;
        v9[1] = v11 + 80;
      }
      v9[1] = v59;
      v60 = a4[1];
      v61 = *v8;
      if (*((char *)v8 + 31) < 0)
        v62 = *((_QWORD *)v8 + 2);
      else
        v62 = *((unsigned __int8 *)v8 + 31);
      if (*((char *)v8 + 55) < 0)
        v63 = *((_QWORD *)v8 + 5);
      else
        v63 = *((unsigned __int8 *)v8 + 55);
      v64 = v62 + v61;
      v65 = (v61 + *((_DWORD *)v60 - 2) - *((_DWORD *)v60 - 6));
      v66 = v63 + v65;
      v67 = (unint64_t)a4[2];
      if ((unint64_t)v60 >= v67)
      {
        v69 = (v60 - *a4) >> 5;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 59)
LABEL_101:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v71 = v67 - (_QWORD)*a4;
        if (v71 >> 4 > v70)
          v70 = v71 >> 4;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFE0)
          v72 = 0x7FFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
          v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,int>>>(v72);
        else
          v73 = 0;
        v74 = (_QWORD *)(v72 + 32 * v69);
        *v74 = v61;
        v74[1] = v64;
        v74[2] = v65;
        v74[3] = v66;
        v76 = *a4;
        v75 = a4[1];
        v77 = v74;
        if (v75 != *a4)
        {
          do
          {
            v78 = *((_OWORD *)v75 - 1);
            *((_OWORD *)v77 - 2) = *((_OWORD *)v75 - 2);
            *((_OWORD *)v77 - 1) = v78;
            v77 -= 4;
            v75 -= 32;
          }
          while (v75 != v76);
          v75 = *a4;
        }
        v68 = (char *)(v74 + 4);
        *a4 = (char *)v77;
        a4[1] = (char *)(v74 + 4);
        a4[2] = (char *)(v72 + 32 * v73);
        if (v75)
          operator delete(v75);
      }
      else
      {
        *(_QWORD *)v60 = v61;
        *((_QWORD *)v60 + 1) = v64;
        v68 = v60 + 32;
        *((_QWORD *)v60 + 2) = v65;
        *((_QWORD *)v60 + 3) = v66;
      }
      a4[1] = v68;
    }
    v8 += 20;
  }
  while (v8 != a2);
}

void sub_1DE99A640(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t FastRewriter::merge(uint64_t **a1, uint64_t **a2, std::string *__str, uint64_t *a4, uint64_t **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  int *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t *v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t i;
  std::string *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  uint64_t *v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  std::string::size_type v76;
  char v77;
  void **v78;
  int v79;
  int v80;
  int v81;
  int *v82;
  int *v83;
  uint64_t result;
  uint64_t v85;
  std::string *v86;
  unint64_t v87;
  std::string::size_type v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  std::string::size_type *v92;
  std::string::size_type v93;
  uint64_t v94;
  __int128 v95;
  uint64_t *v96;
  int v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  std::string *v100;
  std::string::size_type v101;
  char v102;
  int v103;
  int v104;
  int v105;
  int *v106;
  unint64_t v107;
  int *v108;
  std::string *v109;
  size_t v110;
  uint64_t v111;
  void **v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  uint64_t *v116;
  uint64_t **v117;
  int v118;
  int v119;
  char v120;
  const std::string::value_type *v121;
  std::string::size_type v122;
  std::string *v123;
  uint64_t **v124;
  std::string::size_type v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  void *v133;
  char v134;
  std::string *v135;
  std::string::size_type v136;
  std::string::size_type v137;
  int v138;
  int v139;
  int v140;
  int *v141;
  int *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  char *v171;
  char *v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  __int128 v178;
  _DWORD *v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  __int128 v183;
  uint64_t *v184;
  __int128 v185;
  unint64_t v186;
  BOOL v187;
  unint64_t v188;
  BOOL v189;
  std::string *v190;
  std::string::size_type v191;
  std::string *v192;
  __int128 v193;
  const std::string::value_type *v194;
  uint64_t **v195;
  const std::string::value_type *v196;
  int v197;
  const std::string::value_type *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  std::string::size_type v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t j;
  std::string *__stra;
  int v208;
  std::string::size_type *v209;
  std::string *v210;
  std::string::size_type __n;
  uint64_t **v212;
  size_t v213;
  int v214;
  std::string *v218;
  std::string *v219;
  unint64_t v220;
  unint64_t v221;
  std::string __p;
  std::string v223;
  uint64_t **v224[5];
  int **v225;
  uint64_t *v226;
  int **v227;
  char v228;
  std::string v229;
  std::string v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  v226 = a4;
  v227 = (int **)a5;
  v225 = (int **)a5;
  v224[0] = &v226;
  v224[1] = (uint64_t **)&v225;
  v224[2] = a1;
  v224[3] = a2;
  v224[4] = a5;
  v6 = **a1;
  v5 = (*a1)[1];
  if (v5 == v6)
    return 0;
  v8 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
  LODWORD(v220) = -1;
LABEL_3:
  v12 = *v226;
  v13 = (v226[1] - *v226) >> 5;
  v14 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
  if ((char)v14 < 0)
    v14 = v8[2];
LABEL_5:
  if (v10 <= v13)
    v15 = (v226[1] - *v226) >> 5;
  else
    v15 = v10;
  while (1)
  {
    if (v10 == v15)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v16 = *(_QWORD *)(v12 + 32 * v10 + 16);
    v17 = *v227;
    v18 = v227[1];
    if (*v227 != v18)
    {
      v19 = *v227;
      while (1)
      {
        v20 = *v19;
        if (v10 == v20)
          break;
        if (v10 > v20)
        {
          v21 = v19[1] + (uint64_t)(v19[4] - (v19[3] + v19[2]));
          goto LABEL_15;
        }
LABEL_16:
        v19 += 5;
        if (v19 == v18)
          goto LABEL_17;
      }
      v21 = v19[1];
LABEL_15:
      v16 += v21;
      goto LABEL_16;
    }
LABEL_17:
    v23 = v6 + 80 * v10;
    v22 = v23 + 32;
    LODWORD(v23) = *(char *)(v23 + 55);
    if ((v23 & 0x80000000) != 0)
      v23 = *(_QWORD *)(v22 + 8);
    else
      v23 = v23;
    v24 = *v225;
    v25 = v225[1];
    if (*v225 == v25)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      do
      {
        if (v10 >= *v24)
          v26 = v24[4] + v26 - (v24[3] + v24[2]) + v24[1];
        v24 += 5;
      }
      while (v24 != v25);
    }
    v27 = v23 + v16;
    v28 = (v26 + *(_DWORD *)v8);
    if (v23 + v16 <= v28 || (v29 = (unint64_t)v14 + v28, (unint64_t)v14 + v28 <= v16))
    {
      if ((v9 & 1) != 0)
      {
        FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(v224, v10 - 1);
        return 1;
      }
      v9 = 0;
      if (v27 > v28)
        v31 = v220;
      else
        v31 = (v220 + 1);
      v220 = v31;
      ++v10;
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
      if (v10 >= v11)
      {
        if ((v220 & 0x80000000) == 0)
        {
          if (v220 >= (a4[1] - *a4) >> 5)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          result = 0;
          *(_DWORD *)v8 = *(_DWORD *)(*a4 + 32 * v220 + 8) + *(_DWORD *)v8 - *(_DWORD *)(*a4 + 32 * v220 + 24);
          return result;
        }
        return 0;
      }
      goto LABEL_5;
    }
    v30 = v27 - v29;
    if (v27 >= v29)
      break;
    if ((v9 & 1) != 0)
    {
      v32 = v10 - 1;
      if (v11 <= v10 - 1)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v33 = v8;
      v34 = a4;
      v35 = a4[1];
      v36 = *a4 + 32 * v10;
      v37 = v35 - (v36 + 32);
      if (v35 != v36 + 32)
      {
        memmove((void *)(*a4 + 32 * v10), (const void *)(v36 + 32), v35 - (v36 + 32));
        v34 = a4;
      }
      v34[1] = v36 + v37;
      size = v6 + 80 * v32;
      v38 = (std::string *)(size + 8);
      LODWORD(size) = *(char *)(size + 31);
      if ((size & 0x80000000) != 0)
        size = v38->__r_.__value_.__l.__size_;
      else
        size = size;
      std::string::basic_string(&v223, __str, size + *(unsigned int *)(v6 + 80 * v32), (*(_DWORD *)(v6 + 80 * v10) - *(_DWORD *)(v6 + 80 * v32)) - size, (std::allocator<char> *)&__p);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)(v6 + 80 * v10 + 8), (uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v41 = __p.__r_.__value_.__l.__size_;
      std::string::append(v38, (const std::string::value_type *)p_p, v41);
      v8 = v33;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)v22, (uint64_t)&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &__p;
      else
        v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v43 = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v6 + 80 * v32 + 32), (const std::string::value_type *)v42, v43);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &__p;
      else
        v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v45 = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(v6 + 80 * v32 + 56), (const std::string::value_type *)v44, v45);
      v46 = a4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v46 = a4;
      }
      v47 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v223.__r_.__value_.__l.__size_;
      if (*(char *)(v6 + 80 * v10 + 31) < 0)
        v48 = *(_QWORD *)(v6 + 80 * v10 + 16);
      else
        v48 = *(unsigned __int8 *)(v6 + 80 * v10 + 31);
      if (*(char *)(v22 + 23) < 0)
        v49 = *(_QWORD *)(v22 + 8);
      else
        v49 = *(unsigned __int8 *)(v22 + 23);
      v51 = v46;
      v50 = *v46;
      if (v32 < (v51[1] - v50) >> 5)
      {
        v52 = v48 + v47;
        v53 = v49 + v47;
        v54 = v50 + 32 * v32;
        *(_QWORD *)(v54 + 8) += v52;
        *(_QWORD *)(v54 + 24) += v53;
      }
      v55 = *a1;
      v56 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(**a1 + 80 * v10 + 80, (*a1)[1], **a1 + 80 * v10);
      for (i = v55[1]; i != v56; std::allocator<FRReplaceInst>::destroy[abi:ne180100](i))
        i -= 80;
      v55[1] = v56;
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      v6 = **a1;
      v5 = (*a1)[1];
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
      v9 = 1;
      if (v10 >= v11)
        goto LABEL_96;
      goto LABEL_3;
    }
    ++v10;
    v9 = 1;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
    if (v10 >= v11)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4);
LABEL_96:
      FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(v224, v11 - 1);
      return 1;
    }
  }
  v58 = (std::string *)(v8 + 1);
  if ((v9 & 1) != 0)
  {
    v59 = v10 - 1;
    if (v11 <= v10 - 1)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v60 = a4;
    if (v13 <= v59)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v61 = *(_QWORD *)(v12 + 32 * v59 + 16);
    while (1)
    {
      if (v17 == v18)
      {
        v86 = (std::string *)*a4;
        v85 = a4[1];
        v87 = (v85 - *a4) >> 5;
        if (v87 <= v59)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v221 = v10 - 1;
        v88 = *(&v86->__r_.__value_.__l.__size_ + 4 * v59);
        v89 = *a5;
        v90 = a5[1];
        v212 = v8;
        if (*a5 == v90)
        {
          if (v87 > v10)
          {
            v92 = (std::string::size_type *)((char *)v86 + 32 * v10);
            v93 = *v92;
            goto LABEL_168;
          }
        }
        else
        {
          v91 = *a5;
          do
          {
            if (v221 == *(_DWORD *)v91)
              v88 += *((int *)v91 + 2);
            v91 = (uint64_t *)((char *)v91 + 20);
          }
          while (v91 != v90);
          if (v87 > v10)
          {
            v92 = (std::string::size_type *)((char *)v86 + 32 * v10);
            v93 = *v92;
            do
            {
              if (v10 == *(_DWORD *)v89)
                v93 += *((int *)v89 + 1);
              v89 = (uint64_t *)((char *)v89 + 20);
            }
            while (v89 != v90);
LABEL_168:
            __stra = v58;
            v109 = (std::string *)((char *)v86 + 32 * v10);
            v110 = v85 - ((_QWORD)v109 + 32);
            if (v110)
            {
              v213 = v110;
              v210 = (std::string *)((char *)v86 + 32 * v10);
              memmove(v92, &v109[1].__r_.__value_.__r.__words[1], v110);
              v110 = v213;
              v109 = v210;
              v60 = a4;
              v86 = (std::string *)*a4;
            }
            v111 = (uint64_t)v109 + v110;
            v60[1] = v111;
            v218 = v86;
            if (v221 >= (v111 - (uint64_t)v86) >> 5)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v214 = v93 - v88;
            std::string::basic_string(&v223, __str, v88, v93 - v88, (std::allocator<char> *)&__p);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)(v6 + 80 * v10 + 8), (uint64_t)&__p);
            v112 = (void **)(v6 + 80 * v221 + 8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v113 = &__p;
            else
              v113 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v114 = __p.__r_.__value_.__l.__size_;
            std::string::append((std::string *)(v6 + 80 * v221 + 8), (const std::string::value_type *)v113, v114);
            v115 = v218;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              v115 = v218;
            }
            v209 = (std::string::size_type *)((char *)v115 + 32 * v221);
            __n = (v28 - v61);
            if (*(char *)(v22 + 23) < 0)
              v116 = *(uint64_t **)(v22 + 8);
            else
              LODWORD(v116) = *(unsigned __int8 *)(v22 + 23);
            v117 = v212;
            v118 = (_DWORD)v116 + v214;
            LODWORD(v116) = *((unsigned __int8 *)v212 + 55);
            if ((char)v116 < 0)
              v116 = v212[5];
            v119 = v118 + (_DWORD)v116;
            LODWORD(v116) = *((unsigned __int8 *)v212 + 31);
            if ((char)v116 < 0)
              v116 = v212[2];
            v208 = v119 - (_DWORD)v116;
            v219 = (std::string *)(v6 + 80 * v221 + 32);
            if ((int)__n >= 1)
            {
              std::string::basic_string(&__p, (const std::string *)(v6 + 80 * v221 + 32), 0, __n, (std::allocator<char> *)&v229);
              v120 = *((_BYTE *)v212 + 55);
              if (v120 >= 0)
                v121 = (const std::string::value_type *)(v212 + 4);
              else
                v121 = (const std::string::value_type *)v212[4];
              if (v120 >= 0)
                v122 = *((unsigned __int8 *)v212 + 55);
              else
                v122 = (std::string::size_type)v212[5];
              v123 = std::string::append(&__p, v121, v122);
              v124 = a5;
              v125 = v123->__r_.__value_.__r.__words[0];
              v230.__r_.__value_.__r.__words[0] = v123->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v123->__r_.__value_.__r.__words[1] + 7);
              v126 = HIBYTE(v123->__r_.__value_.__r.__words[2]);
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              v127 = v6 + 80 * v221 + 32;
              if (*(char *)(v6 + 80 * v221 + 55) < 0)
              {
                operator delete(v219->__r_.__value_.__l.__data_);
                v127 = v6 + 80 * v221 + 32;
              }
              *(_QWORD *)v127 = v125;
              *(_QWORD *)(v127 + 8) = v230.__r_.__value_.__r.__words[0];
              *(_QWORD *)(v127 + 15) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
              *(_BYTE *)(v127 + 23) = v126;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v6 + 80 * v10 + 31) < 0)
                v128 = *(_QWORD *)(v6 + 80 * v10 + 16);
              else
                LODWORD(v128) = *(unsigned __int8 *)(v6 + 80 * v10 + 31);
              v153 = v128 + v214;
              v209[1] += v153;
              v209[3] += v153 + v208;
              v154 = *((unsigned __int8 *)v212 + 55);
              v155 = *((unsigned __int8 *)v212 + 31);
              if ((v155 & 0x80u) != 0)
                v155 = *((_DWORD *)v212 + 4);
              if ((v154 & 0x80u) != 0)
                v154 = *((_DWORD *)v212 + 10);
              v140 = v154 - v155;
              v141 = (int *)a5[1];
              v156 = (int *)a5[2];
              if (v141 < v156)
                goto LABEL_236;
              v158 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (char *)*a5) >> 2);
              v159 = v158 + 1;
              if (v158 + 1 > 0xCCCCCCCCCCCCCCCLL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v160 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v156 - (char *)*a5) >> 2);
              if (2 * v160 > v159)
                v159 = 2 * v160;
              if (v160 >= 0x666666666666666)
                v161 = 0xCCCCCCCCCCCCCCCLL;
              else
                v161 = v159;
              if (v161)
                v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v161);
              else
                v162 = 0;
              v174 = v161 + 20 * v158;
              v175 = v161 + 20 * v162;
              *(_QWORD *)v174 = v221;
              *(_QWORD *)(v174 + 8) = 0;
              *(_DWORD *)(v174 + 16) = v140;
              v157 = v174 + 20;
              v177 = *a5;
              v176 = a5[1];
              if (v176 != *a5)
              {
                do
                {
                  v178 = *(_OWORD *)((char *)v176 - 20);
                  *(_DWORD *)(v174 - 4) = *((_DWORD *)v176 - 1);
                  *(_OWORD *)(v174 - 20) = v178;
                  v174 -= 20;
                  v176 = (uint64_t *)((char *)v176 - 20);
                }
                while (v176 != v177);
                goto LABEL_274;
              }
              goto LABEL_275;
            }
            *(_DWORD *)(v6 + 80 * v221) -= v61 - v28;
            std::string::basic_string(&__p, __stra, 0, v61 - v28, (std::allocator<char> *)&v229);
            v129 = *(char *)(v6 + 80 * v221 + 31);
            if (v129 >= 0)
              v130 = (const std::string::value_type *)(v6 + 80 * v221 + 8);
            else
              v130 = (const std::string::value_type *)*v112;
            if (v129 >= 0)
              v131 = *(unsigned __int8 *)(v6 + 80 * v221 + 31);
            else
              v131 = *(_QWORD *)(v6 + 80 * v221 + 16);
            v132 = std::string::append(&__p, v130, v131);
            v133 = (void *)v132->__r_.__value_.__r.__words[0];
            v230.__r_.__value_.__r.__words[0] = v132->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7);
            v134 = HIBYTE(v132->__r_.__value_.__r.__words[2]);
            v132->__r_.__value_.__l.__size_ = 0;
            v132->__r_.__value_.__r.__words[2] = 0;
            v132->__r_.__value_.__r.__words[0] = 0;
            v135 = (std::string *)(v6 + 80 * v221 + 32);
            if (*(char *)(v6 + 80 * v221 + 31) < 0)
            {
              operator delete(*v112);
              v135 = (std::string *)(v6 + 80 * v221 + 32);
            }
            *v112 = v133;
            *(_QWORD *)(v6 + 80 * v221 + 16) = v230.__r_.__value_.__r.__words[0];
            *(_QWORD *)(v6 + 80 * v221 + 23) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
            *(_BYTE *)(v6 + 80 * v221 + 31) = v134;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              v135 = (std::string *)(v6 + 80 * v221 + 32);
            }
            std::string::operator=(v135, (const std::string *)(v212 + 4));
            v124 = a5;
            v117 = v212;
            v136 = v209[1] + v208;
            *v209 += (int)__n;
            v209[1] = v136;
            v137 = v209[3] + v208;
            v209[2] += (int)__n;
            v209[3] = v137;
            v138 = *((unsigned __int8 *)v212 + 55);
            v139 = *((unsigned __int8 *)v212 + 31);
            if ((v139 & 0x80u) != 0)
              v139 = *((_DWORD *)v212 + 4);
            if ((v138 & 0x80u) != 0)
              v138 = *((_DWORD *)v212 + 10);
            v140 = v138 - v139;
            v141 = (int *)a5[1];
            v142 = (int *)a5[2];
            if (v141 < v142)
            {
LABEL_236:
              *(_QWORD *)v141 = v221;
              *((_QWORD *)v141 + 1) = 0;
              v157 = (unint64_t)(v141 + 5);
              v141[4] = v140;
            }
            else
            {
              v143 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v141 - (char *)*a5) >> 2);
              v144 = v143 + 1;
              if (v143 + 1 > 0xCCCCCCCCCCCCCCCLL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v145 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v142 - (char *)*a5) >> 2);
              if (2 * v145 > v144)
                v144 = 2 * v145;
              if (v145 >= 0x666666666666666)
                v146 = 0xCCCCCCCCCCCCCCCLL;
              else
                v146 = v144;
              if (v146)
                v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v146);
              else
                v147 = 0;
              v174 = v146 + 20 * v143;
              v175 = v146 + 20 * v147;
              *(_QWORD *)v174 = v221;
              *(_QWORD *)(v174 + 8) = 0;
              *(_DWORD *)(v174 + 16) = v140;
              v157 = v174 + 20;
              v184 = *a5;
              v176 = a5[1];
              if (v176 != *a5)
              {
                do
                {
                  v185 = *(_OWORD *)((char *)v176 - 20);
                  *(_DWORD *)(v174 - 4) = *((_DWORD *)v176 - 1);
                  *(_OWORD *)(v174 - 20) = v185;
                  v174 -= 20;
                  v176 = (uint64_t *)((char *)v176 - 20);
                }
                while (v176 != v184);
LABEL_274:
                v176 = *v124;
              }
LABEL_275:
              *v124 = (uint64_t *)v174;
              v124[1] = (uint64_t *)v157;
              v124[2] = (uint64_t *)v175;
              if (v176)
                operator delete(v176);
            }
            v124[1] = (uint64_t *)v157;
            if (*(char *)(v22 + 23) < 0)
            {
              v186 = *(_QWORD *)(v22 + 8);
              v189 = v186 > v30;
              v188 = v10 - 1;
              if (v189)
              {
LABEL_283:
                std::string::basic_string(&__p, (const std::string *)v22, v29 - v27 + v186, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v230);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v190 = &__p;
                else
                  v190 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v191 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v191 = __p.__r_.__value_.__l.__size_;
                std::string::append(v219, (const std::string::value_type *)v190, v191);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              v186 = *(unsigned __int8 *)(v22 + 23);
              v187 = v30 >= v186;
              v188 = v10 - 1;
              if (!v187)
                goto LABEL_283;
            }
            std::operator+<char>();
            v192 = std::string::append(&v229, "/");
            v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
            v230.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v193;
            v192->__r_.__value_.__l.__size_ = 0;
            v192->__r_.__value_.__r.__words[2] = 0;
            v192->__r_.__value_.__r.__words[0] = 0;
            v196 = (const std::string::value_type *)v117[7];
            v195 = v117 + 7;
            v194 = v196;
            v197 = *((char *)v195 + 23);
            if (v197 >= 0)
              v198 = (const std::string::value_type *)v195;
            else
              v198 = v194;
            if (v197 >= 0)
              v199 = *((unsigned __int8 *)v195 + 23);
            else
              v199 = (std::string::size_type)v195[1];
            v200 = std::string::append(&v230, v198, v199);
            v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v201;
            v200->__r_.__value_.__l.__size_ = 0;
            v200->__r_.__value_.__r.__words[2] = 0;
            v200->__r_.__value_.__r.__words[0] = 0;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v202 = &__p;
            else
              v202 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v203 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v203 = __p.__r_.__value_.__l.__size_;
            std::string::append((std::string *)(v6 + 80 * v188 + 56), (const std::string::value_type *)v202, v203);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v230.__r_.__value_.__l.__data_);
            if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v229.__r_.__value_.__l.__data_);
            v204 = *a1;
            v205 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(**a1 + 80 * v10 + 80, (*a1)[1], **a1 + 80 * v10);
            for (j = v204[1]; j != v205; std::allocator<FRReplaceInst>::destroy[abi:ne180100](j))
              j -= 80;
            v204[1] = v205;
LABEL_312:
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v223.__r_.__value_.__l.__data_);
            return 1;
          }
        }
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      }
      v62 = *v17;
      if (v59 == v62)
      {
        v63 = v17[1];
      }
      else
      {
        if (v59 <= v62)
          goto LABEL_95;
        v63 = v17[1] + (uint64_t)(v17[4] - (v17[3] + v17[2]));
      }
      v61 += v63;
LABEL_95:
      v17 += 5;
    }
  }
  std::operator+<char>();
  if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = &v223;
  else
    v64 = (std::string *)v223.__r_.__value_.__r.__words[0];
  if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
  else
    v65 = v223.__r_.__value_.__l.__size_;
  std::string::append((std::string *)(v6 + 80 * v10 + 56), (const std::string::value_type *)v64, v65);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  v66 = (v28 - v16);
  if ((v66 & 0x80000000) != 0)
  {
    *(_DWORD *)(v6 + 80 * v10) += v66;
    std::string::basic_string(&v223, (const std::string *)(v8 + 1), 0, -(int)v66, (std::allocator<char> *)&__p);
    v94 = v6 + 80 * v10 + 8;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v223.__r_.__value_.__l.__data_, (const void **)v94, (uint64_t)&__p);
    if (*(char *)(v94 + 23) < 0)
      operator delete(*(void **)v94);
    v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v94 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v94 = v95;
    v96 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
    if ((char)v96 < 0)
      v96 = v8[2];
    std::string::basic_string(&__p, (const std::string *)v22, (std::string::size_type)v96 + (int)v66, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v229);
    v97 = *((char *)v8 + 55);
    if (v97 >= 0)
      v98 = (const std::string::value_type *)(v8 + 4);
    else
      v98 = (const std::string::value_type *)v8[4];
    if (v97 >= 0)
      v99 = *((unsigned __int8 *)v8 + 55);
    else
      v99 = (std::string::size_type)v8[5];
    v100 = std::string::insert(&__p, 0, v98, v99);
    v101 = v100->__r_.__value_.__r.__words[0];
    v230.__r_.__value_.__r.__words[0] = v100->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v100->__r_.__value_.__r.__words[1] + 7);
    v102 = HIBYTE(v100->__r_.__value_.__r.__words[2]);
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v22 + 23) < 0)
      operator delete(*(void **)v22);
    *(_QWORD *)v22 = v101;
    *(_QWORD *)(v22 + 8) = v230.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v22 + 15) = *(std::string::size_type *)((char *)v230.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(v22 + 23) = v102;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v103 = *((unsigned __int8 *)v8 + 55);
    v104 = *((unsigned __int8 *)v8 + 31);
    if ((v104 & 0x80u) != 0)
      v104 = *((_DWORD *)v8 + 4);
    if ((v103 & 0x80u) != 0)
      v103 = *((_DWORD *)v8 + 10);
    v105 = v103 - v104;
    v106 = (int *)a5[1];
    v107 = (unint64_t)a5[2];
    if ((unint64_t)v106 >= v107)
    {
      v163 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v106 - (char *)*a5) >> 2);
      v164 = v163 + 1;
      if (v163 + 1 > 0xCCCCCCCCCCCCCCCLL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v107 - (_QWORD)*a5) >> 2);
      if (2 * v165 > v164)
        v164 = 2 * v165;
      if (v165 >= 0x666666666666666)
        v166 = 0xCCCCCCCCCCCCCCCLL;
      else
        v166 = v164;
      if (v166)
        v166 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v166);
      else
        v167 = 0;
      v179 = (_DWORD *)(v166 + 20 * v163);
      v180 = v166 + 20 * v167;
      *v179 = v10;
      v179[1] = v66;
      v179[2] = 0;
      v179[3] = v66;
      v179[4] = v105;
      v108 = v179 + 5;
      v182 = *a5;
      v181 = a5[1];
      if (v181 != *a5)
      {
        do
        {
          v183 = *(_OWORD *)((char *)v181 - 20);
          *(v179 - 1) = *((_DWORD *)v181 - 1);
          *(_OWORD *)(v179 - 5) = v183;
          v179 -= 5;
          v181 = (uint64_t *)((char *)v181 - 20);
        }
        while (v181 != v182);
        v181 = *a5;
      }
      *a5 = (uint64_t *)v179;
      a5[1] = (uint64_t *)v108;
      a5[2] = (uint64_t *)v180;
      if (v181)
        operator delete(v181);
    }
    else
    {
      *v106 = v10;
      v106[1] = v66;
      v106[2] = 0;
      v106[3] = v66;
      v108 = v106 + 5;
      v106[4] = v105;
    }
    a5[1] = (uint64_t *)v108;
    goto LABEL_312;
  }
  std::string::basic_string(&__p, (const std::string *)v22, 0, v66, (std::allocator<char> *)&v230);
  v67 = *((char *)v8 + 55);
  if (v67 >= 0)
    v68 = (const std::string::value_type *)(v8 + 4);
  else
    v68 = (const std::string::value_type *)v8[4];
  if (v67 >= 0)
    v69 = *((unsigned __int8 *)v8 + 55);
  else
    v69 = (std::string::size_type)v8[5];
  v70 = std::string::append(&__p, v68, v69);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v72 = (uint64_t *)*((unsigned __int8 *)v8 + 31);
  if ((char)v72 < 0)
    v72 = v8[2];
  std::string::basic_string(&v230, (const std::string *)v22, (std::string::size_type)v72 + v66, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v228);
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v230;
  else
    v73 = (std::string *)v230.__r_.__value_.__r.__words[0];
  if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
  else
    v74 = v230.__r_.__value_.__l.__size_;
  v75 = std::string::append(&v223, (const std::string::value_type *)v73, v74);
  v76 = v75->__r_.__value_.__r.__words[0];
  v229.__r_.__value_.__r.__words[0] = v75->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v229.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v75->__r_.__value_.__r.__words[1] + 7);
  v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v78 = (void **)a5;
  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  *(_QWORD *)v22 = v76;
  *(_QWORD *)(v22 + 8) = v229.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v22 + 15) = *(std::string::size_type *)((char *)v229.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(v22 + 23) = v77;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v79 = *((unsigned __int8 *)v8 + 55);
  v80 = *((unsigned __int8 *)v8 + 31);
  if ((v80 & 0x80u) != 0)
    v80 = *((_DWORD *)v8 + 4);
  if ((v79 & 0x80u) != 0)
    v79 = *((_DWORD *)v8 + 10);
  v81 = v79 - v80;
  v82 = (int *)a5[1];
  v83 = (int *)a5[2];
  if (v82 >= v83)
  {
    v148 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (char *)*a5) >> 2);
    v149 = v148 + 1;
    if (v148 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v150 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v83 - (char *)*a5) >> 2);
    if (2 * v150 > v149)
      v149 = 2 * v150;
    if (v150 >= 0x666666666666666)
      v151 = 0xCCCCCCCCCCCCCCCLL;
    else
      v151 = v149;
    if (v151)
    {
      v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v151);
      v78 = (void **)a5;
    }
    else
    {
      v152 = 0;
    }
    v168 = v151 + 20 * v148;
    v169 = v151 + 20 * v152;
    *(_DWORD *)v168 = v10;
    *(_DWORD *)(v168 + 4) = 0;
    *(_QWORD *)(v168 + 8) = 0;
    *(_DWORD *)(v168 + 16) = v81;
    v170 = (void *)(v168 + 20);
    v172 = (char *)*v78;
    v171 = (char *)v78[1];
    if (v171 != *v78)
    {
      do
      {
        v173 = *(_OWORD *)(v171 - 20);
        *(_DWORD *)(v168 - 4) = *((_DWORD *)v171 - 1);
        *(_OWORD *)(v168 - 20) = v173;
        v168 -= 20;
        v171 -= 20;
      }
      while (v171 != v172);
      v171 = (char *)*v78;
    }
    *v78 = (void *)v168;
    v78[1] = v170;
    v78[2] = (void *)v169;
    if (v171)
      operator delete(v171);
    v78[1] = v170;
    return 1;
  }
  *v82 = v10;
  v82[1] = 0;
  *((_QWORD *)v82 + 1) = 0;
  v82[4] = v81;
  result = 1;
  a5[1] = (uint64_t *)(v82 + 5);
  return result;
}

void sub_1DE99B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FastRewriter::apply_offsets_update(uint64_t result, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unint64_t v4;
  unint64_t v5;
  int64x2_t *v6;
  int32x4_t v7;
  int64x2_t v8;
  signed __int32 v9;
  int v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t v13;
  int64x2_t *v14;

  if (a3 != a4)
  {
    v4 = (a2 - result) >> 5;
    do
    {
      v5 = *a3;
      if ((v5 & 0x80000000) == 0 && v4 > v5)
      {
        v6 = (int64x2_t *)(result + 32 * v5);
        v7 = *(int32x4_t *)(a3 + 1);
        v8 = vaddw_high_s32(v6[1], v7);
        *v6 = vaddw_s32(*v6, *(int32x2_t *)v7.i8);
        v6[1] = v8;
        if (v4 - 1 != v5)
        {
          v9 = vaddq_s32(vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_s32(vdupq_laneq_s32(v7, 3), vaddq_s32(vdupq_laneq_s32(v7, 2), v7)), 1), v7).u32[0];
          if (v9)
          {
            v10 = v5 + 1;
            if (v4 > v10)
            {
              v11 = v10;
              v12 = vdupq_n_s64(v9);
              v13 = v4 - v10;
              v14 = (int64x2_t *)(result + 16 + 32 * v11);
              do
              {
                *v14 = vaddq_s64(*v14, v12);
                v14 += 2;
                --v13;
              }
              while (v13);
            }
          }
        }
      }
      a3 += 5;
    }
    while (a3 != a4);
  }
  return result;
}

void std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<FRReplaceInst>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FRReplaceInst>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void FastRewriter::merge(std::shared_ptr<std::vector<FRReplaceInst>>,FRReplaceInst&,std::string const&,std::vector<std::array<unsigned long,4ul>> &,std::vector<std::array<int,5ul>> &)::$_5::operator()(uint64_t ***a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  int **v8;
  int *v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  int v15;
  std::string::size_type size;
  uint64_t **v17;
  int **v18;
  int *v19;
  int *v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  void **v27;
  uint64_t *v28;
  int v29;
  int v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t **v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const std::string::value_type *v48;
  uint64_t v49;
  const std::string::value_type *v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  std::string *v57;
  std::string::size_type v58;
  uint64_t **v59;
  uint64_t **v60;
  const std::string::value_type *v61;
  const std::string::value_type *v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  std::string *v69;
  std::string::size_type v70;
  unint64_t v71;
  std::string *__str;
  std::string v73;
  char v74;
  _QWORD v75[3];

  v75[2] = *MEMORY[0x1E0C80C00];
  v2 = *a1[2];
  v3 = *v2;
  if (0xCCCCCCCCCCCCCCCDLL * ((v2[1] - *v2) >> 4) <= a2)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v6 = ***a1;
  if (a2 >= ((**a1)[1] - v6) >> 5)
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v7 = *(_QWORD *)(v6 + 32 * a2 + 16);
  v8 = (int **)(*a1)[1];
  v9 = *v8;
  v10 = v8[1];
  while (v9 != v10)
  {
    v11 = *v9;
    if (v11 == a2)
    {
      v12 = v9[1];
    }
    else
    {
      if (v11 >= a2)
        goto LABEL_10;
      v12 = v9[1] + (uint64_t)(v9[4] - (v9[3] + v9[2]));
    }
    v7 += v12;
LABEL_10:
    v9 += 5;
  }
  v13 = v3 + 80 * a2;
  v14 = (std::string *)(v13 + 32);
  v15 = *(char *)(v13 + 55);
  if (v15 < 0)
    size = v14->__r_.__value_.__l.__size_;
  else
    LODWORD(size) = v15;
  v17 = a1[3];
  v18 = (int **)*a1[1];
  v19 = *v18;
  v20 = v18[1];
  if (v19 == v20)
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    do
    {
      if (*v19 <= a2)
        v21 = v19[4] + v21 - (v19[3] + v19[2]) + v19[1];
      v19 += 5;
    }
    while (v19 != v20);
  }
  v22 = (v21 + *(_DWORD *)v17);
  if (*((char *)v17 + 31) < 0)
    v23 = v17[2];
  else
    LODWORD(v23) = *((unsigned __int8 *)v17 + 31);
  v24 = v22 - (size + v7);
  if (v22 >= v7)
  {
    v25 = 0;
  }
  else
  {
    v25 = v7 - v22;
    *(_DWORD *)(v3 + 80 * a2) -= v7 - v22;
  }
  v26 = v24 + (_DWORD)v23;
  v27 = (void **)a1[4];
  if (*((char *)v17 + 55) < 0)
    v28 = v17[5];
  else
    LODWORD(v28) = *((unsigned __int8 *)v17 + 55);
  v71 = v22;
  __str = v14;
  if (*((char *)v17 + 31) < 0)
    v17 = (uint64_t **)v17[2];
  else
    LODWORD(v17) = *((unsigned __int8 *)v17 + 31);
  v29 = -v25;
  v30 = (_DWORD)v28 - (_DWORD)v17 + v26;
  v32 = v27[1];
  v31 = (unint64_t)v27[2];
  if ((unint64_t)v32 >= v31)
  {
    v34 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v32 - (_BYTE *)*v27) >> 2);
    v35 = v34 + 1;
    if (v34 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v31 - (_QWORD)*v27) >> 2);
    if (2 * v36 > v35)
      v35 = 2 * v36;
    if (v36 >= 0x666666666666666)
      v37 = 0xCCCCCCCCCCCCCCCLL;
    else
      v37 = v35;
    if (v37)
      v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(v37);
    else
      v38 = 0;
    v39 = (_DWORD *)(v37 + 20 * v34);
    v40 = v37 + 20 * v38;
    *v39 = a2;
    v39[1] = v29;
    v39[2] = v26;
    v39[3] = v29;
    v39[4] = v30;
    v33 = v39 + 5;
    v42 = (char *)*v27;
    v41 = (char *)v27[1];
    if (v41 != *v27)
    {
      do
      {
        v43 = *(_OWORD *)(v41 - 20);
        *(v39 - 1) = *((_DWORD *)v41 - 1);
        *(_OWORD *)(v39 - 5) = v43;
        v39 -= 5;
        v41 -= 20;
      }
      while (v41 != v42);
      v41 = (char *)*v27;
    }
    *v27 = v39;
    v27[1] = v33;
    v27[2] = (void *)v40;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *v32 = a2;
    v32[1] = v29;
    v32[2] = v26;
    v32[3] = v29;
    v33 = v32 + 5;
    v32[4] = v30;
  }
  v27[1] = v33;
  v44 = a1[3];
  LODWORD(v45) = *((char *)v44 + 31);
  if ((v45 & 0x80000000) != 0)
    v46 = (unint64_t)v44[2];
  else
    v46 = *((unsigned __int8 *)v44 + 31);
  if (v46 > v25)
  {
    std::string::basic_string(&v73, (const std::string *)(v44 + 1), 0, v25, (std::allocator<char> *)&v74);
    v47 = v3 + 80 * a2;
    v50 = *(const std::string::value_type **)(v47 + 8);
    v49 = v47 + 8;
    v48 = v50;
    v51 = *(char *)(v49 + 23);
    if (v51 >= 0)
      v52 = (const std::string::value_type *)v49;
    else
      v52 = v48;
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(v49 + 23);
    else
      v53 = *(_QWORD *)(v49 + 8);
    v54 = std::string::append(&v73, v52, v53);
    v55 = v54->__r_.__value_.__r.__words[0];
    v75[0] = v54->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
    v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v49 + 23) < 0)
      operator delete(*(void **)v49);
    *(_QWORD *)v49 = v55;
    *(_QWORD *)(v49 + 8) = v75[0];
    *(_QWORD *)(v49 + 15) = *(_QWORD *)((char *)v75 + 7);
    *(_BYTE *)(v49 + 23) = v56;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    v44 = a1[3];
    LOBYTE(v45) = *((_BYTE *)v44 + 31);
  }
  if ((v45 & 0x80) != 0)
  {
    v45 = (unint64_t)v44[2];
    if (v45 > v26)
      goto LABEL_68;
  }
  else if (v26 < (unint64_t)v45)
  {
    v45 = v45;
LABEL_68:
    std::string::basic_string(&v73, (const std::string *)(v44 + 1), v45 - v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v75);
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v73;
    else
      v57 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v58 = v73.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(v3 + 80 * a2 + 8), (const std::string::value_type *)v57, v58);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v71 >= v7)
  {
    std::string::basic_string(&v73, __str, 0, v71 - v7, (std::allocator<char> *)&v74);
    v59 = a1[3];
    v62 = (const std::string::value_type *)v59[4];
    v60 = v59 + 4;
    v61 = v62;
    v63 = *((char *)v60 + 23);
    if (v63 >= 0)
      v64 = (const std::string::value_type *)v60;
    else
      v64 = v61;
    if (v63 >= 0)
      v65 = *((unsigned __int8 *)v60 + 23);
    else
      v65 = (std::string::size_type)v60[1];
    v66 = std::string::append(&v73, v64, v65);
    v67 = v66->__r_.__value_.__r.__words[0];
    v75[0] = v66->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str->__r_.__value_.__l.__data_);
    __str->__r_.__value_.__r.__words[0] = v67;
    __str->__r_.__value_.__l.__size_ = v75[0];
    *(std::string::size_type *)((char *)&__str->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v75 + 7);
    *((_BYTE *)&__str->__r_.__value_.__s + 23) = v68;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=(__str, (const std::string *)(a1[3] + 4));
  }
  std::operator+<char>();
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = &v73;
  else
    v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v70 = v73.__r_.__value_.__l.__size_;
  std::string::append((std::string *)(v3 + 80 * a2 + 56), (const std::string::value_type *)v69, v70);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_1DE99C0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<int,5ul>>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      v6 = (void **)(a3 + 8);
      if (*(char *)(a3 + 31) < 0)
        operator delete(*v6);
      v7 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v8 = (void **)(a3 + 32);
      if (*(char *)(a3 + 55) < 0)
        operator delete(*v8);
      v9 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)v8 = v9;
      *(_BYTE *)(v5 + 55) = 0;
      *(_BYTE *)(v5 + 32) = 0;
      v10 = (void **)(a3 + 56);
      if (*(char *)(a3 + 79) < 0)
        operator delete(*v10);
      v11 = *(_OWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_OWORD *)v10 = v11;
      *(_BYTE *)(v5 + 79) = 0;
      *(_BYTE *)(v5 + 56) = 0;
      a3 += 80;
      v5 += 80;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<FRReplaceInst>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  __int128 v25;
  void **v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int64x2_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  char *v68;
  int64x2_t v69;
  char *v70;
  uint64_t v71;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 / 80;
  v9 = *a1 + 80 * (v7 / 80);
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v34 > 0x333333333333333)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v5) >> 4);
    if (2 * v36 > v34)
      v34 = 2 * v36;
    if (v36 >= 0x199999999999999)
      v37 = 0x333333333333333;
    else
      v37 = v34;
    v67 = v11;
    if (v37)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v37);
    }
    else
    {
      v39 = 0;
      v38 = 0;
    }
    v40 = (uint64_t)&v39[80 * v8];
    v64 = v39;
    *(_QWORD *)&v65 = v40;
    *((_QWORD *)&v65 + 1) = v40;
    v66 = &v39[80 * v38];
    if (v8 == v38)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v43 = 1;
        else
          v43 = 2 * v8;
        v71 = v11;
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(v43);
        v46 = v65;
        if (*((_QWORD *)&v65 + 1) == (_QWORD)v65)
        {
          v52 = vdupq_n_s64(v65);
          v47 = (uint64_t)&v44[80 * (v43 >> 2)];
        }
        else
        {
          v47 = (uint64_t)&v44[80 * (v43 >> 2) + *((_QWORD *)&v65 + 1) - v65];
          v48 = &v44[80 * (v43 >> 2)];
          do
          {
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_OWORD *)(v46 + 8);
            *((_QWORD *)v48 + 3) = *(_QWORD *)(v46 + 24);
            *(_OWORD *)(v48 + 8) = v49;
            *(_QWORD *)(v46 + 16) = 0;
            *(_QWORD *)(v46 + 24) = 0;
            *(_QWORD *)(v46 + 8) = 0;
            v50 = *(_OWORD *)(v46 + 32);
            *((_QWORD *)v48 + 6) = *(_QWORD *)(v46 + 48);
            *((_OWORD *)v48 + 2) = v50;
            *(_QWORD *)(v46 + 40) = 0;
            *(_QWORD *)(v46 + 48) = 0;
            *(_QWORD *)(v46 + 32) = 0;
            v51 = *(_OWORD *)(v46 + 56);
            *((_QWORD *)v48 + 9) = *(_QWORD *)(v46 + 72);
            *(_OWORD *)(v48 + 56) = v51;
            *(_QWORD *)(v46 + 64) = 0;
            *(_QWORD *)(v46 + 72) = 0;
            *(_QWORD *)(v46 + 56) = 0;
            v48 += 80;
            v46 += 80;
          }
          while (v48 != (char *)v47);
          v52 = (int64x2_t)v65;
        }
        v53 = v66;
        v68 = v64;
        v64 = v44;
        *(_QWORD *)&v65 = &v44[80 * (v43 >> 2)];
        v69 = v52;
        *((_QWORD *)&v65 + 1) = v47;
        v66 = &v44[80 * v45];
        v70 = v53;
        std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v68);
        v40 = *((_QWORD *)&v65 + 1);
      }
      else
      {
        v41 = v8 + 2;
        if (v8 >= -1)
          v41 = v8 + 1;
        v42 = v40 - 80 * (v41 >> 1);
        v40 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<FRReplaceInst *,FRReplaceInst *,FRReplaceInst *>(v40, v40, v42);
        *(_QWORD *)&v65 = v42;
        *((_QWORD *)&v65 + 1) = v40;
      }
    }
    std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v40, a3);
    *((_QWORD *)&v65 + 1) += 80;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(v11, v9, v9, *a1, *a1, v65, v65);
    *(_QWORD *)&v65 = v54;
    v55 = a1[1];
    v56 = *((_QWORD *)&v65 + 1);
    if (v9 != v55)
    {
      do
      {
        *(_DWORD *)v56 = *(_DWORD *)v9;
        v57 = *(_OWORD *)(v9 + 8);
        *(_QWORD *)(v56 + 24) = *(_QWORD *)(v9 + 24);
        *(_OWORD *)(v56 + 8) = v57;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v58 = *(_OWORD *)(v9 + 32);
        *(_QWORD *)(v56 + 48) = *(_QWORD *)(v9 + 48);
        *(_OWORD *)(v56 + 32) = v58;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        v59 = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v56 + 72) = *(_QWORD *)(v9 + 72);
        *(_OWORD *)(v56 + 56) = v59;
        *(_QWORD *)(v9 + 64) = 0;
        *(_QWORD *)(v9 + 72) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        v56 += 80;
        v9 += 80;
      }
      while (v9 != v55);
      v54 = v65;
      v9 = a1[1];
    }
    v60 = *a1;
    *a1 = v54;
    a1[1] = v56;
    v61 = a1[2];
    a1[2] = (uint64_t)v66;
    *((_QWORD *)&v65 + 1) = v9;
    v66 = (char *)v61;
    v64 = (char *)v60;
    *(_QWORD *)&v65 = v60;
    std::__split_buffer<FRReplaceInst>::~__split_buffer((uint64_t)&v64);
  }
  else if (v9 == v6)
  {
    std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(*a1 + 80 * (v7 / 80), a3);
    a1[1] = v9 + 80;
  }
  else
  {
    v12 = v9 + 80;
    v13 = v6 - 80;
    v63 = v7 / 80;
    v14 = a1[1];
    if (v6 >= 0x50)
    {
      do
      {
        *(_DWORD *)v14 = *(_DWORD *)v13;
        v15 = *(_OWORD *)(v13 + 8);
        *(_QWORD *)(v14 + 24) = *(_QWORD *)(v13 + 24);
        *(_OWORD *)(v14 + 8) = v15;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v16 = *(_OWORD *)(v13 + 32);
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(v13 + 48);
        *(_OWORD *)(v14 + 32) = v16;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        v17 = *(_OWORD *)(v13 + 56);
        *(_QWORD *)(v14 + 72) = *(_QWORD *)(v13 + 72);
        *(_OWORD *)(v14 + 56) = v17;
        *(_QWORD *)(v13 + 64) = 0;
        *(_QWORD *)(v13 + 72) = 0;
        *(_QWORD *)(v13 + 56) = 0;
        v14 += 80;
        v13 += 80;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v12)
    {
      v18 = 0;
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v12) >> 4);
      v20 = v5 + 80 * v19 + 80 * v63;
      v21 = -80 * v19;
      do
      {
        v22 = v20 + v18;
        v23 = v6 + v18;
        *(_DWORD *)(v6 + v18 - 80) = *(_DWORD *)(v20 + v18 - 80);
        v24 = (void **)(v6 + v18 - 72);
        if (*(char *)(v6 + v18 - 49) < 0)
          operator delete(*v24);
        v25 = *(_OWORD *)(v22 - 72);
        *(_QWORD *)(v6 + v18 - 56) = *(_QWORD *)(v22 - 56);
        *(_OWORD *)v24 = v25;
        *(_BYTE *)(v22 - 49) = 0;
        *(_BYTE *)(v22 - 72) = 0;
        v26 = (void **)(v23 - 48);
        if (*(char *)(v23 - 25) < 0)
          operator delete(*v26);
        v27 = (__int128 *)(v22 - 48);
        v28 = v20 + v18;
        v29 = *v27;
        *(_QWORD *)(v23 - 32) = *((_QWORD *)v27 + 2);
        *(_OWORD *)v26 = v29;
        *(_BYTE *)(v20 + v18 - 25) = 0;
        *(_BYTE *)v27 = 0;
        v30 = (void **)(v6 + v18 - 24);
        if (*(char *)(v6 + v18 - 1) < 0)
          operator delete(*v30);
        v31 = *(_OWORD *)(v28 - 24);
        *(_QWORD *)(v6 + v18 - 8) = *(_QWORD *)(v28 - 8);
        *(_OWORD *)v30 = v31;
        *(_BYTE *)(v28 - 1) = 0;
        *(_BYTE *)(v28 - 24) = 0;
        v18 -= 80;
      }
      while (v21 != v18);
    }
    v32 = a3;
    if (v9 <= a3)
      v32 = a3 + 80 * (a1[1] > a3);
    *(_DWORD *)v9 = *(_DWORD *)v32;
    v33 = v5 + 80 * v63;
    std::string::operator=((std::string *)(v33 + 8), (const std::string *)(v32 + 8));
    std::string::operator=((std::string *)(v33 + 32), (const std::string *)(v32 + 32));
    std::string::operator=((std::string *)(v33 + 56), (const std::string *)(v32 + 56));
  }
}

void sub_1DE99C6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v11 + 8) = v12;
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRReplaceInst>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<FRReplaceInst>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::allocator<FRReplaceInst>::destroy[abi:ne180100](i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FRReplaceInst>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>,std::reverse_iterator<FRReplaceInst*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_DWORD *)(a3 - 80);
    a3 -= 80;
    *(_DWORD *)(a7 - 80) = v8;
    a7 -= 80;
    v9 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a7 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a7 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)(a7 + 32) = v10;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    result = *(__n128 *)(a3 + 56);
    *(_QWORD *)(a7 + 72) = *(_QWORD *)(a3 + 72);
    *(__n128 *)(a7 + 56) = result;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<FRReplaceInst>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<FRReplaceInst>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA92F510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA92F510;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v2 = *(unsigned __int8 ***)(a1 + 8);
  v3 = *((unsigned __int8 *)v2 + 23);
  if (*((char *)v2 + 23) < 0)
  {
    v4 = *v2;
    v5 = v2[1];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v4 = *(unsigned __int8 **)(a1 + 8);
    v5 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 23);
    if (!*((_BYTE *)v2 + 23))
      goto LABEL_11;
  }
  v6 = &v5[(_QWORD)v4];
  if ((a2[23] & 0x80u) == 0)
    v7 = a2;
  else
    v7 = *(unsigned __int8 **)a2;
  while (*v4 == *v7)
  {
    ++v4;
    ++v7;
    if (!--v5)
    {
      v4 = v6;
      break;
    }
  }
LABEL_11:
  if ((v3 & 0x80) != 0)
  {
    v2 = (unsigned __int8 **)*v2;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  }
  return v4 == (unsigned __int8 *)((char *)v2 + v3);
}

uint64_t std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_prefix(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

void std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA92F4B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA92F4B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t result;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = v2[23];
  if ((v3 & 0x80u) == 0)
    v4 = v2[23];
  else
    v4 = *((_QWORD *)v2 + 1);
  v5 = a2[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (v4 != v5)
    return 0;
  if (v6 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v3 & 0x80) != 0)
    return memcmp(*(const void **)v2, a2, *((_QWORD *)v2 + 1)) == 0;
  if (!v2[23])
    return 1;
  v7 = v3 - 1;
  do
  {
    v9 = *v2++;
    v8 = v9;
    v11 = *a2++;
    v10 = v11;
    v13 = v7-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

uint64_t std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply_group(std::string const&,std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

void std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA92F568;
  return result;
}

void std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA92F568;
}

uint64_t std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()()
{
  return 1;
}

uint64_t std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FastRewriterImpl::apply(std::string const&,BOOL)::$_0,std::allocator<FastRewriterImpl::apply(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t FastRewriter::create(_QWORD *a1, std::string::value_type *a2)
{
  NSObject *v4;
  const char *v5;
  const std::string::value_type *v6;
  uint64_t *v7;
  _QWORD *v8;
  __int128 v9;
  uint8_t buf[4];
  const std::string::value_type *v12;
  _QWORD v13[2];
  _BYTE v14[408];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(_QWORD *)(v13[0] - 24) + 16])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0)
        v6 = a2;
      else
        v6 = *(const std::string::value_type **)a2;
      *(_DWORD *)buf = 136315138;
      v12 = v6;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_ERROR, "Invalid Rule file: %s", buf, 0xCu);
    }
    if (a2[23] >= 0)
      v7 = (uint64_t *)a2;
    else
      v7 = *(uint64_t **)a2;
    Diagnostics::log(3, "Invalid Rule file: %s", v5, v7);
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    fr_verbose_log(void)::is_verbose_ = 0;
    v8 = operator new(0x70uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1EA933270;
    *(_QWORD *)&v9 = FastRewriterImpl::FastRewriterImpl((uint64_t)(v8 + 3), (const std::string::value_type **)a2);
    *((_QWORD *)&v9 + 1) = v8;
    *(_OWORD *)a1 = v9;
  }
  v13[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](v14);
  std::istream::~istream();
  return MEMORY[0x1DF0ECF6C](v15);
}

void sub_1DE99CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  std::ifstream::~ifstream(&a14);
  _Unwind_Resume(a1);
}

uint64_t FastRewriterImpl::FastRewriterImpl(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t i;
  std::string::size_type v4;
  int v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::locale::id *v18;
  const std::locale::facet *v19;
  unsigned __int8 v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  FRCode *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  _DWORD *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  const char *v91;
  _BYTE *v92;
  void *v93;
  _BYTE *v94;
  void *v95;
  unint64_t v96;
  char *v97;
  _DWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  int v106;
  unsigned int v107;
  _DWORD *v108;
  _DWORD *v109;
  std::vector<int> *j;
  std::vector<int>::pointer begin;
  char *end;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *value;
  int *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  std::vector<int>::const_iterator v122;
  int *v123;
  int v124;
  NSObject *v125;
  const char *v126;
  void *v127;
  int v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  char *v143;
  char *v144;
  unint64_t *v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  __int128 v149;
  _OWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  NSObject *v153;
  const char *v154;
  int v155;
  NSObject *v156;
  const char *v157;
  int v158;
  NSObject *v159;
  const char *v160;
  int v161;
  NSObject *v162;
  const char *v163;
  int v164;
  NSObject *v165;
  const char *v166;
  int v167;
  NSObject *v168;
  const char *v169;
  int v170;
  NSObject *v171;
  const char *v172;
  int v173;
  NSObject *v174;
  const char *v175;
  int v176;
  NSObject *v177;
  const char *v178;
  int v179;
  NSObject *v180;
  const char *v181;
  int v182;
  NSObject *v183;
  const char *v184;
  int v185;
  NSObject *v186;
  const char *v187;
  int v188;
  NSObject *v189;
  const char *v190;
  int v191;
  NSObject *v192;
  const char *v193;
  int v194;
  NSObject *v195;
  const char *v196;
  int v197;
  NSObject *v198;
  const char *v199;
  int v200;
  NSObject *v201;
  const char *v202;
  int v203;
  NSObject *v204;
  const char *v205;
  int v206;
  NSObject *v207;
  const char *v208;
  int v209;
  NSObject *v210;
  const char *v211;
  int v212;
  NSObject *v213;
  const char *v214;
  int v215;
  NSObject *v216;
  const char *v217;
  int v218;
  NSObject *v219;
  const char *v220;
  int v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  __int128 v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  const std::string *v250;
  unint64_t *v251;
  unint64_t v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  int v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  NSObject *v262;
  const char *v263;
  uint64_t *v264;
  uint64_t *v265;
  _QWORD *v267;
  FRRuleSet **v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned __int8 *v272;
  unsigned __int8 **v273;
  char **v274;
  uint64_t v275;
  void **v276;
  uint64_t v277;
  void **v278;
  _QWORD *v279;
  std::__shared_weak_count *v280;
  _QWORD *v281;
  std::string v282;
  std::string __str;
  uint64_t v284;
  std::__shared_weak_count *v285;
  __int128 v286;
  _QWORD *v287;
  std::__shared_weak_count *v288;
  __int128 v289;
  _BYTE v290[32];
  __int128 v291;
  __int128 v292;
  std::string v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  _BYTE __p[32];
  std::__shared_weak_count *v297;
  _BYTE v298[128];
  uint64_t v299;
  _QWORD v300[23];

  i = a1;
  v300[20] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1EA91E5F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v268 = (FRRuleSet **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v267 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *a2, (std::string::size_type)a2[1]);
  else
    __str = *(std::string *)a2;
  v4 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
  v269 = i;
  if (v4 == -1)
  {
    v6 = 2;
    goto LABEL_10;
  }
  std::string::basic_string((std::string *)v298, &__str, v4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  v5 = v298[23];
  if ((v298[23] & 0x80000000) != 0)
  {
    if (*(_QWORD *)&v298[8] != 4)
      goto LABEL_16;
    v7 = *(_DWORD **)v298;
    if (**(_DWORD **)v298 == 1954051118)
    {
      *(_DWORD *)(i + 48) = 1;
      goto LABEL_19;
    }
  }
  else
  {
    if (v298[23] != 4)
      goto LABEL_16;
    if (*(_DWORD *)v298 == 1954051118)
    {
      v6 = 1;
LABEL_10:
      *(_DWORD *)(i + 48) = v6;
      goto LABEL_20;
    }
    v7 = v298;
  }
  if (*v7 == 1952539694)
  {
    v8 = 0;
    goto LABEL_17;
  }
LABEL_16:
  v8 = 2;
LABEL_17:
  *(_DWORD *)(i + 48) = v8;
  if ((v5 & 0x80000000) == 0)
    goto LABEL_20;
  v7 = *(_DWORD **)v298;
LABEL_19:
  operator delete(v7);
LABEL_20:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = *(_DWORD *)(i + 48);
  if (v9)
  {
    if (v9 == 1)
    {
      v10 = operator new();
      *(_DWORD *)v10 = 3;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v10 + 8), "nfa");
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_QWORD *)(v10 + 72) = 0;
      *(_DWORD *)(v10 + 64) = 1065353216;
      *(_QWORD *)(v10 + 80) = 0;
      *(_QWORD *)(v10 + 88) = 0;
      memset(v290, 0, 24);
      std::ifstream::basic_ifstream(v298);
      v11 = (std::__shared_weak_count *)operator new(0x30uLL);
      v11->__shared_owners_ = 0;
      v11->__shared_weak_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936798;
      v11[1].__vftable = 0;
      v11[1].__shared_owners_ = 0;
      v11[1].__shared_weak_owners_ = 0;
      v287 = &v11[1].__vftable;
      v288 = v11;
      std::string::basic_string[abi:ne180100]<0>(__p, "default");
      *(_QWORD *)&__p[24] = v11 + 1;
      v297 = v11;
      v287 = 0;
      v288 = 0;
      std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::push_back[abi:ne180100]((void **)(v10 + 72), (__int128 *)__p);
      v12 = v297;
      if (v297)
      {
        p_shared_owners = (unint64_t *)&v297->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v15 = v288;
      if (v288)
      {
        v16 = (unint64_t *)&v288->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (v299)
      {
        v18 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        while (1)
        {
          std::ios_base::getloc((const std::ios_base *)&v298[*(_QWORD *)(*(_QWORD *)v298 - 24)]);
          v19 = std::locale::use_facet((const std::locale *)__p, v18);
          v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale((std::locale *)__p);
          v21 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v298, (uint64_t)v290, v20);
          if ((*((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 32) & 5) != 0)
            break;
          FRRuleSet::add_text_rule(v10, (std::string *)v290);
        }
      }
      else if (fr_verbose_log(void)::is_verbose_)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v262 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a2 + 23) >= 0)
            v264 = (uint64_t *)a2;
          else
            v264 = (uint64_t *)*a2;
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v264;
          _os_log_impl(&dword_1DE3F6000, v262, OS_LOG_TYPE_ERROR, "Unable to read rule file: %s", __p, 0xCu);
        }
        if (*((char *)a2 + 23) >= 0)
          v265 = (uint64_t *)a2;
        else
          v265 = (uint64_t *)*a2;
        Diagnostics::log(3, "Unable to read rule file: %s", v263, v265);
      }
      *(_QWORD *)v298 = *MEMORY[0x1E0DE4F40];
      *(_QWORD *)&v298[*(_QWORD *)(*(_QWORD *)v298 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1DF0ECB94](&v298[16]);
      std::istream::~istream();
      MEMORY[0x1DF0ECF6C](v300);
      if ((v290[23] & 0x80000000) != 0)
        operator delete(*(void **)v290);
      v284 = v10;
      std::shared_ptr<FRRuleSet>::operator=[abi:ne180100]<FRRuleSet,std::default_delete<FRRuleSet>,void>(v268, &v284);
      if (v284)
        std::default_delete<FRRuleSet>::operator()[abi:ne180100](v284);
      FRRuleSet::parse(*v268);
    }
    return i;
  }
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v282, *a2, (std::string::size_type)a2[1]);
  else
    v282 = *(std::string *)a2;
  MemoryMap::MemoryMap(v298, (uint64_t)&v282);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v267, *(uint64_t *)v298, *(uint64_t *)&v298[8]);
  v22 = (unsigned __int8 **)(i + 72);
  *(_OWORD *)(i + 72) = *(_OWORD *)&v298[16];
  v23 = *(std::__shared_weak_count **)&v298[8];
  if (*(_QWORD *)&v298[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v298[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *v22;
  if (**v22)
  {
    v27 = 0;
    v274 = (char **)(i + 24);
    v28 = 4;
    v272 = *v22;
    v273 = (unsigned __int8 **)(i + 72);
    do
    {
      v291 = 0uLL;
      if (v26[3])
      {
        if (*(_DWORD *)&(*v22)[v28] == -1)
        {
          v234 = *(std::__shared_weak_count **)(i + 64);
          *(_QWORD *)v290 = *(_QWORD *)(i + 56);
          *(_QWORD *)&v290[8] = v234;
          if (v234)
          {
            v235 = (unint64_t *)&v234->__shared_owners_;
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
          }
          *(_OWORD *)&v290[16] = *(_OWORD *)v22;
          FRPCREGraph::create(v298, (uint64_t *)v290, v28 + 112);
          v237 = *(_OWORD *)v298;
          *(_OWORD *)v298 = 0uLL;
          v291 = v237;
          if (!v234)
            goto LABEL_352;
          v238 = (unint64_t *)&v234->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (v239)
            goto LABEL_352;
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          v240 = v234;
          goto LABEL_351;
        }
        v29 = *(std::__shared_weak_count **)(i + 64);
        v287 = *(_QWORD **)(i + 56);
        v288 = v29;
        v280 = v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v289 = *(_OWORD *)v22;
        v32 = operator new(0xB8uLL);
        v270 = v27;
        v32[1] = 0;
        v32[2] = 0;
        *v32 = &off_1EA935AE8;
        v33 = v32;
        if (v280)
        {
          v34 = (unint64_t *)&v280->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = v289;
        v32[4] = 0;
        v32[3] = &off_1EA9225A0;
        v32[5] = 0;
        v32[6] = 0;
        v278 = (void **)(v32 + 4);
        v37 = (FRCode *)std::string::basic_string[abi:ne180100]<0>(v32 + 7, "nfa");
        v33[19] = 0;
        v33[10] = 0;
        *((_OWORD *)v33 + 7) = 0u;
        v33[11] = 0;
        *((_OWORD *)v33 + 8) = 0u;
        *((_DWORD *)v33 + 36) = 1065353216;
        v33[20] = 0;
        v33[21] = 0;
        v276 = (void **)(v33 + 19);
        *((_DWORD *)v33 + 44) = 0;
        FRCode::init_tables(v37);
        *((_DWORD *)v33 + 26) = *(_DWORD *)(v36 + v28);
        std::string::basic_string[abi:ne180100]<0>(v298, (char *)(v36 + v28 + 4));
        if (*((char *)v33 + 55) < 0)
          operator delete(*v278);
        *(_OWORD *)v278 = *(_OWORD *)v298;
        v278[2] = *(void **)&v298[16];
        v38 = strlen((const char *)(v36 + v28 + 4));
        v39 = *((unsigned int *)v33 + 26);
        v40 = (_QWORD *)operator new[]();
        *v40 = 136;
        v40[1] = v39;
        v41 = v40 + 2;
        if ((_DWORD)v39)
        {
          v42 = v40 + 2;
          do
          {
            *(_BYTE *)v42 = 0;
            v42[6] = 0;
            v42[8] = 0;
            v42[10] = 0;
            v42[15] = 0;
            *((_BYTE *)v42 + 128) = 0;
            *(_OWORD *)(v42 + 1) = 0uLL;
            *(_OWORD *)(v42 + 3) = 0uLL;
            v42[12] = 0;
            v42[13] = 0;
            v42 += 17;
          }
          while (v42 != &v41[17 * v39]);
        }
        v271 = v28;
        v277 = (uint64_t)(v33 + 3);
        v43 = v28 + v38 + 5;
        v33[12] = v41;
        v279 = v33;
        if (*((_DWORD *)v33 + 26))
        {
          v44 = 0;
          v275 = (uint64_t)(v33 + 21);
          v45 = (unint64_t *)&v280->__shared_owners_;
          do
          {
            if (v280)
            {
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            v47 = &v41[17 * v44];
            v281 = v41;
            *((_BYTE *)v47 + 128) = 1;
            v48 = v47 + 16;
            *((_DWORD *)v47 + 1) = *(_DWORD *)(v36 + v43);
            v49 = v43 + 4;
            v47[1] = operator new[]();
            v50 = *((unsigned int *)v47 + 1);
            if ((_DWORD)v50)
            {
              v51 = 0;
              do
              {
                v52 = (const char *)(v36 + v49);
                *(_QWORD *)(v47[1] + v51) = v52;
                v49 += strlen(v52) + 1;
                v51 += 8;
              }
              while (8 * v50 != v51);
            }
            v53 = v36 + v49;
            v54 = v50 + v49;
            v47[2] = v53;
            v47[3] = v36 + v54;
            v55 = strlen((const char *)(v36 + v54));
            *(_BYTE *)v47 = *v48;
            v57 = *(_QWORD *)(v36 + (v54 + v55 + 1));
            v58 = &v281[17 * v44];
            v58[15] = v57;
            v59 = *(_DWORD *)(v36 + (v54 + v55 + 9));
            *((_DWORD *)v58 + 10) = v59;
            v60 = (v54 + v55 + 13);
            v58[4] = v36 + v60;
            v61 = v60 + 12 * v59;
            v62 = *(_DWORD *)(v36 + v61);
            *((_DWORD *)v58 + 14) = v62;
            v63 = v61 + 4;
            v58[6] = v36 + v63;
            if ((~(_BYTE)v57 & 0x30) != 0)
            {
              v65 = 40 * v62;
              if ((v57 & 0x10) != 0)
              {
                v281[17 * v44 + 12] = v36 + v61 + v65 - 36;
              }
              else if ((v57 & 0x20) != 0)
              {
                v281[17 * v44 + 13] = v36 + v61 + v65 - 36;
              }
            }
            else
            {
              v64 = 5 * v62;
              v65 = 40 * v62;
              v66 = v61 + 8 * v64;
              v67 = &v281[17 * v44];
              v67[12] = v36 + v66 - 76;
              v67[13] = v36 + v66 - 36;
            }
            v68 = v65 + v63;
            v69 = *(unsigned int *)(v36 + v68);
            v70 = &v281[17 * v44];
            *((_DWORD *)v70 + 18) = v69;
            v71 = v70 + 9;
            v72 = v68 + 4;
            if ((_DWORD)v69)
            {
              v73 = (_QWORD *)operator new[]();
              *v73 = 80;
              v73[1] = v69;
              v74 = v73 + 2;
              do
              {
                *(_BYTE *)v74 = 0;
                v74[2] = 0;
                v74[3] = 0;
                v74[1] = 0;
                v74 += 10;
              }
              while (v74 != &v73[10 * v69 + 2]);
              v75 = &v281[17 * v44];
              v75[8] = v73 + 2;
              v76 = v75 + 8;
              if (*v71)
              {
                v77 = 0;
                v78 = 0;
                do
                {
                  *(_BYTE *)(*v76 + v77 + 76) = *(_BYTE *)(v36 + v72);
                  v79 = *v76 + v77;
                  *(_DWORD *)(v79 + 72) = *(_DWORD *)(v36 + v72 + 1);
                  v80 = v72 + 5;
                  *(_QWORD *)(v79 + 64) = v36 + v80;
                  v81 = *v76 + v77;
                  v82 = *(_DWORD *)(v81 + 72);
                  *(_BYTE *)v81 = *v48;
                  uset_getSerializedSet();
                  v72 = v80 + 2 * v82;
                  ++v78;
                  v77 += 80;
                }
                while (v78 < *v71);
              }
            }
            v83 = *(_DWORD *)(v36 + v72);
            v84 = &v281[17 * v44];
            *((_DWORD *)v84 + 22) = v83;
            v85 = v72 + 4;
            v84[10] = v36 + v85;
            v86 = v85 + 4 * v83;
            *((_DWORD *)v84 + 28) = *(_DWORD *)(v36 + v86);
            v33 = v279;
            if (v280)
            {
              do
                v87 = __ldaxr(v45);
              while (__stlxr(v87 - 1, v45));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                std::__shared_weak_count::__release_weak(v280);
              }
            }
            v88 = v279[12];
            v89 = *(_QWORD *)(v88 + 136 * v44 + 96);
            if (v89)
            {
              FRNFA::update_prefix_tree(v277, v89, v44, v56);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v298, *(char **)(v88 + 136 * v44 + 24));
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v90 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v92 = v298;
                if (v298[23] < 0)
                  v92 = *(_BYTE **)v298;
                v93 = v278;
                if (*((char *)v279 + 55) < 0)
                  v93 = *v278;
                *(_DWORD *)__p = 136315394;
                *(_QWORD *)&__p[4] = v92;
                *(_WORD *)&__p[12] = 2080;
                *(_QWORD *)&__p[14] = v93;
                _os_log_impl(&dword_1DE3F6000, v90, OS_LOG_TYPE_DEBUG, "Empty first bytes rule: %s from %s", __p, 0x16u);
              }
              v94 = v298;
              if (v298[23] < 0)
                v94 = *(_BYTE **)v298;
              v95 = v278;
              if (*((char *)v279 + 55) < 0)
                v95 = *v278;
              Diagnostics::log(7, "Empty first bytes rule: %s from %s", v91, v94, v95);
              v97 = (char *)v279[20];
              v96 = v279[21];
              if ((unint64_t)v97 >= v96)
              {
                v99 = (char *)*v276;
                v100 = (v97 - (_BYTE *)*v276) >> 2;
                v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v102 = v96 - (_QWORD)v99;
                if (v102 >> 1 > v101)
                  v101 = v102 >> 1;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                  v103 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v275, v103);
                  v99 = (char *)v279[19];
                  v97 = (char *)v279[20];
                }
                else
                {
                  v104 = 0;
                }
                v105 = &v104[4 * v100];
                *(_DWORD *)v105 = v44;
                v98 = v105 + 4;
                while (v97 != v99)
                {
                  v106 = *((_DWORD *)v97 - 1);
                  v97 -= 4;
                  *((_DWORD *)v105 - 1) = v106;
                  v105 -= 4;
                }
                v279[19] = v105;
                v279[20] = v98;
                v279[21] = &v104[4 * v103];
                if (v99)
                  operator delete(v99);
              }
              else
              {
                *(_DWORD *)v97 = v44;
                v98 = v97 + 4;
              }
              v279[20] = v98;
              if ((v298[23] & 0x80000000) != 0)
                operator delete(*(void **)v298);
            }
            v41 = (_QWORD *)v279[12];
            v107 = v41[17 * v44 + 5];
            if (v107 > *((_DWORD *)v279 + 44))
              *((_DWORD *)v279 + 44) = v107;
            v43 = v86 + 4;
            ++v44;
          }
          while (v44 < *((unsigned int *)v279 + 26));
        }
        v28 = v271;
        *((_DWORD *)v33 + 27) = v43 - v271;
        v108 = (_DWORD *)v33[19];
        v109 = (_DWORD *)v33[20];
        for (i = v269; v108 != v109; ++v108)
        {
          *(_DWORD *)v298 = *v108;
          for (j = (std::vector<int> *)v33[16]; j; j = (std::vector<int> *)j->__begin_)
          {
            begin = j[1].__begin_;
            end = (char *)j[1].__end_;
            v113 = (end - (char *)begin) >> 2;
            if (end == (char *)begin)
            {
LABEL_129:
              value = j[1].__end_cap_.__value_;
              if (end >= (char *)value)
              {
                if ((v113 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v118 = (char *)value - (char *)begin;
                v119 = ((char *)value - (char *)begin) >> 1;
                if (v119 <= v113 + 1)
                  v119 = v113 + 1;
                if (v118 >= 0x7FFFFFFFFFFFFFFCLL)
                  v120 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v120 = v119;
                if (v120)
                {
                  v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&j[1].__end_cap_, v120);
                  begin = j[1].__begin_;
                  end = (char *)j[1].__end_;
                }
                else
                {
                  v121 = 0;
                }
                v123 = (int *)&v121[4 * v113];
                *v123 = *(_DWORD *)v298;
                v117 = v123 + 1;
                while (end != (char *)begin)
                {
                  v124 = *((_DWORD *)end - 1);
                  end -= 4;
                  *--v123 = v124;
                }
                j[1].__begin_ = v123;
                j[1].__end_ = v117;
                j[1].__end_cap_.__value_ = (int *)&v121[4 * v120];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *(_DWORD *)end = *(_DWORD *)v298;
                v117 = (int *)(end + 4);
              }
              j[1].__end_ = v117;
            }
            else
            {
              v114 = 0;
              if (v113 <= 1)
                v115 = 1;
              else
                v115 = (end - (char *)begin) >> 2;
              while (*(int *)v298 >= begin[v114])
              {
                if (v115 == ++v114)
                  goto LABEL_129;
              }
              v122.__i_ = &begin[v114];
              std::vector<int>::insert(j + 1, v122, (std::vector<int>::const_reference)v298);
            }
          }
        }
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v26 = v272;
        v22 = v273;
        v27 = v270;
        v125 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v127 = v278;
          if (*((char *)v279 + 55) < 0)
            v127 = *v278;
          v128 = *((_DWORD *)v279 + 44);
          *(_DWORD *)v298 = 136315394;
          *(_QWORD *)&v298[4] = v127;
          *(_WORD *)&v298[12] = 1024;
          *(_DWORD *)&v298[14] = v128;
          _os_log_impl(&dword_1DE3F6000, v125, OS_LOG_TYPE_DEBUG, "Group: %s, Max Ops: %u", v298, 0x12u);
        }
        v129 = v278;
        if (*((char *)v279 + 55) < 0)
          v129 = *v278;
        Diagnostics::log(7, "Group: %s, Max Ops: %u", v126, v129, *((unsigned int *)v279 + 44));
        if (v280)
        {
          v130 = (unint64_t *)&v280->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
            std::__shared_weak_count::__release_weak(v280);
          }
        }
        *(_QWORD *)&v132 = v277;
        *((_QWORD *)&v132 + 1) = v279;
        v133 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
        v291 = v132;
        if (v133)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v136 = v288;
        if (!v288)
          goto LABEL_352;
        v137 = (unint64_t *)&v288->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
      }
      else
      {
        v139 = *(_QWORD *)(i + 56);
        v140 = *(std::__shared_weak_count **)(i + 64);
        v284 = v139;
        v285 = v140;
        if (v140)
        {
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldxr(v141);
          while (__stxr(v142 + 1, v141));
        }
        v286 = *(_OWORD *)v22;
        v143 = (char *)operator new(0xA0uLL);
        v144 = v143;
        *((_QWORD *)v143 + 1) = 0;
        *((_QWORD *)v143 + 2) = 0;
        *(_QWORD *)v143 = &off_1EA932518;
        if (v140)
        {
          v145 = (unint64_t *)&v140->__shared_owners_;
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        v147 = v28;
        v148 = v28;
        v149 = v286;
        *((_OWORD *)v143 + 3) = 0u;
        v150 = v143 + 48;
        v292 = v149;
        *((_QWORD *)v143 + 3) = off_1EA91D0B0;
        *((_OWORD *)v143 + 2) = 0u;
        *((_OWORD *)v143 + 5) = 0u;
        v151 = v143 + 80;
        *((_OWORD *)v143 + 6) = 0u;
        *((_OWORD *)v143 + 7) = 0u;
        *((_OWORD *)v143 + 8) = 0u;
        *((_OWORD *)v143 + 9) = 0u;
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v143 + 4, v139, (uint64_t)v140);
        *v150 = v292;
        v152 = *(_QWORD *)v150 + v148;
        *((_QWORD *)v144 + 8) = v148;
        *((_QWORD *)v144 + 9) = v152;
        if (fr_verbose_log(void)::is_verbose_)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v153 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v155 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 104);
            *(_DWORD *)v298 = 67109120;
            *(_DWORD *)&v298[4] = v155;
            _os_log_impl(&dword_1DE3F6000, v153, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_states_]: %u", v298, 8u);
          }
          Diagnostics::log(7, "# - BinaryGraph[num_of_states_]: %u", v154, *(unsigned int *)(*((_QWORD *)v144 + 9) + 104));
          if (fr_verbose_log(void)::is_verbose_)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v156 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v158 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 100);
              *(_DWORD *)v298 = 67109120;
              *(_DWORD *)&v298[4] = v158;
              _os_log_impl(&dword_1DE3F6000, v156, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_cells_]: %u", v298, 8u);
            }
            Diagnostics::log(7, "# - BinaryGraph[num_of_cells_]: %u", v157, *(unsigned int *)(*((_QWORD *)v144 + 9) + 100));
            if (fr_verbose_log(void)::is_verbose_)
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v159 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v161 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 96);
                *(_DWORD *)v298 = 67109120;
                *(_DWORD *)&v298[4] = v161;
                _os_log_impl(&dword_1DE3F6000, v159, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[num_of_rules_]: %u", v298, 8u);
              }
              Diagnostics::log(7, "# - BinaryGraph[num_of_rules_]: %u", v160, *(unsigned int *)(*((_QWORD *)v144 + 9) + 96));
              if (fr_verbose_log(void)::is_verbose_)
              {
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v162 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                {
                  v164 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 56);
                  *(_DWORD *)v298 = 67109120;
                  *(_DWORD *)&v298[4] = v164;
                  _os_log_impl(&dword_1DE3F6000, v162, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_base_]: %u", v298, 8u);
                }
                Diagnostics::log(7, "# - BinaryGraph[rule_base_]: %u", v163, *(unsigned int *)(*((_QWORD *)v144 + 9) + 56));
                if (fr_verbose_log(void)::is_verbose_)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v165 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                  {
                    v167 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 60);
                    *(_DWORD *)v298 = 67109120;
                    *(_DWORD *)&v298[4] = v167;
                    _os_log_impl(&dword_1DE3F6000, v165, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_offset_]: %u", v298, 8u);
                  }
                  Diagnostics::log(7, "# - BinaryGraph[rule_offset_]: %u", v166, *(unsigned int *)(*((_QWORD *)v144 + 9) + 60));
                  if (fr_verbose_log(void)::is_verbose_)
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                    v168 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                    {
                      v170 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 72);
                      *(_DWORD *)v298 = 67109120;
                      *(_DWORD *)&v298[4] = v170;
                      _os_log_impl(&dword_1DE3F6000, v168, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_base_]: %u", v298, 8u);
                    }
                    Diagnostics::log(7, "# - BinaryGraph[rule_parse_base_]: %u", v169, *(unsigned int *)(*((_QWORD *)v144 + 9) + 72));
                    if (fr_verbose_log(void)::is_verbose_)
                    {
                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                      v171 = Diagnostics_GetLogObject(void)::__profile_log_default;
                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                      {
                        v173 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 76);
                        *(_DWORD *)v298 = 67109120;
                        *(_DWORD *)&v298[4] = v173;
                        _os_log_impl(&dword_1DE3F6000, v171, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_offset_]: %u", v298, 8u);
                      }
                      Diagnostics::log(7, "# - BinaryGraph[rule_parse_offset_]: %u", v172, *(unsigned int *)(*((_QWORD *)v144 + 9) + 76));
                      if (fr_verbose_log(void)::is_verbose_)
                      {
                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                        v174 = Diagnostics_GetLogObject(void)::__profile_log_default;
                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                        {
                          v176 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 80);
                          *(_DWORD *)v298 = 67109120;
                          *(_DWORD *)&v298[4] = v176;
                          _os_log_impl(&dword_1DE3F6000, v174, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_string_base_]: %u", v298, 8u);
                        }
                        Diagnostics::log(7, "# - BinaryGraph[rule_parse_string_base_]: %u", v175, *(unsigned int *)(*((_QWORD *)v144 + 9) + 80));
                        if (fr_verbose_log(void)::is_verbose_)
                        {
                          if (Diagnostics_GetLogObject(void)::onceToken != -1)
                            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                          v177 = Diagnostics_GetLogObject(void)::__profile_log_default;
                          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                          {
                            v179 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 84);
                            *(_DWORD *)v298 = 67109120;
                            *(_DWORD *)&v298[4] = v179;
                            _os_log_impl(&dword_1DE3F6000, v177, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[rule_parse_string_offset_]: %u", v298, 8u);
                          }
                          Diagnostics::log(7, "# - BinaryGraph[rule_parse_string_offset_]: %u", v178, *(unsigned int *)(*((_QWORD *)v144 + 9) + 84));
                          if (fr_verbose_log(void)::is_verbose_)
                          {
                            if (Diagnostics_GetLogObject(void)::onceToken != -1)
                              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                            v180 = Diagnostics_GetLogObject(void)::__profile_log_default;
                            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                            {
                              v182 = **((_DWORD **)v144 + 9);
                              *(_DWORD *)v298 = 67109120;
                              *(_DWORD *)&v298[4] = v182;
                              _os_log_impl(&dword_1DE3F6000, v180, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[state_base_]: %u", v298, 8u);
                            }
                            Diagnostics::log(7, "# - BinaryGraph[state_base_]: %u", v181, **((unsigned int **)v144 + 9));
                            if (fr_verbose_log(void)::is_verbose_)
                            {
                              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                              v183 = Diagnostics_GetLogObject(void)::__profile_log_default;
                              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                              {
                                v185 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 4);
                                *(_DWORD *)v298 = 67109120;
                                *(_DWORD *)&v298[4] = v185;
                                _os_log_impl(&dword_1DE3F6000, v183, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[state_offset_]: %u", v298, 8u);
                              }
                              Diagnostics::log(7, "# - BinaryGraph[state_offset_]: %u", v184, *(unsigned int *)(*((_QWORD *)v144 + 9) + 4));
                              if (fr_verbose_log(void)::is_verbose_)
                              {
                                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                v186 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                {
                                  v188 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 8);
                                  *(_DWORD *)v298 = 67109120;
                                  *(_DWORD *)&v298[4] = v188;
                                  _os_log_impl(&dword_1DE3F6000, v186, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_base_]: %u", v298, 8u);
                                }
                                Diagnostics::log(7, "# - BinaryGraph[cell_base_]: %u", v187, *(unsigned int *)(*((_QWORD *)v144 + 9) + 8));
                                if (fr_verbose_log(void)::is_verbose_)
                                {
                                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                  v189 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                  {
                                    v191 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 12);
                                    *(_DWORD *)v298 = 67109120;
                                    *(_DWORD *)&v298[4] = v191;
                                    _os_log_impl(&dword_1DE3F6000, v189, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_offset_]: %u", v298, 8u);
                                  }
                                  Diagnostics::log(7, "# - BinaryGraph[cell_offset_]: %u", v190, *(unsigned int *)(*((_QWORD *)v144 + 9) + 12));
                                  if (fr_verbose_log(void)::is_verbose_)
                                  {
                                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                    v192 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                    {
                                      v194 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 16);
                                      *(_DWORD *)v298 = 67109120;
                                      *(_DWORD *)&v298[4] = v194;
                                      _os_log_impl(&dword_1DE3F6000, v192, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_list_base_]: %u", v298, 8u);
                                    }
                                    Diagnostics::log(7, "# - BinaryGraph[cell_list_base_]: %u", v193, *(unsigned int *)(*((_QWORD *)v144 + 9) + 16));
                                    if (fr_verbose_log(void)::is_verbose_)
                                    {
                                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                      v195 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                      {
                                        v197 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 20);
                                        *(_DWORD *)v298 = 67109120;
                                        *(_DWORD *)&v298[4] = v197;
                                        _os_log_impl(&dword_1DE3F6000, v195, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_list_offset_]: %u", v298, 8u);
                                      }
                                      Diagnostics::log(7, "# - BinaryGraph[cell_list_offset_]: %u", v196, *(unsigned int *)(*((_QWORD *)v144 + 9) + 20));
                                      if (fr_verbose_log(void)::is_verbose_)
                                      {
                                        if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                        v198 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                        {
                                          v200 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 24);
                                          *(_DWORD *)v298 = 67109120;
                                          *(_DWORD *)&v298[4] = v200;
                                          _os_log_impl(&dword_1DE3F6000, v198, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_group_base_]: %u", v298, 8u);
                                        }
                                        Diagnostics::log(7, "# - BinaryGraph[cell_group_base_]: %u", v199, *(unsigned int *)(*((_QWORD *)v144 + 9) + 24));
                                        if (fr_verbose_log(void)::is_verbose_)
                                        {
                                          if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                          v201 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                          {
                                            v203 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 28);
                                            *(_DWORD *)v298 = 67109120;
                                            *(_DWORD *)&v298[4] = v203;
                                            _os_log_impl(&dword_1DE3F6000, v201, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_group_offset_]: %u", v298, 8u);
                                          }
                                          Diagnostics::log(7, "# - BinaryGraph[cell_group_offset_]: %u", v202, *(unsigned int *)(*((_QWORD *)v144 + 9) + 28));
                                          if (fr_verbose_log(void)::is_verbose_)
                                          {
                                            if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                            v204 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                            {
                                              v206 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 32);
                                              *(_DWORD *)v298 = 67109120;
                                              *(_DWORD *)&v298[4] = v206;
                                              _os_log_impl(&dword_1DE3F6000, v204, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_rule_list_base_]: %u", v298, 8u);
                                            }
                                            Diagnostics::log(7, "# - BinaryGraph[cell_rule_list_base_]: %u", v205, *(unsigned int *)(*((_QWORD *)v144 + 9) + 32));
                                            if (fr_verbose_log(void)::is_verbose_)
                                            {
                                              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                              v207 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                              {
                                                v209 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 36);
                                                *(_DWORD *)v298 = 67109120;
                                                *(_DWORD *)&v298[4] = v209;
                                                _os_log_impl(&dword_1DE3F6000, v207, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_rule_list_offset_]: %u", v298, 8u);
                                              }
                                              Diagnostics::log(7, "# - BinaryGraph[cell_rule_list_offset_]: %u", v208, *(unsigned int *)(*((_QWORD *)v144 + 9) + 36));
                                              if (fr_verbose_log(void)::is_verbose_)
                                              {
                                                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                                v210 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                {
                                                  v212 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 40);
                                                  *(_DWORD *)v298 = 67109120;
                                                  *(_DWORD *)&v298[4] = v212;
                                                  _os_log_impl(&dword_1DE3F6000, v210, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_counter_base_]: %u", v298, 8u);
                                                }
                                                Diagnostics::log(7, "# - BinaryGraph[cell_counter_base_]: %u", v211, *(unsigned int *)(*((_QWORD *)v144 + 9) + 40));
                                                if (fr_verbose_log(void)::is_verbose_)
                                                {
                                                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                                  v213 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                  {
                                                    v215 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 44);
                                                    *(_DWORD *)v298 = 67109120;
                                                    *(_DWORD *)&v298[4] = v215;
                                                    _os_log_impl(&dword_1DE3F6000, v213, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_counter_offset_]: %u", v298, 8u);
                                                  }
                                                  Diagnostics::log(7, "# - BinaryGraph[cell_counter_offset_]: %u", v214, *(unsigned int *)(*((_QWORD *)v144 + 9) + 44));
                                                  if (fr_verbose_log(void)::is_verbose_)
                                                  {
                                                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                                    v216 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                    {
                                                      v218 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 48);
                                                      *(_DWORD *)v298 = 67109120;
                                                      *(_DWORD *)&v298[4] = v218;
                                                      _os_log_impl(&dword_1DE3F6000, v216, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_siblings_base_]: %u", v298, 8u);
                                                    }
                                                    Diagnostics::log(7, "# - BinaryGraph[cell_siblings_base_]: %u", v217, *(unsigned int *)(*((_QWORD *)v144 + 9) + 48));
                                                    i = v269;
                                                    if (fr_verbose_log(void)::is_verbose_)
                                                    {
                                                      if (Diagnostics_GetLogObject(void)::onceToken != -1)
                                                        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                                                      v219 = Diagnostics_GetLogObject(void)::__profile_log_default;
                                                      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
                                                      {
                                                        v221 = *(_DWORD *)(*((_QWORD *)v144 + 9) + 52);
                                                        *(_DWORD *)v298 = 67109120;
                                                        *(_DWORD *)&v298[4] = v221;
                                                        _os_log_impl(&dword_1DE3F6000, v219, OS_LOG_TYPE_DEBUG, "# - BinaryGraph[cell_siblings_offset_]: %u", v298, 8u);
                                                      }
                                                      Diagnostics::log(7, "# - BinaryGraph[cell_siblings_offset_]: %u", v220, *(unsigned int *)(*((_QWORD *)v144 + 9) + 52));
                                                      i = v269;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (**((_DWORD **)v144 + 9) == -1)
        {
          v241 = *((_QWORD *)v144 + 5);
          *(_QWORD *)__p = *((_QWORD *)v144 + 4);
          *(_QWORD *)&__p[8] = v241;
          if (v241)
          {
            v242 = (unint64_t *)(v241 + 8);
            do
              v243 = __ldxr(v242);
            while (__stxr(v243 + 1, v242));
          }
          *(_OWORD *)&__p[16] = *v150;
          FRPCREGraph::create(v298, (uint64_t *)__p, v148 + 112);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v144 + 80), (__int128 *)v298);
          v244 = *(std::__shared_weak_count **)&v298[8];
          v26 = v272;
          v22 = v273;
          if (*(_QWORD *)&v298[8])
          {
            v245 = (unint64_t *)(*(_QWORD *)&v298[8] + 8);
            do
              v246 = __ldaxr(v245);
            while (__stlxr(v246 - 1, v245));
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          v247 = *(std::__shared_weak_count **)&__p[8];
          if (*(_QWORD *)&__p[8])
          {
            v248 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 - 1, v248));
            if (!v249)
            {
              ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
              std::__shared_weak_count::__release_weak(v247);
            }
          }
          v250 = (const std::string *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v151 + 32))(*v151);
          std::string::operator=((std::string *)(v144 + 136), v250);
        }
        else
        {
          v222 = (std::__shared_weak_count *)*((_QWORD *)v144 + 5);
          *(_QWORD *)v298 = *((_QWORD *)v144 + 4);
          *(_QWORD *)&v298[8] = v222;
          if (v222)
          {
            v223 = (unint64_t *)&v222->__shared_owners_;
            do
              v224 = __ldxr(v223);
            while (__stxr(v224 + 1, v223));
          }
          *(_OWORD *)&v298[16] = *v150;
          v293.__r_.__value_.__r.__words[0] = (v148 + 112);
          std::allocate_shared[abi:ne180100]<FRBlob<char>,std::allocator<FRBlob<char>>,MemoryMap &,unsigned long &,void>(&v294, (uint64_t)v298, &v293);
          v26 = v272;
          v22 = v273;
          if (v222)
          {
            v225 = (unint64_t *)&v222->__shared_owners_;
            do
              v226 = __ldaxr(v225);
            while (__stlxr(v226 - 1, v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
          v227 = v294;
          std::string::basic_string[abi:ne180100]<0>(&v293, *(char **)(v294 + 8));
          std::string::resize(&v293, *(_QWORD *)(v227 + 16), 0);
          std::string::operator=((std::string *)(v144 + 112), &v293);
          if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v293.__r_.__value_.__l.__data_);
          v228 = v295;
          if (v295)
          {
            v229 = (unint64_t *)&v295->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
          MEMORY[0x1DF0ECA80](v144 + 136, &byte_1DEBD87CE);
          *(_OWORD *)v298 = 0uLL;
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v144 + 80), (__int128 *)v298);
          v231 = *(std::__shared_weak_count **)&v298[8];
          if (*(_QWORD *)&v298[8])
          {
            v232 = (unint64_t *)(*(_QWORD *)&v298[8] + 8);
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
              std::__shared_weak_count::__release_weak(v231);
            }
          }
        }
        v28 = v147;
        if (v140)
        {
          v251 = (unint64_t *)&v140->__shared_owners_;
          do
            v252 = __ldaxr(v251);
          while (__stlxr(v252 - 1, v251));
          if (!v252)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        *(_QWORD *)&v253 = v144 + 24;
        *((_QWORD *)&v253 + 1) = v144;
        v254 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
        v291 = v253;
        if (v254)
        {
          v255 = (unint64_t *)&v254->__shared_owners_;
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        v136 = v285;
        if (!v285)
          goto LABEL_352;
        v257 = (unint64_t *)&v285->__shared_owners_;
        do
          v138 = __ldaxr(v257);
        while (__stlxr(v138 - 1, v257));
      }
      if (v138)
        goto LABEL_352;
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      v240 = v136;
LABEL_351:
      std::__shared_weak_count::__release_weak(v240);
LABEL_352:
      std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v274, &v291);
      v258 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v291 + 40))(v291);
      v259 = (std::__shared_weak_count *)*((_QWORD *)&v291 + 1);
      if (*((_QWORD *)&v291 + 1))
      {
        v260 = (unint64_t *)(*((_QWORD *)&v291 + 1) + 8);
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      v28 += v258;
      ++v27;
    }
    while (v27 < *v26);
  }
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v282.__r_.__value_.__l.__data_);
  return i;
}

void sub_1DE99EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;

  if (a47)
    std::default_delete<FRRuleSet>::operator()[abi:ne180100](a47);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a13);
  a67 = a24 + 24;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a67);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<FRRuleSet>::operator=[abi:ne180100]<FRRuleSet,std::default_delete<FRRuleSet>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_1EA936BC0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::default_delete<FRRuleSet>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = (void **)(result + 72);
    std::vector<std::pair<std::string,std::shared_ptr<std::vector<std::shared_ptr<FRRule>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1 + 32);
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

void std::__shared_ptr_pointer<FRRuleSet  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<FRRuleSet  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<FRRuleSet>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<FRRuleSet  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_emplace<FastRewriterImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FastRewriterImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FastRewriterImpl>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 24) = off_1EA91E5F8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 80);
  v3 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

void FeatureProcessingFastspeech2::process_user_features(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  void **j;
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  float v48;
  float v49;
  float *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  int v59;
  float *v60;
  float *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  float *v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  float *v72;
  float v73;
  _QWORD *v74;
  uint64_t v75;
  float v76;
  float *v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  float v83;
  float v84;
  float *v85;
  float *v86;
  float *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  float *v93;
  int v94;
  float v95;
  float *v96;
  float *v97;
  float *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  float *v104;
  char *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t i;
  uint64_t *v111[3];
  uint64_t *v112[3];
  uint64_t *v113[3];
  uint64_t *v114[3];
  uint64_t *v115[3];
  uint64_t *v116[3];
  void *__p;
  float *v118;
  char *v119;
  void *v120;
  _BYTE *v121;
  char *v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  const void **v129[4];

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v5 != *(_QWORD *)(*(_QWORD *)a2 + 16) && *(_BYTE *)(v5 + 60))
    *(_DWORD *)(a1 + 80) = 0;
  std::map<std::string,std::vector<float>>::map[abi:ne180100](v129, 0);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v124 = 0;
  v125 = 0;
  v123 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = 0.0;
  v8 = 0.0;
  for (i = *(_QWORD *)(*(_QWORD *)a2 + 16); v6 != i; v6 += 104)
  {
    v9 = *(_DWORD *)(a1 + 80);
    if (0xAAAAAAAAAAAAAAABLL * ((v124 - (uint64_t)v123) >> 3) > v9)
    {
      v10 = *(_DWORD *)(a1 + 80);
      v11 = v9 + 1;
      for (j = &v123[3 * v10]; ; j += 3)
      {
        v13 = *((char *)j + 23);
        if (v13 < 0)
        {
          if (j[1] != (void *)3)
            break;
          v14 = (unsigned __int16 *)*j;
        }
        else
        {
          v14 = (unsigned __int16 *)j;
          if (v13 != 3)
            break;
        }
        v15 = *v14;
        v16 = *((unsigned __int8 *)v14 + 2);
        if (v15 != 26995 || v16 != 108)
          break;
        ++v10;
        *(_DWORD *)(a1 + 80) = v11++;
      }
      v9 = v10;
    }
    if (*(unsigned __int8 *)(v6 + 61) | *(unsigned __int8 *)(v6 + 62))
    {
      v24 = v127;
      v25 = *(_QWORD *)*(v127 - 3);
      v26 = *(_DWORD *)(a1 + 112);
      v27 = operator new(0xCuLL);
      v121 = v27 + 3;
      v122 = (char *)(v27 + 3);
      *(_QWORD *)v27 = v25;
      v27[2] = v26;
      v120 = v27;
      if ((unint64_t)v24 >= v128)
      {
        v28 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
      }
      else
      {
        *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v24, v120, (uint64_t)v121, (v121 - (_BYTE *)v120) >> 2);
        v28 = (uint64_t)(v24 + 3);
      }
      v45 = 0;
      v127 = (_QWORD *)v28;
      v30 = *(float *)(a1 + 112);
      __p = 0;
      v118 = 0;
      v46 = 1;
      v119 = 0;
      do
      {
        v47 = v46;
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v116, v129);
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v115, (const void ***)(a1 + 32));
        v48 = FeatureProcessingBase::normalize_feature(v116, v115, v45, *((float *)v120 + v45));
        v49 = v48;
        v50 = v118;
        if (v118 >= (float *)v119)
        {
          v52 = (float *)__p;
          v53 = ((char *)v118 - (_BYTE *)__p) >> 2;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v55 = v119 - (_BYTE *)__p;
          if ((v119 - (_BYTE *)__p) >> 1 > v54)
            v54 = v55 >> 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v56);
            v52 = (float *)__p;
            v50 = v118;
          }
          else
          {
            v57 = 0;
          }
          v58 = (float *)&v57[4 * v53];
          *v58 = v49;
          v51 = v58 + 1;
          while (v50 != v52)
          {
            v59 = *((_DWORD *)v50-- - 1);
            *((_DWORD *)v58-- - 1) = v59;
          }
          __p = v58;
          v118 = v51;
          v119 = &v57[4 * v56];
          if (v52)
            operator delete(v52);
        }
        else
        {
          *v118 = v48;
          v51 = v50 + 1;
        }
        v118 = v51;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v115[1]);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v116[1]);
        v46 = 0;
        v45 = 1;
      }
      while ((v47 & 1) != 0);
      v60 = v118;
      if (v118 >= (float *)v119)
      {
        v62 = (float *)__p;
        v63 = ((char *)v118 - (_BYTE *)__p) >> 2;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v65 = v119 - (_BYTE *)__p;
        if ((v119 - (_BYTE *)__p) >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v66);
          v62 = (float *)__p;
          v60 = v118;
        }
        else
        {
          v67 = 0;
        }
        v68 = (float *)&v67[4 * v63];
        *v68 = *(float *)(a1 + 112);
        v61 = v68 + 1;
        while (v60 != v62)
        {
          v69 = *((_DWORD *)v60-- - 1);
          *((_DWORD *)v68-- - 1) = v69;
        }
        __p = v68;
        v118 = v61;
        v119 = &v67[4 * v66];
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v118 = *(float *)(a1 + 112);
        v61 = v60 + 1;
      }
      v118 = v61;
      v70 = a3[1];
      if (v70 >= a3[2])
      {
        v71 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
        v71 = v70 + 24;
      }
      a3[1] = v71;
    }
    else
    {
      v18 = *(_DWORD *)(MEMORY[0x30] + 4 * v9);
      v19 = *(_DWORD *)(MEMORY[0x48] + 4 * v9);
      v20 = *(_DWORD *)(MEMORY[0x18] + 4 * v9);
      v21 = operator new(0xCuLL);
      v121 = v21 + 3;
      v122 = (char *)(v21 + 3);
      *v21 = v18;
      v21[1] = v19;
      v21[2] = v20;
      v120 = v21;
      v22 = v127;
      if ((unint64_t)v127 >= v128)
      {
        v23 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
      }
      else
      {
        *v127 = 0;
        v22[1] = 0;
        v22[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v22, v120, (uint64_t)v121, (v121 - (_BYTE *)v120) >> 2);
        v23 = (uint64_t)(v22 + 3);
      }
      v29 = 0;
      v127 = (_QWORD *)v23;
      v30 = *(float *)(MEMORY[0x18] + 4 * *(int *)(a1 + 80));
      __p = 0;
      v118 = 0;
      v119 = 0;
      do
      {
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v114, v129);
        std::map<std::string,std::vector<float>>::map[abi:ne180100](v113, (const void ***)(a1 + 32));
        v31 = FeatureProcessingBase::normalize_feature(v114, v113, v29, *((float *)v120 + v29));
        v32 = v31;
        v33 = v118;
        if (v118 >= (float *)v119)
        {
          v35 = (float *)__p;
          v36 = ((char *)v118 - (_BYTE *)__p) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v38 = v119 - (_BYTE *)__p;
          if ((v119 - (_BYTE *)__p) >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v39);
            v35 = (float *)__p;
            v33 = v118;
          }
          else
          {
            v40 = 0;
          }
          v41 = (float *)&v40[4 * v36];
          *v41 = v32;
          v34 = v41 + 1;
          while (v33 != v35)
          {
            v42 = *((_DWORD *)v33-- - 1);
            *((_DWORD *)v41-- - 1) = v42;
          }
          __p = v41;
          v118 = v34;
          v119 = &v40[4 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v118 = v31;
          v34 = v33 + 1;
        }
        v118 = v34;
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v113[1]);
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v114[1]);
        ++v29;
      }
      while (v29 != 3);
      v43 = a3[1];
      if (v43 >= a3[2])
      {
        v44 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
        v44 = v43 + 24;
      }
      a3[1] = v44;
      ++*(_DWORD *)(a1 + 80);
    }
    if (__p)
    {
      v118 = (float *)__p;
      operator delete(__p);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    v8 = v8 + v30;
  }
  v72 = (float *)MEMORY[0x18];
  if (MEMORY[0x18] != MEMORY[0x20])
  {
    v7 = 0.0;
    do
    {
      v73 = *v72++;
      v7 = v7 + v73;
    }
    while (v72 != (float *)MEMORY[0x20]);
  }
  v74 = v127;
  v75 = *(_QWORD *)*(v127 - 3);
  v76 = *(float *)(a1 + 112);
  v77 = (float *)operator new(0xCuLL);
  v78 = v7 - v8;
  if ((float)(v7 - v8) <= v76)
    v78 = v76;
  v121 = v77 + 3;
  v122 = (char *)(v77 + 3);
  *(_QWORD *)v77 = v75;
  v77[2] = v78;
  v120 = v77;
  if ((unint64_t)v74 >= v128)
  {
    v79 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v126, (uint64_t)&v120);
  }
  else
  {
    *v74 = 0;
    v74[1] = 0;
    v74[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v74, v120, (uint64_t)v121, (v121 - (_BYTE *)v120) >> 2);
    v79 = (uint64_t)(v74 + 3);
  }
  v80 = 0;
  v127 = (_QWORD *)v79;
  __p = 0;
  v118 = 0;
  v119 = 0;
  v81 = 1;
  do
  {
    v82 = v81;
    std::map<std::string,std::vector<float>>::map[abi:ne180100](v112, v129);
    std::map<std::string,std::vector<float>>::map[abi:ne180100](v111, (const void ***)(a1 + 32));
    v83 = FeatureProcessingBase::normalize_feature(v112, v111, v80, *((float *)v120 + v80));
    v84 = v83;
    v85 = v118;
    if (v118 >= (float *)v119)
    {
      v87 = (float *)__p;
      v88 = ((char *)v118 - (_BYTE *)__p) >> 2;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v90 = v119 - (_BYTE *)__p;
      if ((v119 - (_BYTE *)__p) >> 1 > v89)
        v89 = v90 >> 1;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
        v91 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v91);
        v87 = (float *)__p;
        v85 = v118;
      }
      else
      {
        v92 = 0;
      }
      v93 = (float *)&v92[4 * v88];
      *v93 = v84;
      v86 = v93 + 1;
      while (v85 != v87)
      {
        v94 = *((_DWORD *)v85-- - 1);
        *((_DWORD *)v93-- - 1) = v94;
      }
      __p = v93;
      v118 = v86;
      v119 = &v92[4 * v91];
      if (v87)
        operator delete(v87);
    }
    else
    {
      *v118 = v83;
      v86 = v85 + 1;
    }
    v118 = v86;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v111[1]);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v112[1]);
    v81 = 0;
    v80 = 1;
  }
  while ((v82 & 1) != 0);
  v95 = *(float *)(a1 + 112) * 5.0;
  v96 = v118;
  if (v118 >= (float *)v119)
  {
    v98 = (float *)__p;
    v99 = ((char *)v118 - (_BYTE *)__p) >> 2;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v101 = v119 - (_BYTE *)__p;
    if ((v119 - (_BYTE *)__p) >> 1 > v100)
      v100 = v101 >> 1;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
      v102 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v102 = v100;
    if (v102)
    {
      v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v119, v102);
      v98 = (float *)__p;
      v96 = v118;
    }
    else
    {
      v103 = 0;
    }
    v104 = (float *)&v103[4 * v99];
    v105 = &v103[4 * v102];
    *v104 = v95;
    v97 = v104 + 1;
    while (v96 != v98)
    {
      v106 = *((_DWORD *)v96-- - 1);
      *((_DWORD *)v104-- - 1) = v106;
    }
    __p = v104;
    v118 = v97;
    v119 = v105;
    if (v98)
      operator delete(v98);
  }
  else
  {
    *v118 = v95;
    v97 = v96 + 1;
  }
  v118 = v97;
  v107 = a3[1];
  if (v107 >= a3[2])
  {
    v108 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
    v108 = v107 + 24;
  }
  a3[1] = v108;
  if (__p)
  {
    v118 = (float *)__p;
    operator delete(__p);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  v120 = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  v123 = (void **)&v126;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v123);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v129[1]);
}

void sub_1DE99FE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t *__p,uint64_t *a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  if (__p)
  {
    a33 = __p;
    operator delete(__p);
  }
  __p = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a35 = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  a35 = v35 - 184;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v35 - 152));
  _Unwind_Resume(a1);
}

float FeatureProcessingBase::normalize_feature(uint64_t **a1, uint64_t **a2, unsigned int a3, float a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void **v21;

  std::string::basic_string[abi:ne180100]<0>(v19, "mean");
  v17[0] = v19;
  v8 = *(float *)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v19, (_OWORD **)v17)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(v17, "std");
  v15[0] = v17;
  v9 = *(float *)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)v17, (_OWORD **)v15)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(v15, "std");
  __p[0] = v15;
  v10 = *(float *)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v15, (_OWORD **)__p)+ 7)+ 4 * a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  v21 = __p;
  v11 = *(float *)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)__p, (_OWORD **)&v21)+ 7)+ 4 * a3);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  return v11 + (float)((float)((float)(a4 - v8) / v9) * v10);
}

void sub_1DE9A00CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void FeatureProcessingTacotron::process_user_features(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  void **i;
  int v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52[3];
  uint64_t *v53[3];
  void *__p;
  float *v55;
  float *v56;
  void *v57;
  _BYTE *v58;
  _DWORD *v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  const void **v66[4];

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v6 != *(_QWORD *)(*(_QWORD *)a2 + 16) && *(_BYTE *)(v6 + 60))
    *(_DWORD *)(a1 + 80) = 0;
  std::map<std::string,std::vector<float>>::map[abi:ne180100](v66, 0);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v51 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v7 == v51)
  {
    v47 = -24;
    goto LABEL_67;
  }
  do
  {
    v8 = *(_DWORD *)(a1 + 80);
    if (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)v60) >> 3) > v8)
    {
      v9 = *(_DWORD *)(a1 + 80);
      v10 = v8 + 1;
      for (i = &v60[3 * v9]; ; i += 3)
      {
        v12 = *((char *)i + 23);
        if (v12 < 0)
        {
          if (i[1] != (void *)3)
            break;
          v13 = (unsigned __int16 *)*i;
        }
        else
        {
          v13 = (unsigned __int16 *)i;
          if (v12 != 3)
            break;
        }
        v14 = *v13;
        v15 = *((unsigned __int8 *)v13 + 2);
        if (v14 != 26995 || v15 != 108)
          break;
        ++v9;
        *(_DWORD *)(a1 + 80) = v10++;
      }
      v8 = v9;
    }
    if (*(_BYTE *)(v7 + 61))
    {
      v17 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v18 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)(v64 - 3));
      }
      else
      {
        *v64 = 0;
        v17[1] = 0;
        v17[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, (const void *)*(v17 - 3), *(v17 - 2), (uint64_t)(*(v17 - 2) - *(v17 - 3)) >> 2);
        v18 = (uint64_t)(v17 + 3);
      }
      v64 = (_QWORD *)v18;
      v21 = a3[1];
      v22 = v21 - 24;
      if (v21 >= a3[2])
      {
LABEL_33:
        v29 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, v22);
        goto LABEL_34;
      }
LABEL_32:
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, v22);
      v29 = v21 + 24;
LABEL_34:
      a3[1] = v29;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v7 + 62))
    {
      v19 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v20 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)(v64 - 3));
      }
      else
      {
        *v64 = 0;
        v19[1] = 0;
        v19[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v19, (const void *)*(v19 - 3), *(v19 - 2), (uint64_t)(*(v19 - 2) - *(v19 - 3)) >> 2);
        v20 = (uint64_t)(v19 + 3);
      }
      v64 = (_QWORD *)v20;
      v21 = a3[1];
      v22 = v21 - 24;
      if (v21 >= a3[2])
        goto LABEL_33;
      goto LABEL_32;
    }
    v23 = *(_DWORD *)(MEMORY[0x30] + 4 * v8);
    v24 = *(_DWORD *)(MEMORY[0x48] + 4 * v8);
    v25 = *(_DWORD *)(MEMORY[0x18] + 4 * v8);
    v26 = operator new(0xCuLL);
    v58 = v26 + 3;
    v59 = v26 + 3;
    *v26 = v23;
    v26[1] = v24;
    v26[2] = v25;
    v57 = v26;
    v27 = v64;
    if ((unint64_t)v64 >= v65)
    {
      v28 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, (uint64_t)&v57);
    }
    else
    {
      *v64 = 0;
      v27[1] = 0;
      v27[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v27, v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 2);
      v28 = (uint64_t)(v27 + 3);
    }
    v30 = 0;
    v64 = (_QWORD *)v28;
    __p = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      std::map<std::string,std::vector<float>>::map[abi:ne180100](v53, v66);
      std::map<std::string,std::vector<float>>::map[abi:ne180100](v52, (const void ***)(a1 + 32));
      v31 = FeatureProcessingBase::normalize_feature(v53, v52, v30, *((float *)v57 + v30));
      v32 = v31;
      v33 = v55;
      if (v55 >= v56)
      {
        v35 = (float *)__p;
        v36 = ((char *)v55 - (_BYTE *)__p) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = (char *)v56 - (_BYTE *)__p;
        if (((char *)v56 - (_BYTE *)__p) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v39);
          v35 = (float *)__p;
          v33 = v55;
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = v32;
        v34 = v41 + 1;
        while (v33 != v35)
        {
          v42 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __p = v41;
        v55 = v34;
        v56 = (float *)&v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v55 = v31;
        v34 = v33 + 1;
      }
      v55 = v34;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v52[1]);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v53[1]);
      ++v30;
    }
    while (v30 != 3);
    v43 = a3[1];
    if (v43 >= a3[2])
    {
      v44 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
      v44 = v43 + 24;
    }
    a3[1] = v44;
    ++*(_DWORD *)(a1 + 80);
    if (__p)
    {
      v55 = (float *)__p;
      operator delete(__p);
    }
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
LABEL_35:
    v7 += 104;
  }
  while (v7 != v51);
  v45 = v64;
  if ((unint64_t)v64 < v65)
  {
    *v64 = 0;
    v45[1] = 0;
    v45[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v45, (const void *)*(v45 - 3), *(v45 - 2), (uint64_t)(*(v45 - 2) - *(v45 - 3)) >> 2);
    v46 = (uint64_t)(v45 + 3);
    goto LABEL_68;
  }
  v47 = (uint64_t)(v64 - 3);
LABEL_67:
  v46 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v63, v47);
LABEL_68:
  v64 = (_QWORD *)v46;
  v48 = a3[1];
  v49 = v48 - 24;
  if (v48 >= a3[2])
  {
    v50 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, v49);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, v49);
    v50 = v48 + 24;
  }
  a3[1] = v50;
  v57 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  v60 = (void **)&v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v60);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v66[1]);
}

void sub_1DE9A06BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char **__p,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  uint64_t v27;

  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v27 - 136));
  _Unwind_Resume(a1);
}

void PhonewiseFeatureModule::~PhonewiseFeatureModule(void **this)
{
  PhonewiseFeatureModule::~PhonewiseFeatureModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *this = &off_1EA920568;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  Module::~Module((Module *)this);
}

void PhonewiseFeatureModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void (***v9)(uint64_t *__return_ptr, _QWORD, _QWORD **);
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  _BOOL4 v17;
  const char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47[3];
  uint64_t v48[3];
  uint64_t v49[3];
  _QWORD *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  void **v56;
  __int128 buf;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(*(_QWORD *)v4 + 8);
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v54 = v5;
  v55 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(void (****)(uint64_t *__return_ptr, _QWORD, _QWORD **))(a1 + 296);
    v51 = v6;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(void (****)(uint64_t *__return_ptr, _QWORD, _QWORD **))(a1 + 296);
    v51 = 0;
  }
  v50 = v5;
  (**v9)(&v52, v9, &v50);
  v11 = v51;
  if (v51)
  {
    v12 = (unint64_t *)&v51->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3);
    _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "Normalized speech feature slice size: %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Normalized speech feature slice size: %zu", v15, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v17 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO);
  v19 = v54;
  if (v17)
  {
    v20 = (uint64_t)(v54[5] - v54[4]) >> 2;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_INFO, "Tacotron feature phone embedding size: %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(6, "Tacotron feature phone embedding size: %zu", v18, (uint64_t)(v19[5] - v19[4]) >> 2);
  v21 = (_QWORD *)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
  {
    v23 = *(_QWORD *)(a1 + 280);
    if (v23 != 8)
    {
      if (v23 != 11)
        goto LABEL_50;
      v21 = (_QWORD *)*v21;
LABEL_28:
      v24 = (_QWORD *)*v21;
      v25 = *(_QWORD *)((char *)v21 + 3);
      if (v24 == (_QWORD *)0x6565707374736166 && v25 == 0x3268636565707374)
      {
        v27 = (uint64_t)(v19[5] - v19[4]) >> 2;
        LODWORD(v56) = 0;
        std::vector<float>::vector(&buf, v27, &v56);
        v28 = (void *)v19[13];
        if (v28)
        {
          v19[14] = v28;
          operator delete(v28);
          v19[13] = 0;
          v19[14] = 0;
          v19[15] = 0;
        }
        *(_OWORD *)(v19 + 13) = buf;
        v19[15] = v58;
        v29 = (uint64_t)(v19[5] - v19[4]) >> 2;
        LODWORD(v56) = 0;
        std::vector<float>::vector(&buf, v29, &v56);
        v30 = (void *)v19[16];
        if (v30)
        {
          v19[17] = v30;
          operator delete(v30);
          v19[16] = 0;
          v19[17] = 0;
          v19[18] = 0;
        }
        *((_OWORD *)v19 + 8) = buf;
        v19[18] = v58;
        v31 = (uint64_t)(v19[5] - v19[4]) >> 2;
        LODWORD(v56) = 0;
        std::vector<float>::vector(&buf, v31, &v56);
        v32 = (void *)v19[19];
        if (v32)
        {
          v19[20] = v32;
          operator delete(v32);
          v19[19] = 0;
          v19[20] = 0;
          v19[21] = 0;
        }
        *(_OWORD *)(v19 + 19) = buf;
        v19[21] = v58;
        memset(v49, 0, sizeof(v49));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v49, v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v49, 2u);
        v33 = (void *)v19[22];
        if (v33)
        {
          v19[23] = v33;
          operator delete(v33);
          v19[22] = 0;
          v19[23] = 0;
          v19[24] = 0;
        }
        *((_OWORD *)v19 + 11) = buf;
        v19[24] = v58;
        v58 = 0;
        v56 = (void **)v49;
        buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v56);
        memset(v48, 0, sizeof(v48));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v48, v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v48, 0);
        v34 = (void *)v19[25];
        if (v34)
        {
          v19[26] = v34;
          operator delete(v34);
          v19[25] = 0;
          v19[26] = 0;
          v19[27] = 0;
        }
        *(_OWORD *)(v19 + 25) = buf;
        v19[27] = v58;
        v58 = 0;
        v56 = (void **)v48;
        buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v56);
        memset(v47, 0, sizeof(v47));
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v47, v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
        PhonewiseFeatureModule::get_prosody_feature((char **)&buf, v47, 1u);
        v35 = (void *)v19[28];
        if (v35)
        {
          v19[29] = v35;
          operator delete(v35);
          v19[28] = 0;
          v19[29] = 0;
          v19[30] = 0;
        }
        *((_OWORD *)v19 + 14) = buf;
        v19[30] = v58;
        v58 = 0;
        v56 = (void **)v47;
        buf = 0uLL;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v56);
        *(_DWORD *)v19[13] = 1065353216;
        *(_DWORD *)v19[22] = 0;
      }
      goto LABEL_50;
    }
    v21 = (_QWORD *)*v21;
  }
  else
  {
    v22 = *(unsigned __int8 *)(a1 + 295);
    if (v22 != 8)
    {
      if (v22 != 11)
        goto LABEL_50;
      goto LABEL_28;
    }
  }
  if (*v21 == 0x6E6F72746F636174 && v19 + 10 != &v52)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)(v19 + 10), v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3));
LABEL_50:
  v36 = a2[1];
  v45 = *a2;
  v46 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v45);
  v39 = v46;
  if (v46)
  {
    v40 = (unint64_t *)&v46->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_QWORD *)&buf = &v52;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v42 = v55;
  if (v55)
  {
    v43 = (unint64_t *)&v55->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1DE9A0DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 96) = &a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23 - 120);
  _Unwind_Resume(a1);
}

void PhonewiseFeatureModule::get_prosody_feature(char **a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 2;
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v3 + 24 * v7);
      if ((unint64_t)v6 >= *v8)
      {
        v12 = *a1;
        v13 = (v6 - *a1) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = *v8 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v8, v16);
          v12 = *a1;
          v6 = a1[1];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *(_DWORD *)(v10 + 4 * v9);
        v11 = v18 + 4;
        while (v6 != v12)
        {
          v19 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a1 = v18;
        a1[1] = v11;
        a1[2] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v6 = *(_DWORD *)(v10 + 4 * v9);
        v11 = v6 + 4;
      }
      a1[1] = v11;
      ++v7;
      v3 = *a2;
      v6 = v11;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v7);
  }
}

void sub_1DE9A0FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FeatureProcessingBase::FeatureProcessingBase(uint64_t a1, uint64_t a2, __int128 ***a3)
{
  _QWORD *v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  void *v11;
  uint64_t *v12;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p[2];
  char v23;
  unsigned __int8 v24[8];
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void **v28;
  uint8_t buf[16];
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  __int128 v33;
  _QWORD v34[51];
  _QWORD v35[20];

  v35[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1EA91FD98;
  v5 = (_QWORD *)(a1 + 8);
  FeatureProcessingBase::Config::Config(a1 + 8, a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = (void **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  SharedObjectPool::get<VoiceConfig>(&v26, *a3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v26 + 40))(&v33, v26, 1885890164, v5, 0);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v33;
  *(_QWORD *)(a1 + 72) = v34[0];
  std::ifstream::basic_ifstream(&v33);
  v32 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(&v33, (uint64_t)v31, 1, (uint64_t)v24);
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v24, "mean");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(buf, (unsigned __int8 *)v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  v28 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)__p, (_OWORD **)&v28);
  v11 = (void *)v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  *(_OWORD *)(v10 + 7) = *(_OWORD *)buf;
  v10[9] = v30;
  if (v23 < 0)
    operator delete(__p[0]);
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v24, "std");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<float>,std::vector<float>,0>(buf, (unsigned __int8 *)v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "std");
  v28 = __p;
  v13 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)__p, (_OWORD **)&v28);
  v14 = (void *)v13[7];
  if (v14)
  {
    v13[8] = v14;
    operator delete(v14);
    v13[7] = 0;
    v13[8] = 0;
    v13[9] = 0;
  }
  *(_OWORD *)(v13 + 7) = *(_OWORD *)buf;
  v13[9] = v30;
  if (v23 < 0)
    operator delete(__p[0]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v17 = v5;
    if (*(char *)(a1 + 31) < 0)
      v17 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_INFO, "Target user voice profile is loaded from: %s", buf, 0xCu);
  }
  if (*(char *)(a1 + 31) < 0)
    v5 = (_QWORD *)*v5;
  Diagnostics::log(6, "Target user voice profile is loaded from: %s", v16, v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
  *(_QWORD *)&v33 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&v34[-2] + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](v34);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v35);
  v18 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

void sub_1DE9A1390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, unsigned __int8 a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void **v30;
  void **v31;

  if (a16 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a18, a17);
  std::ifstream::~ifstream(&a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (*(char *)(v29 + 79) < 0)
    operator delete(*v31);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(v29 + 40));
  if (*(char *)(v29 + 31) < 0)
    operator delete(*v30);
  _Unwind_Resume(a1);
}

uint64_t FeatureProcessingBase::Config::Config(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string v6;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, &byte_1DEBD87CE);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "target_user_voice_profile");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v4, &v6);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v6;
  return a1;
}

void sub_1DE9A14D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FeatureProcessingFastspeech2>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_1EA9216D8;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 24) = &unk_1EA91FD98;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FeatureProcessingTacotron>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1EA91FD98;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void Module::retrieve(Module *this@<X0>, uint64_t a2@<X8>)
{
  std::recursive_mutex *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  if (*((_QWORD *)this + 19))
  {
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + ((*((_QWORD *)this + 18) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)this + 18));
    *(_OWORD *)a2 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::deque<std::shared_ptr<Agglomerate>>::pop_front((uint64_t)this + 112);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void Module::process(uint64_t a1, uint64_t *a2)
{
  std::recursive_mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (std::recursive_mutex *)(a1 + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 208));
  *(_BYTE *)(a1 + 160) = 0;
  std::recursive_mutex::unlock(v4);
  v5 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v22);
  v8 = v23;
  if (v23)
  {
    v9 = (unint64_t *)&v23->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::recursive_mutex::lock(v4);
  if (*(_BYTE *)(a1 + 160))
  {
    v11 = *(void ***)(a1 + 120);
    v12 = *(void ***)(a1 + 128);
    if (v12 == v11)
    {
      v13 = (_QWORD *)(a1 + 152);
      v12 = *(void ***)(a1 + 120);
    }
    else
    {
      v13 = (_QWORD *)(a1 + 152);
      v14 = *(_QWORD *)(a1 + 144);
      v15 = &v11[v14 >> 8];
      v16 = (uint64_t)*v15 + 16 * v14;
      v17 = *(uint64_t *)((char *)v11 + (((*(_QWORD *)(a1 + 152) + v14) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*(_BYTE *)(a1 + 152) + v14);
      if (v16 != v17)
      {
        do
        {
          v16 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v16) + 16;
          if (v16 - (_QWORD)*v15 == 4096)
          {
            v18 = (uint64_t)v15[1];
            ++v15;
            v16 = v18;
          }
        }
        while (v16 != v17);
        v11 = *(void ***)(a1 + 120);
        v12 = *(void ***)(a1 + 128);
      }
    }
    *v13 = 0;
    v19 = (char *)v12 - (char *)v11;
    if (v19 >= 0x11)
    {
      do
      {
        operator delete(*v11);
        v20 = *(_QWORD *)(a1 + 128);
        v11 = (void **)(*(_QWORD *)(a1 + 120) + 8);
        *(_QWORD *)(a1 + 120) = v11;
        v19 = v20 - (_QWORD)v11;
      }
      while (v19 > 0x10);
    }
    if (v19 >> 3 == 1)
    {
      v21 = 128;
      goto LABEL_23;
    }
    if (v19 >> 3 == 2)
    {
      v21 = 256;
LABEL_23:
      *(_QWORD *)(a1 + 144) = v21;
    }
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9A187C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Module::yield(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DE9A1918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Module::cancel(Module *this)
{
  std::recursive_mutex *v2;

  v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((_BYTE *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
}

void Module::uncancel(Module *this)
{
  std::recursive_mutex *v2;

  v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((_BYTE *)this + 160) = 0;
  std::recursive_mutex::unlock(v2);
}

void Module::clean_up(Module *this)
{
  std::recursive_mutex *v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  v3 = (void **)*((_QWORD *)this + 15);
  v4 = (void **)*((_QWORD *)this + 16);
  if (v4 == v3)
  {
    v5 = (_QWORD *)((char *)this + 152);
    v4 = (void **)*((_QWORD *)this + 15);
  }
  else
  {
    v5 = (_QWORD *)((char *)this + 152);
    v6 = *((_QWORD *)this + 18);
    v7 = &v3[v6 >> 8];
    v8 = (uint64_t)*v7 + 16 * v6;
    v9 = *(uint64_t *)((char *)v3 + (((*((_QWORD *)this + 19) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)this + 152) + v6);
    if (v8 != v9)
    {
      do
      {
        v8 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v8) + 16;
        if (v8 - (_QWORD)*v7 == 4096)
        {
          v10 = (uint64_t)v7[1];
          ++v7;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v3 = (void **)*((_QWORD *)this + 15);
      v4 = (void **)*((_QWORD *)this + 16);
    }
  }
  *v5 = 0;
  v11 = (char *)v4 - (char *)v3;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v12 = *((_QWORD *)this + 16);
      v3 = (void **)(*((_QWORD *)this + 15) + 8);
      *((_QWORD *)this + 15) = v3;
      v11 = v12 - (_QWORD)v3;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 128;
    goto LABEL_14;
  }
  if (v11 >> 3 == 2)
  {
    v13 = 256;
LABEL_14:
    *((_QWORD *)this + 18) = v13;
  }
  std::recursive_mutex::unlock(v2);
}

void Module::cache(uint64_t a1, __int128 *a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)(a1 + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 208));
  if (!*(_BYTE *)(a1 + 160))
  {
    std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 112), a2);
    Observable::emit((uint64_t **)(a1 + 8), "cache", 0);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9A1AFC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Module::callback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 168);
  if (!v2)
    return 0;
  v4 = (std::recursive_mutex *)(v2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 56));
  {
    v16 = 0;
    v17 = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 56));
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v6 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 16);
  v16 = v7;
  v17 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::recursive_mutex::unlock(v4);
  if (v7)
  {
    v14 = *(_OWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(v7 + 24);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    a2 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 48))(v10, &v14);
    if (!v6)
      goto LABEL_15;
  }
  else if (!v6)
  {
    goto LABEL_15;
  }
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      return a2;
    return 0;
  }
LABEL_15:
  if (!v7)
    return 0;
  return a2;
}

void sub_1DE9A1C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::recursive_mutex *v13;

  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<Agglomerate>>::pop_front(uint64_t a1)
{
  int64x2_t v2;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((*(_QWORD *)(a1 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * *(_QWORD *)(a1 + 32));
  v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1DED16B70);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x200uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
}

uint64_t Module::Module(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v6;
  void **v7;
  void *__p[2];
  char v10;
  std::string v11;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = off_1EA922728;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v6 = (_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  v7 = (void **)(a1 + 184);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  MEMORY[0x1DF0ECD80](a1 + 208);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v6, *a3, a3[1]);
  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "id");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("module", a2, (const void **)__p, &v11);
    if (*(char *)(a1 + 207) < 0)
      operator delete(*v7);
    *(std::string *)v7 = v11;
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
    v11.__r_.__value_.__s.__data_[0] = 0;
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    MEMORY[0x1DF0ECA80](v7, "module");
  }
  return a1;
}

void sub_1DE9A1E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  std::recursive_mutex *v19;

  std::recursive_mutex::~recursive_mutex(v19);
  if (*(char *)(v14 + 207) < 0)
    operator delete(*v17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18);
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100]((_QWORD *)(v14 + 112));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v16);
  std::mutex::~mutex(v15);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::destroy(*(_QWORD **)(v14 + 16));
  _Unwind_Resume(a1);
}

void Module::enable_hot_plugging(uint64_t a1, uint64_t a2, std::string::size_type a3, std::__shared_weak_count *a4)
{
  std::string *v8;
  std::string::__raw *v9;
  std::string *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v8 = (std::string *)operator new(0x58uLL);
  v9 = (std::string::__raw *)v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA932630;
  v10 = v8 + 1;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v9[2].__words[1] = 0;
  v9[2].__words[0] = (std::string::size_type)&v9[2].__words[1];
  v9[2].__words[2] = 0;
  v9[3].__words[0] = a3;
  v9[3].__words[1] = (std::string::size_type)a4;
  if (a4)
  {
    v13 = (unint64_t *)&a4->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)&v16 = v10;
  *((_QWORD *)&v16 + 1) = v9;
  v17 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1DE9A1FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ModuleBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ModuleBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<ModuleBuilder>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 72);
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, a2[1]);
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(a1 + 8, (uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void SharedObjectPool::get<ModuleFactory>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void **v27;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    goto LABEL_20;
  }
  v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932668;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA91D0F0;
  v8 = operator new(0x48uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA935E30;
  v6[1].__shared_owners_ = (uint64_t)ModuleFactory::ModuleFactoryImpl::ModuleFactoryImpl((ModuleFactory::ModuleFactoryImpl *)(v8 + 3));
  v6[1].__shared_weak_owners_ = (uint64_t)v8;
  v25 = v6;
  v27 = &v26;
  v10 = v9[5];
  if (!v10)
  {
    v16 = (_QWORD *)operator new();
    *v16 = &off_1EA923208;
    v16[1] = v6 + 1;
    v16[2] = v6;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = v9[5];
    v9[5] = (uint64_t)v16;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    goto LABEL_16;
  }
  *(_QWORD *)&v11 = v6 + 1;
  *((_QWORD *)&v11 + 1) = v6;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = *(std::__shared_weak_count **)(v10 + 16);
  *(_OWORD *)(v10 + 8) = v11;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v6 = v25;
  if (v25)
  {
LABEL_16:
    v19 = (unint64_t *)&v6->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_20:
  v22 = *(_QWORD *)(*(_QWORD *)v21 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v21 + 8);
  a1[1] = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9A2308(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v5;
  void *v6;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v6);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ModuleBuilder::add_config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v5;
  void **v6;
  char *v7;
  void **v8;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  char v15[8];
  uint64_t *v16[3];
  char v17;
  uint64_t v18;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v15, a3);
  v5 = (_QWORD **)(a1 + 24);
  v6 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1 + 24, &v18, (const void **)a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0x48uLL);
    v16[2] = (uint64_t *)(a1 + 32);
    v17 = 0;
    v9 = (std::string *)(v7 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
    }
    v7[56] = 0;
    *((_QWORD *)v7 + 8) = 0;
    v10 = v18;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v8 = v7;
    v11 = (_QWORD *)**v5;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *v5 = v11;
      v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v12);
    ++*(_QWORD *)(a1 + 40);
  }
  v13 = v7[56];
  v7[56] = v15[0];
  v15[0] = v13;
  v14 = (uint64_t *)*((_QWORD *)v7 + 8);
  *((uint64_t **)v7 + 8) = v16[0];
  v16[0] = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v16, v13);
}

void sub_1DE9A247C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;

  a11 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v12, v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a10, a9);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<ModuleFactory>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923208;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<ModuleFactory>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923208;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Pipeline::push_back_module(_QWORD *result, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  _QWORD *v31;

  v3 = result;
  v4 = result + 3;
  v5 = result[3];
  v6 = (_QWORD *)result[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = result[1];
    v12 = ((uint64_t)v6 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = (_QWORD *)v3[1];
    v22 = (_QWORD *)v3[2];
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)(v3 + 1);
    }
    v10 = v18 + 16;
    v3[1] = v24;
    v3[2] = v18 + 16;
    v29 = v26;
    v27 = v3[3];
    v3[3] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = (_QWORD *)std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    v6[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v6 + 2;
  }
  v3[2] = v10;
  return result;
}

_QWORD *Pipeline::insert_module(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  int64x2_t v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  __int128 v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  int64x2_t v55;
  char *v56;
  _QWORD *v57;

  v3 = a3;
  v4 = a2;
  v5 = result;
  v7 = result + 3;
  v6 = result[3];
  v8 = result[2];
  if (v8 >= v6)
  {
    v16 = (uint64_t *)result[1];
    v17 = ((uint64_t)(v8 - (_QWORD)v16) >> 4) + 1;
    if (v17 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v18 = (char *)a2 - (char *)v16;
    v19 = ((char *)a2 - (char *)v16) >> 4;
    v20 = v6 - (_QWORD)v16;
    if (v20 >> 3 > v17)
      v17 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v17;
    v53 = v7;
    if (v21)
      v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v21);
    else
      v22 = 0;
    v26 = (uint64_t *)(v21 + 16 * v19);
    v50 = (char *)v21;
    *(_QWORD *)&v51 = v26;
    *((_QWORD *)&v51 + 1) = v26;
    v52 = (char *)(v21 + 16 * v22);
    if (v19 == v22)
    {
      if (v18 < 1)
      {
        if (v16 == v4)
          v28 = 1;
        else
          v28 = v18 >> 3;
        v57 = v7;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v28);
        v31 = v51;
        v32 = *((_QWORD *)&v51 + 1) - v51;
        if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
        {
          v37 = vdupq_n_s64(v51);
          v34 = (unint64_t)&v29[16 * (v28 >> 2)];
        }
        else
        {
          v33 = v32 >> 4;
          v34 = (unint64_t)&v29[16 * (v28 >> 2) + (v32 & 0xFFFFFFFFFFFFFFF0)];
          v35 = 16 * v33;
          v36 = &v29[16 * (v28 >> 2)];
          do
          {
            *(_OWORD *)v36 = *(_OWORD *)v31;
            v36 += 16;
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
            v31 += 16;
            v35 -= 16;
          }
          while (v35);
          v37 = (int64x2_t)v51;
        }
        v38 = v52;
        v54 = v50;
        v50 = v29;
        *(_QWORD *)&v51 = &v29[16 * (v28 >> 2)];
        v55 = v37;
        *((_QWORD *)&v51 + 1) = v34;
        v52 = &v29[16 * v30];
        v56 = v38;
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v54);
        v26 = (uint64_t *)*((_QWORD *)&v51 + 1);
      }
      else
      {
        v27 = v19 + 2;
        if (v19 >= -1)
          v27 = v19 + 1;
        v26 -= 2 * (v27 >> 1);
        *(_QWORD *)&v51 = v26;
        *((_QWORD *)&v51 + 1) = v26;
      }
    }
    *v26 = *v3;
    v39 = v3[1];
    v26[1] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v26 = (uint64_t *)*((_QWORD *)&v51 + 1);
    }
    v42 = v26 + 2;
    *((_QWORD *)&v51 + 1) = v42;
    v43 = v51;
    v44 = (uint64_t *)v5[1];
    if (v44 != v4)
    {
      v45 = v4;
      do
      {
        v46 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *(_OWORD *)(v43 - 16) = v46;
        v43 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v44);
      v42 = (_OWORD *)*((_QWORD *)&v51 + 1);
    }
    *(_QWORD *)&v51 = v43;
    v47 = (uint64_t *)v5[2];
    if (v47 != v4)
    {
      do
      {
        *v42++ = *(_OWORD *)v4;
        *v4 = 0;
        v4[1] = 0;
        v4 += 2;
      }
      while (v4 != v47);
      v43 = v51;
      v4 = (uint64_t *)v5[2];
    }
    v48 = (char *)v5[1];
    v5[1] = v43;
    v5[2] = v42;
    v49 = (char *)v5[3];
    v5[3] = v52;
    *((_QWORD *)&v51 + 1) = v4;
    v52 = v49;
    v50 = v48;
    *(_QWORD *)&v51 = v48;
    return (_QWORD *)std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v50);
  }
  else if (a2 == (uint64_t *)v8)
  {
    v23 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v23 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    result[2] = a2 + 2;
  }
  else
  {
    v9 = (uint64_t *)(v8 - 16);
    v10 = (_OWORD *)result[2];
    if (v8 >= 0x10)
    {
      v11 = v8 - 16;
      v10 = (_OWORD *)result[2];
      do
      {
        *v10++ = *(_OWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v11 += 16;
      }
      while (v11 < v8);
    }
    result[2] = v10;
    if ((uint64_t *)v8 != a2 + 2)
    {
      do
      {
        v12 = *((_OWORD *)v9 - 1);
        v9 -= 2;
        *v9 = 0;
        v9[1] = 0;
        v13 = *(std::__shared_weak_count **)(v8 - 8);
        *(_OWORD *)(v8 - 16) = v12;
        v8 -= 16;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      while (v9 != v4);
    }
    if (v4 <= v3)
      v3 += 2 * (v5[2] > (unint64_t)v3);
    return std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v4, *v3, v3[1]);
  }
  return result;
}

void sub_1DE9A2988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Pipeline::replace_module(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *i;

  result = *(_QWORD **)(a1 + 8);
  for (i = *(_QWORD **)(a1 + 16); result != i; result += 2)
  {
    if (*result == *a2)
      result = std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](result, *a3, a3[1]);
  }
  return result;
}

void Pipeline::add_connection(int64x2_t *a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = (char *)a1[2].i64[1];
  v4 = a1[3].u64[0];
  if ((unint64_t)v5 >= v4)
  {
    v10 = (char *)a1[2].i64[0];
    v11 = (v5 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = (char *)a1[2].i64[0];
      v5 = (char *)a1[2].i64[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = a1[2];
    }
    v9 = v16 + 16;
    a1[2].i64[0] = (uint64_t)v20;
    a1[2].i64[1] = (uint64_t)(v16 + 16);
    a1[3].i64[0] = (uint64_t)&v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[2].i64[1] = (uint64_t)v9;
}

uint64_t Pipeline::cancel(Pipeline *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEBUG, "Pipeline cancel", v10, 2u);
  }
  result = Diagnostics::log(7, "Pipeline cancel", v3);
  *((_BYTE *)this + 104) = 1;
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5;
    v5 += 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  }
  v9 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  while (v9 != v8)
  {
    result = *(_QWORD *)(*(_QWORD *)v9 + 40);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    v9 += 16;
  }
  return result;
}

uint64_t Pipeline::reset(Pipeline *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEBUG, "Pipeline reset", v10, 2u);
  }
  result = Diagnostics::log(7, "Pipeline reset", v3);
  *((_BYTE *)this + 104) = 0;
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5;
    v5 += 2;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  }
  v9 = *((_QWORD *)this + 4);
  v8 = *((_QWORD *)this + 5);
  while (v9 != v8)
  {
    result = *(_QWORD *)(*(_QWORD *)v9 + 40);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
    v9 += 16;
  }
  return result;
}

void Pipeline::read(Pipeline *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;

  if (*((_QWORD *)this + 12))
  {
    v3 = (char *)this + 56;
    v4 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + ((*((_QWORD *)this + 11) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)this + 11));
    *(_OWORD *)a2 = v4;
    if (*((_QWORD *)&v4 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::deque<std::shared_ptr<Agglomerate>>::pop_front((uint64_t)v3);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

uint64_t Pipeline::modules(Pipeline *this)
{
  return (uint64_t)this + 8;
}

uint64_t StreamingPipeline::process(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *i;
  void *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  char **v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 v21;
  char **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  __int128 *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  void **v109;
  _QWORD *v110;
  unint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  __n128 v123;
  __int128 v124;
  void *__p[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(result + 8);
  if (v2 == *(uint64_t **)(result + 16))
    return result;
  v3 = result;
  if (*(_BYTE *)(result + 104))
    return result;
  v5 = (std::__shared_weak_count *)v2[1];
  v131 = *v2;
  v132 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v126 = 0u;
  v127 = 0u;
  *(_OWORD *)__p = 0u;
  v130 = (char *)&v126 + 8;
  *(_QWORD *)&v128 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(1uLL);
  *((_QWORD *)&v128 + 1) = v128;
  *(_QWORD *)&v129 = v128;
  *((_QWORD *)&v129 + 1) = v128 + 8 * v8;
  *(_QWORD *)&v124 = operator new(0x1000uLL);
  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v128, &v124);
  for (i = (_QWORD *)v126;
        i != __p[1];
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v128, i))
  {
    --i;
  }
  v10 = __p[0];
  v11 = v128;
  *(void **)&v128 = __p[0];
  *((_QWORD *)&v128 + 1) = i;
  *(_OWORD *)__p = v11;
  v126 = v129;
  if ((_QWORD)v128)
  {
    operator delete(v10);
    v12 = v127;
    v13 = (void *)v126;
  }
  else
  {
    v12 = v127;
    v13 = (void *)v129;
  }
  v14 = *((_QWORD *)&v127 + 1);
  v15 = v12 + BYTE8(v127);
  v16 = (char **)((char *)__p[1] + 8 * ((unint64_t)(v12 + *((_QWORD *)&v127 + 1)) >> 8));
  v17 = *v16;
  v18 = (uint64_t)&(*v16)[16 * v15];
  if (v13 == __p[1])
    v19 = 0;
  else
    v19 = (char *)v18;
  v20 = (v19 - v17) >> 4;
  if (v19 - v17 <= -16)
  {
    v23 = 254 - v20;
    v21 = ~(_BYTE)v23;
    v22 = &v16[-(v23 >> 8)];
  }
  else
  {
    v21 = v20 + 1;
    v22 = &v16[(unint64_t)(v20 + 1) >> 8];
  }
  v24 = (uint64_t)&(*v22)[16 * v21];
  if (v19 != (char *)v24)
  {
    v25 = &v131;
    do
    {
      v26 = v17 + 4096;
      if (v16 == v22)
        v26 = (char *)v24;
      if (v19 == v26)
      {
        v26 = v19;
      }
      else
      {
        v27 = v19;
        do
        {
          *(_QWORD *)v27 = *v25;
          v28 = v25[1];
          *((_QWORD *)v27 + 1) = v28;
          if (v28)
          {
            v29 = (unint64_t *)(v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v27 += 16;
          v25 += 2;
        }
        while (v27 != v26);
        v14 = *((_QWORD *)&v127 + 1);
      }
      v14 += (v26 - v19) >> 4;
      *((_QWORD *)&v127 + 1) = v14;
      if (v16 == v22)
        break;
      v31 = v16[1];
      ++v16;
      v17 = v31;
      v19 = v31;
    }
    while (v31 != (char *)v24);
    v5 = v132;
  }
  if (v5)
  {
    v32 = (unint64_t *)&v5->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v34 = a2[1];
  *(_QWORD *)&v124 = *a2;
  *((_QWORD *)&v124 + 1) = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *((_QWORD *)&v127 + 1);
  while (*((_QWORD *)&v127 + 1))
  {
    if (*(_BYTE *)(v3 + 104))
      break;
    v38 = *(__n128 *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v37 + v127 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v37 + v127 - 1));
    v123 = v38;
    if (v38.n128_u64[1])
    {
      v39 = (unint64_t *)(v38.n128_u64[1] + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    if ((_QWORD)v124)
    {
      v122 = v124;
      if (*((_QWORD *)&v124 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      (*(void (**)(unint64_t, __int128 *, __n128))(*(_QWORD *)v38.n128_u64[0] + 24))(v38.n128_u64[0], &v122, v38);
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v123.n128_u64[0] + 16))(&v128);
    v46 = v128;
    v128 = 0uLL;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
    v124 = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v123.n128_u64[0] == *(_QWORD *)(*(_QWORD *)(v3 + 16) - 16))
    {
      while ((_QWORD)v124)
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(v3 + 56), &v124);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v123.n128_u64[0] + 16))(&v128);
        v68 = v128;
        v128 = 0uLL;
        v69 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
        v124 = v68;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
      v124 = 0uLL;
      if (!v75)
      {
LABEL_105:
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](*(_QWORD *)((char *)__p[1]+ (((unint64_t)(*((_QWORD *)&v127 + 1) + v127 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (BYTE8(v127) + v127 - 1));
        if ((void *)v126 == __p[1])
          v78 = 0;
        else
          v78 = 32 * (v126 - (unint64_t)__p[1]) - 1;
        if (v78 - (--*((_QWORD *)&v127 + 1) + (_QWORD)v127) >= 0x200)
        {
          operator delete(*(void **)(v126 - 8));
          *(_QWORD *)&v126 = v126 - 8;
        }
        goto LABEL_147;
      }
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (!(_QWORD)v124)
      goto LABEL_105;
    v53 = *(_QWORD **)(v3 + 32);
    v54 = *(_QWORD **)(v3 + 40);
    if (v53 == v54)
      goto LABEL_136;
    while (1)
    {
      v55 = *v53;
      v56 = (std::__shared_weak_count *)v53[1];
      v131 = *v53;
      v132 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      if (*(_QWORD *)(v55 + 8) == v123.n128_u64[0])
      {
        v128 = v124;
        if (*((_QWORD *)&v124 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v59 = (**(uint64_t (***)(uint64_t, __int128 *))v55)(v55, &v128);
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      else
      {
        v59 = 0;
      }
      v60 = v132;
      if (v132)
      {
        v61 = (unint64_t *)&v132->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if ((v59 & 1) != 0)
        break;
      v53 += 2;
      if (v53 == v54)
      {
        v53 = v54;
        break;
      }
    }
    if (v53 == *(_QWORD **)(v3 + 40))
    {
      v87 = *(_QWORD **)(v3 + 32);
      if (v87 == v53)
        goto LABEL_136;
      do
      {
        v88 = *v87;
        v89 = (std::__shared_weak_count *)v87[1];
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
          v92 = *(_QWORD *)(v88 + 40);
          v93 = v123.n128_u64[0];
          do
            v94 = __ldaxr(v90);
          while (__stlxr(v94 - 1, v90));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
          if (v92 == v93)
            goto LABEL_134;
        }
        else if (*(_QWORD *)(v88 + 40) == v123.n128_u64[0])
        {
          goto LABEL_134;
        }
        v87 += 2;
      }
      while (v87 != v53);
      v87 = v53;
LABEL_134:
      if (v87 == *(_QWORD **)(v3 + 40))
      {
LABEL_136:
        v95 = *(_QWORD *)(v3 + 8);
        v96 = *(_QWORD *)(v3 + 16);
        if (v95 != v96)
        {
          while (*(_QWORD *)v95 != v123.n128_u64[0])
          {
            v95 += 16;
            if (v95 == v96)
            {
              v95 = *(_QWORD *)(v3 + 16);
              break;
            }
          }
        }
        std::deque<std::shared_ptr<Module>>::push_back(__p, (__int128 *)(v95 + 16));
        goto LABEL_147;
      }
      std::deque<std::shared_ptr<Module>>::push_back(__p, (__int128 *)(*v87 + 24));
    }
    else
    {
      v79 = *v53;
      if (*(_QWORD *)(*v53 + 40))
      {
        v80 = *(_QWORD *)(v79 + 48);
        *(_QWORD *)&v128 = *(_QWORD *)(*v53 + 40);
        *((_QWORD *)&v128 + 1) = v80;
        if (v80)
        {
          v81 = (unint64_t *)(v80 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v83 = (char *)__p[1];
        if ((void *)v126 == __p[1])
          v84 = 0;
        else
          v84 = 32 * (v126 - (unint64_t)__p[1]) - 1;
        v85 = *((_QWORD *)&v127 + 1);
        v86 = *((_QWORD *)&v127 + 1) + v127;
        if (v84 == *((_QWORD *)&v127 + 1) + (_QWORD)v127)
        {
          std::deque<std::shared_ptr<Module>>::__add_back_capacity(__p);
          v83 = (char *)__p[1];
          v85 = *((_QWORD *)&v127 + 1);
          v86 = *((_QWORD *)&v127 + 1) + v127;
        }
        *(_OWORD *)(*(_QWORD *)&v83[(v86 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v86) = v128;
        *((_QWORD *)&v127 + 1) = v85 + 1;
      }
      else
      {
        v97 = *(__int128 **)(v3 + 8);
        v98 = *(__int128 **)(v3 + 16);
        if (v97 != v98)
        {
          v99 = *(_QWORD *)(v79 + 24);
          while (*(_QWORD *)v97 != v99)
          {
            if (++v97 == v98)
            {
              v97 = *(__int128 **)(v3 + 16);
              break;
            }
          }
        }
        std::deque<std::shared_ptr<Module>>::push_back(__p, v97);
      }
    }
LABEL_147:
    v100 = (std::__shared_weak_count *)v123.n128_u64[1];
    if (v123.n128_u64[1])
    {
      v101 = (unint64_t *)(v123.n128_u64[1] + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v37 = *((_QWORD *)&v127 + 1);
  }
  v103 = *(_QWORD **)(v3 + 8);
  v104 = *(_QWORD **)(v3 + 16);
  while (v103 != v104)
  {
    if (*(_BYTE *)(v3 + 104))
      (*(void (**)(_QWORD))(*(_QWORD *)*v103 + 48))(*v103);
    (*(void (**)(_QWORD))(*(_QWORD *)*v103 + 64))(*v103);
    v103 += 2;
  }
  v105 = *(_QWORD *)(v3 + 32);
  v106 = *(_QWORD *)(v3 + 40);
  while (v105 != v106)
  {
    v107 = *(_QWORD *)(*(_QWORD *)v105 + 40);
    if (v107)
    {
      if (*(_BYTE *)(v3 + 104))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v107 + 48))(v107);
        v107 = *(_QWORD *)(*(_QWORD *)v105 + 40);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 64))(v107);
    }
    v105 += 16;
  }
  if (*(_BYTE *)(v3 + 104))
  {
    v108 = *(void ***)(v3 + 64);
    v109 = *(void ***)(v3 + 72);
    if (v109 == v108)
    {
      v110 = (_QWORD *)(v3 + 96);
      v109 = *(void ***)(v3 + 64);
    }
    else
    {
      v110 = (_QWORD *)(v3 + 96);
      v111 = *(_QWORD *)(v3 + 88);
      v112 = &v108[v111 >> 8];
      v113 = (uint64_t)*v112 + 16 * v111;
      v114 = *(uint64_t *)((char *)v108 + (((*(_QWORD *)(v3 + 96) + v111) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*(_BYTE *)(v3 + 96) + v111);
      if (v113 != v114)
      {
        do
        {
          v113 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v113) + 16;
          if (v113 - (_QWORD)*v112 == 4096)
          {
            v115 = (uint64_t)v112[1];
            ++v112;
            v113 = v115;
          }
        }
        while (v113 != v114);
        v108 = *(void ***)(v3 + 64);
        v109 = *(void ***)(v3 + 72);
      }
    }
    *v110 = 0;
    v116 = (char *)v109 - (char *)v108;
    if (v116 >= 0x11)
    {
      do
      {
        operator delete(*v108);
        v117 = *(_QWORD *)(v3 + 72);
        v108 = (void **)(*(_QWORD *)(v3 + 64) + 8);
        *(_QWORD *)(v3 + 64) = v108;
        v116 = v117 - (_QWORD)v108;
      }
      while (v116 > 0x10);
    }
    if (v116 >> 3 == 1)
    {
      v118 = 128;
    }
    else
    {
      if (v116 >> 3 != 2)
        goto LABEL_180;
      v118 = 256;
    }
    *(_QWORD *)(v3 + 88) = v118;
  }
LABEL_180:
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  return std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](__p);
}

void sub_1DE9A3768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::deque<std::shared_ptr<Agglomerate>>::~deque[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<Module>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<Module>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<Module>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *i;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      a1[2] += 8;
      return;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v28 = 1;
      else
        v28 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v28);
      v30 = &v29[8 * (v28 >> 2)];
      v32 = &v29[8 * v31];
      v33 = (uint64_t *)a1[1];
      v6 = v30;
      v34 = a1[2] - (_QWORD)v33;
      if (v34)
      {
        v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        v35 = 8 * (v34 >> 3);
        v36 = &v29[8 * (v28 >> 2)];
        do
        {
          v37 = *v33++;
          *(_QWORD *)v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  v19 = a1[2];
  v20 = (v19 - a1[1]) >> 3;
  v21 = a1[3];
  v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(_QWORD *)&v49 = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(a1, &v49);
      return;
    }
    *(_QWORD *)&v49 = operator new(0x1000uLL);
    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)a1, &v49);
    v39 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v40 = *v39;
    v7 = (char *)(v39 + 1);
    v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_31;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v41 = 1;
      else
        v41 = (uint64_t)&v6[-*a1] >> 2;
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v41);
      v30 = &v29[8 * (v41 >> 2)];
      v32 = &v29[8 * v42];
      v43 = (uint64_t *)a1[1];
      v6 = v30;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v29[8 * (v41 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1)
    v23 = 1;
  else
    v23 = v22 >> 2;
  v51 = a1 + 3;
  *(_QWORD *)&v49 = std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v23);
  *((_QWORD *)&v49 + 1) = v49 + 8 * v20;
  *(_QWORD *)&v50 = *((_QWORD *)&v49 + 1);
  *((_QWORD *)&v50 + 1) = v49 + 8 * v24;
  v48 = operator new(0x1000uLL);
  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(&v49, &v48);
  for (i = (_QWORD *)a1[2];
        i != (_QWORD *)a1[1];
        std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)&v49, i))
  {
    --i;
  }
  v26 = (char *)*a1;
  v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26)
    operator delete(v26);
}

void sub_1DE9A3BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void PronounceNNMT::~PronounceNNMT(PronounceNNMT *this)
{
  char *v1;

  v1 = (char *)this + 8;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch((uint64_t)this + 6448);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 8;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch((uint64_t)this + 6448);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch((uint64_t)v1);
  JUMPOUT(0x1DF0ED014);
}

void PronounceNNMT::pronounce(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  PronounceNNMT::pronounce(a3, a1, a2, 0);
}

void PronounceNNMT::pronounce_multi(uint64_t a1@<X0>, std::string *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type size;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *__p;
  char v12;

  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = &v7[size];
    v9 = v7;
LABEL_8:
    v10 = 0;
    while (*v9 != asc_1DEC2FE74[v10])
    {
      if (++v10 == 2)
      {
        if (++v9 != v8)
          goto LABEL_8;
        goto LABEL_16;
      }
    }
    if (v9 != v8 && v9 - v7 != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
      return;
    }
  }
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(&__p, "UNK");
  PronounceNNMT::pronounce((uint64_t)a3, a1, a2, 1);
  if (v12 < 0)
    operator delete(__p);
}

void sub_1DE9A3D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL PronounceNNMT::is_multiword_prefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _BOOL8 v7;
  std::string::size_type size;
  std::string __p;
  void *v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = *(_QWORD *)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v4 = (unsigned __int8 *)(v3 + v2);
    v5 = (unsigned __int8 *)v3;
LABEL_8:
    v6 = 0;
    while (*v5 != asc_1DEC2FE74[v6])
    {
      if (++v6 == 2)
      {
        if (++v5 != v4)
          goto LABEL_8;
        goto LABEL_16;
      }
    }
    if (v5 != v4 && &v5[-v3] != (unsigned __int8 *)-1)
      return 0;
  }
LABEL_16:
  PronounceNNMT::preprocess(&__p, *(kaldi::quasar::TorchEncoderDecoder **)(a1 + 6584), a2, (uint64_t)v11, 1);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = size != 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  return v7;
}

void sub_1DE9A3E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PronounceNNMT::preprocess(std::string *a1, kaldi::quasar::TorchEncoderDecoder *this, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  void **v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *p_p;
  int v21;
  std::string::size_type v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  std::string __p;
  std::string v39;
  void *v40[2];
  char v41;
  void **v42;
  unint64_t v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46;
  std::string v47;
  uint8_t buf[4];
  std::string *v49;
  __int16 v50;
  std::string *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(this);
  memset(&v47, 0, sizeof(v47));
  memset(&v46, 0, sizeof(v46));
  v35 = a3;
  UTFString_Impl::to_lower((UTFString_Impl *)v44, a3);
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  if ((v45 & 0x80u) == 0)
    v8 = v44;
  else
    v8 = (void **)v44[0];
  if ((v45 & 0x80u) == 0)
    v9 = v45;
  else
    v9 = (unint64_t)v44[1];
  v42 = v8;
  v43 = v9 << 32;
  if ((_DWORD)v9)
  {
    v10 = 0;
    do
    {
      v11 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&v42);
      std::string::resize(&v46, 0, 0);
      UTFString::push_back_codepoint<std::string>(&v46, v11);
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 96))(v7, &v46) != -1)
        goto LABEL_45;
      UTFString::decompose_codepoint((uint64_t *)v40, v11);
      std::string::resize(&v46, 0, 0);
      if (v41 >= 0)
        v12 = v40;
      else
        v12 = (void **)v40[0];
      v13 = *(unsigned __int16 *)v12;
      if ((v13 & 0xFC00) == 0xD800)
        v13 = *((unsigned __int16 *)v12 + 1) + (v13 << 10) - 56613888;
      UTFString::push_back_codepoint<std::string>(&v46, v13);
      v14 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 96))(v7, &v46);
      if (v14 == -1)
      {
        if (a5)
        {
          std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
          v15 = 1;
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            Censor::global_plaintext(&v39, (uint64_t)&v46);
            v17 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
            v18 = v39.__r_.__value_.__r.__words[0];
            Censor::global_plaintext(&__p, v35);
            v19 = &v39;
            if (v17 < 0)
              v19 = (std::string *)v18;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315394;
            v49 = v19;
            v50 = 2080;
            v51 = p_p;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v39.__r_.__value_.__l.__data_);
          }
          Censor::global_plaintext(&v39, (uint64_t)&v46);
          v21 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
          v22 = v39.__r_.__value_.__r.__words[0];
          Censor::global_plaintext(&__p, v35);
          v24 = &v39;
          if (v21 < 0)
            v24 = (std::string *)v22;
          v25 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          v15 = 3;
        }
      }
      else
      {
        v15 = 0;
      }
      if (v41 < 0)
        operator delete(v40[0]);
      if (v14 == -1)
      {
        if (v15 != 3 && v15)
          goto LABEL_76;
      }
      else
      {
LABEL_45:
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v47.__r_.__value_.__l.__size_;
        if (size)
          std::string::push_back(&v47, 32);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v46;
        else
          v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        else
          v28 = v46.__r_.__value_.__l.__size_;
        std::string::append(&v47, (const std::string::value_type *)v27, v28);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v46;
        else
          v29 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        else
          v30 = v46.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a4, (const std::string::value_type *)v29, v30);
      }
      v31 = *((unsigned __int8 *)v8 + v10);
      v32 = (v31 + 62);
      if (v31 <= 0xEF)
        v33 = 2;
      else
        v33 = 3;
      if (v31 <= 0xDF)
        v34 = v33;
      else
        v34 = v33 + 1;
      if (v32 >= 0x33)
        v34 = 1;
      v10 += v34;
      LODWORD(v43) = v10;
    }
    while (v10 != (_DWORD)v9);
  }
  *a1 = v47;
  memset(&v47, 0, sizeof(v47));
LABEL_76:
  if ((char)v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_1DE9A42F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 129) < 0)
    operator delete(*(void **)(v45 - 152));
  _Unwind_Resume(exception_object);
}

void PronounceNNMT::pronounce(uint64_t a1, uint64_t a2, std::string *a3, int a4)
{
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *p_p;
  std::string *p_buf;
  int v21;
  std::string::size_type v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  std::string __p;
  std::string v27;
  std::string v28;
  _QWORD v29[3];
  std::string v30;
  std::string __str;
  std::string buf;
  std::string *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  PronounceNNMT::preprocess(&v30, *(kaldi::quasar::TorchEncoderDecoder **)(a2 + 6584), (uint64_t)a3, (uint64_t)&__str, a4);
  size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v30.__r_.__value_.__l.__size_;
  if (size)
  {
    memset(v29, 0, sizeof(v29));
    EncoderDecoder::decode(a2 + 8, (uint64_t)&v30, (uint64_t)v29);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v8 = *(_QWORD *)v29[0];
    v9 = *(_QWORD *)(v29[0] + 8);
    while (v8 != v9)
    {
      v10 = *(unsigned __int8 *)(a1 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a1 + 8);
      if (v10)
        std::string::push_back((std::string *)a1, 32);
      v11 = *(char *)(v8 + 23);
      if (v11 >= 0)
        v12 = (const std::string::value_type *)v8;
      else
        v12 = *(const std::string::value_type **)v8;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v8 + 23);
      else
        v13 = *(_QWORD *)(v8 + 8);
      std::string::append((std::string *)a1, v12, v13);
      v8 += 240;
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v14 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      v15 = &v28;
      Censor::global_plaintext(&v28, (uint64_t)a3);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
      Censor::global_plaintext(&v27, (uint64_t)&__str);
      v16 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      v17 = v27.__r_.__value_.__r.__words[0];
      Censor::global_plaintext(&__p, a1);
      v18 = &v27;
      if (v16 < 0)
        v18 = (std::string *)v17;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v33 = p_p;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
    p_buf = &buf;
    Censor::global_plaintext(&buf, (uint64_t)a3);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&v28, (uint64_t)&__str);
    v21 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
    v22 = v28.__r_.__value_.__r.__words[0];
    Censor::global_plaintext(&v27, a1);
    v24 = &v28;
    if (v21 < 0)
      v24 = (std::string *)v22;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v27;
    else
      v25 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    std::string::operator=(a3, &__str);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, &byte_1DEBD87CE);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DE9A46B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  *(_QWORD *)(v37 - 112) = &a28;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 112));
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  _Unwind_Resume(a1);
}

void PhonemeEncodingLegacy::~PhonemeEncodingLegacy(PhonemeEncodingLegacy *this)
{
  PhonemeEncodingImpl::~PhonemeEncodingImpl(this);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *PhonemeEncodingLegacy::parse_phoneme_string@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  int v9;

  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)a1);
  v6 = a2[23];
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  if (v6 >= 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  for (; v8; --v8)
  {
    v9 = *v7;
    if (v9 <= 44)
    {
      if (v9 == 32)
      {
        PhonemeEncodingImpl::start_phoneme(a1);
        goto LABEL_19;
      }
      if (v9 != 35)
        goto LABEL_15;
    }
    else
    {
      if ((v9 - 45) < 2)
      {
        PhonemeEncodingImpl::start_syllable((PhonemeEncodingImpl *)a1);
        goto LABEL_19;
      }
      if (v9 == 58)
      {
        *(_DWORD *)(a1 + 32) = 1;
        goto LABEL_19;
      }
      if (v9 != 95)
      {
LABEL_15:
        std::string::push_back((std::string *)(a1 + 8), v9);
        goto LABEL_19;
      }
    }
    PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
LABEL_19:
    ++v7;
  }
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(a3, *(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
}

void PhonemeEncodingLegacy::phoneme_string(uint64_t a1@<X0>, uint64_t **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type size;
  int v15;
  _BYTE *v16;
  std::string *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t *v21;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = *a2;
  v21 = a2[1];
  if (*a2 != v21)
  {
    v5 = 0;
    v6 = a1 + 144;
    while (1)
    {
      if (v5)
        std::string::append(a3, " _");
      v8 = *v4;
      v7 = v4[1];
      if (*v4 != v7)
        break;
LABEL_41:
      ++v5;
      v4 += 3;
      if (v4 == v21)
        return;
    }
    v9 = 0;
LABEL_7:
    if (v9)
      std::string::append(a3, " .");
    v11 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    while (1)
    {
      if (v11 == v10)
      {
        ++v9;
        v8 += 64;
        if (v8 == v7)
          goto LABEL_41;
        goto LABEL_7;
      }
      v12 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        size = a3->__r_.__value_.__l.__size_;
        if (!size)
          goto LABEL_30;
        v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
          goto LABEL_30;
        v13 = a3;
        size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      if (v13->__r_.__value_.__s.__data_[size - 1] != 46)
        break;
      v15 = *(char *)(v11 + 23);
      if (v15 < 0)
      {
        if (*(_QWORD *)(v11 + 8) != 1)
          break;
        v16 = *(_BYTE **)v11;
      }
      else
      {
        v16 = (_BYTE *)v11;
        if (v15 != 1)
          break;
      }
      if (*v16 != 35)
        break;
      if ((v12 & 0x80u) == 0)
        v17 = a3;
      else
        v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if ((v12 & 0x80u) != 0)
        v12 = a3->__r_.__value_.__l.__size_;
      v17->__r_.__value_.__s.__data_[v12 - 1] = 35;
LABEL_39:
      v11 += 24;
    }
    std::string::push_back(a3, 32);
LABEL_30:
    v18 = *(char *)(v11 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)v11;
    else
      v19 = *(const std::string::value_type **)v11;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(v11 + 23);
    else
      v20 = *(_QWORD *)(v11 + 8);
    std::string::append(a3, v19, v20);
    if (*(_DWORD *)v8)
    {
      if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v6, (const void **)v11))
      {
        std::string::push_back(a3, 58);
      }
    }
    goto LABEL_39;
  }
}

void sub_1DE9A4A68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void PhonemeEncodingLegacy::join_phonemes(const void **a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(p_p, v8, v6);
  }
  *(_DWORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 2108960;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE9A4B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhonemeEncodingLegacy::silence(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  _QWORD v5[3];
  void **v6;

  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)this);
  MEMORY[0x1DF0ECA80](this + 1, "sil");
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)this);
  memset(v5, 0, sizeof(v5));
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v5, this[15], this[16], 0xAAAAAAAAAAAAAAABLL * (this[16] - this[15]));
  v4 = (uint64_t *)v5[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a2, *v4, v4[1], (v4[1] - *v4) >> 6);
  v6 = (void **)v5;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1DE9A4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void PhonemeEncodingImpl::start_phoneme_representation(PhonemeEncodingImpl *this)
{
  void **v2;
  void **v3;
  void **v4;

  v2 = (void **)*((_QWORD *)this + 15);
  v3 = (void **)*((_QWORD *)this + 16);
  while (v3 != v2)
  {
    v3 -= 3;
    v4 = v3;
    std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  *((_QWORD *)this + 16) = v2;
  PhonemeEncodingImpl::start_word(this);
}

void PhonemeEncodingImpl::start_word(PhonemeEncodingImpl *this)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  PhonemeEncodingImpl::start_syllable(this);
  v2 = (_QWORD *)((char *)this + 96);
  if (*((_QWORD *)this + 12) != *((_QWORD *)this + 13))
  {
    v3 = *((_QWORD *)this + 17);
    v4 = (_QWORD *)*((_QWORD *)this + 16);
    if ((unint64_t)v4 >= v3)
    {
      v6 = *((_QWORD *)this + 15);
      v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v6) >> 3);
      v8 = v7 + 1;
      if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
      if (2 * v9 > v8)
        v8 = 2 * v9;
      if (v9 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v8;
      v15[4] = (char *)this + 136;
      if (v10)
        v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v10);
      else
        v11 = 0;
      v12 = (_QWORD *)(v10 + 24 * v7);
      v15[0] = v10;
      v15[1] = v12;
      v15[3] = v10 + 24 * v11;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      *(_OWORD *)v12 = *((_OWORD *)this + 6);
      v12[2] = *((_QWORD *)this + 14);
      *v2 = 0;
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
      v15[2] = v12 + 3;
      std::vector<PhonemeRepresentation::Word>::__swap_out_circular_buffer((uint64_t *)this + 15, v15);
      v13 = *((_QWORD *)this + 16);
      std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)v15);
      v5 = *((_QWORD *)this + 12);
      v14 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 16) = v13;
      while (v14 != v5)
      {
        v14 -= 64;
        std::allocator<PhonemeRepresentation::Syllable>::destroy[abi:ne180100](v14);
      }
    }
    else
    {
      v5 = 0;
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *((_OWORD *)this + 6);
      v4[2] = *((_QWORD *)this + 14);
      *v2 = 0;
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 16) = v4 + 3;
    }
    *((_QWORD *)this + 13) = v5;
  }
}

void PhonemeEncodingImpl::start_syllable(PhonemeEncodingImpl *this)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[5];

  PhonemeEncodingImpl::start_phoneme((uint64_t)this);
  v2 = (_QWORD *)((char *)this + 48);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 7))
  {
    v3 = (uint64_t *)((char *)this + 32);
    v4 = *((_QWORD *)this + 14);
    v5 = *((_QWORD *)this + 13);
    if (v5 >= v4)
    {
      v9 = *((_QWORD *)this + 12);
      v10 = (uint64_t)(v5 - v9) >> 6;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 58)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = v4 - v9;
      if (v12 >> 5 > v11)
        v11 = v12 >> 5;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
        v13 = 0x3FFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      v18[4] = (char *)this + 112;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Syllable>>(v13);
      else
        v14 = 0;
      v15 = v13 + (v10 << 6);
      v18[0] = v13;
      v18[1] = v15;
      v18[3] = v13 + (v14 << 6);
      v16 = *v3;
      *(_DWORD *)(v15 + 8) = *((_DWORD *)this + 10);
      *(_QWORD *)v15 = v16;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_OWORD *)(v15 + 16) = *((_OWORD *)this + 3);
      *(_QWORD *)(v15 + 32) = *((_QWORD *)this + 8);
      *v2 = 0;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      v17 = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v15 + 56) = *((_QWORD *)this + 11);
      *(_OWORD *)(v15 + 40) = v17;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 9) = 0;
      v18[2] = v15 + 64;
      std::vector<PhonemeRepresentation::Syllable>::__swap_out_circular_buffer((uint64_t *)this + 12, v18);
      v8 = *((_QWORD *)this + 13);
      std::__split_buffer<PhonemeRepresentation::Syllable>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      v6 = *v3;
      *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 10);
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_OWORD *)(v5 + 16) = *((_OWORD *)this + 3);
      *(_QWORD *)(v5 + 32) = *((_QWORD *)this + 8);
      *v2 = 0;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      v7 = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v5 + 56) = *((_QWORD *)this + 11);
      *(_OWORD *)(v5 + 40) = v7;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 9) = 0;
      v8 = v5 + 64;
    }
    *((_QWORD *)this + 13) = v8;
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 6);
  }
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
}

uint64_t PhonemeEncodingImpl::start_phoneme(uint64_t this)
{
  uint64_t v1;
  __int128 *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  __int128 buf;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = this;
  v22 = *MEMORY[0x1E0C80C00];
  if (*(char *)(this + 31) < 0)
  {
    if (!*(_QWORD *)(this + 16))
      return this;
  }
  else if (!*(_BYTE *)(this + 31))
  {
    return this;
  }
  v2 = (__int128 *)(this + 8);
  if (!*(_BYTE *)(this + 216)
    || (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(this + 144, (const void **)(this + 8))) != 0|| (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1 + 168, (const void **)(v1 + 8))) != 0|| (this = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v1 + 192, (const void **)(v1 + 8))) != 0)
  {
    v3 = *(_QWORD *)(v1 + 64);
    v4 = *(_QWORD *)(v1 + 56);
    if (v4 >= v3)
    {
      v7 = *(_QWORD *)(v1 + 48);
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v7) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v7) >> 3);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v9;
      v21 = v1 + 64;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v11);
      else
        v12 = 0;
      v13 = v11 + 24 * v8;
      *(_QWORD *)&buf = v11;
      *((_QWORD *)&buf + 1) = v13;
      v20 = v11 + 24 * v12;
      v14 = *v2;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v1 + 24);
      *(_OWORD *)v13 = v14;
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)(v1 + 24) = 0;
      *(_QWORD *)v2 = 0;
      v19 = v13 + 24;
      std::vector<PhonemeRepresentation::Phoneme>::__swap_out_circular_buffer((uint64_t *)(v1 + 48), &buf);
      v6 = *(_QWORD *)(v1 + 56);
      this = std::__split_buffer<PhonemeRepresentation::Phoneme>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      v5 = *v2;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1 + 24);
      *(_OWORD *)v4 = v5;
      *(_QWORD *)(v1 + 16) = 0;
      *(_QWORD *)(v1 + 24) = 0;
      *(_QWORD *)v2 = 0;
      v6 = v4 + 24;
    }
    *(_QWORD *)(v1 + 56) = v6;
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v17 = v1 + 8;
      if (*(char *)(v1 + 31) < 0)
        v17 = *(_QWORD *)v2;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v17;
    }
    if (*(char *)(v1 + 31) < 0)
      v2 = *(__int128 **)v2;
  }
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

void PhonemeEncodingImpl::~PhonemeEncodingImpl(PhonemeEncodingImpl *this)
{
  void **v2;

  *(_QWORD *)this = off_1EA91F778;
  std::__tree<std::string>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  v2 = (void **)((char *)this + 120);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 96);
  std::vector<PhonemeRepresentation::Syllable>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void PhonemeEncodingXSampa::~PhonemeEncodingXSampa(PhonemeEncodingXSampa *this)
{
  PhonemeEncodingImpl::~PhonemeEncodingImpl(this);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *PhonemeEncodingXSampa::parse_phoneme_string@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  int v9;

  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)a1);
  v6 = a2[23];
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  if (v6 >= 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  for (; v8; --v8)
  {
    v9 = *v7;
    if (v9 > 44)
    {
      if ((v9 - 45) >= 2)
      {
LABEL_17:
        std::string::push_back((std::string *)(a1 + 8), v9);
        goto LABEL_18;
      }
      PhonemeEncodingImpl::start_syllable((PhonemeEncodingImpl *)a1);
    }
    else
    {
      switch(v9)
      {
        case ' ':
          PhonemeEncodingImpl::start_phoneme(a1);
          break;
        case '"':
          PhonemeEncodingImpl::start_phoneme(a1);
          *(_DWORD *)(a1 + 32) = 1;
          break;
        case '#':
          PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
          break;
        default:
          goto LABEL_17;
      }
    }
LABEL_18:
    ++v7;
  }
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(a3, *(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
}

std::string *PhonemeEncodingXSampa::phoneme_string@<X0>(std::string *result@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t *v16;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v5 = 0;
    v6 = (uint64_t)&result[6];
    do
    {
      if (v5)
        result = std::string::append((std::string *)a3, " #");
      v7 = *v4;
      v8 = v4[1];
      if (*v4 != v8)
      {
        v9 = 0;
        do
        {
          if (v9)
            result = std::string::append((std::string *)a3, " .");
          v10 = *(_QWORD *)(v7 + 16);
          v11 = *(_QWORD *)(v7 + 24);
          while (v10 != v11)
          {
            v12 = *(unsigned __int8 *)(a3 + 23);
            if ((v12 & 0x80u) != 0)
              v12 = *(_QWORD *)(a3 + 8);
            if (v12)
              std::string::push_back((std::string *)a3, 32);
            if (*(_DWORD *)v7
              && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(v6, (const void **)v10))
            {
              std::string::push_back((std::string *)a3, 34);
            }
            v13 = *(char *)(v10 + 23);
            if (v13 >= 0)
              v14 = (const std::string::value_type *)v10;
            else
              v14 = *(const std::string::value_type **)v10;
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(v10 + 23);
            else
              v15 = *(_QWORD *)(v10 + 8);
            result = std::string::append((std::string *)a3, v14, v15);
            v10 += 24;
          }
          ++v9;
          v7 += 64;
        }
        while (v7 != v8);
      }
      ++v5;
      v4 += 3;
    }
    while (v4 != v16);
  }
  return result;
}

void sub_1DE9A5514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void PhonemeEncodingXSampa::join_phonemes(const void **a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(p_p, v8, v6);
  }
  *(_DWORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 2108960;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE9A5620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhonemeEncodingXSampa::silence(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  _QWORD v5[3];
  void **v6;

  PhonemeEncodingImpl::start_phoneme_representation((PhonemeEncodingImpl *)this);
  MEMORY[0x1DF0ECA80](this + 1, "sil");
  PhonemeEncodingImpl::start_word((PhonemeEncodingImpl *)this);
  memset(v5, 0, sizeof(v5));
  std::vector<PhonemeRepresentation::Word>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>(v5, this[15], this[16], 0xAAAAAAAAAAAAAAABLL * (this[16] - this[15]));
  v4 = (uint64_t *)v5[0];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(a2, *v4, v4[1], (v4[1] - *v4) >> 6);
  v6 = (void **)v5;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1DE9A56D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  const void **v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = (uint64_t **)result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = (const void **)result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v10 = v20;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, (const void **)v20 + 4);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)v5, (uint64_t)(a2 + 4), (uint64_t)&v18);
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v5, v17, v14, (uint64_t *)v18);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1DE9A5888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingLegacy  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PhonemeEncodingXSampa  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::vector<PhonemeRepresentation::Word>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PhonemeRepresentation::Word const*>,std::__wrap_iter<PhonemeRepresentation::Word const*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  char v46;
  _QWORD *v47;
  _QWORD *v48;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = (a2 - *a1) / 24;
  v10 = (uint64_t *)(*a1 + 24 * v9);
  v12 = (uint64_t)(a1 + 2);
  v11 = a1[2];
  v13 = (_QWORD *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v13) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (v13 - v10)) >= a5)
    {
      v19 = &a3[3 * a5];
      v20 = (_QWORD *)a1[1];
    }
    else
    {
      v41 = a1 + 2;
      v45[0] = v13;
      v48 = v13;
      v19 = &a3[v13 - v10];
      *(_QWORD *)&v42 = &v48;
      *((_QWORD *)&v42 + 1) = v45;
      LOBYTE(v43) = 0;
      if (v19 == a4)
      {
        v20 = v13;
      }
      else
      {
        v40 = v9;
        v20 = v13;
        v21 = &a3[v13 - v10];
        do
        {
          *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
          std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v20, *v21, v21[1], (v21[1] - *v21) >> 6);
          v20 = (_QWORD *)(v45[0] + 24);
          v45[0] += 24;
          v21 += 3;
        }
        while (v21 != a4);
        v9 = v40;
      }
      LOBYTE(v43) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v41);
      a1[1] = (uint64_t)v20;
      if ((char *)v13 - (char *)v10 < 1)
        return;
    }
    v31 = &v10[3 * a5];
    v32 = &v20[-3 * a5];
    v33 = v20;
    if (v32 < v13)
    {
      v33 = v20;
      do
      {
        *v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
        *(_OWORD *)v33 = *(_OWORD *)v32;
        v33[2] = v32[2];
        *v32 = 0;
        v32[1] = 0;
        v32[2] = 0;
        v33 += 3;
        v32 += 3;
      }
      while (v32 < v13);
    }
    a1[1] = (uint64_t)v33;
    if (v20 != v31)
    {
      v34 = 0;
      v35 = 0xAAAAAAAAAAAAAAABLL * (v20 - v31);
      v36 = v8 + 24 * v35 + 24 * v9;
      v37 = -24 * v35;
      do
      {
        v38 = v36 + v34;
        v39 = &v20[v34 / 8];
        std::vector<PhonemeRepresentation::Syllable>::__vdeallocate((void **)&v20[v34 / 8 - 3]);
        *(_OWORD *)(v39 - 3) = *(_OWORD *)(v36 + v34 - 24);
        *(v39 - 1) = *(_QWORD *)(v36 + v34 - 8);
        *(_QWORD *)(v38 - 24) = 0;
        *(_QWORD *)(v38 - 16) = 0;
        *(_QWORD *)(v38 - 8) = 0;
        v34 -= 24;
      }
      while (v37 != v34);
    }
    for (; v6 != v19; v10 += 3)
    {
      if (v6 != v10)
        std::vector<PhonemeRepresentation::Syllable>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>((uint64_t)v10, *v6, v6[1], (v6[1] - *v6) >> 6);
      v6 += 3;
    }
  }
  else
  {
    v14 = a5 - 0x5555555555555555 * (((uint64_t)v13 - v8) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v8) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v44 = v12;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(v16);
    else
      v17 = 0;
    v22 = (_QWORD *)(v16 + 24 * v9);
    v41 = (uint64_t *)v16;
    *(_QWORD *)&v42 = v22;
    *((_QWORD *)&v42 + 1) = v22;
    v43 = v16 + 24 * v17;
    v23 = 3 * a5;
    v24 = &v22[3 * a5];
    v25 = 8 * v23;
    do
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      std::vector<PhonemeRepresentation::Syllable>::__init_with_size[abi:ne180100]<PhonemeRepresentation::Syllable*,PhonemeRepresentation::Syllable*>(v22, *v6, v6[1], (v6[1] - *v6) >> 6);
      v22 += 3;
      v6 += 3;
      v25 -= 24;
    }
    while (v25);
    *((_QWORD *)&v42 + 1) = v24;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhonemeRepresentation::Word>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>,std::reverse_iterator<PhonemeRepresentation::Word*>>(v12, (uint64_t)v10, v10, *a1, (_QWORD *)*a1, v42, v42);
    *(_QWORD *)&v42 = v26;
    v27 = (uint64_t *)a1[1];
    v48 = v24;
    v47 = v24;
    v45[0] = v12;
    v45[1] = &v47;
    v45[2] = &v48;
    if (v10 != v27)
    {
      do
      {
        *v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        *(_OWORD *)v24 = *(_OWORD *)v10;
        v24[2] = v10[2];
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        v24 += 3;
        v10 += 3;
      }
      while (v10 != v27);
      v48 = v24;
    }
    v46 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v45);
    v28 = *(_OWORD *)a1;
    v29 = v43;
    *a1 = v42;
    a1[1] = (uint64_t)v24;
    v42 = v28;
    v30 = a1[2];
    a1[2] = v29;
    v43 = v30;
    v41 = (uint64_t *)v28;
    std::__split_buffer<PhonemeRepresentation::Word>::~__split_buffer((uint64_t)&v41);
  }
}

void sub_1DE9A5DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PhonemeRepresentation::Word>,PhonemeRepresentation::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(_QWORD *)(v4 + 8) = v5;
  _Unwind_Resume(a1);
}

uint64_t NSProcessInfoObjCBridge::get_thermal_state(NSProcessInfoObjCBridge *this)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3898], "injectedProcessInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  v5 = objc_msgSend(v4, "thermalState");
  if ((unint64_t)(v5 - 1) < 3)
    v6 = v5;
  else
    v6 = 0;

  return v6;
}

void sub_1DE9A5E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t NSProcessInfoObjCBridge::low_power_mode_enabled(NSProcessInfoObjCBridge *this)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0CB3898], "injectedProcessInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  v5 = objc_msgSend(v4, "isLowPowerModeEnabled");
  return v5;
}

void sub_1DE9A5ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t FROffsetHash::get(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    v3 = 1;
    v4 = 1;
    v5 = (v2 - 1) & a2;
    while (1)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * (v5 >> 4)) >> (2 * (v5 & 0xF));
      if ((v6 & 2) != 0 || (v6 & 1) == 0 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v5) == a2)
        break;
      v5 = (v5 + v4++) & (v2 - 1);
      if (v5 == ((v2 - 1) & a2))
        return v3;
    }
    if ((v6 & 3) != 0)
      v7 = *(_DWORD *)a1;
    else
      v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  if (v7 == v2)
    return 1;
  else
    return (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v7) << 32;
}

void SwitchLanguageImpl::~SwitchLanguageImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void SwitchLanguageImpl::generate_tokens(SwitchLanguageImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const std::string *environment;
  uint64_t side_chain;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::string v20;
  __int128 v21;

  v2 = (_QWORD *)((char *)this + 32);
  v3 = *((_QWORD *)this + 9);
  while (!*((_BYTE *)this + 8) && *((_QWORD *)this + 9) == v3)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v21, *((_QWORD *)this + 2), 0);
    v4 = v21;
    if ((_QWORD)v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      v5 = v21;
      if ((_QWORD *)(v5 + 8) == v6)
        v7 = 0;
      else
        v7 = v6[5] + 8;
      v8 = *(_QWORD *)(v7 + 48);
      if (*(char *)(v8 + 63) < 0)
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v8 + 40), *(_QWORD *)(v8 + 48));
      else
        v20 = *(std::string *)(v8 + 40);
      environment = (const std::string *)EnvironmentBroker::get_environment(*((uint64_t ***)this + 13), (__int128 *)&v20);
      std::string::operator=((std::string *)(*(_QWORD *)(v7 + 48) + 40), environment);
      if ((const std::string *)environment[7].__r_.__value_.__r.__words[2] == environment)
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v21);
      }
      else
      {
        side_chain = SideChainBroker::get_side_chain(*((_QWORD *)this + 14), (std::string::size_type)environment);
        (*(void (**)(uint64_t))(*(_QWORD *)side_chain + 24))(side_chain);
        v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)side_chain + 56))(side_chain);
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v11, &v21);
        do
        {
          while (1)
          {
            (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)side_chain + 16))(&v19, side_chain, 0);
            v12 = v19;
            if ((_QWORD)v19)
            {
              std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v19);
              (*(void (**)(uint64_t))(*(_QWORD *)side_chain + 32))(side_chain);
            }
            v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
            if (*((_QWORD *)&v19 + 1))
            {
              v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
                break;
            }
            if (!v12)
              goto LABEL_25;
          }
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        while (v12);
      }
LABEL_25:
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (!*((_QWORD *)&v21 + 1))
      goto LABEL_31;
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v4)
        return;
    }
    else
    {
LABEL_31:
      if (!v4)
        return;
    }
  }
}

void sub_1DE9A61E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void SwitchLanguage_MeCabImpl::~SwitchLanguage_MeCabImpl(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t SwitchLanguage_MeCabImpl::clear(SwitchLanguage_MeCabImpl *this)
{
  uint64_t result;

  *((_BYTE *)this + 112) = 0;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void SwitchLanguage_MeCabImpl::generate_tokens(SwitchLanguage_MeCabImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;

  if (!*((_BYTE *)this + 8))
  {
    v2 = (_QWORD *)((char *)this + 32);
    v3 = *((_QWORD *)this + 9);
    while (1)
    {
      if (*((_QWORD *)this + 9) != v3)
        return;
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v49, *((_QWORD *)this + 2), 0);
      if (!(_QWORD)v49)
        break;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      v4 = v49;
      if ((_QWORD *)(v4 + 8) == v5)
        goto LABEL_16;
      v6 = v5[5];
      v7 = (_QWORD *)(v6 + 8);
      v8 = *(char *)(v6 + 31);
      if (v8 < 0)
      {
        if (*(_QWORD *)(v6 + 16) != 1)
          goto LABEL_16;
        v7 = (_QWORD *)*v7;
      }
      else if (v8 != 1)
      {
        goto LABEL_16;
      }
      if (*(_BYTE *)v7 != 42)
        goto LABEL_16;
      if (!*((_BYTE *)this + 112))
      {
        (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
        *((_BYTE *)this + 112) = 1;
      }
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13));
LABEL_62:
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v9, &v49);
LABEL_63:
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (*((_BYTE *)this + 8))
        return;
    }
    v4 = 0;
    *((_BYTE *)this + 8) = 1;
LABEL_16:
    if (*((_BYTE *)this + 112))
    {
      v47 = 0;
      v48 = 0;
      v46 = 0uLL;
      do
      {
        while (1)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 16))(&v45, *((_QWORD *)this + 13), 0);
          v10 = v45;
          if ((_QWORD)v45)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13));
            v11 = v45;
            if ((_QWORD *)(v11 + 8) != v12)
            {
              v13 = v12[5];
              v16 = *(_QWORD *)(v13 + 56);
              v15 = (_QWORD *)(v13 + 56);
              v14 = v16;
              if (v16 == v47)
              {
                v29 = v46;
              }
              else
              {
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v47, v14, *(_QWORD *)(v12[5] + 64));
                v42 = v47;
                v43 = v48;
                if (v48)
                {
                  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                  do
                    v18 = __ldxr(p_shared_owners);
                  while (__stxr(v18 + 1, p_shared_owners));
                }
                TokenAttributes::create_nested(&v44, &v42, 6);
                v19 = v44;
                v44 = 0uLL;
                v20 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
                v46 = v19;
                if (v20)
                {
                  v21 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v22 = __ldaxr(v21);
                  while (__stlxr(v22 - 1, v21));
                  if (!v22)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                v23 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
                if (*((_QWORD *)&v44 + 1))
                {
                  v24 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
                  do
                    v25 = __ldaxr(v24);
                  while (__stlxr(v25 - 1, v24));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                v26 = v43;
                if (v43)
                {
                  v27 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v28 = __ldaxr(v27);
                  while (__stlxr(v28 - 1, v27));
                  if (!v28)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                v29 = v46;
                MEMORY[0x1DF0ECA80](v46 + 40, "en-US");
              }
              std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v15, v29, *((uint64_t *)&v46 + 1));
            }
            std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v45);
          }
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
              break;
          }
          if (!v10)
            goto LABEL_50;
        }
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      while (v10);
LABEL_50:
      *((_BYTE *)this + 112) = 0;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v48;
      if (v48)
      {
        v37 = (unint64_t *)&v48->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v4 = v49;
    }
    v9 = v2;
    if (!v4)
      goto LABEL_63;
    goto LABEL_62;
  }
}

void sub_1DE9A6678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SwitchLanguageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SwitchLanguageImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguageImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Agglomerate::ItemHolder<SideChainBroker>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA922E68;
  SideChainBroker::~SideChainBroker((char **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<SideChainBroker>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1EA922E68;
  SideChainBroker::~SideChainBroker((char **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void SwitchLanguagePersistentModule::~SwitchLanguagePersistentModule(void **this)
{
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SwitchLanguage_MeCabImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AudioResamplingModule::~AudioResamplingModule(AudioResamplingModule *this)
{
  *(_QWORD *)this = &off_1EA91FC70;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91FC70;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void AudioResamplingModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  float *v16;
  uint64_t v17;
  float **v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  const char *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float *v34;
  float *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *__p[2];
  __int128 v66;
  std::string v67;
  uint64_t v68[2];
  void *__dst[2];
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;

  v10 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v71 = v10;
  v72 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*(_BYTE *)v10)
  {
    kaldi::LinearResample::Reset(*(kaldi::LinearResample **)(a1 + 272), v5, v6, v7, v8);
    *(_QWORD *)(a1 + 304) = 0;
    if (*(_BYTE *)(v10 + 113))
    {
      if (!*(_BYTE *)(a1 + 292))
        *(_QWORD *)(a1 + 296) = 15;
      v13 = *a2;
      __p[1] = 0;
      *(_QWORD *)&v66 = 0;
      __p[0] = 0;
      std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(__p, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
      v15 = __p[0];
      if (__p[1] == __p[0])
      {
        if (!__p[1])
        {
LABEL_13:
          *(_QWORD *)(a1 + 296) += *(_QWORD *)(v10 + 104);
          goto LABEL_14;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 296) = (unint64_t)(float)((float)*(unint64_t *)(a1 + 296) / *((float *)__p[0] + 1));
      }
      operator delete(v15);
      goto LABEL_13;
    }
  }
LABEL_14:
  v16 = *(float **)(v10 + 56);
  v17 = *(_QWORD *)(v10 + 64);
  v18 = (float **)(v10 + 56);
  v19 = (v17 - (uint64_t)v16) >> 2;
  v20 = *(_QWORD *)(a1 + 296) * *(int *)(a1 + 312) / 0x3E8uLL - *(_QWORD *)(a1 + 304);
  v21 = v20 & ~(v20 >> 63);
  if (v21 >= v19)
    v22 = (v17 - (uint64_t)v16) >> 2;
  else
    v22 = v21;
  if (v22)
  {
    v23 = Resampler::make_some_noise(std::vector<float> &,unsigned long,unsigned long)::rnd;
    do
    {
      v23 = 1664525 * v23 + 1013904223;
      *v16++ = (float)(v23 % 3) + -1.0;
      --v22;
    }
    while (v22);
    Resampler::make_some_noise(std::vector<float> &,unsigned long,unsigned long)::rnd = v23;
    v16 = *v18;
    v19 = (v17 - (uint64_t)*v18) >> 2;
  }
  v24 = *(_QWORD *)(a1 + 272);
  v25 = *(unsigned __int8 *)(v10 + 1);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v66 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v16, v17, v19);
  v78 = 0;
  v76 = __p[0];
  v77 = (std::__shared_weak_count *)((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2);
  kaldi::VectorBase<float>::Scale((uint64_t)&v76, 0.000030518);
  v73 = 0;
  v74 = 0;
  v75 = 0;
  kaldi::LinearResample::Resample(v24, (uint64_t)&v76, v25 != 0, (uint64_t)&v73, v26);
  kaldi::VectorBase<float>::Scale((uint64_t)&v73, 32768.0);
  std::vector<float>::vector(__dst, (int)v74);
  if ((_DWORD)v74)
    memmove(__dst[0], v73, 4 * (int)v74);
  v27 = (float *)__dst[0];
  v28 = (float *)__dst[1];
  if (__dst[0] != __dst[1])
  {
    v29 = (float *)(v24 + 112);
    v30 = (float *)(v24 + 116);
    do
    {
      v31 = *v27;
      v32 = *v30;
      if (*v27 < *v29 || v31 > v32)
      {
        if (v31 <= v32)
        {
          v34 = v27;
        }
        else
        {
          v31 = *v30;
          v34 = (float *)(v24 + 116);
        }
        if (v31 < *v29)
          v34 = (float *)(v24 + 112);
        *v27 = *v34;
      }
      ++v27;
    }
    while (v27 != v28);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v73);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v10 + 64) = v35;
    operator delete(v35);
    *v18 = 0;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = 0;
  }
  *(_OWORD *)(v10 + 56) = *(_OWORD *)__dst;
  *(_QWORD *)(v10 + 72) = v70;
  v36 = *(std::__shared_weak_count **)(a1 + 176);
  v68[0] = *(_QWORD *)(a1 + 168);
  v68[1] = (uint64_t)v36;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  OverlappingPrompt::overlap_if_available(v68, v10 + 56);
  if (v36)
  {
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)(a1 + 304) += (uint64_t)(*(_QWORD *)(v71 + 64) - *(_QWORD *)(v71 + 56)) >> 2;
  v41 = *a2;
  {
    v43 = *(_QWORD **)(*(_QWORD *)v42 + 8);
    v44 = *(std::__shared_weak_count **)(*(_QWORD *)v42 + 16);
    v76 = v43;
    v77 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = v43[1];
    if (*v43 != v47)
    {
      v48 = *v43 + 32;
      do
      {
        v49 = *(_OWORD *)(v48 - 16);
        *(_OWORD *)__p = *(_OWORD *)(v48 - 32);
        v66 = v49;
        if (*(char *)(v48 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
        }
        else
        {
          v50 = *(_OWORD *)v48;
          v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
          *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v50;
        }
        *((_QWORD *)&v66 + 1) = (unint64_t)(float)(*(float *)(a1 + 288) * (float)*((unint64_t *)&v66 + 1));
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        v51 = v48 - 32;
        v48 += 56;
      }
      while (v51 + 56 != v47);
    }
    if (v44)
    {
      v52 = (unint64_t *)&v44->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v41 = *a2;
  }
  v54 = a2[1];
  v63 = v41;
  v64 = (std::__shared_weak_count *)v54;
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v63);
  v57 = v64;
  if (v64)
  {
    v58 = (unint64_t *)&v64->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v72;
  if (v72)
  {
    v61 = (unint64_t *)&v72->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_1DE9A6DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Resampler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Resampler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Resampler>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  kaldi::Vector<float>::Destroy(a1 + 112);
  v3 = (void **)(a1 + 72);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t AudioResamplingModule::AudioResamplingModule(uint64_t a1, char *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  float v15;
  kaldi::LinearResample *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v22;
  void *__p[2];
  char v24;
  uint64_t v25[2];

  v25[0] = a3;
  v25[1] = (uint64_t)a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v25);
  if (a4)
  {
    v9 = (unint64_t *)&a4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)a1 = &off_1EA91FC70;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate_in");
  v22 = 24000;
  *(_DWORD *)(a1 + 312) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v22);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sample_rate_out");
  v22 = 48000;
  *(_DWORD *)(a1 + 316) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v22);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "leading_silence");
  v22 = 0;
  *(_QWORD *)(a1 + 296) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)__p, &v22);
  if (v24 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "override_trimming_silence");
  LOBYTE(v22) = 0;
  *(_BYTE *)(a1 + 292) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, (unsigned __int8 *)&v22);
  if (v24 < 0)
    operator delete(__p[0]);
  v12 = operator new(0x90uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1EA935DC0;
  v13 = *(unsigned int *)(a1 + 312);
  v14 = *(_DWORD *)(a1 + 316);
  v15 = (float)(int)v13;
  if ((float)v14 < (float)(int)v13)
    v15 = (float)v14;
  v16 = kaldi::LinearResample::LinearResample((kaldi::LinearResample *)(v12 + 3), v13, v14, (float)(v15 * 0.5) + -1.0, 5, v11);
  v12[17] = 0x46FFFE00C7000000;
  *(_QWORD *)&v17 = v16;
  *((_QWORD *)&v17 + 1) = v12;
  v18 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(float *)(a1 + 288) = (float)(*(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 312));
  return a1;
}

void sub_1DE9A70FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  Module *v15;
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v15 + 272);
  Module::~Module(v15);
  _Unwind_Resume(a1);
}

void sub_1DE9A715C()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  if (v0)
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x1DE9A7154);
}

void Tokenize_Hanzi::~Tokenize_Hanzi(void **this)
{
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Tokenize_Hanzi::generate_tokens(Tokenize_Hanzi *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  const std::string::value_type **v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type size;
  UChar32 v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *p_p;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  std::string __p;
  void **p_data;
  std::string::size_type v59;
  std::string v60;
  unint64_t v61;
  std::string v62;
  __int128 v63;
  void *v64;
  _OWORD v65[3];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v56 = (_QWORD *)((char *)this + 32);
  v76 = *MEMORY[0x1E0C80C00];
  do
  {
    while (1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v63, *((_QWORD *)this + 2), 0);
      v2 = v63;
      if (!(_QWORD)v63)
      {
        *((_BYTE *)this + 8) = 1;
        goto LABEL_109;
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      v3 = v63;
      v5 = (_QWORD *)(v3 + 8);
      if ((_QWORD *)(v3 + 8) == v4)
        v6 = 0;
      else
        v6 = v4[5] + 8;
      if (v5 == v7)
        v8 = 0;
      else
        v8 = v7[5] + 8;
      if (v5 == v9)
        v10 = 0;
      else
        v10 = v9[5] + 8;
      v11 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 1885892462)
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back(v56, &v63);
        v11 = *(_DWORD *)v6;
      }
      if (v11 == 1952807028)
      {
        v12 = (const std::string::value_type **)(v6 + 24);
        if (*(char *)(v6 + 47) < 0)
        {
          v13 = *(_QWORD *)(v6 + 32);
          if (!v13)
            goto LABEL_109;
          std::string::__init_copy_ctor_external(&v62, *v12, v13);
        }
        else
        {
          if (!*(_BYTE *)(v6 + 47))
            goto LABEL_109;
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)v12;
          v62.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
        }
        v14 = operator new();
        *(_OWORD *)(v14 + 8) = xmmword_1DED16B50;
        *(_DWORD *)(v14 + 24) = 0;
        *(_QWORD *)v14 = off_1EA931E38;
        memset(v65, 0, sizeof(v65));
        v66 = v14;
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v73 = 0u;
        v74 = 0u;
        v75 = 0;
        v61 = 0;
        memset(&v60, 0, sizeof(v60));
        v15 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v62;
        size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v62.__r_.__value_.__l.__size_;
        p_data = (void **)&v15->__r_.__value_.__l.__data_;
        v59 = size << 32;
        if ((_DWORD)size)
        {
          do
          {
            LODWORD(v64) = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&p_data);
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(&__p, (uint64_t)v65, (char *)&v64, (char *)&v64 + 4);
            v17 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&p_data);
            if (u_hasBinaryProperty(v17, UCHAR_IDEOGRAPHIC))
            {
              v18 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
              if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v18 = v60.__r_.__value_.__l.__size_;
              if (v18)
              {
                v19 = *(std::__shared_weak_count **)(v6 + 56);
                if (v19)
                {
                  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
                  do
                    v21 = __ldxr(p_shared_owners);
                  while (__stxr(v21 + 1, p_shared_owners));
                }
                Tokenize_Hanzi::add_token((uint64_t)this, &v60, (uint64_t *)&v62, &v61);
                if (v19)
                {
                  v22 = (unint64_t *)&v19->__shared_owners_;
                  do
                    v23 = __ldaxr(v22);
                  while (__stlxr(v23 - 1, v22));
                  if (!v23)
                  {
                    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                    std::__shared_weak_count::__release_weak(v19);
                  }
                }
                Agglomerate::set<TokenBasicItem>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)+ (((unint64_t)(*((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)this + 72) + *((_BYTE *)this + 64) - 1)), (__int128 *)v6);
                if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                {
                  *v60.__r_.__value_.__l.__data_ = 0;
                  v60.__r_.__value_.__l.__size_ = 0;
                }
                else
                {
                  v60.__r_.__value_.__s.__data_[0] = 0;
                  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
                }
              }
              v26 = *(std::__shared_weak_count **)(v6 + 56);
              if (v26)
              {
                v27 = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              Tokenize_Hanzi::add_token((uint64_t)this, &__p, (uint64_t *)&v62, &v61);
              if (v26)
              {
                v29 = (unint64_t *)&v26->__shared_owners_;
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              Agglomerate::set<TokenBasicItem>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)+ (((unint64_t)(*((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)this + 72) + *((_BYTE *)this + 64) - 1)), (__int128 *)v6);
            }
            else
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v25 = __p.__r_.__value_.__l.__size_;
              std::string::append(&v60, (const std::string::value_type *)p_p, v25);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v31 = *((unsigned __int8 *)p_data + (int)v59);
            v32 = (v31 + 62);
            if (v31 <= 0xEF)
              v33 = 2;
            else
              v33 = 3;
            if (v31 <= 0xDF)
              v34 = v33;
            else
              v34 = v33 + 1;
            if (v32 >= 0x33)
              v34 = 1;
            v35 = v34 + v59;
            LODWORD(v59) = v35;
            v36 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v36 = v62.__r_.__value_.__r.__words[1];
          }
          while (v35 != v36);
          v37 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = v60.__r_.__value_.__l.__size_;
          if (v37)
          {
            v38 = *(std::__shared_weak_count **)(v6 + 56);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            Tokenize_Hanzi::add_token((uint64_t)this, &v60, (uint64_t *)&v62, &v61);
            if (v38)
            {
              v41 = (unint64_t *)&v38->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            Agglomerate::set<TokenBasicItem>(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)+ (((unint64_t)(*((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * (*((_BYTE *)this + 72) + *((_BYTE *)this + 64) - 1)), (__int128 *)v6);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            {
              *v60.__r_.__value_.__l.__data_ = 0;
              v60.__r_.__value_.__l.__size_ = 0;
              if (v8)
                goto LABEL_91;
              goto LABEL_105;
            }
            v60.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
          }
        }
        if (v8)
        {
LABEL_91:
          v43 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)
                                      + (((unint64_t)(*((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * (*((_BYTE *)this + 72) + *((_BYTE *)this + 64) - 1));
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
          if (*((_QWORD *)&v43 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          if ((_QWORD)v43)
          {
            p_data = &v64;
            v48 = v47[5];
            if (v48)
            {
              *(_BYTE *)(v48 + 8) = 0;
            }
            else
            {
              v49 = operator new();
              *(_QWORD *)v49 = &off_1EA923128;
              *(_BYTE *)(v49 + 8) = 0;
              v50 = v47[5];
              v47[5] = v49;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            }
          }
          if (v44)
          {
            v51 = (unint64_t *)&v44->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
LABEL_105:
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v65);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        goto LABEL_109;
      }
      if (v11 == 1651664235)
      {
        if (*(char *)(v6 + 47) < 0)
        {
          if (*(_QWORD *)(v6 + 32))
            goto LABEL_109;
        }
        else if (*(_BYTE *)(v6 + 47))
        {
          goto LABEL_109;
        }
        if (v10)
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v56, &v63);
      }
LABEL_109:
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
          break;
      }
      if (!v2)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  while (v2);
}

void sub_1DE9A78A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void Tokenize_Hanzi::add_token(uint64_t a1, std::string *a2, uint64_t *a3, unint64_t *a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int64_t size;
  unint64_t v13;
  std::string *v14;
  void *v15;
  char *v16;
  int64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  void **v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  std::string v35;
  __int128 v36;
  void *v37;

  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v8->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  *(_OWORD *)&v8[1].__shared_owners_ = 0u;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1].__shared_owners_;
  *(_QWORD *)&v33 = v8 + 1;
  *((_QWORD *)&v33 + 1) = v8;
  memset(&v31, 0, sizeof(v31));
  UTFString::lstrip(a2);
  UTFString::rstrip(a2);
  std::string::operator=(&v31, a2);
  v10 = *((unsigned __int8 *)a3 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = (uint64_t)a3;
  else
    v11 = *a3;
  if ((v10 & 0x80u) != 0)
    v10 = a3[1];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  *((_QWORD *)&v32 + 1) = size;
  v13 = *a4;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v31;
  else
    v14 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v10 >= v13)
  {
    if (size)
    {
      v15 = (void *)(v11 + v13);
      v16 = (char *)(v11 + v10);
      v17 = v10 - v13;
      if (v17 >= size)
      {
        v30 = a1;
        v19 = v14->__r_.__value_.__s.__data_[0];
        do
        {
          v20 = v17 - size;
          if (v20 == -1)
            break;
          v21 = (char *)memchr(v15, v19, v20 + 1);
          if (!v21)
            break;
          v18 = v21;
          if (!memcmp(v21, v14, size))
            goto LABEL_23;
          v15 = v18 + 1;
          v17 = v16 - (v18 + 1);
        }
        while (v17 >= size);
        v18 = v16;
LABEL_23:
        a1 = v30;
      }
      else
      {
        v18 = (char *)(v11 + v10);
      }
      v13 = (unint64_t)&v18[-v11];
      if (v18 == v16)
        v13 = -1;
    }
  }
  else
  {
    v13 = -1;
  }
  *(_QWORD *)&v32 = v13;
  *a4 = v13 + size;
  v34 = &v37;
  v23 = v22[5];
  if (v23)
  {
    v34 = (void **)off_1EA922DC8;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      v35 = v31;
    v36 = v32;
    v26 = (void **)(v23 + 8);
    if (*(char *)(v23 + 31) < 0)
      operator delete(*v26);
    v27 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_QWORD *)(v23 + 24) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v23 + 32) = v36;
  }
  else
  {
    v24 = operator new();
    *(_QWORD *)v24 = off_1EA922DC8;
    v25 = (std::string *)(v24 + 8);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v25, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
      *(_QWORD *)(v24 + 24) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v24 + 32) = v32;
    v28 = v22[5];
    v22[5] = v24;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), &v33);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1DE9A7C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  MEMORY[0x1DF0ED014](v19, 0x1093C40110CF19CLL);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenHanziItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922DC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenHanziItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922DC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Tokenize_Hanzi>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Tokenize_Hanzi>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Tokenize_Hanzi>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PsolaStream::~PsolaStream(PsolaStream *this)
{
  PsolaStream::~PsolaStream(this);
  JUMPOUT(0x1DF0ED014);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1EA91C890;
  v2 = (void **)((char *)this + 448);
  v7 = (void **)((char *)this + 472);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = v2;
  std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](&v7);
  v3 = (void *)*((_QWORD *)this + 52);
  if (v3)
  {
    *((_QWORD *)this + 53) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 48);
  if (v4)
  {
    *((_QWORD *)this + 49) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 43);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 40);
  if (v6)
  {
    *((_QWORD *)this + 41) = v6;
    operator delete(v6);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  Module::~Module(this);
}

void PsolaStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  float32x2_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  __int128 v23;
  int64x2_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  float *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  std::vector<int>::value_type v88;
  int v89;
  _BYTE *v90;
  _DWORD *v91;
  unint64_t v92;
  float v93;
  int v94;
  int v95;
  std::vector<int>::value_type v96;
  char *v97;
  _DWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  std::vector<int>::value_type *v105;
  std::vector<int>::value_type v106;
  Database *v107;
  char *v108;
  _DWORD *v109;
  void *v110;
  std::vector<int>::const_iterator v111;
  int v112;
  BOOL v113;
  Database *v114;
  char *v115;
  _DWORD *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int *v124;
  int v125;
  int v126;
  _DWORD *v127;
  int v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  std::vector<int>::value_type i;
  std::vector<int>::value_type v136;
  char *v137;
  _DWORD *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  std::vector<int>::value_type *v145;
  std::vector<int>::value_type v146;
  const void *v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  _DWORD *v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  float32x2_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  float *v161;
  float v162;
  float v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  float *v169;
  float *v170;
  uint64_t v171;
  __int128 v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  void *v179;
  char *v180;
  BOOL v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  void *v186;
  char *v187;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  const char *v195;
  double v196;
  char *v197;
  char *v198;
  size_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  _BYTE *v207;
  unint64_t v208;
  char *v209;
  void *v210;
  char *v211;
  char *v212;
  size_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  _BYTE *v221;
  unint64_t v222;
  char *v223;
  void *v224;
  void *v225;
  void *v226;
  __int128 v227;
  void *v228;
  void *v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  int32x2_t **v240;
  _QWORD *v241;
  int v242;
  int v243;
  _OWORD *v244;
  void **v245;
  __int128 v246;
  int v247;
  int v248;
  __int128 v249;
  float32x2_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  __int128 v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  uint64_t *v261;
  std::__shared_weak_count *v262;
  void *v263[2];
  void *v264[2];
  __int128 v265;
  __int128 v266;
  void *v267;
  __int128 v268;
  _QWORD v269[4];
  char v270;
  void *v271[2];
  char v272;
  void *v273;
  uint64_t v274;
  char v275;
  std::vector<int>::value_type __x;
  void *v277;
  char *v278;
  char *v279;
  void *__p;
  char *v281;
  char *v282;
  void *v283;
  _DWORD *v284;
  __int128 v285;
  __int128 v286;
  float *v287;
  float *v288;
  uint64_t v289;
  int64x2_t v290;
  _OWORD v291[2];
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)v3 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 16);
  v261 = v4;
  v262 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *v4;
  v252 = v4[1];
  if (*v4 != v252)
  {
    v240 = (int32x2_t **)(a1 + 384);
    v241 = (_QWORD *)(a1 + 408);
    v245 = (void **)(a1 + 344);
    v244 = (_OWORD *)(a1 + 368);
    v9 = (float32x2_t)vdup_n_s32(0x42C80000u);
    v10 = (float32x2_t)vdup_n_s32(0x447A0000u);
    v11 = 0.5;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 280);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 48))
          break;
      }
LABEL_368:
      v8 += 120;
      if (v8 == v252)
        goto LABEL_369;
    }
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(v8 + 16);
    v253 = v8;
    v15 = v13;
    if (v13 != v14)
    {
      do
      {
        v16 = *(_DWORD **)(v13 + 160);
        v17 = *(_DWORD **)(v13 + 168);
        while (v16 != v17)
        {
          if (*v16 == 1)
          {
            SharedObjectPool::get<SynthesizerConfig>(v263, *(_QWORD *)(a1 + 168));
            v18 = (float32x2_t *)v263[0];
            v19 = (std::__shared_weak_count *)v263[1];
            *(float *)(a1 + 296) = *((float *)v263[0] + 1) * 100.0;
            *(int32x2_t *)(a1 + 300) = vrev64_s32((int32x2_t)vmul_f32(v18[1], v9));
            if (v19)
            {
              v20 = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
          }
          v16 += 14;
        }
        v13 += 184;
      }
      while (v13 != v14);
      v15 = *(_QWORD *)(v253 + 8);
      v13 = *(_QWORD *)(v253 + 16);
      v12 = *(_QWORD *)(a1 + 280);
    }
    v22 = *(_DWORD *)(a1 + 440);
    v23 = 0uLL;
    *(_OWORD *)v264 = 0u;
    v265 = 0u;
    *(_OWORD *)v263 = 0u;
    v267 = 0;
    v24 = 0uLL;
    v268 = 0u;
    memset(&v269[1], 0, 24);
    if (v22)
      v25 = 15;
    else
      v25 = 0;
    if (!*(_BYTE *)(v12 + 48))
    {
      v246 = 0uLL;
      v33 = v253;
      goto LABEL_242;
    }
    v26 = *(unsigned int *)(v15 + 4);
    v27 = *(int *)(v13 - 180);
    memset(v291, 0, sizeof(v291));
    v290 = 0uLL;
    if (((v27 | v26) & 0x80000000) != 0)
    {
      v34 = *(_DWORD *)(v12 + 84) * (v25 - v26 + 10);
      if (v34 < 1)
      {
        v246 = 0uLL;
        v249 = 0uLL;
        v33 = v253;
      }
      else
      {
        v35 = 0;
        v33 = v253;
        do
        {
          v36 = (char *)v290.i64[1];
          if (v290.i64[1] >= *(_QWORD *)&v291[0])
          {
            v38 = (char *)v290.i64[0];
            v39 = (v290.i64[1] - v290.i64[0]) >> 2;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v41 = *(_QWORD *)&v291[0] - v290.i64[0];
            if ((*(_QWORD *)&v291[0] - v290.i64[0]) >> 1 > v40)
              v40 = v41 >> 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
              v42 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v291, v42);
              v36 = (char *)v290.i64[1];
              v38 = (char *)v290.i64[0];
            }
            else
            {
              v43 = 0;
            }
            v44 = (int *)&v43[4 * v39];
            *v44 = v35;
            v37 = v44 + 1;
            while (v36 != v38)
            {
              v45 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--v44 = v45;
            }
            v290.i64[0] = (uint64_t)v44;
            v290.i64[1] = (uint64_t)v37;
            *(_QWORD *)&v291[0] = &v43[4 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_DWORD *)v290.i64[1] = v35;
            v37 = v36 + 4;
          }
          v290.i64[1] = (uint64_t)v37;
          LOBYTE(v283) = 0;
          std::vector<BOOL>::push_back((uint64_t)v291 + 8, &v283);
          v35 += *(_DWORD *)(v12 + 88);
        }
        while (v35 < v34);
        v24 = v290;
        v246 = v291[1];
        v249 = v291[0];
      }
      v110 = 0;
      memset(v291, 0, sizeof(v291));
      v290 = 0u;
      goto LABEL_237;
    }
    v287 = 0;
    v288 = 0;
    v289 = 0;
    v242 = v25;
    if ((int)v26 < 1)
    {
      v248 = 0;
    }
    else
    {
      v28 = 0;
      v29 = *(_DWORD *)(v12 + 84);
      while (v28 < v29 * v25)
      {
        v30 = *(_QWORD *)(v12 + 8);
        if (*(_BYTE *)(v30 + 8))
          v31 = *(unsigned int *)(*(_QWORD *)(v30 + 96) + 4 * (v26 - 1));
        else
          v31 = v26 - 1;
        Database::get_unit(v30, v31, (void **)&v287);
        v29 = *(_DWORD *)(v12 + 84);
        v28 = (int)(float)(truncf(v287[*(int *)(v12 + 92)] * (float)v29) + (float)v28);
        if (v26-- <= 1)
        {
          v248 = v28;
          LODWORD(v26) = 0;
          goto LABEL_56;
        }
      }
      v248 = v28;
    }
LABEL_56:
    v46 = 0;
    v47 = (v27 + 1);
    while (1)
    {
      v48 = *(_QWORD *)(v12 + 8);
      if (v27 >= *(int *)(*(_QWORD *)(v48 + 80) + 4) - 1 || v46 >= 10 * *(_DWORD *)(v12 + 84))
        break;
      v49 = v47;
      if (*(_BYTE *)(v48 + 8))
        v49 = *(unsigned int *)(*(_QWORD *)(v48 + 96) + 4 * v27 + 4);
      Database::get_unit(v48, v49, (void **)&v287);
      v46 = (int)(float)(truncf(v287[*(int *)(v12 + 92)] * (float)*(int *)(v12 + 84)) + (float)v46);
      v47 = (v47 + 1);
      ++v27;
    }
    v243 = v47 - v26;
    v50 = *(_DWORD *)(v12 + 60);
    v52 = *(_DWORD *)(v12 + 72);
    v51 = *(_DWORD *)(v12 + 76);
    v53 = *(_QWORD *)(v12 + 32);
    v54 = *(_DWORD *)(v12 + 68);
    v55 = *(_DWORD *)v12;
    if ((int)v27 + 1 >= v50)
      v56 = v27;
    else
      v56 = v27 + 1;
    if ((int)v27 + 1 >= v50)
      v57 = *(_DWORD *)(v12 + 40);
    else
      v57 = v52 + v55 * *(_DWORD *)(v53 + (v54 + v56 * v51));
    v58 = v52 + v55 * *(_DWORD *)(v53 + (v54 + v51 * v26));
    PitchmarkExtractorCore::get_pitchmarks_from_data((PitchmarkExtractorCore *)&v283, (int *)v12, v53 + v58, (v57 - (int)v58) / v55);
    if (v284 == v283)
    {
      v59 = 0;
      v24 = vdupq_n_s64((unint64_t)v284);
      v284 = 0;
      v283 = 0;
      v60 = v285;
      v285 = 0uLL;
      v249 = v60;
      v246 = v286;
      v286 = 0uLL;
      v33 = v253;
LABEL_230:
      v256 = v24;
      if (v59)
      {
        v284 = v59;
        operator delete(v59);
        v24 = v256;
      }
      if (v287)
      {
        v288 = v287;
        operator delete(v287);
        v24 = v256;
      }
      if (*((_QWORD *)&v291[0] + 1))
      {
        operator delete(*((void **)&v291[0] + 1));
        v24 = v256;
      }
      v110 = (void *)v290.i64[0];
LABEL_237:
      v257 = v24;
      if (v110)
      {
        v290.i64[1] = (uint64_t)v110;
        operator delete(v110);
        v24 = v257;
      }
      if (v263[0])
      {
        v263[1] = v263[0];
        operator delete(v263[0]);
        v24 = v257;
      }
      v23 = v249;
LABEL_242:
      *(int64x2_t *)v263 = v24;
      v264[0] = (void *)v23;
      if (v264[1])
      {
        v251 = *((_QWORD *)&v23 + 1);
        operator delete(v264[1]);
        *((_QWORD *)&v23 + 1) = v251;
      }
      v264[1] = *((void **)&v23 + 1);
      v265 = v246;
      *(_QWORD *)&v285 = 0;
      v284 = 0;
      v283 = 0;
      std::vector<Unit>::__init_with_size[abi:ne180100]<Unit*,Unit*>(&v283, *(_QWORD *)(v33 + 8), *(_QWORD *)(v33 + 16), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 3));
      v155 = 0;
      if (v284 == v283 || (*((_DWORD *)v283 + 1) & 0x80000000) != 0)
      {
        v156 = 0;
      }
      else
      {
        v156 = 0;
        if ((*(v284 - 45) & 0x80000000) == 0)
        {
          v156 = *((_DWORD *)v283 + 34);
          v155 = *(v284 - 10);
        }
      }
      *(_QWORD *)&v266 = __PAIR64__(v155, v156);
      v290.i64[0] = (uint64_t)&v283;
      std::vector<Unit>::__destroy_vector::operator()[abi:ne180100]((void ***)&v290);
      *((float32x2_t *)&v266 + 1) = v9;
      v157 = vdiv_f32(*(float32x2_t *)(v33 + 84), v10);
      v158 = *(_QWORD *)(v33 + 8);
      v159 = *(_QWORD *)(v33 + 16);
      v250 = v157;
      v160 = 0;
      if (v158 == v159)
      {
        v258 = 0u;
      }
      else
      {
        v161 = 0;
        v258 = 0u;
        v162 = v157.f32[0];
        do
        {
          v163 = v162 + (float)(*(float *)(v158 + 152) / 1000.0);
          if ((unint64_t)v161 >= v160)
          {
            v164 = (void *)v258;
            v165 = (uint64_t)((uint64_t)v161 - v258) >> 3;
            v166 = v165 + 1;
            if ((unint64_t)(v165 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v160 - v258) >> 2 > v166)
              v166 = (uint64_t)(v160 - v258) >> 2;
            if (v160 - (unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
              v167 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v167 = v166;
            if (v167)
            {
              v167 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v167);
              v161 = (float *)*((_QWORD *)&v258 + 1);
            }
            else
            {
              v168 = 0;
            }
            v169 = (float *)(v167 + 8 * v165);
            *v169 = v162;
            v169[1] = v163;
            v170 = v169;
            while (v161 != (float *)v258)
            {
              v171 = *((_QWORD *)v161 - 1);
              v161 -= 2;
              *((_QWORD *)v170 - 1) = v171;
              v170 -= 2;
            }
            v160 = v167 + 8 * v168;
            v161 = v169 + 2;
            *(_QWORD *)&v258 = v170;
            if (v164)
              operator delete(v164);
          }
          else
          {
            *v161 = v162;
            v161[1] = v163;
            v161 += 2;
          }
          *(_QWORD *)&v172 = v258;
          *((_QWORD *)&v172 + 1) = v161;
          v258 = v172;
          v162 = v162 + (float)(*(float *)(v158 + 152) / 1000.0);
          v158 += 184;
        }
        while (v158 != v159);
      }
      v269[0] = v250;
      if (v269[1])
      {
        v269[2] = v269[1];
        operator delete((void *)v269[1]);
      }
      *(_OWORD *)&v269[1] = v258;
      v269[3] = v160;
      v173 = (void **)(a1 + 320);
      if (*(_QWORD *)(a1 + 456) == *(_QWORD *)(a1 + 448))
      {
        v8 = v253;
        if (*(int *)(a1 + 440) >= 1)
        {
          v174 = *(_QWORD *)(a1 + 312);
          v175 = *(_QWORD *)(v174 + 16);
          if (*(char *)(v175 - 121) < 0)
          {
            v176 = *(char **)(v175 - 144);
            v177 = *(_QWORD *)(v175 - 136);
          }
          else
          {
            v176 = (char *)(v175 - 144);
            v177 = *(unsigned __int8 *)(v175 - 121);
          }
          if (v177 >= 3)
          {
            v178 = &v176[v177];
            v179 = v176;
            do
            {
              v180 = (char *)memchr(v179, 115, v177 - 2);
              if (!v180)
                break;
              v181 = *(_WORD *)v180 == 26995 && v180[2] == 108;
              if (v181)
              {
                if (v180 != v178 && v180 - v176 != -1)
                  goto LABEL_311;
                break;
              }
              v179 = v180 + 1;
              v177 = v178 - (_BYTE *)v179;
            }
            while (v178 - (_BYTE *)v179 >= 3);
          }
          v182 = *(_QWORD *)(v253 + 8);
          if (*(char *)(v182 + 63) < 0)
          {
            v183 = *(char **)(v182 + 40);
            v184 = *(_QWORD *)(v182 + 48);
          }
          else
          {
            v183 = (char *)(v182 + 40);
            v184 = *(unsigned __int8 *)(v182 + 63);
          }
          if (v184 >= 3)
          {
            v185 = &v183[v184];
            v186 = v183;
            do
            {
              v187 = (char *)memchr(v186, 115, v184 - 2);
              if (!v187)
                break;
              if (*(_WORD *)v187 == 26995 && v187[2] == 108)
              {
                if (v187 != v185 && v187 - v183 != -1)
                  goto LABEL_310;
                break;
              }
              v186 = v187 + 1;
              v184 = v185 - (_BYTE *)v186;
            }
            while (v185 - (_BYTE *)v186 >= 3);
          }
          v189 = *(float *)(a1 + 372);
          if (v189 == 0.0)
          {
LABEL_310:
            v8 = v253;
LABEL_311:
            v173 = (void **)(a1 + 320);
          }
          else
          {
            v190 = *(float *)&v266;
            v8 = v253;
            v173 = (void **)(a1 + 320);
            if (*(float *)&v266 != 0.0)
            {
              v191 = (float)(v189 + *(float *)&v266) * v11;
              if ((float)(vabds_f32(v189, *(float *)&v266) / v191) > 0.1)
              {
                v192 = *(unsigned int *)(v175 - 180);
                v193 = *(unsigned int *)(v182 + 4);
                if (Diagnostics_GetLogObject(void)::onceToken != -1)
                  dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                v194 = Diagnostics_GetLogObject(void)::__profile_log_default;
                if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
                {
                  v290.i64[0] = __PAIR64__(v192, 67109888);
                  v196 = v190;
                  v290.i16[4] = 1024;
                  *(__int32 *)((char *)&v290.i32[2] + 2) = v193;
                  v290.i16[7] = 2048;
                  *(double *)v291 = v189;
                  WORD4(v291[0]) = 2048;
                  *(double *)((char *)v291 + 10) = v190;
                  _os_log_impl(&dword_1DE3F6000, v194, OS_LOG_TYPE_INFO, "PSOLA f0 modification between units: %d,%d (f0 beg/end: %1.2f/%1.2f Hz)", (uint8_t *)&v290, 0x22u);
                }
                else
                {
                  v196 = v190;
                }
                Diagnostics::log(6, "PSOLA f0 modification between units: %d,%d (f0 beg/end: %1.2f/%1.2f Hz)", v195, v192, v193, v189, *(_QWORD *)&v196);
                *(_DWORD *)(a1 + 376) = 1120403456;
                *(float *)(a1 + 380) = (float)(v191 / v189) * 100.0;
                *((float *)&v266 + 2) = (float)(v191 / v190) * 100.0;
                HIDWORD(v266) = 1120403456;
                populate_unit_pitch_modification(a1 + 376, (uint64_t)v241, v240);
                v173 = (void **)(a1 + 320);
                v11 = 0.5;
                populate_unit_pitch_modification((uint64_t)&v266 + 8, (uint64_t)v269, (int32x2_t **)&v267);
                v174 = *(_QWORD *)(a1 + 312);
              }
            }
          }
          PsolaStream::process_segment(a1, v174, (uint64_t)v173);
        }
      }
      else
      {
        v8 = v253;
        PsolaStream::process_segment(a1, v253, (uint64_t)v263);
      }
      *(_QWORD *)(a1 + 312) = v8;
      if (v173 == v263)
      {
        std::vector<BOOL>::operator=(v245, (uint64_t)&v264[1]);
        *v244 = v266;
        *v241 = v269[0];
LABEL_360:
        ++*(_DWORD *)(a1 + 440);
        *(_DWORD *)(a1 + 444) -= 373475417 * ((*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3);
        if (v269[1])
        {
          v269[2] = v269[1];
          operator delete((void *)v269[1]);
        }
        if (v267)
        {
          *(_QWORD *)&v268 = v267;
          operator delete(v267);
        }
        if (v264[1])
          operator delete(v264[1]);
        if (v263[0])
        {
          v263[1] = v263[0];
          operator delete(v263[0]);
        }
        goto LABEL_368;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v173, (char *)v263[0], (uint64_t)v263[1], ((char *)v263[1] - (char *)v263[0]) >> 2);
      std::vector<BOOL>::operator=(v245, (uint64_t)&v264[1]);
      *v244 = v266;
      v197 = (char *)v267;
      v198 = (char *)v268;
      v199 = v268 - (_QWORD)v267;
      v200 = (uint64_t)(v268 - (_QWORD)v267) >> 3;
      v201 = *(_QWORD *)(a1 + 400);
      v202 = *(char **)(a1 + 384);
      if (v200 > (v201 - (uint64_t)v202) >> 3)
      {
        if (v202)
        {
          *(_QWORD *)(a1 + 392) = v202;
          operator delete(v202);
          v201 = 0;
          *v240 = 0;
          *(_QWORD *)(a1 + 392) = 0;
          *(_QWORD *)(a1 + 400) = 0;
        }
        if ((v199 & 0x8000000000000000) != 0)
          goto LABEL_399;
        v203 = v201 >> 2;
        if (v201 >> 2 <= v200)
          v203 = v200;
        v204 = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v203;
        if (v204 >> 61)
LABEL_399:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v204);
        v202 = v205;
        *(_QWORD *)(a1 + 384) = v205;
        *(_QWORD *)(a1 + 392) = v205;
        *(_QWORD *)(a1 + 400) = &v205[8 * v206];
        if (v198 != v197)
          memmove(v205, v197, v199);
LABEL_338:
        *(_QWORD *)(a1 + 392) = &v202[v199];
        v211 = (char *)v269[1];
        *(_QWORD *)(a1 + 408) = v269[0];
        v212 = (char *)v269[2];
        v213 = v269[2] - (_QWORD)v211;
        v214 = (uint64_t)(v269[2] - (_QWORD)v211) >> 3;
        v215 = *(_QWORD *)(a1 + 432);
        v216 = *(char **)(a1 + 416);
        if (v214 > (v215 - (uint64_t)v216) >> 3)
        {
          if (v216)
          {
            *(_QWORD *)(a1 + 424) = v216;
            operator delete(v216);
            v215 = 0;
            *(_QWORD *)(a1 + 416) = 0;
            *(_QWORD *)(a1 + 424) = 0;
            *(_QWORD *)(a1 + 432) = 0;
          }
          if ((v213 & 0x8000000000000000) != 0)
            goto LABEL_398;
          v217 = v215 >> 2;
          if (v215 >> 2 <= v214)
            v217 = v214;
          v218 = (unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v217;
          if (v218 >> 61)
LABEL_398:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v219 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v218);
          v216 = v219;
          *(_QWORD *)(a1 + 416) = v219;
          *(_QWORD *)(a1 + 424) = v219;
          *(_QWORD *)(a1 + 432) = &v219[8 * v220];
          if (v212 != v211)
            memmove(v219, v211, v213);
          goto LABEL_359;
        }
        v221 = *(_BYTE **)(a1 + 424);
        v222 = (v221 - v216) >> 3;
        if (v222 >= v214)
        {
          if ((char *)v269[2] == v211)
          {
LABEL_358:
            v8 = v253;
LABEL_359:
            *(_QWORD *)(a1 + 424) = &v216[v213];
            goto LABEL_360;
          }
          v224 = *(void **)(a1 + 416);
          v223 = v211;
        }
        else
        {
          if (v221 != v216)
          {
            memmove(*(void **)(a1 + 416), v211, v221 - v216);
            v216 = *(char **)(a1 + 424);
          }
          v223 = &v211[8 * v222];
          v213 = v212 - v223;
          if (v212 == v223)
            goto LABEL_358;
          v224 = v216;
        }
        memmove(v224, v223, v213);
        goto LABEL_358;
      }
      v207 = *(_BYTE **)(a1 + 392);
      v208 = (v207 - v202) >> 3;
      if (v208 >= v200)
      {
        if ((void *)v268 == v267)
        {
LABEL_337:
          v8 = v253;
          goto LABEL_338;
        }
        v210 = *(void **)(a1 + 384);
        v209 = (char *)v267;
      }
      else
      {
        if (v207 != v202)
        {
          memmove(*(void **)(a1 + 384), v267, v207 - v202);
          v202 = *(char **)(a1 + 392);
        }
        v209 = &v197[8 * v208];
        v199 = v198 - v209;
        if (v198 == v209)
          goto LABEL_337;
        v210 = v202;
      }
      memmove(v210, v209, v199);
      goto LABEL_337;
    }
    __p = 0;
    v281 = 0;
    v282 = 0;
    v277 = 0;
    v278 = 0;
    v279 = 0;
    v247 = v27 - v26;
    if ((int)v27 >= (int)v26)
    {
      v254 = 0;
      v26 = (int)v26;
      do
      {
        v61 = *(_QWORD *)(v12 + 8);
        if (*(_BYTE *)(v61 + 8))
          v62 = *(unsigned int *)(*(_QWORD *)(v61 + 96) + 4 * v26);
        else
          v62 = v26;
        Database::get_unit(v61, v62, (void **)&v287);
        v63 = *(int *)(v12 + 96);
        v64 = v287;
        v65 = v281;
        if (v281 >= v282)
        {
          v67 = (char *)__p;
          v68 = (v281 - (_BYTE *)__p) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            goto LABEL_397;
          v70 = v282 - (_BYTE *)__p;
          if ((v282 - (_BYTE *)__p) >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v282, v71);
            v67 = (char *)__p;
            v65 = v281;
          }
          else
          {
            v72 = 0;
          }
          v73 = &v72[4 * v68];
          *(float *)v73 = v64[v63];
          v66 = v73 + 4;
          while (v65 != v67)
          {
            v74 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v73 - 1) = v74;
            v73 -= 4;
          }
          __p = v73;
          v281 = v66;
          v282 = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(float *)v281 = v287[v63];
          v66 = v65 + 4;
        }
        v281 = v66;
        v75 = *(int *)(v12 + 92);
        v76 = v287;
        v77 = v278;
        if (v278 >= v279)
        {
          v79 = (char *)v277;
          v80 = (v278 - (_BYTE *)v277) >> 2;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62)
LABEL_397:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v82 = v279 - (_BYTE *)v277;
          if ((v279 - (_BYTE *)v277) >> 1 > v81)
            v81 = v82 >> 1;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
            v83 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v279, v83);
            v79 = (char *)v277;
            v77 = v278;
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[4 * v80];
          *(float *)v85 = v76[v75];
          v78 = v85 + 4;
          while (v77 != v79)
          {
            v86 = *((_DWORD *)v77 - 1);
            v77 -= 4;
            *((_DWORD *)v85 - 1) = v86;
            v85 -= 4;
          }
          v277 = v85;
          v278 = v78;
          v279 = &v84[4 * v83];
          if (v79)
            operator delete(v79);
        }
        else
        {
          *(float *)v278 = v287[v75];
          v78 = v77 + 4;
        }
        v278 = v78;
        v254 = (int)(float)((float)v254 + (float)(v287[*(int *)(v12 + 92)] * (float)*(int *)(v12 + 84)));
        ++v26;
      }
      while ((_DWORD)v47 != (_DWORD)v26);
    }
    else
    {
      v254 = 0;
    }
    __x = 0;
    if (v247 == -1)
    {
      v88 = 0;
    }
    else
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = v284;
      v91 = v283;
      do
      {
        v92 = v89;
        if (v89 < (unint64_t)((v90 - (_BYTE *)v91) >> 2))
        {
          v93 = *((float *)v277 + v87);
          v94 = *(_DWORD *)(v12 + 84);
          while (1)
          {
            v95 = v91[v92];
            if (v95 == *(_DWORD *)(v12 + 100))
              break;
            v96 = __x + v95;
            __x = v96;
            v97 = (char *)v290.i64[1];
            if (v290.i64[1] >= *(_QWORD *)&v291[0])
            {
              v99 = (char *)v290.i64[0];
              v100 = (v290.i64[1] - v290.i64[0]) >> 2;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v102 = *(_QWORD *)&v291[0] - v290.i64[0];
              if ((*(_QWORD *)&v291[0] - v290.i64[0]) >> 1 > v101)
                v101 = v102 >> 1;
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                v103 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v103 = v101;
              if (v103)
              {
                v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v291, v103);
                v97 = (char *)v290.i64[1];
                v99 = (char *)v290.i64[0];
                v96 = __x;
              }
              else
              {
                v104 = 0;
              }
              v105 = (std::vector<int>::value_type *)&v104[4 * v100];
              *v105 = v96;
              v98 = v105 + 1;
              while (v97 != v99)
              {
                v106 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *--v105 = v106;
              }
              v290.i64[0] = (uint64_t)v105;
              v290.i64[1] = (uint64_t)v98;
              *(_QWORD *)&v291[0] = &v104[4 * v103];
              if (v99)
                operator delete(v99);
            }
            else
            {
              *(_DWORD *)v290.i64[1] = v96;
              v98 = v97 + 4;
            }
            v290.i64[1] = (uint64_t)v98;
            LOBYTE(v273) = (*(_QWORD *)(*((_QWORD *)&v285 + 1) + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v92) & 1;
            std::vector<BOOL>::push_back((uint64_t)v291 + 8, &v273);
            ++v92;
            v90 = v284;
            v91 = v283;
            if (v92 >= ((char *)v284 - (_BYTE *)v283) >> 2)
            {
              v89 = v92;
              goto LABEL_133;
            }
          }
          v88 += (int)(float)(v93 * (float)v94);
          __x = v88;
          v89 = v92 + 1;
        }
LABEL_133:
        ++v87;
      }
      while (v87 != v243);
    }
    v107 = *(Database **)(v12 + 8);
    std::string::basic_string[abi:ne180100]<0>(v271, "name");
    v108 = Database::feat_val(v107, (__int128 *)v271, (int)*(float *)__p);
    v33 = v253;
    std::string::basic_string[abi:ne180100]<0>(&v273, v108);
    if (v272 < 0)
      operator delete(v271[0]);
    if (v290.i64[0] == v290.i64[1])
    {
LABEL_151:
      v114 = *(Database **)(v12 + 8);
      std::string::basic_string[abi:ne180100]<0>(v271, "name");
      v115 = Database::feat_val(v114, (__int128 *)v271, (int)*((float *)__p + v247));
      MEMORY[0x1DF0ECA80](&v273, v115);
      if (v272 < 0)
        operator delete(v271[0]);
      if (v290.i64[0] == v290.i64[1])
        goto LABEL_161;
      if (v275 < 0)
      {
        if (v274 != 4)
          goto LABEL_161;
        v116 = v273;
        if (*(_DWORD *)v273 == 829188467)
        {
LABEL_183:
          v134 = *(_DWORD *)(v290.i64[1] - 4);
          for (i = *(_DWORD *)(v12 + 88); ; i = __x)
          {
            v136 = i + v134;
            __x = i + v134;
            if (i + v134 >= v88)
              break;
            v137 = (char *)v290.i64[1];
            if (v290.i64[1] >= *(_QWORD *)&v291[0])
            {
              v139 = (char *)v290.i64[0];
              v140 = (v290.i64[1] - v290.i64[0]) >> 2;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v142 = *(_QWORD *)&v291[0] - v290.i64[0];
              if ((*(_QWORD *)&v291[0] - v290.i64[0]) >> 1 > v141)
                v141 = v142 >> 1;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
                v143 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v291, v143);
                v137 = (char *)v290.i64[1];
                v139 = (char *)v290.i64[0];
                v136 = __x;
              }
              else
              {
                v144 = 0;
              }
              v145 = (std::vector<int>::value_type *)&v144[4 * v140];
              *v145 = v136;
              v138 = v145 + 1;
              while (v137 != v139)
              {
                v146 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *--v145 = v146;
              }
              v290.i64[0] = (uint64_t)v145;
              v290.i64[1] = (uint64_t)v138;
              *(_QWORD *)&v291[0] = &v144[4 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_DWORD *)v290.i64[1] = v136;
              v138 = v137 + 4;
            }
            v290.i64[1] = (uint64_t)v138;
            LOBYTE(v271[0]) = 0;
            std::vector<BOOL>::push_back((uint64_t)v291 + 8, v271);
            v134 = *(_DWORD *)(v12 + 88);
          }
          goto LABEL_161;
        }
      }
      else
      {
        if (v275 != 4)
          goto LABEL_161;
        if ((_DWORD)v273 == 829188467)
          goto LABEL_183;
        v116 = &v273;
      }
      if (*v116 != 845965683)
      {
LABEL_161:
        if (*(_DWORD *)(v12 + 4) >= 3u)
        {
          v117 = *(unsigned int *)(v12 + 108);
          if ((int)v117 >= 1)
          {
            v118 = v290.i64[0];
            v119 = (v290.i64[1] - v290.i64[0]) >> 2;
            if (v119 >= v117 && v119 - v117 > v117)
            {
              v120 = v290.i64[0] + 4 * v117;
              LODWORD(v121) = *(_DWORD *)(v12 + 108);
              do
              {
                v122 = (2 * v121) | 1;
                v123 = 0;
                if ((v121 & 0x80000000) == 0)
                {
                  v124 = (int *)(v120 - 4 * (int)v121);
                  v125 = v122;
                  do
                  {
                    v126 = *v124++;
                    v123 += v126;
                    --v125;
                  }
                  while (v125);
                }
                *(_DWORD *)(v118 + 4 * v117++) = v123 / v122;
                v121 = *(int *)(v12 + 108);
                v120 += 4;
              }
              while (v119 - v121 > v117);
            }
          }
        }
        v127 = (_DWORD *)v290.i64[0];
        if (v290.i64[1] != v290.i64[0])
        {
          v128 = *(_DWORD *)(v12 + 84);
          v129 = v128 * v242;
          v130 = v248 - v128 * v242;
          v131 = (v290.i64[1] - v290.i64[0]) >> 2;
          if (v130 < 1)
          {
            if (v248 != v129)
            {
              if (v131 <= 1)
                v133 = 1;
              else
                v133 = (v290.i64[1] - v290.i64[0]) >> 2;
              do
              {
                *v127++ -= v130;
                --v133;
              }
              while (v133);
            }
          }
          else
          {
            v132 = 0;
            if (v131 <= 1)
              v131 = 1;
            while (*(_DWORD *)(v290.i64[0] + 4 * v132) < v130)
            {
              if (v131 == ++v132)
                goto LABEL_207;
            }
            if ((_DWORD)v132)
            {
              v147 = (const void *)(v290.i64[0] + 4 * v132);
              v148 = v290.i64[1] - (_QWORD)v147;
              if ((const void *)v290.i64[1] != v147)
                memmove((void *)v290.i64[0], v147, v290.i64[1] - (_QWORD)v147);
              v290.i64[1] = (uint64_t)v127 + v148;
            }
            std::vector<BOOL>::erase((uint64_t)v271, (uint64_t *)v291 + 1, *((uint64_t *)&v291[0] + 1), 0, (unint64_t *)(*((_QWORD *)&v291[0] + 1) + 8 * (v132 >> 6)), v132 & 0x3F);
          }
LABEL_207:
          v149 = v254 - v46 + 10 * v128;
          v150 = v248;
          if (v149 >= 1)
          {
            v151 = 0;
            v152 = (v290.i64[1] - v290.i64[0]) >> 2;
            while (*(_DWORD *)(v290.i64[0] + 4 * v151) < v149)
            {
              if (v152 == ++v151)
              {
                v151 = (v290.i64[1] - v290.i64[0]) >> 2;
                break;
              }
            }
            if (v152 > (int)v151)
            {
              if (v290.i64[0] + 4 * (int)v151 != v290.i64[1])
                v290.i64[1] = v290.i64[0] + 4 * (int)v151;
              std::vector<BOOL>::erase((uint64_t)v271, (uint64_t *)v291 + 1, *((_QWORD *)&v291[0] + 1) + 8 * ((unint64_t)(int)v151 >> 6), v151 & 0x3F, (unint64_t *)(*((_QWORD *)&v291[0] + 1) + 8 * (*(_QWORD *)&v291[1] >> 6)), v291[1] & 0x3F);
              v150 = v248;
            }
          }
          v181 = v150 == v129;
          v33 = v253;
          if (!v181)
          {
            v153 = (_DWORD *)v290.i64[0];
            if (v290.i64[1] != v290.i64[0])
            {
              v154 = (v290.i64[1] - v290.i64[0]) >> 2;
              if (v154 <= 1)
                v154 = 1;
              do
              {
                *v153++ -= v130;
                --v154;
              }
              while (v154);
            }
          }
        }
        v24 = v290;
        v290 = 0uLL;
        v249 = v291[0];
        memset(v291, 0, sizeof(v291));
        v246 = v291[1];
        v255 = v24;
        if (v275 < 0)
        {
          operator delete(v273);
          v24 = v255;
        }
        if (v277)
        {
          v278 = (char *)v277;
          operator delete(v277);
          v24 = v255;
        }
        if (__p)
        {
          v281 = (char *)__p;
          operator delete(__p);
          v24 = v255;
        }
        if (*((_QWORD *)&v285 + 1))
        {
          operator delete(*((void **)&v285 + 1));
          v24 = v255;
        }
        v59 = v283;
        goto LABEL_230;
      }
      goto LABEL_183;
    }
    if (v275 < 0)
    {
      if (v274 != 4)
        goto LABEL_151;
      v109 = v273;
      if (*(_DWORD *)v273 != 829188467)
      {
LABEL_147:
        if (*v109 != 845965683)
          goto LABEL_151;
      }
    }
    else
    {
      if (v275 != 4)
        goto LABEL_151;
      if ((_DWORD)v273 != 829188467)
      {
        v109 = &v273;
        goto LABEL_147;
      }
    }
    __x = *(_DWORD *)v290.i64[0] - *(_DWORD *)(v12 + 88);
    if (__x >= 1)
    {
      do
      {
        v111.__i_ = (std::__wrap_iter<const int *>::iterator_type)v290.i64[0];
        std::vector<int>::insert((std::vector<int> *)&v290, v111, &__x);
        v270 = 0;
        std::vector<BOOL>::insert((uint64_t)v291 + 8, *((unint64_t *)&v291[0] + 1), 0, &v270, (uint64_t)v271);
        v112 = *(_DWORD *)(v12 + 88);
        v113 = __OFSUB__(__x, v112);
        __x -= v112;
      }
      while (!((__x < 0) ^ v113 | (__x == 0)));
    }
    goto LABEL_151;
  }
LABEL_369:
  if (*(_QWORD *)(a1 + 456) == *(_QWORD *)(a1 + 448) && *(int *)(a1 + 440) >= 1)
    PsolaStream::process_segment(a1, *(_QWORD *)(a1 + 312), a1 + 320);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v225 = *(void **)(a1 + 320);
  if (v225)
  {
    *(_QWORD *)(a1 + 328) = v225;
    operator delete(v225);
  }
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v226 = *(void **)(a1 + 344);
  if (v226)
    operator delete(v226);
  *(_QWORD *)(a1 + 376) = 0;
  v227 = 0uLL;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  v228 = *(void **)(a1 + 384);
  if (v228)
  {
    *(_QWORD *)(a1 + 392) = v228;
    operator delete(v228);
    v227 = 0uLL;
  }
  *(_OWORD *)(a1 + 384) = v227;
  *(_OWORD *)(a1 + 400) = v227;
  v229 = *(void **)(a1 + 416);
  if (v229)
  {
    *(_QWORD *)(a1 + 424) = v229;
    operator delete(v229);
  }
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  v230 = a2[1];
  v259 = *a2;
  v260 = (std::__shared_weak_count *)v230;
  if (v230)
  {
    v231 = (unint64_t *)(v230 + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v259);
  v233 = v260;
  if (v260)
  {
    v234 = (unint64_t *)&v260->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = v262;
  if (v262)
  {
    v237 = (unint64_t *)&v262->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
}

void sub_1DE9A9534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Unit>::__init_with_size[abi:ne180100]<Unit*,Unit*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Unit>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Unit>,Unit*,Unit*,Unit*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE9A96CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Unit>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void PsolaStream::process_segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  float *v22;
  float v23;
  int v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v31;
  float v32;
  float v33;
  char *v34;
  void *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float v45;
  uint64_t v46;
  float v47;
  char *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float v57;
  char *v58;
  float v59;
  void *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  char *v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  float *v88;
  float *v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  float v94;
  uint64_t v95;
  uint64_t v98;
  char *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  uint64_t v105;
  float *v106;
  float *v107;
  char *v108;
  int v109;
  float v110;
  float v111;
  void *v112;
  NSObject *v113;
  const char *v114;
  _BOOL4 v115;
  char *v116;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  float *v122;
  void *v123;
  uint64_t v124;
  int v125;
  float v126;
  float v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  int64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  int v138;
  float v139;
  float v140;
  void *v141;
  char *v142;
  int64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  float *v148;
  char *v149;
  char v150;
  float *v151;
  int64_t v152;
  float v153;
  void *v157;
  uint64_t v158;
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  char *v173;
  uint64_t v174;
  int64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v183;
  char *v184;
  float *v185;
  int64_t v186;
  float v187;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint8_t buf[672];
  void *v205[2];
  void *v206[2];
  __int128 v207;
  void *__p[2];
  void *__src[2];
  __int128 v210;
  void *v211[2];
  void *v212[2];
  __int128 v213;
  void *v214[2];
  char *v215;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16) - v6;
  if (v7 == 184)
    v8 = *(_DWORD *)(v6 + 4) >> 31;
  else
    v8 = 0;
  v9 = *(char **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  v11 = v10 - *(_QWORD *)a3;
  if (v10 != *(_QWORD *)a3)
  {
    v203 = a2;
    v13 = *(_QWORD *)(a3 + 64);
    v12 = *(_QWORD *)(a3 + 72);
    v15 = *(_QWORD *)(a1 + 448);
    v14 = *(_QWORD *)(a1 + 456);
    v215 = 0;
    v213 = 0u;
    *(_OWORD *)v214 = 0u;
    *(_OWORD *)v211 = 0u;
    *(_OWORD *)v212 = 0u;
    *(_OWORD *)__src = 0u;
    v210 = 0u;
    v207 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v205 = 0u;
    *(_OWORD *)v206 = 0u;
    if (v205 != (void **)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v205, v9, v10, v11 >> 2);
    std::vector<BOOL>::operator=(&v206[1], a3 + 24);
    v16 = *(_QWORD *)(v203 + 8);
    if (*(_QWORD *)(v203 + 16) != v16)
    {
      v17 = 0;
      v202 = (v12 - v13) >> 3;
      v201 = v14;
      do
      {
        v18 = v16 + 184 * v17;
        v19 = *(int **)(v18 + 160);
        v20 = *(int **)(v18 + 168);
        while (v19 != v20)
        {
          v21 = *v19;
          if (*v19 == 6)
          {
            *(float *)(a1 + 304) = (float)v19[1];
          }
          else if (v21 == 5)
          {
            *(float *)(a1 + 296) = (float)v19[1];
          }
          else if (v21 == 4)
          {
            *(float *)(a1 + 300) = (float)v19[1];
          }
          v19 += 14;
        }
        v22 = (float *)(*(_QWORD *)(a3 + 64) + 8 * v17);
        if (v202 != 0xD37A6F4DE9BD37A7 * (v7 >> 3))
          v22 = (float *)&PsolaStream::process_segment(AudioSegmentation &,PsolaContext &)::NO_PITCH_MODIFICATION;
        if ((v8 & 1) != 0)
        {
          v23 = *(float *)(*(_QWORD *)(a3 + 104) - 4) + *(float *)(a3 + 92);
          v24 = 0;
        }
        else
        {
          v25 = *(_QWORD *)(a3 + 96) + 8 * v17;
          v24 = *(_DWORD *)v25;
          v23 = *(float *)(v25 + 4);
        }
        v26 = *(float *)(a1 + 300);
        v28 = *v22;
        v27 = v22[1];
        if (v26 != 100.0 || v28 != 100.0 || v27 != 100.0)
        {
          v31 = v26 / 100.0;
          v32 = v31 * (float)(v28 / 100.0);
          v33 = v31 * (float)(v27 / 100.0);
          v34 = (char *)__p[1];
          if (__p[1] >= __src[0])
          {
            v36 = (char *)__p[0];
            v37 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 60)
              goto LABEL_265;
            v39 = (char *)__src[0] - (char *)__p[0];
            if (((char *)__src[0] - (char *)__p[0]) >> 3 > v38)
              v38 = v39 >> 3;
            _CF = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0;
            v41 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v41 = v38;
            if (v41)
            {
              v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v41);
              v34 = (char *)__p[1];
              v36 = (char *)__p[0];
            }
            else
            {
              v42 = 0;
            }
            v43 = v41 + 16 * v37;
            *(float *)v43 = v32;
            *(float *)(v43 + 4) = v33;
            *(_DWORD *)(v43 + 8) = v24;
            *(float *)(v43 + 12) = v23;
            v44 = (char *)v43;
            if (v34 != v36)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v34 - 1);
                v44 -= 16;
                v34 -= 16;
              }
              while (v34 != v36);
              v36 = (char *)__p[0];
            }
            v35 = (void *)(v43 + 16);
            __p[0] = v44;
            __p[1] = (void *)(v43 + 16);
            __src[0] = (void *)(v41 + 16 * v42);
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(float *)__p[1] = v32;
            *((float *)v34 + 1) = v33;
            v35 = v34 + 16;
            *((_DWORD *)v34 + 2) = v24;
            *((float *)v34 + 3) = v23;
          }
          __p[1] = v35;
        }
        if (v14 == v15)
        {
          v45 = *(float *)(a1 + 296);
          if (v45 != 100.0)
          {
            v46 = v213;
            v47 = 100.0 / v45;
            if ((unint64_t)v213 >= *((_QWORD *)&v213 + 1))
            {
              v49 = v212[1];
              v50 = (uint64_t)(v213 - (unint64_t)v212[1]) >> 4;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 60)
                goto LABEL_265;
              v52 = *((_QWORD *)&v213 + 1) - (unint64_t)v212[1];
              if ((uint64_t)(*((_QWORD *)&v213 + 1) - (unint64_t)v212[1]) >> 3 > v51)
                v51 = v52 >> 3;
              _CF = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0;
              v53 = 0xFFFFFFFFFFFFFFFLL;
              if (!_CF)
                v53 = v51;
              if (v53)
              {
                v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v53);
                v46 = v213;
                v49 = v212[1];
              }
              else
              {
                v54 = 0;
              }
              v55 = (float *)(v53 + 16 * v50);
              *v55 = v47;
              v55[1] = v47;
              *((_DWORD *)v55 + 2) = v24;
              v55[3] = v23;
              v56 = v55;
              if ((void *)v46 != v49)
              {
                do
                {
                  *((_OWORD *)v56 - 1) = *(_OWORD *)(v46 - 16);
                  v56 -= 4;
                  v46 -= 16;
                }
                while ((void *)v46 != v49);
                v49 = v212[1];
              }
              v48 = (char *)(v55 + 4);
              v212[1] = v56;
              *(_QWORD *)&v213 = v55 + 4;
              *((_QWORD *)&v213 + 1) = v53 + 16 * v54;
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(float *)v213 = v47;
              *(float *)(v46 + 4) = v47;
              v48 = (char *)(v46 + 16);
              *(_DWORD *)(v46 + 8) = v24;
              *(float *)(v46 + 12) = v23;
            }
            *(_QWORD *)&v213 = v48;
          }
        }
        v57 = *(float *)(a1 + 304);
        if (v57 != 80.0)
        {
          v58 = (char *)v214[1];
          v59 = v57 / 80.0;
          if (v214[1] >= v215)
          {
            v61 = (char *)v214[0];
            v62 = ((char *)v214[1] - (char *)v214[0]) >> 4;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 60)
LABEL_265:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v64 = v215 - (char *)v214[0];
            if ((v215 - (char *)v214[0]) >> 3 > v63)
              v63 = v64 >> 3;
            _CF = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
            v65 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v65 = v63;
            if (v65)
            {
              v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v65);
              v58 = (char *)v214[1];
              v61 = (char *)v214[0];
            }
            else
            {
              v66 = 0;
            }
            v67 = v65 + 16 * v62;
            *(float *)v67 = v59;
            *(float *)(v67 + 4) = v59;
            *(_DWORD *)(v67 + 8) = v24;
            *(float *)(v67 + 12) = v23;
            v68 = (char *)v67;
            if (v58 != v61)
            {
              do
              {
                *((_OWORD *)v68 - 1) = *((_OWORD *)v58 - 1);
                v68 -= 16;
                v58 -= 16;
              }
              while (v58 != v61);
              v61 = (char *)v214[0];
            }
            v60 = (void *)(v67 + 16);
            v214[0] = v68;
            v214[1] = (void *)(v67 + 16);
            v215 = (char *)(v65 + 16 * v66);
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(float *)v214[1] = v59;
            *((float *)v58 + 1) = v59;
            v60 = v58 + 16;
            *((_DWORD *)v58 + 2) = v24;
            *((float *)v58 + 3) = v23;
          }
          v214[1] = v60;
        }
        if (v14 != v15)
        {
          v69 = v8;
          v70 = v15;
          v71 = v17 + *(int *)(a1 + 444);
          v72 = v71 - 1;
          if (!v71)
            v72 = 0;
          v73 = *(_QWORD *)(a1 + 448);
          if (v71 + 2 == 0x86BCA1AF286BCA1BLL * ((*(_QWORD *)(a1 + 456) - v73) >> 5))
            v74 = v17 + *(int *)(a1 + 444);
          else
            v74 = v71 + 1;
          v75 = expf(*(float *)(v73 + 608 * v72 + 472));
          v76 = v73 + 608 * v71;
          v77 = (float)(v75 + expf(*(float *)(v76 + 456))) * 0.5;
          v78 = expf(*(float *)(v76 + 472));
          v79 = (float)(v78 + expf(*(float *)(v73 + 608 * v74 + 456))) * 0.5;
          v80 = v210;
          if ((unint64_t)v210 >= *((_QWORD *)&v210 + 1))
          {
            v82 = __src[1];
            v83 = (uint64_t)(v210 - (unint64_t)__src[1]) >> 4;
            v84 = v83 + 1;
            if ((unint64_t)(v83 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v85 = *((_QWORD *)&v210 + 1) - (unint64_t)__src[1];
            if ((uint64_t)(*((_QWORD *)&v210 + 1) - (unint64_t)__src[1]) >> 3 > v84)
              v84 = v85 >> 3;
            _CF = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0;
            v86 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v86 = v84;
            if (v86)
            {
              v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v86);
              v80 = v210;
              v82 = __src[1];
            }
            else
            {
              v87 = 0;
            }
            v88 = (float *)(v86 + 16 * v83);
            *v88 = v77;
            v88[1] = v79;
            *((_DWORD *)v88 + 2) = v24;
            v88[3] = v23;
            v89 = v88;
            if ((void *)v80 != v82)
            {
              do
              {
                *((_OWORD *)v89 - 1) = *(_OWORD *)(v80 - 16);
                v89 -= 4;
                v80 -= 16;
              }
              while ((void *)v80 != v82);
              v82 = __src[1];
            }
            v81 = (char *)(v88 + 4);
            __src[1] = v89;
            *(_QWORD *)&v210 = v88 + 4;
            *((_QWORD *)&v210 + 1) = v86 + 16 * v87;
            if (v82)
              operator delete(v82);
          }
          else
          {
            *(float *)v210 = v77;
            *(float *)(v80 + 4) = v79;
            v81 = (char *)(v80 + 16);
            *(_DWORD *)(v80 + 8) = v24;
            *(float *)(v80 + 12) = v23;
          }
          *(_QWORD *)&v210 = v81;
          v90 = *(_QWORD *)(v203 + 8);
          if ((_DWORD)v69)
            v91 = *(float *)(v90 + 184 * v17 + 152)
                + (float)((float)(*(float *)(a3 + 88) + *(float *)(a3 + 92)) * 1000.0);
          else
            v91 = *(float *)(v90 + 184 * v17 + 152);
          v92 = *(_QWORD *)(a1 + 448);
          v93 = *(float *)(v92 + 608 * v71 + 480);
          v94 = expf(v93) / v91;
          if ((v69 & 1) != 0)
          {
            v14 = v201;
            v15 = v70;
          }
          else
          {
            v95 = *(int *)(a1 + 444);
            if (v93 == 0.0
              || v95 - 0x2C8590B21642C859 * ((*(_QWORD *)(v203 + 16) - v90) >> 3) == 0x86BCA1AF286BCA1BLL
                                                                                     * ((*(_QWORD *)(a1 + 456) - v92) >> 5)
              || v95 == 0)
            {
              v94 = 1.0;
            }
            v14 = v201;
            v15 = v70;
          }
          v98 = v213;
          v8 = v69;
          if ((unint64_t)v213 >= *((_QWORD *)&v213 + 1))
          {
            v100 = v212[1];
            v101 = (uint64_t)(v213 - (unint64_t)v212[1]) >> 4;
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v103 = *((_QWORD *)&v213 + 1) - (unint64_t)v212[1];
            if ((uint64_t)(*((_QWORD *)&v213 + 1) - (unint64_t)v212[1]) >> 3 > v102)
              v102 = v103 >> 3;
            _CF = (unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0;
            v104 = 0xFFFFFFFFFFFFFFFLL;
            if (!_CF)
              v104 = v102;
            if (v104)
            {
              v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v104);
              v98 = v213;
              v100 = v212[1];
            }
            else
            {
              v105 = 0;
            }
            v106 = (float *)(v104 + 16 * v101);
            *v106 = v94;
            v106[1] = v94;
            *((_DWORD *)v106 + 2) = v24;
            v106[3] = v23;
            v107 = v106;
            if ((void *)v98 != v100)
            {
              do
              {
                *((_OWORD *)v107 - 1) = *(_OWORD *)(v98 - 16);
                v107 -= 4;
                v98 -= 16;
              }
              while ((void *)v98 != v100);
              v100 = v212[1];
            }
            v99 = (char *)(v106 + 4);
            v212[1] = v107;
            *(_QWORD *)&v213 = v106 + 4;
            *((_QWORD *)&v213 + 1) = v104 + 16 * v105;
            if (v100)
              operator delete(v100);
          }
          else
          {
            *(float *)v213 = v94;
            *(float *)(v98 + 4) = v94;
            v99 = (char *)(v98 + 16);
            *(_DWORD *)(v98 + 8) = v24;
            *(float *)(v98 + 12) = v23;
          }
          *(_QWORD *)&v213 = v99;
        }
        ++v17;
        v16 = *(_QWORD *)(v203 + 8);
      }
      while (v17 < 0xD37A6F4DE9BD37A7 * ((*(_QWORD *)(v203 + 16) - v16) >> 3));
    }
    if (__p[1] == __p[0])
    {
      if ((void *)v210 == __src[1] && (void *)v213 == v212[1])
      {
        v115 = v214[1] != v214[0];
        if ((v8 & 1) != 0)
          goto LABEL_203;
      }
      else
      {
        v115 = 1;
        if ((v8 & 1) != 0)
          goto LABEL_203;
      }
    }
    else
    {
      if ((v8 & 1) != 0)
        goto LABEL_204;
      *(_DWORD *)buf = *(_DWORD *)__p[0];
      *(_DWORD *)&buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)__p, (char *)__p[0], buf);
      v108 = (char *)__p[1];
      v109 = *((_DWORD *)__p[1] - 3);
      v110 = *(float *)(*(_QWORD *)(a3 + 104) - 4);
      v111 = v110 + *(float *)(a3 + 92);
      if (__p[1] >= __src[0])
      {
        v116 = (char *)__p[0];
        v117 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v119 = (char *)__src[0] - (char *)__p[0];
        if (((char *)__src[0] - (char *)__p[0]) >> 3 > v118)
          v118 = v119 >> 3;
        _CF = (unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0;
        v120 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF)
          v120 = v118;
        if (v120)
        {
          v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v120);
          v108 = (char *)__p[1];
          v116 = (char *)__p[0];
        }
        else
        {
          v121 = 0;
        }
        v122 = (float *)(v120 + 16 * v117);
        *(_DWORD *)v122 = v109;
        *((_DWORD *)v122 + 1) = v109;
        v123 = (void *)(v120 + 16 * v121);
        v122[2] = v110;
        v122[3] = v111;
        v112 = v122 + 4;
        if (v108 != v116)
        {
          do
          {
            *((_OWORD *)v122 - 1) = *((_OWORD *)v108 - 1);
            v122 -= 4;
            v108 -= 16;
          }
          while (v108 != v116);
          v116 = (char *)__p[0];
        }
        __p[0] = v122;
        __p[1] = v112;
        __src[0] = v123;
        if (v116)
          operator delete(v116);
      }
      else
      {
        *(_DWORD *)__p[1] = v109;
        *((_DWORD *)v108 + 1) = v109;
        v112 = v108 + 16;
        *((float *)v108 + 2) = v110;
        *((float *)v108 + 3) = v111;
      }
      __p[1] = v112;
      v115 = 1;
    }
    if ((void *)v210 != __src[1])
    {
      *(_DWORD *)buf = *(_DWORD *)__src[1];
      *(_DWORD *)&buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)&__src[1], (char *)__src[1], buf);
      v124 = v210;
      v125 = *(_DWORD *)(v210 - 12);
      v126 = *(float *)(*(_QWORD *)(a3 + 104) - 4);
      v127 = v126 + *(float *)(a3 + 92);
      if ((unint64_t)v210 >= *((_QWORD *)&v210 + 1))
      {
        v128 = __src[1];
        v129 = (uint64_t)(v210 - (unint64_t)__src[1]) >> 4;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v131 = *((_QWORD *)&v210 + 1) - (unint64_t)__src[1];
        if ((uint64_t)(*((_QWORD *)&v210 + 1) - (unint64_t)__src[1]) >> 3 > v130)
          v130 = v131 >> 3;
        _CF = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0;
        v132 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF)
          v132 = v130;
        if (v132)
        {
          v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v132);
          v124 = v210;
          v128 = __src[1];
        }
        else
        {
          v133 = 0;
        }
        v134 = (char *)(v132 + 16 * v129);
        *(_DWORD *)v134 = v125;
        *((_DWORD *)v134 + 1) = v125;
        v135 = v132 + 16 * v133;
        *((float *)v134 + 2) = v126;
        *((float *)v134 + 3) = v127;
        v136 = v134 + 16;
        if ((void *)v124 != v128)
        {
          do
          {
            *((_OWORD *)v134 - 1) = *(_OWORD *)(v124 - 16);
            v134 -= 16;
            v124 -= 16;
          }
          while ((void *)v124 != v128);
          v128 = __src[1];
        }
        __src[1] = v134;
        *(_QWORD *)&v210 = v136;
        *((_QWORD *)&v210 + 1) = v135;
        if (v128)
          operator delete(v128);
        *(_QWORD *)&v210 = v136;
        if ((v8 & 1) != 0)
          goto LABEL_203;
      }
      else
      {
        *(_DWORD *)v210 = v125;
        *(_DWORD *)(v124 + 4) = v125;
        *(float *)(v124 + 8) = v126;
        *(float *)(v124 + 12) = v127;
        *(_QWORD *)&v210 = v124 + 16;
      }
    }
    if (v214[1] != v214[0])
    {
      *(_DWORD *)buf = *(_DWORD *)v214[0];
      *(_DWORD *)&buf[4] = *(_DWORD *)buf;
      *(_DWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[12] = *(_DWORD *)(a3 + 88);
      std::vector<PsolaModificationSpec>::insert((uint64_t)v214, (char *)v214[0], buf);
      v137 = (char *)v214[1];
      v138 = *((_DWORD *)v214[1] - 3);
      v139 = *(float *)(*(_QWORD *)(a3 + 104) - 4);
      v140 = v139 + *(float *)(a3 + 92);
      if (v214[1] >= v215)
      {
        v142 = (char *)v214[0];
        v143 = ((char *)v214[1] - (char *)v214[0]) >> 4;
        v144 = v143 + 1;
        if ((unint64_t)(v143 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v145 = v215 - (char *)v214[0];
        if ((v215 - (char *)v214[0]) >> 3 > v144)
          v144 = v145 >> 3;
        _CF = (unint64_t)v145 >= 0x7FFFFFFFFFFFFFF0;
        v146 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF)
          v146 = v144;
        if (v146)
        {
          v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v146);
          v137 = (char *)v214[1];
          v142 = (char *)v214[0];
        }
        else
        {
          v147 = 0;
        }
        v148 = (float *)(v146 + 16 * v143);
        *(_DWORD *)v148 = v138;
        *((_DWORD *)v148 + 1) = v138;
        v149 = (char *)(v146 + 16 * v147);
        v148[2] = v139;
        v148[3] = v140;
        v141 = v148 + 4;
        if (v137 != v142)
        {
          do
          {
            *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
            v148 -= 4;
            v137 -= 16;
          }
          while (v137 != v142);
          v142 = (char *)v214[0];
        }
        v214[0] = v148;
        v214[1] = v141;
        v215 = v149;
        if (v142)
          operator delete(v142);
      }
      else
      {
        *(_DWORD *)v214[1] = v138;
        *((_DWORD *)v137 + 1) = v138;
        v141 = v137 + 16;
        *((float *)v137 + 2) = v139;
        *((float *)v137 + 3) = v140;
      }
      v214[1] = v141;
    }
    if (v14 == v15)
      v150 = v8;
    else
      v150 = 1;
    if ((v150 & 1) == 0 && (void *)v213 != v212[1])
    {
      *(float *)(v213 - 4) = *(float *)(a3 + 92) + *(float *)(v213 - 4);
      if (!v115)
        goto LABEL_250;
      goto LABEL_204;
    }
LABEL_203:
    if (!v115)
    {
LABEL_250:
      if (v214[0])
      {
        v214[1] = v214[0];
        operator delete(v214[0]);
      }
      if (v212[1])
      {
        *(void **)&v213 = v212[1];
        operator delete(v212[1]);
      }
      if (v211[0])
      {
        v211[1] = v211[0];
        operator delete(v211[0]);
      }
      if (__src[1])
      {
        *(void **)&v210 = __src[1];
        operator delete(__src[1]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v206[1])
        operator delete(v206[1]);
      if (v205[0])
      {
        v205[1] = v205[0];
        operator delete(v205[0]);
      }
      return;
    }
LABEL_204:
    v151 = (float *)__p[1];
    v152 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] == __p[0])
    {
      v153 = *(float *)(*(_QWORD *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if (__p[1] >= __src[0])
      {
        v158 = v152 >> 4;
        v159 = (char *)__src[0] - (char *)__p[0];
        if (((char *)__src[0] - (char *)__p[0]) >> 3 <= (unint64_t)((v152 >> 4) + 1))
          v160 = v158 + 1;
        else
          v160 = v159 >> 3;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF0)
          v161 = 0xFFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v161);
        v163 = &v162[16 * v158];
        v165 = &v162[16 * v164];
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)v163 = _D0;
        *((_DWORD *)v163 + 2) = 0;
        *((float *)v163 + 3) = v153;
        v157 = v163 + 16;
        v167 = (char *)__p[1];
        v168 = (char *)__p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            *((_OWORD *)v163 - 1) = *((_OWORD *)v167 - 1);
            v163 -= 16;
            v167 -= 16;
          }
          while (v167 != v168);
          v167 = (char *)__p[0];
        }
        __p[0] = v163;
        __p[1] = v157;
        __src[0] = v165;
        if (v167)
          operator delete(v167);
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)__p[1] = _D0;
        v151[2] = 0.0;
        v151[3] = v153;
        v157 = v151 + 4;
      }
      __p[1] = v157;
    }
    v169 = v213;
    v170 = v213 - (unint64_t)v212[1];
    if ((void *)v213 == v212[1])
    {
      v171 = *(float *)(*(_QWORD *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if ((unint64_t)v213 >= *((_QWORD *)&v213 + 1))
      {
        v174 = v170 >> 4;
        v175 = *((_QWORD *)&v213 + 1) - (unint64_t)v212[1];
        if ((uint64_t)(*((_QWORD *)&v213 + 1) - (unint64_t)v212[1]) >> 3 <= (unint64_t)((v170 >> 4) + 1))
          v176 = v174 + 1;
        else
          v176 = v175 >> 3;
        if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0)
          v177 = 0xFFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v177);
        v179 = &v178[16 * v174];
        v181 = &v178[16 * v180];
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)v179 = _D0;
        *((_DWORD *)v179 + 2) = 0;
        *((float *)v179 + 3) = v171;
        v173 = v179 + 16;
        v183 = (char *)v213;
        v184 = (char *)v212[1];
        if ((void *)v213 != v212[1])
        {
          do
          {
            *((_OWORD *)v179 - 1) = *((_OWORD *)v183 - 1);
            v179 -= 16;
            v183 -= 16;
          }
          while (v183 != v184);
          v183 = (char *)v212[1];
        }
        v212[1] = v179;
        *(_QWORD *)&v213 = v173;
        *((_QWORD *)&v213 + 1) = v181;
        if (v183)
          operator delete(v183);
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)v213 = _D0;
        *(_DWORD *)(v169 + 8) = 0;
        *(float *)(v169 + 12) = v171;
        v173 = (char *)(v169 + 16);
      }
      *(_QWORD *)&v213 = v173;
    }
    v185 = (float *)v214[1];
    v186 = (char *)v214[1] - (char *)v214[0];
    if (v214[1] == v214[0])
    {
      v187 = *(float *)(*(_QWORD *)(a3 + 104) - 4) + *(float *)(a3 + 92);
      if (v214[1] >= v215)
      {
        v190 = v186 >> 4;
        v191 = v215 - (char *)v214[0];
        if ((v215 - (char *)v214[0]) >> 3 <= (unint64_t)((v186 >> 4) + 1))
          v192 = v190 + 1;
        else
          v192 = v191 >> 3;
        if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF0)
          v193 = 0xFFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v193);
        v195 = &v194[16 * v190];
        v197 = &v194[16 * v196];
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)v195 = _D0;
        *((_DWORD *)v195 + 2) = 0;
        *((float *)v195 + 3) = v187;
        v189 = v195 + 16;
        v199 = (char *)v214[1];
        v200 = (char *)v214[0];
        if (v214[1] != v214[0])
        {
          do
          {
            *((_OWORD *)v195 - 1) = *((_OWORD *)v199 - 1);
            v195 -= 16;
            v199 -= 16;
          }
          while (v199 != v200);
          v199 = (char *)v214[0];
        }
        v214[0] = v195;
        v214[1] = v189;
        v215 = v197;
        if (v199)
          operator delete(v199);
      }
      else
      {
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)v214[1] = _D0;
        v185[2] = 0.0;
        v185[3] = v187;
        v189 = v185 + 4;
      }
      v214[1] = v189;
    }
    Psola::Psola((Psola *)buf, *(_DWORD *)(a1 + 272));
    Psola::modify((uint64_t)buf, *(_DWORD *)(a1 + 272), (float **)(v203 + 56), (int **)v205);
    Psola::~Psola((void **)buf);
    goto LABEL_250;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v113 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v113, OS_LOG_TYPE_DEBUG, "Pitchmarks do not exist for the segment, PSOLA modification is not performed.", buf, 2u);
  }
  Diagnostics::log(7, "Pitchmarks do not exist for the segment, PSOLA modification is not performed.", v114);
}

void sub_1DE9AA668(_Unwind_Exception *a1)
{
  PsolaInputData::~PsolaInputData((PsolaInputData *)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t populate_unit_pitch_modification(uint64_t result, uint64_t a2, int32x2_t **a3)
{
  const float *v3;
  const float *v4;
  float32x2_t *v7;
  unint64_t v8;
  float32x2_t v9;
  float32x2_t v14;
  int32x2_t v15;
  uint64_t v16;
  float32x2_t *v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v21;
  double v22;
  float32x2_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int32x2_t v28;
  unint64_t v29;
  int32x2_t *v30;
  int32x2_t *v31;
  int32x2_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int32x2_t *v38;
  int32x2_t v39;
  NSObject *v40;
  BOOL v41;
  const char *v42;
  float64x2_t v43;
  float64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint8_t buf[4];
  float64_t v49;
  __int16 v50;
  float64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  a3[1] = *a3;
  v3 = *(const float **)(a2 + 8);
  v4 = *(const float **)(a2 + 16);
  if (v4 != v3)
  {
    v7 = (float32x2_t *)result;
    v8 = 0;
    v9 = (float32x2_t)vdup_n_s32(0x3E99999Au);
    __asm { FMOV            V10.2S, #1.0 }
    v14 = (float32x2_t)vdup_n_s32(0x42C80000u);
    v47 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    v15.i32[1] = 0;
    do
    {
      *(float *)v15.i32 = *(v4 - 1) - *(float *)a2;
      v16 = 2 * v8;
      v18 = vld1_dup_f32(v3);
      v17 = (float32x2_t *)&v3[v16];
      v19 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*v17, v18));
      _NF = *(float *)v15.i32 < 0.3;
      v21 = vsub_f32(_D10, vdiv_f32(v19, v9));
      v22 = COERCE_DOUBLE(vbic_s8((int8x8_t)v21, (int8x8_t)vcltz_f32(v21)));
      v23 = vadd_f32(vdiv_f32(vsub_f32(v19, (float32x2_t)vdup_lane_s32(v15, 0)), v9), _D10);
      v24 = COERCE_DOUBLE(vbic_s8((int8x8_t)v23, (int8x8_t)vcltz_f32(v23)));
      v25 = COERCE_DOUBLE(vsub_f32(vsub_f32(_D10, *(float32x2_t *)&v22), *(float32x2_t *)&v24));
      v26 = COERCE_DOUBLE(vdiv_f32(v19, (float32x2_t)vdup_lane_s32(v15, 0)));
      v27 = COERCE_DOUBLE(vsub_f32(_D10, *(float32x2_t *)&v26));
      if (_NF)
        v25 = 0.0;
      if (!_NF)
      {
        v27 = v22;
        v26 = v24;
      }
      v28 = (int32x2_t)vmla_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v26, *v7, 1), *(float32x2_t *)&v27, COERCE_FLOAT(*v7)), v14, *(float32x2_t *)&v25);
      v30 = a3[1];
      v29 = (unint64_t)a3[2];
      if ((unint64_t)v30 >= v29)
      {
        v32 = *a3;
        v33 = v30 - *a3;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v36);
          v32 = *a3;
          v30 = a3[1];
        }
        else
        {
          v37 = 0;
        }
        v38 = (int32x2_t *)(v36 + 8 * v33);
        *v38 = vrev64_s32(v28);
        v31 = v38 + 1;
        if (v30 != v32)
        {
          do
          {
            v39 = v30[-1];
            --v30;
            v38[-1] = v39;
            --v38;
          }
          while (v30 != v32);
          v32 = *a3;
        }
        *a3 = v38;
        a3[1] = v31;
        a3[2] = (int32x2_t *)(v36 + 8 * v37);
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v30 = vrev64_s32(v28);
        v31 = v30 + 1;
      }
      a3[1] = v31;
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
      v41 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO);
      v43 = vcvtq_f64_f32((float32x2_t)v28);
      if (v41)
      {
        *(_DWORD *)buf = 134218240;
        v46 = vdivq_f64(v43, v47);
        v49 = v46.f64[1];
        v44 = v46.f64[1];
        v50 = 2048;
        v51 = v46.f64[0];
        _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_INFO, "PSOLA f0 modification contour: %.3f %.3f", buf, 0x16u);
        v45.f64[0] = v46.f64[0];
      }
      else
      {
        v45 = vdivq_f64(v43, v47);
        v44 = v45.f64[1];
      }
      result = Diagnostics::log(6, "PSOLA f0 modification contour: %.3f %.3f", v42, *(_QWORD *)&v44, *(_QWORD *)&v45.f64[0]);
      ++v8;
      v3 = *(const float **)(a2 + 8);
      v4 = *(const float **)(a2 + 16);
    }
    while (v8 < ((char *)v4 - (char *)v3) >> 3);
  }
  return result;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void PsolaContext::~PsolaContext(PsolaContext *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
    operator delete(v4);
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void std::vector<PsolaModificationSpec>::insert(uint64_t a1, char *__src, _OWORD *a3)
{
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;

  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v13 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = __src - v12;
    v15 = (__src - v12) >> 4;
    v16 = v7 - (_QWORD)v12;
    if (v16 >> 3 > v13)
      v13 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v20 = &v19[16 * v15];
    v21 = &v19[16 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v23 = 1;
        else
          v23 = v14 >> 3;
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v23);
        v20 = &v24[16 * (v23 >> 2)];
        v21 = &v24[16 * v25];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v22 = v15 + 2;
        if (v15 >= -1)
          v22 = v15 + 1;
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)v20 = *a3;
    v26 = *(char **)a1;
    v27 = v20;
    if (*(char **)a1 != __src)
    {
      v28 = __src;
      v29 = v20;
      do
      {
        v27 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v29 -= 16;
      }
      while (v28 != v26);
    }
    v30 = *(_BYTE **)(a1 + 8);
    v31 = v30 - __src;
    if (v30 != __src)
      memmove(v20 + 16, __src, v30 - __src);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v20[v31 + 16];
    *(_QWORD *)(a1 + 16) = v21;
    if (v32)
      operator delete(v32);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v8 = __src + 16;
    v9 = v6 - 16;
    v10 = *(_OWORD **)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_OWORD *)v9;
      v9 += 16;
      *v10++ = v11;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8);
    *(_OWORD *)__src = *a3;
  }
}

void sub_1DE9AACB4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void Psola::~Psola(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (*((char *)this + 671) < 0)
    operator delete(this[81]);
  if (*((char *)this + 647) < 0)
    operator delete(this[78]);
  if (*((char *)this + 623) < 0)
    operator delete(this[75]);
  if (*((char *)this + 599) < 0)
    operator delete(this[72]);
  if (*((char *)this + 575) < 0)
    operator delete(this[69]);
  v2 = this[66];
  if (v2)
  {
    this[67] = v2;
    operator delete(v2);
  }
  v3 = this[63];
  if (v3)
  {
    this[64] = v3;
    operator delete(v3);
  }
  v4 = this[60];
  if (v4)
  {
    this[61] = v4;
    operator delete(v4);
  }
  v5 = this[57];
  if (v5)
  {
    this[58] = v5;
    operator delete(v5);
  }
  v6 = this[54];
  if (v6)
  {
    this[55] = v6;
    operator delete(v6);
  }
  v7 = this[51];
  if (v7)
  {
    this[52] = v7;
    operator delete(v7);
  }
  v8 = this[48];
  if (v8)
  {
    this[49] = v8;
    operator delete(v8);
  }
  v9 = this[45];
  if (v9)
  {
    this[46] = v9;
    operator delete(v9);
  }
  v10 = this[42];
  if (v10)
  {
    this[43] = v10;
    operator delete(v10);
  }
  v11 = this[39];
  if (v11)
  {
    this[40] = v11;
    operator delete(v11);
  }
  v12 = this[36];
  if (v12)
  {
    this[37] = v12;
    operator delete(v12);
  }
  v13 = this[33];
  if (v13)
  {
    this[34] = v13;
    operator delete(v13);
  }
  v14 = this[30];
  if (v14)
  {
    this[31] = v14;
    operator delete(v14);
  }
  v15 = this[27];
  if (v15)
  {
    this[28] = v15;
    operator delete(v15);
  }
  v16 = this[24];
  if (v16)
  {
    this[25] = v16;
    operator delete(v16);
  }
  v17 = this[21];
  if (v17)
  {
    this[22] = v17;
    operator delete(v17);
  }
  v18 = this[18];
  if (v18)
  {
    this[19] = v18;
    operator delete(v18);
  }
  v19 = this[15];
  if (v19)
  {
    this[16] = v19;
    operator delete(v19);
  }
  v20 = this[12];
  if (v20)
  {
    this[13] = v20;
    operator delete(v20);
  }
  v21 = this[9];
  if (v21)
  {
    this[10] = v21;
    operator delete(v21);
  }
  v22 = this[5];
  if (v22)
    operator delete(v22);
  v23 = this[2];
  if (v23)
  {
    this[3] = v23;
    operator delete(v23);
  }
}

void PsolaInputData::~PsolaInputData(PsolaInputData *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
    operator delete(v7);
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

char *std::vector<Unit>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Unit>,Unit*,Unit*,Unit*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      Unit::Unit((Unit *)(a4 + v7), (const Unit *)(a2 + v7));
      v7 += 184;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<UnitFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        UnitFeature::~UnitFeature((UnitFeature *)(v4 - 608));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<PitchmarkExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PitchmarkExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PitchmarkExtractor>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
}

void std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<Prompt>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<Prompt>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Prompt *,Prompt *,Prompt *>(a2, a3, (uint64_t)v9);
  for (i = *(_QWORD *)(a1 + 8); i != v14; std::allocator<Prompt>::destroy[abi:ne180100](i))
    i -= 72;
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1DE9AB2D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE9AB2D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Prompt>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::allocator<Prompt>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<Prompt>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Prompt>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<UnitFeature>,UnitFeature*,UnitFeature*,UnitFeature*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      UnitFeature::UnitFeature((UnitFeature *)(a3 + v6), (const UnitFeature *)(a1 + v6));
      v6 += 608;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<UnitFeature>>(unint64_t a1)
{
  if (a1 >= 0x6BCA1AF286BCA2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(608 * a1);
}

void UnitFeature::UnitFeature(UnitFeature *this, const UnitFeature *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  PhoneFeature::PhoneFeature((std::string *)this, a2);
  v4 = *((_DWORD *)a2 + 53);
  *(_QWORD *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 212) = v4;
  *(_QWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v5 + 216), *((__int128 **)a2 + 27), *((__int128 **)a2 + 28), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 3));
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 10, *((const std::string::value_type **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 15);
    *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
    *((_OWORD *)this + 15) = v6;
  }
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 11, *((const std::string::value_type **)a2 + 33), *((_QWORD *)a2 + 34));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 264);
    *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
    *(_OWORD *)((char *)this + 264) = v7;
  }
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
    *((_OWORD *)this + 18) = v8;
  }
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 13, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 312);
    *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
    *(_OWORD *)((char *)this + 312) = v9;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 21);
    *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
    *((_OWORD *)this + 21) = v10;
  }
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 45, *((const void **)a2 + 45), *((_QWORD *)a2 + 46), (uint64_t)(*((_QWORD *)a2 + 46) - *((_QWORD *)a2 + 45)) >> 2);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 48, *((const void **)a2 + 48), *((_QWORD *)a2 + 49), (uint64_t)(*((_QWORD *)a2 + 49) - *((_QWORD *)a2 + 48)) >> 2);
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 51, *((const void **)a2 + 51), *((_QWORD *)a2 + 52), (uint64_t)(*((_QWORD *)a2 + 52) - *((_QWORD *)a2 + 51)) >> 2);
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 54, *((const void **)a2 + 54), *((_QWORD *)a2 + 55), (uint64_t)(*((_QWORD *)a2 + 55) - *((_QWORD *)a2 + 54)) >> 2);
  v11 = *(_OWORD *)((char *)a2 + 472);
  *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a2 + 456);
  *(_OWORD *)((char *)this + 472) = v11;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 61) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 61, *((const void **)a2 + 61), *((_QWORD *)a2 + 62), (uint64_t)(*((_QWORD *)a2 + 62) - *((_QWORD *)a2 + 61)) >> 2);
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 64, *((const void **)a2 + 64), *((_QWORD *)a2 + 65), (uint64_t)(*((_QWORD *)a2 + 65) - *((_QWORD *)a2 + 64)) >> 2);
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 67, *((const void **)a2 + 67), *((_QWORD *)a2 + 68), (uint64_t)(*((_QWORD *)a2 + 68) - *((_QWORD *)a2 + 67)) >> 2);
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 70, *((const void **)a2 + 70), *((_QWORD *)a2 + 71), (uint64_t)(*((_QWORD *)a2 + 71) - *((_QWORD *)a2 + 70)) >> 2);
  v12 = *(_OWORD *)((char *)a2 + 584);
  *((_DWORD *)this + 150) = *((_DWORD *)a2 + 150);
  *(_OWORD *)((char *)this + 584) = v12;
}

void sub_1DE9AB730(_Unwind_Exception *a1, void **a2, void **a3, void **a4, uint64_t a5, void **a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 + 335) < 0)
    operator delete(*a2);
  if (*(char *)(v6 + 311) < 0)
    operator delete(*a3);
  if (*(char *)(v6 + 287) < 0)
    operator delete(*a4);
  if (*(char *)(v6 + 263) < 0)
    operator delete(*a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PhoneFeature::~PhoneFeature((void **)v6);
  _Unwind_Resume(a1);
}

void sub_1DE9AB884()
{
  JUMPOUT(0x1DE9AB874);
}

uint64_t UnitFeature::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  v4 = *(_OWORD *)(a2 + 52);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  if (a1 != a2)
    std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)(a1 + 72), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 176);
  v6 = *(_OWORD *)(a2 + 192);
  v8 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 216), *(std::string **)(a2 + 216), *(__int128 **)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 3));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  if (a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 360), *(char **)(a2 + 360), *(_QWORD *)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 384), *(char **)(a2 + 384), *(_QWORD *)(a2 + 392), (uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 408), *(char **)(a2 + 408), *(_QWORD *)(a2 + 416), (uint64_t)(*(_QWORD *)(a2 + 416) - *(_QWORD *)(a2 + 408)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 432), *(char **)(a2 + 432), *(_QWORD *)(a2 + 440), (uint64_t)(*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) >> 2);
    v9 = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 472) = v9;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 488), *(char **)(a2 + 488), *(_QWORD *)(a2 + 496), (uint64_t)(*(_QWORD *)(a2 + 496) - *(_QWORD *)(a2 + 488)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 512), *(char **)(a2 + 512), *(_QWORD *)(a2 + 520), (uint64_t)(*(_QWORD *)(a2 + 520) - *(_QWORD *)(a2 + 512)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 536), *(char **)(a2 + 536), *(_QWORD *)(a2 + 544), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 560), *(char **)(a2 + 560), *(_QWORD *)(a2 + 568), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 2);
  }
  v10 = *(_OWORD *)(a2 + 584);
  *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = v10;
  return a1;
}

void Pronounce_RuleImpl::~Pronounce_RuleImpl(void **this)
{
  char *v2;

  *this = &off_1EA91F348;
  v2 = (char *)(this + 15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  FrontendModule::~FrontendModule(this);
}

{
  char *v2;

  *this = &off_1EA91F348;
  v2 = (char *)(this + 15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

void Pronounce_RuleImpl::generate_tokens(Pronounce_RuleImpl *this)
{
  uint64_t v1;
  char *v2;
  std::__wrap_iter<const char *>::iterator_type i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  std::__wrap_iter<const char *>::iterator_type v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const char **v16;
  int v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  std::__wrap_iter<const char *>::iterator_type v22;
  NSObject *v23;
  const char *v24;
  const char *p_p;
  const char *v26;
  std::__wrap_iter<const char *>::iterator_type v27;
  const void **v28;
  size_t v29;
  char *v30;
  const void *v31;
  const std::string::value_type *p_buf;
  std::string::size_type pregex_high;
  std::string *v34;
  __int128 v35;
  std::__shared_weak_count *begin;
  unint64_t *p_second;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  const std::string::value_type *v81;
  std::__wrap_iter<const char *>::iterator_type v82;
  char v83;
  unint64_t *v84;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::string::size_type size;
  std::string::size_type v89;
  std::string::size_type v90;
  size_t v92;
  std::string *v93;
  const void *v94;
  NSObject *v96;
  const char *v97;
  const char *v98;
  std::__wrap_iter<const char *>::iterator_type v99;
  NSObject *v100;
  int v101;
  std::__wrap_iter<const char *>::iterator_type v102;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> *v103;
  const char *v104;
  int v105;
  std::__wrap_iter<const char *>::iterator_type v106;
  const char *v107;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> *v108;
  std::__wrap_iter<const char *>::iterator_type v109;
  void **v110;
  void **v111;
  unint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  std::regex_constants::match_flag_type v122;
  unint64_t v123;
  void **v124;
  const char *v125;
  std::__wrap_iter<const char *> v126;
  std::__wrap_iter<const char *> v127;
  BOOL v128;
  unint64_t v129;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  unint64_t v131;
  const char *v132;
  std::__wrap_iter<const char *>::iterator_type v133;
  std::__wrap_iter<const char *>::iterator_type v134;
  std::__shared_weak_count *cntrl;
  uint64_t *v136;
  unint64_t v137;
  const char *v138;
  const char *v139;
  unint64_t v140;
  uint64_t (**v141)();
  char *v142;
  unint64_t v143;
  const char *v144;
  int v145;
  int v146;
  int v147;
  _BOOL4 v149;
  std::string::size_type end_high;
  std::regex_constants::match_flag_type *p_flags;
  std::__wrap_iter<const char *>::iterator_type v152;
  char *v153;
  unint64_t *v154;
  std::__shared_weak_count *v155;
  uint64_t (**v156)();
  std::__shared_weak_count *v157;
  unint64_t *v158;
  uint64_t (**v159)();
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  std::__shared_weak_count *pregex;
  unint64_t *p_ct;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  void *exception;
  std::string *v179;
  _QWORD *v180;
  _BOOL4 v181;
  const char *v182;
  uint64_t v183;
  void *v184[2];
  unsigned __int8 v185;
  std::__shared_weak_count *v186;
  std::string v187;
  void *v188[2];
  unsigned __int8 v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v193;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v194;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v195;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v196;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v197;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v198;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v199;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v200;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v201;
  const char **v202;
  char v203;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v204;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v205;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v206;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v207;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v208;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v209;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v210;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v211;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> v213;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> buf;
  uint64_t v215;

  v1 = MEMORY[0x1E0C80A78](this);
  v215 = *MEMORY[0x1E0C80C00];
  v180 = (_QWORD *)(v1 + 32);
  v2 = &byte_1DEBD87CE;
  v183 = v1;
  while (!*(_BYTE *)(v1 + 8))
  {
    (*(void (**)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v1 + 16) + 16))(&v207, *(_QWORD *)(v1 + 16), 0);
    i = v207.__position_.__begin_.__i_;
    if (!v207.__position_.__begin_.__i_)
      goto LABEL_110;
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(std::__shared_weak_count **)(v1 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v10 = v2;
    v11 = v207.__position_.__begin_.__i_;
    if (v11 + 8 == (std::__wrap_iter<const char *>::iterator_type)v12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v208, "TokenBasicItem is not generated in previous modules.");
      MEMORY[0x1DF0EC99C](exception, &v208);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v13 = v12[5];
    if (v11 + 8 != (std::__wrap_iter<const char *>::iterator_type)v14)
    {
      v15 = v14[5];
      if (*(char *)(v15 + 31) < 0)
      {
        if (*(_QWORD *)(v15 + 16))
        {
LABEL_18:
          v16 = (const char **)(v15 + 8);
          memset(&v208, 0, 48);
          v17 = *(char *)(v15 + 31);
          if (v17 < 0)
          {
            if (*(_QWORD *)(v15 + 16) != 1)
              goto LABEL_38;
            v18 = *v16;
          }
          else
          {
            v18 = (const char *)(v15 + 8);
            if (v17 != 1)
            {
LABEL_38:
              (***(void (****)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr, _QWORD, uint64_t, uint64_t))(v1 + 136))(&buf, *(_QWORD *)(v1 + 136), v15 + 8, 1);
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
              {
                v24 = (const char *)(v15 + 8);
                if (*(char *)(v15 + 31) < 0)
                  v24 = *v16;
                Censor::global_plaintext((std::string *)&__p, (uint64_t)&buf);
                if (SHIBYTE(__p.__position_.__pregex_) >= 0)
                  p_p = (const char *)&__p;
                else
                  p_p = __p.__position_.__begin_.__i_;
                LODWORD(v213.__position_.__begin_.__i_) = 136315394;
                *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v213.__position_.__begin_.__i_ + 4) = v24;
                WORD2(v213.__position_.__end_.__i_) = 2080;
                *(std::__wrap_iter<const char *>::iterator_type *)((char *)&v213.__position_.__end_.__i_ + 6) = p_p;
                _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_DEBUG, "#Pronounce_Rule: %s -> %s", (uint8_t *)&v213, 0x16u);
                if (SHIBYTE(__p.__position_.__pregex_) < 0)
                  operator delete((void *)__p.__position_.__begin_.__i_);
                v2 = v10;
              }
              if (*(char *)(v15 + 31) < 0)
                v16 = (const char **)*v16;
              v1 = v183;
              Censor::global_plaintext((std::string *)&__p, (uint64_t)&buf);
              if (SHIBYTE(__p.__position_.__pregex_) >= 0)
                v27 = (std::__wrap_iter<const char *>::iterator_type)&__p;
              else
                v27 = __p.__position_.__begin_.__i_;
              Diagnostics::log(7, "#Pronounce_Rule: %s -> %s", v26, v16, v27);
              if (SHIBYTE(__p.__position_.__pregex_) < 0)
                operator delete((void *)__p.__position_.__begin_.__i_);
              LOBYTE(__p.__position_.__begin_.__i_) = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p.__position_.__end_.__i_, v2);
              std::string::basic_string[abi:ne180100]<0>(&__p.__position_.__match_.__matches_.__begin_, v2);
              if (!*(_BYTE *)(v183 + 105))
                goto LABEL_94;
              if (*(char *)(v15 + 55) < 0)
              {
                if (!*(_QWORD *)(v15 + 40))
                  goto LABEL_94;
LABEL_59:
                UTFString::split(&v206, (const std::string *)(v15 + 32), 0x5Fu, 0);
                v28 = *(const void ***)v206.__position_.__begin_.__i_;
                if (*((_QWORD *)v206.__position_.__begin_.__i_ + 1) == *(_QWORD *)v206.__position_.__begin_.__i_)
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                if (*((char *)v28 + 23) >= 0)
                  v29 = *((unsigned __int8 *)v28 + 23);
                else
                  v29 = (size_t)v28[1];
                std::string::basic_string[abi:ne180100]((uint64_t)&v213, v29 + 1);
                if (SHIBYTE(v213.__position_.__pregex_) >= 0)
                  v30 = (char *)&v213;
                else
                  v30 = (char *)v213.__position_.__begin_.__i_;
                if (v29)
                {
                  if (*((char *)v28 + 23) >= 0)
                    v31 = v28;
                  else
                    v31 = *v28;
                  memmove(v30, v31, v29);
                }
                *(_WORD *)&v30[v29] = 33;
                if (SHIBYTE(buf.__position_.__pregex_) >= 0)
                  p_buf = (const std::string::value_type *)&buf;
                else
                  p_buf = buf.__position_.__begin_.__i_;
                if (SHIBYTE(buf.__position_.__pregex_) >= 0)
                  pregex_high = HIBYTE(buf.__position_.__pregex_);
                else
                  pregex_high = (std::string::size_type)buf.__position_.__end_.__i_;
                v34 = std::string::append((std::string *)&v213, p_buf, pregex_high);
                v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                v211.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v34->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v211.__position_.__begin_.__i_ = v35;
                v34->__r_.__value_.__l.__size_ = 0;
                v34->__r_.__value_.__r.__words[2] = 0;
                v34->__r_.__value_.__r.__words[0] = 0;
                v1 = v183;
                v2 = v10;
                if (SHIBYTE(v213.__position_.__pregex_) < 0)
                  operator delete((void *)v213.__position_.__begin_.__i_);
                (***(void (****)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr, _QWORD, std::regex_token_iterator<std::__wrap_iter<const char *>, char> *, uint64_t))(v183 + 168))(&v213, *(_QWORD *)(v183 + 168), &v211, 1);
                create_pronunciation_with_phone_sequence((uint64_t *)&v210, (std::string *)&v213, (uint64_t)&__p);
                std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v208, (uint64_t *)v210.__position_.__begin_.__i_, (uint64_t *)v210.__position_.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v210.__position_.__end_.__i_ - v210.__position_.__begin_.__i_) >> 3));
                v205.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v210;
                std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
                begin = (std::__shared_weak_count *)v213.__position_.__match_.__matches_.__begin_;
                if (v213.__position_.__match_.__matches_.__begin_)
                {
                  p_second = (unint64_t *)&v213.__position_.__match_.__matches_.__begin_->second;
                  do
                    v38 = __ldaxr(p_second);
                  while (__stlxr(v38 - 1, p_second));
                  if (!v38)
                  {
                    ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
                    std::__shared_weak_count::__release_weak(begin);
                  }
                }
                if (SHIBYTE(v213.__position_.__pregex_) < 0)
                  operator delete((void *)v213.__position_.__begin_.__i_);
                if (SHIBYTE(v211.__position_.__pregex_) < 0)
                  operator delete((void *)v211.__position_.__begin_.__i_);
                v39 = (std::__shared_weak_count *)v206.__position_.__end_.__i_;
                if (v206.__position_.__end_.__i_)
                {
                  v40 = (unint64_t *)(v206.__position_.__end_.__i_ + 8);
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
              }
              else
              {
                if (*(_BYTE *)(v15 + 55))
                  goto LABEL_59;
LABEL_94:
                create_pronunciation_with_phone_sequence((uint64_t *)&v213, (std::string *)&buf, (uint64_t)&__p);
                std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v208, (uint64_t *)v213.__position_.__begin_.__i_, (uint64_t *)v213.__position_.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v213.__position_.__end_.__i_ - v213.__position_.__begin_.__i_) >> 3));
                v211.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v213;
                std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v211);
              }
              std::string::operator=((std::string *)&v208.__position_.__flags_, (const std::string *)(v13 + 32));
              if (SHIBYTE(__p.__position_.__match_.__matches_.__end_cap_.__value_) < 0)
                operator delete(__p.__position_.__match_.__matches_.__begin_);
              if (*((char *)&__p.__position_.__flags_ + 7) < 0)
                operator delete((void *)__p.__position_.__end_.__i_);
              v42 = (std::__shared_weak_count *)buf.__position_.__match_.__matches_.__begin_;
              if (buf.__position_.__match_.__matches_.__begin_)
              {
                v43 = (unint64_t *)&buf.__position_.__match_.__matches_.__begin_->second;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              if (SHIBYTE(buf.__position_.__pregex_) < 0)
                operator delete((void *)buf.__position_.__begin_.__i_);
LABEL_106:
              Agglomerate::set<TokenPronunciationItem>((uint64_t)v207.__position_.__begin_.__i_, (uint64_t)&v208);
              if (SHIBYTE(v208.__position_.__match_.__matches_.__end_) < 0)
                operator delete(*(void **)&v208.__position_.__flags_);
              __p.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v208;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_109;
            }
          }
          if (*v18 != 42)
            goto LABEL_38;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v19 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            Censor::global_plaintext((std::string *)&__p, v13 + 32);
            v20 = SHIBYTE(__p.__position_.__pregex_) >= 0 ? (const char *)&__p : __p.__position_.__begin_.__i_;
            LODWORD(buf.__position_.__begin_.__i_) = 136315138;
            *(std::__wrap_iter<const char *>::iterator_type *)((char *)&buf.__position_.__begin_.__i_ + 4) = v20;
            _os_log_impl(&dword_1DE3F6000, v19, OS_LOG_TYPE_ERROR, "Unknown pronunciation for token '%s', replace with silence.", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__position_.__pregex_) < 0)
              operator delete((void *)__p.__position_.__begin_.__i_);
          }
          Censor::global_plaintext((std::string *)&__p, v13 + 32);
          if (SHIBYTE(__p.__position_.__pregex_) >= 0)
            v22 = (std::__wrap_iter<const char *>::iterator_type)&__p;
          else
            v22 = __p.__position_.__begin_.__i_;
          Diagnostics::log(3, "Unknown pronunciation for token '%s', replace with silence.", v21, v22);
          if (SHIBYTE(__p.__position_.__pregex_) < 0)
            operator delete((void *)__p.__position_.__begin_.__i_);
          create_silence((uint64_t *)&__p);
          std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v208, (uint64_t *)__p.__position_.__begin_.__i_, (uint64_t *)__p.__position_.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((__p.__position_.__end_.__i_ - __p.__position_.__begin_.__i_) >> 3));
          buf.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
          std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          goto LABEL_106;
        }
      }
      else if (*(_BYTE *)(v15 + 31))
      {
        goto LABEL_18;
      }
    }
LABEL_109:
    std::deque<std::shared_ptr<Agglomerate>>::push_back(v180, (__int128 *)&v207);
LABEL_110:
    v45 = (std::__shared_weak_count *)v207.__position_.__end_.__i_;
    if (!v207.__position_.__end_.__i_)
      goto LABEL_114;
    v46 = (unint64_t *)(v207.__position_.__end_.__i_ + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (!i)
        break;
    }
    else
    {
LABEL_114:
      if (!i)
        break;
    }
  }
  if (!*(_BYTE *)(v1 + 104))
  {
    *(_BYTE *)(v1 + 8) = 1;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, &byte_1DEBD87CE);
  v48 = 0;
  v179 = (std::string *)(v1 + 120);
  do
  {
    while (1)
    {
      if (*(_QWORD *)(v183 + 72) <= v48)
        std::__throw_out_of_range[abi:ne180100]("deque");
      v49 = *(_QWORD *)(*(_QWORD *)(v183 + 40) + (((*(_QWORD *)(v183 + 64) + v48) >> 5) & 0x7FFFFFFFFFFFFF8));
      v50 = (*(_BYTE *)(v183 + 64) + v48);
      v51 = *(_OWORD *)(v49 + 16 * v50);
      v52 = *(std::__shared_weak_count **)(v49 + 16 * v50 + 8);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = v51;
      if (!(_QWORD)v51)
        break;
      v57 = (_QWORD *)(v55 + 8);
      if ((_QWORD *)(v55 + 8) == v56)
      {
        v177 = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)&v208, "Token missing TokenBasicItem");
        MEMORY[0x1DF0EC99C](v177, &v208);
        __cxa_throw(v177, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v58 = v56[5];
      if (!v179->__r_.__value_.__r.__words[0])
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v179, *(_QWORD *)(v58 + 56), *(_QWORD *)(v58 + 64));
      if (*(_DWORD *)(v58 + 8) == 1651664235)
      {
        if (v57 != v59)
        {
          v60 = v59[5];
          std::string::basic_string[abi:ne180100]<0>(&v208, &byte_1DEBD87CE);
          v61 = *(char *)(v58 + 55);
          if (v61 >= 0)
            v62 = (const std::string::value_type *)(v58 + 32);
          else
            v62 = *(const std::string::value_type **)(v58 + 32);
          if (v61 >= 0)
            v63 = *(unsigned __int8 *)(v58 + 55);
          else
            v63 = *(_QWORD *)(v58 + 40);
          std::string::append((std::string *)&v208, v62, v63);
          std::string::append((std::string *)&v208, " ‡ sil †");
          if (*(float *)(v60 + 8) != 0.0 || *(_DWORD *)(v60 + 12) == 1)
          {
            if (SHIBYTE(v208.__position_.__pregex_) >= 0)
              v64 = (const std::string::value_type *)&v208;
            else
              v64 = v208.__position_.__begin_.__i_;
            if (SHIBYTE(v208.__position_.__pregex_) >= 0)
              v65 = HIBYTE(v208.__position_.__pregex_);
            else
              v65 = (std::string::size_type)v208.__position_.__end_.__i_;
            std::string::append(&v187, v64, v65);
          }
          if (SHIBYTE(v208.__position_.__pregex_) < 0)
            operator delete((void *)v208.__position_.__begin_.__i_);
        }
      }
      if (v57 != v66)
      {
        v67 = v66[5];
        std::string::append(&v187, " ");
        v68 = *(char *)(v58 + 55);
        if (v68 >= 0)
          v69 = (const std::string::value_type *)(v58 + 32);
        else
          v69 = *(const std::string::value_type **)(v58 + 32);
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(v58 + 55);
        else
          v70 = *(_QWORD *)(v58 + 40);
        std::string::append(&v187, v69, v70);
        std::string::append(&v187, " ‡ ");
        (*(void (**)(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(v183 + 112) + 24))(&v208, **(_QWORD **)(v183 + 112), v67 + 8);
        if (SHIBYTE(v208.__position_.__pregex_) >= 0)
          v71 = (const std::string::value_type *)&v208;
        else
          v71 = v208.__position_.__begin_.__i_;
        if (SHIBYTE(v208.__position_.__pregex_) >= 0)
          v72 = HIBYTE(v208.__position_.__pregex_);
        else
          v72 = (std::string::size_type)v208.__position_.__end_.__i_;
        std::string::append(&v187, v71, v72);
        if (SHIBYTE(v208.__position_.__pregex_) < 0)
          operator delete((void *)v208.__position_.__begin_.__i_);
        std::string::append(&v187, " †");
      }
      if (v57 != v73)
      {
        v74 = v73[5];
        if (*(_BYTE *)(v74 + 8))
        {
          std::string::basic_string[abi:ne180100]<0>(&v208, " ");
          v77 = *(_QWORD *)(v58 + 32);
          v76 = v58 + 32;
          v75 = v77;
          v78 = *(char *)(v76 + 23);
          v79 = (const std::string::value_type *)(v78 >= 0 ? v76 : v75);
          v80 = v78 >= 0 ? *(unsigned __int8 *)(v76 + 23) : *(_QWORD *)(v76 + 8);
          std::string::append((std::string *)&v208, v79, v80);
          std::string::append((std::string *)&v208, " ‡ sil †");
          v81 = SHIBYTE(v208.__position_.__pregex_) >= 0
              ? (const std::string::value_type *)&v208
              : v208.__position_.__begin_.__i_;
          v82 = SHIBYTE(v208.__position_.__pregex_) >= 0
              ? (std::__wrap_iter<const char *>::iterator_type)HIBYTE(v208.__position_.__pregex_)
              : v208.__position_.__end_.__i_;
          std::string::append(&v187, v81, (std::string::size_type)v82);
          if (SHIBYTE(v208.__position_.__pregex_) < 0)
            operator delete((void *)v208.__position_.__begin_.__i_);
        }
        if (*(_BYTE *)(v74 + 9))
          break;
      }
      ++v48;
      v83 = 1;
      if (v52)
        goto LABEL_182;
LABEL_185:
      if ((v83 & 1) == 0)
        goto LABEL_188;
    }
    v83 = 0;
    if (!v52)
      goto LABEL_185;
LABEL_182:
    v84 = (unint64_t *)&v52->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (v85)
      goto LABEL_185;
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  while ((v83 & 1) != 0);
LABEL_188:
  v86 = &v187;
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v86 = (std::string *)v187.__r_.__value_.__r.__words[0];
  if (v86->__r_.__value_.__s.__data_[0] == 32)
    std::string::erase(&v187, 0, 1uLL);
  std::string::basic_string[abi:ne180100]<0>(&v208, " †  ‡ sil †");
  v87 = v183;
  if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v187.__r_.__value_.__r.__words[2]);
  else
    size = v187.__r_.__value_.__l.__size_;
  if (SHIBYTE(v208.__position_.__pregex_) >= 0)
    v89 = HIBYTE(v208.__position_.__pregex_);
  else
    v89 = (std::string::size_type)v208.__position_.__end_.__i_;
  v90 = size - v89;
  if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v187.__r_.__value_.__r.__words[2]) >= v90 && v89 != -1)
    {
      if (HIBYTE(v187.__r_.__value_.__r.__words[2]) - v90 >= v89)
        v92 = v89;
      else
        v92 = HIBYTE(v187.__r_.__value_.__r.__words[2]) - v90;
      v93 = &v187;
      goto LABEL_214;
    }
LABEL_489:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v89 == -1 || v187.__r_.__value_.__l.__size_ < v90)
    goto LABEL_489;
  if (v187.__r_.__value_.__l.__size_ - v90 >= v89)
    v92 = v89;
  else
    v92 = v187.__r_.__value_.__l.__size_ - v90;
  v93 = (std::string *)v187.__r_.__value_.__r.__words[0];
LABEL_214:
  if (SHIBYTE(v208.__position_.__pregex_) >= 0)
    v94 = &v208;
  else
    v94 = v208.__position_.__begin_.__i_;
  if (!memcmp((char *)v93 + v90, v94, v92) && v92 == v89)
    std::string::erase(&v187, v90, v89);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v96 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext((std::string *)&__p, (uint64_t)&v187);
    v97 = SHIBYTE(__p.__position_.__pregex_) >= 0 ? (const char *)&__p : __p.__position_.__begin_.__i_;
    LODWORD(buf.__position_.__begin_.__i_) = 136315138;
    *(std::__wrap_iter<const char *>::iterator_type *)((char *)&buf.__position_.__begin_.__i_ + 4) = v97;
    _os_log_impl(&dword_1DE3F6000, v96, OS_LOG_TYPE_DEBUG, "#Sentence Rule gets composed phone string : %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__position_.__pregex_) < 0)
      operator delete((void *)__p.__position_.__begin_.__i_);
  }
  Censor::global_plaintext((std::string *)&__p, (uint64_t)&v187);
  if (SHIBYTE(__p.__position_.__pregex_) >= 0)
    v99 = (std::__wrap_iter<const char *>::iterator_type)&__p;
  else
    v99 = __p.__position_.__begin_.__i_;
  Diagnostics::log(7, "#Sentence Rule gets composed phone string : %s", v98, v99);
  if (SHIBYTE(__p.__position_.__pregex_) < 0)
    operator delete((void *)__p.__position_.__begin_.__i_);
  if (SHIBYTE(v208.__position_.__pregex_) < 0)
    operator delete((void *)v208.__position_.__begin_.__i_);
  (***(void (****)(void **__return_ptr, _QWORD, std::string *, uint64_t))(v183 + 152))(v184, *(_QWORD *)(v183 + 152), &v187, 1);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v100 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    Censor::global_plaintext((std::string *)&v208, (uint64_t)&v187);
    v101 = SHIBYTE(v208.__position_.__pregex_);
    v102 = v208.__position_.__begin_.__i_;
    Censor::global_plaintext((std::string *)&__p, (uint64_t)v184);
    v103 = &v208;
    if (v101 < 0)
      v103 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)v102;
    if (SHIBYTE(__p.__position_.__pregex_) >= 0)
      v104 = (const char *)&__p;
    else
      v104 = __p.__position_.__begin_.__i_;
    LODWORD(buf.__position_.__begin_.__i_) = 136315394;
    *(std::__wrap_iter<const char *>::iterator_type *)((char *)&buf.__position_.__begin_.__i_ + 4) = (std::__wrap_iter<const char *>::iterator_type)v103;
    WORD2(buf.__position_.__end_.__i_) = 2080;
    *(std::__wrap_iter<const char *>::iterator_type *)((char *)&buf.__position_.__end_.__i_ + 6) = v104;
    _os_log_impl(&dword_1DE3F6000, v100, OS_LOG_TYPE_DEBUG, "#Sentence Rule:\n[Input]  - %s\n[Output] - %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__position_.__pregex_) < 0)
      operator delete((void *)__p.__position_.__begin_.__i_);
    if (SHIBYTE(v208.__position_.__pregex_) < 0)
      operator delete((void *)v208.__position_.__begin_.__i_);
  }
  Censor::global_plaintext((std::string *)&v208, (uint64_t)&v187);
  v105 = SHIBYTE(v208.__position_.__pregex_);
  v106 = v208.__position_.__begin_.__i_;
  Censor::global_plaintext((std::string *)&__p, (uint64_t)v184);
  v108 = &v208;
  if (v105 < 0)
    v108 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)v106;
  if (SHIBYTE(__p.__position_.__pregex_) >= 0)
    v109 = (std::__wrap_iter<const char *>::iterator_type)&__p;
  else
    v109 = __p.__position_.__begin_.__i_;
  Diagnostics::log(7, "#Sentence Rule:\n[Input]  - %s\n[Output] - %s", v107, v108, v109);
  if (SHIBYTE(__p.__position_.__pregex_) < 0)
    operator delete((void *)__p.__position_.__begin_.__i_);
  if (SHIBYTE(v208.__position_.__pregex_) < 0)
    operator delete((void *)v208.__position_.__begin_.__i_);
  v110 = *(void ***)(v183 + 40);
  v111 = *(void ***)(v183 + 48);
  if (v111 == v110)
  {
    v111 = *(void ***)(v183 + 40);
  }
  else
  {
    v112 = *(_QWORD *)(v183 + 64);
    v113 = &v110[v112 >> 8];
    v114 = (uint64_t)*v113 + 16 * v112;
    v115 = *(uint64_t *)((char *)v110 + (((*(_QWORD *)(v183 + 72) + v112) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(_BYTE *)(v183 + 72) + v112);
    if (v114 != v115)
    {
      do
      {
        v114 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v114) + 16;
        if (v114 - (_QWORD)*v113 == 4096)
        {
          v116 = (uint64_t)v113[1];
          ++v113;
          v114 = v116;
        }
      }
      while (v114 != v115);
      v110 = *(void ***)(v183 + 40);
      v111 = *(void ***)(v183 + 48);
    }
  }
  *(_QWORD *)(v183 + 72) = 0;
  v117 = (char *)v111 - (char *)v110;
  if (v117 >= 0x11)
  {
    do
    {
      operator delete(*v110);
      v118 = *(_QWORD *)(v183 + 48);
      v110 = (void **)(*(_QWORD *)(v183 + 40) + 8);
      *(_QWORD *)(v183 + 40) = v110;
      v117 = v118 - (_QWORD)v110;
    }
    while (v117 > 0x10);
  }
  if (v117 >> 3 == 1)
  {
    v119 = 128;
LABEL_272:
    *(_QWORD *)(v183 + 64) = v119;
  }
  else if (v117 >> 3 == 2)
  {
    v119 = 256;
    goto LABEL_272;
  }
  std::string::basic_string[abi:ne180100]<0>(v188, " † | ‡ | †");
  std::regex_traits<char>::regex_traits(&v195.__traits_);
  memset(&v195.__flags_, 0, 40);
  v120 = v189;
  if ((v189 & 0x80u) == 0)
    v121 = (char *)v188;
  else
    v121 = (char *)v188[0];
  if ((v189 & 0x80u) != 0)
    v120 = (unint64_t)v188[1];
  if (&v121[v120] != (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)&v195, v121, &v121[v120]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  v123 = v185;
  if ((v185 & 0x80u) == 0)
    v124 = v184;
  else
    v124 = (void **)v184[0];
  if ((v185 & 0x80u) != 0)
    v123 = (unint64_t)v184[1];
  v125 = (char *)v124 + v123;
  LODWORD(__p.__position_.__begin_.__i_) = -1;
  v126.__i_ = (std::__wrap_iter<const char *>::iterator_type)v124;
  v127.__i_ = (char *)v124 + v123;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v194.__position_, v126, v127, &v195, v122);
  memset(&v194.__suffix_, 0, 17);
  v194.__n_ = 0;
  std::vector<int>::vector(&v194.__subs_, 1uLL, (const std::vector<int>::value_type *)&__p);
  memset(&v208.__position_.__match_.__prefix_, 0, 17);
  memset(&v208.__position_.__match_.__suffix_, 0, 17);
  v208.__position_.__match_.__ready_ = 0;
  v208.__position_.__match_.__position_start_.__i_ = 0;
  memset(&v208.__position_.__match_, 0, 41);
  memset(&v208, 0, 28);
  v128 = std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v194.__position_, &v208.__position_);
  v129 = v194.__subs_.__begin_[v194.__n_];
  if (v128)
  {
    if ((_DWORD)v129 == -1)
    {
      v194.__suffix_.matched = 1;
      p_suffix = &v194.__suffix_;
      v194.__suffix_.first.__i_ = (std::__wrap_iter<const char *>::iterator_type)v124;
      v194.__suffix_.second.__i_ = v125;
    }
    else
    {
      p_suffix = 0;
    }
  }
  else if ((_DWORD)v129 == -1)
  {
    p_suffix = &v194.__position_.__match_.__prefix_;
  }
  else if (0xAAAAAAAAAAAAAAABLL
          * (((char *)v194.__position_.__match_.__matches_.__end_ - (char *)v194.__position_.__match_.__matches_.__begin_) >> 3) <= v129)
  {
    p_suffix = &v194.__position_.__match_.__unmatched_;
  }
  else
  {
    p_suffix = &v194.__position_.__match_.__matches_.__begin_[(int)v129];
  }
  v194.__result_ = p_suffix;
  memset(&v193.__position_.__match_.__prefix_, 0, 17);
  memset(&v193.__position_.__match_.__suffix_, 0, 17);
  v193.__position_.__match_.__ready_ = 0;
  memset(&v193.__position_.__match_, 0, 41);
  v192 = 0;
  memset(&v193, 0, 28);
  memset(&v193.__position_.__match_.__position_start_, 0, 33);
  memset(&v193.__n_, 0, 32);
  v190 = 0;
  v191 = 0;
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v199, &v194);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v198, &v193);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v208, &v199);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&__p, &v198);
  v131 = 0;
  while (!std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v208, &__p))
  {
    ++v131;
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v208);
  }
  if (__p.__subs_.__begin_)
  {
    __p.__subs_.__end_ = __p.__subs_.__begin_;
    operator delete(__p.__subs_.__begin_);
  }
  if (__p.__position_.__match_.__matches_.__begin_)
  {
    __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
    operator delete(__p.__position_.__match_.__matches_.__begin_);
  }
  if (v208.__subs_.__begin_)
  {
    v208.__subs_.__end_ = v208.__subs_.__begin_;
    operator delete(v208.__subs_.__begin_);
  }
  if (v208.__position_.__match_.__matches_.__begin_)
  {
    v208.__position_.__match_.__matches_.__end_ = v208.__position_.__match_.__matches_.__begin_;
    operator delete(v208.__position_.__match_.__matches_.__begin_);
  }
  if (v198.__subs_.__begin_)
  {
    v198.__subs_.__end_ = v198.__subs_.__begin_;
    operator delete(v198.__subs_.__begin_);
  }
  if (v198.__position_.__match_.__matches_.__begin_)
  {
    v198.__position_.__match_.__matches_.__end_ = v198.__position_.__match_.__matches_.__begin_;
    operator delete(v198.__position_.__match_.__matches_.__begin_);
  }
  if (v199.__subs_.__begin_)
  {
    v199.__subs_.__end_ = v199.__subs_.__begin_;
    operator delete(v199.__subs_.__begin_);
  }
  if (v199.__position_.__match_.__matches_.__begin_)
  {
    v199.__position_.__match_.__matches_.__end_ = v199.__position_.__match_.__matches_.__begin_;
    operator delete(v199.__position_.__match_.__matches_.__begin_);
  }
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v197, &v194);
  std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v196, &v193);
  v202 = &v190;
  v203 = 0;
  if (v131)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](&v190, v131);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v201, &v197);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v200, &v196);
    v132 = v191;
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v205, &v201);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v204, &v200);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v207, &v205);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v206, &v204);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v213, &v207);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&__p, &v213);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&buf, &__p);
    if (__p.__subs_.__begin_)
    {
      __p.__subs_.__end_ = __p.__subs_.__begin_;
      operator delete(__p.__subs_.__begin_);
    }
    if (__p.__position_.__match_.__matches_.__begin_)
    {
      __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
      operator delete(__p.__position_.__match_.__matches_.__begin_);
    }
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v210, &v206);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&__p, &v210);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v211, &__p);
    if (__p.__subs_.__begin_)
    {
      __p.__subs_.__end_ = __p.__subs_.__begin_;
      operator delete(__p.__subs_.__begin_);
    }
    if (__p.__position_.__match_.__matches_.__begin_)
    {
      __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
      operator delete(__p.__position_.__match_.__matches_.__begin_);
    }
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v208, &buf);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&v209, &v211);
    if (v211.__subs_.__begin_)
    {
      v211.__subs_.__end_ = v211.__subs_.__begin_;
      operator delete(v211.__subs_.__begin_);
    }
    if (v211.__position_.__match_.__matches_.__begin_)
    {
      v211.__position_.__match_.__matches_.__end_ = v211.__position_.__match_.__matches_.__begin_;
      operator delete(v211.__position_.__match_.__matches_.__begin_);
    }
    if (v210.__subs_.__begin_)
    {
      v210.__subs_.__end_ = v210.__subs_.__begin_;
      operator delete(v210.__subs_.__begin_);
    }
    if (v210.__position_.__match_.__matches_.__begin_)
    {
      v210.__position_.__match_.__matches_.__end_ = v210.__position_.__match_.__matches_.__begin_;
      operator delete(v210.__position_.__match_.__matches_.__begin_);
    }
    if (buf.__subs_.__begin_)
    {
      buf.__subs_.__end_ = buf.__subs_.__begin_;
      operator delete(buf.__subs_.__begin_);
    }
    if (buf.__position_.__match_.__matches_.__begin_)
    {
      buf.__position_.__match_.__matches_.__end_ = buf.__position_.__match_.__matches_.__begin_;
      operator delete(buf.__position_.__match_.__matches_.__begin_);
    }
    if (v213.__subs_.__begin_)
    {
      v213.__subs_.__end_ = v213.__subs_.__begin_;
      operator delete(v213.__subs_.__begin_);
    }
    if (v213.__position_.__match_.__matches_.__begin_)
    {
      v213.__position_.__match_.__matches_.__end_ = v213.__position_.__match_.__matches_.__begin_;
      operator delete(v213.__position_.__match_.__matches_.__begin_);
    }
    if (v206.__subs_.__begin_)
    {
      v206.__subs_.__end_ = v206.__subs_.__begin_;
      operator delete(v206.__subs_.__begin_);
    }
    if (v206.__position_.__match_.__matches_.__begin_)
    {
      v206.__position_.__match_.__matches_.__end_ = v206.__position_.__match_.__matches_.__begin_;
      operator delete(v206.__position_.__match_.__matches_.__begin_);
    }
    if (v207.__subs_.__begin_)
    {
      v207.__subs_.__end_ = v207.__subs_.__begin_;
      operator delete(v207.__subs_.__begin_);
    }
    if (v207.__position_.__match_.__matches_.__begin_)
    {
      v207.__position_.__match_.__matches_.__end_ = v207.__position_.__match_.__matches_.__begin_;
      operator delete(v207.__position_.__match_.__matches_.__begin_);
    }
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&__p, &v208);
    std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(&buf, &v209);
    v211.__position_.__begin_.__i_ = v132;
    v210.__position_.__begin_.__i_ = v132;
    v213.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v192;
    v213.__position_.__end_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v210;
    v213.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)&v211;
    LOBYTE(v213.__position_.__flags_) = 0;
    while (!std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&__p, &buf))
    {
      v133 = v211.__position_.__begin_.__i_;
      if (__p.__result_->matched)
      {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v211.__position_.__begin_.__i_, (char *)__p.__result_->first.__i_, (char *)__p.__result_->second.__i_, __p.__result_->second.__i_ - __p.__result_->first.__i_);
      }
      else
      {
        *(_QWORD *)v211.__position_.__begin_.__i_ = 0;
        *((_QWORD *)v133 + 1) = 0;
        *((_QWORD *)v133 + 2) = 0;
      }
      std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&__p);
      v211.__position_.__begin_.__i_ += 24;
    }
    LOBYTE(v213.__position_.__flags_) = 1;
    v134 = v211.__position_.__begin_.__i_;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v213);
    if (buf.__subs_.__begin_)
    {
      buf.__subs_.__end_ = buf.__subs_.__begin_;
      operator delete(buf.__subs_.__begin_);
    }
    if (buf.__position_.__match_.__matches_.__begin_)
    {
      buf.__position_.__match_.__matches_.__end_ = buf.__position_.__match_.__matches_.__begin_;
      operator delete(buf.__position_.__match_.__matches_.__begin_);
    }
    if (__p.__subs_.__begin_)
    {
      __p.__subs_.__end_ = __p.__subs_.__begin_;
      operator delete(__p.__subs_.__begin_);
    }
    if (__p.__position_.__match_.__matches_.__begin_)
    {
      __p.__position_.__match_.__matches_.__end_ = __p.__position_.__match_.__matches_.__begin_;
      operator delete(__p.__position_.__match_.__matches_.__begin_);
    }
    if (v209.__subs_.__begin_)
    {
      v209.__subs_.__end_ = v209.__subs_.__begin_;
      operator delete(v209.__subs_.__begin_);
    }
    if (v209.__position_.__match_.__matches_.__begin_)
    {
      v209.__position_.__match_.__matches_.__end_ = v209.__position_.__match_.__matches_.__begin_;
      operator delete(v209.__position_.__match_.__matches_.__begin_);
    }
    if (v208.__subs_.__begin_)
    {
      v208.__subs_.__end_ = v208.__subs_.__begin_;
      operator delete(v208.__subs_.__begin_);
    }
    if (v208.__position_.__match_.__matches_.__begin_)
    {
      v208.__position_.__match_.__matches_.__end_ = v208.__position_.__match_.__matches_.__begin_;
      operator delete(v208.__position_.__match_.__matches_.__begin_);
    }
    if (v204.__subs_.__begin_)
    {
      v204.__subs_.__end_ = v204.__subs_.__begin_;
      operator delete(v204.__subs_.__begin_);
    }
    if (v204.__position_.__match_.__matches_.__begin_)
    {
      v204.__position_.__match_.__matches_.__end_ = v204.__position_.__match_.__matches_.__begin_;
      operator delete(v204.__position_.__match_.__matches_.__begin_);
    }
    if (v205.__subs_.__begin_)
    {
      v205.__subs_.__end_ = v205.__subs_.__begin_;
      operator delete(v205.__subs_.__begin_);
    }
    if (v205.__position_.__match_.__matches_.__begin_)
    {
      v205.__position_.__match_.__matches_.__end_ = v205.__position_.__match_.__matches_.__begin_;
      operator delete(v205.__position_.__match_.__matches_.__begin_);
    }
    v191 = v134;
    if (v200.__subs_.__begin_)
    {
      v200.__subs_.__end_ = v200.__subs_.__begin_;
      operator delete(v200.__subs_.__begin_);
    }
    if (v200.__position_.__match_.__matches_.__begin_)
    {
      v200.__position_.__match_.__matches_.__end_ = v200.__position_.__match_.__matches_.__begin_;
      operator delete(v200.__position_.__match_.__matches_.__begin_);
    }
    if (v201.__subs_.__begin_)
    {
      v201.__subs_.__end_ = v201.__subs_.__begin_;
      operator delete(v201.__subs_.__begin_);
    }
    if (v201.__position_.__match_.__matches_.__begin_)
    {
      v201.__position_.__match_.__matches_.__end_ = v201.__position_.__match_.__matches_.__begin_;
      operator delete(v201.__position_.__match_.__matches_.__begin_);
    }
  }
  if (v196.__subs_.__begin_)
  {
    v196.__subs_.__end_ = v196.__subs_.__begin_;
    operator delete(v196.__subs_.__begin_);
  }
  if (v196.__position_.__match_.__matches_.__begin_)
  {
    v196.__position_.__match_.__matches_.__end_ = v196.__position_.__match_.__matches_.__begin_;
    operator delete(v196.__position_.__match_.__matches_.__begin_);
  }
  if (v197.__subs_.__begin_)
  {
    v197.__subs_.__end_ = v197.__subs_.__begin_;
    operator delete(v197.__subs_.__begin_);
  }
  if (v197.__position_.__match_.__matches_.__begin_)
  {
    v197.__position_.__match_.__matches_.__end_ = v197.__position_.__match_.__matches_.__begin_;
    operator delete(v197.__position_.__match_.__matches_.__begin_);
  }
  if (v193.__subs_.__begin_)
  {
    v193.__subs_.__end_ = v193.__subs_.__begin_;
    operator delete(v193.__subs_.__begin_);
  }
  if (v193.__position_.__match_.__matches_.__begin_)
  {
    v193.__position_.__match_.__matches_.__end_ = v193.__position_.__match_.__matches_.__begin_;
    operator delete(v193.__position_.__match_.__matches_.__begin_);
  }
  if (v194.__subs_.__begin_)
  {
    v194.__subs_.__end_ = v194.__subs_.__begin_;
    operator delete(v194.__subs_.__begin_);
  }
  if (v194.__position_.__match_.__matches_.__begin_)
  {
    v194.__position_.__match_.__matches_.__end_ = v194.__position_.__match_.__matches_.__begin_;
    operator delete(v194.__position_.__match_.__matches_.__begin_);
  }
  cntrl = v195.__start_.__cntrl_;
  if (v195.__start_.__cntrl_)
  {
    v136 = &v195.__start_.__cntrl_->__shared_owners_;
    do
      v137 = __ldaxr((unint64_t *)v136);
    while (__stlxr(v137 - 1, (unint64_t *)v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v195.__traits_.__loc_);
  if ((char)v189 < 0)
    operator delete(v188[0]);
  std::string::basic_string[abi:ne180100]<0>(&v211, &byte_1DEBD87CE);
  v139 = v190;
  v138 = v191;
  if (v191 != v190)
  {
    v140 = 0;
    v182 = 0;
    v141 = &off_1EA932198;
    do
    {
      v142 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v142 + 8) = 0u;
      *(_QWORD *)v142 = v141;
      *((_OWORD *)v142 + 2) = 0u;
      *((_QWORD *)v142 + 3) = v142 + 32;
      v210.__position_.__begin_.__i_ = v142 + 24;
      v210.__position_.__end_.__i_ = v142;
      v143 = v140 | 1;
      if (0xAAAAAAAAAAAAAAABLL * ((v138 - v139) >> 3) <= (v140 | 1))
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v144 = &v139[24 * v143];
      v145 = v144[23];
      if (v145 < 0)
      {
        if (*((_QWORD *)v144 + 1) == 3)
        {
          v144 = *(const char **)v144;
LABEL_414:
          v146 = *(unsigned __int16 *)v144;
          v147 = *((unsigned __int8 *)v144 + 2);
          v149 = v146 == 26995 && v147 == 108;
          v181 = v149;
          goto LABEL_422;
        }
      }
      else if (v145 == 3)
      {
        goto LABEL_414;
      }
      v181 = 0;
LABEL_422:
      memset(&v208.__position_.__flags_, 0, 40);
      LODWORD(v208.__position_.__begin_.__i_) = 1952807028;
      std::string::operator=((std::string *)&v208.__position_.__flags_, (const std::string *)&v139[24 * v140]);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v208.__position_.__match_.__matches_.__end_cap_.__value_, *(_QWORD *)(v87 + 120), *(_QWORD *)(v87 + 128));
      if (SHIBYTE(v208.__position_.__match_.__matches_.__end_) >= 0)
        end_high = HIBYTE(v208.__position_.__match_.__matches_.__end_);
      else
        end_high = (std::string::size_type)v208.__position_.__match_.__matches_.__begin_;
      v208.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)end_high;
      v208.__position_.__end_.__i_ = v182;
      if (SHIBYTE(v208.__position_.__match_.__matches_.__end_) >= 0)
        p_flags = &v208.__position_.__flags_;
      else
        p_flags = *(std::regex_constants::match_flag_type **)&v208.__position_.__flags_;
      std::string::append((std::string *)&v211, (const std::string::value_type *)p_flags, end_high);
      v152 = v210.__position_.__begin_.__i_;
      Agglomerate::set<TokenBasicItem>((uint64_t)v210.__position_.__begin_.__i_, (__int128 *)&v208);
      memset(&__p, 0, 48);
      LOBYTE(buf.__position_.__begin_.__i_) = 0;
      std::string::basic_string[abi:ne180100]<0>(&buf.__position_.__end_.__i_, &byte_1DEBD87CE);
      std::string::basic_string[abi:ne180100]<0>(&buf.__position_.__match_.__matches_.__begin_, &byte_1DEBD87CE);
      if (0xAAAAAAAAAAAAAAABLL * ((v191 - v190) >> 3) <= v143)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      create_pronunciation_with_phone_sequence((uint64_t *)&v213, (std::string *)&v190[24 * v143], (uint64_t)&buf);
      std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&__p, (uint64_t *)v213.__position_.__begin_.__i_, (uint64_t *)v213.__position_.__end_.__i_, 0xAAAAAAAAAAAAAAABLL * ((v213.__position_.__end_.__i_ - v213.__position_.__begin_.__i_) >> 3));
      v207.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v213;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      std::string::operator=((std::string *)&__p.__position_.__flags_, (const std::string *)&v208.__position_.__flags_);
      Agglomerate::set<TokenPronunciationItem>((uint64_t)v152, (uint64_t)&__p);
      v153 = (char *)operator new(0x30uLL);
      *(_OWORD *)(v153 + 8) = 0u;
      v154 = (unint64_t *)(v153 + 8);
      *(_QWORD *)v153 = v141;
      *((_OWORD *)v153 + 2) = 0u;
      *((_QWORD *)v153 + 3) = v153 + 32;
      v155 = (std::__shared_weak_count *)operator new(0x30uLL);
      v156 = v141;
      v157 = v155;
      v182 += end_high;
      *(_OWORD *)&v155->__shared_owners_ = 0u;
      v158 = (unint64_t *)&v155->__shared_owners_;
      v159 = v156;
      v155->__vftable = (std::__shared_weak_count_vtbl *)v156;
      *(_OWORD *)&v155[1].__shared_owners_ = 0u;
      v155[1].__vftable = (std::__shared_weak_count_vtbl *)&v155[1].__shared_owners_;
      LOWORD(v213.__position_.__begin_.__i_) = 0;
      v213.__position_.__end_.__i_ = v153 + 24;
      v213.__position_.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v153;
      do
        v160 = __ldxr(v154);
      while (__stxr(v160 + 1, v154));
      *(_QWORD *)&v213.__position_.__flags_ = v155 + 1;
      v213.__position_.__match_.__matches_.__begin_ = (std::vector<std::ssub_match>::pointer)v155;
      v87 = v183;
      do
        v161 = __ldxr(v158);
      while (__stxr(v161 + 1, v158));
      if (v181)
        LOBYTE(v213.__position_.__begin_.__i_) = 1;
      if (v140 == -2 - 0x5555555555555555 * ((v191 - v190) >> 3))
        LOWORD(v213.__position_.__begin_.__i_) = 257;
      Agglomerate::set<TokenPhrasingItem>((uint64_t)v152, (__int16 *)&v213);
      std::deque<std::shared_ptr<Agglomerate>>::push_back(v180, (__int128 *)&v210);
      do
        v162 = __ldaxr(v158);
      while (__stlxr(v162 - 1, v158));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
      pregex = (std::__shared_weak_count *)v213.__position_.__pregex_;
      if (v213.__position_.__pregex_)
      {
        p_ct = (unint64_t *)&v213.__position_.__pregex_->__traits_.__ct_;
        do
          v165 = __ldaxr(p_ct);
        while (__stlxr(v165 - 1, p_ct));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))pregex->__on_zero_shared)(pregex);
          std::__shared_weak_count::__release_weak(pregex);
        }
      }
      do
        v166 = __ldaxr(v158);
      while (__stlxr(v166 - 1, v158));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
      do
        v167 = __ldaxr(v154);
      while (__stlxr(v167 - 1, v154));
      v141 = v159;
      if (!v167)
      {
        (*(void (**)(char *))(*(_QWORD *)v153 + 16))(v153);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v153);
      }
      if (SHIBYTE(buf.__position_.__match_.__matches_.__end_cap_.__value_) < 0)
        operator delete(buf.__position_.__match_.__matches_.__begin_);
      if (*((char *)&buf.__position_.__flags_ + 7) < 0)
        operator delete((void *)buf.__position_.__end_.__i_);
      if (SHIBYTE(__p.__position_.__match_.__matches_.__end_) < 0)
        operator delete(*(void **)&__p.__position_.__flags_);
      buf.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v168 = (std::__shared_weak_count *)v208.__position_.__match_.__unmatched_.first.__i_;
      if (v208.__position_.__match_.__unmatched_.first.__i_)
      {
        v169 = (unint64_t *)(v208.__position_.__match_.__unmatched_.first.__i_ + 8);
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      if (SHIBYTE(v208.__position_.__match_.__matches_.__end_) < 0)
        operator delete(*(void **)&v208.__position_.__flags_);
      v171 = (std::__shared_weak_count *)v210.__position_.__end_.__i_;
      if (v210.__position_.__end_.__i_)
      {
        v172 = (unint64_t *)(v210.__position_.__end_.__i_ + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v140 += 2;
      v139 = v190;
      v138 = v191;
    }
    while (v140 < 0xAAAAAAAAAAAAAAABLL * ((v191 - v190) >> 3));
  }
  std::string::operator=(*(std::string **)(v179->__r_.__value_.__r.__words[0] + 16), (const std::string *)&v211);
  if (SHIBYTE(v211.__position_.__pregex_) < 0)
    operator delete((void *)v211.__position_.__begin_.__i_);
  v208.__position_.__begin_.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v190;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
  *(_BYTE *)(v87 + 8) = 1;
  v174 = v186;
  if (v186)
  {
    v175 = (unint64_t *)&v186->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if ((char)v185 < 0)
    operator delete(v184[0]);
  if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v187.__r_.__value_.__l.__data_);
}

void sub_1DE9AD748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (SLOBYTE(STACK[0xB07]) < 0)
    operator delete((void *)STACK[0xAF0]);
  if (a30)
  {
    p_shared_owners = (unint64_t *)&a30->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
      std::__shared_weak_count::__release_weak(a30);
    }
  }
  if (a28 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(a1);
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_token_iterator(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *a2)
{
  __int128 v4;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v5;
  __int128 v6;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v7;
  __int128 v8;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v9;
  ptrdiff_t n;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v13;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v14;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;

  v4 = *(_OWORD *)&a2->__position_.__begin_.__i_;
  *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4) = *(_OWORD *)((char *)&a2->__position_.__end_.__i_ + 4);
  *(_OWORD *)&this->__position_.__begin_.__i_ = v4;
  this->__position_.__match_.__matches_.__begin_ = 0;
  this->__position_.__match_.__matches_.__end_ = 0;
  this->__position_.__match_.__matches_.__end_cap_.__value_ = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&this->__position_.__match_.__matches_.__begin_, (__int128 *)a2->__position_.__match_.__matches_.__begin_, (__int128 *)a2->__position_.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)a2->__position_.__match_.__matches_.__end_ - (char *)a2->__position_.__match_.__matches_.__begin_) >> 3));
  v5 = a2->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&this->__position_.__match_.__unmatched_.matched = *(_OWORD *)&a2->__position_.__match_.__unmatched_.matched;
  this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v5;
  v6 = *(_OWORD *)&a2->__position_.__match_.__prefix_.second.__i_;
  v7 = a2->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v8 = *(_OWORD *)&a2->__position_.__match_.__suffix_.matched;
  this->__position_.__match_.__position_start_.__i_ = a2->__position_.__match_.__position_start_.__i_;
  *(_OWORD *)&this->__position_.__match_.__suffix_.matched = v8;
  this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v7;
  *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_ = v6;
  this->__result_ = a2->__result_;
  v9 = a2->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_QWORD *)&this->__suffix_.matched = *(_QWORD *)&a2->__suffix_.matched;
  this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v9;
  n = a2->__n_;
  this->__subs_.__begin_ = 0;
  this->__n_ = n;
  this->__subs_.__end_ = 0;
  this->__subs_.__end_cap_.__value_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this->__subs_.__begin_, a2->__subs_.__begin_, (uint64_t)a2->__subs_.__end_, a2->__subs_.__end_ - a2->__subs_.__begin_);
  if (a2->__result_ == &a2->__suffix_)
  {
    p_suffix = &this->__suffix_;
LABEL_9:
    this->__result_ = p_suffix;
    return this;
  }
  if (this->__result_)
  {
    v11 = this->__subs_.__begin_[this->__n_];
    if ((_DWORD)v11 == -1)
    {
      p_suffix = &this->__position_.__match_.__prefix_;
    }
    else
    {
      begin = this->__position_.__match_.__matches_.__begin_;
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__position_.__match_.__matches_.__end_ - (char *)begin) >> 3);
      v14 = &begin[(int)v11];
      if (v13 <= v11)
        p_suffix = &this->__position_.__match_.__unmatched_;
      else
        p_suffix = v14;
    }
    goto LABEL_9;
  }
  return this;
}

void sub_1DE9AE294(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v3;
  uint64_t v4;
  _BOOL4 v5;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v8;
  const std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v10;
  std::vector<int>::pointer begin;
  int *v12;
  std::vector<int>::pointer v13;

  v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  v4 = (uint64_t)__x->__result_;
  if (!((unint64_t)v3 | v4))
    goto LABEL_2;
  p_suffix = &this->__suffix_;
  v8 = &__x->__suffix_;
  if (v3 == &this->__suffix_ && v4 == (_QWORD)v8)
  {
    if (!std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)this->__result_, v4))
    {
LABEL_2:
      LOBYTE(v5) = 1;
      return v5;
    }
    v3 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *)this->__result_;
  }
  if (!v3 || (v10 = __x->__result_) == 0)
  {
LABEL_18:
    LOBYTE(v5) = 0;
    return v5;
  }
  LOBYTE(v5) = 0;
  if (v3 != p_suffix && v10 != v8)
  {
    v5 = std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&this->__position_, &__x->__position_);
    if (v5)
    {
      if (this->__n_ == __x->__n_)
      {
        begin = this->__subs_.__begin_;
        v12 = (int *)((char *)this->__subs_.__end_ - (char *)begin);
        v13 = __x->__subs_.__begin_;
        if (v12 == (int *)((char *)__x->__subs_.__end_ - (char *)v13))
        {
          LOBYTE(v5) = memcmp(begin, v13, (size_t)v12) == 0;
          return v5;
        }
      }
      goto LABEL_18;
    }
  }
  return v5;
}

std::regex_token_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_token_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_token_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::regex_token_iterator<std::__wrap_iter<const char *>, char> *v2;
  std::vector<int>::pointer begin;
  unint64_t v4;
  unint64_t v5;
  std::vector<int>::pointer end;
  __int32 *v7;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *p_suffix;
  int *v9;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v10;
  std::vector<std::ssub_match>::pointer v11;
  unint64_t v12;
  std::regex_token_iterator<std::__wrap_iter<const char *>, char>::value_type *v13;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v15;
  _OWORD v16[2];
  void *__p[3];
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;
  __int128 v19;
  __int128 v20;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v21;
  __int128 v22;
  std::__wrap_iter<const char *>::iterator_type i;

  v16[0] = *(_OWORD *)&this->__position_.__begin_.__i_;
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)&this->__position_.__end_.__i_ + 4);
  memset(__p, 0, sizeof(__p));
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(__p, (__int128 *)this->__position_.__match_.__matches_.__begin_, (__int128 *)this->__position_.__match_.__matches_.__end_, 0xAAAAAAAAAAAAAAABLL* (((char *)this->__position_.__match_.__matches_.__end_ - (char *)this->__position_.__match_.__matches_.__begin_) >> 3));
  v2 = (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)this->__result_;
  i = this->__position_.__match_.__position_start_.__i_;
  v20 = *(_OWORD *)&this->__position_.__match_.__prefix_.second.__i_;
  v21 = this->__position_.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v22 = *(_OWORD *)&this->__position_.__match_.__suffix_.matched;
  v18 = this->__position_.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  v19 = *(_OWORD *)&this->__position_.__match_.__unmatched_.matched;
  if (v2 == (std::regex_token_iterator<std::__wrap_iter<const char *>, char> *)&this->__suffix_)
  {
LABEL_12:
    p_suffix = 0;
    goto LABEL_19;
  }
  begin = this->__subs_.__begin_;
  v4 = this->__n_ + 1;
  if (v4 < this->__subs_.__end_ - begin)
  {
    this->__n_ = v4;
    v5 = begin[v4];
    goto LABEL_14;
  }
  this->__n_ = 0;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&this->__position_);
  memset(&v15.__match_.__prefix_, 0, 17);
  memset(&v15.__match_.__suffix_, 0, 17);
  v15.__match_.__ready_ = 0;
  v15.__match_.__position_start_.__i_ = 0;
  memset(&v15.__match_, 0, 41);
  memset(&v15, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&this->__position_, &v15))
  {
    end = this->__subs_.__end_;
    v7 = wmemchr(this->__subs_.__begin_, -1, end - this->__subs_.__begin_);
    p_suffix = 0;
    if (v7)
      v9 = v7;
    else
      v9 = end;
    if (v9 == this->__subs_.__end_ || !(_BYTE)v22)
      goto LABEL_19;
    v10 = v21;
    if (v21.second.__i_ != v21.first.__i_)
    {
      this->__suffix_.matched = 1;
      this->__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v10;
      p_suffix = &this->__suffix_;
      goto LABEL_19;
    }
    goto LABEL_12;
  }
  v5 = this->__subs_.__begin_[this->__n_];
LABEL_14:
  if ((_DWORD)v5 == -1)
  {
    p_suffix = &this->__position_.__match_.__prefix_;
  }
  else
  {
    v11 = this->__position_.__match_.__matches_.__begin_;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__position_.__match_.__matches_.__end_ - (char *)v11) >> 3);
    v13 = &v11[(int)v5];
    if (v12 <= v5)
      p_suffix = &this->__position_.__match_.__unmatched_;
    else
      p_suffix = v13;
  }
LABEL_19:
  this->__result_ = p_suffix;
  if (__p[0])
    operator delete(__p[0]);
  return this;
}

void sub_1DE9AE548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<PhonemeRepresentation::Phoneme>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      v8 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v8;
      result += 3;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    v4[1] = result;
  }
  return result;
}

void sub_1DE9AE5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__owns_one_state<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1EA931D78;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v16 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v16)
          v17 = v16;
        else
          v17 = (unsigned __int8 *)a3;
        if (v17 == (unsigned __int8 *)a2)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, v17);
        }
        if (v17 != (unsigned __int8 *)a3)
          ++v17;
        while (v17 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v17, 10, a3 - (char *)v17);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v17)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)v17, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v17 = v28;
          else
            v17 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v12 = (_QWORD *)operator new();
          v13 = *(_QWORD *)(a1 + 56);
          v14 = *(_QWORD *)(v13 + 8);
          v12[1] = v14;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v21 = (char *)memchr(v11, 10, a3 - v11);
          if (v21)
            v22 = v21;
          else
            v22 = a3;
          v23 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v22 == v11)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 8);
            v24[1] = v26;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11, v22);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v23);
          if (v22 == a3)
            v11 = v22;
          else
            v11 = v22 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return (unsigned __int8 *)a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
}

void sub_1DE9AE958(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
    }
    while (v8 != v14);
    if (v13 == v8)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == (char *)a3)
    return (unsigned __int8 *)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1EA9320D0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1EA932130;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_34:
      v14 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = *v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v14 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (unsigned __int8 *)&a2[v16];
  }
  if (v14 == (unsigned __int8 *)a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1EA931DD8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
LABEL_33:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != (unsigned __int8 *)a2 || v14 == (unsigned __int8 *)a3)
    goto LABEL_38;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1EA932130;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
      if (v14 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1EA9320D0;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_136;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_136;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_136;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        v11 = a3;
        goto LABEL_114;
      }
      v10 = *(unsigned __int8 *)v5;
      v11 = (char *)v5;
      if (v10 != 93)
        break;
LABEL_114:
      v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v39.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              v17 = *v11;
              if (v17 != 93)
              {
                v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if ((_DWORD)v19 == 92)
                    {
                      if ((_DWORD)v5)
                        v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      else
                        v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_120:
                      v20 = v21;
LABEL_121:
                      *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      v36 = v39.__r_.__value_.__r.__words[2];
                      v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v38.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v41) < 0)
                        operator delete(v40[0]);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v39.__r_.__value_.__l.__data_);
                      v11 = v20;
                      if ((v29 & 1) == 0)
                        goto LABEL_115;
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  v29 = 1;
                  v20 = v11;
                  goto LABEL_111;
                }
                v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
            {
              v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
                goto LABEL_43;
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            v15 = *v11;
            if (v15 == 92)
            {
              v16 = v11 + 1;
              if ((_DWORD)v5)
              {
                v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (i = 0; ; ++i)
          {
            v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
              break;
            if (&v8[-v5] == (char *)i)
              goto LABEL_135;
          }
          if (v14 == a3)
LABEL_135:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = __p.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!classname)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (j = 0; ; ++j)
          {
            v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93)
              break;
            if (&v8[-v5] == j)
              goto LABEL_135;
          }
          if (v14 == a3)
            goto LABEL_135;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
LABEL_137:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_137;
            v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          v32 = (void *)HIBYTE(v41);
          if (v41 < 0)
            v32 = v40[1];
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
          }
          else
          {
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v33 = __p.__r_.__value_.__l.__size_;
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = &__p;
              else
                v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &__p;
              else
                v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0)
            operator delete(v40[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = 0;
LABEL_110:
          v5 = (uint64_t)(v14 + 2);
          v20 = v9;
          goto LABEL_111;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_1DE9AF940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  unsigned int v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_64;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_64;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_64;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u)
      goto LABEL_64;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1DE9B01D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  std::basic_regex<char> *v30;
  int v31;
  int v32;

  v3 = a2;
  if (a2 == (char *)a3)
    return v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = (unsigned __int8 *)(a2 + 1);
  v8 = *a2;
  if ((a2 + 1 != (char *)a3 || v8 != 36)
    && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_13;
  }
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
  if (v11 == v3)
  {
    if (*v3 == 46)
    {
      v12 = (std::__node<char> *)operator new();
      v13 = a1->__end_;
      first = v13->__first_;
      v12->__vftable = (std::__node<char>_vtbl *)&off_1EA931DD8;
      v12[1].__vftable = (std::__node<char>_vtbl *)first;
      v13->__first_ = v12;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_13:
      v11 = v3 + 1;
      goto LABEL_14;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
  }
LABEL_14:
  if (v3 == v11 && v9 != a3 && *v3 == 92)
  {
    if (2 * (v3[1] == 40))
    {
      v15 = (uint64_t)&v3[2 * (v3[1] == 40)];
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v16 = a1->__marked_count_;
      do
      {
        v17 = (unsigned __int8 *)v15;
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v15, a3);
      }
      while (v17 != (unsigned __int8 *)v15);
      if (v17 == a3 || v17 + 1 == a3 || *v17 != 92 || v17[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v11 = (char *)(v17 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v16);
    }
    else
    {
      v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
      v19 = 2;
      if (!v18)
        v19 = 0;
      v11 = &v3[v19];
    }
  }
  if (v11 != v3)
  {
    if (v11 == (char *)a3)
      return (char *)a3;
    v20 = a1->__marked_count_ + 1;
    v21 = *v11;
    if (v21 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v11;
    }
    if (v11 + 1 == (char *)a3 || v21 != 92 || v11[1] != 123)
      return v11;
    v23 = (unsigned __int8 *)(v11 + 2);
    v32 = 0;
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23, a3, &v32);
    if (v23 == v24)
LABEL_47:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != a3)
    {
      v25 = v24 + 1;
      v26 = *v24;
      if (v26 == 44)
      {
        v31 = -1;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v24 + 1, a3, &v31);
        if (v27 != a3 && v27 + 1 != a3 && *v27 == 92 && v27[1] == 125)
        {
          v29 = v31;
          v28 = v32;
          if (v31 == -1)
          {
            v29 = -1;
          }
          else if (v31 < v32)
          {
            goto LABEL_47;
          }
          v11 = (char *)&v27[2 * (v27[1] == 125)];
          v30 = a1;
LABEL_54:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v20, 1);
          return v11;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        v11 = (char *)(v24 + 2);
        v28 = v32;
        v30 = a1;
        v29 = v32;
        goto LABEL_54;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  std::__owns_one_state<char> **p_end;
  unsigned int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::basic_regex<char> *v45;
  BOOL v46;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v48;
  std::__bracket_expression<char, std::regex_traits<char>> *v49;
  std::basic_regex<char> *v50;
  std::basic_regex<char> *v51;
  BOOL v52;
  std::basic_regex<char> v54;

  if (a2 == a3)
    return a2;
  v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_33;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_33;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      v20 = 2;
      return &a2[v20];
    }
    if (v6 != 94)
      goto LABEL_33;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1EA9320D0;
LABEL_22:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    v20 = 1;
    return &a2[v20];
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1EA932130;
    goto LABEL_22;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (!v8)
  {
    v8 = *v7 == 63;
    v9 = a2 + 2;
    if (v8 && v9 != a3)
    {
      v11 = (char)*v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        marked_count = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v11 != 61)
          goto LABEL_33;
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        v13 = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      v14 = v12 + 1;
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__start_);
      std::locale::~locale(&v54.__traits_.__loc_);
      if (v12 + 1 != a2)
        return v14;
    }
  }
LABEL_33:
  p_end = &a1->__end_;
  v24 = a1->__end_;
  v26 = a1->__marked_count_;
  v27 = (char)*a2;
  v28 = *a2;
  if (v27 <= 91)
  {
    v29 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_94;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v30 != a3 && *v30 == 41)
          {
            --a1->__open_count_;
            v29 = v30 + 1;
            goto LABEL_91;
          }
LABEL_94:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v38 = a1->__marked_count_;
        ++a1->__open_count_;
        v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v39 == a3)
          goto LABEL_94;
        v40 = v39;
        if (*v39 != 41)
          goto LABEL_94;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v38);
        --a1->__open_count_;
        v29 = v40 + 1;
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = *p_end;
        v37 = (*p_end)->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_1EA936DB0;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        *p_end = (std::__owns_one_state<char> *)(*p_end)->__first_;
        v29 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
      default:
        if (v27 == 91)
        {
          v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
          goto LABEL_91;
        }
        if (v27 != 63)
          goto LABEL_56;
        goto LABEL_58;
    }
  }
  v31 = (v27 - 92);
  if (v31 > 0x21)
    goto LABEL_56;
  v29 = a2;
  if (((1 << v31) & 0x300000006) != 0)
    goto LABEL_91;
  if (v31)
  {
    if (v31 == 31)
LABEL_58:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
    v29 = a2 + 1;
    goto LABEL_91;
  }
  v29 = a2;
  if (v28 != 92)
    goto LABEL_91;
  v32 = (char *)(a2 + 1);
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v33 = *v32;
  v34 = v33 - 48;
  if (v33 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v34);
LABEL_90:
    v29 = a2 + 2;
    goto LABEL_91;
  }
  if ((v33 - 49) <= 8)
  {
    v29 = a2 + 2;
    if (a2 + 2 == a3)
    {
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v41 = *v29;
        if ((v41 - 48) > 9)
          break;
        if (v34 >= 0x19999999)
          goto LABEL_95;
        ++v29;
        v34 = v41 + 10 * v34 - 48;
        if (v29 == a3)
        {
          v29 = a3;
          break;
        }
      }
      if (!v34)
LABEL_95:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v34 > v26)
      goto LABEL_95;
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v34);
    if (v32 != (char *)v29)
      goto LABEL_91;
  }
  v42 = *v32;
  if (v42 > 99)
  {
    if (v42 == 119)
    {
      v43 = a1;
      v44 = 0;
      goto LABEL_82;
    }
    if (v42 == 115)
    {
      v51 = a1;
      v52 = 0;
      goto LABEL_88;
    }
    if (v42 != 100)
      goto LABEL_83;
    v45 = a1;
    v46 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
    v48 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v48;
    goto LABEL_90;
  }
  switch(v42)
  {
    case 'D':
      v45 = a1;
      v46 = 1;
      goto LABEL_80;
    case 'S':
      v51 = a1;
      v52 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v51, v52);
      v48 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      v43 = a1;
      v44 = 1;
LABEL_82:
      v49 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
      v49->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v49, 95);
      goto LABEL_90;
  }
LABEL_83:
  v50 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v32 == (char *)v50)
    v29 = a2;
  else
    v29 = (unsigned __int8 *)v50;
LABEL_91:
  v14 = a2;
  if (v29 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
  return v14;
}

void sub_1DE9B0B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Pronounce_RuleImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Pronounce_RuleImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Pronounce_RuleImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *SiriTTS::PhoneticAlphabet::PhoneticAlphabet(uint64_t *a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  std::string::size_type size;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  std::string v12;
  uint64_t *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v13 = a1;
  if (v3 != v4)
  {
    while (1)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        v12.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
      }
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      size = v12.__r_.__value_.__l.__size_;
      operator delete(v12.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_9;
LABEL_10:
      v3 = (__int128 *)((char *)v3 + 24);
      if (v3 == v4)
      {
        v7 = *a1;
        v8 = (_OWORD *)a1[1];
        goto LABEL_13;
      }
    }
    if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
      goto LABEL_10;
LABEL_9:
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v13, v3);
    goto LABEL_10;
  }
  v8 = 0;
  v7 = 0;
LABEL_13:
  v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
  if (v8 == (_OWORD *)v7)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(v7, v8, v10, 1);
  return a1;
}

void sub_1DE9B0CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  BOOL v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  _QWORD *v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 *v149;
  _QWORD *v151;
  _BYTE v152[7];
  _BYTE v153[7];
  _BYTE v154[7];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[15];
  _BYTE v162[7];
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (*((char *)result + 23) >= 0)
    v4 = *((unsigned __int8 *)result + 23);
  else
    v4 = *((_QWORD *)result + 1);
  v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a3 + 1);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v9 = *((_QWORD *)a2 + 2);
      v10 = *a2;
      v11 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v11;
      *a3 = v10;
      *((_QWORD *)a3 + 2) = v9;
      v12 = *((unsigned __int8 *)a2 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a2 + 1);
      v13 = *((unsigned __int8 *)result + 23);
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)result + 1);
      if (v12 > v13)
      {
        v14 = *((_QWORD *)result + 2);
        v15 = *result;
        v16 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v16;
        *a2 = v15;
        *((_QWORD *)a2 + 2) = v14;
      }
    }
  }
  else
  {
    if (v5 > v3)
    {
      v6 = *((_QWORD *)result + 2);
      v7 = *result;
      v8 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v8;
LABEL_24:
      *a3 = v7;
      *((_QWORD *)a3 + 2) = v6;
      return result;
    }
    v17 = *((_QWORD *)result + 2);
    v18 = *result;
    v19 = *((_QWORD *)a2 + 2);
    *result = *a2;
    *((_QWORD *)result + 2) = v19;
    *a2 = v18;
    *((_QWORD *)a2 + 2) = v17;
    v20 = *((unsigned __int8 *)a3 + 23);
    if ((v20 & 0x80u) != 0)
      v20 = *((_QWORD *)a3 + 1);
    v21 = *((unsigned __int8 *)a2 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *((_QWORD *)a2 + 1);
    if (v20 > v21)
    {
      v6 = *((_QWORD *)a2 + 2);
      v7 = *a2;
      v22 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v22;
      goto LABEL_24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(unsigned __int8 *)(a4 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v9 > v10)
  {
    v11 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v12 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v12;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v11;
    v13 = *(unsigned __int8 *)(a3 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a3 + 8);
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    if (v13 > v14)
    {
      v15 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v15;
      v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned __int8 *)(a1 + 23);
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(a1 + 8);
      if (v17 > v18)
      {
        v19 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v20 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v20;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[7];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(a2 - 16);
      v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 24);
      v26 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72);
      v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(a2 - 16);
      v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a1 + 80);
      if (v28 > v29)
      {
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *v27;
        v32 = *(_QWORD *)(a2 - 8);
        *v27 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 24) = v31;
        *(_QWORD *)(a2 - 8) = v30;
        v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0)
          v33 = *(_QWORD *)(a1 + 80);
        v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(a1 + 56);
        if (v33 > v34)
        {
          v35 = *(_QWORD *)(a1 + 64);
          v36 = *v26;
          *v26 = *v27;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v27 = v36;
          *(_QWORD *)(a1 + 88) = v35;
          v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a1 + 56);
          v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0)
            v38 = *(_QWORD *)(a1 + 32);
          if (v37 > v38)
          {
            v39 = *(_QWORD *)(a1 + 40);
            v40 = *v25;
            *v25 = *v26;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v26 = v40;
            *(_QWORD *)(a1 + 64) = v39;
            v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(a1 + 32);
            v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0)
              v42 = *(_QWORD *)(a1 + 8);
            if (v41 > v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v25 = v44;
              *(_QWORD *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v12 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v12 + 8);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v12 + 8);
    v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v11 + 8);
    if (v15 > v18)
    {
      v19 = *(_QWORD *)v12;
      *(_DWORD *)v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&v45[3] = *(_DWORD *)(v12 + 19);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(_QWORD *)(v21 + 88) = *(_QWORD *)(a1 + v20 + 64);
        *(_BYTE *)(v21 + 71) = 0;
        *(_BYTE *)(v21 + 48) = 0;
        if (v20 == -48)
          break;
        v22 = *(unsigned __int8 *)(v21 + 47);
        v23 = *(_QWORD *)(v21 + 32);
        if ((v22 & 0x80u) == 0)
          v23 = v22;
        v20 -= 24;
        if (v15 <= v23)
        {
          v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      v24 = a1;
LABEL_23:
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(_BYTE *)(v24 + 23) = v16;
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

uint64_t *SiriTTS::PhoneticAlphabet::PhoneticAlphabet(uint64_t *a1, const void **a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  void *exception;
  const char *v23;
  const char *v24;
  std::__fs::filesystem::path v25;
  uint64_t v26;
  unint64_t v27;
  std::__fs::filesystem::path v28;
  uint64_t v29;
  unint64_t v30;
  std::__fs::filesystem::path v31;
  std::string v32;
  std::__fs::filesystem::path v33;
  std::__fs::filesystem::path v34;
  void *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  std::string pn;
  std::__fs::filesystem::path __p[5];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  SiriTTS::package_path((SiriTTS *)v35);
  v37 = *(_OWORD *)v35;
  v38 = v36;
  v35[1] = 0;
  v36 = 0;
  v35[0] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v34.__pn_, "PhoneticAlphabet");
  std::__fs::filesystem::operator/[abi:ne180100](&v34, (uint64_t)&v37, &v25);
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v32;
  std::string::basic_string[abi:ne180100]((uint64_t)&v32, v6 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v32, v10, v11);
  v13 = v12->__r_.__value_.__r.__words[0];
  v43[0] = v12->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v33.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v43 + 7);
  v33.__pn_.__r_.__value_.__r.__words[0] = v13;
  v33.__pn_.__r_.__value_.__l.__size_ = v43[0];
  *((_BYTE *)&v33.__pn_.__r_.__value_.__s + 23) = v14;
  v43[0] = 0;
  *(_QWORD *)((char *)v43 + 7) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v33, (uint64_t)&v25, &v28);
  memset(&v31, 0, sizeof(v31));
  std::string::append[abi:ne180100]<char const*,0>(&v31.__pn_, "symbols.json", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v31, (uint64_t)&v28, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    pn = __p[0].__pn_;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  std::ifstream::basic_ifstream(__p);
  if (!v41)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)a2 + 23) >= 0)
      v23 = (const char *)a2;
    else
      v23 = (const char *)*a2;
    if (*(char *)(a3 + 23) >= 0)
      v24 = (const char *)a3;
    else
      v24 = *(const char **)a3;
    StringFormatter::StringFormatter((StringFormatter *)&v28, "Unable to find symbols for '%s' with '%s'", v23, v24);
    MEMORY[0x1DF0EC99C](exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  LOBYTE(v37) = 0;
  *((_QWORD *)&v37 + 1) = 0;
  nlohmann::operator>>(__p, (uint64_t)&v37);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  v28.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  *(_OWORD *)&v28.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
  v29 = 0;
  v30 = 0x8000000000000000;
  if ((_BYTE)v37)
  {
    if (v37 == 2)
    {
      v28.__pn_.__r_.__value_.__r.__words[2] = **((_QWORD **)&v37 + 1);
    }
    else if (v37 == 1)
    {
      v28.__pn_.__r_.__value_.__l.__size_ = **((_QWORD **)&v37 + 1);
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v30 = 1;
  }
  while (1)
  {
    v26 = 0;
    *(_OWORD *)&v25.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    v25.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    v27 = 0x8000000000000000;
    if (v37 == 2)
    {
      v25.__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8);
    }
    else if (v37 == 1)
    {
      v25.__pn_.__r_.__value_.__l.__size_ = *((_QWORD *)&v37 + 1) + 8;
    }
    else
    {
      v27 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v28, (unsigned __int8 **)&v25))
    {
      break;
    }
    v15 = (__int128 *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v28);
    v16 = a1[1];
    if (v16 >= a1[2])
    {
      v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, v15);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, v15);
      v17 = v16 + 24;
    }
    a1[1] = v17;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v28);
  }
  v18 = (_OWORD *)a1[1];
  v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - *a1) >> 3));
  if (v18 == (_OWORD *)*a1)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(*a1, v18, v20, 1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37 + 1, v37);
  __p[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p[0].__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](&__p[0].__pn_.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v42);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE9B257C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a25 < 0)
    operator delete(a20);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  if (a17 < 0)
    operator delete(a12);
  if (a51 < 0)
    operator delete(a46);
  if (a63 < 0)
    operator delete(a58);
  if (a57 < 0)
    operator delete(a52);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1DE9B270C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::operator>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14[19];

  v14[18] = *(void **)MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v9, (uint64_t)v10, 1, (uint64_t)v12);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v12, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v14);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v9);
  return a1;
}

void sub_1DE9B2838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  char *v16;
  uint64_t v17;

  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)&a15);
  v16 = a14;
  if (a14 == &a11)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  BOOL v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  _QWORD *v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  __int128 *v149;
  _QWORD *v151;
  _BYTE v152[7];
  _BYTE v153[7];
  _BYTE v154[7];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[15];
  _BYTE v162[7];
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::string const&,std::string const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[7];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(a2 - 16);
      v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 24);
      v26 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72);
      v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(a2 - 16);
      v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a1 + 80);
      if (v28 > v29)
      {
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *v27;
        v32 = *(_QWORD *)(a2 - 8);
        *v27 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 24) = v31;
        *(_QWORD *)(a2 - 8) = v30;
        v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0)
          v33 = *(_QWORD *)(a1 + 80);
        v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(a1 + 56);
        if (v33 > v34)
        {
          v35 = *(_QWORD *)(a1 + 64);
          v36 = *v26;
          *v26 = *v27;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v27 = v36;
          *(_QWORD *)(a1 + 88) = v35;
          v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a1 + 56);
          v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0)
            v38 = *(_QWORD *)(a1 + 32);
          if (v37 > v38)
          {
            v39 = *(_QWORD *)(a1 + 40);
            v40 = *v25;
            *v25 = *v26;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v26 = v40;
            *(_QWORD *)(a1 + 64) = v39;
            v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(a1 + 32);
            v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0)
              v42 = *(_QWORD *)(a1 + 8);
            if (v41 > v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v25 = v44;
              *(_QWORD *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SiriTTS::PhoneticAlphabet::PhoneticAlphabet(std::vector<std::string> const&)::$_1 &,std::string*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v12 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v12 + 8);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v12 + 8);
    v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v11 + 8);
    if (v15 > v18)
    {
      v19 = *(_QWORD *)v12;
      *(_DWORD *)v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&v45[3] = *(_DWORD *)(v12 + 19);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(_QWORD *)(v21 + 88) = *(_QWORD *)(a1 + v20 + 64);
        *(_BYTE *)(v21 + 71) = 0;
        *(_BYTE *)(v21 + 48) = 0;
        if (v20 == -48)
          break;
        v22 = *(unsigned __int8 *)(v21 + 47);
        v23 = *(_QWORD *)(v21 + 32);
        if ((v22 & 0x80u) == 0)
          v23 = v22;
        v20 -= 24;
        if (v15 <= v23)
        {
          v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      v24 = a1;
LABEL_23:
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(_BYTE *)(v24 + 23) = v16;
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

void SiriTTS::PhoneticAlphabet::greedy_symbols_from_phoneme(uint64_t *a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  std::string::size_type size;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  unint64_t v12;
  char *v13;
  int64_t v14;
  int v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int64_t v21;
  int64_t v22;
  void *v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  std::string::size_type v28;
  void *exception;
  std::string *v30;
  uint64_t *v31;
  unint64_t v33;
  std::string::size_type v35;
  void *__s;
  std::string v37;
  _BYTE v38[31];
  char v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v6 = a2->__r_.__value_.__l.__size_;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v31 = a3;
    do
    {
      v33 = v7;
      v10 = *a1;
      v9 = a1[1];
      if (*a1 == v9)
      {
LABEL_44:
        v28 = std::string::rfind[abi:ne180100]((unsigned __int8 *)a2, v8) + 1;
        exception = __cxa_allocate_exception(0x10uLL);
        std::string::basic_string(&v37, a2, v28, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v37;
        else
          v30 = (std::string *)v37.__r_.__value_.__r.__words[0];
        StringFormatter::StringFormatter((StringFormatter *)v38, "Unable to symbolize phoneme [%s]", (const char *)v30);
        MEMORY[0x1DF0EC99C](exception, v38);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v11 = (std::string::size_type)a2;
      if ((v4 & 0x80u) == 0)
      {
        v12 = v4;
      }
      else
      {
        v11 = a2->__r_.__value_.__r.__words[0];
        v12 = size;
      }
      v13 = (char *)(v11 + v12);
      v35 = v11;
      __s = (void *)(v11 + v8);
      v14 = v12 - v8;
      while (1)
      {
        v15 = *(char *)(v10 + 23);
        v16 = v15 >= 0 ? (char *)v10 : *(char **)v10;
        v17 = v15 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(_QWORD *)(v10 + 8);
        if (v12 >= v8)
        {
          if (!v17)
            break;
          v19 = v13;
          if (v14 >= v17)
          {
            v20 = *v16;
            v21 = v14;
            v22 = v14;
            v23 = __s;
            do
            {
              v24 = v22 - v17;
              if (v24 == -1)
                break;
              v25 = (char *)memchr(v23, v20, v24 + 1);
              if (!v25)
                break;
              v19 = v25;
              if (!memcmp(v25, v16, v17))
                goto LABEL_27;
              v23 = v19 + 1;
              v22 = v13 - (v19 + 1);
            }
            while (v22 >= v17);
            v19 = v13;
LABEL_27:
            v11 = v35;
            v14 = v21;
          }
          v18 = (uint64_t)&v19[-v11];
          if (v19 == v13)
            v18 = -1;
        }
        else
        {
          v18 = -1;
        }
        if (v18 == v8)
          break;
        v10 += 24;
        if (v10 == v9)
          goto LABEL_44;
      }
      if (v33 >= v31[2])
      {
        v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v31, (__int128 *)v10);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v31, (__int128 *)v10);
        v7 = v33 + 24;
      }
      v31[1] = v7;
      if (*(char *)(v10 + 23) < 0)
        v26 = *(_QWORD *)(v10 + 8);
      else
        v26 = *(unsigned __int8 *)(v10 + 23);
      v8 += v26;
      v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      size = a2->__r_.__value_.__l.__size_;
      if ((v4 & 0x80u) == 0)
        v27 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      else
        v27 = a2->__r_.__value_.__l.__size_;
    }
    while (v8 < v27);
  }
}

void sub_1DE9B3BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::string::rfind[abi:ne180100](unsigned __int8 *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;

  if ((char)a1[23] < 0)
  {
    v3 = a1;
    a1 = *(unsigned __int8 **)a1;
    v2 = *((_QWORD *)v3 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = v2;
  if (v2 - v4 > 1)
    v5 = v4 + 1;
  else
    v5 = v2;
  v6 = &a1[v5];
  if (v5)
  {
    v7 = a1;
    v8 = &a1[v5];
    do
    {
      v9 = v7;
      v10 = v7;
      while (1)
      {
        v11 = *v10++;
        if (v11 == 32)
          break;
        v9 = v10;
        if (v10 == v6)
        {
          v9 = v8;
          goto LABEL_19;
        }
      }
      v7 = v9 + 1;
      v8 = v9;
    }
    while (v10 != v6);
  }
  else
  {
    v9 = a1;
  }
LABEL_19:
  if (v9 == v6)
    return -1;
  else
    return v9 - a1;
}

std::string *SiriTTS::PhonemeMapper::PhonemeMapper(std::string *this, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::string::pointer v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  unsigned __int8 *v18;
  size_t v19;
  std::string *v20;
  const std::string::value_type *v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  std::string::size_type i;
  std::string *data;
  uint64_t *v33;
  _QWORD *size;
  std::string::size_type v35;
  _QWORD *v36;
  std::string *v37;
  __int128 *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  void *exception;
  const char *v45;
  const char *v46;
  const char *v47;
  std::string v48;
  std::__fs::filesystem::path v49;
  std::string v50;
  std::__fs::filesystem::path v51;
  std::__fs::filesystem::path v52;
  void *v53[2];
  uint64_t v54;
  void *v55[2];
  uint64_t v56;
  std::__fs::filesystem::path v57;
  std::__fs::filesystem::path v58;
  std::string pn;
  std::__fs::filesystem::path __p[5];
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[5];

  v64[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v9 = *(_OWORD *)a3;
    this[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v10;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  v11 = &this[4].__r_.__value_.__s.__data_[8];
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  v12 = this + 4;
  this[4].__r_.__value_.__r.__words[2] = 0;
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(a3 + 23);
  else
    v14 = *(_QWORD *)(a3 + 8);
  v15 = *((unsigned __int8 *)a4 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a4 + 1);
  if (v14 == v15)
  {
    if (v16 >= 0)
      v17 = (const std::string::value_type *)a4;
    else
      v17 = *(const std::string::value_type **)a4;
    if ((v13 & 0x80) == 0)
    {
      if (*(_BYTE *)(a3 + 23))
      {
        v18 = (unsigned __int8 *)a3;
        while (*v18 == *(unsigned __int8 *)v17)
        {
          ++v18;
          ++v17;
          if (!--v13)
            goto LABEL_44;
        }
        goto LABEL_26;
      }
LABEL_44:
      SiriTTS::PhoneticAlphabet::PhoneticAlphabet((uint64_t *)__p, (const void **)a2, a3);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&this[3]);
      this[3] = __p[0].__pn_;
      memset(__p, 0, 24);
      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&pn);
      data = (std::string *)this[3].__r_.__value_.__l.__data_;
      for (i = this[3].__r_.__value_.__l.__size_; data != (std::string *)i; ++data)
      {
        pn.__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&this[4], (const void **)&data->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&pn);
        std::string::operator=((std::string *)(v33 + 7), data);
      }
      return this;
    }
    if (!memcmp(*(const void **)a3, v17, *(_QWORD *)(a3 + 8)))
      goto LABEL_44;
  }
LABEL_26:
  SiriTTS::package_path((SiriTTS *)v53);
  *(_OWORD *)v55 = *(_OWORD *)v53;
  v56 = v54;
  v53[1] = 0;
  v54 = 0;
  v53[0] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<char [17],void>(&v52.__pn_, "PhoneticAlphabet");
  std::__fs::filesystem::operator/[abi:ne180100](&v52, (uint64_t)v55, &v57);
  if (*((char *)a2 + 23) >= 0)
    v19 = *((unsigned __int8 *)a2 + 23);
  else
    v19 = *((_QWORD *)a2 + 1);
  v20 = &v50;
  std::string::basic_string[abi:ne180100]((uint64_t)&v50, v19 + 1);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*((char *)a2 + 23) >= 0)
      v21 = (const std::string::value_type *)a2;
    else
      v21 = *(const std::string::value_type **)a2;
    memmove(v20, v21, v19);
  }
  *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 95;
  v22 = *(char *)(a3 + 23);
  if (v22 >= 0)
    v23 = (const std::string::value_type *)a3;
  else
    v23 = *(const std::string::value_type **)a3;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a3 + 23);
  else
    v24 = *(_QWORD *)(a3 + 8);
  v25 = std::string::append(&v50, v23, v24);
  v26 = v25->__r_.__value_.__r.__words[0];
  v64[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v51.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v64 + 7);
  v51.__pn_.__r_.__value_.__r.__words[0] = v26;
  v51.__pn_.__r_.__value_.__l.__size_ = v64[0];
  *((_BYTE *)&v51.__pn_.__r_.__value_.__s + 23) = v27;
  v64[0] = 0;
  *(_QWORD *)((char *)v64 + 7) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v51, (uint64_t)&v57, &v58);
  std::operator+<char>();
  v28 = std::string::append(&v48, ".json");
  v29 = v28->__r_.__value_.__r.__words[0];
  v63[0] = v28->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v49.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v63 + 7);
  v49.__pn_.__r_.__value_.__r.__words[0] = v29;
  v49.__pn_.__r_.__value_.__l.__size_ = v63[0];
  *((_BYTE *)&v49.__pn_.__r_.__value_.__s + 23) = v30;
  std::__fs::filesystem::operator/[abi:ne180100](&v49, (uint64_t)&v58, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    pn = __p[0].__pn_;
  }
  if (SHIBYTE(v49.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v54) < 0)
    operator delete(v53[0]);
  std::ifstream::basic_ifstream(__p);
  if (!v61)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)a2 + 23) >= 0)
      v45 = (const char *)a2;
    else
      v45 = *(const char **)a2;
    if (*(char *)(a3 + 23) >= 0)
      v46 = (const char *)a3;
    else
      v46 = *(const char **)a3;
    if (*((char *)a4 + 23) >= 0)
      v47 = (const char *)a4;
    else
      v47 = *(const char **)a4;
    StringFormatter::StringFormatter((StringFormatter *)&v58, "Unable to find '%s' mapping from '%s' to '%s'", v45, v46, v47);
    MEMORY[0x1DF0EC99C](exception, &v58);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  LOBYTE(v55[0]) = 0;
  v55[1] = 0;
  nlohmann::operator>>(__p, (uint64_t)v55);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::map<std::string,std::string>,std::map<std::string,std::string>,0>(&v58, (unsigned __int8 *)v55);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&this[4], (_QWORD *)this[4].__r_.__value_.__l.__size_);
  size = (_QWORD *)v58.__pn_.__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = v58.__pn_.__r_.__value_.__r.__words[0];
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  v35 = v58.__pn_.__r_.__value_.__r.__words[2];
  this[4].__r_.__value_.__r.__words[2] = v58.__pn_.__r_.__value_.__r.__words[2];
  if (v35)
  {
    size[2] = v11;
    v58.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58.__pn_.__r_.__value_.__l.__size_;
    *(_OWORD *)&v58.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v58, size);
  memset(&v58, 0, sizeof(v58));
  v36 = (_QWORD *)v12->__r_.__value_.__r.__words[0];
  if (v12->__r_.__value_.__l.__data_ != v11)
  {
    v37 = 0;
    do
    {
      v38 = (__int128 *)(v36 + 4);
      if ((unint64_t)v37 >= v58.__pn_.__r_.__value_.__r.__words[2])
      {
        v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v58, v38);
      }
      else
      {
        if (*((char *)v36 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)v36[4], v36[5]);
        }
        else
        {
          v39 = *v38;
          v37->__r_.__value_.__r.__words[2] = v36[6];
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v39;
        }
        ++v37;
      }
      v58.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
      v40 = (_QWORD *)v36[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v36[2];
          v42 = *v41 == (_QWORD)v36;
          v36 = v41;
        }
        while (!v42);
      }
      v36 = v41;
    }
    while (v41 != (_QWORD *)v11);
  }
  SiriTTS::PhoneticAlphabet::PhoneticAlphabet((uint64_t *)&v57, (__int128 **)&v58);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&this[3]);
  this[3] = v57.__pn_;
  memset(&v57, 0, sizeof(v57));
  v53[0] = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  v57.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[1], LOBYTE(v55[0]));
  __p[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p[0].__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](&__p[0].__pn_.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v62);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  return this;
}

void sub_1DE9B438C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *__p;
  char a73;
  uint64_t v73;
  void **v74;
  uint64_t v75;

  if (a73 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a18 < 0)
    operator delete(a13);
  if (a67 < 0)
    operator delete(a62);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a61 < 0)
    operator delete(a56);
  if (a42 < 0)
    operator delete(a37);
  if (a54 < 0)
    operator delete(a49);
  if (a48 < 0)
    operator delete(a43);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v75, *(_QWORD **)(v73 + 104));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v73 + 71) < 0)
    operator delete(*v74);
  if (*(char *)(v73 + 47) < 0)
    operator delete(*a12);
  if (*(char *)(v73 + 23) < 0)
    operator delete(*(void **)v73);
  _Unwind_Resume(a1);
}

void SiriTTS::PhonemeMapper::map(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  uint64_t v11[3];
  void **v12;

  std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
  SiriTTS::PhonemeMapper::mapToList(a1, a2, v11);
  v6 = v11[0];
  v7 = v11[1];
  while (v6 != v7)
  {
    v8 = *(char *)(v6 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)v6;
    else
      v9 = *(const std::string::value_type **)v6;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = *(_QWORD *)(v6 + 8);
    std::string::append(a3, v9, v10);
    v6 += 24;
  }
  v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1DE9B4618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(exception_object);
}

void SiriTTS::PhonemeMapper::mapToList(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const void **v6;
  size_t v7;
  size_t v8;
  const void *v9;
  const void **v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  void **v16;
  void **v17;
  int v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  int v22;
  BOOL v23;
  int *v24;
  int v25;
  int v26;
  int v28;
  uint64_t v29;
  size_t v30;
  int v31;
  int v33;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  __int128 v39;
  const std::string::value_type *v40;
  UErrorCode *v41;
  int64_t v42;
  const std::string::value_type *v43;
  int v44;
  std::string::value_type *v45;
  int64_t v46;
  const std::string::value_type *v47;
  const std::string::value_type *v48;
  _OWORD *v49;
  __int128 v50;
  __int128 *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *p_p;
  uint64_t v60;
  std::string::size_type v61;
  __int128 v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int64_t v71;
  __int128 v72;
  const std::string::value_type *v73;
  UErrorCode *v74;
  int64_t v75;
  const std::string::value_type *v76;
  int v77;
  std::string::value_type *v78;
  int64_t v79;
  const std::string::value_type *v80;
  const std::string::value_type *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  std::string::size_type v88;
  std::string *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  std::string *v94;
  std::string::size_type v95;
  __int128 v96;
  std::string::size_type v97;
  std::string::size_type v98;
  __int128 v99;
  const char *v100;
  unint64_t v101;
  const std::string::value_type *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  const UChar *v109;
  int64_t v110;
  UText *v111;
  UText *v112;
  int32_t v113;
  int32_t v114;
  int32_t v115;
  int32_t v116;
  std::basic_string<char16_t>::size_type v117;
  std::string *v118;
  std::basic_string<char16_t>::size_type v119;
  std::basic_string<char16_t>::size_type v120;
  UErrorCode *v121;
  std::basic_string<char16_t>::size_type v122;
  std::string *v123;
  int32_t v124;
  const char *v125;
  unint64_t v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  const UChar *v134;
  int64_t v135;
  UText *v136;
  UText *v137;
  int32_t v138;
  int32_t v139;
  int32_t v140;
  int32_t v141;
  std::basic_string<char16_t>::size_type v142;
  std::string *v143;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v145;
  UErrorCode *v146;
  std::basic_string<char16_t>::size_type v147;
  void *exception;
  void *v149;
  std::string::size_type v150;
  unsigned __int8 v151;
  void *__p;
  uint64_t v153;
  unsigned __int8 v154;
  std::string v155;
  std::string v156;
  UErrorCode status[4];
  int64_t v158;
  std::string v159;
  std::string v160;
  UErrorCode v161;
  std::string v162;
  std::string v163;
  std::string v164;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v156 = *(std::string *)a2;
  v6 = a1 + 6;
  v7 = strlen((const char *)SiriTTS::PhonemeSystemLHP);
  v8 = v7;
  if ((*((char *)a1 + 71) & 0x80000000) == 0)
  {
    v9 = a1 + 6;
    if (v8 != *((unsigned __int8 *)a1 + 71))
      goto LABEL_11;
LABEL_10:
    if (memcmp(v9, (const void *)SiriTTS::PhonemeSystemLHP, v8))
      goto LABEL_11;
    v22 = *((char *)a1 + 23);
    if (v22 < 0)
    {
      if (a1[1] != (const void *)5)
        goto LABEL_11;
      v24 = (int *)*a1;
      if (*(_DWORD *)*a1 != 1395487329 || *((_BYTE *)*a1 + 4) != 65)
      {
LABEL_44:
        v25 = *v24;
        v26 = *((unsigned __int8 *)v24 + 4);
        if (v25 != 1227715689 || v26 != 84)
          goto LABEL_11;
        std::string::basic_string[abi:ne180100]<0>(&__p, ".");
        std::string::basic_string[abi:ne180100]<0>(&v149, "_");
        v28 = *(char *)(a2 + 23);
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          LOBYTE(v28) = *(_BYTE *)(a2 + 23);
        }
        else
        {
          v164 = *(std::string *)a2;
        }
        if ((v28 & 0x80u) == 0)
          v125 = (const char *)a2;
        else
          v125 = *(const char **)a2;
        if ((v28 & 0x80u) == 0)
          v126 = v28;
        else
          v126 = *(_QWORD *)(a2 + 8);
        UTFString::to_utf16((std::basic_string<char16_t> *)&v163, v125, v126);
        std::operator+<char>();
        if ((v151 & 0x80u) == 0)
          v127 = (const std::string::value_type *)&v149;
        else
          v127 = (const std::string::value_type *)v149;
        if ((v151 & 0x80u) == 0)
          v128 = v151;
        else
          v128 = v150;
        v129 = std::string::append(&v159, v127, v128);
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = std::string::append(&v160, "]) \\1");
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = &v162;
        else
          v133 = (std::string *)v162.__r_.__value_.__r.__words[0];
        UTFRegex::UTFRegex((UTFRegex *)&v160, (const char *)v133);
        while (1)
        {
          status[0] = U_ZERO_ERROR;
          LODWORD(v159.__r_.__value_.__l.__data_) = 0;
          v134 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? (const UChar *)&v163
               : (const UChar *)v163.__r_.__value_.__r.__words[0];
          v135 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(v163.__r_.__value_.__r.__words[2])
               : v163.__r_.__value_.__l.__size_;
          v136 = utext_openUChars(0, v134, v135, (UErrorCode *)&v159);
          v137 = SLODWORD(v159.__r_.__value_.__l.__data_) <= 0 ? v136 : 0;
          UTFRegex::set_text((UTFRegex *)&v160, v137, 1);
          if (!uregex_find((URegularExpression *)v160.__r_.__value_.__l.__data_, -1, status))
            break;
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v159, (URegularExpression **)&v160, 1);
          status[0] = U_ZERO_ERROR;
          v138 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
          status[0] = U_ZERO_ERROR;
          v139 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
          UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, (URegularExpression **)&v160, 2);
          v161 = U_ZERO_ERROR;
          v140 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          v161 = U_ZERO_ERROR;
          v141 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          v161 = U_ZERO_ERROR;
          v142 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v143 = &v159;
          else
            v143 = (std::string *)v159.__r_.__value_.__r.__words[0];
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
          else
            size = v159.__r_.__value_.__l.__size_;
          std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v142, v140 - v141, (const std::basic_string<char16_t>::value_type *)v143, size);
          v161 = U_ZERO_ERROR;
          v145 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, &v161);
          if (v158 >= 0)
            v146 = status;
          else
            v146 = *(UErrorCode **)status;
          if (v158 >= 0)
            v147 = HIBYTE(v158);
          else
            v147 = *(_QWORD *)&status[2];
          std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v145, v138 - v139, (const std::basic_string<char16_t>::value_type *)v146, v147);
          if (SHIBYTE(v158) < 0)
            operator delete(*(void **)status);
          if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v159.__r_.__value_.__l.__data_);
        }
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = &v163;
        else
          v123 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v124 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v124 = v163.__r_.__value_.__r.__words[1];
LABEL_368:
        UTFString::to_utf8(&v155, (const UChar *)v123, v124);
        UTFRegex::~UTFRegex((UTFRegex *)&v160);
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v162.__r_.__value_.__l.__data_);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        v156 = v155;
        *((_BYTE *)&v155.__r_.__value_.__s + 23) = 0;
        v155.__r_.__value_.__s.__data_[0] = 0;
        if ((char)v151 < 0)
          operator delete(v149);
        if ((char)v154 < 0)
          operator delete(__p);
        goto LABEL_11;
      }
    }
    else
    {
      if (v22 != 5)
        goto LABEL_11;
      v23 = *(_DWORD *)a1 == 1395487329 && *((_BYTE *)a1 + 4) == 65;
      v24 = (int *)a1;
      if (!v23)
        goto LABEL_44;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, ".");
    std::string::basic_string[abi:ne180100]<0>(&v149, "_");
    v33 = *(char *)(a2 + 23);
    if (v33 < 0)
    {
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      LOBYTE(v33) = *(_BYTE *)(a2 + 23);
    }
    else
    {
      v164 = *(std::string *)a2;
    }
    if ((v33 & 0x80u) == 0)
      v100 = (const char *)a2;
    else
      v100 = *(const char **)a2;
    if ((v33 & 0x80u) == 0)
      v101 = v33;
    else
      v101 = *(_QWORD *)(a2 + 8);
    UTFString::to_utf16((std::basic_string<char16_t> *)&v163, v100, v101);
    std::operator+<char>();
    if ((v151 & 0x80u) == 0)
      v102 = (const std::string::value_type *)&v149;
    else
      v102 = (const std::string::value_type *)v149;
    if ((v151 & 0x80u) == 0)
      v103 = v151;
    else
      v103 = v150;
    v104 = std::string::append(&v159, v102, v103);
    v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v160.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    v106 = std::string::append(&v160, "]) \\1 ");
    v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v108 = &v162;
    else
      v108 = (std::string *)v162.__r_.__value_.__r.__words[0];
    UTFRegex::UTFRegex((UTFRegex *)&v160, (const char *)v108);
    while (1)
    {
      status[0] = U_ZERO_ERROR;
      LODWORD(v159.__r_.__value_.__l.__data_) = 0;
      v109 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? (const UChar *)&v163
           : (const UChar *)v163.__r_.__value_.__r.__words[0];
      v110 = (v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v163.__r_.__value_.__r.__words[2])
           : v163.__r_.__value_.__l.__size_;
      v111 = utext_openUChars(0, v109, v110, (UErrorCode *)&v159);
      v112 = SLODWORD(v159.__r_.__value_.__l.__data_) <= 0 ? v111 : 0;
      UTFRegex::set_text((UTFRegex *)&v160, v112, 1);
      if (!uregex_find((URegularExpression *)v160.__r_.__value_.__l.__data_, -1, status))
        break;
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)&v159, (URegularExpression **)&v160, 1);
      status[0] = U_ZERO_ERROR;
      v113 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
      status[0] = U_ZERO_ERROR;
      v114 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, status);
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)status, (URegularExpression **)&v160, 2);
      v161 = U_ZERO_ERROR;
      v115 = uregex_end((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      v161 = U_ZERO_ERROR;
      v116 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      v161 = U_ZERO_ERROR;
      v117 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 2, &v161);
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v118 = &v159;
      else
        v118 = (std::string *)v159.__r_.__value_.__r.__words[0];
      if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v119 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
      else
        v119 = v159.__r_.__value_.__l.__size_;
      std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v117, v115 - v116, (const std::basic_string<char16_t>::value_type *)v118, v119);
      v161 = U_ZERO_ERROR;
      v120 = uregex_start((URegularExpression *)v160.__r_.__value_.__l.__data_, 1, &v161);
      if (v158 >= 0)
        v121 = status;
      else
        v121 = *(UErrorCode **)status;
      if (v158 >= 0)
        v122 = HIBYTE(v158);
      else
        v122 = *(_QWORD *)&status[2];
      std::basic_string<char16_t>::replace((std::basic_string<char16_t> *)&v163, v120, v113 - v114, (const std::basic_string<char16_t>::value_type *)v121, v122);
      if (SHIBYTE(v158) < 0)
        operator delete(*(void **)status);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
    }
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &v163;
    else
      v123 = (std::string *)v163.__r_.__value_.__r.__words[0];
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v124 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    else
      v124 = v163.__r_.__value_.__r.__words[1];
    goto LABEL_368;
  }
  if ((const void *)v7 == a1[7])
  {
    if (v7 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v9 = *v6;
    goto LABEL_10;
  }
LABEL_11:
  SiriTTS::PhoneticAlphabet::greedy_symbols_from_phoneme((uint64_t *)a1 + 9, &v156, (uint64_t *)&v160);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v11 = v160.__r_.__value_.__l.__size_;
  v10 = (const void **)v160.__r_.__value_.__r.__words[0];
  if (v160.__r_.__value_.__r.__words[0] == v160.__r_.__value_.__l.__size_)
    goto LABEL_64;
  v12 = 0;
  do
  {
    while (1)
    {
      v13 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(a1 + 12), v10);
      if (a1 + 13 == (const void **)v13)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        if (*((char *)v10 + 23) < 0)
          v10 = (const void **)*v10;
        StringFormatter::StringFormatter((StringFormatter *)&v164, "Unable to map phone symbol [%s]", (const char *)v10);
        MEMORY[0x1DF0EC99C](exception, &v164);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (*(char *)(v13 + 79) < 0)
      {
        if (*(_QWORD *)(v13 + 64))
        {
LABEL_16:
          v14 = (__int128 *)(v13 + 56);
          v15 = a3[1];
          if (v15 >= a3[2])
          {
            v16 = (void **)std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v14);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v14);
            v16 = (void **)(v15 + 24);
          }
          goto LABEL_25;
        }
      }
      else if (*(_BYTE *)(v13 + 79))
      {
        goto LABEL_16;
      }
      v17 = (void **)a3[1];
      if ((void **)*a3 != v17)
        break;
      v10 += 3;
      v12 = 1;
      if (v10 == (const void **)v11)
        goto LABEL_64;
    }
    v16 = v17 - 3;
    v18 = *((char *)v17 - 1);
    if (v18 < 0)
    {
      if (*(v17 - 2) == (void *)1 && *(_BYTE *)*v16 == 32)
      {
        operator delete(*v16);
LABEL_25:
        a3[1] = (uint64_t)v16;
        v17 = v16;
      }
    }
    else if (v18 == 1 && *(_BYTE *)v16 == 32)
    {
      goto LABEL_25;
    }
    v10 += 3;
  }
  while (v10 != (const void **)v11);
  if ((v12 & 1) != 0)
  {
    v19 = *a3;
    if ((void **)*a3 != v17)
    {
      v20 = *(char *)(v19 + 23);
      if (v20 < 0)
      {
        if (*(_QWORD *)(v19 + 8) != 1)
          goto LABEL_64;
        v21 = *(_BYTE **)v19;
      }
      else
      {
        v21 = (_BYTE *)*a3;
        if (v20 != 1)
          goto LABEL_64;
      }
      if (*v21 == 32)
      {
        if ((void **)(v19 + 24) != v17)
        {
          do
          {
            if (*(char *)(v19 + 23) < 0)
              operator delete(*(void **)v19);
            *(_OWORD *)v19 = *(_OWORD *)(v19 + 24);
            *(_QWORD *)(v19 + 16) = *(_QWORD *)(v19 + 40);
            *(_BYTE *)(v19 + 47) = 0;
            v29 = v19 + 48;
            *(_BYTE *)(v19 + 24) = 0;
            v19 += 24;
          }
          while ((void **)v29 != v17);
          v17 = (void **)a3[1];
        }
        while (v17 != (void **)v19)
        {
          if (*((char *)v17 - 1) < 0)
            operator delete(*(v17 - 3));
          v17 -= 3;
        }
        a3[1] = v19;
      }
    }
  }
LABEL_64:
  v30 = strlen((const char *)SiriTTS::PhonemeSystemLHP);
  if (*((char *)a1 + 71) < 0)
  {
    if ((const void *)v30 != a1[7])
      goto LABEL_174;
    if (v30 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v6 = (const void **)*v6;
  }
  else if (v30 != *((unsigned __int8 *)a1 + 71))
  {
    goto LABEL_174;
  }
  if (memcmp(v6, (const void *)SiriTTS::PhonemeSystemLHP, v30))
    goto LABEL_174;
  v31 = *((char *)a1 + 23);
  if (v31 < 0)
  {
    if (a1[1] != (const void *)5)
      goto LABEL_88;
    a1 = (const void **)*a1;
  }
  else if (v31 != 5)
  {
    goto LABEL_88;
  }
  if (*(_DWORD *)a1 != 1244488042 || *((_BYTE *)a1 + 4) != 80)
  {
LABEL_88:
    std::string::basic_string[abi:ne180100]<0>(status, "'");
    std::string::basic_string[abi:ne180100]<0>(&v155, ".");
    std::string::basic_string[abi:ne180100]<0>(&__p, "_");
    memset(&v159, 0, sizeof(v159));
    memset(&v164, 0, sizeof(v164));
    v35 = *a3;
    v36 = a3[1];
    if (*a3 == v36)
    {
      v65 = 0;
      goto LABEL_168;
    }
    v37 = 0;
    while (*(char *)(v35 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)v35, *(_QWORD *)(v35 + 8));
      if ((*(char *)(v35 + 23) & 0x80000000) == 0)
      {
        v38 = *(unsigned __int8 *)(v35 + 23);
        goto LABEL_94;
      }
      v40 = *(const std::string::value_type **)v35;
      v38 = *(_QWORD *)(v35 + 8);
LABEL_95:
      if (v158 >= 0)
        v41 = status;
      else
        v41 = *(UErrorCode **)status;
      if (v158 >= 0)
        v42 = HIBYTE(v158);
      else
        v42 = *(_QWORD *)&status[2];
      if (v42)
      {
        if (v38 >= v42)
        {
          v43 = &v40[v38];
          v44 = *(char *)v41;
          v45 = (std::string::value_type *)v40;
          do
          {
            v46 = v38 - v42;
            if (v46 == -1)
              break;
            v47 = (const std::string::value_type *)memchr(v45, v44, v46 + 1);
            if (!v47)
              break;
            v48 = v47;
            if (!memcmp(v47, v41, v42))
            {
              if (v48 == v43 || v48 - v40 == -1)
                break;
              goto LABEL_112;
            }
            v45 = (std::string::value_type *)(v48 + 1);
            v38 = v43 - (v48 + 1);
          }
          while (v38 >= v42);
        }
      }
      else
      {
LABEL_112:
        std::string::basic_string(&v162, (const std::string *)v35, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v149);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        v163 = v162;
        v37 = 1;
      }
      v49 = (_OWORD *)v164.__r_.__value_.__l.__size_;
      if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
      {
        v51 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (__int128 *)&v163);
      }
      else
      {
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v164.__r_.__value_.__l.__size_, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
        }
        else
        {
          v50 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
          *(_QWORD *)(v164.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
          *v49 = v50;
        }
        v51 = (_OWORD *)((char *)v49 + 24);
      }
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      v52 = *(unsigned __int8 *)(v35 + 23);
      v53 = *(_QWORD *)(v35 + 8);
      if ((v52 & 0x80u) == 0)
        v54 = *(unsigned __int8 *)(v35 + 23);
      else
        v54 = *(_QWORD *)(v35 + 8);
      v55 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v55 = v155.__r_.__value_.__l.__size_;
      if (v54 == v55)
      {
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v155;
        else
          v56 = (std::string *)v155.__r_.__value_.__r.__words[0];
        if ((v52 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v35, v56, *(_QWORD *)(v35 + 8)))
            goto LABEL_150;
        }
        else
        {
          if (!*(_BYTE *)(v35 + 23))
            goto LABEL_150;
          v57 = 0;
          while (*(unsigned __int8 *)(v35 + v57) == v56->__r_.__value_.__s.__data_[v57])
          {
            if (v52 == ++v57)
              goto LABEL_150;
          }
        }
      }
      v58 = v154;
      if ((v154 & 0x80u) != 0)
        v58 = v153;
      if (v54 != v58)
        goto LABEL_160;
      if ((v154 & 0x80u) == 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if ((v52 & 0x80) == 0)
      {
        if ((_DWORD)v52)
        {
          v60 = 0;
          while (*(unsigned __int8 *)(v35 + v60) == p_p[v60])
          {
            if (v52 == ++v60)
              goto LABEL_150;
          }
          goto LABEL_160;
        }
LABEL_150:
        if ((v37 & 1) != 0)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v162);
          v61 = v164.__r_.__value_.__r.__words[0];
          if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0)
            operator delete(*(void **)v164.__r_.__value_.__l.__data_);
          v62 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
          *(_QWORD *)(v61 + 16) = *((_QWORD *)&v162.__r_.__value_.__l + 2);
          *(_OWORD *)v61 = v62;
          v51 = (__int128 *)v164.__r_.__value_.__l.__size_;
        }
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, (std::string *)v164.__r_.__value_.__l.__data_, v51, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v51 - v164.__r_.__value_.__r.__words[0]) >> 3));
        v64 = v164.__r_.__value_.__l.__size_;
        v63 = v164.__r_.__value_.__r.__words[0];
        while (v64 != v63)
        {
          if (*(char *)(v64 - 1) < 0)
            operator delete(*(void **)(v64 - 24));
          v64 -= 24;
        }
        v37 = 0;
        v164.__r_.__value_.__l.__size_ = v63;
        goto LABEL_160;
      }
      if (!memcmp(*(const void **)v35, p_p, v53))
        goto LABEL_150;
LABEL_160:
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      v35 += 24;
      if (v35 == v36)
      {
        v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
        if ((v37 & 1) != 0)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v163);
          v66 = v164.__r_.__value_.__r.__words[0];
          if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0)
            operator delete(*(void **)v164.__r_.__value_.__l.__data_);
          v67 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
          *(_QWORD *)(v66 + 16) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
          *(_OWORD *)v66 = v67;
          v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
        }
        goto LABEL_168;
      }
    }
    v38 = *(unsigned __int8 *)(v35 + 23);
    v39 = *(_OWORD *)v35;
    v163.__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v39;
LABEL_94:
    v40 = (const std::string::value_type *)v35;
    goto LABEL_95;
  }
  std::string::basic_string[abi:ne180100]<0>(status, "'");
  std::string::basic_string[abi:ne180100]<0>(&v155, ".");
  std::string::basic_string[abi:ne180100]<0>(&__p, "_");
  memset(&v159, 0, sizeof(v159));
  memset(&v164, 0, sizeof(v164));
  v68 = *a3;
  v69 = a3[1];
  if (*a3 == v69)
  {
    v65 = 0;
    goto LABEL_168;
  }
  v70 = 0;
  while (2)
  {
    if ((*(char *)(v68 + 23) & 0x80000000) == 0)
    {
      v71 = *(unsigned __int8 *)(v68 + 23);
      v72 = *(_OWORD *)v68;
      v163.__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 16);
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v72;
      goto LABEL_183;
    }
    std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)v68, *(_QWORD *)(v68 + 8));
    if (*(char *)(v68 + 23) < 0)
    {
      v73 = *(const std::string::value_type **)v68;
      v71 = *(_QWORD *)(v68 + 8);
    }
    else
    {
      v71 = *(unsigned __int8 *)(v68 + 23);
LABEL_183:
      v73 = (const std::string::value_type *)v68;
    }
    if (v158 >= 0)
      v74 = status;
    else
      v74 = *(UErrorCode **)status;
    if (v158 >= 0)
      v75 = HIBYTE(v158);
    else
      v75 = *(_QWORD *)&status[2];
    if (v75)
    {
      if (v71 >= v75)
      {
        v76 = &v73[v71];
        v77 = *(char *)v74;
        v78 = (std::string::value_type *)v73;
        do
        {
          v79 = v71 - v75;
          if (v79 == -1)
            break;
          v80 = (const std::string::value_type *)memchr(v78, v77, v79 + 1);
          if (!v80)
            break;
          v81 = v80;
          if (!memcmp(v80, v74, v75))
          {
            if (v81 == v76 || v81 - v73 == -1)
              break;
            goto LABEL_201;
          }
          v78 = (std::string::value_type *)(v81 + 1);
          v71 = v76 - (v81 + 1);
        }
        while (v71 >= v75);
      }
    }
    else
    {
LABEL_201:
      std::string::basic_string(&v162, (const std::string *)v68, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v149);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
      v163 = v162;
      v70 = 1;
    }
    v82 = (_OWORD *)v164.__r_.__value_.__l.__size_;
    if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
    {
      v84 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (__int128 *)&v163);
    }
    else
    {
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v164.__r_.__value_.__l.__size_, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
      }
      else
      {
        v83 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
        *(_QWORD *)(v164.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
        *v82 = v83;
      }
      v84 = (_OWORD *)((char *)v82 + 24);
    }
    v164.__r_.__value_.__l.__size_ = (std::string::size_type)v84;
    v85 = *(unsigned __int8 *)(v68 + 23);
    v86 = *(_QWORD *)(v68 + 8);
    if ((v85 & 0x80u) == 0)
      v87 = *(unsigned __int8 *)(v68 + 23);
    else
      v87 = *(_QWORD *)(v68 + 8);
    v88 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v88 = v155.__r_.__value_.__l.__size_;
    if (v87 == v88)
    {
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &v155;
      else
        v89 = (std::string *)v155.__r_.__value_.__r.__words[0];
      if ((v85 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v68, v89, *(_QWORD *)(v68 + 8)))
          goto LABEL_226;
      }
      else if (*(_BYTE *)(v68 + 23))
      {
        v90 = 0;
        while (*(unsigned __int8 *)(v68 + v90) == v89->__r_.__value_.__s.__data_[v90])
        {
          if (v85 == ++v90)
            goto LABEL_239;
        }
        goto LABEL_226;
      }
LABEL_239:
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, (std::string *)v164.__r_.__value_.__l.__data_, v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v84 - v164.__r_.__value_.__r.__words[0]) >> 3));
      v95 = v164.__r_.__value_.__l.__size_;
      v94 = (std::string *)v164.__r_.__value_.__r.__words[0];
      while ((std::string *)v95 != v94)
      {
        if (*(char *)(v95 - 1) < 0)
          operator delete(*(void **)(v95 - 24));
        v95 -= 24;
      }
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
      if ((v70 & 1) != 0)
      {
        if ((unint64_t)v94 >= v164.__r_.__value_.__r.__words[2])
        {
          v97 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v164, (__int128 *)status);
        }
        else
        {
          if (SHIBYTE(v158) < 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)status, *(std::string::size_type *)&status[2]);
          }
          else
          {
            v96 = *(_OWORD *)status;
            v94->__r_.__value_.__r.__words[2] = v158;
            *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v96;
          }
          v97 = (std::string::size_type)&v94[1];
        }
        v70 = 0;
        v164.__r_.__value_.__l.__size_ = v97;
      }
      else
      {
        v70 = 0;
      }
    }
    else
    {
LABEL_226:
      v91 = v154;
      if ((v154 & 0x80u) != 0)
        v91 = v153;
      if (v87 == v91)
      {
        if ((v154 & 0x80u) == 0)
          v92 = (unsigned __int8 *)&__p;
        else
          v92 = (unsigned __int8 *)__p;
        if ((v85 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v68, v92, v86))
            goto LABEL_239;
        }
        else
        {
          if (!(_DWORD)v85)
            goto LABEL_239;
          v93 = 0;
          while (*(unsigned __int8 *)(v68 + v93) == v92[v93])
          {
            if (v85 == ++v93)
              goto LABEL_239;
          }
        }
      }
    }
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    v68 += 24;
    if (v68 != v69)
      continue;
    break;
  }
  v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
  if ((v70 & 1) != 0)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)status, (const void **)v164.__r_.__value_.__l.__data_, (uint64_t)&v163);
    v98 = v164.__r_.__value_.__r.__words[0];
    if (*(char *)(v164.__r_.__value_.__r.__words[0] + 23) < 0)
      operator delete(*(void **)v164.__r_.__value_.__l.__data_);
    v99 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
    *(_QWORD *)(v98 + 16) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
    *(_OWORD *)v98 = v99;
    v65 = (std::string *)v164.__r_.__value_.__r.__words[0];
  }
LABEL_168:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v159, (std::string *)v159.__r_.__value_.__l.__size_, v65, (__int128 *)v164.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164.__r_.__value_.__l.__size_ - (_QWORD)v65) >> 3));
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a3);
  *(std::string *)a3 = v159;
  memset(&v159, 0, sizeof(v159));
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if ((char)v154 < 0)
    operator delete(__p);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158) < 0)
    operator delete(*(void **)status);
LABEL_174:
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
}

void sub_1DE9B58BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n1, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n2)
{
  std::basic_string<char16_t>::size_type v5;
  const std::basic_string<char16_t>::value_type *v6;
  std::basic_string<char16_t>::size_type v7;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v10;
  std::basic_string<char16_t>::size_type v11;
  std::basic_string<char16_t>::size_type v12;
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t>::size_type v14;
  char *v15;
  std::basic_string<char16_t>::size_type v16;
  std::basic_string<char16_t>::size_type v17;

  v5 = __n2;
  v6 = __s;
  v7 = __pos;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1)
        v11 = __n1;
      else
        v11 = size - __pos;
      v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2)
        goto LABEL_13;
      v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_39:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v10 = size - __pos;
  if (size < __pos)
    goto LABEL_39;
  if (v10 >= __n1)
    v11 = __n1;
  else
    v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  if (v11 - size + 10 < __n2)
  {
    v12 = 10;
LABEL_13:
    std::basic_string<char16_t>::__grow_by_and_replace(this, v12, size + __n2 - (v12 + v11), size, v7, v11, __n2, __s);
    return this;
  }
  v13 = this;
LABEL_16:
  if (__n2 == v11)
  {
    v11 = __n2;
  }
  else
  {
    v14 = v10 - v11;
    if (v10 != v11)
    {
      v15 = (char *)v13 + 2 * v7;
      v16 = __n2 - v11;
      if (__n2 < v11)
      {
        if (__n2)
          memmove((char *)v13 + 2 * v7, __s, 2 * __n2);
        memmove(&v15[2 * v5], &v15[2 * v11], 2 * v14);
        v17 = size + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + 2 * size > (char *)__s && v15 + 2 <= (char *)__s)
      {
        if (&v15[2 * v11] <= (char *)__s)
        {
          v6 = &__s[v16];
        }
        else
        {
          if (v11)
            memmove((char *)v13 + 2 * v7, __s, 2 * v11);
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          v11 = 0;
        }
      }
      memmove((char *)v13 + 2 * v7 + 2 * v5, (char *)v13 + 2 * v7 + 2 * v11, 2 * v14);
    }
  }
  if (v5)
    memmove((char *)v13 + 2 * v7, v6, 2 * v5);
  v17 = v5 - v11 + size;
LABEL_34:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v17;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  v13->__r_.__value_.__s.__data_[v17] = 0;
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::basic_string<char16_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char16_t>::size_type v24;
  std::basic_string<char16_t>::size_type v25;

  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (__old_cap > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v19);
  v21 = (std::basic_string<char16_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 2 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  if (__old_cap != 10)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

uint64_t **SiriTTS::TextToPhoneme::TextToPhoneme(uint64_t **a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  TTSSynthesizer *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  void *v21[2];
  char v22;

  *((_OWORD *)a1 + 1) = 0u;
  v6 = (uint64_t)(a1 + 2);
  *(_OWORD *)a1 = 0u;
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1EA932BE0;
  _ZNSt3__115allocate_sharedB8ne180100IN14TTSSynthesizer22TTSSynthesizerInternalENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v7 + 3);
  *(_QWORD *)&v8 = v7 + 3;
  *((_QWORD *)&v8 + 1) = v7;
  v9 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  TTSSynthesizer::set_fe_only((TTSSynthesizer *)*a1, 1);
  v12 = (TTSSynthesizer *)*a1;
  std::string::basic_string[abi:ne180100]<0>(v21, &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  TTSSynthesizer::initialize((uint64_t *)v12, a2, (__int128 *)v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  if (v13)
  {
    v14 = **a1;
    v15 = (std::string *)operator new(0x90uLL);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9362C8;
    v21[0] = SiriTTS::PhonemeMapper::PhonemeMapper(v15 + 1, (__int128 *)(v14 + 344), v14 + 320, (__int128 *)a3);
    v21[1] = v15;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v6, (__int128 *)v21);
    v16 = (std::__shared_weak_count *)v21[1];
    if (v21[1])
    {
      v17 = (unint64_t *)((char *)v21[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return a1;
}

void sub_1DE9B5FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v24;

  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9362C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9362C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SiriTTS::PhonemeMapper>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 120, *(_QWORD **)(a1 + 128));
  v2 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__shared_ptr_emplace<TTSSynthesizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTSSynthesizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TTSSynthesizer>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

void SiriTTS::TextToPhoneme::text_to_phoneme(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  std::string *v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::string::size_type v26;
  const char *v27;
  std::string::size_type v28;
  size_t v29;
  char *v30;
  std::string *v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  char v34;
  size_t v35;
  char *v36;
  void **v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  unsigned int v40;
  uint64_t v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  _BYTE *v45;
  uint64_t v46;
  std::string *v47;
  const void **v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  std::string *v66;
  std::__shared_weak_count *v67;
  std::string v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  _QWORD v75[3];
  _QWORD *v76;
  void *__p;
  std::string::size_type v78;
  unsigned __int8 v79;
  void **p_p;
  void **v81;
  size_t v82;
  uint64_t v83;
  void **v84;
  std::string v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v85, *(_QWORD *)(**(_QWORD **)a1 + 240));
  size = v85.__r_.__value_.__l.__size_;
  v74 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
  v6 = (std::__shared_weak_count *)v85.__r_.__value_.__l.__size_;
  if (v85.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v10 = v74;
  v75[0] = &off_1EA931C40;
  v75[1] = &v71;
  v76 = v75;
  p_p = &__p;
  std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::__clone((uint64_t)v75, &__p);
  if (!p_p)
  {
    v84 = 0;
    goto LABEL_23;
  }
  if (p_p == &__p)
  {
    v86[0] = &v85;
    (*((void (**)(void **, std::string *))__p + 3))(&__p, &v85);
  }
  else
  {
    v86[0] = (*((uint64_t (**)(void))*p_p + 2))();
  }
  v84 = 0;
  v11 = operator new(0x28uLL);
  v12 = (void **)v11;
  *v11 = &off_1EA931B90;
  if (!v86[0])
  {
    v13 = v11 + 4;
    goto LABEL_16;
  }
  if ((std::string *)v86[0] != &v85)
  {
    v13 = v86;
    v11[4] = v86[0];
LABEL_16:
    *v13 = 0;
    goto LABEL_18;
  }
  v11[4] = v11 + 1;
  (*(void (**)(std::string *))(v85.__r_.__value_.__r.__words[0] + 24))(&v85);
LABEL_18:
  v84 = v12;
  v14 = (std::string *)v86[0];
  if ((std::string *)v86[0] == &v85)
  {
    v15 = 4;
    v14 = &v85;
  }
  else
  {
    if (!v86[0])
      goto LABEL_23;
    v15 = 5;
  }
  (*(void (**)(void))(v14->__r_.__value_.__r.__words[0] + 8 * v15))();
LABEL_23:
  Observable::on_event(v10, "tts.feature.frontend", &v81, &v69);
  v16 = v84;
  if (v84 == (void **)&v81)
  {
    v17 = 4;
    v16 = (void **)&v81;
  }
  else
  {
    if (!v84)
      goto LABEL_28;
    v17 = 5;
  }
  (*((void (**)(void))*v16 + v17))();
LABEL_28:
  v18 = p_p;
  if (p_p == &__p)
  {
    v19 = 4;
    v18 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_33;
    v19 = 5;
  }
  (*((void (**)(void))*v18 + v19))();
LABEL_33:
  v20 = v76;
  if (v76 == v75)
  {
    v21 = 4;
    v20 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_38;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_38:
  TTSSynthesizer::synthesize_text(*(uint64_t ***)a1, a2);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v22 = v71;
  v64 = v72;
  if (v71 == v72)
    goto LABEL_146;
  do
  {
    memset(&v68, 0, sizeof(v68));
    v23 = *v22;
    v24 = v22[1];
    if (*v22 != v24)
    {
      while (*(_BYTE *)(v23 + 24))
      {
LABEL_101:
        v23 += 216;
        if (v23 == v24)
        {
          v40 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v68.__r_.__value_.__l.__size_)
              goto LABEL_119;
            v42 = (std::string *)v68.__r_.__value_.__r.__words[0];
            if (*(_BYTE *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_ - 1) == 32)
            {
              v41 = --v68.__r_.__value_.__l.__size_;
LABEL_109:
              v42->__r_.__value_.__s.__data_[v41] = 0;
              if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                v40 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
                if (!*((_BYTE *)&v68.__r_.__value_.__s + 23))
                  goto LABEL_119;
                goto LABEL_111;
              }
            }
            if (!v68.__r_.__value_.__l.__size_)
              goto LABEL_118;
            v44 = (std::string *)v68.__r_.__value_.__r.__words[0];
            if (*(_BYTE *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_ - 1) != 95)
              goto LABEL_118;
            v43 = --v68.__r_.__value_.__l.__size_;
          }
          else
          {
            if (!*((_BYTE *)&v68.__r_.__value_.__s + 23))
              goto LABEL_119;
            if (*((_BYTE *)&v67 + HIBYTE(v68.__r_.__value_.__r.__words[2]) + 7) == 32)
            {
              v41 = HIBYTE(v68.__r_.__value_.__r.__words[2]) - 1;
              --*((_BYTE *)&v68.__r_.__value_.__s + 23);
              v42 = &v68;
              goto LABEL_109;
            }
LABEL_111:
            if (*((_BYTE *)&v67 + v40 + 7) != 95)
              goto LABEL_118;
            v43 = v40 - 1;
            *((_BYTE *)&v68.__r_.__value_.__s + 23) = v40 - 1;
            v44 = &v68;
          }
          v45 = (char *)v44 + v43;
          goto LABEL_117;
        }
      }
      if (*(char *)(v23 + 119) < 0)
      {
        std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v23 + 96), *(_QWORD *)(v23 + 104));
      }
      else
      {
        v25 = *(_OWORD *)(v23 + 96);
        v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 112);
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v25;
      }
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if (!*(_DWORD *)(v23 + 160))
      {
        v27 = ".";
        if (!*(_DWORD *)(v23 + 172))
          goto LABEL_59;
        goto LABEL_58;
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = v85.__r_.__value_.__l.__size_;
        if (v85.__r_.__value_.__l.__size_ != 1)
        {
LABEL_54:
          v27 = "_";
          if (!v26)
          {
            v28 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v28 = v68.__r_.__value_.__l.__size_;
            v27 = "_";
            if (!v28)
              goto LABEL_99;
          }
          goto LABEL_58;
        }
        v27 = "_";
        if (*v85.__r_.__value_.__l.__data_ != 35)
        {
LABEL_58:
          MEMORY[0x1DF0ECA80](&v81, v27);
LABEL_59:
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          else
            v29 = v85.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 1);
          if ((v79 & 0x80u) == 0)
            v30 = (char *)&__p;
          else
            v30 = (char *)__p;
          if (v29)
          {
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &v85;
            else
              v31 = (std::string *)v85.__r_.__value_.__r.__words[0];
            memmove(v30, v31, v29);
          }
          *(_WORD *)&v30[v29] = 32;
          if ((v79 & 0x80u) == 0)
            v32 = (const std::string::value_type *)&__p;
          else
            v32 = (const std::string::value_type *)__p;
          if ((v79 & 0x80u) == 0)
            v33 = v79;
          else
            v33 = v78;
          std::string::append(&v68, v32, v33);
          if ((char)v79 < 0)
            operator delete(__p);
          v34 = HIBYTE(v83);
          if (v83 >= 0)
            v35 = HIBYTE(v83);
          else
            v35 = v82;
          if (v35)
          {
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v35 + 1);
            if ((v79 & 0x80u) == 0)
              v36 = (char *)&__p;
            else
              v36 = (char *)__p;
            if (v83 >= 0)
              v37 = (void **)&v81;
            else
              v37 = v81;
            memmove(v36, v37, v35);
            *(_WORD *)&v36[v35] = 32;
            if ((v79 & 0x80u) == 0)
              v38 = (const std::string::value_type *)&__p;
            else
              v38 = (const std::string::value_type *)__p;
            if ((v79 & 0x80u) == 0)
              v39 = v79;
            else
              v39 = v78;
            std::string::append(&v68, v38, v39);
            if ((char)v79 < 0)
              operator delete(__p);
            v34 = HIBYTE(v83);
          }
          if (v34 < 0)
            operator delete(v81);
        }
      }
      else
      {
        v26 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v85.__r_.__value_.__r.__words[2]) != 1 || v85.__r_.__value_.__s.__data_[0] != 35)
          goto LABEL_54;
      }
LABEL_99:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      goto LABEL_101;
    }
LABEL_118:
    while (1)
    {
      v40 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
LABEL_119:
      if ((v40 & 0x80) != 0)
        break;
      if (!v40 || *((_BYTE *)&v67 + v40 + 7) != 32)
        goto LABEL_127;
      v46 = v40 - 1;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v46;
      v47 = &v68;
LABEL_126:
      v45 = (char *)v47 + v46;
LABEL_117:
      *v45 = 0;
    }
    if (v68.__r_.__value_.__l.__size_)
    {
      v47 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_ - 1) == 32)
      {
        v46 = --v68.__r_.__value_.__l.__size_;
        goto LABEL_126;
      }
    }
LABEL_127:
    v48 = *(const void ***)(a1 + 16);
    if (v48)
    {
      SiriTTS::PhonemeMapper::map(v48, (uint64_t)&v68, &v85);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v85;
      else
        v49 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        v50 = v85.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v49, v50);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
    }
    else
    {
      if ((v40 & 0x80u) == 0)
        v51 = &v68;
      else
        v51 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v40 & 0x80u) == 0)
        v52 = v40;
      else
        v52 = v68.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v51, v52);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    v22 += 19;
  }
  while (v22 != v64);
LABEL_146:
  v53 = v70;
  v66 = v69;
  v67 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v55 = __ldxr(p_shared_owners);
    while (__stxr(v55 + 1, p_shared_owners));
  }
  Observable::remove_observer(v10, (const void ***)&v66);
  if (v53)
  {
    v56 = (unint64_t *)&v53->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v58 = v70;
  if (v70)
  {
    v59 = (unint64_t *)&v70->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<FrontendFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1DE9B68FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::vector<FrontendFeature>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<FrontendFeature>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

_QWORD *std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA931C40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA931C40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::operator()(uint64_t a1, FrontendFeature *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  FrontendFeature *v11;
  FrontendFeature *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  FrontendFeature *v22;
  char *v23;
  FrontendFeature *v24;
  FrontendFeature *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if (v4 >= v5)
  {
    v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - *(_QWORD *)v3) >> 3);
    if (v7 + 1 > 0x1AF286BCA1AF286)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - *(_QWORD *)v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0xD79435E50D7943)
      v10 = 0x1AF286BCA1AF286;
    else
      v10 = v9;
    v28 = v3 + 16;
    if (v10)
    {
      if (v10 > 0x1AF286BCA1AF286)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (FrontendFeature *)operator new(152 * v10);
    }
    else
    {
      v11 = 0;
    }
    v24 = v11;
    v25 = (FrontendFeature *)((char *)v11 + 152 * v7);
    v27 = (char *)v11 + 152 * v10;
    FrontendFeature::FrontendFeature(v25, a2);
    v12 = v25;
    v6 = (char *)v25 + 152;
    v26 = (char *)v25 + 152;
    v14 = *(char **)v3;
    v13 = *(char **)(v3 + 8);
    if (v13 == *(char **)v3)
    {
      v22 = *(FrontendFeature **)(v3 + 8);
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = (char *)v12 + v15;
        v17 = &v13[v15];
        *((_QWORD *)v16 - 19) = 0;
        *((_QWORD *)v16 - 18) = 0;
        *((_QWORD *)v16 - 17) = 0;
        *(_OWORD *)(v16 - 152) = *(_OWORD *)&v13[v15 - 152];
        *((_QWORD *)v16 - 17) = *(_QWORD *)&v13[v15 - 136];
        *((_QWORD *)v17 - 19) = 0;
        *((_QWORD *)v17 - 18) = 0;
        *((_QWORD *)v17 - 17) = 0;
        *((_QWORD *)v16 - 16) = 0;
        *((_QWORD *)v16 - 15) = 0;
        *((_QWORD *)v16 - 14) = 0;
        *((_OWORD *)v16 - 8) = *(_OWORD *)&v13[v15 - 128];
        *((_QWORD *)v16 - 14) = *(_QWORD *)&v13[v15 - 112];
        *((_QWORD *)v17 - 16) = 0;
        *((_QWORD *)v17 - 15) = 0;
        *((_QWORD *)v17 - 14) = 0;
        *((_QWORD *)v16 - 13) = 0;
        *((_QWORD *)v16 - 12) = 0;
        *((_QWORD *)v16 - 11) = 0;
        *(_OWORD *)(v16 - 104) = *(_OWORD *)&v13[v15 - 104];
        *((_QWORD *)v16 - 11) = *(_QWORD *)&v13[v15 - 88];
        *((_QWORD *)v17 - 13) = 0;
        *((_QWORD *)v17 - 12) = 0;
        v18 = *(_OWORD *)&v13[v15 - 80];
        v19 = *(_QWORD *)&v13[v15 - 64];
        *((_QWORD *)v17 - 11) = 0;
        *((_QWORD *)v16 - 8) = v19;
        *((_OWORD *)v16 - 5) = v18;
        *((_QWORD *)v17 - 9) = 0;
        *((_QWORD *)v17 - 8) = 0;
        *((_QWORD *)v17 - 10) = 0;
        v20 = *(_OWORD *)&v13[v15 - 56];
        *((_QWORD *)v16 - 5) = *(_QWORD *)&v13[v15 - 40];
        *(_OWORD *)(v16 - 56) = v20;
        *((_QWORD *)v17 - 6) = 0;
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 7) = 0;
        v21 = *(_OWORD *)&v13[v15 - 32];
        *((_QWORD *)v16 - 2) = *(_QWORD *)&v13[v15 - 16];
        *((_OWORD *)v16 - 2) = v21;
        *((_QWORD *)v17 - 4) = 0;
        *((_QWORD *)v17 - 3) = 0;
        *((_QWORD *)v17 - 2) = 0;
        *(v16 - 8) = v13[v15 - 8];
        v15 -= 152;
      }
      while (&v13[v15] != v14);
      v12 = (FrontendFeature *)((char *)v12 + v15);
      v22 = *(FrontendFeature **)v3;
      v13 = *(char **)(v3 + 8);
      v6 = v26;
    }
    *(_QWORD *)v3 = v12;
    v24 = v22;
    v25 = v22;
    *(_QWORD *)(v3 + 8) = v6;
    v26 = v13;
    v23 = *(char **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v27;
    v27 = v23;
    std::__split_buffer<FrontendFeature>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    FrontendFeature::FrontendFeature(*(FrontendFeature **)(v3 + 8), a2);
    v6 = (char *)(v4 + 152);
    *(_QWORD *)(v3 + 8) = v4 + 152;
  }
  *(_QWORD *)(v3 + 8) = v6;
}

void sub_1DE9B6DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<FrontendFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0,std::allocator<SiriTTS::TextToPhoneme::text_to_phoneme(std::string const&)::$_0>,void ()(FrontendFeature const&)>::target_type()
{
}

void FrontendFeature::FrontendFeature(FrontendFeature *this, const FrontendFeature *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 4);
  if (v5 != v4)
  {
    std::vector<WordFeature>::__vallocate[abi:ne180100]((_QWORD *)this + 3, 0xF0F0F0F0F0F0F0F1 * ((v5 - v4) >> 3));
    *((_QWORD *)this + 4) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>((uint64_t)this + 40, v4, v5, *((_QWORD *)this + 4));
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<Prompt>::__init_with_size[abi:ne180100]<Prompt*,Prompt*>((_QWORD *)this + 6, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v6;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v7;
  }
  v8 = (std::string *)((char *)this + 120);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 144);
}

void sub_1DE9B6FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;

  if (*(char *)(v9 + 119) < 0)
    operator delete(*v12);
  if (*(char *)(v9 + 95) < 0)
    operator delete(*v11);
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = v10;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)v9;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<FrontendFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::allocator<FrontendFeature>::destroy[abi:ne180100](i - 152);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<PhoneFeature>::__init_with_size[abi:ne180100]<PhoneFeature*,PhoneFeature*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<PhoneFeature>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE9B70E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Prompt>::__init_with_size[abi:ne180100]<Prompt*,Prompt*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Prompt>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Prompt>,Prompt*,Prompt*,Prompt*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE9B716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<WordFeature>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1E1E1E1E1E1E1E2)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      WordFeature::WordFeature(a4 + v7, a2 + v7);
      v7 += 136;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t WordFeature::WordFeature(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1DE9B7390(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[111] < 0)
    operator delete(*v5);
  if (v1[87] < 0)
    operator delete(*v4);
  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a1);
}

char *std::vector<PhoneFeature>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x12F684BDA12F685)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[216 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      PhoneFeature::PhoneFeature((std::string *)(a4 + v7), (const PhoneFeature *)(a2 + v7));
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t **siritts_create_text_to_phoneme(char *a1, char *a2)
{
  uint64_t **v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  v4 = (uint64_t **)operator new();
  std::string::basic_string[abi:ne180100]<0>(v8, a1);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  SiriTTS::TextToPhoneme::TextToPhoneme(v4, (std::string::size_type)v8, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  return v4;
}

void sub_1DE9B75B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1DF0ED014](v20, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

uint64_t siritts_delete_text_to_phoneme(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](result + 16);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

char *siritts_text_to_phoneme(uint64_t a1, char *a2)
{
  char *v3;
  void *v4;
  void *__p[2];
  char v7;
  std::string __s1;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  SiriTTS::TextToPhoneme::text_to_phoneme(a1, (uint64_t)__p, &__s1);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return strdup((const char *)&__s1);
  v4 = (void *)__s1.__r_.__value_.__r.__words[0];
  v3 = strdup(__s1.__r_.__value_.__l.__data_);
  operator delete(v4);
  return v3;
}

void sub_1DE9B76C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void UnparseSSMLImpl::~UnparseSSMLImpl(UnparseSSMLImpl *this)
{
  *(_QWORD *)this = &off_1EA91E4C8;
  *((_QWORD *)this + 13) = &unk_1EA91E530;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  UnparserModule::~UnparserModule(this);
}

{
  *(_QWORD *)this = &off_1EA91E4C8;
  *((_QWORD *)this + 13) = &unk_1EA91E530;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  UnparserModule::~UnparserModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t UnparseSSMLImpl::start_document(UnparseSSMLImpl *this)
{
  xmlOutputBuffer *IO;

  IO = xmlOutputBufferCreateIO((xmlOutputWriteCallback)ssmlOutputWriteCallback, (xmlOutputCloseCallback)ssmlOutputCloseCallback, *((void **)this + 15), 0);
  *((_QWORD *)this + 19) = xmlNewTextWriter(IO);
  *((_DWORD *)this + 36) = 0;
  std::shared_ptr<TokenAttributes>::reset[abi:ne180100]((_QWORD *)this + 16);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  return xmlTextWriterStartDocument(*((xmlTextWriterPtr *)this + 19), 0, 0, 0);
}

void UnparseSSMLImpl::dump_token(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const xmlChar *v17;
  const xmlChar *v18;
  xmlTextWriter *v19;
  const xmlChar *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  xmlTextWriter *v24;
  const xmlChar *v25;
  uint64_t v26;
  const xmlChar *v27;
  const xmlChar *v28;
  const char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  const xmlChar *v33;
  xmlTextWriter *v34;
  uint64_t v35;
  unsigned __int8 v36;
  const xmlChar *p_p;
  xmlTextWriter *v38;
  const xmlChar *v39;
  const xmlChar *v40;
  uint64_t v41;
  const xmlChar *v42;
  const xmlChar *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  xmlTextWriter *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const xmlChar *v54;
  const xmlChar *v55;
  uint64_t v56;
  int v57;
  const xmlChar *v58;
  const xmlChar *v59;
  const xmlChar *v60;
  const xmlChar *v61;
  uint64_t v62;
  const xmlChar *v63;
  const xmlChar *v64;
  const xmlChar *v65;
  uint64_t v66;
  const xmlChar *v67;
  _OWORD *v68;
  void *v69;
  uint64_t v70;
  unsigned __int8 v71;
  const xmlChar *v72;
  xmlTextWriter *v73;
  uint64_t v74;
  unsigned __int8 v75;
  const xmlChar *v76;
  void *exception;
  _QWORD v78[2];
  void *__p;
  uint64_t v80;
  unsigned __int8 v81;

  v4 = *a2;
  if ((_QWORD *)(v4 + 8) == v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__p, "Token missing TokenBasicItem");
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v6 = v5[5];
  v7 = *(std::__shared_weak_count **)(v6 + 64);
  v78[0] = *(_QWORD *)(v6 + 56);
  v78[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  UnparseSSMLImpl::dump_attr(a1, (uint64_t)v78);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = *(_DWORD *)(v6 + 8);
  if (v12 > 1835102826)
  {
    switch(v12)
    {
      case 1835102827:
        xmlTextWriterStartElement(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"mark");
        v42 = *(const xmlChar **)(v6 + 32);
        v41 = v6 + 32;
        v40 = v42;
        if (*(char *)(v41 + 23) >= 0)
          v43 = (const xmlChar *)v41;
        else
          v43 = v40;
        xmlTextWriterWriteAttribute(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"name", v43);
        goto LABEL_75;
      case 1885892462:
        v49 = *a2;
        if ((_QWORD *)(v49 + 8) == v50)
          return;
        v51 = v50[5];
        xmlTextWriterStartElement(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"phoneme");
        v52 = *(unsigned __int8 *)(v51 + 55);
        v53 = (char)v52;
        if ((v52 & 0x80u) != 0)
          v52 = *(_QWORD *)(v51 + 40);
        if (v52)
        {
          if (v53 >= 0)
            v54 = (const xmlChar *)(v51 + 32);
          else
            v54 = *(const xmlChar **)(v51 + 32);
          xmlTextWriterWriteAttribute(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"alphabet", v54);
        }
        if (*(char *)(v51 + 31) >= 0)
          v55 = (const xmlChar *)(v51 + 8);
        else
          v55 = *(const xmlChar **)(v51 + 8);
        xmlTextWriterWriteAttribute(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"ph", v55);
        v56 = *(unsigned __int8 *)(v51 + 79);
        v57 = (char)v56;
        if ((v56 & 0x80u) != 0)
          v56 = *(_QWORD *)(v51 + 64);
        if (!v56)
          goto LABEL_71;
        v24 = *(xmlTextWriter **)(a1 + 152);
        v60 = *(const xmlChar **)(v51 + 56);
        v59 = (const xmlChar *)(v51 + 56);
        v58 = v60;
        if (v57 >= 0)
          v28 = v59;
        else
          v28 = v58;
        v29 = "type";
        break;
      case 1952807028:
        v21 = *a2;
        if ((_QWORD *)(v21 + 8) == v22)
        {
          v67 = *(const xmlChar **)(v6 + 32);
          v66 = v6 + 32;
          v65 = v67;
          v19 = *(xmlTextWriter **)(a1 + 152);
          if (*(char *)(v66 + 23) >= 0)
            v20 = (const xmlChar *)v66;
          else
            v20 = v65;
          goto LABEL_79;
        }
        v23 = v22[5];
        xmlTextWriterStartElement(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"sub");
        v24 = *(xmlTextWriter **)(a1 + 152);
        v27 = *(const xmlChar **)(v23 + 8);
        v26 = v23 + 8;
        v25 = v27;
        if (*(char *)(v26 + 23) >= 0)
          v28 = (const xmlChar *)v26;
        else
          v28 = v25;
        v29 = "alias";
        break;
      default:
        return;
    }
    xmlTextWriterWriteAttribute(v24, (const xmlChar *)v29, v28);
LABEL_71:
    v63 = *(const xmlChar **)(v6 + 32);
    v62 = v6 + 32;
    v61 = v63;
    if (*(char *)(v62 + 23) >= 0)
      v64 = (const xmlChar *)v62;
    else
      v64 = v61;
    xmlTextWriterWriteString(*(xmlTextWriterPtr *)(a1 + 152), v64);
LABEL_75:
    xmlTextWriterEndElement(*(xmlTextWriterPtr *)(a1 + 152));
    return;
  }
  switch(v12)
  {
    case 1635083369:
      v30 = *a2;
      if ((_QWORD *)(v30 + 8) != v31)
      {
        v32 = v31[5];
        if (*(char *)(v32 + 31) >= 0)
          v33 = (const xmlChar *)(v32 + 8);
        else
          v33 = *(const xmlChar **)(v32 + 8);
        xmlTextWriterWriteAttribute(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"src", v33);
        v34 = *(xmlTextWriter **)(a1 + 152);
        ParseAttr::label_duration((ParseAttr *)&__p, *(float *)(v32 + 32));
        v35 = v81;
        v36 = v81;
        if ((v81 & 0x80u) != 0)
          v35 = v80;
        if (v35)
        {
          if ((v81 & 0x80u) == 0)
            p_p = (const xmlChar *)&__p;
          else
            p_p = (const xmlChar *)__p;
          xmlTextWriterWriteAttribute(v34, (const xmlChar *)"timeout", p_p);
          v36 = v81;
        }
        if ((v36 & 0x80) != 0)
          operator delete(__p);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"maxage", *(_QWORD *)(v32 + 40), 0xFFFFFFFFLL);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"maxstale", *(_QWORD *)(v32 + 48), 0);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"clipbegin", *(float *)(v32 + 56), 0.0);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"clipend", *(float *)(v32 + 60), INFINITY);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"repeatdur", *(float *)(v32 + 68), 0.0);
        xmlTextWriterWriteAttributeIfNotEqual(*(_xmlTextWriter **)(a1 + 152), (const xmlChar *)"repeatcount", *(float *)(v32 + 64), 1.0);
        if (*(_BYTE *)(v32 + 37))
        {
          v38 = *(xmlTextWriter **)(a1 + 152);
          std::string::basic_string[abi:ne180100]<0>(&__p, "true");
          v39 = (v81 & 0x80u) == 0 ? (const xmlChar *)&__p : (const xmlChar *)__p;
          xmlTextWriterWriteAttribute(v38, (const xmlChar *)"apple:overlap", v39);
          if ((char)v81 < 0)
            operator delete(__p);
        }
      }
      break;
    case 1651664235:
      v44 = *a2;
      if ((_QWORD *)(v44 + 8) != v45)
      {
        v46 = v45[5];
        xmlTextWriterStartElement(*(xmlTextWriterPtr *)(a1 + 152), (const xmlChar *)"break");
        v47 = *(xmlTextWriter **)(a1 + 152);
        v48 = *(int *)(v46 + 12);
        if ((_DWORD)v48 == 8)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
        }
        else
        {
          v68 = operator new(0x58uLL);
          v69 = v68;
          v68[2] = xmmword_1EA94AFA8;
          v68[3] = *(_OWORD *)&off_1EA94AFB8;
          v68[4] = xmmword_1EA94AFC8;
          *((_QWORD *)v68 + 10) = "x-strong";
          *v68 = xmmword_1EA94AF88;
          v68[1] = *(_OWORD *)&off_1EA94AF98;
          if (v48 > 0xA)
            std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
          else
            std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v68 + v48));
          operator delete(v69);
        }
        v70 = v81;
        v71 = v81;
        if ((v81 & 0x80u) != 0)
          v70 = v80;
        if (v70)
        {
          if ((v81 & 0x80u) == 0)
            v72 = (const xmlChar *)&__p;
          else
            v72 = (const xmlChar *)__p;
          xmlTextWriterWriteAttribute(v47, (const xmlChar *)"strength", v72);
          v71 = v81;
        }
        if ((v71 & 0x80) != 0)
          operator delete(__p);
        v73 = *(xmlTextWriter **)(a1 + 152);
        ParseAttr::label_duration((ParseAttr *)&__p, *(float *)(v46 + 8));
        v74 = v81;
        v75 = v81;
        if ((v81 & 0x80u) != 0)
          v74 = v80;
        if (v74)
        {
          if ((v81 & 0x80u) == 0)
            v76 = (const xmlChar *)&__p;
          else
            v76 = (const xmlChar *)__p;
          xmlTextWriterWriteAttribute(v73, (const xmlChar *)"time", v76);
          v75 = v81;
        }
        if ((v75 & 0x80) != 0)
          operator delete(__p);
        xmlTextWriterEndElement(*(xmlTextWriterPtr *)(a1 + 152));
      }
      break;
    case 1684370275:
      v13 = *a2;
      if ((_QWORD *)(v13 + 8) != v14)
      {
        v15 = v14[5];
        v18 = *(const xmlChar **)(v15 + 8);
        v16 = v15 + 8;
        v17 = v18;
        v19 = *(xmlTextWriter **)(a1 + 152);
        if (*(char *)(v16 + 23) >= 0)
          v20 = (const xmlChar *)v16;
        else
          v20 = v17;
LABEL_79:
        xmlTextWriterWriteString(v19, v20);
      }
      break;
  }
}

void sub_1DE9B7E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  _Unwind_Resume(a1);
}

void UnparseSSMLImpl::end_document(xmlTextWriterPtr *this)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  UnparseSSMLImpl::dump_attr((uint64_t)this, (uint64_t)v2);
  xmlTextWriterEndDocument(this[19]);
  xmlFreeTextWriter(this[19]);
}

void sub_1DE9B7ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *UnparseSSMLImpl::dump_attr(uint64_t a1, uint64_t a2)
{
  int v3;
  TokenAttributes *v4;
  _QWORD *v5;
  int *v6;
  _QWORD *result;

  if (*(_QWORD *)a2)
  {
    v3 = 0;
    v4 = *(TokenAttributes **)a2;
    do
    {
      ++v3;
      v4 = *(TokenAttributes **)v4;
    }
    while (v4);
    v5 = (_QWORD *)(a1 + 128);
    v6 = (int *)(a1 + 144);
    UnparseSSMLImpl::dump_attr((xmlTextWriterPtr *)a1, *(TokenAttributes **)(a1 + 128), *(_DWORD *)(a1 + 144), *(TokenAttributes **)a2, v3);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 128);
    v6 = (int *)(a1 + 144);
    UnparseSSMLImpl::dump_attr((xmlTextWriterPtr *)a1, *(TokenAttributes **)(a1 + 128), *(_DWORD *)(a1 + 144), 0, 0);
    v3 = 0;
  }
  result = std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v5, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *v6 = v3;
  return result;
}

void UnparseSSMLImpl::dump_attr(xmlTextWriterPtr *this, TokenAttributes *a2, int a3, TokenAttributes *a4, int a5)
{
  int v7;
  TokenAttributes *v8;
  xmlTextWriterPtr *v9;
  TokenAttributes *v10;
  int v11;
  xmlTextWriter *v12;
  const xmlChar *p_p;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const xmlChar *v17;
  uint64_t v18;
  int v19;
  const xmlChar *v20;
  _QWORD *v21;
  const xmlChar *v22;
  const xmlChar *v23;
  const xmlChar *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  const xmlChar *v32;
  uint64_t v33;
  int v34;
  const xmlChar *v35;
  const xmlChar *v36;
  uint64_t v37;
  const xmlChar *v38;
  const xmlChar *v39;
  uint64_t v40;
  uint64_t j;
  const xmlChar *v42;
  xmlTextWriter *v43;
  const xmlChar *v44;
  const xmlChar *v45;
  const xmlChar *v46;
  const xmlChar *v47;
  const char *v48;
  xmlTextWriter *v49;
  const char *v50;
  uint64_t v51;
  int v52;
  const xmlChar *v53;
  const xmlChar *v54;
  const xmlChar *v55;
  const xmlChar *v56;
  uint64_t v57;
  int v58;
  const xmlChar *v59;
  uint64_t v60;
  int v61;
  const xmlChar *v62;
  const xmlChar *v63;
  const xmlChar *v64;
  uint64_t v65;
  xmlTextWriter *v66;
  uint64_t v67;
  _OWORD *v68;
  void *v69;
  xmlTextWriter *v70;
  uint64_t v71;
  unsigned __int8 v72;
  const xmlChar *v73;
  xmlTextWriter *v74;
  uint64_t v75;
  unsigned __int8 v76;
  const xmlChar *v77;
  uint64_t v78;
  int v79;
  const xmlChar *v80;
  xmlTextWriter *v81;
  uint64_t v82;
  unsigned __int8 v83;
  const xmlChar *v84;
  xmlTextWriter *v85;
  uint64_t v86;
  unsigned __int8 v87;
  const xmlChar *v88;
  xmlTextWriter *v89;
  uint64_t v90;
  unsigned __int8 v91;
  const xmlChar *v92;
  void *v93;
  xmlTextWriter *v94;
  uint64_t v95;
  _OWORD *v96;
  void *v97;
  uint64_t v98;
  unsigned __int8 v99;
  const xmlChar *v100;
  uint64_t v101;
  int v102;
  const xmlChar *v103;
  uint64_t v104;
  int v105;
  const xmlChar *v106;
  uint64_t v107;
  int v108;
  const xmlChar *v109;
  uint64_t v110;
  int v111;
  const xmlChar *v112;
  xmlTextWriter *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned __int8 v117;
  const xmlChar *v118;
  uint64_t v119;
  const xmlChar *v120;
  uint64_t v121;
  void *__p;
  uint64_t v123;
  unsigned __int8 v124;

  v7 = a3;
  v8 = a2;
  v9 = this;
  if (a3 <= a5)
  {
    if (a3 < a5)
    {
      v10 = *(TokenAttributes **)a4;
      v11 = a5 - 1;
      goto LABEL_8;
    }
  }
  else
  {
    do
    {
      xmlTextWriterEndElement(v9[19]);
      v8 = *(TokenAttributes **)v8;
      --v7;
    }
    while (v7 > a5);
    v7 = a5;
  }
  if (v8 == a4)
    return;
  xmlTextWriterEndElement(v9[19]);
  a2 = *(TokenAttributes **)v8;
  a3 = v7 - 1;
  v10 = *(TokenAttributes **)a4;
  v11 = a5 - 1;
  this = v9;
LABEL_8:
  UnparseSSMLImpl::dump_attr((UnparseSSMLImpl *)this, a2, a3, v10, v11);
  switch(*((_DWORD *)a4 + 8))
  {
    case 0:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"speak");
      v12 = v9[19];
      std::string::basic_string[abi:ne180100]<0>(&__p, "1.1");
      if ((v124 & 0x80u) == 0)
        p_p = (const xmlChar *)&__p;
      else
        p_p = (const xmlChar *)__p;
      xmlTextWriterWriteAttribute(v12, (const xmlChar *)"version", p_p);
      if ((char)v124 < 0)
        operator delete(__p);
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      v14 = *((_QWORD *)a4 + 2);
      v15 = *(unsigned __int8 *)(v14 + 79);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(v14 + 64);
      if (v15)
      {
        if (v16 >= 0)
          v17 = (const xmlChar *)(v14 + 56);
        else
          v17 = *(const xmlChar **)(v14 + 56);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"startmark", v17);
      }
      v18 = *(unsigned __int8 *)(v14 + 103);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(v14 + 88);
      if (v18)
      {
        if (v19 >= 0)
          v20 = (const xmlChar *)(v14 + 80);
        else
          v20 = *(const xmlChar **)(v14 + 80);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"endmark", v20);
      }
      v21 = *(_QWORD **)(v14 + 104);
      v121 = v14;
      if (v21 != (_QWORD *)(v14 + 112))
      {
        do
        {
          xmlTextWriterStartElement(v9[19], (const xmlChar *)"lexicon");
          if (*((char *)v21 + 55) >= 0)
            v22 = (const xmlChar *)(v21 + 4);
          else
            v22 = (const xmlChar *)v21[4];
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"xml:id", v22);
          if (*((char *)v21 + 79) >= 0)
            v23 = (const xmlChar *)(v21 + 7);
          else
            v23 = (const xmlChar *)v21[7];
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"uri", v23);
          if (*((char *)v21 + 103) >= 0)
            v24 = (const xmlChar *)(v21 + 10);
          else
            v24 = (const xmlChar *)v21[10];
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"type", v24);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"fetchtimeout", *((float *)v21 + 26), INFINITY);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"maxage", v21[14], 0xFFFFFFFFLL);
          xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"maxstale", v21[15], 0);
          xmlTextWriterEndElement(v9[19]);
          v25 = (_QWORD *)v21[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (_QWORD *)v21[2];
              v27 = *v26 == (_QWORD)v21;
              v21 = v26;
            }
            while (!v27);
          }
          v21 = v26;
        }
        while (v26 != (_QWORD *)(v14 + 112));
      }
      v28 = *(_QWORD *)(v14 + 128);
      for (i = *(_QWORD *)(v14 + 136); v28 != i; v28 = v37 + 24)
      {
        xmlTextWriterStartElement(v9[19], (const xmlChar *)"meta");
        v30 = *(unsigned __int8 *)(v28 + 23);
        v31 = (char)v30;
        if ((v30 & 0x80u) != 0)
          v30 = *(_QWORD *)(v28 + 8);
        if (v30)
        {
          if (v31 >= 0)
            v32 = (const xmlChar *)v28;
          else
            v32 = *(const xmlChar **)v28;
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"name", v32);
        }
        v33 = *(unsigned __int8 *)(v28 + 47);
        v34 = (char)v33;
        if ((v33 & 0x80u) != 0)
          v33 = *(_QWORD *)(v28 + 32);
        if (v33)
        {
          if (v34 >= 0)
            v35 = (const xmlChar *)(v28 + 24);
          else
            v35 = *(const xmlChar **)(v28 + 24);
          xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"http-equiv", v35);
        }
        v38 = *(const xmlChar **)(v28 + 48);
        v37 = v28 + 48;
        v36 = v38;
        if (*(char *)(v37 + 23) >= 0)
          v39 = (const xmlChar *)v37;
        else
          v39 = v36;
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"content", v39);
        xmlTextWriterEndElement(v9[19]);
      }
      v40 = *(_QWORD *)(v14 + 152);
      for (j = *(_QWORD *)(v121 + 160); v40 != j; v40 += 24)
      {
        xmlTextWriterStartElement(v9[19], (const xmlChar *)"metadata");
        if (*(char *)(v40 + 23) >= 0)
          v42 = (const xmlChar *)v40;
        else
          v42 = *(const xmlChar **)v40;
        xmlTextWriterWriteString(v9[19], v42);
        xmlTextWriterEndElement(v9[19]);
      }
      return;
    case 1:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"lookup");
      v43 = v9[19];
      v46 = (const xmlChar *)*((_QWORD *)a4 + 12);
      v45 = (const xmlChar *)a4 + 96;
      v44 = v46;
      if (*((char *)v45 + 23) >= 0)
        v47 = v45;
      else
        v47 = v44;
      v48 = "ref";
      goto LABEL_99;
    case 2:
      v49 = v9[19];
      v50 = "p";
      goto LABEL_159;
    case 3:
      v49 = v9[19];
      v50 = "s";
      goto LABEL_159;
    case 4:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"w");
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      v51 = *((unsigned __int8 *)a4 + 143);
      v52 = (char)v51;
      if ((v51 & 0x80u) != 0)
        v51 = *((_QWORD *)a4 + 16);
      if (!v51)
        return;
      v43 = v9[19];
      v55 = (const xmlChar *)*((_QWORD *)a4 + 15);
      v54 = (const xmlChar *)a4 + 120;
      v53 = v55;
      if (v52 >= 0)
        v47 = v54;
      else
        v47 = v53;
      v48 = "role";
      goto LABEL_99;
    case 5:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"say-as");
      if (*((char *)a4 + 167) >= 0)
        v56 = (const xmlChar *)a4 + 144;
      else
        v56 = (const xmlChar *)*((_QWORD *)a4 + 18);
      xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"interpret-as", v56);
      v57 = *((unsigned __int8 *)a4 + 191);
      v58 = (char)v57;
      if ((v57 & 0x80u) != 0)
        v57 = *((_QWORD *)a4 + 22);
      if (v57)
      {
        if (v58 >= 0)
          v59 = (const xmlChar *)a4 + 168;
        else
          v59 = (const xmlChar *)*((_QWORD *)a4 + 21);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"format", v59);
      }
      v60 = *((unsigned __int8 *)a4 + 215);
      v61 = (char)v60;
      if ((v60 & 0x80u) != 0)
        v60 = *((_QWORD *)a4 + 25);
      if (!v60)
        return;
      v43 = v9[19];
      v64 = (const xmlChar *)*((_QWORD *)a4 + 24);
      v63 = (const xmlChar *)a4 + 192;
      v62 = v64;
      if (v61 >= 0)
        v47 = v63;
      else
        v47 = v62;
      v48 = "detail";
LABEL_99:
      xmlTextWriterWriteAttribute(v43, (const xmlChar *)v48, v47);
      return;
    case 6:
      v49 = v9[19];
      v50 = "lang";
      goto LABEL_159;
    case 7:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"voice");
      v65 = *((_QWORD *)a4 + 35);
      v66 = v9[19];
      v67 = *(unsigned int *)(v65 + 16);
      v68 = operator new(0x20uLL);
      v69 = v68;
      *v68 = xmmword_1EA94C808;
      v68[1] = *(_OWORD *)&off_1EA94C818;
      if (v67 > 3)
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v68 + v67));
      v98 = v124;
      v99 = v124;
      if ((v124 & 0x80u) != 0)
        v98 = v123;
      if (v98)
      {
        if ((v124 & 0x80u) == 0)
          v100 = (const xmlChar *)&__p;
        else
          v100 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v66, (const xmlChar *)"gender", v100);
        v99 = v124;
      }
      if ((v99 & 0x80) != 0)
        operator delete(__p);
      operator delete(v69);
      xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"age", *(_QWORD *)(v65 + 24), 0);
      xmlTextWriterWriteAttributeIfNotEqual(v9[19], (const xmlChar *)"variant", *(_QWORD *)(v65 + 32), 0);
      v101 = *(unsigned __int8 *)(v65 + 63);
      v102 = (char)v101;
      if ((v101 & 0x80u) != 0)
        v101 = *(_QWORD *)(v65 + 48);
      if (v101)
      {
        if (v102 >= 0)
          v103 = (const xmlChar *)(v65 + 40);
        else
          v103 = *(const xmlChar **)(v65 + 40);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"name", v103);
      }
      v104 = *(unsigned __int8 *)(v65 + 87);
      v105 = (char)v104;
      if ((v104 & 0x80u) != 0)
        v104 = *(_QWORD *)(v65 + 72);
      if (v104)
      {
        if (v105 >= 0)
          v106 = (const xmlChar *)(v65 + 64);
        else
          v106 = *(const xmlChar **)(v65 + 64);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"languages", v106);
      }
      v107 = *(unsigned __int8 *)(v65 + 111);
      v108 = (char)v107;
      if ((v107 & 0x80u) != 0)
        v107 = *(_QWORD *)(v65 + 96);
      if (v107)
      {
        if (v108 >= 0)
          v109 = (const xmlChar *)(v65 + 88);
        else
          v109 = *(const xmlChar **)(v65 + 88);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"required", v109);
      }
      v110 = *(unsigned __int8 *)(v65 + 135);
      v111 = (char)v110;
      if ((v110 & 0x80u) != 0)
        v110 = *(_QWORD *)(v65 + 120);
      if (v110)
      {
        if (v111 >= 0)
          v112 = (const xmlChar *)(v65 + 112);
        else
          v112 = *(const xmlChar **)(v65 + 112);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"ordering", v112);
      }
      v113 = v9[19];
      v114 = *(unsigned int *)(v65 + 136);
      v115 = operator new(0x18uLL);
      v97 = v115;
      *(_OWORD *)v115 = xmmword_1EA94C828;
      v115[2] = "processorchoice";
      if (v114 > 2)
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v115[v114]);
      v119 = v124;
      v117 = v124;
      if ((v124 & 0x80u) != 0)
        v119 = v123;
      if (!v119)
        goto LABEL_217;
      if ((v124 & 0x80u) == 0)
        v120 = (const xmlChar *)&__p;
      else
        v120 = (const xmlChar *)__p;
      xmlTextWriterWriteAttribute(v113, (const xmlChar *)"onvoicefailure", v120);
      goto LABEL_216;
    case 8:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"prosody");
      v70 = v9[19];
      ParseAttr::label_pitch(&__p, *((_QWORD *)a4 + 27));
      v71 = v124;
      v72 = v124;
      if ((v124 & 0x80u) != 0)
        v71 = v123;
      if (v71)
      {
        if ((v124 & 0x80u) == 0)
          v73 = (const xmlChar *)&__p;
        else
          v73 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v70, (const xmlChar *)"pitch", v73);
        v72 = v124;
      }
      if ((v72 & 0x80) != 0)
        operator delete(__p);
      v74 = v9[19];
      ParseAttr::label_pitch(&__p, *((_QWORD *)a4 + 28));
      v75 = v124;
      v76 = v124;
      if ((v124 & 0x80u) != 0)
        v75 = v123;
      if (v75)
      {
        if ((v124 & 0x80u) == 0)
          v77 = (const xmlChar *)&__p;
        else
          v77 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v74, (const xmlChar *)"range", v77);
        v76 = v124;
      }
      if ((v76 & 0x80) != 0)
        operator delete(__p);
      v78 = *((unsigned __int8 *)a4 + 271);
      v79 = (char)v78;
      if ((v78 & 0x80u) != 0)
        v78 = *((_QWORD *)a4 + 32);
      if (v78)
      {
        if (v79 >= 0)
          v80 = (const xmlChar *)a4 + 248;
        else
          v80 = (const xmlChar *)*((_QWORD *)a4 + 31);
        xmlTextWriterWriteAttribute(v9[19], (const xmlChar *)"contour", v80);
      }
      v81 = v9[19];
      ParseAttr::label_rate(&__p, *((_QWORD *)a4 + 29));
      v82 = v124;
      v83 = v124;
      if ((v124 & 0x80u) != 0)
        v82 = v123;
      if (v82)
      {
        if ((v124 & 0x80u) == 0)
          v84 = (const xmlChar *)&__p;
        else
          v84 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v81, (const xmlChar *)"rate", v84);
        v83 = v124;
      }
      if ((v83 & 0x80) != 0)
        operator delete(__p);
      v85 = v9[19];
      ParseAttr::label_duration((ParseAttr *)&__p, *((float *)a4 + 68));
      v86 = v124;
      v87 = v124;
      if ((v124 & 0x80u) != 0)
        v86 = v123;
      if (v86)
      {
        if ((v124 & 0x80u) == 0)
          v88 = (const xmlChar *)&__p;
        else
          v88 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v85, (const xmlChar *)"duration", v88);
        v87 = v124;
      }
      if ((v87 & 0x80) != 0)
        operator delete(__p);
      v89 = v9[19];
      ParseAttr::label_volume(&__p, *((_QWORD *)a4 + 30));
      v90 = v124;
      v91 = v124;
      if ((v124 & 0x80u) != 0)
        v90 = v123;
      if (v90)
      {
        if ((v124 & 0x80u) == 0)
          v92 = (const xmlChar *)&__p;
        else
          v92 = (const xmlChar *)__p;
        xmlTextWriterWriteAttribute(v89, (const xmlChar *)"volume", v92);
        v91 = v124;
      }
      if ((v91 & 0x80) == 0)
        return;
      v93 = __p;
      goto LABEL_220;
    case 9:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"emphasis");
      v94 = v9[19];
      v95 = *((int *)a4 + 69);
      v96 = operator new(0x58uLL);
      v97 = v96;
      v96[2] = xmmword_1EA94AF50;
      v96[3] = off_1EA94AF60;
      v96[4] = xmmword_1EA94AF70;
      *((_QWORD *)v96 + 10) = &byte_1DEBD87CE;
      *v96 = xmmword_1EA94AF30;
      v96[1] = *(_OWORD *)&off_1EA94AF40;
      if (v95 > 0xA)
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, *((char **)v96 + v95));
      v116 = v124;
      v117 = v124;
      if ((v124 & 0x80u) != 0)
        v116 = v123;
      if (!v116)
        goto LABEL_217;
      if ((v124 & 0x80u) == 0)
        v118 = (const xmlChar *)&__p;
      else
        v118 = (const xmlChar *)__p;
      xmlTextWriterWriteAttribute(v94, (const xmlChar *)"level", v118);
LABEL_216:
      v117 = v124;
LABEL_217:
      if ((v117 & 0x80) != 0)
        operator delete(__p);
      v93 = v97;
LABEL_220:
      operator delete(v93);
      break;
    case 0xA:
      xmlTextWriterStartElement(v9[19], (const xmlChar *)"audio");
      return;
    case 0xB:
      v49 = v9[19];
      v50 = "desc";
LABEL_159:
      xmlTextWriterStartElement(v49, (const xmlChar *)v50);
      UnparseSSMLImpl::lang_attr((UnparseSSMLImpl *)v9, a4);
      break;
    default:
      return;
  }
}

void sub_1DE9B8A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void UnparseSSMLImpl::lang_attr(UnparseSSMLImpl *this, TokenAttributes *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  xmlTextWriter *v7;
  const xmlChar *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  const xmlChar *v16;
  unsigned int v17;
  xmlTextWriter *v18;
  _OWORD *v19;
  void *v20;
  void **v21;
  void *__p[2];
  char v23;

  v4 = *(_QWORD *)a2;
  v5 = *((unsigned __int8 *)a2 + 95);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 10);
  if (v5)
  {
    v7 = (xmlTextWriter *)*((_QWORD *)this + 19);
    if (v6 >= 0)
      v8 = (const xmlChar *)a2 + 72;
    else
      v8 = (const xmlChar *)*((_QWORD *)a2 + 9);
    xmlTextWriterWriteAttribute(v7, (const xmlChar *)"xml:id", v8);
  }
  if (v4)
  {
    v9 = *((unsigned __int8 *)a2 + 63);
    v10 = v9;
    if ((v9 & 0x80u) == 0)
      v11 = *((unsigned __int8 *)a2 + 63);
    else
      v11 = *((_QWORD *)a2 + 6);
    v12 = *(unsigned __int8 *)(v4 + 63);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v4 + 48);
    if (v11 == v12)
    {
      v14 = (const void **)((char *)a2 + 40);
      if (v13 >= 0)
        v15 = (unsigned __int8 *)(v4 + 40);
      else
        v15 = *(unsigned __int8 **)(v4 + 40);
      if ((char)v9 < 0)
      {
        if (!memcmp(*v14, v15, *((_QWORD *)a2 + 6)))
          goto LABEL_28;
      }
      else
      {
        if (!(_BYTE)v9)
          goto LABEL_28;
        while (*(unsigned __int8 *)v14 == *v15)
        {
          v14 = (const void **)((char *)v14 + 1);
          ++v15;
          if (!--v9)
            goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v10 = *((_BYTE *)a2 + 63);
  }
  if (v10 >= 0)
    v16 = (const xmlChar *)a2 + 40;
  else
    v16 = (const xmlChar *)*((_QWORD *)a2 + 5);
  xmlTextWriterWriteAttribute(*((xmlTextWriterPtr *)this + 19), (const xmlChar *)"xml:lang", v16);
  if (v4)
  {
LABEL_28:
    v17 = *((_DWORD *)a2 + 16);
    if (v17 == *(_DWORD *)(v4 + 64))
      return;
    goto LABEL_31;
  }
  v17 = *((_DWORD *)a2 + 16);
LABEL_31:
  v18 = (xmlTextWriter *)*((_QWORD *)this + 19);
  v19 = operator new(0x20uLL);
  v20 = v19;
  *v19 = xmmword_1EA94C7E8;
  v19[1] = *(_OWORD *)&off_1EA94C7F8;
  if (v17 > 3)
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  else
    std::string::basic_string[abi:ne180100]<0>(__p, *((char **)v19 + v17));
  if (v23 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  xmlTextWriterWriteAttribute(v18, (const xmlChar *)"onlangfailure", (const xmlChar *)v21);
  if (v23 < 0)
    operator delete(__p[0]);
  operator delete(v20);
}

void sub_1DE9B8C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void xmlTextWriterWriteAttributeIfNotEqual(_xmlTextWriter *a1, const xmlChar *a2, uint64_t a3, uint64_t a4)
{
  void **v6;
  void *__p[2];
  char v8;

  if (a3 != a4)
  {
    StringFormatter::StringFormatter((StringFormatter *)__p, "%zd", a3);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    xmlTextWriterWriteAttribute(a1, a2, (const xmlChar *)v6);
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1DE9B8D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void xmlTextWriterWriteAttributeIfNotEqual(_xmlTextWriter *a1, const xmlChar *a2, float a3, float a4)
{
  void **v6;
  void *__p[2];
  char v8;

  if (fabsf(a4) == INFINITY)
  {
    if (fabsf(a3) == INFINITY)
      return;
  }
  else if (vabds_f32(a3, a4) < 0.001)
  {
    return;
  }
  StringFormatter::StringFormatter((StringFormatter *)__p, "%g", a3);
  if (v8 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  xmlTextWriterWriteAttribute(a1, a2, (const xmlChar *)v6);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1DE9B8DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ssmlOutputWriteCallback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)std::ostream::write();
  if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
    return 0xFFFFFFFFLL;
  else
    return a3;
}

uint64_t ssmlOutputCloseCallback()
{
  std::ostream::flush();
  return 0;
}

void std::shared_ptr<TokenAttributes>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void UnparseSSML::~UnparseSSML(UnparseSSML *this)
{
  UnparserModule::~UnparserModule(this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<UnparseSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<UnparseSSMLImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<UnparseSSMLImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void MergeFrontendFeatureModule::~MergeFrontendFeatureModule(MergeFrontendFeatureModule *this)
{
  void **v2;

  *(_QWORD *)this = &off_1EA921140;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Module::~Module(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA921140;
  v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t MergeFrontendFeatureModule::clean_up(MergeFrontendFeatureModule *this)
{
  uint64_t result;
  uint64_t v3;

  Module::clean_up(this);
  v3 = *((_QWORD *)this + 35);
  for (result = *((_QWORD *)this + 36);
        result != v3;
  *((_QWORD *)this + 36) = v3;
  return result;
}

void MergeFrontendFeatureModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t i;
  uint64_t v15;
  _QWORD **v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  _OWORD *v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  __int128 v75;
  int64x2_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  std::string *v85;
  uint64_t v86;
  std::string *v87;
  _DWORD *v88;
  _DWORD *v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  std::string **v93;
  std::string *v94;
  std::string *v95;
  unint64_t v96;
  std::string *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  std::string *v103;
  unint64_t v104;
  uint64_t v105;
  std::string *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  uint64_t v117;
  std::string *v118;
  uint64_t *v119;
  const std::string *v120;
  uint64_t size;
  uint64_t data;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  __int128 v149;
  void **v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  void **v155;
  __int128 v156;
  void **v157;
  __int128 *v158;
  uint64_t v159;
  __int128 v160;
  void **v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  const std::string::value_type *v176;
  std::string::size_type v177;
  const std::string::value_type *v178;
  std::string::size_type v179;
  std::string *v180;
  uint64_t j;
  const std::string *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t k;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *p_shared_owners;
  unint64_t v198;
  _OWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  char *v212;
  __int128 v213;
  int64x2_t v214;
  char *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t *m;
  char *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  _BOOL4 v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int64x2_t v247;
  char *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  __int128 v251;
  __int128 v252;
  const std::string **v253;
  void **v254;
  uint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  _BYTE v259[24];
  char *v260;
  char **v261;

  v4 = *(uint64_t **)(*(_QWORD *)v3 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  *(_QWORD *)&v251 = v4;
  *((_QWORD *)&v251 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v249, *(_QWORD *)(a1 + 168));
  if (v249)
    v239 = *(_DWORD *)(v249 + 60) == 3;
  else
    v239 = 0;
  v8 = *v4;
  if (v4[1] != *v4)
  {
    v10 = *(_QWORD *)(v8 + 72);
    v9 = *(_QWORD *)(v8 + 80);
    if (v10 != v9)
    {
      v11 = v10 + 56;
      do
      {
        v12 = *(_DWORD *)(v11 - 56);
        v13 = v12 == 1 || v11 == v9;
        v11 += 56;
      }
      while (!v13);
      if (v12 == 1)
      {
        v15 = *(_QWORD *)(a1 + 280);
        for (i = *(_QWORD *)(a1 + 288);
              i != v15;
        *(_QWORD *)(a1 + 288) = v15;
      }
    }
  }
  v16 = (_QWORD **)(a1 + 280);
  v18 = *(char **)(a1 + 288);
  v17 = *(_QWORD *)(a1 + 296);
  if ((unint64_t)v18 >= v17)
  {
    v23 = (v18 - (char *)*v16) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v25 = v17 - (_QWORD)*v16;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v261 = (char **)(a1 + 296);
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v26);
    v29 = &v27[16 * v23];
    v30 = *((_QWORD *)&v251 + 1);
    *(_OWORD *)v29 = v251;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v34 = *(_QWORD **)(a1 + 280);
    v33 = *(_QWORD **)(a1 + 288);
    if (v33 == v34)
    {
      v37 = vdupq_n_s64((unint64_t)v33);
      v35 = &v27[16 * v23];
    }
    else
    {
      v35 = &v27[16 * v23];
      do
      {
        v36 = *((_OWORD *)v33 - 1);
        v33 -= 2;
        *((_OWORD *)v35 - 1) = v36;
        v35 -= 16;
        *v33 = 0;
        v33[1] = 0;
      }
      while (v33 != v34);
      v37 = *(int64x2_t *)v16;
    }
    v22 = v29 + 16;
    *(_QWORD *)(a1 + 280) = v35;
    *(_QWORD *)(a1 + 288) = v29 + 16;
    *(int64x2_t *)&v259[8] = v37;
    v38 = *(char **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = &v27[16 * v28];
    v260 = v38;
    *(_QWORD *)v259 = v37.i64[0];
    std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)v259);
    v19 = v251;
  }
  else
  {
    v19 = v251;
    *(_QWORD *)v18 = v251;
    *((_QWORD *)v18 + 1) = v5;
    if (v5)
    {
      v20 = (unint64_t *)(v5 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = v18 + 16;
  }
  *(_QWORD *)(a1 + 288) = v22;
  if (!*(_BYTE *)(v19 + 144))
    goto LABEL_264;
  v245 = 0;
  v246 = 0;
  v244 = 0;
  std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(&v244, *v16, v22, (v22 - (char *)*v16) >> 4);
  v39 = *(unsigned int *)(a1 + 272);
  v236 = a1;
  v40 = *(unsigned int *)(a1 + 276);
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v41 = v244;
  if (v245 == v244)
  {
    v247 = 0uLL;
    v248 = 0;
    goto LABEL_249;
  }
  v42 = 0;
  v43 = 0;
  do
  {
    if (!v42
      || (int)v39 >= 1
      && 0xF0F0F0F0F0F0F0F1
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v41 + 16 * v42) + 32) - *(_QWORD *)(*(_QWORD *)(v41 + 16 * v42) + 24)) >> 3)
       + v43 > v39
      || (v44 = v257, (int)v40 >= 1) && v40 <= (uint64_t)(*((_QWORD *)v257 - 2) - *((_QWORD *)v257 - 3)) >> 4)
    {
      memset(v259, 0, sizeof(v259));
      v45 = v257;
      if (v257 >= v258)
      {
        v47 = v256;
        v48 = 0xAAAAAAAAAAAAAAABLL * ((v257 - v256) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v258 - v256) >> 3) > v49)
          v49 = 0x5555555555555556 * ((v258 - v256) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v258 - v256) >> 3) >= 0x555555555555555)
          v50 = 0xAAAAAAAAAAAAAAALL;
        else
          v50 = v49;
        if (v50 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v51 = (char *)operator new(24 * v50);
        v52 = &v51[24 * v48];
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
        *((_QWORD *)v52 + 2) = 0;
        memset(v259, 0, sizeof(v259));
        v46 = v52 + 24;
        if (v45 == v47)
        {
          v256 = v52;
          v257 = v52 + 24;
          v258 = &v51[24 * v50];
          if (!v45)
            goto LABEL_64;
        }
        else
        {
          do
          {
            *((_QWORD *)v52 - 3) = 0;
            *((_QWORD *)v52 - 2) = 0;
            v52 -= 24;
            *((_QWORD *)v52 + 2) = 0;
            v53 = *(_OWORD *)(v45 - 24);
            v45 -= 24;
            *(_OWORD *)v52 = v53;
            *((_QWORD *)v52 + 2) = *((_QWORD *)v45 + 2);
            *(_QWORD *)v45 = 0;
            *((_QWORD *)v45 + 1) = 0;
            *((_QWORD *)v45 + 2) = 0;
          }
          while (v45 != v47);
          v54 = v256;
          v45 = v257;
          v256 = v52;
          v257 = v46;
          v258 = &v51[24 * v50];
          if (v45 != v54)
          {
            do
            {
              v45 -= 24;
              v253 = (const std::string **)v45;
              std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
            }
            while (v45 != v54);
            v45 = v54;
          }
          if (!v45)
            goto LABEL_64;
        }
        operator delete(v45);
      }
      else
      {
        *(_QWORD *)v257 = 0;
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 2) = 0;
        *(_OWORD *)v45 = *(_OWORD *)v259;
        *((_QWORD *)v45 + 2) = *(_QWORD *)&v259[16];
        memset(v259, 0, sizeof(v259));
        v46 = v45 + 24;
      }
LABEL_64:
      v257 = v46;
      v253 = (const std::string **)v259;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
      v43 = 0;
      v44 = v257;
      v41 = v244;
    }
    v55 = *((_QWORD *)v44 - 1);
    v56 = (_OWORD *)*((_QWORD *)v44 - 2);
    if ((unint64_t)v56 >= v55)
    {
      v61 = *((_QWORD *)v44 - 3);
      v62 = ((uint64_t)v56 - v61) >> 4;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v64 = v55 - v61;
      if (v64 >> 3 > v63)
        v63 = v64 >> 3;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v65 = 0xFFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      v261 = (char **)(v44 - 8);
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v65);
      v68 = &v66[16 * v62];
      v69 = *(_OWORD *)(v41 + 16 * v42);
      *(_OWORD *)v68 = v69;
      if (*((_QWORD *)&v69 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v73 = (_QWORD *)*((_QWORD *)v44 - 3);
      v72 = (_QWORD *)*((_QWORD *)v44 - 2);
      if (v72 == v73)
      {
        v76 = vdupq_n_s64((unint64_t)v72);
        v74 = &v66[16 * v62];
      }
      else
      {
        v74 = &v66[16 * v62];
        do
        {
          v75 = *((_OWORD *)v72 - 1);
          v72 -= 2;
          *((_OWORD *)v74 - 1) = v75;
          v74 -= 16;
          *v72 = 0;
          v72[1] = 0;
        }
        while (v72 != v73);
        v76 = *(int64x2_t *)(v44 - 24);
      }
      v60 = v68 + 16;
      *((_QWORD *)v44 - 3) = v74;
      *((_QWORD *)v44 - 2) = v68 + 16;
      *(int64x2_t *)&v259[8] = v76;
      v77 = (char *)*((_QWORD *)v44 - 1);
      *((_QWORD *)v44 - 1) = &v66[16 * v67];
      v260 = v77;
      *(_QWORD *)v259 = v76.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)v259);
      v41 = v244;
    }
    else
    {
      v57 = *(_OWORD *)(v41 + 16 * v42);
      *v56 = v57;
      if (*((_QWORD *)&v57 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = v56 + 1;
    }
    *((_QWORD *)v44 - 2) = v60;
    v43 -= 252645135
         * ((*(_QWORD *)(*(_QWORD *)(v41 + 16 * v42) + 32) - *(_QWORD *)(*(_QWORD *)(v41 + 16 * v42) + 24)) >> 3);
    ++v42;
  }
  while (v42 < (v245 - v41) >> 4);
  v78 = v256;
  v248 = 0;
  v247 = 0uLL;
  v235 = v257;
  if (v256 != v257)
  {
    while (1)
    {
      v253 = 0;
      v254 = 0;
      v255 = 0;
      std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(&v253, *(_QWORD **)v78, *((_QWORD **)v78 + 1), (uint64_t)(*((_QWORD *)v78 + 1) - *(_QWORD *)v78) >> 4);
      v237 = v78;
      v79 = (char *)operator new(0xB0uLL);
      *((_QWORD *)v79 + 1) = 0;
      *((_QWORD *)v79 + 2) = 0;
      *(_QWORD *)v79 = &off_1EA932E10;
      *(_OWORD *)(v79 + 24) = 0u;
      v80 = (uint64_t)(v79 + 24);
      *(_OWORD *)(v79 + 40) = 0u;
      *(_OWORD *)(v79 + 56) = 0u;
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *((_QWORD *)v79 + 21) = 0;
      *(_QWORD *)&v252 = v79 + 24;
      *((_QWORD *)&v252 + 1) = v79;
      v81 = (void **)v253;
      if (v254 != (void **)v253)
        break;
LABEL_221:
      v195 = v247.i64[1];
      if (v247.i64[1] >= (unint64_t)v248)
      {
        v200 = (v247.i64[1] - v247.i64[0]) >> 4;
        v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v202 = (uint64_t)&v248[-v247.i64[0]];
        if ((uint64_t)&v248[-v247.i64[0]] >> 3 > v201)
          v201 = v202 >> 3;
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF0)
          v203 = 0xFFFFFFFFFFFFFFFLL;
        else
          v203 = v201;
        v261 = &v248;
        v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v203);
        v206 = &v204[16 * v200];
        v207 = *((_QWORD *)&v252 + 1);
        *(_OWORD *)v206 = v252;
        if (v207)
        {
          v208 = (unint64_t *)(v207 + 8);
          do
            v209 = __ldxr(v208);
          while (__stxr(v209 + 1, v208));
        }
        v210 = (_QWORD *)v247.i64[1];
        v211 = (_QWORD *)v247.i64[0];
        if (v247.i64[1] == v247.i64[0])
        {
          v214 = vdupq_n_s64(v247.u64[1]);
          v212 = &v204[16 * v200];
        }
        else
        {
          v212 = &v204[16 * v200];
          do
          {
            v213 = *((_OWORD *)v210 - 1);
            v210 -= 2;
            *((_OWORD *)v212 - 1) = v213;
            v212 -= 16;
            *v210 = 0;
            v210[1] = 0;
          }
          while (v210 != v211);
          v214 = v247;
        }
        v199 = v206 + 16;
        v247.i64[0] = (uint64_t)v212;
        v247.i64[1] = (uint64_t)(v206 + 16);
        *(int64x2_t *)&v259[8] = v214;
        v215 = v248;
        v248 = &v204[16 * v205];
        v260 = v215;
        *(_QWORD *)v259 = v214.i64[0];
        std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)v259);
        v196 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
      }
      else
      {
        *(_QWORD *)v247.i64[1] = v252;
        v196 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
        *(_QWORD *)(v195 + 8) = *((_QWORD *)&v252 + 1);
        if (v196)
        {
          p_shared_owners = (unint64_t *)&v196->__shared_owners_;
          do
            v198 = __ldxr(p_shared_owners);
          while (__stxr(v198 + 1, p_shared_owners));
        }
        v199 = (_OWORD *)(v195 + 16);
      }
      v247.i64[1] = (uint64_t)v199;
      if (v196)
      {
        v216 = (unint64_t *)&v196->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      *(_QWORD *)v259 = &v253;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
      v78 = v237 + 24;
      if (v237 + 24 == v235)
        goto LABEL_249;
    }
    v82 = 0;
    while (2)
    {
      v240 = v82;
      if (v82)
      {
        v241 = 2 * v82;
        v83 = v81[2 * v82];
        v85 = *(std::string **)v83;
        v84 = *((_QWORD *)v83 + 1);
        if (*(_QWORD *)v83 != v84)
        {
          v86 = *(_QWORD *)(v80 + 8);
          v87 = *(std::string **)v83;
          do
          {
            HIDWORD(v87[6].__r_.__value_.__r.__words[0]) += *(_DWORD *)(v86 - 68);
            v87 += 9;
          }
          while (v87 != (std::string *)v84);
        }
        v88 = (_DWORD *)*((_QWORD *)v83 + 3);
        v89 = (_DWORD *)*((_QWORD *)v83 + 4);
        if (v88 == v89)
        {
          v90 = *(_QWORD *)(v80 + 8);
        }
        else
        {
          v90 = *(_QWORD *)(v80 + 8);
          v91 = 1749801491 * ((v90 - *(_QWORD *)v80) >> 3);
          do
          {
            if (*(char *)(v80 + 95) < 0)
              v92 = *(_QWORD *)(v80 + 80);
            else
              LODWORD(v92) = *(unsigned __int8 *)(v80 + 95);
            v88[2] += v92 + 1;
            *v88 += v91;
            v88 += 34;
          }
          while (v88 != v89);
        }
        v101 = (_DWORD *)*((_QWORD *)v83 + 6);
        v102 = (_DWORD *)*((_QWORD *)v83 + 7);
        if (v101 == v102)
        {
          v103 = *(std::string **)v80;
          v104 = 0x84BDA12F684BDA13 * ((uint64_t)(v90 - *(_QWORD *)v80) >> 3);
        }
        else
        {
          v103 = *(std::string **)v80;
          v104 = 0x84BDA12F684BDA13 * ((uint64_t)(v90 - *(_QWORD *)v80) >> 3);
          do
          {
            *v101 += v104;
            v101 += 18;
          }
          while (v101 != v102);
        }
        if (v84 - (uint64_t)v85 >= 1)
        {
          v105 = (v84 - (uint64_t)v85) / 216;
          v106 = v103 + 9 * v104;
          v107 = *(_QWORD *)(v80 + 16);
          if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v107 - v90) >> 3)) >= v105)
          {
            if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v90 - (_QWORD)v106) >> 3)) >= v105)
            {
              v114 = &v85[9 * v105];
            }
            else
            {
              v114 = (std::string *)((char *)v85 + 8 * ((uint64_t)(v90 - (_QWORD)v106) >> 3));
              *(_QWORD *)(v80 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v80 + 16, (uint64_t)v114, v84, v90);
              if ((uint64_t)(v90 - (_QWORD)v106) < 1)
                goto LABEL_140;
            }
            std::vector<PhoneFeature>::__move_range(v80, (uint64_t)v106, v90, (uint64_t)&v106[9 * v105]);
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v85, v114, v106);
            goto LABEL_140;
          }
          v108 = v105 - 0x7B425ED097B425EDLL * ((uint64_t)(v90 - (_QWORD)v103) >> 3);
          if (v108 > 0x12F684BDA12F684)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v109 = 0x84BDA12F684BDA13 * ((v107 - (uint64_t)v103) >> 3);
          v110 = 2 * v109;
          if (2 * v109 <= v108)
            v110 = v108;
          if (v109 >= 0x97B425ED097B42)
            v111 = 0x12F684BDA12F684;
          else
            v111 = v110;
          v261 = (char **)(v80 + 16);
          if (v111)
          {
            v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v111);
          }
          else
          {
            v112 = 0;
            v113 = 0;
          }
          v116 = (std::string *)&v112[216 * v104];
          *(_QWORD *)v259 = v112;
          *(_QWORD *)&v259[8] = v116;
          *(_QWORD *)&v259[16] = v116;
          v260 = &v112[216 * v113];
          v117 = 216 * v105;
          v118 = &v116[9 * v105];
          do
          {
            PhoneFeature::PhoneFeature(v116, (const PhoneFeature *)v85);
            v116 += 9;
            v85 += 9;
            v117 -= 216;
          }
          while (v117);
          *(_QWORD *)&v259[16] = v118;
          std::vector<PhoneFeature>::__swap_out_circular_buffer((uint64_t *)v80, v259, (uint64_t)v106);
          std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)v259);
        }
LABEL_140:
        v119 = (uint64_t *)v252;
        v120 = v253[v241];
        data = (uint64_t)v120[1].__r_.__value_.__l.__data_;
        size = v120[1].__r_.__value_.__l.__size_;
        if (size - data > 0)
        {
          v123 = (size - data) / 136;
          v124 = *(_QWORD *)(v252 + 24);
          v125 = *(_QWORD *)(v252 + 32);
          v126 = (uint64_t)(v125 - v124) / 136;
          v127 = v124 + 136 * v126;
          v128 = *(_QWORD *)(v252 + 40);
          if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v128 - v125) >> 3)) >= v123)
          {
            if ((uint64_t)(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v125 - v127) >> 3)) >= v123)
            {
              v238 = data + 136 * v123;
              v133 = *(_QWORD *)(v252 + 32);
            }
            else
            {
              v238 = data + 8 * ((uint64_t)(v125 - v127) >> 3);
              v133 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v252 + 40, v238, size, v125);
              v119[4] = v133;
              if ((uint64_t)(v125 - v127) < 1)
                goto LABEL_178;
            }
            v134 = v133 - 136 * v123;
            v135 = v133;
            while (v134 < v125)
            {
              *(_OWORD *)v135 = *(_OWORD *)v134;
              v136 = *(_OWORD *)(v134 + 16);
              *(_QWORD *)(v135 + 32) = *(_QWORD *)(v134 + 32);
              *(_OWORD *)(v135 + 16) = v136;
              *(_QWORD *)(v134 + 24) = 0;
              *(_QWORD *)(v134 + 32) = 0;
              *(_QWORD *)(v134 + 16) = 0;
              v137 = *(_OWORD *)(v134 + 40);
              *(_QWORD *)(v135 + 56) = *(_QWORD *)(v134 + 56);
              *(_OWORD *)(v135 + 40) = v137;
              *(_QWORD *)(v134 + 48) = 0;
              *(_QWORD *)(v134 + 56) = 0;
              *(_QWORD *)(v134 + 40) = 0;
              v138 = *(_OWORD *)(v134 + 64);
              *(_QWORD *)(v135 + 80) = *(_QWORD *)(v134 + 80);
              *(_OWORD *)(v135 + 64) = v138;
              *(_QWORD *)(v134 + 64) = 0;
              *(_QWORD *)(v134 + 72) = 0;
              *(_QWORD *)(v134 + 80) = 0;
              v139 = *(_OWORD *)(v134 + 88);
              *(_QWORD *)(v135 + 104) = *(_QWORD *)(v134 + 104);
              *(_OWORD *)(v135 + 88) = v139;
              *(_QWORD *)(v134 + 88) = 0;
              *(_QWORD *)(v134 + 96) = 0;
              *(_QWORD *)(v134 + 104) = 0;
              v140 = *(_OWORD *)(v134 + 112);
              *(_QWORD *)(v135 + 128) = *(_QWORD *)(v134 + 128);
              *(_OWORD *)(v135 + 112) = v140;
              *(_QWORD *)(v134 + 112) = 0;
              *(_QWORD *)(v134 + 120) = 0;
              *(_QWORD *)(v134 + 128) = 0;
              v135 += 136;
              v134 += 136;
            }
            v141 = v127 + 136 * v123;
            v119[4] = v135;
            if (v133 != v141)
            {
              v142 = 0;
              v143 = 0xF0F0F0F0F0F0F0F1 * ((v133 - v141) >> 3);
              v144 = v124 + 136 * v143 + 136 * v126;
              v145 = -136 * v143;
              do
              {
                v146 = v144 + v142;
                v147 = v133 + v142;
                *(_OWORD *)(v133 + v142 - 136) = *(_OWORD *)(v144 + v142 - 136);
                v148 = (void **)(v133 + v142 - 120);
                if (*(char *)(v133 + v142 - 97) < 0)
                  operator delete(*v148);
                v149 = *(_OWORD *)(v146 - 120);
                *(_QWORD *)(v133 + v142 - 104) = *(_QWORD *)(v146 - 104);
                *(_OWORD *)v148 = v149;
                *(_BYTE *)(v146 - 97) = 0;
                *(_BYTE *)(v146 - 120) = 0;
                v150 = (void **)(v147 - 96);
                if (*(char *)(v147 - 73) < 0)
                  operator delete(*v150);
                v151 = (__int128 *)(v146 - 96);
                v152 = v144 + v142;
                v153 = *v151;
                *(_QWORD *)(v147 - 80) = *((_QWORD *)v151 + 2);
                *(_OWORD *)v150 = v153;
                *(_BYTE *)(v144 + v142 - 73) = 0;
                *(_BYTE *)v151 = 0;
                v154 = v133 + v142;
                v155 = (void **)(v133 + v142 - 72);
                if (*(char *)(v133 + v142 - 49) < 0)
                  operator delete(*v155);
                v156 = *(_OWORD *)(v152 - 72);
                *(_QWORD *)(v133 + v142 - 56) = *(_QWORD *)(v152 - 56);
                *(_OWORD *)v155 = v156;
                *(_BYTE *)(v152 - 49) = 0;
                *(_BYTE *)(v152 - 72) = 0;
                v157 = (void **)(v154 - 48);
                if (*(char *)(v154 - 25) < 0)
                  operator delete(*v157);
                v158 = (__int128 *)(v152 - 48);
                v159 = v144 + v142;
                v160 = *v158;
                *(_QWORD *)(v154 - 32) = *((_QWORD *)v158 + 2);
                *(_OWORD *)v157 = v160;
                *(_BYTE *)(v144 + v142 - 25) = 0;
                *(_BYTE *)v158 = 0;
                v161 = (void **)(v133 + v142 - 24);
                if (*(char *)(v133 + v142 - 1) < 0)
                  operator delete(*v161);
                v162 = *(_OWORD *)(v159 - 24);
                *(_QWORD *)(v133 + v142 - 8) = *(_QWORD *)(v159 - 8);
                *(_OWORD *)v161 = v162;
                *(_BYTE *)(v159 - 1) = 0;
                *(_BYTE *)(v159 - 24) = 0;
                v142 -= 136;
              }
              while (v145 != v142);
            }
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(data, v238, v127);
          }
          else
          {
            v129 = v126 + v123;
            if ((unint64_t)(v126 + v123) > 0x1E1E1E1E1E1E1E1)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v130 = 0xF0F0F0F0F0F0F0F1 * ((v128 - v124) >> 3);
            if (2 * v130 > v129)
              v129 = 2 * v130;
            if (v130 >= 0xF0F0F0F0F0F0F0)
              v131 = 0x1E1E1E1E1E1E1E1;
            else
              v131 = v129;
            v261 = (char **)(v252 + 40);
            if (v131)
              v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v131);
            else
              v132 = 0;
            v163 = v131 + 136 * v126;
            *(_QWORD *)v259 = v131;
            *(_QWORD *)&v259[8] = v163;
            *(_QWORD *)&v259[16] = v163;
            v260 = (char *)(v131 + 136 * v132);
            v164 = v163 + 136 * v123;
            v165 = 136 * v123;
            do
            {
              WordFeature::WordFeature(v163, data);
              v163 += 136;
              data += 136;
              v165 -= 136;
            }
            while (v165);
            *(_QWORD *)&v259[16] = v164;
            v166 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>((uint64_t)(v119 + 5), v127, v127, v119[3], v119[3], *(uint64_t *)&v259[8], *(uint64_t *)&v259[8]);
            *(_QWORD *)&v259[8] = v166;
            v167 = v119[4];
            v168 = *(_QWORD *)&v259[16];
            if (v127 != v167)
            {
              do
              {
                *(_OWORD *)v168 = *(_OWORD *)v127;
                v169 = *(_OWORD *)(v127 + 16);
                *(_QWORD *)(v168 + 32) = *(_QWORD *)(v127 + 32);
                *(_OWORD *)(v168 + 16) = v169;
                *(_QWORD *)(v127 + 24) = 0;
                *(_QWORD *)(v127 + 32) = 0;
                *(_QWORD *)(v127 + 16) = 0;
                v170 = *(_OWORD *)(v127 + 40);
                *(_QWORD *)(v168 + 56) = *(_QWORD *)(v127 + 56);
                *(_OWORD *)(v168 + 40) = v170;
                *(_QWORD *)(v127 + 48) = 0;
                *(_QWORD *)(v127 + 56) = 0;
                *(_QWORD *)(v127 + 40) = 0;
                v171 = *(_OWORD *)(v127 + 64);
                *(_QWORD *)(v168 + 80) = *(_QWORD *)(v127 + 80);
                *(_OWORD *)(v168 + 64) = v171;
                *(_QWORD *)(v127 + 64) = 0;
                *(_QWORD *)(v127 + 72) = 0;
                *(_QWORD *)(v127 + 80) = 0;
                v172 = *(_OWORD *)(v127 + 88);
                *(_QWORD *)(v168 + 104) = *(_QWORD *)(v127 + 104);
                *(_OWORD *)(v168 + 88) = v172;
                *(_QWORD *)(v127 + 88) = 0;
                *(_QWORD *)(v127 + 96) = 0;
                *(_QWORD *)(v127 + 104) = 0;
                v173 = *(_OWORD *)(v127 + 112);
                *(_QWORD *)(v168 + 128) = *(_QWORD *)(v127 + 128);
                *(_OWORD *)(v168 + 112) = v173;
                *(_QWORD *)(v127 + 112) = 0;
                *(_QWORD *)(v127 + 120) = 0;
                *(_QWORD *)(v127 + 128) = 0;
                v168 += 136;
                v127 += 136;
              }
              while (v127 != v167);
              v166 = *(_QWORD *)&v259[8];
              v127 = v119[4];
            }
            v174 = v119[3];
            v119[3] = v166;
            v119[4] = v168;
            v175 = v119[5];
            v119[5] = (uint64_t)v260;
            *(_QWORD *)&v259[16] = v127;
            v260 = (char *)v175;
            *(_QWORD *)v259 = v174;
            *(_QWORD *)&v259[8] = v174;
            std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)v259);
            v119 = (uint64_t *)v252;
          }
        }
LABEL_178:
        std::vector<Prompt>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Prompt*>,std::__wrap_iter<Prompt*>>((uint64_t)(v119 + 6), v119[7], (uint64_t *)v253[v241][2].__r_.__value_.__l.__data_, v253[v241][2].__r_.__value_.__l.__size_, 0x8E38E38E38E38E39* ((uint64_t)(v253[v241][2].__r_.__value_.__l.__size_ - v253[v241][2].__r_.__value_.__r.__words[0]) >> 3));
        std::operator+<char>();
        v80 = v252;
        if (v259[23] >= 0)
          v176 = v259;
        else
          v176 = *(const std::string::value_type **)v259;
        if (v259[23] >= 0)
          v177 = v259[23];
        else
          v177 = *(_QWORD *)&v259[8];
        std::string::append((std::string *)(v252 + 72), v176, v177);
        if ((v259[23] & 0x80000000) != 0)
          operator delete(*(void **)v259);
        if (v239)
        {
          std::operator+<char>();
          v178 = v259[23] >= 0 ? v259 : *(const std::string::value_type **)v259;
          v179 = v259[23] >= 0 ? v259[23] : *(_QWORD *)&v259[8];
          std::string::append((std::string *)(v80 + 96), v178, v179);
          if ((v259[23] & 0x80000000) != 0)
            operator delete(*(void **)v259);
        }
LABEL_220:
        v82 = v240 + 1;
        v81 = (void **)v253;
        if (v240 + 1 >= (unint64_t)(((char *)v254 - (char *)v253) >> 4))
          goto LABEL_221;
        continue;
      }
      break;
    }
    v93 = (std::string **)*v81;
    if ((std::string **)v80 != v93)
    {
      v95 = *v93;
      v94 = v93[1];
      v96 = 0x84BDA12F684BDA13 * (((char *)v94 - (char *)*v93) >> 3);
      v97 = *(std::string **)v80;
      if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)v80) >> 3) >= v96)
      {
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v80 + 8) - (_QWORD)v97) >> 3) < v96)
        {
          v115 = (std::string *)((char *)v95 + 8 * ((uint64_t)(*(_QWORD *)(v80 + 8) - (_QWORD)v97) >> 3));
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v95, v115, v97);
          v100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v80 + 16, (uint64_t)v115, (uint64_t)v94, *(_QWORD *)(v80 + 8));
          goto LABEL_133;
        }
        v180 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(v95, v94, v97);
        for (j = *(_QWORD *)(v80 + 8); (std::string *)j != v180; std::allocator<PhoneFeature>::destroy[abi:ne180100](j))
          j -= 216;
        *(_QWORD *)(v80 + 8) = v180;
      }
      else
      {
        std::vector<PhoneFeature>::__vdeallocate((void **)v80);
        if (v96 > 0x12F684BDA12F684)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v98 = 0x97B425ED097B426 * ((uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)v80) >> 3);
        if (v98 <= v96)
          v98 = v96;
        if (0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)v80) >> 3) >= 0x97B425ED097B42)
          v99 = 0x12F684BDA12F684;
        else
          v99 = v98;
        std::vector<PhoneFeature>::__vallocate[abi:ne180100]((_QWORD *)v80, v99);
        v100 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<PhoneFeature>,PhoneFeature*,PhoneFeature*,PhoneFeature*>(v80 + 16, (uint64_t)v95, (uint64_t)v94, *(_QWORD *)(v80 + 8));
LABEL_133:
        *(_QWORD *)(v80 + 8) = v100;
      }
      v182 = *v253;
      v80 = v252;
      if ((const std::string *)v252 == *v253)
      {
        v80 = (uint64_t)*v253;
LABEL_219:
        std::string::operator=((std::string *)(v80 + 72), v182 + 3);
        v80 = v252;
        std::string::operator=((std::string *)(v252 + 96), *v253 + 4);
        std::string::operator=((std::string *)(v80 + 120), *v253 + 5);
        goto LABEL_220;
      }
      v184 = (_QWORD *)(v252 + 24);
      v183 = *(_QWORD *)(v252 + 24);
      v186 = (uint64_t)v182[1].__r_.__value_.__l.__data_;
      v185 = v182[1].__r_.__value_.__l.__size_;
      v187 = 0xF0F0F0F0F0F0F0F1 * ((v185 - v186) >> 3);
      v188 = (_QWORD *)(v252 + 40);
      if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v252 + 40) - v183) >> 3) >= v187)
      {
        if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v252 + 32) - v183) >> 3) < v187)
        {
          v192 = v186 + 8 * ((*(_QWORD *)(v252 + 32) - v183) >> 3);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(v186, v192, v183);
          v191 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v80 + 40, v192, v185, *(_QWORD *)(v80 + 32));
          goto LABEL_211;
        }
        v193 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(v186, v185, v183);
        for (k = *(_QWORD *)(v80 + 32); k != v193; std::allocator<WordFeature>::destroy[abi:ne180100](k))
          k -= 136;
        *(_QWORD *)(v80 + 32) = v193;
      }
      else
      {
        std::vector<WordFeature>::__vdeallocate((void **)(v252 + 24));
        if (v187 > 0x1E1E1E1E1E1E1E1)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v189 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v188 - *v184) >> 3);
        if (v189 <= v187)
          v189 = 0xF0F0F0F0F0F0F0F1 * ((v185 - v186) >> 3);
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v188 - *v184) >> 3) >= 0xF0F0F0F0F0F0F0)
          v190 = 0x1E1E1E1E1E1E1E1;
        else
          v190 = v189;
        std::vector<WordFeature>::__vallocate[abi:ne180100]((_QWORD *)(v80 + 24), v190);
        v191 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<WordFeature>,WordFeature*,WordFeature*,WordFeature*>(v80 + 40, v186, v185, *(_QWORD *)(v80 + 32));
LABEL_211:
        *(_QWORD *)(v80 + 32) = v191;
      }
      if ((const std::string *)v80 != *v253)
      {
        std::vector<Prompt>::__assign_with_size[abi:ne180100]<Prompt*,Prompt*>(v80 + 48, (uint64_t *)(*v253)[2].__r_.__value_.__l.__data_, (uint64_t *)(*v253)[2].__r_.__value_.__l.__size_, 0x8E38E38E38E38E39* ((uint64_t)((*v253)[2].__r_.__value_.__l.__size_ - (*v253)[2].__r_.__value_.__r.__words[0]) >> 3));
        v182 = *v253;
        goto LABEL_219;
      }
    }
    v182 = (const std::string *)v80;
    goto LABEL_219;
  }
LABEL_249:
  *(_QWORD *)v259 = &v256;
  std::vector<std::vector<std::shared_ptr<FrontendFeature>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
  *(_QWORD *)v259 = &v244;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
  v218 = (uint64_t *)v247.i64[1];
  for (m = (uint64_t *)v247.i64[0]; m != v218; m += 2)
  {
    v220 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v220 + 8) = 0u;
    v221 = (unint64_t *)(v220 + 8);
    *((_OWORD *)v220 + 2) = 0u;
    *(_QWORD *)v220 = &off_1EA932198;
    *((_QWORD *)v220 + 3) = v220 + 32;
    *(_QWORD *)v259 = v220 + 24;
    *(_QWORD *)&v259[8] = v220;
    Agglomerate::set<std::shared_ptr<FrontendFeature>>((uint64_t)(v220 + 24), m);
    v242 = v220 + 24;
    v243 = (std::__shared_weak_count *)v220;
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v236 + 72))(v236, &v242);
    v223 = v243;
    if (v243)
    {
      v224 = (unint64_t *)&v243->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    v226 = *(std::__shared_weak_count **)&v259[8];
    if (*(_QWORD *)&v259[8])
    {
      v227 = (unint64_t *)(*(_QWORD *)&v259[8] + 8);
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
  }
  *(_QWORD *)v259 = &v247;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v259);
LABEL_264:
  v229 = v250;
  if (v250)
  {
    v230 = (unint64_t *)&v250->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
  if (*((_QWORD *)&v251 + 1))
  {
    v233 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
}

void sub_1DE9BA478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<FrontendFeature>>::__init_with_size[abi:ne180100]<std::shared_ptr<FrontendFeature>*,std::shared_ptr<FrontendFeature>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1DE9BA6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<FrontendFeature>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<WordFeature *,WordFeature *,WordFeature *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v5 + 16));
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 40));
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v5 + 64));
      std::string::operator=((std::string *)(a3 + 88), (const std::string *)(v5 + 88));
      std::string::operator=((std::string *)(a3 + 112), (const std::string *)(v5 + 112));
      a3 += 136;
      v5 += 136;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<WordFeature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::allocator<WordFeature>::destroy[abi:ne180100](i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  for (result = a7; a3 != a5; a3 -= 136)
  {
    *(_OWORD *)(result - 136) = *(_OWORD *)(a3 - 136);
    v8 = *(_OWORD *)(a3 - 120);
    *(_QWORD *)(result - 104) = *(_QWORD *)(a3 - 104);
    *(_OWORD *)(result - 120) = v8;
    *(_QWORD *)(a3 - 112) = 0;
    *(_QWORD *)(a3 - 104) = 0;
    *(_QWORD *)(a3 - 120) = 0;
    v9 = *(_OWORD *)(a3 - 96);
    *(_QWORD *)(result - 80) = *(_QWORD *)(a3 - 80);
    *(_OWORD *)(result - 96) = v9;
    *(_QWORD *)(a3 - 88) = 0;
    *(_QWORD *)(a3 - 80) = 0;
    *(_QWORD *)(a3 - 96) = 0;
    v10 = *(_OWORD *)(a3 - 72);
    *(_QWORD *)(result - 56) = *(_QWORD *)(a3 - 56);
    *(_OWORD *)(result - 72) = v10;
    *(_QWORD *)(a3 - 72) = 0;
    *(_QWORD *)(a3 - 64) = 0;
    *(_QWORD *)(a3 - 56) = 0;
    v11 = *(_OWORD *)(a3 - 48);
    *(_QWORD *)(result - 32) = *(_QWORD *)(a3 - 32);
    *(_OWORD *)(result - 48) = v11;
    *(_QWORD *)(a3 - 48) = 0;
    *(_QWORD *)(a3 - 40) = 0;
    *(_QWORD *)(a3 - 32) = 0;
    v12 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v12;
    result -= 136;
    *(_QWORD *)(a3 - 24) = 0;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
  }
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PhoneFeature *,PhoneFeature *,PhoneFeature *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      v6 = *(_OWORD *)((char *)v5[2].__r_.__value_.__r.__words + 4);
      v7 = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v7;
      *(_OWORD *)((char *)this[2].__r_.__value_.__r.__words + 4) = v6;
      if (this != v5)
        std::vector<MarkerRecord>::__assign_with_size[abi:ne180100]<MarkerRecord*,MarkerRecord*>((uint64_t *)&this[3], (uint64_t)v5[3].__r_.__value_.__l.__data_, v5[3].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[3].__r_.__value_.__l.__size_ - v5[3].__r_.__value_.__r.__words[0]) >> 3));
      std::string::operator=(this + 4, v5 + 4);
      std::string::operator=(this + 5, v5 + 5);
      *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[6].__r_.__value_.__l.__data_;
      v9 = *(_OWORD *)&v5[7].__r_.__value_.__r.__words[1];
      v8 = *(_OWORD *)&v5[8].__r_.__value_.__l.__data_;
      v10 = *(_OWORD *)&v5[6].__r_.__value_.__r.__words[2];
      LODWORD(this[8].__r_.__value_.__r.__words[2]) = v5[8].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v9;
      *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v8;
      *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v10;
      this += 9;
      v5 += 9;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<WordFeature>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<WordFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<PhoneFeature>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 216;
        std::allocator<PhoneFeature>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TextPreprocessing::~TextPreprocessing(TextPreprocessing *this)
{
  *(_QWORD *)this = &off_1EA91EEB8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 35));
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91EEB8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 35));
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void TextPreprocessing::process_data(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::string *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  int v17;
  std::string *v18;
  std::string::size_type size;
  BOOL v20;
  std::string *v21;
  uint64_t v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *k;
  char *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  char *v121;
  char *v122;
  char *v123;
  void **v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char v129;
  uint64_t *v130;
  char *v131;
  uint64_t *v132;
  void **v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  __int128 v139;
  char *v140;
  uint64_t *v141;
  _BYTE *v142;
  _BYTE *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  size_t v153;
  char *v154;
  char *v155;
  _BYTE *v156;
  _BYTE *v157;
  void **v158;
  uint64_t v159;
  size_t v160;
  _BYTE *v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  uint64_t i;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  int64_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  void *v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  char *v215;
  char *j;
  char *v217;
  char *v218;
  _BYTE *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  unint64_t v223;
  _BYTE *v224;
  char *v225;
  char *v226;
  size_t v227;
  _BYTE *v228;
  _BYTE *v229;
  char *v230;
  size_t v231;
  _BYTE *v232;
  char *v233;
  char *v234;
  _BYTE *v235;
  char *v236;
  char *v237;
  size_t v238;
  _BYTE *v239;
  _BYTE *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  size_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  char *v250;
  size_t v251;
  uint64_t v252;
  std::string::size_type v253;
  std::string *v254;
  std::string *v255;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  std::string *v260;
  _BYTE *v261;
  int v262;
  std::string::size_type v263;
  char *v264;
  std::string::value_type *v265;
  char *v266;
  uint64_t v267;
  std::string::size_type v268;
  std::string::size_type v269;
  std::string::value_type *v270;
  uint64_t v271;
  char *v272;
  _QWORD *v273;
  _QWORD *v274;
  NSObject *v275;
  const char *v276;
  std::string *v277;
  char *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void (***v288)(uint8_t *__return_ptr, _QWORD, std::string *, uint64_t);
  uint64_t v289;
  std::string::size_type v290;
  uint64_t v291;
  uint8_t *v292;
  std::string *v293;
  NSObject *v294;
  unsigned int *v295;
  unsigned int *v296;
  NSObject *v297;
  const char *v298;
  unsigned int v299;
  NSObject *v300;
  _BYTE *v301;
  const char *v302;
  _BYTE *v303;
  NSObject *v304;
  _BYTE *v305;
  const char *v306;
  _BYTE *v307;
  NSObject *v308;
  const char *v309;
  std::string *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::string *v314;
  uint64_t *v315;
  uint64_t *v316;
  _QWORD *v317;
  _QWORD *v318;
  unint64_t v319;
  char *v320;
  __int128 v321;
  _BYTE *v322;
  unint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  std::string *v326;
  uint64_t v327;
  uint64_t v328;
  std::string *v329;
  std::string *__dst;
  unint64_t v331;
  unint64_t v332;
  uint64_t *v333;
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  std::string *v339;
  std::__shared_weak_count *v340;
  uint8_t v341[16];
  uint8_t buf[16];
  __int128 v343;
  int64x2_t v344;
  _BYTE v345[32];
  char *v346;
  uint64_t v347;

  v2 = a2;
  v347 = *MEMORY[0x1E0C80C00];
  v6 = *(std::string **)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v339 = v6;
  v340 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v326 = v6;
  if (a1[36])
  {
    v315 = v2;
    v317 = a1;
    v9 = (_QWORD *)a1[34];
    v10 = a1 + 35;
    if (v9 == a1 + 35)
      goto LABEL_402;
    v324 = a1 + 35;
LABEL_7:
    v11 = *((char *)v9 + 55);
    if (v11 >= 0)
      v12 = v9 + 4;
    else
      v12 = (_QWORD *)v9[4];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)v9 + 55);
    else
      v13 = v9[5];
    v14 = *((char *)v9 + 79);
    if (v14 >= 0)
      v15 = (char *)(v9 + 7);
    else
      v15 = (char *)v9[7];
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)v9 + 79);
    else
      v16 = v9[8];
    v17 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v17 >= 0)
      v18 = v6;
    else
      v18 = (std::string *)v6->__r_.__value_.__r.__words[0];
    if (v17 >= 0)
      size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    else
      size = v6->__r_.__value_.__l.__size_;
    if (size)
      v20 = v13 == 0;
    else
      v20 = 1;
    if (v20)
      goto LABEL_396;
    v336 = &v15[v16];
    v21 = (std::string *)((char *)v18 + size);
    v22 = v13 - 1;
    v23 = size - 1;
    while (1)
    {
      v24 = 0;
      while (v18->__r_.__value_.__s.__data_[v24] == *((unsigned __int8 *)v12 + v24))
      {
        v25 = v24 + 1;
        if (v23 != v24)
        {
          v20 = v22 == v24++;
          if (!v20)
            continue;
        }
        v26 = (_QWORD *)((char *)v12 + v25);
        v27 = (std::string *)((char *)v18 + v25);
        goto LABEL_37;
      }
      v26 = (_QWORD *)((char *)v12 + v24);
      v27 = (std::string *)((char *)v18 + v24);
LABEL_37:
      if (v26 == (_QWORD *)((char *)v12 + v13))
        break;
      v18 = (std::string *)((char *)v18 + 1);
      --v23;
      if (v18 == v21)
        goto LABEL_396;
    }
    if (v18 == v27)
      goto LABEL_396;
    v343 = 0u;
    v344 = 0u;
    *(_OWORD *)buf = 0u;
    if ((v6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = v6;
    else
      v28 = (std::string *)v6->__r_.__value_.__r.__words[0];
    v325 = v16 >> 1;
    v29 = v28;
    v327 = (uint64_t)v12 + v13;
    v328 = v13;
    v335 = v15;
    v331 = v16;
    while (1)
    {
      __dst = (std::string *)boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int64x2_t *)buf, v28, v29, v18);
      v31 = v344.i64[1];
      v30 = v344.i64[0];
      v32 = v344.i64[0] + v344.i64[1];
      v33 = (unint64_t)(v344.i64[0] + v344.i64[1]) >> 12;
      v35 = *(char **)&buf[8];
      v34 = (char *)v343;
      v36 = (char *)(*(_QWORD *)&buf[8] + 8 * v33);
      v37 = (unint64_t)v344.i64[0] >> 12;
      v38 = v343 - *(_QWORD *)&buf[8];
      if ((_QWORD)v343 == *(_QWORD *)&buf[8])
      {
        v39 = 0;
        v41 = 0;
        v40 = (char *)(*(_QWORD *)&buf[8] + 8 * v37);
      }
      else
      {
        v39 = *(_QWORD *)v36 + (v32 & 0xFFF);
        v40 = (char *)(*(_QWORD *)&buf[8] + 8 * v37);
        v41 = *(_QWORD *)v40 + (v344.i16[0] & 0xFFF);
      }
      if (v39 == v41)
        v42 = 0;
      else
        v42 = v39 + ((v36 - v40) << 9) - (v41 + *(_QWORD *)v36) + *(_QWORD *)v40;
      v332 = v42;
      v329 = v27;
      if (v42 >= v344.i64[1] - v42)
      {
        v54 = (v38 << 9) - 1;
        v55 = v343 - *(_QWORD *)&buf[8];
        if ((_QWORD)v343 == *(_QWORD *)&buf[8])
          v54 = 0;
        v56 = v54 - v32;
        v57 = v16 >= v56;
        v58 = v16 - v56;
        if (v58 != 0 && v57)
        {
          if ((_QWORD)v343 == *(_QWORD *)&buf[8])
            v59 = v58 + 1;
          else
            v59 = v58;
          if ((v59 & 0xFFF) != 0)
            v60 = (v59 >> 12) + 1;
          else
            v60 = v59 >> 12;
          if (v60 >= v37)
            v61 = (unint64_t)v344.i64[0] >> 12;
          else
            v61 = v60;
          if (v60 <= v37)
          {
            for (v344.i64[0] -= v61 << 12; v61; --v61)
            {
              v66 = (char *)(*(_QWORD *)&buf[8] + 8);
              v67 = **(_QWORD **)&buf[8];
              *(_QWORD *)&buf[8] += 8;
              if (v34 == *((char **)&v343 + 1))
              {
                v68 = (uint64_t)&v66[-*(_QWORD *)buf];
                if ((unint64_t)v66 <= *(_QWORD *)buf)
                {
                  if (v34 == *(char **)buf)
                    v76 = 1;
                  else
                    v76 = (uint64_t)&v34[-*(_QWORD *)buf] >> 2;
                  v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v76);
                  v79 = *(uint64_t **)&buf[8];
                  v34 = &v77[8 * (v76 >> 2)];
                  v80 = v343 - *(_QWORD *)&buf[8];
                  if ((_QWORD)v343 != *(_QWORD *)&buf[8])
                  {
                    v34 = &v77[8 * (v76 >> 2) + (v80 & 0xFFFFFFFFFFFFFFF8)];
                    v81 = 8 * (v80 >> 3);
                    v82 = &v77[8 * (v76 >> 2)];
                    do
                    {
                      v83 = *v79++;
                      *(_QWORD *)v82 = v83;
                      v82 += 8;
                      v81 -= 8;
                    }
                    while (v81);
                  }
                  v84 = *(void **)buf;
                  *(_QWORD *)buf = v77;
                  *(_QWORD *)&buf[8] = &v77[8 * (v76 >> 2)];
                  *(_QWORD *)&v343 = v34;
                  *((_QWORD *)&v343 + 1) = &v77[8 * v78];
                  if (v84)
                  {
                    operator delete(v84);
                    v34 = (char *)v343;
                  }
                }
                else
                {
                  v69 = v68 >> 3;
                  v70 = v68 >> 3 < -1;
                  v71 = (v68 >> 3) + 2;
                  if (v70)
                    v72 = v71;
                  else
                    v72 = v69 + 1;
                  v73 = &v66[-8 * (v72 >> 1)];
                  v74 = v34 - v66;
                  if (v34 != v66)
                  {
                    memmove(&v66[-8 * (v72 >> 1)], v66, v34 - v66);
                    v34 = *(char **)&buf[8];
                  }
                  v75 = &v34[-8 * (v72 >> 1)];
                  v34 = &v73[v74];
                  *(_QWORD *)&buf[8] = v75;
                  *(_QWORD *)&v343 = &v73[v74];
                }
              }
              *(_QWORD *)v34 = v67;
              v34 = (char *)(v343 + 8);
              *(_QWORD *)&v343 = v343 + 8;
            }
          }
          else
          {
            v62 = v60 - v61;
            if (v60 - v61 <= ((uint64_t)(*((_QWORD *)&v343 + 1) - *(_QWORD *)buf) >> 3) - (v55 >> 3))
            {
              if (v62)
              {
                while (*((_QWORD *)&v343 + 1) != (_QWORD)v343)
                {
                  *(_QWORD *)v345 = operator new(0x1000uLL);
                  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(buf, v345);
                  if (!--v62)
                  {
                    v34 = (char *)v343;
                    goto LABEL_251;
                  }
                }
                for (i = 0; i != v62; ++i)
                {
                  *(_QWORD *)v345 = operator new(0x1000uLL);
                  std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v345);
                  v34 = (char *)v343;
                  v181 = 4095;
                  if ((_QWORD)v343 - *(_QWORD *)&buf[8] != 8)
                    v181 = 4096;
                  v182 = v181 + v344.i64[0];
                  v344.i64[0] = v182;
                }
                v61 += v62;
              }
              else
              {
LABEL_251:
                v182 = v344.i64[0];
              }
              for (v344.i64[0] = v182 - (v61 << 12); v61; --v61)
              {
                v183 = (char *)(*(_QWORD *)&buf[8] + 8);
                v184 = **(_QWORD **)&buf[8];
                *(_QWORD *)&buf[8] += 8;
                if (v34 == *((char **)&v343 + 1))
                {
                  v185 = (uint64_t)&v183[-*(_QWORD *)buf];
                  if ((unint64_t)v183 <= *(_QWORD *)buf)
                  {
                    if (v34 == *(char **)buf)
                      v192 = 1;
                    else
                      v192 = (uint64_t)&v34[-*(_QWORD *)buf] >> 2;
                    v193 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v192);
                    v195 = *(uint64_t **)&buf[8];
                    v34 = &v193[8 * (v192 >> 2)];
                    v196 = v343 - *(_QWORD *)&buf[8];
                    if ((_QWORD)v343 != *(_QWORD *)&buf[8])
                    {
                      v34 = &v193[8 * (v192 >> 2) + (v196 & 0xFFFFFFFFFFFFFFF8)];
                      v197 = 8 * (v196 >> 3);
                      v198 = &v193[8 * (v192 >> 2)];
                      do
                      {
                        v199 = *v195++;
                        *(_QWORD *)v198 = v199;
                        v198 += 8;
                        v197 -= 8;
                      }
                      while (v197);
                    }
                    v200 = *(void **)buf;
                    *(_QWORD *)buf = v193;
                    *(_QWORD *)&buf[8] = &v193[8 * (v192 >> 2)];
                    *(_QWORD *)&v343 = v34;
                    *((_QWORD *)&v343 + 1) = &v193[8 * v194];
                    if (v200)
                    {
                      operator delete(v200);
                      v34 = (char *)v343;
                    }
                  }
                  else
                  {
                    v186 = v185 >> 3;
                    v70 = v185 >> 3 < -1;
                    v187 = (v185 >> 3) + 2;
                    if (v70)
                      v188 = v187;
                    else
                      v188 = v186 + 1;
                    v189 = &v183[-8 * (v188 >> 1)];
                    v190 = v34 - v183;
                    if (v34 != v183)
                    {
                      memmove(&v183[-8 * (v188 >> 1)], v183, v34 - v183);
                      v34 = *(char **)&buf[8];
                    }
                    v191 = &v34[-8 * (v188 >> 1)];
                    v34 = &v189[v190];
                    *(_QWORD *)&buf[8] = v191;
                    *(_QWORD *)&v343 = &v189[v190];
                  }
                }
                *(_QWORD *)v34 = v184;
                v34 = (char *)(v343 + 8);
                *(_QWORD *)&v343 = v343 + 8;
              }
            }
            else
            {
              v63 = v55 >> 3;
              if ((uint64_t)(*((_QWORD *)&v343 + 1) - *(_QWORD *)buf) >> 2 <= v62 + (v55 >> 3))
                v64 = v62 + (v55 >> 3);
              else
                v64 = (uint64_t)(*((_QWORD *)&v343 + 1) - *(_QWORD *)buf) >> 2;
              v346 = (char *)&v343 + 8;
              if (v64)
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v64);
              else
                v65 = 0;
              *(_QWORD *)v345 = v64;
              *(_QWORD *)&v345[8] = v64 + 8 * (v63 - v61);
              *(_QWORD *)&v345[16] = *(_QWORD *)&v345[8];
              *(_QWORD *)&v345[24] = v64 + 8 * v65;
              do
              {
                *(_QWORD *)v341 = operator new(0x1000uLL);
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v345, v341);
                --v62;
              }
              while (v62);
              v323 = v61 << 12;
              if (v61)
              {
                v162 = *(_QWORD **)&buf[8];
                v163 = *(char **)&v345[16];
                do
                {
                  if (v163 == *(char **)&v345[24])
                  {
                    v164 = *(char **)&v345[8];
                    v165 = *(void **)v345;
                    if (*(_QWORD *)&v345[8] <= *(_QWORD *)v345)
                    {
                      if (v163 == *(char **)v345)
                        v171 = 1;
                      else
                        v171 = (uint64_t)&v163[-*(_QWORD *)v345] >> 2;
                      v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v171);
                      v174 = v163 - v164;
                      v20 = v163 == v164;
                      v163 = &v172[8 * (v171 >> 2)];
                      if (!v20)
                      {
                        v163 = &v172[8 * (v171 >> 2) + (v174 & 0xFFFFFFFFFFFFFFF8)];
                        v175 = 8 * (v174 >> 3);
                        v176 = &v172[8 * (v171 >> 2)];
                        do
                        {
                          v177 = *(_QWORD *)v164;
                          v164 += 8;
                          *(_QWORD *)v176 = v177;
                          v176 += 8;
                          v175 -= 8;
                        }
                        while (v175);
                      }
                      *(_QWORD *)v345 = v172;
                      *(_QWORD *)&v345[8] = &v172[8 * (v171 >> 2)];
                      *(_QWORD *)&v345[16] = v163;
                      *(_QWORD *)&v345[24] = &v172[8 * v173];
                      if (v165)
                        operator delete(v165);
                    }
                    else
                    {
                      v166 = (uint64_t)(*(_QWORD *)&v345[8] - *(_QWORD *)v345) >> 3;
                      if (v166 >= -1)
                        v167 = v166 + 1;
                      else
                        v167 = v166 + 2;
                      v168 = *(_QWORD *)&v345[8] - 8 * (v167 >> 1);
                      v169 = &v163[-*(_QWORD *)&v345[8]];
                      if (v163 != *(char **)&v345[8])
                      {
                        memmove((void *)(*(_QWORD *)&v345[8] - 8 * (v167 >> 1)), *(const void **)&v345[8], (size_t)&v163[-*(_QWORD *)&v345[8]]);
                        v163 = v164;
                      }
                      v170 = &v163[-8 * (v167 >> 1)];
                      v163 = &v169[v168];
                      *(_QWORD *)&v345[8] = v170;
                      *(_QWORD *)&v345[16] = &v169[v168];
                      v15 = v335;
                    }
                  }
                  *(_QWORD *)v163 = *v162;
                  v163 = (char *)(*(_QWORD *)&v345[16] + 8);
                  *(_QWORD *)&v345[16] += 8;
                  v162 = (_QWORD *)(*(_QWORD *)&buf[8] + 8);
                  *(_QWORD *)&buf[8] += 8;
                  --v61;
                }
                while (v61);
              }
              v178 = (_QWORD *)v343;
              v16 = v331;
              while (v178 != *(_QWORD **)&buf[8])
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)v345, --v178);
              v179 = *(void **)buf;
              *(_OWORD *)buf = *(_OWORD *)v345;
              v343 = *(_OWORD *)&v345[16];
              v344.i64[0] -= v323;
              if (v179)
              {
                operator delete(v179);
                v34 = (char *)v343;
              }
              else
              {
                v34 = *(char **)&v345[16];
              }
            }
          }
          v31 = v344.i64[1];
          v35 = *(char **)&buf[8];
          LOWORD(v32) = v344.i16[0] + v344.i16[4];
          v33 = (unint64_t)(v344.i64[0] + v344.i64[1]) >> 12;
        }
        v201 = &v35[8 * v33];
        if (v34 == v35)
          v202 = 0;
        else
          v202 = (char *)(*(_QWORD *)v201 + (v32 & 0xFFF));
        v203 = v31 - v332;
        v204 = v202;
        v205 = v201;
        v206 = v336;
        v207 = v16;
        if (v31 - v332 < v16)
        {
          v206 = &v15[v203];
          v208 = v16 + v332 - v31;
          v209 = &v15[v203];
          v205 = v201;
          v204 = v202;
          do
          {
            *v204++ = *v209;
            if (&v204[-*(_QWORD *)v205] == (char *)4096)
            {
              v210 = (char *)*((_QWORD *)v205 + 1);
              v205 += 8;
              v204 = v210;
            }
            ++v209;
            ++v344.i64[1];
            --v208;
          }
          while (v208);
          v207 = v203;
        }
        if (v207)
        {
          v211 = (uint64_t)&v202[-v207 - *(_QWORD *)v201];
          if (v211 < 1)
          {
            v214 = 4095 - v211;
            v212 = &v201[-8 * (v214 >> 12)];
            v213 = (char *)(*(_QWORD *)v212 + (~(_WORD)v214 & 0xFFF));
          }
          else
          {
            v212 = &v201[8 * ((unint64_t)v211 >> 12)];
            v213 = (char *)(*(_QWORD *)v212 + (v211 & 0xFFF));
          }
          v215 = v212;
          for (j = v213; j != v202; ++v344.i64[1])
          {
            *v204++ = *j;
            if (&v204[-*(_QWORD *)v205] == (char *)4096)
            {
              v217 = (char *)*((_QWORD *)v205 + 1);
              v205 += 8;
              v204 = v217;
            }
            if (&(++j)[-*(_QWORD *)v215] == (char *)4096)
            {
              v218 = (char *)*((_QWORD *)v215 + 1);
              v215 += 8;
              j = v218;
            }
          }
          if (v207 < v203)
          {
            v219 = *(_BYTE **)v201;
            v220 = (uint64_t)&v202[-v203 - *(_QWORD *)v201];
            if (v220 < 1)
            {
              v223 = 4095 - v220;
              v221 = &v201[-8 * (v223 >> 12)];
              v222 = (char *)(*(_QWORD *)v221 + (~(_WORD)v223 & 0xFFF));
            }
            else
            {
              v221 = &v201[8 * ((unint64_t)v220 >> 12)];
              v222 = (char *)(*(_QWORD *)v221 + (v220 & 0xFFF));
            }
            if (v221 == v212)
            {
              if (v222 != v213)
              {
                while (1)
                {
                  v230 = (char *)(v202 - v219);
                  if (v213 - v222 >= (uint64_t)v230)
                    v231 = (size_t)v230;
                  else
                    v231 = v213 - v222;
                  v213 -= v231;
                  v202 -= v231;
                  if (v231)
                    memmove(v202, v213, v231);
                  if (v213 == v222)
                    break;
                  v232 = (_BYTE *)*((_QWORD *)v201 - 1);
                  v201 -= 8;
                  v219 = v232;
                  v202 = v232 + 4096;
                }
LABEL_338:
                if ((char *)(*(_QWORD *)v201 + 4096) == v202)
                {
                  v246 = (char *)*((_QWORD *)v201 + 1);
                  v201 += 8;
                  v202 = v246;
                }
              }
            }
            else
            {
              v224 = *(_BYTE **)v212;
              v334 = v222;
              if (*(char **)v212 == v213)
              {
                v15 = v335;
              }
              else
              {
                v225 = v221;
                while (1)
                {
                  v226 = (char *)(v202 - v219);
                  if (v213 - v224 >= (uint64_t)v226)
                    v227 = (size_t)v226;
                  else
                    v227 = v213 - v224;
                  v213 -= v227;
                  v202 -= v227;
                  if (v227)
                    memmove(v202, v213, v227);
                  if (v213 == v224)
                    break;
                  v228 = (_BYTE *)*((_QWORD *)v201 - 1);
                  v201 -= 8;
                  v219 = v228;
                  v202 = v228 + 4096;
                }
                v219 = *(_BYTE **)v201;
                if ((char *)(*(_QWORD *)v201 + 4096) == v202)
                {
                  v229 = (_BYTE *)*((_QWORD *)v201 + 1);
                  v201 += 8;
                  v219 = v229;
                  v202 = v229;
                }
                v221 = v225;
                v222 = v334;
                v15 = v335;
              }
              v233 = v212 - 8;
              if (v212 - 8 != v221)
              {
                do
                {
                  v234 = v221;
                  v235 = *(_BYTE **)v233;
                  v236 = (char *)(*(_QWORD *)v233 + 4096);
                  while (1)
                  {
                    v237 = (char *)(v202 - v219);
                    if (v236 - v235 >= (uint64_t)v237)
                      v238 = (size_t)v237;
                    else
                      v238 = v236 - v235;
                    v236 -= v238;
                    v202 -= v238;
                    if (v238)
                      memmove(v202, v236, v238);
                    if (v236 == v235)
                      break;
                    v239 = (_BYTE *)*((_QWORD *)v201 - 1);
                    v201 -= 8;
                    v219 = v239;
                    v202 = v239 + 4096;
                  }
                  v219 = *(_BYTE **)v201;
                  if ((char *)(*(_QWORD *)v201 + 4096) == v202)
                  {
                    v240 = (_BYTE *)*((_QWORD *)v201 + 1);
                    v201 += 8;
                    v219 = v240;
                    v202 = v240;
                  }
                  v15 = v335;
                  v221 = v234;
                  v233 -= 8;
                }
                while (v233 != v234);
                v222 = v334;
              }
              v241 = (char *)(*(_QWORD *)v221 + 4096);
              if (v241 != v222)
              {
                v242 = *(_QWORD *)v201;
                while (1)
                {
                  v243 = &v202[-v242];
                  if (v241 - v222 >= (uint64_t)v243)
                    v244 = (size_t)v243;
                  else
                    v244 = v241 - v222;
                  v241 -= v244;
                  v202 -= v244;
                  if (v244)
                    memmove(v202, v241, v244);
                  if (v241 == v222)
                    break;
                  v245 = *((_QWORD *)v201 - 1);
                  v201 -= 8;
                  v242 = v245;
                  v202 = (char *)(v245 + 4096);
                }
                goto LABEL_338;
              }
            }
          }
          if (v206 != v15)
          {
            v249 = *(_QWORD *)v201;
            v248 = (uint64_t *)(v201 - 8);
            v247 = v249;
            while (1)
            {
              v250 = &v202[-v247];
              if (v206 - v15 >= (uint64_t)v250)
                v251 = (size_t)v250;
              else
                v251 = v206 - v15;
              v206 -= v251;
              if (v251)
                memmove(&v202[-v251], v206, v251);
              if (v206 == v15)
                break;
              v252 = *v248--;
              v247 = v252;
              v202 = (char *)(v252 + 4096);
            }
          }
        }
      }
      else
      {
        v43 = v16 - v344.i64[0];
        if (v16 > v344.i64[0])
        {
          v44 = (v38 << 9) - 1;
          v45 = v343 - *(_QWORD *)&buf[8];
          if ((_QWORD)v343 == *(_QWORD *)&buf[8])
          {
            v44 = 0;
            ++v43;
          }
          if ((v43 & 0xFFF) != 0)
            v46 = (v43 >> 12) + 1;
          else
            v46 = v43 >> 12;
          v47 = v44 - v32;
          if (v46 >= v47 >> 12)
            v48 = v47 >> 12;
          else
            v48 = v46;
          if (v46 <= v47 >> 12)
          {
            for (v344.i64[0] += v48 << 12; v48; --v48)
            {
              *(_QWORD *)v345 = *(_QWORD *)(v343 - 8);
              *(_QWORD *)&v343 = v343 - 8;
              std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v345);
            }
          }
          else
          {
            v49 = v46 - v48;
            v50 = *((_QWORD *)&v343 + 1) - *(_QWORD *)buf;
            if (v46 - v48 <= ((uint64_t)(*((_QWORD *)&v343 + 1) - *(_QWORD *)buf) >> 3) - (v45 >> 3))
            {
              if (v49)
              {
                if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
                {
LABEL_116:
                  v86 = v49;
                  do
                  {
                    *(_QWORD *)v345 = operator new(0x1000uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(buf, v345);
                    --v86;
                  }
                  while (v86);
                  v48 += v49;
                  v30 = v344.i64[0];
                }
                else
                {
                  while (1)
                  {
                    *(_QWORD *)v345 = operator new(0x1000uLL);
                    std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v345);
                    v85 = 4095;
                    if ((_QWORD)v343 - *(_QWORD *)&buf[8] != 8)
                      v85 = 4096;
                    v30 = v85 + v344.i64[0];
                    v344.i64[0] = v30;
                    if (!--v49)
                      break;
                    if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
                      goto LABEL_116;
                  }
                }
              }
              for (v344.i64[0] = v30 + (v48 << 12); v48; --v48)
              {
                *(_QWORD *)v345 = *(_QWORD *)(v343 - 8);
                *(_QWORD *)&v343 = v343 - 8;
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_front((uint64_t)buf, v345);
              }
            }
            else
            {
              v51 = v343 == *(_QWORD *)&buf[8];
              if (v50 >> 2 <= v49 + (v45 >> 3))
                v52 = v49 + (v45 >> 3);
              else
                v52 = v50 >> 2;
              v346 = (char *)&v343 + 8;
              if (v52)
                v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
              else
                v53 = 0;
              v87 = (v46 << 12) - v51;
              *(_QWORD *)v345 = v52;
              *(_QWORD *)&v345[8] = v52;
              *(_QWORD *)&v345[16] = v52;
              *(_QWORD *)&v345[24] = v52 + 8 * v53;
              do
              {
                *(_QWORD *)v341 = operator new(0x1000uLL);
                std::__split_buffer<std::shared_ptr<Agglomerate> *,std::allocator<std::shared_ptr<Agglomerate> *>>::push_back(v345, v341);
                --v49;
              }
              while (v49);
              v319 = v87;
              v88 = v343;
              for (k = *(char **)&v345[16]; v48; --v48)
              {
                if (k == *(char **)&v345[24])
                {
                  v90 = *(char **)&v345[8];
                  v91 = *(void **)v345;
                  if (*(_QWORD *)&v345[8] <= *(_QWORD *)v345)
                  {
                    if (k == *(char **)v345)
                      v97 = 1;
                    else
                      v97 = (uint64_t)&k[-*(_QWORD *)v345] >> 2;
                    v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
                    v100 = k - v90;
                    v20 = k == v90;
                    k = &v98[8 * (v97 >> 2)];
                    if (!v20)
                    {
                      k = &v98[8 * (v97 >> 2) + (v100 & 0xFFFFFFFFFFFFFFF8)];
                      v101 = 8 * (v100 >> 3);
                      v102 = &v98[8 * (v97 >> 2)];
                      do
                      {
                        v103 = *(_QWORD *)v90;
                        v90 += 8;
                        *(_QWORD *)v102 = v103;
                        v102 += 8;
                        v101 -= 8;
                      }
                      while (v101);
                    }
                    *(_QWORD *)v345 = v98;
                    *(_QWORD *)&v345[8] = &v98[8 * (v97 >> 2)];
                    *(_QWORD *)&v345[16] = k;
                    *(_QWORD *)&v345[24] = &v98[8 * v99];
                    if (v91)
                      operator delete(v91);
                  }
                  else
                  {
                    v92 = (uint64_t)(*(_QWORD *)&v345[8] - *(_QWORD *)v345) >> 3;
                    if (v92 >= -1)
                      v93 = v92 + 1;
                    else
                      v93 = v92 + 2;
                    v94 = *(_QWORD *)&v345[8] - 8 * (v93 >> 1);
                    v95 = &k[-*(_QWORD *)&v345[8]];
                    if (k != *(char **)&v345[8])
                    {
                      memmove((void *)(*(_QWORD *)&v345[8] - 8 * (v93 >> 1)), *(const void **)&v345[8], (size_t)&k[-*(_QWORD *)&v345[8]]);
                      k = v90;
                    }
                    v96 = &k[-8 * (v93 >> 1)];
                    k = &v95[v94];
                    *(_QWORD *)&v345[8] = v96;
                    *(_QWORD *)&v345[16] = &v95[v94];
                    v15 = v335;
                  }
                }
                *(_QWORD *)k = *(_QWORD *)(v88 - 8);
                k = (char *)(*(_QWORD *)&v345[16] + 8);
                *(_QWORD *)&v345[16] += 8;
                v88 = v343 - 8;
                *(_QWORD *)&v343 = v343 - 8;
              }
              v104 = *(uint64_t **)&buf[8];
              if (*(_QWORD *)&buf[8] != v88)
              {
                do
                {
                  if (k == *(char **)&v345[24])
                  {
                    v105 = *(char **)&v345[8];
                    v106 = *(void **)v345;
                    if (*(_QWORD *)&v345[8] <= *(_QWORD *)v345)
                    {
                      if (k == *(char **)v345)
                        v112 = 1;
                      else
                        v112 = (uint64_t)&k[-*(_QWORD *)v345] >> 2;
                      v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v112);
                      v115 = k - v105;
                      v20 = k == v105;
                      k = &v113[8 * (v112 >> 2)];
                      if (!v20)
                      {
                        k = &v113[8 * (v112 >> 2) + (v115 & 0xFFFFFFFFFFFFFFF8)];
                        v116 = 8 * (v115 >> 3);
                        v117 = &v113[8 * (v112 >> 2)];
                        do
                        {
                          v118 = *(_QWORD *)v105;
                          v105 += 8;
                          *(_QWORD *)v117 = v118;
                          v117 += 8;
                          v116 -= 8;
                        }
                        while (v116);
                      }
                      *(_QWORD *)v345 = v113;
                      *(_QWORD *)&v345[8] = &v113[8 * (v112 >> 2)];
                      *(_QWORD *)&v345[16] = k;
                      *(_QWORD *)&v345[24] = &v113[8 * v114];
                      if (v106)
                        operator delete(v106);
                    }
                    else
                    {
                      v107 = (uint64_t)(*(_QWORD *)&v345[8] - *(_QWORD *)v345) >> 3;
                      if (v107 >= -1)
                        v108 = v107 + 1;
                      else
                        v108 = v107 + 2;
                      v109 = *(_QWORD *)&v345[8] - 8 * (v108 >> 1);
                      v110 = &k[-*(_QWORD *)&v345[8]];
                      if (k != *(char **)&v345[8])
                      {
                        memmove((void *)(*(_QWORD *)&v345[8] - 8 * (v108 >> 1)), *(const void **)&v345[8], (size_t)&k[-*(_QWORD *)&v345[8]]);
                        k = v105;
                      }
                      v111 = &k[-8 * (v108 >> 1)];
                      k = &v110[v109];
                      *(_QWORD *)&v345[8] = v111;
                      *(_QWORD *)&v345[16] = &v110[v109];
                    }
                  }
                  v119 = *v104++;
                  *(_QWORD *)k = v119;
                  k = (char *)(*(_QWORD *)&v345[16] + 8);
                  *(_QWORD *)&v345[16] += 8;
                }
                while (v104 != (uint64_t *)v343);
              }
              v120 = *(void **)buf;
              *(_OWORD *)buf = *(_OWORD *)v345;
              *(_QWORD *)&v343 = k;
              *((_QWORD *)&v343 + 1) = *(_QWORD *)&v345[24];
              v344.i64[0] += v319;
              if (v120)
                operator delete(v120);
            }
          }
          LOWORD(v30) = v344.i16[0];
          v35 = *(char **)&buf[8];
          v34 = (char *)v343;
          v37 = (unint64_t)v344.i64[0] >> 12;
        }
        v121 = &v35[8 * v37];
        if (v34 == v35)
          v122 = 0;
        else
          v122 = (char *)(*(_QWORD *)v121 + (v30 & 0xFFF));
        v123 = v122;
        v124 = (void **)&v35[8 * v37];
        v125 = v15;
        v126 = v331;
        if (v331 > v332)
        {
          if (v332 >= v325)
            v125 = &v15[v331 - v332];
          else
            v125 = &v336[-v332];
          if (v125 == v15)
          {
            v123 = v122;
            v124 = (void **)&v35[8 * v37];
            v125 = v15;
          }
          else
          {
            v127 = v125;
            v124 = (void **)&v35[8 * v37];
            v123 = v122;
            do
            {
              if (v123 == *v124)
              {
                v128 = (uint64_t)*--v124;
                v123 = (char *)(v128 + 4096);
              }
              v129 = *--v127;
              *--v123 = v129;
              v344 = vaddq_s64(v344, (int64x2_t)xmmword_1DED16B80);
            }
            while (v127 != v15);
          }
          v126 = v332;
        }
        if (v126)
        {
          v320 = &v35[8 * v37];
          v130 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](v121, (uint64_t)v122, v126);
          v132 = v130;
          if (v122 != v131)
          {
            v133 = (void **)v130;
            v134 = v131;
            do
            {
              if (v123 == *v124)
              {
                v135 = (uint64_t)*--v124;
                v123 = (char *)(v135 + 4096);
              }
              if (v134 == *v133)
              {
                v136 = (uint64_t)*--v133;
                v134 = (char *)(v136 + 4096);
              }
              v137 = *--v134;
              *--v123 = v137;
              v344 = vaddq_s64(v344, (int64x2_t)xmmword_1DED16B80);
            }
            while (v134 != v122);
          }
          v138 = v320;
          *(_QWORD *)&v139 = v320;
          *((_QWORD *)&v139 + 1) = v122;
          if (v126 < v332)
          {
            v140 = v131;
            v321 = v139;
            v141 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](v138, (uint64_t)v122, v332);
            v143 = v142;
            *(_OWORD *)v345 = v321;
            *(_QWORD *)v341 = v345;
            if (v132 == v141)
            {
              v156 = v140;
            }
            else
            {
              v144 = v141;
              v322 = v142;
              v146 = *v132;
              v145 = v132 + 1;
              std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100]((_QWORD **)v341, v140, (_BYTE *)(v146 + 4096));
              if (v145 != v144)
              {
                v147 = *(char **)&v345[8];
                v148 = *(_QWORD **)v345;
                v333 = v144;
                do
                {
                  v149 = 0;
                  v150 = *v145;
                  v151 = (char *)*v148;
                  while (1)
                  {
                    v152 = v151 - v147 + 4096;
                    if (4096 - v149 >= v152)
                      v153 = v152;
                    else
                      v153 = 4096 - v149;
                    if (v153)
                      memmove(v147, (const void *)(v150 + v149), v153);
                    v149 += v153;
                    if (v149 == 4096)
                      break;
                    v154 = (char *)v148[1];
                    ++v148;
                    v151 = v154;
                    v147 = v154;
                  }
                  v147 += v153;
                  if ((char *)(*v148 + 4096) == v147)
                  {
                    v155 = (char *)v148[1];
                    ++v148;
                    v147 = v155;
                  }
                  v144 = v333;
                  v15 = v335;
                  *(_QWORD *)v345 = v148;
                  *(_QWORD *)&v345[8] = v147;
                  ++v145;
                }
                while (v145 != v333);
              }
              v156 = (_BYTE *)*v144;
              v143 = v322;
            }
            std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100]((_QWORD **)v341, v156, v143);
            v122 = *(char **)&v345[8];
            *(_QWORD *)&v139 = *(_QWORD *)v345;
          }
          if (v125 != v336)
          {
            v158 = (void **)(v139 + 8);
            v157 = *(_BYTE **)v139;
            while (1)
            {
              v159 = v157 - v122 + 4096;
              if (v336 - v125 >= v159)
                v160 = v159;
              else
                v160 = v336 - v125;
              if (v160)
                memmove(v122, v125, v160);
              v125 += v160;
              if (v125 == v336)
                break;
              v161 = *v158++;
              v157 = v161;
              v122 = v161;
            }
          }
        }
      }
      v6 = v326;
      v253 = HIBYTE(v326->__r_.__value_.__r.__words[2]);
      if ((v253 & 0x80u) == 0)
        v254 = v326;
      else
        v254 = (std::string *)v326->__r_.__value_.__r.__words[0];
      if ((v253 & 0x80u) != 0)
        v253 = v326->__r_.__value_.__l.__size_;
      v255 = (std::string *)((char *)v254 + v253);
      v29 = v329;
      if (v329 == v255 || v328 == 0)
      {
LABEL_371:
        v28 = __dst;
LABEL_372:
        v261 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int64x2_t *)buf, v28, v329, v255);
        v262 = SHIBYTE(v326->__r_.__value_.__r.__words[2]);
        if (v262 >= 0)
          v263 = HIBYTE(v326->__r_.__value_.__r.__words[2]);
        else
          v263 = v326->__r_.__value_.__l.__size_;
        if (v344.i64[1])
        {
          v264 = (char *)(*(_QWORD *)&buf[8] + 8 * ((unint64_t)v344.i64[0] >> 12));
          if ((_QWORD)v343 == *(_QWORD *)&buf[8])
          {
            v265 = 0;
            v267 = 0;
            v266 = (char *)(*(_QWORD *)&buf[8] + 8 * ((unint64_t)(v344.i64[0] + v344.i64[1]) >> 12));
          }
          else
          {
            v265 = (std::string::value_type *)(*(_QWORD *)v264 + (v344.i16[0] & 0xFFF));
            v266 = (char *)(*(_QWORD *)&buf[8] + 8 * ((unint64_t)(v344.i64[0] + v344.i64[1]) >> 12));
            v267 = *(_QWORD *)v266 + ((v344.i64[0] + v344.i64[1]) & 0xFFF);
          }
          if ((std::string::value_type *)v267 != v265)
          {
            v269 = v267 + ((v266 - v264) << 9) - (_QWORD)&v265[*(_QWORD *)v266] + *(_QWORD *)v264;
            if (v269)
            {
              memset(v345, 0, 24);
              do
              {
                std::string::push_back((std::string *)v345, *v265++);
                if (&v265[-*(_QWORD *)v264] == (std::string::value_type *)4096)
                {
                  v270 = (std::string::value_type *)*((_QWORD *)v264 + 1);
                  v264 += 8;
                  v265 = v270;
                }
              }
              while (v265 != (std::string::value_type *)v267);
              v271 = v345[23];
              if (v345[23] >= 0)
                v272 = v345;
              else
                v272 = *(char **)v345;
              if (v345[23] < 0)
                v271 = *(_QWORD *)&v345[8];
              std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v326, v269, v263, v272, &v272[v271]);
              if ((v345[23] & 0x80000000) != 0)
                operator delete(*(void **)v345);
            }
          }
        }
        else
        {
          v268 = v326->__r_.__value_.__r.__words[0];
          if (v262 >= 0)
            v268 = (std::string::size_type)v326;
          std::string::erase(v326, (std::string::size_type)&v261[-v268], v268 + v263 - (_QWORD)v261);
        }
        std::deque<char>::~deque[abi:ne180100]((uint64_t)buf);
        v10 = v324;
LABEL_396:
        v273 = (_QWORD *)v9[1];
        if (v273)
        {
          do
          {
            v274 = v273;
            v273 = (_QWORD *)*v273;
          }
          while (v273);
        }
        else
        {
          do
          {
            v274 = (_QWORD *)v9[2];
            v20 = *v274 == (_QWORD)v9;
            v9 = v274;
          }
          while (!v20);
        }
        v9 = v274;
        if (v274 == v10)
        {
LABEL_402:
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          a1 = v317;
          v275 = Diagnostics_GetLogObject(void)::__profile_log_default;
          v2 = v315;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            v277 = v6;
            if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
              v277 = (std::string *)v6->__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v277;
            _os_log_impl(&dword_1DE3F6000, v275, OS_LOG_TYPE_DEFAULT, "Preprocessed text: %s", buf, 0xCu);
          }
          if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
            v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
          v314 = v6;
          v278 = "Preprocessed text: %s";
          goto LABEL_411;
        }
        goto LABEL_7;
      }
      v18 = v329;
      v16 = v331;
      while (1)
      {
        v257 = 0;
        while (v18->__r_.__value_.__s.__data_[v257] == *((unsigned __int8 *)v12 + v257))
        {
          v258 = v257 + 1;
          if ((std::string *)((char *)&v18->__r_.__value_.__l.__data_ + v257 + 1) != v255)
          {
            v20 = v22 == v257++;
            if (!v20)
              continue;
          }
          v259 = (uint64_t)v12 + v258;
          v260 = (std::string *)((char *)v18 + v258);
          goto LABEL_366;
        }
        v259 = (uint64_t)v12 + v257;
        v260 = (std::string *)((char *)v18 + v257);
LABEL_366:
        if (v259 == v327)
          break;
        v18 = (std::string *)((char *)v18 + 1);
        if (v18 == v255)
          goto LABEL_371;
      }
      v27 = v260;
      v28 = __dst;
      if (v18 == v260)
        goto LABEL_372;
    }
  }
  v288 = (void (***)(uint8_t *__return_ptr, _QWORD, std::string *, uint64_t))a1[37];
  if (v288)
  {
    (**v288)(buf, v288, v6, 1);
    v289 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    if ((v289 & 0x80u) == 0)
      v290 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    else
      v290 = v6->__r_.__value_.__l.__size_;
    v291 = BYTE7(v343);
    if (SBYTE7(v343) < 0)
      v291 = *(_QWORD *)&buf[8];
    if (v290 == v291)
    {
      if ((SBYTE7(v343) & 0x80u) == 0)
        v292 = buf;
      else
        v292 = *(uint8_t **)buf;
      if ((v289 & 0x80) == 0)
      {
        if (*((_BYTE *)&v6->__r_.__value_.__s + 23))
        {
          v293 = v6;
          while (v293->__r_.__value_.__s.__data_[0] == *v292)
          {
            v293 = (std::string *)((char *)v293 + 1);
            ++v292;
            if (!--v289)
              goto LABEL_481;
          }
          goto LABEL_448;
        }
LABEL_481:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v308 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v310 = v6;
          if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
            v310 = (std::string *)v6->__r_.__value_.__r.__words[0];
          *(_DWORD *)v345 = 136315138;
          *(_QWORD *)&v345[4] = v310;
          _os_log_impl(&dword_1DE3F6000, v308, OS_LOG_TYPE_DEFAULT, "Preprocessed text: %s", v345, 0xCu);
        }
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
          v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
        Diagnostics::log(5, "Preprocessed text: %s", v309, v6);
        v311 = (std::__shared_weak_count *)v344.i64[0];
        if (v344.i64[0])
        {
          v312 = (unint64_t *)(v344.i64[0] + 8);
          do
            v313 = __ldaxr(v312);
          while (__stlxr(v313 - 1, v312));
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
            std::__shared_weak_count::__release_weak(v311);
          }
        }
        if (SBYTE7(v343) < 0)
          operator delete(*(void **)buf);
        goto LABEL_412;
      }
      if (!memcmp(v6->__r_.__value_.__l.__data_, v292, v6->__r_.__value_.__l.__size_))
        goto LABEL_481;
    }
LABEL_448:
    v316 = v2;
    v318 = a1;
    v295 = (unsigned int *)**((_QWORD **)&v343 + 1);
    v296 = *(unsigned int **)(*((_QWORD *)&v343 + 1) + 8);
    if (**((unsigned int ***)&v343 + 1) != v296)
    {
      do
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v297 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          v299 = *v295;
          *(_DWORD *)v345 = 67109120;
          *(_DWORD *)&v345[4] = v299;
          _os_log_impl(&dword_1DE3F6000, v297, OS_LOG_TYPE_DEFAULT, "#Preprocess - POS - %d", v345, 8u);
        }
        Diagnostics::log(5, "#Preprocess - POS - %d", v298, *v295);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v300 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          Censor::global_plaintext((std::string *)v345, (uint64_t)(v295 + 2));
          v301 = v345[23] >= 0 ? v345 : *(_BYTE **)v345;
          *(_DWORD *)v341 = 136315138;
          *(_QWORD *)&v341[4] = v301;
          _os_log_impl(&dword_1DE3F6000, v300, OS_LOG_TYPE_DEFAULT, "#Preprocess - Matched - %s", v341, 0xCu);
          if ((v345[23] & 0x80000000) != 0)
            operator delete(*(void **)v345);
        }
        Censor::global_plaintext((std::string *)v345, (uint64_t)(v295 + 2));
        if (v345[23] >= 0)
          v303 = v345;
        else
          v303 = *(_BYTE **)v345;
        Diagnostics::log(5, "#Preprocess - Matched - %s", v302, v303);
        if ((v345[23] & 0x80000000) != 0)
          operator delete(*(void **)v345);
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v304 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          Censor::global_plaintext((std::string *)v345, (uint64_t)(v295 + 8));
          v305 = v345[23] >= 0 ? v345 : *(_BYTE **)v345;
          *(_DWORD *)v341 = 136315138;
          *(_QWORD *)&v341[4] = v305;
          _os_log_impl(&dword_1DE3F6000, v304, OS_LOG_TYPE_DEFAULT, "#Preprocess - Replaced - %s", v341, 0xCu);
          if ((v345[23] & 0x80000000) != 0)
            operator delete(*(void **)v345);
        }
        Censor::global_plaintext((std::string *)v345, (uint64_t)(v295 + 8));
        if (v345[23] >= 0)
          v307 = v345;
        else
          v307 = *(_BYTE **)v345;
        Diagnostics::log(5, "#Preprocess - Replaced - %s", v306, v307);
        if ((v345[23] & 0x80000000) != 0)
          operator delete(*(void **)v345);
        v295 += 20;
      }
      while (v295 != v296);
    }
    std::string::operator=(v6, (const std::string *)buf);
    v2 = v316;
    a1 = v318;
    goto LABEL_481;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v294 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v294, OS_LOG_TYPE_DEFAULT, "Bypass Preprocess Module", buf, 2u);
  }
  v278 = "Bypass Preprocess Module";
LABEL_411:
  Diagnostics::log(5, v278, v276, v314);
LABEL_412:
  v279 = (std::__shared_weak_count *)v2[1];
  v337 = *v2;
  v338 = v279;
  if (v279)
  {
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldxr(v280);
    while (__stxr(v281 + 1, v280));
  }
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 72))(a1, &v337);
  v282 = v338;
  if (v338)
  {
    v283 = (unint64_t *)&v338->__shared_owners_;
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  v285 = v340;
  if (v340)
  {
    v286 = (unint64_t *)&v340->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
}

void sub_1DE9BC424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v31 - 192);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_1DE9BC4CC(void *a1, int a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(void ***)(v2 - 136);
    v4 = *(void ***)(v2 - 128);
    while (v3 != v4)
    {
      v5 = *v3++;
      operator delete(v5);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1DE9BC4C4);
}

void sub_1DE9BC4FC()
{
  uint64_t v0;
  void *v1;

  __cxa_end_catch();
  v1 = *(void **)(v0 - 144);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x1DE9BC4B4);
}

void sub_1DE9BC50C(void *a1, int a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(void ***)(v2 - 136);
    v4 = *(void ***)(v2 - 128);
    while (v3 != v4)
    {
      v5 = *v3++;
      operator delete(v5);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1DE9BC4C4);
}

void sub_1DE9BC53C()
{
  __cxa_end_catch();
  JUMPOUT(0x1DE9BC544);
}

void sub_1DE9BC558(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (*(char *)(v2 - 121) < 0)
      operator delete(*(void **)(v2 - 144));
    __cxa_rethrow();
  }
  JUMPOUT(0x1DE9BC4C4);
}

void sub_1DE9BC580()
{
  __cxa_end_catch();
  JUMPOUT(0x1DE9BC4B4);
}

void sub_1DE9BC58C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE9BC4C4);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,TextPreprocessing::compare_by_string_length,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void FastSpeech2EncoderBaseInference::inference(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  std::chrono::steady_clock::time_point v19;
  NSObject *v20;
  std::chrono::steady_clock::time_point v21;
  std::chrono::steady_clock::time_point v22;
  const char *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  const char *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[8];
  std::__shared_weak_count *v47;
  uint8_t v48[4];
  double v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder begin.", buf, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder begin.", v7);
  v8 = (char *)operator new(0x70uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA934700;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_QWORD *)v8 + 12) = 0;
  *((_QWORD *)v8 + 13) = 0;
  v10 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  *((_DWORD *)v8 + 7) = *(_DWORD *)(*a2 + 344);
  *(_QWORD *)buf = v8 + 24;
  v47 = (std::__shared_weak_count *)v8;
  v44 = v10;
  v45 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[2])(a1, &v44);
  v13 = v45;
  if (v45)
  {
    v14 = (unint64_t *)&v45->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v18 = (uint64_t)(*(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32)) >> 2;
    *(_DWORD *)v48 = 134217984;
    v49 = *(double *)&v18;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEFAULT, "Parallel AM input length: %ld", v48, 0xCu);
  }
  Diagnostics::log(5, "Parallel AM input length: %ld", v17, (uint64_t)(*(_QWORD *)(*a2 + 40) - *(_QWORD *)(*a2 + 32)) >> 2);
  v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[2] + 48))(a1[2]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v20 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v48 = 134217984;
    v49 = (double)((v21.__d_.__rep_ - v19.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_DEFAULT, "Parallel AM encoder inference time: %.3f s", v48, 0xCu);
  }
  v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "Parallel AM encoder inference time: %.3f s", v23, (double)((v22.__d_.__rep_ - v19.__d_.__rep_) / 1000000) / 1000.0);
  v42 = *(_QWORD *)buf;
  v43 = v47;
  if (v47)
  {
    v24 = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[3])(a1, &v42);
  v26 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD *))(*a1[2] + 56))(a1[2]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v29 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_1DE3F6000, v29, OS_LOG_TYPE_DEBUG, "Parallel AM inference encoder end.", v48, 2u);
  }
  Diagnostics::log(7, "Parallel AM inference encoder end.", v30);
  v40 = *(_QWORD *)buf;
  v41 = v47;
  if (v47)
  {
    v31 = (unint64_t *)&v47->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a3 + 24);
  if (!v33)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v40);
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v47;
  if (v47)
  {
    v38 = (unint64_t *)&v47->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1DE9BCACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void FastSpeech2EncoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void (***v10)(_QWORD, uint64_t *);
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::vector<int>::value_type __x;
  std::vector<int> v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  std::string::basic_string[abi:ne180100]<0>(v30, "graph_encoder_input_name");
  InferenceEngine::DataTensor::build_from_1d_array<int>(*(_QWORD *)a2 + 32, &v32);
  if (v31 < 0)
    operator delete(v30[0]);
  std::string::basic_string[abi:ne180100]<0>(v30, "graph_encoder_input_length_name");
  __x = (*(_QWORD *)(*(_QWORD *)a2 + 40) - *(_QWORD *)(*(_QWORD *)a2 + 32)) >> 2;
  std::vector<int>::vector(&v27, 1uLL, &__x);
  InferenceEngine::DataTensor::build_from_1d_array<int>((uint64_t)&v27, &v28);
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
  if (v31 < 0)
    operator delete(v30[0]);
  v4 = *(void (****)(_QWORD, uint64_t *))(a1 + 16);
  v24 = v32;
  v25 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (**v4)(v4, &v24);
  v7 = v25;
  if (v25)
  {
    v8 = (unint64_t *)&v25->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(void (****)(_QWORD, uint64_t *))(a1 + 16);
  v22 = v28;
  v23 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  (**v10)(v10, &v22);
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DE9BCD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 - 32);
  _Unwind_Resume(a1);
}

void sub_1DE9BCD84()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1DE9BCD7CLL);
}

void FastSpeech2EncoderBaseInference::get_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::vector<int> __dst;
  void *v22[2];
  char v23;
  InferenceEngine::DataTensor *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  InferenceEngine::DataTensor *v28;
  std::__shared_weak_count *v29;
  void *v30[2];
  char v31;
  InferenceEngine::DataTensor *v32;
  std::__shared_weak_count *v33;
  std::vector<int> *p_dst;

  v4 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(v30, "graph_encoder_output_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 32))(&v32, v4, v30);
  if (v31 < 0)
    operator delete(v30[0]);
  v5 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_encoder_output_alignment_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 32))(&v28, v5, __p);
  if (v27 < 0)
    operator delete(__p[0]);
  v6 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(v22, "graph_encoder_output_decoder_length_name");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v6 + 32))(&v24, v6, v22);
  if (v23 < 0)
    operator delete(v22[0]);
  InferenceEngine::DataTensor::get_2d_array<int>(v28, &__dst);
  v7 = *a2;
  std::vector<std::vector<int>>::__vdeallocate((uint64_t *)(*a2 + 32));
  *(std::vector<int> *)(v7 + 32) = __dst;
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_dst);
  InferenceEngine::DataTensor::get_3d_array<float>(v32, &__dst);
  v8 = *a2;
  std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)(*a2 + 8));
  *(std::vector<int> *)(v8 + 8) = __dst;
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_dst);
  v9 = (const void *)*((_QWORD *)v24 + 11);
  LODWORD(v8) = InferenceEngine::DataTensor::get_size(v24);
  std::vector<int>::vector(&__dst, (int)v8);
  memcpy(__dst.__begin_, v9, 4 * (int)v8);
  v10 = (_QWORD *)*a2;
  v11 = (void *)v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  *(std::vector<int> *)(v10 + 7) = __dst;
  v12 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v33;
  if (v33)
  {
    v19 = (unint64_t *)&v33->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1DE9BD008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27 - 56);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t FastSpeech2EncoderBaseInference::FastSpeech2EncoderBaseInference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  v3 = a2;
  *(_QWORD *)a1 = off_1EA921E28;
  *(_QWORD *)(a1 + 8) = -4294967056;
  *(_QWORD *)(a1 + 16) = a2;
  v5 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = a3;
  if (a3)
  {
    v6 = (unint64_t *)(a3 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v3 = *v5;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max_input_length");
  *(_DWORD *)(a1 + 8) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v3 + 8), (const void **)__p, *(unsigned int *)(a1 + 8));
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = *v5;
  std::string::basic_string[abi:ne180100]<0>(__p, "graph_maximum_position_encoding");
  *(_DWORD *)(a1 + 12) = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v8 + 8), (const void **)__p, *(unsigned int *)(a1 + 12));
  if (v11 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1DE9BD1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void WaveformRateChangerImpl::~WaveformRateChangerImpl(WaveformRateChangerImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1EA9208F8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1EA9208F8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1DF0ED014);
}

char *WaveformRateChangerImpl::set_markers(char *result, const void **a2)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;
  char *v18;

  v2 = result;
  v3 = result + 8;
  if (result + 8 == (char *)a2)
  {
    v13 = (char *)*((_QWORD *)result + 2);
    goto LABEL_22;
  }
  v4 = (char *)*a2;
  v5 = (char *)a2[1];
  v6 = v5 - (_BYTE *)*a2;
  v7 = v6 >> 3;
  v8 = *((_QWORD *)result + 3);
  v9 = (char *)*((_QWORD *)result + 1);
  if (v6 >> 3 <= (unint64_t)((v8 - (uint64_t)v9) >> 3))
  {
    v12 = (void **)(result + 16);
    v14 = (_BYTE *)*((_QWORD *)result + 2);
    v15 = (v14 - v9) >> 3;
    if (v15 < v7)
    {
      v16 = &v4[8 * v15];
      if (v14 != v9)
      {
        result = (char *)memmove(*((void **)result + 1), *a2, v14 - v9);
        v9 = (char *)*v12;
      }
      v6 = v5 - v16;
      if (v5 == v16)
        goto LABEL_21;
      v17 = v9;
      v18 = v16;
      goto LABEL_20;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 2) = v9;
      operator delete(v9);
      v8 = 0;
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    if (v6 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= v7)
      v10 = v6 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<RateMarker>::__vallocate[abi:ne180100](v3, v11);
    v12 = (void **)(v2 + 16);
    v9 = (char *)*((_QWORD *)v2 + 2);
  }
  if (v5 != v4)
  {
    v17 = v9;
    v18 = v4;
LABEL_20:
    result = (char *)memmove(v17, v18, v6);
  }
LABEL_21:
  v13 = &v9[v6];
  *v12 = &v9[v6];
LABEL_22:
  if ((int)((unint64_t)&v13[-*v3] >> 3) >= 1)
    v2[112] = 1;
  return result;
}

void WaveformRateChangerImpl::reset(WaveformRateChangerImpl *this)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *((_DWORD *)this + 34);
  v5 = 0;
  std::vector<float>::resize((uint64_t)this + 32, (uint64_t)(v2 + (v2 < 0)) >> 1, &v5);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  v3 = *((_DWORD *)this + 34);
  v4 = 0;
  std::vector<float>::resize((uint64_t)this + 80, (uint64_t)(v3 + (v3 < 0)) >> 1, &v4);
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 30) = 1065353216;
}

void WaveformRateChangerImpl::change_rate(uint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X4>, char **a6@<X8>)
{
  const void **v9;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  float v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  int v19;
  int v20;
  int v21;
  _BYTE *v22;
  char *v23;
  unint64_t v24;
  int v25;
  int v26;
  char *v27;
  size_t v28;
  double v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  char *v50;
  uint64_t v51;
  float *v52;
  float v53;
  uint64_t v54;
  float *v55;
  float v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  float v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  _BOOL4 v86;
  _BOOL4 v87;
  int v88;
  NSObject *v89;
  const char *v90;
  double v91;
  double v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  int v102;
  char *v103;
  int v104;
  int v105;
  _BYTE *v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  char *v123;
  uint64_t v124;
  _DWORD *v125;
  _QWORD *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  int v135;
  char *v136;
  void **v137;
  unsigned int v138;
  unint64_t *v139;
  _DWORD *v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  int v154;
  int v155;
  char *v156;
  void **v157;
  int v158;
  _QWORD *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  int v169;
  int v170;
  char *v171;
  char *v172;
  unint64_t v174;
  int v175;
  BOOL v176;
  uint64_t v177;
  unint64_t v178;
  float v179;
  NSObject *v180;
  const char *v181;
  double v182;
  double v183;
  int v184;
  void **v185;
  const void **v186;
  void *__dst;
  _BYTE *v189;
  float *__F;
  float *v191;
  float *__A[3];
  vDSP_Length __I;
  float __C;
  _BYTE buf[22];
  uint64_t v196;

  v9 = a2;
  v11 = (uint64_t)a6;
  v196 = *MEMORY[0x1E0C80C00];
  if (*(float *)(a1 + 116) == 1.0 && !*(_BYTE *)(a1 + 112))
  {
    v12 = *a2;
LABEL_27:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a6, v12, (uint64_t)v9[1], ((_BYTE *)v9[1] - (_BYTE *)v12) >> 2);
    return;
  }
  v12 = *a2;
  if (!*(_BYTE *)(a1 + 113) || v9[1] == v12)
    goto LABEL_27;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<float>::vector(&__dst, *(int *)(a1 + 136));
  if (!a3)
    goto LABEL_23;
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v13)
  {
    v14 = *(float *)(v13 + 4);
    v15 = (LODWORD(v14) & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
    v16 = ((LODWORD(v14) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
    if (v14 >= 0.0)
    {
      v16 = 0;
      v15 = 0;
    }
    if ((LODWORD(v14) & 0x7FFFFFFF) == 0)
      v15 = 1;
    v17 = (LODWORD(v14) & 0x7FFFFFFF) == 0x7F800000 || v15;
    if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F800000)
      v17 = 1;
    if (v17 | v16)
      v14 = 1.0;
    if (v14 > 1.0 && v14 < 4.0)
    {
LABEL_23:
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v11, *(_QWORD *)(v11 + 8), *(char **)(a1 + 80), *(char **)(a1 + 88), (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
      *a5 = (unint64_t)((double)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2)
                             * 1000.0
                             / (double)*(int *)(a1 + 128));
    }
  }
  v19 = -(int)((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  v185 = (void **)(a1 + 32);
  v186 = v9;
  v20 = *(_DWORD *)(a1 + 136);
  v21 = v20 - ((*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  v23 = (char *)*v9;
  v22 = v9[1];
  v24 = (unint64_t)(v22 - (_BYTE *)*v9) >> 2;
  if (v21 > (int)v24)
  {
    v25 = *(_DWORD *)(a1 + 104);
    goto LABEL_130;
  }
  v184 = a4;
  do
  {
    v26 = v19;
    if ((v19 & 0x80000000) == 0)
    {
      if (!v20)
        goto LABEL_44;
      v27 = &v23[4 * v19];
      v28 = 4 * v21 - 4 * v19;
LABEL_42:
      v34 = (char *)__dst;
      goto LABEL_43;
    }
    v29 = fabs((double)v19);
    if (v29 >= (double)v20)
    {
      if (!v20)
        goto LABEL_44;
      v27 = (char *)(*(_QWORD *)(a1 + 40) + 4 * v19);
      v28 = 4 * v20;
      goto LABEL_42;
    }
    v30 = *(_QWORD *)(a1 + 40);
    if ((int)v29 >= (int)((unint64_t)(v30 - *(_QWORD *)(a1 + 32)) >> 2))
      v31 = (unint64_t)(v30 - *(_QWORD *)(a1 + 32)) >> 2;
    else
      v31 = (int)v29;
    v32 = v31;
    if (v31)
      memmove(__dst, (const void *)(v30 - 4 * v31), 4 * v31);
    v33 = v20 - v31;
    v11 = (uint64_t)a6;
    if (v33 >= 1)
    {
      v27 = (char *)*v9;
      v28 = 4 * (v33 & ~(v33 >> 31));
      v34 = (char *)__dst + 4 * v32;
LABEL_43:
      memmove(v34, v27, v28);
    }
LABEL_44:
    v36 = *(_QWORD *)v11;
    v35 = *(_QWORD *)(v11 + 8);
    v37 = (unint64_t)(v35 - *(_QWORD *)v11) >> 2;
    v38 = *(_DWORD *)(a1 + 136) / 4;
    v39 = *(int *)(a1 + 152);
    if ((int)v39 >= 0)
      v40 = *(_DWORD *)(a1 + 152);
    else
      v40 = v39 + 1;
    if (v38 - (v40 >> 1) <= (int)v37 && (int)v39 <= (int)((unint64_t)(v189 - (_BYTE *)__dst) >> 3))
    {
      if ((int)v39 >= 0)
        v42 = *(_DWORD *)(a1 + 152);
      else
        v42 = v39 + 1;
      LODWORD(__A[0]) = 0;
      std::vector<float>::vector(buf, 2 * v39 - 1, __A);
      __C = 0.0;
      __I = 0;
      v43 = 3 * *(int *)(a1 + 152) - 2;
      LODWORD(__F) = 0;
      std::vector<float>::vector(__A, v43, &__F);
      v44 = *(int *)(a1 + 152);
      if ((_DWORD)v44)
      {
        v45 = &__A[0][v44];
        v46 = 4 * v44;
        v47 = *(_QWORD *)v11 + 4 * ((int)v37 - ((v42 >> 1) + v38)) - 4;
        do
        {
          *v45++ = *(float *)(v47 + v46);
          v46 -= 4;
        }
        while (v46);
      }
      std::vector<float>::vector(&__F, v44);
      v48 = *(int *)(a1 + 152);
      v49 = __F;
      if ((_DWORD)v48)
      {
        v50 = (char *)__dst + 4 * (v38 - (v42 >> 1));
        v51 = 4 * v48;
        v52 = __F;
        do
        {
          *v52++ = *(float *)&v50[v51 - 4];
          v51 -= 4;
        }
        while (v51);
      }
      vDSP_conv(__A[0], 1, v49, 1, *(float **)buf, 1, (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2, v191 - v49);
      vDSP_maxvi(*(const float **)buf, 1, &__C, &__I, (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
      if (__C == 0.0)
      {
        v53 = fabsf(**(float **)buf);
        if ((int)((*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2) >= 2)
        {
          v54 = ((*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2) - 1;
          v55 = (float *)(*(_QWORD *)buf + 4);
          do
          {
            v56 = *v55++;
            v53 = v53 + fabsf(v56);
            --v54;
          }
          while (v54);
        }
        v57 = *(_DWORD *)(a1 + 152);
        if (v53 == 0.0)
          __I = v57;
      }
      else
      {
        v57 = *(_DWORD *)(a1 + 152);
      }
      v58 = __I;
      if (__F)
      {
        v191 = __F;
        operator delete(__F);
      }
      if (__A[0])
      {
        __A[1] = __A[0];
        operator delete(__A[0]);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v41 = v58 - v57;
      v36 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      v41 = 0;
    }
    if (v36 == v35)
    {
      std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)v11, (char *)__dst + 4 * (*(_DWORD *)(a1 + 136) / 2), (uint64_t)v189, (v189 - ((_BYTE *)__dst + 4 * (*(_DWORD *)(a1 + 136) / 2))) >> 2);
    }
    else
    {
      v59 = (unint64_t)(v35 - v36) >> 2;
      v60 = *(_DWORD *)(a1 + 136);
      v61 = v60 / 4;
      v62 = *(unsigned int *)(a1 + 152);
      if ((int)v62 >= 0)
        v63 = *(_DWORD *)(a1 + 152);
      else
        v63 = v62 + 1;
      v64 = v59 - (v61 + (v63 >> 1));
      v65 = v61 - (v63 >> 1) + v41;
      if ((int)v62 >= 1)
      {
        v66 = 0;
        v67 = (char *)__dst;
        v68 = (v65 + v26);
        v69 = (char *)*v9;
        v70 = v36 + 4 * v64;
        do
        {
          if (v65 + v66 < 0)
          {
            if ((int)v68 + v66 < 0)
            {
              v72 = *(_QWORD *)(a1 + 32);
              v73 = *(_QWORD *)(a1 + 40) - v72;
              v74 = v68 + v66 + (v73 >> 2);
              if ((v74 & 0x80000000) != 0)
              {
                v75 = *(_QWORD *)(a1 + 56);
                v76 = v68 + v66 + (v73 >> 2) + ((unint64_t)(*(_QWORD *)(a1 + 64) - v75) >> 2);
                if ((v76 & 0x80000000) != 0)
                {
                  v77 = 0.0;
                  goto LABEL_88;
                }
                v71 = (float *)(v75 + 4 * v76);
              }
              else
              {
                v71 = (float *)(v72 + 4 * v74);
              }
            }
            else
            {
              v71 = (float *)&v69[4 * (v68 + v66)];
            }
          }
          else
          {
            v71 = (float *)&v67[4 * (v65 + v66)];
          }
          v77 = *v71;
LABEL_88:
          *(float *)(v70 + 4 * v66) = (float)((float)((float)(int)v66 / (float)(v62 - 1)) * v77)
                                    + (float)((float)(1.0 - (float)((float)(int)v66 / (float)(v62 - 1)))
                                            * *(float *)(v70 + 4 * v66));
          ++v66;
        }
        while (v62 != v66);
      }
      v78 = v64 + v62;
      v79 = v65 + v62;
      v80 = v60 - (v65 + v62);
      std::vector<float>::resize((uint64_t)a6, v60 - v65 + v64);
      if (v60 != v79)
        memmove(&(*a6)[4 * v78], (char *)__dst + 4 * v79, 4 * v80);
    }
    v82 = *(_QWORD *)(a1 + 8);
    v81 = *(_QWORD *)(a1 + 16);
    if ((int)((unint64_t)(v81 - v82) >> 3) < 1)
    {
      v85 = *(float *)(a1 + 120);
      v11 = (uint64_t)a6;
    }
    else
    {
      v83 = 0;
      v84 = 0;
      v11 = (uint64_t)a6;
      do
      {
        if (*(_DWORD *)(v82 + v83) <= v26 + *(_DWORD *)(a1 + 136) / 2)
        {
          v85 = *(float *)(v82 + v83 + 4);
          v86 = (LODWORD(v85) & 0x7FFFFFFFu) - 1 < 0x7FFFFF;
          v87 = ((LODWORD(v85) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F;
          if (v85 >= 0.0)
          {
            v87 = 0;
            v86 = 0;
          }
          if ((LODWORD(v85) & 0x7FFFFFFF) == 0)
            v86 = 1;
          v88 = (LODWORD(v85) & 0x7FFFFFFF) == 0x7F800000 || v86;
          if ((LODWORD(v85) & 0x7FFFFFFFu) > 0x7F800000)
            v88 = 1;
          if (v88 | v87)
            v85 = 1.0;
          *(float *)(a1 + 120) = v85;
        }
        else
        {
          v85 = *(float *)(a1 + 120);
        }
        if (*(float *)(a1 + 124) != v85)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v89 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v91 = *(float *)(a1 + 120);
            v92 = *(float *)(a1 + 116);
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v91;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v92;
            _os_log_impl(&dword_1DE3F6000, v89, OS_LOG_TYPE_DEBUG, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", buf, 0x16u);
          }
          Diagnostics::log(7, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", v90, *(float *)(a1 + 120), *(float *)(a1 + 116));
          v85 = *(float *)(a1 + 120);
          v82 = *(_QWORD *)(a1 + 8);
          v81 = *(_QWORD *)(a1 + 16);
        }
        *(float *)(a1 + 124) = v85;
        ++v84;
        v83 += 8;
      }
      while (v84 < (int)((unint64_t)(v81 - v82) >> 3));
    }
    v25 = *(_DWORD *)(a1 + 104);
    v20 = *(_DWORD *)(a1 + 136);
    v93 = *(float *)(a1 + 116);
    v94 = (float)((float)*(int *)(a1 + 108)
                + (float)(unint64_t)((uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 2))
        - (float)((float)(v25 + v26 + v20) / (float)(v93 * v85));
    v95 = v93 * (float)*(int *)(a1 + 144);
    v96 = *(float *)(a1 + 156);
    v97 = v96 * (float)(v85 * v95);
    if (v94 >= v97)
      v98 = v96 * (float)(v85 * v95);
    else
      v98 = v94;
    if (v97 <= (float)-v94)
      v99 = -v97;
    else
      v99 = v94;
    if (v94 <= 0.0)
      v100 = v99;
    else
      v100 = v98;
    v19 = v26 + (int)(float)(v100 + (float)(v95 * v85));
    v21 = v20 + v19;
    v23 = (char *)*v9;
    v22 = v9[1];
    v24 = (unint64_t)(v22 - (_BYTE *)*v9) >> 2;
  }
  while (v20 + v19 <= (int)v24);
  v19 = v26;
  a4 = v184;
LABEL_130:
  v101 = v20 + v19;
  v102 = v25 + v20 + v19;
  *(_DWORD *)(a1 + 104) = v102;
  if ((a3 & 1) == 0)
  {
    v102 += (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    *(_DWORD *)(a1 + 104) = v102;
  }
  v103 = a6[1];
  v104 = *(_DWORD *)(a1 + 108) + ((unint64_t)(v103 - *a6) >> 2);
  *(_DWORD *)(a1 + 108) = v104;
  if (!a4)
  {
    v123 = *(char **)(a1 + 32);
    *(_QWORD *)(a1 + 40) = v123;
    v124 = v101 & ~(v101 >> 31);
    v125 = *v9;
    if ((int)v124 < (int)((unint64_t)((_BYTE *)v9[1] - (_BYTE *)*v9) >> 2))
    {
      v126 = (_QWORD *)(a1 + 48);
      do
      {
        if ((unint64_t)v123 >= *v126)
        {
          v128 = (char *)*v185;
          v129 = (v123 - (_BYTE *)*v185) >> 2;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v131 = *v126 - (_QWORD)v128;
          if (v131 >> 1 > v130)
            v130 = v131 >> 1;
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
            v132 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          if (v132)
          {
            v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v132);
            v128 = *(char **)(a1 + 32);
            v123 = *(char **)(a1 + 40);
          }
          else
          {
            v133 = 0;
          }
          v134 = &v133[4 * v129];
          *(_DWORD *)v134 = v125[v124];
          v127 = v134 + 4;
          while (v123 != v128)
          {
            v135 = *((_DWORD *)v123 - 1);
            v123 -= 4;
            *((_DWORD *)v134 - 1) = v135;
            v134 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v134;
          *(_QWORD *)(a1 + 40) = v127;
          *(_QWORD *)(a1 + 48) = &v133[4 * v132];
          if (v128)
            operator delete(v128);
        }
        else
        {
          *(_DWORD *)v123 = v125[v124];
          v127 = v123 + 4;
        }
        *(_QWORD *)(a1 + 40) = v127;
        ++v124;
        v125 = *v9;
        v123 = v127;
      }
      while ((int)v124 < (int)((unint64_t)((_BYTE *)v9[1] - (_BYTE *)*v9) >> 2));
      v20 = *(_DWORD *)(a1 + 136);
      v101 = v20 + v19;
    }
    v137 = (void **)(a1 + 56);
    v136 = *(char **)(a1 + 56);
    *(_QWORD *)(a1 + 64) = v136;
    v138 = v101 - *(_DWORD *)(a1 + 152);
    if ((int)v138 >= v101)
    {
LABEL_231:
      v157 = (void **)(a1 + 80);
      v156 = *(char **)(a1 + 80);
      *(_QWORD *)(a1 + 88) = v156;
      if (v20 > 1)
      {
        v158 = 0;
        v159 = (_QWORD *)(a1 + 96);
        v160 = (uint64_t)a6[1];
        do
        {
          if ((char *)v160 != *a6)
          {
            if ((unint64_t)v156 >= *v159)
            {
              v162 = (char *)*v157;
              v163 = (v156 - (_BYTE *)*v157) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v165 = *v159 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 96, v166);
                v162 = *(char **)(a1 + 80);
                v156 = *(char **)(a1 + 88);
              }
              else
              {
                v167 = 0;
              }
              v168 = &v167[4 * v163];
              *(_DWORD *)v168 = *(_DWORD *)(v160 - 4);
              v161 = v168 + 4;
              while (v156 != v162)
              {
                v169 = *((_DWORD *)v156 - 1);
                v156 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v168;
              *(_QWORD *)(a1 + 88) = v161;
              *(_QWORD *)(a1 + 96) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v156 = *(_DWORD *)(v160 - 4);
              v161 = v156 + 4;
            }
            *(_QWORD *)(a1 + 88) = v161;
            v160 = (uint64_t)(a6[1] - 4);
            a6[1] = (char *)v160;
            --*(_DWORD *)(a1 + 108);
            v20 = *(_DWORD *)(a1 + 136);
            v156 = v161;
          }
          ++v158;
          if (v20 >= 0)
            v170 = v20;
          else
            v170 = v20 + 1;
        }
        while (v158 < v170 >> 1);
        v171 = (char *)*v157;
        v172 = v156 - 4;
        if (*v157 != v156 && v172 > v171)
        {
          v174 = (unint64_t)(v171 + 4);
          do
          {
            v175 = *(_DWORD *)(v174 - 4);
            *(_DWORD *)(v174 - 4) = *(_DWORD *)v172;
            *(_DWORD *)v172 = v175;
            v172 -= 4;
            v176 = v174 >= (unint64_t)v172;
            v174 += 4;
          }
          while (!v176);
        }
      }
      v177 = *(_QWORD *)(a1 + 8);
      v178 = (unint64_t)(*(_QWORD *)(a1 + 16) - v177) >> 3;
      if ((int)v178 < 1)
      {
        v179 = *(float *)(a1 + 120);
      }
      else
      {
        v179 = *(float *)(v177 + 8 * (v178 - 1) + 4);
        *(float *)(a1 + 120) = v179;
      }
      if (*(float *)(a1 + 124) != v179)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v180 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          v182 = *(float *)(a1 + 120);
          v183 = *(float *)(a1 + 116);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v182;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v183;
          _os_log_impl(&dword_1DE3F6000, v180, OS_LOG_TYPE_DEBUG, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", buf, 0x16u);
        }
        Diagnostics::log(7, "WaveformRateChangeModule: Modify waveform with WSOLA: local rate = %.2f, global rate: %.2f", v181, *(float *)(a1 + 120), *(float *)(a1 + 116));
        v179 = *(float *)(a1 + 120);
      }
      *(float *)(a1 + 124) = v179;
      goto LABEL_273;
    }
    v139 = (unint64_t *)(a1 + 72);
    while (1)
    {
      if ((v138 & 0x80000000) != 0)
      {
        v141 = *v139;
      }
      else
      {
        v140 = *v9;
        v141 = *v139;
        if (v138 < (unint64_t)(((_BYTE *)v9[1] - (_BYTE *)*v9) >> 2))
        {
          if ((unint64_t)v136 >= v141)
          {
            v144 = (char *)*v137;
            v150 = (v136 - (_BYTE *)*v137) >> 2;
            v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v152 = v141 - (_QWORD)v144;
            if (v152 >> 1 > v151)
              v151 = v152 >> 1;
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
              v148 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v148 = v151;
            if (v148)
            {
              v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v148);
              v144 = *(char **)(a1 + 56);
              v136 = *(char **)(a1 + 64);
            }
            else
            {
              v149 = 0;
            }
            v153 = &v149[4 * v150];
            *(_DWORD *)v153 = v140[v138];
            v143 = v153 + 4;
            if (v136 == v144)
            {
              v9 = v186;
            }
            else
            {
              v9 = v186;
              do
              {
                v155 = *((_DWORD *)v136 - 1);
                v136 -= 4;
                *((_DWORD *)v153 - 1) = v155;
                v153 -= 4;
              }
              while (v136 != v144);
            }
LABEL_228:
            *(_QWORD *)(a1 + 56) = v153;
            *(_QWORD *)(a1 + 64) = v143;
            *(_QWORD *)(a1 + 72) = &v149[4 * v148];
            if (v144)
              operator delete(v144);
            goto LABEL_230;
          }
          *(_DWORD *)v136 = v140[v138];
          v142 = v136 + 4;
          goto LABEL_201;
        }
      }
      if ((unint64_t)v136 >= v141)
      {
        v144 = (char *)*v137;
        v145 = (v136 - (_BYTE *)*v137) >> 2;
        v146 = v145 + 1;
        if ((unint64_t)(v145 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v147 = v141 - (_QWORD)v144;
        if (v147 >> 1 > v146)
          v146 = v147 >> 1;
        if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
          v148 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v148 = v146;
        if (v148)
        {
          v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v148);
          v144 = *(char **)(a1 + 56);
          v136 = *(char **)(a1 + 64);
        }
        else
        {
          v149 = 0;
        }
        v153 = &v149[4 * v145];
        *(_DWORD *)v153 = 0;
        v143 = v153 + 4;
        while (v136 != v144)
        {
          v154 = *((_DWORD *)v136 - 1);
          v136 -= 4;
          *((_DWORD *)v153 - 1) = v154;
          v153 -= 4;
        }
        goto LABEL_228;
      }
      *(_DWORD *)v136 = 0;
      v142 = v136 + 4;
LABEL_201:
      v143 = v142;
LABEL_230:
      *(_QWORD *)(a1 + 64) = v143;
      ++v138;
      v20 = *(_DWORD *)(a1 + 136);
      v136 = v143;
      if ((int)v138 >= v20 + v19)
        goto LABEL_231;
    }
  }
  v105 = v102 + ((v24 - v101) & ~(((int)v24 - v101) >> 31));
  *(_DWORD *)(a1 + 104) = v105;
  v106 = *v9;
  if (v101 < (int)((unint64_t)(v22 - (_BYTE *)*v9) >> 2))
  {
    v107 = (int)(float)((float)v105 / (float)(*(float *)(a1 + 116) * *(float *)(a1 + 120)));
    v108 = a6 + 2;
    while (v104 >= v107)
    {
LABEL_170:
      if (++v101 >= (int)((unint64_t)(v22 - v106) >> 2))
        goto LABEL_273;
    }
    if (v101 < 0)
    {
      v106 = *(_BYTE **)(a1 + 32);
      v109 = (int)(v101 + ((*(_QWORD *)(a1 + 40) - (_QWORD)v106) >> 2));
      if ((unint64_t)v103 >= *v108)
      {
        v110 = *a6;
        v117 = (v103 - *a6) >> 2;
        v118 = v117 + 1;
        if ((unint64_t)(v117 + 1) >> 62)
LABEL_279:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v119 = *v108 - (_QWORD)v110;
        if (v119 >> 1 > v118)
          v118 = v119 >> 1;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
          v114 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v114 = v118;
        if (v114)
        {
          v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v108, v114);
          v110 = *a6;
          v103 = a6[1];
        }
        else
        {
          v115 = 0;
        }
        v120 = &v115[4 * v117];
        *(_DWORD *)v120 = *(_DWORD *)&v106[4 * v109];
        v116 = v120 + 4;
        if (v103 != v110)
        {
          v9 = v186;
          do
          {
            v122 = *((_DWORD *)v103 - 1);
            v103 -= 4;
            *((_DWORD *)v120 - 1) = v122;
            v120 -= 4;
          }
          while (v103 != v110);
          goto LABEL_167;
        }
        goto LABEL_166;
      }
    }
    else
    {
      v109 = v101;
      if ((unint64_t)v103 >= *v108)
      {
        v110 = *a6;
        v111 = (v103 - *a6) >> 2;
        v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62)
          goto LABEL_279;
        v113 = *v108 - (_QWORD)v110;
        if (v113 >> 1 > v112)
          v112 = v113 >> 1;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
          v114 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v114 = v112;
        if (v114)
        {
          v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v108, v114);
          v110 = *a6;
          v103 = a6[1];
        }
        else
        {
          v115 = 0;
        }
        v120 = &v115[4 * v111];
        *(_DWORD *)v120 = *(_DWORD *)&v106[4 * v101];
        v116 = v120 + 4;
        if (v103 != v110)
        {
          v9 = v186;
          do
          {
            v121 = *((_DWORD *)v103 - 1);
            v103 -= 4;
            *((_DWORD *)v120 - 1) = v121;
            v120 -= 4;
          }
          while (v103 != v110);
          goto LABEL_167;
        }
LABEL_166:
        v9 = v186;
LABEL_167:
        *a6 = v120;
        a6[1] = v116;
        a6[2] = &v115[4 * v114];
        if (v110)
          operator delete(v110);
LABEL_169:
        a6[1] = v116;
        v104 = *(_DWORD *)(a1 + 108) + 1;
        *(_DWORD *)(a1 + 108) = v104;
        v106 = *v9;
        v22 = v9[1];
        v103 = v116;
        goto LABEL_170;
      }
    }
    *(_DWORD *)v103 = *(_DWORD *)&v106[4 * v109];
    v116 = v103 + 4;
    goto LABEL_169;
  }
LABEL_273:
  if (__dst)
  {
    v189 = __dst;
    operator delete(__dst);
  }
}

void sub_1DE9BE484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;

  if (__p)
    operator delete(__p);
  v26 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void WaveformRateChangeModule::~WaveformRateChangeModule(WaveformRateChangeModule *this)
{
  *(_QWORD *)this = &off_1EA920CD8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA920CD8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void WaveformRateChangeModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unsigned __int8 *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  float v20;
  NSObject *v21;
  const char *v22;
  _DWORD *v23;
  _DWORD *v24;
  float *v25;
  uint64_t v26;
  void (*v27)(uint64_t, void **);
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  void *__p[2];
  void *v53;
  unsigned __int8 *v54;
  std::__shared_weak_count *v55;

  v6 = *(unsigned __int8 **)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v54 = v6;
  v55 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (*v6)
  {
    *((_QWORD *)v6 + 13) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272));
  }
  v9 = *a2;
  v10 = *(_QWORD **)(*a2 + 8);
  {
    __p[0] = 0;
    __p[1] = 0;
    v53 = 0;
    std::vector<RateMarker>::__init_with_size[abi:ne180100]<RateMarker*,RateMarker*>(__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272), __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_53;
  }
  {
    v14 = *(_QWORD **)(*(_QWORD *)v12 + 8);
    v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
    v50 = v14;
    v51 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v48, *(_QWORD *)(a1 + 168));
    if (v48)
    {
      v17 = (_QWORD *)*v14;
      if (*(_DWORD *)(v48 + 60) == 3 && 0x84BDA12F684BDA13 * ((uint64_t)(v14[1] - (_QWORD)v17) >> 3) >= 2)
      {
        v18 = (_DWORD *)v17[36];
        v19 = (_DWORD *)v17[37];
        if (v18 != v19)
        {
          v20 = 1.0;
          do
          {
            if (*v18 == 1)
            {
              v20 = 1.0;
            }
            else if (*v18 == 5)
            {
              v20 = (float)(int)v18[1] / 100.0;
            }
            v18 += 14;
          }
          while (v18 != v19);
LABEL_38:
          if (v20 > 0.0 && v20 != 1.0)
          {
            __p[0] = 0;
            __p[1] = 0;
            v53 = 0;
            v25 = (float *)operator new(8uLL);
            *v25 = 0.0;
            v25[1] = v20;
            __p[0] = v25;
            v53 = v25 + 2;
            v26 = *(_QWORD *)(a1 + 272);
            v27 = *(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 16);
            __p[1] = v53;
            v27(v26, __p);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          goto LABEL_42;
        }
        goto LABEL_42;
      }
    }
    else
    {
      v17 = (_QWORD *)*v14;
    }
    if ((_QWORD *)v14[1] != v17)
    {
      v23 = (_DWORD *)v17[9];
      v24 = (_DWORD *)v17[10];
      if (v23 != v24)
      {
        v20 = 1.0;
        do
        {
          if (*v23 == 1)
          {
            v20 = 1.0;
          }
          else if (*v23 == 5)
          {
            v20 = (float)(int)v23[1] / 100.0;
          }
          v23 += 14;
        }
        while (v23 != v24);
        goto LABEL_38;
      }
    }
LABEL_42:
    v28 = v49;
    if (v49)
    {
      v29 = (unint64_t *)&v49->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v51;
    if (v51)
    {
      v32 = (unint64_t *)&v51->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v6 = v54;
    goto LABEL_53;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_DEBUG, "No local rate change markers detected.", (uint8_t *)__p, 2u);
  }
  Diagnostics::log(7, "No local rate change markers detected.", v22);
LABEL_53:
  (*(void (**)(void **__return_ptr, _QWORD, unsigned __int8 *, _QWORD, _QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 272) + 32))(__p, *(_QWORD *)(a1 + 272), v6 + 56, *v6, v6[1], v6 + 104);
  v34 = v54;
  v36 = v54 + 56;
  v35 = (void *)*((_QWORD *)v54 + 7);
  if (v35)
  {
    *((_QWORD *)v54 + 8) = v35;
    operator delete(v35);
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
  }
  *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
  *((_QWORD *)v34 + 9) = v53;
  v37 = a2[1];
  v46 = *a2;
  v47 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v46);
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v55;
  if (v55)
  {
    v44 = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1DE9BEA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t WaveformRateChanger::create_rate_changer(WaveformRateChanger *this, char a2, float a3, int a4, float a5, float a6, float a7)
{
  uint64_t result;
  _DWORD *v15;
  uint64_t v16;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  __int128 v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)operator new(0xB8uLL);
  v15 = (_DWORD *)result;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1EA9345B0;
  *(_QWORD *)(result + 24) = &off_1EA9208F8;
  v16 = result + 24;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_BYTE *)(result + 137) = a2;
  *(float *)(result + 140) = a3;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(result + 144) = _D0;
  v22 = (int)a5;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_DWORD *)(result + 152) = a4;
  *(_DWORD *)(result + 156) = (int)a5;
  v23 = (int)(float)((float)(int)a5 * 0.5);
  LODWORD(v24) = (int)a6;
  *(_DWORD *)(result + 164) = v23;
  *(_DWORD *)(result + 172) = (int)a6;
  *(float *)(result + 180) = a7;
  if ((int)a5 >= 0)
    v25 = (int)a5;
  else
    v25 = v22 + 1;
  if ((int)v24 > v25 >> 1)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v26 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v32 = (int)a6;
      v33 = 1024;
      v34 = (int)(float)((float)(int)a5 * 0.5);
      _os_log_impl(&dword_1DE3F6000, v26, OS_LOG_TYPE_DEBUG, "Correlation frame size (%d ms) must be smaller than half frame size (%d ms).", buf, 0xEu);
    }
    Diagnostics::log(7, "Correlation frame size (%d ms) must be smaller than half frame size (%d ms).", v27, (int)a6, v23);
    v24 = (int)((double)v22 * 0.9 * 0.5);
    v15[43] = v24;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v32 = (int)((double)v22 * 0.9 * 0.5);
      _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_DEBUG, "Set correlation frame size to %d ms.", buf, 8u);
    }
    result = Diagnostics::log(7, "Set correlation frame size to %d ms.", v29, v24);
  }
  v15[40] = v22 * a4 / 1000;
  v15[42] = (int)v23 * a4 / 1000;
  v15[44] = (int)v24 * a4 / 1000;
  *(_QWORD *)&v30 = v16;
  *((_QWORD *)&v30 + 1) = v15;
  *(_OWORD *)this = v30;
  return result;
}

void std::__shared_ptr_emplace<WaveformRateChangerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9345B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<WaveformRateChangerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9345B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<WaveformRateChangerImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SilenceTrimmingStream::~SilenceTrimmingStream(SilenceTrimmingStream *this)
{
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void SilenceTrimmingStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  unsigned __int16 *v21;
  char v22;
  float *v23;
  float *v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  float *v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float *v43;
  int64_t v44;
  uint64_t v45;
  int *v46;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  NSObject *v51;
  const char *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  uint64_t v60;
  float *v61;
  int64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  GryphonAnalysis *v69;
  GryphonAnalysis *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int *v75;
  uint64_t v76;
  unint64_t v77;
  float *v78;
  float v79;
  uint64_t v80;
  GryphonAnalysis *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  GryphonAnalysis *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint8_t buf[4];
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(v4 + 8);
  v5 = *(unsigned __int16 **)(v4 + 16);
  if ((unsigned __int16 *)v6 == v5)
  {
    v13 = 0;
LABEL_31:
    v22 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
    do
    {
      v8 = *(_DWORD **)(v7 + 160);
      v9 = *(_DWORD **)(v7 + 168);
      while (v8 != v9)
      {
        if (*v8 == 1)
        {
          *(_QWORD *)(a1 + 280) = 0;
          *(_QWORD *)(a1 + 296) = 0;
        }
        v8 += 14;
      }
      v7 += 184;
    }
    while ((unsigned __int16 *)v7 != v5);
    v10 = *(_QWORD *)(v6 + 160);
    v11 = *(_QWORD *)(v6 + 168);
    if (v10 == v11)
    {
      v13 = 0;
    }
    else
    {
      v12 = v10 + 56;
      do
      {
        v13 = *(_DWORD *)(v12 - 56) == 7;
        v14 = *(_DWORD *)(v12 - 56) == 7 || v12 == v11;
        v12 += 56;
      }
      while (!v14);
    }
    v15 = (unsigned __int16 *)(v6 + 40);
    while (1)
    {
      v16 = *((char *)v15 + 23);
      if (v16 < 0)
      {
        if (*((_QWORD *)v15 + 1) != 3)
          break;
        v17 = *(unsigned __int16 **)v15;
      }
      else
      {
        v17 = v15;
        if (v16 != 3)
          break;
      }
      v18 = *v17;
      v19 = *((unsigned __int8 *)v17 + 2);
      if (v18 != 26995 || v19 != 108)
        break;
      v21 = v15 + 72;
      v15 += 92;
      if (v21 == v5)
        goto LABEL_31;
    }
    v22 = 0;
  }
  if (!v13 && !*(_QWORD *)(a1 + 280))
  {
    v24 = *(float **)(v4 + 56);
    v23 = *(float **)(v4 + 64);
    v25 = (char *)v23 - (char *)v24;
    v26 = v23 - v24;
    if (v26 >= 0xF0)
      v26 = 240;
    v27 = &v23[-v26];
    v28 = *(float **)(v4 + 56);
    if (v24 != v27)
    {
      v28 = *(float **)(v4 + 56);
      while (fabsf(*v28) <= 100.0)
      {
        if (++v28 == v27)
          goto LABEL_59;
      }
    }
    if (v28 != v27)
    {
      do
      {
        v27 = v28;
        if (v28 <= v24)
          break;
        --v28;
      }
      while ((float)(*(v27 - 1) * *v27) > 0.0);
    }
LABEL_59:
    v41 = (char *)v27 - (char *)v24;
    v42 = v27 - v24;
    if (v27 != v24)
    {
      v43 = &v24[v42];
      v44 = (char *)v23 - (char *)v43;
      if (v23 != v43)
        memmove(*(void **)(v4 + 56), v43, (char *)v23 - (char *)v43);
      v45 = *(_QWORD *)(v4 + 56);
      *(_QWORD *)(v4 + 64) = (char *)v24 + v44;
      v25 = (unint64_t)v24 + v44 - v45;
    }
    v46 = *(int **)(v4 + 32);
    v47 = *(_DWORD **)(v4 + 40);
    if (v47 != v46)
    {
      v48 = v25 >> 2;
      v49 = v47 - v46;
      if (v49 <= 1)
        v49 = 1;
      do
      {
        v50 = *v46 - (v41 >> 2);
        if (v50 >= (int)v48)
          v50 = v48;
        *v46++ = v50 & ~(v50 >> 31);
        --v49;
      }
      while (v49);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v107 = v42;
      _os_log_impl(&dword_1DE3F6000, v51, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream trimmed %zu samples of initial silence", buf, 0xCu);
    }
    Diagnostics::log(7, "SilenceTrimmingStream trimmed %zu samples of initial silence", v52, v42);
    if ((v22 & 1) == 0)
      goto LABEL_74;
LABEL_55:
    *(_QWORD *)(a1 + 288) = 0;
    goto LABEL_86;
  }
  v29 = *(_QWORD *)(a1 + 288);
  if (v29)
  {
    v30 = *(char **)(v4 + 56);
    *(_DWORD *)buf = 0;
    std::vector<float>::insert(v4 + 56, v30, v29, (char *)buf);
    v31 = *(int **)(v4 + 32);
    v32 = *(int **)(v4 + 40);
    v33 = (char *)v32 - (char *)v31;
    if (v32 != v31)
    {
      v34 = *(_DWORD *)(a1 + 288);
      v35 = (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 2;
      v36 = v33 >> 2;
      if (v36 <= 1)
        v36 = 1;
      do
      {
        v37 = *v31 + v34;
        if (v37 >= (int)v35)
          v37 = v35;
        *v31++ = v37 & ~(v37 >> 31);
        --v36;
      }
      while (v36);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(_QWORD *)(a1 + 288);
      *(_DWORD *)buf = 134217984;
      v107 = v40;
      _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream restored %zu samples of inter-sentence silence", buf, 0xCu);
    }
    Diagnostics::log(7, "SilenceTrimmingStream restored %zu samples of inter-sentence silence", v39, *(_QWORD *)(a1 + 288));
    *(_QWORD *)(a1 + 288) = 0;
  }
  if ((v22 & 1) != 0)
    goto LABEL_55;
LABEL_74:
  v54 = *(_QWORD *)(v4 + 56);
  v53 = *(float **)(v4 + 64);
  v55 = ((uint64_t)v53 - v54) >> 2;
  if (v55 >= 0xF0)
    v55 = 240;
  v56 = (float *)(v54 + 4 * v55);
  v57 = *(float **)(v4 + 64);
  while (v57 != v56)
  {
    v58 = *--v57;
    if (fabsf(v58) > 100.0)
    {
      v59 = v57 + 1;
      do
      {
        v56 = v59;
        if (v59 >= v53)
          break;
        ++v59;
      }
      while ((float)(*v56 * *(v56 - 1)) > 0.0);
      break;
    }
  }
  v60 = v53 - v56;
  *(_QWORD *)(a1 + 288) = v60;
  if (v53 != v56)
  {
    v61 = &v56[v60];
    v62 = (char *)v53 - (char *)v61;
    if (v53 != v61)
      memmove(v56, v61, (char *)v53 - (char *)v61);
    *(_QWORD *)(v4 + 64) = (char *)v56 + v62;
  }
LABEL_86:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v63 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v65 = *(_QWORD *)(a1 + 288);
    *(_DWORD *)buf = 134217984;
    v107 = v65;
    _os_log_impl(&dword_1DE3F6000, v63, OS_LOG_TYPE_DEBUG, "SilenceTrimmingStream trimmed %zu samples of ending silence", buf, 0xCu);
  }
  Diagnostics::log(7, "SilenceTrimmingStream trimmed %zu samples of ending silence", v64, *(_QWORD *)(a1 + 288));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v66 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v68 = (uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 2;
    *(_DWORD *)buf = 134217984;
    v107 = v68;
    _os_log_impl(&dword_1DE3F6000, v66, OS_LOG_TYPE_INFO, "Final audio %zu samples", buf, 0xCu);
  }
  v69 = (GryphonAnalysis *)Diagnostics::log(6, "Final audio %zu samples", v67, (uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 2);
  v70 = (GryphonAnalysis *)GryphonAnalysis::Storage(v69);
  if (*(_BYTE *)v70)
  {
    v71 = *(_DWORD *)(a1 + 272);
    v72 = *(_QWORD *)(v4 + 8);
    v73 = *(_QWORD *)(v4 + 16);
    if (v73 == v72)
    {
      v80 = *(_QWORD *)(v4 + 16);
    }
    else
    {
      v74 = (v73 - v72) / 184;
      v75 = *(int **)(v4 + 32);
      v76 = *(_QWORD *)(a1 + 288) + ((uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 2);
      v77 = v74 - 1;
      if (v74 <= 1)
        v74 = 1;
      v78 = (float *)(v72 + 152);
      do
      {
        if (v77)
          v79 = (float)(1000 * (v75[1] - *v75) / v71);
        else
          v79 = (float)(1000 * (v76 - *v75) / (unint64_t)v71);
        *v78 = v79;
        v78 += 46;
        ++v75;
        --v77;
        --v74;
      }
      while (v74);
      v71 = *(_DWORD *)(a1 + 272);
      v73 = *(_QWORD *)(v4 + 8);
      v80 = *(_QWORD *)(v4 + 16);
    }
    v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v70);
    v82 = 0;
    v83 = 0xD37A6F4DE9BD37A7 * ((v80 - v73) >> 3);
    v84 = *((_QWORD *)v81 + 58);
    while (1)
    {
      v85 = v84;
      v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
      if (v85 == *((_QWORD *)v81 + 57))
        break;
      v84 = v85 - 120;
      v82 -= 0x2C8590B21642C859 * ((uint64_t)(*(_QWORD *)(v85 - 104) - *(_QWORD *)(v85 - 112)) >> 3);
      if (v82 == v83)
      {
        v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
        v86 = 0xEEEEEEEEEEEEEEEFLL * ((v85 - *((_QWORD *)v81 + 57)) >> 3) - 1;
        goto LABEL_110;
      }
    }
    v86 = 0;
LABEL_110:
    v87 = 0;
    while (1)
    {
      v88 = (GryphonAnalysis *)GryphonAnalysis::Storage(v81);
      if (v86 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v88 + 58) - *((_QWORD *)v88 + 57)) >> 3))
        break;
      v81 = (GryphonAnalysis *)GryphonAnalysis::Storage(v88);
      v89 = *((_QWORD *)v81 + 57) + 120 * v86;
      v90 = *(_QWORD *)(v89 + 8);
      v91 = *(_QWORD *)(v89 + 16);
      if (v90 != v91)
      {
        v92 = (int *)(*(_QWORD *)(v4 + 8) + 184 * v87 + 152);
        do
        {
          v93 = *v92;
          v92 += 46;
          *(_DWORD *)(v90 + 152) = v93;
          ++v87;
          v90 += 184;
        }
        while (v90 != v91);
      }
      ++v86;
    }
    v95 = *(_QWORD *)(v4 + 56);
    v94 = *(_QWORD *)(v4 + 64);
    v96 = GryphonAnalysis::Storage(v88);
    *(float *)(v96 + 480) = *(float *)(v96 + 480) + (float)((float)(unint64_t)((v94 - v95) >> 2) / (float)v71);
  }
  v97 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(v4 + 96) = v97;
  *(_QWORD *)(a1 + 296) = v97 + ((uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 2);
  ++*(_QWORD *)(a1 + 280);
  v98 = a2[1];
  v104 = *a2;
  v105 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v99 = (unint64_t *)(v98 + 8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v104);
  v101 = v105;
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_1DE9BF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNProcessor::prepare(EspressoWaveRNNProcessor *this)
{
  std::recursive_mutex *v2;
  int v3;
  void *__p[3];
  __int16 v5;
  char v6;
  _OWORD v7[3];
  __int128 v8;
  void *v9[2];
  _QWORD v10[3];
  void **v11;

  v2 = (std::recursive_mutex *)((char *)this + 600);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 600));
  if (!*((_BYTE *)this + 664))
  {
    *((_BYTE *)this + 664) = 1;
    v3 = *((_DWORD *)this + 148);
    v5 = 257;
    v6 = 0;
    memset(v7, 0, sizeof(v7));
    v8 = 0u;
    *(_OWORD *)v9 = 0u;
    memset(v10, 0, 22);
    std::vector<std::vector<float>>::resize((uint64_t *)v7, 1uLL);
    std::vector<float>::resize(*(uint64_t *)&v7[0], *((_QWORD *)this + 72));
    (*(void (**)(void **__return_ptr, EspressoWaveRNNProcessor *, __int16 *))(*(_QWORD *)this + 40))(__p, this, &v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *((_DWORD *)this + 148) = v3;
    if (v9[1])
    {
      v10[0] = v9[1];
      operator delete(v9[1]);
    }
    v11 = (void **)&v8;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v11 = (void **)&v7[1] + 1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    v11 = (void **)v7;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
  std::recursive_mutex::unlock(v2);
}

void sub_1DE9BF73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::recursive_mutex *v4;
  va_list va;

  va_start(va, a4);
  WaveNetFeature::~WaveNetFeature((WaveNetFeature *)va);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNProcessor::safe_process(EspressoWaveRNNProcessor *this, const WaveNetFeature *a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)((char *)this + 600);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 600));
  *((_BYTE *)this + 664) = 1;
  (*(void (**)(EspressoWaveRNNProcessor *, const WaveNetFeature *))(*(_QWORD *)this + 40))(this, a2);
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9BF7B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(EspressoWaveRNNProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1EA9209C0;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2 && *v2 && espresso_plan_get_phase() == 1)
    espresso_plan_build_clean();
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 600));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void EspressoWaveRNNProcessor::reset(EspressoWaveRNNProcessor *this)
{
  NSObject *v2;
  const char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_INFO, "EspressoWaveRNNProcessor reset.", v7, 2u);
  }
  Diagnostics::log(6, "EspressoWaveRNNProcessor reset.", v3);
  v4 = (void *)*((_QWORD *)this + 29);
  v5 = *((_QWORD *)this + 72);
  if (v5 >= 1)
    bzero(*((void **)this + 8), 4 * (v5 - ((v5 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  v6 = *((_QWORD *)this + 71);
  if (v6 >= 1)
    bzero(v4, 4 * (v6 - ((v6 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  *((_DWORD *)this + 148) = 0;
}

uint64_t EspressoWaveRNNProcessor::process@<X0>(_QWORD *a1@<X8>)
{
  NSObject *v4;
  const char *v5;
  uint64_t result;
  uint8_t v7[16];

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_ERROR, "Stub WaveRNN processor should not be used during runtime.", v7, 2u);
  }
  result = Diagnostics::log(3, "Stub WaveRNN processor should not be used during runtime.", v5);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void EspressoWaveRNNSubscalingANEProcessor::~EspressoWaveRNNSubscalingANEProcessor(EspressoWaveRNNSubscalingANEProcessor *this)
{
  *(_QWORD *)this = &off_1EA9223B0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 1360);
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

{
  *(_QWORD *)this = &off_1EA9223B0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 1360);
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

void EspressoWaveRNNSubscalingANEProcessor::reset(EspressoWaveRNNSubscalingANEProcessor *this)
{
  EspressoWaveRNNProcessor::reset(this);
  *((_DWORD *)this + 338) = 0;
}

void EspressoWaveRNNSubscalingANEProcessor::process(EspressoWaveRNNSubscalingANEProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  int v9;
  float v10;
  int v11;
  void *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  _WORD *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  void *exception;
  int v36;
  void **v37;
  const char *status_string;
  void **v39;
  const WaveNetFeature *v41;
  _DWORD *v42;
  _DWORD *v43;
  const void *v44;
  void *v45;
  void *__dst;
  void *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *__p[2];
  char v51;
  void *v52;
  void *v53;

  v45 = (void *)*((_QWORD *)this + 29);
  __dst = (void *)*((_QWORD *)this + 8);
  v43 = (_DWORD *)*((_QWORD *)this + 85);
  v44 = (const void *)*((_QWORD *)this + 50);
  v42 = (_DWORD *)*((_QWORD *)this + 106);
  std::vector<short>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) * *((_QWORD *)this + 4));
  v5 = *((_QWORD *)a2 + 1);
  v41 = a2;
  if (*((_QWORD *)a2 + 2) != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.0;
    *(float *)&v9 = 0.86;
    v10 = -1.0;
    while (1)
    {
      memcpy(__dst, *(const void **)(v5 + 24 * v7), *(_QWORD *)(v5 + 24 * v7 + 8) - *(_QWORD *)(v5 + 24 * v7));
      *v43 = 0;
      *v42 = *((_DWORD *)this + 338);
      memcpy(v45, v44, 4 * *((_QWORD *)this + 71));
      v11 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
      if (v11)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        v36 = v51;
        v37 = (void **)__p[0];
        status_string = (const char *)espresso_get_status_string();
        v39 = __p;
        if (v36 < 0)
          v39 = v37;
        StringFormatter::StringFormatter((StringFormatter *)&v52, "%s Error: %d, %s", (const char *)v39, v11, status_string);
        MEMORY[0x1DF0EC99C](exception, &v52);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (v51 < 0)
        operator delete(__p[0]);
      std::vector<float>::vector(&v52, *((_QWORD *)this + 139));
      std::vector<float>::vector(v49, *((_QWORD *)this + 139));
      v13 = (float *)v52;
      v12 = v53;
      v14 = (float *)v49[0];
      v47 = (void *)v49[0];
      v48 = v6;
      if (v53 != v52)
        break;
      if (v49[0])
        goto LABEL_32;
LABEL_33:
      if (v12)
      {
        v53 = v12;
        operator delete(v12);
      }
      ++v7;
      v5 = *((_QWORD *)v41 + 1);
      v6 = v48 + 2;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v41 + 2) - v5) >> 3))
        return;
    }
    v15 = (float *)*((_QWORD *)this + 127);
    v16 = (float *)*((_QWORD *)this + 148);
    if ((unint64_t)(((_BYTE *)v53 - (_BYTE *)v52) >> 2) <= 1)
      v17 = 1;
    else
      v17 = ((_BYTE *)v53 - (_BYTE *)v52) >> 2;
    v18 = (_WORD *)(*a3 + *((_QWORD *)this + 4) * v6 + 2);
    do
    {
      v19 = *v15++;
      *v13 = (float)(v19 + v8) * 127.5;
      *v14 = (float)(*v16 + v8) * 127.5;
      v20 = *v16++;
      *((float *)this + 338) = v20;
      v21 = *v13++;
      v22 = v10 + (float)((float)(v21 / 255.0) * 2.0);
      v10 = -1.0;
      v23 = 1.0;
      if (v22 <= 0.0)
        v23 = 0.0;
      v24 = *(float *)&v9;
      if (v22 >= 0.0)
        v25 = v23;
      else
        v25 = -1.0;
      v26 = (float)((float)(exp2f(fabsf(v22) * 8.0) + -1.0) * 0.0039216) * v25;
      v27 = *v14++;
      v28 = (float)((float)(v27 / 255.0) * 2.0) + -1.0;
      v29 = 1.0;
      if (v28 <= 0.0)
        v29 = 0.0;
      v8 = 1.0;
      if (v28 >= 0.0)
        v30 = v29;
      else
        v30 = -1.0;
      v31 = exp2f(fabsf(v28) * 8.0);
      v32 = v26 + (float)(*((float *)this + 148) * v24);
      *(float *)&v9 = v24;
      v33 = (float)((float)(v31 + -1.0) * 0.0039216) * v30;
      if (v32 < -1.0)
        v32 = -1.0;
      if (v32 > 1.0)
        v32 = 1.0;
      v34 = v33 + (float)(v32 * v24);
      if (v34 < -1.0)
        v34 = -1.0;
      if (v34 > 1.0)
        v34 = 1.0;
      *((float *)this + 148) = v34;
      *(v18 - 1) = (int)(float)(v32 * 32767.0);
      *v18 = (int)(float)(v34 * 32767.0);
      v18 += 2;
      --v17;
    }
    while (v17);
LABEL_32:
    v49[1] = v47;
    operator delete(v47);
    v12 = v52;
    goto LABEL_33;
  }
}

void sub_1DE9BFE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v38;
  void *v40;

  if (a37 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0)
        operator delete(a26);
      v40 = *(void **)a13;
      if (*(_QWORD *)a13)
      {
        *(_QWORD *)(a13 + 8) = v40;
        operator delete(v40);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v38);
  goto LABEL_6;
}

void EspressoWaveRNNFusedSubscalingANEProcessor::~EspressoWaveRNNFusedSubscalingANEProcessor(EspressoWaveRNNFusedSubscalingANEProcessor *this)
{
  *(_QWORD *)this = &off_1EA9224D8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 2056);
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

{
  *(_QWORD *)this = &off_1EA9224D8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 2056);
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

double EspressoWaveRNNFusedSubscalingANEProcessor::reset(EspressoWaveRNNFusedSubscalingANEProcessor *this)
{
  double result;

  EspressoWaveRNNProcessor::reset(this);
  result = 0.0;
  *(_OWORD *)((char *)this + 2040) = 0u;
  return result;
}

void EspressoWaveRNNFusedSubscalingANEProcessor::process(EspressoWaveRNNFusedSubscalingANEProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  void *v30;
  int v31;
  void **v32;
  const char *v33;
  void **v34;
  void *exception;
  int v36;
  void **v37;
  const char *status_string;
  void **v39;
  void *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  const void *v47;
  void *v48;
  void *__dst;
  void *v50;
  _DWORD *v51;
  void *v52;
  _BYTE *v53;
  void *v54[2];
  char v55;
  void *__p[2];
  char v57;
  _BYTE *v58;
  _BYTE *v59;

  v48 = (void *)*((_QWORD *)this + 29);
  __dst = (void *)*((_QWORD *)this + 8);
  v46 = (_DWORD *)*((_QWORD *)this + 87);
  v47 = (const void *)*((_QWORD *)this + 50);
  v44 = (_DWORD *)*((_QWORD *)this + 129);
  v45 = (_DWORD *)*((_QWORD *)this + 108);
  v42 = *((_QWORD *)this + 234);
  v43 = (_DWORD *)*((_QWORD *)this + 150);
  v41 = (void *)*((_QWORD *)this + 171);
  std::vector<short>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3) * *((_QWORD *)this + 4));
  v5 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v36 = v57;
    v37 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v39 = __p;
    if (v36 < 0)
      v39 = v37;
    StringFormatter::StringFormatter((StringFormatter *)&v58, "%s Error: %d, %s", (const char *)v39, v5, status_string);
    MEMORY[0x1DF0EC99C](exception, &v58);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v57 < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 1))
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      memcpy(v41, (const void *)(v42 + 4 * *((_QWORD *)this + 4) * v7), 4 * *((_QWORD *)this + 4) * *((_QWORD *)this + 73));
      memcpy(__dst, *(const void **)(*((_QWORD *)a2 + 1) + 24 * v7), *(_QWORD *)(*((_QWORD *)a2 + 1) + 24 * v7 + 8) - *(_QWORD *)(*((_QWORD *)a2 + 1) + 24 * v7));
      *v46 = *((_DWORD *)this + 510);
      *v45 = *((_DWORD *)this + 511);
      *v44 = *((_DWORD *)this + 512);
      *v43 = *((_DWORD *)this + 513);
      memcpy(v48, v47, 4 * *((_QWORD *)this + 71));
      v8 = espresso_plan_execute_sync();
      std::string::basic_string[abi:ne180100]<0>(v54, &byte_1DEBD87CE);
      if (v8)
      {
        v30 = __cxa_allocate_exception(0x10uLL);
        v31 = v55;
        v32 = (void **)v54[0];
        v33 = (const char *)espresso_get_status_string();
        v34 = v54;
        if (v31 < 0)
          v34 = v32;
        StringFormatter::StringFormatter((StringFormatter *)&v58, "%s Error: %d, %s", (const char *)v34, v8, v33);
        MEMORY[0x1DF0EC99C](v30, &v58);
        __cxa_throw(v30, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if (v55 < 0)
        operator delete(v54[0]);
      std::vector<float>::vector(&v58, *((_QWORD *)this + 204));
      std::vector<float>::vector(&v52, *((_QWORD *)this + 225));
      std::vector<float>::vector(&v50, 2 * *((_QWORD *)this + 204));
      v9 = v50;
      *((_DWORD *)v50 + 1) = *((_DWORD *)this + 513);
      v9[3] = *((_DWORD *)this + 510);
      v10 = *((_QWORD *)this + 192);
      v11 = (v59 - v58) >> 2;
      if (v59 != v58)
        break;
LABEL_24:
      *((_DWORD *)this + 511) = *(_DWORD *)(v10 + 4 * v11 - 4);
      if (v51 != v9)
      {
        if ((unint64_t)(v51 - v9) <= 1)
          v22 = 1;
        else
          v22 = v51 - v9;
        v23 = (_WORD *)(*a3 + *((_QWORD *)this + 4) * v6);
        v24 = (float *)v9;
        do
        {
          v25 = (float)(*v24 + 1.0) * 127.5;
          *v24++ = v25;
          v26 = (float)((float)(v25 / 255.0) * 2.0) + -1.0;
          if (v26 > 0.0)
            v27 = 1.0;
          else
            v27 = 0.0;
          if (v26 >= 0.0)
            v28 = v27;
          else
            v28 = -1.0;
          v29 = (float)((float)((float)(exp2f(fabsf(v26) * 8.0) + -1.0) * 0.0039216) * v28)
              + (float)(*((float *)this + 148) * 0.86);
          if (v29 < -1.0)
            v29 = -1.0;
          if (v29 > 1.0)
            v29 = 1.0;
          *((float *)this + 148) = v29;
          *v23++ = (int)(float)(v29 * 32767.0);
          --v22;
        }
        while (v22);
      }
      v51 = v9;
      operator delete(v9);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      ++v7;
      v6 += 2;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3))
        return;
    }
    v12 = 0;
    v13 = (v53 - (_BYTE *)v52) >> 2;
    v14 = v13 - 3;
    v15 = v13 - 2;
    v16 = v13 - 1;
    if (v11 <= 1)
      v17 = 1;
    else
      v17 = (v59 - v58) >> 2;
    v18 = v9 + 5;
    while (1)
    {
      *(v18 - 5) = *(_DWORD *)(v10 + 4 * v12);
      if (v14 == v12)
      {
        v19 = *((_QWORD *)this + 213);
        *((_DWORD *)this + 512) = *(_DWORD *)(v19 + 4 * v14);
        v20 = *(_DWORD *)(v19 + 4 * v14);
      }
      else
      {
        if (v15 == v12)
        {
          *((_DWORD *)this + 513) = *(_DWORD *)(*((_QWORD *)this + 213) + 4 * v15);
          goto LABEL_21;
        }
        v21 = *((_QWORD *)this + 213);
        if (v16 == v12)
        {
          *((_DWORD *)this + 510) = *(_DWORD *)(v21 + 4 * v16);
          goto LABEL_21;
        }
        v20 = *(_DWORD *)(v21 + 4 * v12);
      }
      *v18 = v20;
LABEL_21:
      ++v12;
      v18 += 2;
      if (v17 == v12)
        goto LABEL_24;
    }
  }
}

void sub_1DE9C0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  int v42;
  void *v43;
  uint64_t v44;
  void *v46;

  if (*(char *)(v44 - 153) < 0)
  {
    operator delete(*(void **)(v44 - 176));
    if ((v42 & 1) == 0)
    {
LABEL_6:
      if (a42 < 0)
        operator delete(__p);
      v46 = *(void **)a13;
      if (*(_QWORD *)a13)
      {
        *(_QWORD *)(a13 + 8) = v46;
        operator delete(v46);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v43);
  goto LABEL_6;
}

void EspressoWaveRNNSubscalingCPUProcessor::~EspressoWaveRNNSubscalingCPUProcessor(EspressoWaveRNNSubscalingCPUProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t EspressoWaveRNNSubscalingCPUProcessor::process@<X0>(EspressoWaveRNNSubscalingCPUProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  float *v7;
  char *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t i;
  int v18;
  float v19;
  char *v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _WORD *v31;
  NSObject *v32;
  const char *v33;
  void *exception;
  int v36;
  void **v37;
  const char *status_string;
  void **v39;
  const WaveNetFeature *v40;
  uint64_t v41;
  float v42;
  void *__p[2];
  char v44;
  uint8_t buf[32];

  v6 = *((_QWORD *)this + 4);
  if (*((_BYTE *)this + 40))
  {
    v7 = (float *)*((_QWORD *)a2 + 10);
    if (v7 != *((float **)a2 + 11))
      v6 = (unint64_t)(float)((float)v6 / *v7);
  }
  v8 = (char *)*((_QWORD *)this + 8);
  v9 = (void *)*((_QWORD *)this + 29);
  v10 = (const void *)*((_QWORD *)this + 50);
  std::vector<short>::vector(a3, v6 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  BNNSSetNetwork();
  v11 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v11)
  {
    v12 = 0;
    v13 = 0;
    v40 = a2;
    do
    {
      v41 = v13;
      v14 = v11 + 24 * v13;
      v15 = *(_BYTE **)v14;
      v16 = *(_BYTE **)(v14 + 8);
      if (v16 != v15)
        memmove(v8, v15, v16 - v15);
      if (v6)
      {
        for (i = 0; i < v6; i += 2)
        {
          v18 = espresso_plan_execute_sync();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
          if (v18)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v36 = v44;
            v37 = (void **)__p[0];
            status_string = (const char *)espresso_get_status_string();
            v39 = __p;
            if (v36 < 0)
              v39 = v37;
            StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v39, v18, status_string);
            MEMORY[0x1DF0EC99C](exception, buf);
            __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v44 < 0)
            operator delete(__p[0]);
          v19 = **((float **)this + 84);
          v42 = **((float **)this + 105);
          v20 = &v8[4 * *((_QWORD *)this + 72)];
          *((_DWORD *)v20 - 2) = **((_DWORD **)this + 126);
          *((_DWORD *)v20 - 1) = 0;
          v21 = *((_QWORD *)this + 71);
          if (v21)
            memmove(v9, v10, 4 * v21);
          v22 = (float)((float)(v19 / 255.0) * 2.0) + -1.0;
          v23 = 0.0;
          if (v22 > 0.0)
            v23 = 1.0;
          if (v22 >= 0.0)
            v24 = v23;
          else
            v24 = -1.0;
          v25 = (float)((float)((float)(exp2f(fabsf(v22) * 8.0) + -1.0) * 0.0039216) * v24)
              + (float)(*((float *)this + 148) * 0.86);
          if (v25 < -1.0)
            v25 = -1.0;
          if (v25 <= 1.0)
            v26 = v25;
          else
            v26 = 1.0;
          v27 = (float)((float)(v42 / 255.0) * 2.0) + -1.0;
          v28 = 0.0;
          if (v27 > 0.0)
            v28 = 1.0;
          if (v27 >= 0.0)
            v29 = v28;
          else
            v29 = -1.0;
          v30 = (float)((float)((float)(exp2f(fabsf(v27) * 8.0) + -1.0) * 0.0039216) * v29) + (float)(v26 * 0.86);
          if (v30 < -1.0)
            v30 = -1.0;
          if (v30 > 1.0)
            v30 = 1.0;
          v31 = (_WORD *)(*a3 + v12 + 2 * i);
          *v31 = (int)(float)(v26 * 32767.0);
          v31[1] = (int)(float)(v30 * 32767.0);
          *((float *)this + 148) = v30;
          if (fabsf(v30) == INFINITY)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1DE3F6000, v32, OS_LOG_TYPE_ERROR, "prev_sample_ became Inf or NaN. This will result in silence audio.", buf, 2u);
            }
            Diagnostics::log(3, "prev_sample_ became Inf or NaN. This will result in silence audio.", v33);
          }
        }
      }
      v13 = v41 + 1;
      v11 = *((_QWORD *)v40 + 1);
      v12 += 2 * v6;
    }
    while (v41 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v40 + 2) - v11) >> 3));
  }
  return BNNSClearNetwork();
}

void sub_1DE9C0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)v29;
  if (*(_QWORD *)v29)
  {
    *(_QWORD *)(v29 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNFusedSubscaleCPUProcessor::~EspressoWaveRNNFusedSubscaleCPUProcessor(EspressoWaveRNNFusedSubscaleCPUProcessor *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA922480;
  v3 = (void **)((char *)this + 1408);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 1384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 170);
  if (v2)
  {
    *((_QWORD *)this + 171) = v2;
    operator delete(v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1EA922480;
  v3 = (void **)((char *)this + 1408);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 1384);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 170);
  if (v2)
  {
    *((_QWORD *)this + 171) = v2;
    operator delete(v2);
  }
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  MEMORY[0x1DF0ED014]();
}

double EspressoWaveRNNFusedSubscaleCPUProcessor::reset(EspressoWaveRNNFusedSubscaleCPUProcessor *this)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v11;
  double result;
  int v13;
  __int128 v14;
  uint64_t v15;

  EspressoWaveRNNProcessor::reset(this);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 173);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 176);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 173, *((int *)this + 336));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 176, *((int *)this + 336));
  v2 = -1431655765 * ((*((_QWORD *)this + 174) - *((_QWORD *)this + 173)) >> 3) - 1;
  if ((v2 & 0x80000000) == 0)
  {
    v3 = 0;
    v4 = 24 * v2;
    do
    {
      if (-1 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)this + 174) - *((_QWORD *)this + 173)) >> 3) <= v2)
        v5 = 1;
      else
        v5 = *((_DWORD *)this + 337) + 1;
      v3 += v5;
      v13 = 0;
      std::vector<float>::vector(&v14, v3, &v13);
      v6 = *((_QWORD *)this + 173) + v4;
      v7 = *(void **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(v6 + 8) = v7;
        operator delete(v7);
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)(v6 + 16) = 0;
      }
      *(_OWORD *)v6 = v14;
      *(_QWORD *)(v6 + 16) = v15;
      v13 = 0;
      std::vector<float>::vector(&v14, v3, &v13);
      v8 = *((_QWORD *)this + 176) + v4;
      v9 = *(void **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(v8 + 8) = v9;
        operator delete(v9);
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
      }
      *(_OWORD *)v8 = v14;
      *(_QWORD *)(v8 + 16) = v15;
      v4 -= 24;
    }
    while ((uint64_t)v2-- > 0);
  }
  EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples((char **)&v14, (uint64_t)this, (uint64_t *)this + 173);
  v11 = (void *)*((_QWORD *)this + 170);
  if (v11)
  {
    *((_QWORD *)this + 171) = v11;
    operator delete(v11);
  }
  result = *(double *)&v14;
  *((_OWORD *)this + 85) = v14;
  *((_QWORD *)this + 172) = v15;
  return result;
}

uint64_t EspressoWaveRNNFusedSubscaleCPUProcessor::process@<X0>(EspressoWaveRNNFusedSubscaleCPUProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void **v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t i;
  int v15;
  float v16;
  float v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  void *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  unint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  float *v62;
  int v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unint64_t v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  float *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  float v88;
  NSObject *v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  int64_t v99;
  void **v100;
  char *v101;
  char *v102;
  char *v103;
  int64_t v104;
  void *exception;
  int v107;
  void **v108;
  const char *status_string;
  void **v110;
  const WaveNetFeature *v111;
  uint64_t v112;
  const void *v113;
  void *v114;
  char *__dst;
  unint64_t v117;
  void *__p[2];
  char v119;
  uint8_t buf[8];
  __int128 v121;

  v117 = *((_QWORD *)this + 4);
  if (*((_BYTE *)this + 40))
  {
    v5 = (float *)*((_QWORD *)a2 + 10);
    if (v5 != *((float **)a2 + 11))
      v117 = (unint64_t)(float)((float)v117 / *v5);
  }
  v114 = (void *)*((_QWORD *)this + 29);
  __dst = (char *)*((_QWORD *)this + 8);
  v113 = (const void *)*((_QWORD *)this + 50);
  std::vector<short>::vector(a3, v117 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  BNNSSetNetwork();
  v6 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v6)
  {
    v7 = 0;
    v8 = (char *)this + 1384;
    v9 = (void **)((char *)this + 1360);
    v10 = (_QWORD *)((char *)this + 1368);
    v111 = a2;
    do
    {
      v112 = v7;
      v11 = v6 + 24 * v7;
      v12 = *(_BYTE **)v11;
      v13 = *(_BYTE **)(v11 + 8);
      if (v13 != v12)
        memmove(__dst, v12, v13 - v12);
      if (v117)
      {
        for (i = 0; i < v117; i += *((int *)this + 336))
        {
          v15 = espresso_plan_execute_sync();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
          if (v15)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v107 = v119;
            v108 = (void **)__p[0];
            status_string = (const char *)espresso_get_status_string();
            v110 = __p;
            if (v107 < 0)
              v110 = v108;
            StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v110, v15, status_string);
            MEMORY[0x1DF0EC99C](exception, buf);
            __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v119 < 0)
            operator delete(__p[0]);
          v16 = **((float **)this + 84);
          v17 = **((float **)this + 105);
          v18 = **((_DWORD **)this + 126);
          v19 = **((_DWORD **)this + 147);
          v20 = *(_QWORD **)v8;
          v21 = *(char **)(*(_QWORD *)v8 + 32);
          v22 = *(_QWORD *)(*(_QWORD *)v8 + 40);
          if ((unint64_t)v21 >= v22)
          {
            v24 = (char *)v20[3];
            v25 = (v21 - v24) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              goto LABEL_130;
            v27 = v22 - (_QWORD)v24;
            if (v27 >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(*(_QWORD *)v8 + 40, v28);
              v24 = (char *)v20[3];
              v21 = (char *)v20[4];
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[4 * v25];
            *(_DWORD *)v30 = v18;
            v23 = v30 + 4;
            while (v21 != v24)
            {
              v31 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            v20[3] = v30;
            v20[4] = v23;
            v20[5] = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_DWORD *)v21 = v18;
            v23 = v21 + 4;
          }
          v20[4] = v23;
          v32 = *(_QWORD *)v8;
          v33 = *(_DWORD **)(*(_QWORD *)v8 + 8);
          v34 = *(_QWORD *)(*(_QWORD *)v8 + 16);
          if ((unint64_t)v33 >= v34)
          {
            v36 = *(_DWORD **)v32;
            v37 = ((uint64_t)v33 - *(_QWORD *)v32) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
LABEL_130:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = v34 - (_QWORD)v36;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(*(_QWORD *)v8 + 16, v40);
              v36 = *(_DWORD **)v32;
              v33 = *(_DWORD **)(v32 + 8);
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v19;
            v35 = v42 + 4;
            while (v33 != v36)
            {
              v43 = *--v33;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(_QWORD *)v32 = v42;
            *(_QWORD *)(v32 + 8) = v35;
            *(_QWORD *)(v32 + 16) = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v33 = v19;
            v35 = v33 + 1;
          }
          *(_QWORD *)(v32 + 8) = v35;
          EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples((char **)buf, (uint64_t)this, (uint64_t *)this + 173);
          v44 = *v9;
          if (*v9)
          {
            *v10 = v44;
            operator delete(v44);
            *v9 = 0;
            *((_QWORD *)this + 171) = 0;
            *((_QWORD *)this + 172) = 0;
          }
          v45 = *(_BYTE **)buf;
          *v9 = *(void **)buf;
          v46 = (_BYTE *)v121;
          *(_OWORD *)v10 = v121;
          if (v46 != v45)
            memmove(&__dst[4 * *((_QWORD *)this + 72) - (v46 - v45)], v45, v46 - v45);
          v47 = *((_QWORD *)this + 71);
          if (v47)
            memmove(v114, v113, 4 * v47);
          v48 = (_QWORD *)*((_QWORD *)this + 176);
          v49 = (float)((float)(v16 / 255.0) * 2.0) + -1.0;
          if (v49 > 0.0)
            v50 = 1.0;
          else
            v50 = 0.0;
          if (v49 >= 0.0)
            v51 = v50;
          else
            v51 = -1.0;
          v52 = (float)((float)(exp2f(fabsf(v49) * 8.0) + -1.0) * 0.0039216) * v51;
          v53 = v48[5];
          v54 = (float *)v48[4];
          if ((unint64_t)v54 >= v53)
          {
            v56 = (float *)v48[3];
            v57 = v54 - v56;
            if ((unint64_t)(v57 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v58 = v53 - (_QWORD)v56;
            v59 = (uint64_t)(v53 - (_QWORD)v56) >> 1;
            if (v59 <= v57 + 1)
              v59 = v57 + 1;
            if (v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v60 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v60 = v59;
            if (v60)
            {
              v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v48 + 5), v60);
              v56 = (float *)v48[3];
              v54 = (float *)v48[4];
            }
            else
            {
              v61 = 0;
            }
            v62 = (float *)&v61[4 * v57];
            *v62 = v52;
            v55 = v62 + 1;
            while (v54 != v56)
            {
              v63 = *((_DWORD *)v54-- - 1);
              *((_DWORD *)v62-- - 1) = v63;
            }
            v48[3] = v62;
            v48[4] = v55;
            v48[5] = &v61[4 * v60];
            if (v56)
              operator delete(v56);
          }
          else
          {
            *v54 = v52;
            v55 = v54 + 1;
          }
          v48[4] = v55;
          v64 = *((_QWORD *)this + 176);
          v65 = (float)((float)(v17 / 255.0) * 2.0) + -1.0;
          if (v65 > 0.0)
            v66 = 1.0;
          else
            v66 = 0.0;
          if (v65 >= 0.0)
            v67 = v66;
          else
            v67 = -1.0;
          v68 = (float)((float)(exp2f(fabsf(v65) * 8.0) + -1.0) * 0.0039216) * v67;
          v69 = *(_QWORD *)(v64 + 16);
          v70 = *(float **)(v64 + 8);
          if ((unint64_t)v70 >= v69)
          {
            v72 = *(float **)v64;
            v73 = ((uint64_t)v70 - *(_QWORD *)v64) >> 2;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v75 = v69 - (_QWORD)v72;
            if (v75 >> 1 > v74)
              v74 = v75 >> 1;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
              v76 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v64 + 16, v76);
              v72 = *(float **)v64;
              v70 = *(float **)(v64 + 8);
            }
            else
            {
              v77 = 0;
            }
            v78 = (float *)&v77[4 * v73];
            *v78 = v68;
            v71 = v78 + 1;
            while (v70 != v72)
            {
              v79 = *((_DWORD *)v70-- - 1);
              *((_DWORD *)v78-- - 1) = v79;
            }
            *(_QWORD *)v64 = v78;
            *(_QWORD *)(v64 + 8) = v71;
            *(_QWORD *)(v64 + 16) = &v77[4 * v76];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *v70 = v68;
            v71 = v70 + 1;
          }
          *(_QWORD *)(v64 + 8) = v71;
        }
      }
      v7 = v112 + 1;
      v6 = *((_QWORD *)v111 + 1);
    }
    while (v112 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v111 + 2) - v6) >> 3));
  }
  v80 = *((_QWORD *)this + 177);
  v81 = *(_QWORD *)(v80 - 16) - *(_QWORD *)(v80 - 24);
  v82 = *((_QWORD *)this + 176);
  if (v81 < 5)
  {
    v91 = v81 >> 2;
  }
  else
  {
    v83 = 0;
    v84 = 1;
    v85 = *((_QWORD *)this + 176);
    do
    {
      if (v80 == v85)
      {
        v85 = v80;
      }
      else
      {
        v86 = 0;
        v87 = 0;
        v88 = *((float *)this + 148);
        do
        {
          v88 = *(float *)(*(_QWORD *)(v85 + v86) + 4 * v84) + (float)(v88 * 0.86);
          if (v88 < -1.0)
            v88 = -1.0;
          if (v88 > 1.0)
            v88 = 1.0;
          *((float *)this + 148) = v88;
          if (fabsf(v88) == INFINITY)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v89 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1DE3F6000, v89, OS_LOG_TYPE_ERROR, "prev_sample_ became Inf or NaN. This will result in silence audio.", buf, 2u);
            }
            Diagnostics::log(3, "prev_sample_ became Inf or NaN. This will result in silence audio.", v90);
            v88 = *((float *)this + 148);
            v80 = *((_QWORD *)this + 177);
            v82 = *((_QWORD *)this + 176);
          }
          *(_WORD *)(*a3 + 2 * (v87 - 0x5555555555555555 * ((v80 - v82) >> 3) * v83)) = (int)(float)(v88 * 32767.0);
          ++v87;
          v86 += 24;
          v85 = v82;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v80 - v82) >> 3) > v87);
      }
      ++v84;
      v91 = (uint64_t)(*(_QWORD *)(v80 - 16) - *(_QWORD *)(v80 - 24)) >> 2;
      ++v83;
    }
    while (v91 > v84);
  }
  if (v80 != v82)
  {
    v92 = 0;
    v93 = 0;
    v94 = v91 - 1;
    do
    {
      if (v94)
      {
        v95 = *(_QWORD *)(v82 + v92);
        v96 = (_BYTE *)(v95 + 4 * v94);
        v97 = v82 + v92;
        v98 = *(_BYTE **)(v82 + v92 + 8);
        v99 = v98 - v96;
        if (v98 != v96)
          memmove(*(void **)(v82 + v92), v96, v98 - v96);
        *(_QWORD *)(v97 + 8) = v95 + v99;
        v100 = (void **)(*((_QWORD *)this + 173) + v92);
        v102 = (char *)*v100;
        v101 = (char *)v100[1];
        v103 = (char *)*v100 + 4 * v94;
        v104 = v101 - v103;
        if (v101 != v103)
          memmove(*v100, v103, v101 - v103);
        v100[1] = &v102[v104];
        v80 = *((_QWORD *)this + 177);
        v82 = *((_QWORD *)this + 176);
      }
      ++v93;
      v92 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v80 - v82) >> 3) > v93);
  }
  return BNNSClearNetwork();
}

void sub_1DE9C1510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v32;

  v32 = *(void **)a18;
  if (*(_QWORD *)a18)
  {
    *(_QWORD *)(a18 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNFusedSubscaleCPUProcessor::get_receptive_field_from_previous_samples(char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3) - 1;
  if ((v3 & 0x80000000) == 0)
  {
    v7 = (uint64_t)(a1 + 2);
    do
    {
      v8 = *a3;
      if (-1 - 0x5555555555555555 * ((a3[1] - *a3) >> 3) == v3)
      {
        v9 = *(_QWORD *)(v8 + 24 * v3 + 8);
        v11 = a1[1];
        v10 = (unint64_t)a1[2];
        if ((unint64_t)v11 >= v10)
        {
          v13 = *a1;
          v14 = (v11 - *a1) >> 2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = v10 - (_QWORD)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v17);
            v13 = *a1;
            v11 = a1[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[4 * v14];
          *(_DWORD *)v19 = *(_DWORD *)(v9 - 4);
          v12 = v19 + 4;
          while (v11 != v13)
          {
            v20 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a1 = v19;
          a1[1] = v12;
          a1[2] = &v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_DWORD *)v11 = *(_DWORD *)(v9 - 4);
          v12 = v11 + 4;
        }
        a1[1] = v12;
      }
      else
      {
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)a1, (uint64_t)a1[1], (char *)(*(_QWORD *)(v8 + 24 * v3 + 8) - 4 * *(int *)(a2 + 1348) - 4), *(char **)(v8 + 24 * v3 + 8), (4 - -4 * *(int *)(a2 + 1348)) >> 2);
      }
    }
    while (v3-- > 0);
  }
}

void sub_1DE9C172C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNSingleSoftmaxProcessor::~EspressoWaveRNNSingleSoftmaxProcessor(EspressoWaveRNNSingleSoftmaxProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

void EspressoWaveRNNSingleSoftmaxProcessor::process(EspressoWaveRNNSingleSoftmaxProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  float *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t i;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  void *exception;
  int v26;
  void **v27;
  const char *status_string;
  void **v29;
  const WaveNetFeature *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  _BYTE v36[32];

  v31 = *((_QWORD *)this + 4);
  if (*((_BYTE *)this + 40))
  {
    v6 = (float *)*((_QWORD *)a2 + 10);
    if (v6 != *((float **)a2 + 11))
      v31 = (unint64_t)(float)((float)v31 / *v6);
  }
  v7 = *((_QWORD *)this + 73);
  v8 = (void *)*((_QWORD *)this + 8);
  v9 = (void *)*((_QWORD *)this + 29);
  v10 = (const void *)*((_QWORD *)this + 50);
  std::vector<short>::vector(a3, v31 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  v11 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v11)
  {
    v12 = 0;
    v13 = 0;
    v30 = a2;
    do
    {
      v32 = v13;
      v14 = v11 + 24 * v13;
      v15 = *(_BYTE **)v14;
      v16 = *(_BYTE **)(v14 + 8);
      if (v16 != v15)
        memmove(v8, v15, v16 - v15);
      v33 = v12;
      for (i = v31; i; --i)
      {
        v18 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
        if (v18)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v26 = v35;
          v27 = (void **)__p[0];
          status_string = (const char *)espresso_get_status_string();
          v29 = __p;
          if (v26 < 0)
            v29 = v27;
          StringFormatter::StringFormatter((StringFormatter *)v36, "%s Error: %d, %s", (const char *)v29, v18, status_string);
          MEMORY[0x1DF0EC99C](exception, v36);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v35 < 0)
          operator delete(__p[0]);
        v19 = (float)(__int16)random_sample(*((float **)this + 84), (float *)(*((_QWORD *)this + 84) + 4 * *((_QWORD *)this + 73)));
        v20 = (float)((float)(v19 / 255.0) * 2.0) + -1.0;
        v21 = 0.0;
        if (v20 > 0.0)
          v21 = 1.0;
        if (v20 >= 0.0)
          v22 = v21;
        else
          v22 = -1.0;
        v23 = (float)((float)((float)(exp2f(fabsf(v20) * 8.0) + -1.0) * 0.0039216) * v22)
            + (float)(*((float *)this + 148) * 0.86);
        if (v23 < -1.0)
          v23 = -1.0;
        if (v23 > 1.0)
          v23 = 1.0;
        *((float *)this + 148) = v23;
        *(_WORD *)(*a3 + v12) = (int)(float)(v23 * 32767.0);
        v24 = *((_QWORD *)this + 71);
        if (v24)
          memmove(v9, v10, 4 * v24);
        *((float *)v8 + *((_QWORD *)this + 72) - 1) = (float)(v19 / (float)((float)(unint64_t)(v7 - 1) * 0.5))
                                                    + -1.0;
        v12 += 2;
      }
      v13 = v32 + 1;
      v11 = *((_QWORD *)v30 + 1);
      v12 = v33 + 2 * v31;
    }
    while (v32 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v30 + 2) - v11) >> 3));
  }
}

void sub_1DE9C1A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v30;
  int v31;
  void *v33;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0)
        operator delete(a18);
      v33 = *(void **)v29;
      if (*(_QWORD *)v29)
      {
        *(_QWORD *)(v29 + 8) = v33;
        operator delete(v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

uint64_t random_sample(float *a1, float *a2)
{
  unsigned __int8 v4;
  double *v5;
  float v6;
  double *v7;
  uint64_t v8;
  double v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  _BYTE *v28;
  unsigned int v30;
  uint64_t i;
  void *__p;
  __int128 v33;
  double *v34;
  __int128 v35;

  {
    v30 = 0;
    random_sample(float *,float *)::gen[0] = 0;
    for (i = 1; i != 624; ++i)
    {
      v30 = i + 1812433253 * (v30 ^ (v30 >> 30));
      random_sample(float *,float *)::gen[i] = v30;
    }
    qword_1F044C928 = 0;
  }
  __p = 0;
  v33 = 0uLL;
  if (a2 != a1)
  {
    std::vector<double>::__vallocate[abi:ne180100](&__p, a2 - a1);
    v5 = (double *)v33;
    do
    {
      v6 = *a1++;
      *v5++ = v6;
    }
    while (a1 != a2);
    *(_QWORD *)&v33 = v5;
    v7 = (double *)__p;
    if (__p != v5)
    {
      if ((unint64_t)((char *)v5 - (_BYTE *)__p) < 9)
      {
        *(_QWORD *)&v33 = __p;
        if (*((void **)&v33 + 1) != __p)
        {
          __p = 0;
          v33 = 0uLL;
          if (v7)
            goto LABEL_20;
        }
      }
      else
      {
        v8 = ((char *)v5 - (_BYTE *)__p) >> 3;
        v9 = 0.0;
        v10 = (double *)__p;
        do
        {
          v11 = *v10++;
          v9 = v9 + v11;
        }
        while (v10 != v5);
        while (v7 < v5)
        {
          *v7 = *v7 / v9;
          ++v7;
        }
        std::vector<double>::vector(&v34, v8 - 1);
        v7 = (double *)__p;
        v12 = (double *)(v33 - 8);
        v13 = v34;
        if (__p != (void *)(v33 - 8))
        {
          v14 = (double *)((char *)__p + 8);
          v15 = *(double *)__p;
          *v34 = *(double *)__p;
          if (v7 + 1 != v12)
          {
            v16 = v13 + 1;
            do
            {
              v17 = *v14++;
              v15 = v15 + v17;
              *v16++ = v15;
            }
            while (v14 != v12);
          }
        }
        __p = v13;
        v18 = *((_QWORD *)&v33 + 1);
        v33 = v35;
        v34 = v7;
        *((_QWORD *)&v35 + 1) = v18;
        if (v7)
        {
          *(_QWORD *)&v35 = v7;
LABEL_20:
          operator delete(v7);
        }
      }
    }
  }
  v19 = (char *)__p;
  v20 = (_BYTE *)v33;
  v21 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)random_sample(float *,float *)::gen);
  v22 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)random_sample(float *,float *)::gen);
  if (v20 != v19)
  {
    v23 = (v20 - v19) >> 3;
    do
    {
      v24 = v23 >> 1;
      v25 = (double *)&v19[8 * (v23 >> 1)];
      v27 = *v25;
      v26 = v25 + 1;
      v23 += ~(v23 >> 1);
      if (((double)v21 + (double)v22 * 4294967300.0) * 5.42101086e-20 + 0.0 < v27)
        v23 = v24;
      else
        v19 = (char *)v26;
    }
    while (v23);
    v20 = v19;
  }
  v28 = __p;
  if (__p)
  {
    *(_QWORD *)&v33 = __p;
    operator delete(__p);
  }
  return (int)((v20 - v28) >> 3);
}

void sub_1DE9C1D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoWaveRNNDualSoftmaxProcessor::~EspressoWaveRNNDualSoftmaxProcessor(EspressoWaveRNNDualSoftmaxProcessor *this)
{
  EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(this);
  JUMPOUT(0x1DF0ED014);
}

void *EspressoWaveRNNDualSoftmaxProcessor::process@<X0>(EspressoWaveRNNDualSoftmaxProcessor *this@<X0>, const WaveNetFeature *a2@<X1>, _QWORD *a3@<X8>)
{
  float *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  const void *v10;
  void *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t i;
  int v20;
  __int16 v21;
  float v22;
  int v23;
  __int16 v24;
  float *v25;
  uint64_t v26;
  void *v27;
  int v28;
  void **v29;
  const char *v30;
  void **v31;
  void *exception;
  int v33;
  void **v34;
  const char *status_string;
  void **v36;
  const WaveNetFeature *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  void *__p[2];
  char v44;
  _BYTE v45[32];

  v38 = *((_QWORD *)this + 4);
  if (*((_BYTE *)this + 40))
  {
    v6 = (float *)*((_QWORD *)a2 + 10);
    if (v6 != *((float **)a2 + 11))
      v38 = (unint64_t)(float)((float)v38 / *v6);
  }
  v7 = *((_QWORD *)this + 73);
  v8 = (char *)*((_QWORD *)this + 8);
  v9 = (void *)*((_QWORD *)this + 29);
  v10 = (const void *)*((_QWORD *)this + 50);
  result = std::vector<short>::vector(a3, v38 * 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  v12 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a2 + 2) != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = (float)(unint64_t)(v7 - 1) * 0.5;
    v37 = a2;
    do
    {
      v39 = v14;
      v16 = v12 + 24 * v14;
      v17 = *(_BYTE **)v16;
      v18 = *(_BYTE **)(v16 + 8);
      if (v18 != v17)
        result = memmove(v8, v17, v18 - v17);
      v40 = v13;
      for (i = v38; i; --i)
      {
        *(_DWORD *)&v8[4 * *((_QWORD *)this + 72) - 4] = 0;
        v20 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute.");
        if (v20)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v33 = v44;
          v34 = (void **)__p[0];
          status_string = (const char *)espresso_get_status_string();
          v36 = __p;
          if (v33 < 0)
            v36 = v34;
          StringFormatter::StringFormatter((StringFormatter *)v45, "%s Error: %d, %s", (const char *)v36, v20, status_string);
          MEMORY[0x1DF0EC99C](exception, v45);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v44 < 0)
          operator delete(__p[0]);
        v21 = random_sample(*((float **)this + 84), (float *)(*((_QWORD *)this + 84) + 4 * *((_QWORD *)this + 73)));
        v22 = (float)((float)v21 / v15) + -1.0;
        *(float *)&v8[4 * *((_QWORD *)this + 72) - 4] = v22;
        v23 = espresso_plan_execute_sync();
        std::string::basic_string[abi:ne180100]<0>(v41, "Unable to execute.");
        if (v23)
        {
          v27 = __cxa_allocate_exception(0x10uLL);
          v28 = v42;
          v29 = (void **)v41[0];
          v30 = (const char *)espresso_get_status_string();
          v31 = v41;
          if (v28 < 0)
            v31 = v29;
          StringFormatter::StringFormatter((StringFormatter *)v45, "%s Error: %d, %s", (const char *)v31, v23, v30);
          MEMORY[0x1DF0EC99C](v27, v45);
          __cxa_throw(v27, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v42 < 0)
          operator delete(v41[0]);
        result = (void *)random_sample(*((float **)this + 105), (float *)(*((_QWORD *)this + 105) + 4 * *((_QWORD *)this + 73)));
        v24 = (__int16)result;
        v25 = (float *)&v8[4 * *((_QWORD *)this + 72)];
        *(v25 - 3) = v22;
        *(v25 - 2) = (float)((float)(__int16)result / v15) + -1.0;
        v26 = *((_QWORD *)this + 71);
        if (v26)
          result = memmove(v9, v10, 4 * v26);
        *(_WORD *)(*a3 + v13) = (v24 + (v21 << 8)) ^ 0x8000;
        v13 += 2;
      }
      v14 = v39 + 1;
      v12 = *((_QWORD *)v37 + 1);
      v13 = v40 + 2 * v38;
    }
    while (v39 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v37 + 2) - v12) >> 3));
  }
  return result;
}

void sub_1DE9C20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v35;
  int v36;
  void *v38;

  if (a34 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
        operator delete(a23);
      v38 = *(void **)v34;
      if (*(_QWORD *)v34)
      {
        *(_QWORD *)(v34 + 8) = v38;
        operator delete(v38);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void EspressoWaveRNNModule::~EspressoWaveRNNModule(EspressoWaveRNNModule *this)
{
  *(_QWORD *)this = &off_1EA91FD28;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91FD28;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void EspressoWaveRNNModule::prepare(EspressoWaveRNNProcessor **this)
{
  EspressoWaveRNNProcessor::prepare(this[34]);
}

void EspressoWaveRNNModule::process_data(_QWORD **a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v5;
  std::chrono::steady_clock::time_point v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  BOOL v16;
  EspressoWaveRNNProcessor *v17;
  char *v18;
  unint64_t *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v58;
  uint64_t v59;
  float v60;
  unint64_t v61;
  NSObject *v62;
  float v63;
  const char *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  char *v85;
  std::__shared_weak_count *v86;
  void *__p;
  __int16 *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  void *v92;
  _BYTE buf[24];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v94;
  __int16 v95;
  double v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEBUG, "Espresso WaveRNN Inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "Espresso WaveRNN Inference begin.", v5);
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  *(_QWORD *)&v91 = v9;
  *((_QWORD *)&v91 + 1) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
  v89 = *(_QWORD *)(*(_QWORD *)v12 + 8);
  v90 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!*(_DWORD *)(v9 + 104))
    (*(void (**)(_QWORD *))(*a1[34] + 32))(a1[34]);
  v17 = (EspressoWaveRNNProcessor *)a1[34];
  *((_BYTE *)v17 + 40) = v16;
  EspressoWaveRNNProcessor::safe_process(v17, (const WaveNetFeature *)v9);
  v18 = (char *)operator new(0x90uLL);
  *((_QWORD *)v18 + 1) = 0;
  v19 = (unint64_t *)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1EA933580;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *((_QWORD *)v18 + 17) = 0;
  *((_WORD *)v18 + 12) = 257;
  *((_QWORD *)v18 + 12) = 0;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_QWORD *)v18 + 15) = 0;
  *((_QWORD *)v18 + 16) = 0;
  *((_WORD *)v18 + 68) = 0;
  v85 = v18 + 24;
  v86 = (std::__shared_weak_count *)v18;
  std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((_QWORD *)v18 + 10, (__int16 *)__p, v88, ((char *)v88 - (_BYTE *)__p) >> 1);
  v18[24] = *(_DWORD *)(v9 + 104) == 0;
  v18[25] = *(_BYTE *)(v9 + 1);
  v18[137] = *(_BYTE *)(v9 + 109);
  if (*(_BYTE *)(v9 + 108))
    *((_DWORD *)v18 + 26) = 1;
  v20 = operator new(0x30uLL);
  *(_OWORD *)((char *)v20 + 8) = 0u;
  v20[2] = 0u;
  *(_QWORD *)v20 = &off_1EA932198;
  *((_QWORD *)v20 + 3) = v20 + 2;
  v21 = (uint64_t)v20 + 24;
  v83 = (uint64_t)v20 + 24;
  v84 = (std::__shared_weak_count *)v20;
  Agglomerate::set<std::shared_ptr<WaveNetFeature>>((uint64_t)v20 + 24, &v91);
  *(_QWORD *)buf = &v92;
  v23 = v22[5];
  if (v23)
  {
    *(_QWORD *)buf = &off_1EA923328;
    *(_QWORD *)&buf[8] = v18 + 24;
    *(_QWORD *)&buf[16] = v18;
    do
      v24 = __ldxr(v19);
    while (__stxr(v24 + 1, v19));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v23 + 8, (__int128 *)&buf[8]);
    *(_QWORD *)buf = &off_1EA923328;
    v25 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v21 = v83;
  }
  else
  {
    v28 = (_QWORD *)operator new();
    *v28 = &off_1EA923328;
    v28[1] = v18 + 24;
    v28[2] = v18;
    do
      v29 = __ldxr(v19);
    while (__stxr(v29 + 1, v19));
    v30 = v22[5];
    v22[5] = (uint64_t)v28;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  *(_QWORD *)buf = &v92;
  v32 = v31[5];
  if (v32)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&buf[8] = v89;
    *(_QWORD *)&buf[16] = v90;
    if (v90)
    {
      v33 = (unint64_t *)&v90->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v32 + 8, (__int128 *)&buf[8]);
    *(_QWORD *)buf = &off_1EA923288;
    v35 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v36 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    v38 = (_QWORD *)operator new();
    v40 = v89;
    v39 = v90;
    *v38 = &off_1EA923288;
    v38[1] = v40;
    v38[2] = v39;
    if (v39)
    {
      v41 = (unint64_t *)&v39->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v31[5];
    v31[5] = (uint64_t)v38;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  v44 = *a2;
  v45 = *(_QWORD **)(*a2 + 8);
  {
    v47 = *(std::__shared_weak_count **)(*(_QWORD *)v46 + 16);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v46 + 8);
    *(_QWORD *)&buf[8] = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v83, (__int128 *)buf);
    if (v47)
    {
      v50 = (unint64_t *)&v47->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v44 = *a2;
    v45 = *(_QWORD **)(*a2 + 8);
  }
  {
    Agglomerate::set<std::shared_ptr<std::vector<TTSSynthesizer::Marker>>>(v83, (__int128 *)(*(_QWORD *)v52 + 8));
  }
  v81 = v83;
  v82 = v84;
  if (v84)
  {
    v53 = (unint64_t *)&v84->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[9])(a1, &v81);
  v55 = v82;
  if (v82)
  {
    v56 = (unint64_t *)&v82->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_) / 1000000;
  v59 = (uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 3;
  v60 = (float)(0xAAAAAAAAAAAAAAAELL * v59);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v61 = 0xAAAAAAAAAAAAAAABLL * v59;
  v62 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v63 = v60 / (float)v58;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v65 = a1[34];
    v66 = v65 + 1;
    if (*((char *)v65 + 31) < 0)
      v66 = (_QWORD *)*v66;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v66;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v61;
    *(_WORD *)&buf[22] = 2048;
    v94 = v58;
    v95 = 2048;
    v96 = v63;
    _os_log_impl(&dword_1DE3F6000, v62, OS_LOG_TYPE_DEFAULT, "WaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", buf, 0x2Au);
  }
  v67 = a1[34];
  v68 = v67 + 1;
  if (*((char *)v67 + 31) < 0)
    v68 = (_QWORD *)*v68;
  Diagnostics::log(5, "WaveRNN %s generated %zu frames, latency: %lld ms, RTF: %.2f", v64, v68, v61, v58, v63, v81);
  kdebug_trace();
  v69 = v84;
  if (v84)
  {
    v70 = (unint64_t *)&v84->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v86;
  if (v86)
  {
    v73 = (unint64_t *)&v86->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (__p)
  {
    v88 = (__int16 *)__p;
    operator delete(__p);
  }
  v75 = v90;
  if (v90)
  {
    v76 = (unint64_t *)&v90->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_1DE9C2A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void EspressoWaveRNNModel::~EspressoWaveRNNModel(EspressoWaveRNNModel *this)
{
  espresso_plan_destroy();
  *((_QWORD *)this + 1) = 0;
  espresso_context_destroy();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t EspressoWaveRNNModule::is_ane_model_compiled(uint64_t *a1, __int128 ***a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  std::string *p_p;
  uint64_t has_network;
  NSObject *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string __p;
  uint64_t v18;
  unint64_t v19;
  std::string buf;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)a1))
    return 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)a1;
  __p.__r_.__value_.__r.__words[2] = 0;
  v18 = 0;
  v19 = 0x8000000000000000;
  v4 = *(unsigned __int8 *)a1;
  if (v4 == 1)
  {
    __p.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(a1[1], "ane_model_path");
    v4 = *(unsigned __int8 *)a1;
  }
  else
  {
    if (v4 == 2)
    {
      v5 = a1[1];
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 8);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
      buf.__r_.__value_.__r.__words[2] = 0;
      v21 = 0;
      v22 = 0x8000000000000000;
LABEL_10:
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 8);
      goto LABEL_13;
    }
    v19 = 1;
  }
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
  buf.__r_.__value_.__r.__words[2] = 0;
  v21 = 0;
  v22 = 0x8000000000000000;
  if (v4 == 1)
  {
    buf.__r_.__value_.__l.__size_ = a1[1] + 8;
  }
  else
  {
    if (v4 == 2)
    {
      v5 = a1[1];
      goto LABEL_10;
    }
    v22 = 1;
  }
LABEL_13:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__p, (unsigned __int8 **)&buf))
  {
    return 0;
  }
  SharedObjectPool::get<VoiceConfig>(&v15, *a2);
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a1, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_20:
      if (p_p->__r_.__value_.__s.__data_[0] != 47)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v15 + 40))(&buf, v15, 2003988078, &__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = buf;
      }
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
    goto LABEL_20;
  }
  has_network = espresso_ane_cache_has_network();
  if ((_DWORD)has_network)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = has_network;
      _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", (uint8_t *)&buf, 8u);
    }
    Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v11, has_network);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1DE9C2DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SharedObjectPool::inject<EspressoWaveRNNANEStatus>(_OWORD *a1, uint64_t a2, __int128 *a3)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;

  v6 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v23 = &v22;
  v8 = v7[5];
  if (v8)
  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 1);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(v8 + 16);
    *(_OWORD *)(v8 + 8) = v9;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = (_QWORD *)operator new();
    v18 = *(_QWORD *)a3;
    v17 = *((_QWORD *)a3 + 1);
    *v16 = &off_1EA923428;
    v16[1] = v18;
    v16[2] = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = v7[5];
    v7[5] = (uint64_t)v16;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  *a1 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  std::recursive_mutex::unlock(v6);
}

void sub_1DE9C2F24(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5)
{
  std::string *v9;
  std::string::__raw *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  uint64_t *v14;
  void *v15;
  uint64_t has_network;
  NSObject *v17;
  const char *v18;
  uint64_t context;
  NSObject *v20;
  const char *v21;
  int v22;
  int v23;
  NSObject *v24;
  const char *v25;
  const std::string::value_type *v26;
  const std::string::value_type *v27;
  unint64_t *v28;
  unint64_t v29;
  void *exception;
  int v31;
  void **v32;
  const char *status_string;
  void **v34;
  void *v35;
  int v36;
  void **v37;
  const char *v38;
  void **v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  uint8_t buf[4];
  const std::string::value_type *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v9 = (std::string *)operator new(0x70uLL);
  v10 = (std::string::__raw *)v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA935848;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v9[1].__r_.__value_.__r.__words[0] = 0;
  v13 = v9 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10[2].__words[2] = *(_QWORD *)(a2 + 16);
  }
  v10[3].__words[0] = 0;
  v10[3].__words[1] = 0;
  v14 = (uint64_t *)&v10[1];
  v10[3].__words[2] = 0;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v10[3].__words, a4, (uint64_t)a5);
  v15 = &unk_1F044B000;
  if (v10[3].__words[0] && !*(_BYTE *)v10[3].__words[0])
  {
    LODWORD(__p[0]) = 0;
    has_network = espresso_ane_cache_has_network();
    if ((_DWORD)has_network)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v45) = has_network;
        _os_log_impl(&dword_1DE3F6000, v17, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", buf, 8u);
      }
      Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v18, has_network);
      v15 = &unk_1F044B000;
    }
    else
    {
      *(_BYTE *)v10[3].__words[0] = LODWORD(__p[0]) != 0;
    }
  }
  kdebug_trace();
  context = espresso_create_context();
  *v14 = context;
  if (!context)
  {
    *v14 = espresso_create_context();
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v20 = *((_QWORD *)v15 + 442);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v20, OS_LOG_TYPE_INFO, "ANE is not supported on this device. Fall back to CPU.", buf, 2u);
    }
    Diagnostics::log(6, "ANE is not supported on this device. Fall back to CPU.", v21);
  }
  espresso_create_plan();
  v22 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v22)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v31 = v43;
    v32 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v34 = __p;
    if (v31 < 0)
      v34 = v32;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v34, v22, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v43 < 0)
    operator delete(__p[0]);
  v10[3].__words[2] = espresso_create_context();
  espresso_create_plan();
  v23 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(v40, "Unable to load gumbel network.");
  if (v23)
  {
    v35 = __cxa_allocate_exception(0x10uLL);
    v36 = v41;
    v37 = (void **)v40[0];
    v38 = (const char *)espresso_get_status_string();
    v39 = v40;
    if (v36 < 0)
      v39 = v37;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v39, v23, v38);
    MEMORY[0x1DF0EC99C](v35, buf);
    __cxa_throw(v35, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v41 < 0)
    operator delete(v40[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v24 = *((_QWORD *)v15 + 442);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v26 = (const std::string::value_type *)a2;
    else
      v26 = *(const std::string::value_type **)a2;
    *(_DWORD *)buf = 136315138;
    v45 = v26;
    _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_INFO, "Successfully loaded WaveRNN FUSED ANE model from path: %s", buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0)
    v27 = (const std::string::value_type *)a2;
  else
    v27 = *(const std::string::value_type **)a2;
  Diagnostics::log(6, "Successfully loaded WaveRNN FUSED ANE model from path: %s", v25, v27);
  if (a5)
  {
    v28 = (unint64_t *)&a5->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  *a1 = v14;
  a1[1] = (uint64_t *)v10;
}

void sub_1DE9C3448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  EspressoWaveRNNModel *v33;
  uint64_t v34;
  void *v36;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  EspressoWaveRNNModel::~EspressoWaveRNNModel(v33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v36);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>(uint64_t **a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  std::string *v8;
  std::string::__raw *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t has_network;
  NSObject *v15;
  const char *v16;
  uint64_t context;
  NSObject *v18;
  const char *v19;
  int v20;
  NSObject *v21;
  const char *v22;
  const std::string::value_type *v23;
  const std::string::value_type *v24;
  unint64_t *v25;
  unint64_t v26;
  void *exception;
  int v28;
  void **v29;
  const char *status_string;
  void **v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  const std::string::value_type *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = (std::string *)operator new(0x58uLL);
  v9 = (std::string::__raw *)v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA934460;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v8[1].__r_.__value_.__r.__words[0] = 0;
  v12 = v8 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v9[2].__words[2] = *(_QWORD *)(a2 + 16);
  }
  v13 = (uint64_t *)&v9[1];
  v9[3].__words[0] = 0;
  v9[3].__words[1] = 0;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v9[3].__words, a3, (uint64_t)a4);
  if (v9[3].__words[0] && !*(_BYTE *)v9[3].__words[0])
  {
    LODWORD(__p[0]) = 0;
    has_network = espresso_ane_cache_has_network();
    if ((_DWORD)has_network)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = has_network;
        _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_ERROR, "Unable to query ANE model compilation state, err: %d", buf, 8u);
      }
      Diagnostics::log(3, "Unable to query ANE model compilation state, err: %d", v16, has_network);
    }
    else
    {
      *(_BYTE *)v9[3].__words[0] = LODWORD(__p[0]) != 0;
    }
  }
  kdebug_trace();
  context = espresso_create_context();
  *v13 = context;
  if (!context)
  {
    *v13 = espresso_create_context();
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v18, OS_LOG_TYPE_INFO, "ANE is not supported on this device. Fall back to CPU.", buf, 2u);
    }
    Diagnostics::log(6, "ANE is not supported on this device. Fall back to CPU.", v19);
  }
  espresso_create_plan();
  v20 = espresso_plan_add_network();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to load network.");
  if (v20)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v28 = v33;
    v29 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v31 = __p;
    if (v28 < 0)
      v31 = v29;
    StringFormatter::StringFormatter((StringFormatter *)buf, "%s Error: %d, %s", (const char *)v31, v20, status_string);
    MEMORY[0x1DF0EC99C](exception, buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v33 < 0)
    operator delete(__p[0]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v23 = (const std::string::value_type *)a2;
    else
      v23 = *(const std::string::value_type **)a2;
    *(_DWORD *)buf = 136315138;
    v35 = v23;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "Successfully loaded WaveRNN ANE model from path: %s", buf, 0xCu);
  }
  if (*(char *)(a2 + 23) >= 0)
    v24 = (const std::string::value_type *)a2;
  else
    v24 = *(const std::string::value_type **)a2;
  Diagnostics::log(6, "Successfully loaded WaveRNN ANE model from path: %s", v22, v24);
  if (a4)
  {
    v25 = (unint64_t *)&a4->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = v13;
  a1[1] = (uint64_t *)v9;
}

void sub_1DE9C3944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  EspressoWaveRNNModel *v26;
  uint64_t v27;
  void *v29;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
  EspressoWaveRNNModel::~EspressoWaveRNNModel(v26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWaveRNNCPUModel>::__on_zero_shared(uint64_t a1)
{
  EspressoWaveRNNModel::~EspressoWaveRNNModel((EspressoWaveRNNModel *)(a1 + 24));
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEModel>::__on_zero_shared(uint64_t a1)
{
  EspressoWaveRNNModel *v1;

  v1 = (EspressoWaveRNNModel *)(a1 + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 72);
  EspressoWaveRNNModel::~EspressoWaveRNNModel(v1);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEModel>::__on_zero_shared(uint64_t a1)
{
  espresso_plan_destroy();
  espresso_context_destroy();
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 72);
  EspressoWaveRNNModel::~EspressoWaveRNNModel((EspressoWaveRNNModel *)(a1 + 24));
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<EspressoWaveRNNANEStatus>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923428;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<EspressoWaveRNNANEStatus>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923428;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNANEStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void EspressoWaveRNNPersistentModule::~EspressoWaveRNNPersistentModule(void **this)
{
  *this = off_1EA921D18;
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = off_1EA921D18;
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *exception;
  int v23;
  const char *v24;
  const char *status_string;
  const char *v26;
  void *v27;
  int v28;
  const char *v29;
  const char *v30;
  const char *v31;
  void *v32;
  int v33;
  void **v34;
  const char *v35;
  void **v36;
  void *v37;
  int v38;
  void **v39;
  const char *v40;
  void **v41;
  void *v42;
  int v43;
  void **v44;
  const char *v45;
  void **v46;
  void *v47;
  int v48;
  void **v49;
  const char *v50;
  void **v51;
  void *v52;
  int v53;
  void **v54;
  const char *v55;
  void **v56;
  void *v57;
  int v58;
  void **v59;
  const char *v60;
  void **v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *__p[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  _BYTE v78[24];

  *(_QWORD *)a1 = &off_1EA9209C0;
  v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Stub");
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  MEMORY[0x1DF0ECD80](a1 + 600);
  *(_BYTE *)(a1 + 664) = 0;
  *(_QWORD *)a1 = &off_1EA9223B0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  MEMORY[0x1DF0ECA80](v4, "ANE");
  v5 = *a2;
  v6 = *a2 + 8;
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(std::__shared_weak_count **)(v5 + 56);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 1360), v7, (uint64_t)v8);
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 1360), v7, 0);
  }
  espresso_network_declare_output();
  espresso_network_declare_output();
  espresso_network_declare_output();
  v13 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v76, "Unable to build ANE plan.");
  if (v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = v77;
    v24 = (const char *)v76[0];
    status_string = (const char *)espresso_get_status_string();
    v26 = (const char *)v76;
    if (v23 < 0)
      v26 = v24;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", v26, v13, status_string);
    MEMORY[0x1DF0EC99C](exception, v78);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v77 < 0)
    operator delete(v76[0]);
  v14 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v74, "Unable to bind hidden state.");
  if (v14)
  {
    v27 = __cxa_allocate_exception(0x10uLL);
    v28 = v75;
    v29 = (const char *)v74[0];
    v30 = (const char *)espresso_get_status_string();
    v31 = (const char *)v74;
    if (v28 < 0)
      v31 = v29;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", v31, v14, v30);
    MEMORY[0x1DF0EC99C](v27, v78);
    __cxa_throw(v27, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v75 < 0)
    operator delete(v74[0]);
  v15 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind ane coarse input.");
  if (v15)
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    v33 = v73;
    v34 = (void **)__p[0];
    v35 = (const char *)espresso_get_status_string();
    v36 = __p;
    if (v33 < 0)
      v36 = v34;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v36, v15, v35);
    MEMORY[0x1DF0EC99C](v32, v78);
    __cxa_throw(v32, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v73 < 0)
    operator delete(__p[0]);
  v16 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v70, "Unable to bind ane fine input.");
  if (v16)
  {
    v37 = __cxa_allocate_exception(0x10uLL);
    v38 = v71;
    v39 = (void **)v70[0];
    v40 = (const char *)espresso_get_status_string();
    v41 = v70;
    if (v38 < 0)
      v41 = v39;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v41, v16, v40);
    MEMORY[0x1DF0EC99C](v37, v78);
    __cxa_throw(v37, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v71 < 0)
    operator delete(v70[0]);
  v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v68, "Unable to bind input.");
  if (v17)
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    v43 = v69;
    v44 = (void **)v68[0];
    v45 = (const char *)espresso_get_status_string();
    v46 = v68;
    if (v43 < 0)
      v46 = v44;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v46, v17, v45);
    MEMORY[0x1DF0EC99C](v42, v78);
    __cxa_throw(v42, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v69 < 0)
    operator delete(v68[0]);
  v18 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v66, "Unable to bind output_new_hidden.");
  if (v18)
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    v48 = v67;
    v49 = (void **)v66[0];
    v50 = (const char *)espresso_get_status_string();
    v51 = v66;
    if (v48 < 0)
      v51 = v49;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v51, v18, v50);
    MEMORY[0x1DF0EC99C](v47, v78);
    __cxa_throw(v47, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v67 < 0)
    operator delete(v66[0]);
  v19 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v64, "Unable to bind coarse bit scaled.");
  if (v19)
  {
    v52 = __cxa_allocate_exception(0x10uLL);
    v53 = v65;
    v54 = (void **)v64[0];
    v55 = (const char *)espresso_get_status_string();
    v56 = v64;
    if (v53 < 0)
      v56 = v54;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v56, v19, v55);
    MEMORY[0x1DF0EC99C](v52, v78);
    __cxa_throw(v52, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v65 < 0)
    operator delete(v64[0]);
  v20 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v62, "Unable to bind coarse bit scaled.");
  if (v20)
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    v58 = v63;
    v59 = (void **)v62[0];
    v60 = (const char *)espresso_get_status_string();
    v61 = v62;
    if (v58 < 0)
      v61 = v59;
    StringFormatter::StringFormatter((StringFormatter *)v78, "%s Error: %d, %s", (const char *)v61, v20, v60);
    MEMORY[0x1DF0EC99C](v57, v78);
    __cxa_throw(v57, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v63 < 0)
    operator delete(v62[0]);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 1112);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a1 + 1280);
  **(_BYTE **)(a1 + 1360) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_1DE9C43B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  EspressoWaveRNNProcessor *v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;

  if (*(char *)(v51 - 65) < 0)
  {
    operator delete(*(void **)(v51 - 88));
    if ((v50 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0)
        operator delete(__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v48);
      EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(v47);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

uint64_t EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  void *exception;
  int v28;
  const char *v29;
  const char *status_string;
  const char *v31;
  void *v32;
  int v33;
  const char *v34;
  const char *v35;
  const char *v36;
  void *v37;
  int v38;
  const char *v39;
  const char *v40;
  const char *v41;
  void *v42;
  int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  void *v47;
  int v48;
  const char *v49;
  const char *v50;
  const char *v51;
  void *v52;
  int v53;
  void **v54;
  const char *v55;
  void **v56;
  void *v57;
  int v58;
  void **v59;
  const char *v60;
  void **v61;
  void *v62;
  int v63;
  void **v64;
  const char *v65;
  void **v66;
  void *v67;
  int v68;
  void **v69;
  const char *v70;
  void **v71;
  void *v72;
  int v73;
  void **v74;
  const char *v75;
  void **v76;
  void *v77;
  int v78;
  void **v79;
  const char *v80;
  void **v81;
  void *v82;
  int v83;
  void **v84;
  const char *v85;
  void **v86;
  void *v87;
  int v88;
  void **v89;
  const char *v90;
  void **v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *__p[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  void *v116[2];
  char v117;
  _BYTE v118[24];

  *(_QWORD *)a1 = &off_1EA9209C0;
  v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Stub");
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  MEMORY[0x1DF0ECD80](a1 + 600);
  *(_BYTE *)(a1 + 664) = 0;
  *(_QWORD *)a1 = &off_1EA9224D8;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  MEMORY[0x1DF0ECA80](v4, "FusedANE");
  v5 = *a2;
  v6 = *a2 + 8;
  *(_QWORD *)(a1 + 48) = *a2;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 680) = v5 + 64;
  *(_QWORD *)(a1 + 688) = v5 + 72;
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(std::__shared_weak_count **)(v5 + 56);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 2056), v7, (uint64_t)v8);
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 2056), v7, 0);
  }
  espresso_network_declare_output();
  espresso_network_declare_output();
  espresso_network_declare_output();
  v13 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v116, "Unable to build ANE plan.");
  if (v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v28 = v117;
    v29 = (const char *)v116[0];
    status_string = (const char *)espresso_get_status_string();
    v31 = (const char *)v116;
    if (v28 < 0)
      v31 = v29;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", v31, v13, status_string);
    MEMORY[0x1DF0EC99C](exception, v118);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v117 < 0)
    operator delete(v116[0]);
  v14 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v114, "Unable to bind hidden state_odd.");
  if (v14)
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    v33 = v115;
    v34 = (const char *)v114[0];
    v35 = (const char *)espresso_get_status_string();
    v36 = (const char *)v114;
    if (v33 < 0)
      v36 = v34;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", v36, v14, v35);
    MEMORY[0x1DF0EC99C](v32, v118);
    __cxa_throw(v32, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v115 < 0)
    operator delete(v114[0]);
  v15 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v112, "Unable to bind ane fine input.");
  if (v15)
  {
    v37 = __cxa_allocate_exception(0x10uLL);
    v38 = v113;
    v39 = (const char *)v112[0];
    v40 = (const char *)espresso_get_status_string();
    v41 = (const char *)v112;
    if (v38 < 0)
      v41 = v39;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", v41, v15, v40);
    MEMORY[0x1DF0EC99C](v37, v118);
    __cxa_throw(v37, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v113 < 0)
    operator delete(v112[0]);
  v16 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v110, "Unable to bind ane coarse input.");
  if (v16)
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    v43 = v111;
    v44 = (const char *)v110[0];
    v45 = (const char *)espresso_get_status_string();
    v46 = (const char *)v110;
    if (v43 < 0)
      v46 = v44;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", v46, v16, v45);
    MEMORY[0x1DF0EC99C](v42, v118);
    __cxa_throw(v42, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v111 < 0)
    operator delete(v110[0]);
  v17 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v108, "Unable to bind ane x2t_1 input.");
  if (v17)
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    v48 = v109;
    v49 = (const char *)v108[0];
    v50 = (const char *)espresso_get_status_string();
    v51 = (const char *)v108;
    if (v48 < 0)
      v51 = v49;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", v51, v17, v50);
    MEMORY[0x1DF0EC99C](v47, v118);
    __cxa_throw(v47, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v109 < 0)
    operator delete(v108[0]);
  v18 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind ane x2t_3 input.");
  if (v18)
  {
    v52 = __cxa_allocate_exception(0x10uLL);
    v53 = v107;
    v54 = (void **)__p[0];
    v55 = (const char *)espresso_get_status_string();
    v56 = __p;
    if (v53 < 0)
      v56 = v54;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v56, v18, v55);
    MEMORY[0x1DF0EC99C](v52, v118);
    __cxa_throw(v52, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v107 < 0)
    operator delete(__p[0]);
  v19 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v104, "Unable to bind input.");
  if (v19)
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    v58 = v105;
    v59 = (void **)v104[0];
    v60 = (const char *)espresso_get_status_string();
    v61 = v104;
    if (v58 < 0)
      v61 = v59;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v61, v19, v60);
    MEMORY[0x1DF0EC99C](v57, v118);
    __cxa_throw(v57, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v105 < 0)
    operator delete(v104[0]);
  v20 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v102, "Unable to bind O2__rand_v.");
  if (v20)
  {
    v62 = __cxa_allocate_exception(0x10uLL);
    v63 = v103;
    v64 = (void **)v102[0];
    v65 = (const char *)espresso_get_status_string();
    v66 = v102;
    if (v63 < 0)
      v66 = v64;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v66, v20, v65);
    MEMORY[0x1DF0EC99C](v62, v118);
    __cxa_throw(v62, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v103 < 0)
    operator delete(v102[0]);
  v21 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v100, "Unable to bind output_new_hidden_even.");
  if (v21)
  {
    v67 = __cxa_allocate_exception(0x10uLL);
    v68 = v101;
    v69 = (void **)v100[0];
    v70 = (const char *)espresso_get_status_string();
    v71 = v100;
    if (v68 < 0)
      v71 = v69;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v71, v21, v70);
    MEMORY[0x1DF0EC99C](v67, v118);
    __cxa_throw(v67, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v101 < 0)
    operator delete(v100[0]);
  v22 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v98, "Unable to bind coarse bit scaled.");
  if (v22)
  {
    v72 = __cxa_allocate_exception(0x10uLL);
    v73 = v99;
    v74 = (void **)v98[0];
    v75 = (const char *)espresso_get_status_string();
    v76 = v98;
    if (v73 < 0)
      v76 = v74;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v76, v22, v75);
    MEMORY[0x1DF0EC99C](v72, v118);
    __cxa_throw(v72, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v99 < 0)
    operator delete(v98[0]);
  v23 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v96, "Unable to bind fine bit scaled.");
  if (v23)
  {
    v77 = __cxa_allocate_exception(0x10uLL);
    v78 = v97;
    v79 = (void **)v96[0];
    v80 = (const char *)espresso_get_status_string();
    v81 = v96;
    if (v78 < 0)
      v81 = v79;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v81, v23, v80);
    MEMORY[0x1DF0EC99C](v77, v118);
    __cxa_throw(v77, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v97 < 0)
    operator delete(v96[0]);
  espresso_network_declare_output();
  v24 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(v94, "Unable to build gumbel CPU plan.");
  if (v24)
  {
    v82 = __cxa_allocate_exception(0x10uLL);
    v83 = v95;
    v84 = (void **)v94[0];
    v85 = (const char *)espresso_get_status_string();
    v86 = v94;
    if (v83 < 0)
      v86 = v84;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v86, v24, v85);
    MEMORY[0x1DF0EC99C](v82, v118);
    __cxa_throw(v82, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v95 < 0)
    operator delete(v94[0]);
  v25 = espresso_network_bind_buffer();
  std::string::basic_string[abi:ne180100]<0>(v92, "Unable to bind fine bit scaled.");
  if (v25)
  {
    v87 = __cxa_allocate_exception(0x10uLL);
    v88 = v93;
    v89 = (void **)v92[0];
    v90 = (const char *)espresso_get_status_string();
    v91 = v92;
    if (v88 < 0)
      v91 = v89;
    StringFormatter::StringFormatter((StringFormatter *)v118, "%s Error: %d, %s", (const char *)v91, v25, v90);
    MEMORY[0x1DF0EC99C](v87, v118);
    __cxa_throw(v87, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v93 < 0)
    operator delete(v92[0]);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 1952);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a1 + 1800);
  **(_BYTE **)(a1 + 2056) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_1DE9C5104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  EspressoWaveRNNProcessor *v60;
  uint64_t v61;
  void *v62;
  int v63;
  uint64_t v64;

  if (*(char *)(v64 - 65) < 0)
  {
    operator delete(*(void **)(v64 - 88));
    if ((v63 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v61);
      EspressoWaveRNNProcessor::~EspressoWaveRNNProcessor(v60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v63)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v62);
  goto LABEL_6;
}

BOOL EspressoWaveRNNModule::has_ota_ane_model(unsigned __int8 *a1)
{
  int v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = a1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0x8000000000000000;
  v2 = *a1;
  if (v2 == 1)
  {
    v11 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*((_QWORD *)a1 + 1), "ane_model_path");
    v2 = *a1;
  }
  else
  {
    if (v2 == 2)
    {
      v3 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
      v12 = v3;
      v5 = a1;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0x8000000000000000;
      goto LABEL_9;
    }
    v14 = 1;
  }
  v5 = a1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0x8000000000000000;
  if (v2 == 1)
  {
    v6 = *((_QWORD *)a1 + 1) + 8;
    return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
  }
  if (v2 != 2)
  {
    v9 = 1;
    return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
  }
  v3 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
LABEL_9:
  v7 = v3;
  return !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v10, &v5);
}

void EspressoWaveRNNModule::compile_ane_model(unsigned __int8 *a1, __int128 **a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  std::string *p_buf;
  NSObject *v9;
  const char *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  int64_t size;
  char *v17;
  std::string *v18;
  char *v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  const char *v44;
  std::string *v45;
  std::string *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::string __p;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::string buf;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::string v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  SharedObjectPool::get<VoiceConfig>(&v60, a2);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a1;
  buf.__r_.__value_.__r.__words[2] = 0;
  v58 = 0;
  v59 = 0x8000000000000000;
  v3 = *a1;
  if (v3 == 1)
  {
    buf.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [21]>(*((_QWORD *)a1 + 1), "ane_model_path");
    v3 = *a1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *((_QWORD *)a1 + 1);
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 8);
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = (unint64_t)a1;
      v62.__r_.__value_.__r.__words[2] = 0;
      v63 = 0;
      v64 = 0x8000000000000000;
LABEL_9:
      v62.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 8);
      goto LABEL_12;
    }
    v59 = 1;
  }
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v62.__r_.__value_.__r.__words[2] = 0;
  v63 = 0;
  v64 = 0x8000000000000000;
  if (v3 == 1)
  {
    v62.__r_.__value_.__l.__size_ = *((_QWORD *)a1 + 1) + 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *((_QWORD *)a1 + 1);
      goto LABEL_9;
    }
    v64 = 1;
  }
LABEL_12:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&v62))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEFAULT, "ane_model_path not found, skip OTA ANE compiling", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "ane_model_path not found, skip OTA ANE compiling", v6);
    goto LABEL_102;
  }
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a1, "ane_model_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v7, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (buf.__r_.__value_.__l.__size_)
    {
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_23:
      if (p_buf->__r_.__value_.__s.__data_[0] != 47)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v60 + 40))(&v62, v60, 2003988078, &buf, 0);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        buf = v62;
      }
    }
  }
  else if (*((_BYTE *)&buf.__r_.__value_.__s + 23))
  {
    p_buf = &buf;
    goto LABEL_23;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "Start compiling ANE model '%s'", (uint8_t *)&v62, 0xCu);
  }
  v12 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &buf;
  else
    v13 = (std::string *)buf.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Start compiling ANE model '%s'", v10, v13);
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934620;
  LOBYTE(v14[1].__vftable) = 0;
  v15 = (uint64_t)&v14[1];
  v55 = v14 + 1;
  v56 = v14;
  size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = buf.__r_.__value_.__l.__size_;
    v12 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (size >= 5)
  {
    v17 = (char *)v12 + size;
    v18 = v12;
    do
    {
      v19 = (char *)memchr(v18, 102, size - 4);
      if (!v19)
        break;
      if (*(_DWORD *)v19 == 1702065510 && v19[4] == 100)
      {
        if (v19 == v17 || v19 - (char *)v12 == -1)
          break;
        std::string::basic_string[abi:ne180100]<0>(&__p, "gumbel_model_path");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("load_random_cpu.espresso.net", (char *)a1, (const void **)&__p.__r_.__value_.__l.__data_, &v62);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v60 + 40))(&__p, v60, 2003988078, &v62, 0);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        v62 = __p;
        std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEModel,std::allocator<EspressoWaveRNNFusedSubscalingANEModel>,std::string &,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&v53, (uint64_t)&buf, (uint64_t)&v62, v15, v14);
        v21 = (std::__shared_weak_count *)operator new(0x830uLL);
        v21->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935998;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
        if (*((_QWORD *)&v53 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor((uint64_t)&v21[1], (uint64_t *)&__p);
        if (v23)
        {
          v26 = (unint64_t *)&v23->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
        if (*((_QWORD *)&v53 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        goto LABEL_87;
      }
      v18 = (std::string *)(v19 + 1);
      size = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 5);
  }
  std::allocate_shared[abi:ne180100]<EspressoWaveRNNANEModel,std::allocator<EspressoWaveRNNANEModel>,std::string &,std::shared_ptr<EspressoWaveRNNANEStatus> &,void>((uint64_t **)&__p, (uint64_t)&buf, v15, v14);
  v32 = (std::__shared_weak_count *)operator new(0x578uLL);
  v32->__shared_owners_ = 0;
  v33 = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356F8;
  v34 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor((uint64_t)&v32[1], (uint64_t *)&v62);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  do
    v39 = __ldaxr(v33);
  while (__stlxr(v39 - 1, v33));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  v40 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_87:
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v43 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v45 = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
    _os_log_impl(&dword_1DE3F6000, v43, OS_LOG_TYPE_DEFAULT, "Finished compiling ANE model '%s'", (uint8_t *)&v62, 0xCu);
  }
  v46 = &buf;
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = (std::string *)buf.__r_.__value_.__r.__words[0];
  Diagnostics::log(5, "Finished compiling ANE model '%s'", v44, v46);
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_102:
  v50 = v61;
  if (v61)
  {
    v51 = (unint64_t *)&v61->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_1DE9C5CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  void *v38;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v38);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a36 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1DE9C5D70()
{
  JUMPOUT(0x1DE9C5D68);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSubscalingANEProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscalingANEProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t EspressoWaveRNNModule::EspressoWaveRNNModule(uint64_t a1, char *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int64_t size;
  std::string *v30;
  char *v31;
  int64_t v32;
  std::string *v33;
  char *v34;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  std::string *v42;
  char *v43;
  std::string *v44;
  char *v45;
  int64_t v47;
  std::string *v48;
  char *v49;
  uint64_t v51;
  NSObject *v52;
  const char *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count_vtbl *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  NeuralTTSUtils *v63;
  const char *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int64_t v88;
  std::string *v89;
  char *v90;
  NSObject *v92;
  const char *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  NeuralTTSUtils *v103;
  const char *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  int64_t v124;
  std::string *v125;
  char *v126;
  NSObject *v127;
  const char *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t *v136;
  unint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  std::string *v153;
  char *v154;
  void *v155;
  std::string *v156;
  NSObject *v157;
  const char *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  NSObject *v182;
  const char *v183;
  std::string::size_type v184;
  NSObject *v185;
  const char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  NSObject *v191;
  const char *v192;
  _QWORD *v193;
  unint64_t *v194;
  NSObject *v195;
  const char *v196;
  __int128 *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  NSObject *v203;
  const char *v204;
  std::__shared_weak_count *v205;
  __int128 *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  _QWORD *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  void *v230;
  int v231;
  const char *v232;
  const char *v233;
  const char *v234;
  void *v235;
  int v236;
  std::string *v237;
  const char *v238;
  const char *v239;
  void *v240;
  int v241;
  const char *v242;
  const char *v243;
  const char *v244;
  void *v245;
  int v246;
  const char *v247;
  const char *v248;
  const char *v249;
  void *v250;
  int v251;
  const char *v252;
  const char *v253;
  const char *v254;
  void *v255;
  int v256;
  void **v257;
  const char *v258;
  void **v259;
  void *v260;
  int v261;
  const char *v262;
  const char *v263;
  const char *v264;
  void *v265;
  int v266;
  std::string *v267;
  const char *v268;
  const char *v269;
  void *v270;
  int v271;
  const char *v272;
  const char *v273;
  const char *v274;
  void *v275;
  int v276;
  const char *v277;
  const char *v278;
  const char *v279;
  void *v280;
  int v281;
  const char *v282;
  const char *v283;
  const char *v284;
  void *v285;
  int v286;
  void **v287;
  const char *v288;
  void **v289;
  void *v290;
  int v291;
  void **v292;
  const char *v293;
  void **v294;
  void *v295;
  int v296;
  void **v297;
  const char *v298;
  void **v299;
  void *v300;
  int v301;
  void **v302;
  const char *v303;
  void **v304;
  void *v305;
  int v306;
  void **v307;
  const char *v308;
  void **v309;
  void *v310;
  int v311;
  void **v312;
  const char *v313;
  void **v314;
  void *v315;
  int v316;
  const char *v317;
  const char *v318;
  const char *v319;
  void *v320;
  int v321;
  std::string *v322;
  const char *v323;
  const char *v324;
  void *v325;
  int v326;
  const char *v327;
  const char *v328;
  const char *v329;
  void *v330;
  int v331;
  const char *v332;
  const char *v333;
  const char *v334;
  void *v335;
  int v336;
  const char *v337;
  const char *v338;
  const char *v339;
  void *v340;
  int v341;
  void **v342;
  const char *v343;
  void **v344;
  void *v345;
  int v346;
  void **v347;
  const char *v348;
  void **v349;
  void *exception;
  int v351;
  const char *v352;
  const char *status_string;
  const char *v354;
  void *v355;
  int v356;
  std::string *v357;
  const char *v358;
  const char *v359;
  void *v360;
  int v361;
  const char *v362;
  const char *v363;
  const char *v364;
  void *v365;
  int v366;
  const char *v367;
  const char *v368;
  const char *v369;
  void *v370;
  int v371;
  const char *v372;
  const char *v373;
  const char *v374;
  void *v375;
  int v376;
  void **v377;
  const char *v378;
  void **v379;
  void *v380;
  int v381;
  void **v382;
  const char *v383;
  void **v384;
  void *v385;
  int v386;
  void **v387;
  const char *v388;
  void **v389;
  void *v390;
  int v391;
  void **v392;
  const char *v393;
  void **v394;
  void *v395;
  int v396;
  void **v397;
  const char *v398;
  void **v399;
  void *v400;
  int v401;
  void **v402;
  const char *v403;
  void **v404;
  void *v405;
  int v406;
  void **v407;
  const char *v408;
  void **v409;
  void *v410;
  int v411;
  void **v412;
  const char *v413;
  void **v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  __int128 v417;
  std::string v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  uint64_t v423[2];
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  void *v426[2];
  char v427;
  void *v428[2];
  char v429;
  void *v430[2];
  char v431;
  void *v432;
  std::__shared_weak_count *v433;
  char v434;
  void *v435[2];
  char v436;
  void *v437[2];
  char v438;
  void *v439[2];
  char v440;
  void *__p[2];
  char v442;
  void *v443[2];
  char v444;
  void *v445[2];
  char v446;
  void *v447[2];
  char v448;
  std::string *v449;
  std::__shared_weak_count *v450;
  char v451;
  __int128 v452;
  char v453;
  std::string v454;
  uint64_t v455;

  v455 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)a3[1];
  v423[0] = *a3;
  v423[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v423);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1EA91FD28;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v415 = a1 + 272;
  if (*(char *)(a1 + 207) < 0)
    std::string::__init_copy_ctor_external(&v454, *(const std::string::value_type **)(a1 + 184), *(_QWORD *)(a1 + 192));
  else
    v454 = *(std::string *)(a1 + 184);
  v12 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  v419 = *a3;
  v420 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v12 + 24);
  if (v15 && (v16 = std::__shared_weak_count::lock(v15), (*((_QWORD *)&v452 + 1) = v16) != 0))
  {
    v17 = v16;
    v18 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)&v452 = v18;
    if (v18
      && (v19 = v18 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v18 + 8), (unsigned __int8 *)&v454)))
    {
      v449 = &v454;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (unsigned __int8 *)&v454, (__int128 **)&v449);
      v21 = (std::__shared_weak_count *)*((_QWORD *)v20 + 6);
      v421 = *((_QWORD *)v20 + 5);
      v422 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
    }
    else
    {
      v421 = 0;
      v422 = 0;
    }
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    v421 = 0;
    v422 = 0;
  }
  if (v420)
  {
    v26 = &v420->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
      std::__shared_weak_count::__release_weak(v420);
    }
  }
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  v28 = v421;
  if (*(char *)(v421 + 335) < 0)
    std::string::__init_copy_ctor_external(&v418, *(const std::string::value_type **)(v421 + 312), *(_QWORD *)(v421 + 320));
  else
    v418 = *(std::string *)(v421 + 312);
  if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v418.__r_.__value_.__r.__words[2]);
  else
    size = v418.__r_.__value_.__l.__size_;
  if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v418;
  else
    v30 = (std::string *)v418.__r_.__value_.__r.__words[0];
  v31 = (char *)v30 + size;
  if (size < 6)
    goto LABEL_157;
  v32 = size;
  v33 = v30;
  while (1)
  {
    v34 = (char *)memchr(v33, 117, v32 - 5);
    if (!v34)
      goto LABEL_75;
    if (*(_DWORD *)v34 == 1869770357 && *((_WORD *)v34 + 2) == 27756)
      break;
    v33 = (std::string *)(v34 + 1);
    v32 = v31 - (char *)v33;
    if (v31 - (char *)v33 < 6)
      goto LABEL_75;
  }
  if (v34 == v31 || v34 - (char *)v30 == -1)
  {
LABEL_75:
    if (size >= 14)
    {
      v47 = size;
      v48 = v30;
      while (1)
      {
        v49 = (char *)memchr(v48, 102, v47 - 13);
        if (!v49)
          goto LABEL_157;
        if (*(_QWORD *)v49 == 0x75735F6465737566 && *(_QWORD *)(v49 + 6) == 0x656C616373627573)
          break;
        v48 = (std::string *)(v49 + 1);
        v47 = v31 - (char *)v48;
        if (v31 - (char *)v48 < 14)
          goto LABEL_157;
      }
      if (v49 != v31 && v49 - (char *)v30 != -1)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v51 = a1 + 272;
        v52 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v454.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v52, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with AMX fused subscale softmax wavernn model", (uint8_t *)&v454, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with AMX fused subscale softmax wavernn model", v53);
        v55 = *(std::__shared_weak_count_vtbl **)(v28 + 296);
        v54 = *(std::__shared_weak_count **)(v28 + 304);
        v416 = v54;
        if (v54)
        {
          v56 = (unint64_t *)&v54->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v58 = (std::__shared_weak_count *)operator new(0x5B0uLL);
        v59 = v58;
        v58->__shared_owners_ = 0;
        v60 = (unint64_t *)&v58->__shared_owners_;
        v58->__shared_weak_owners_ = 0;
        v58->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935928;
        v424 = v55;
        v425 = v54;
        if (v54)
        {
          v61 = (unint64_t *)&v54->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v58[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9209C0;
        std::string::basic_string[abi:ne180100]<0>(&v58[1].__shared_owners_, "Stub");
        LOBYTE(v59[2].__shared_weak_owners_) = 0;
        LODWORD(v59[25].__shared_weak_owners_) = 0;
        v59[3].__vftable = 0;
        v59[3].__shared_owners_ = 0;
        v63 = (NeuralTTSUtils *)MEMORY[0x1DF0ECD80](&v59[26]);
        v59[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA922480;
        LOBYTE(v59[28].__shared_weak_owners_) = 0;
        *(_OWORD *)&v59[57].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v59[58].__shared_owners_ = 0u;
        v59[59].std::__shared_count = 0u;
        *(_OWORD *)&v59[59].__shared_weak_owners_ = 0u;
        v59[60].__shared_owners_ = 0;
        if (NeuralTTSUtils::is_amx_available(v63))
          v64 = "AMX";
        else
          v64 = "CPU";
        MEMORY[0x1DF0ECA80](&v59[1].__shared_owners_, v64);
        v59[3].__vftable = v55;
        v59[3].__shared_owners_ = (uint64_t)&v55->~__shared_weak_count_0;
        v59[57].__vftable = (std::__shared_weak_count_vtbl *)0x200000002;
        LODWORD(v59[57].__shared_owners_) = 4;
        v65 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(&v452, &byte_1DEBD87CE);
        if (v65)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v351 = v453;
          v352 = (const char *)v452;
          status_string = (const char *)espresso_get_status_string();
          v354 = (const char *)&v452;
          if (v351 < 0)
            v354 = v352;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v354, v65, status_string);
          MEMORY[0x1DF0EC99C](exception, &v454);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v453 < 0)
          operator delete((void *)v452);
        v66 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(&v449, &byte_1DEBD87CE);
        if (v66)
        {
          v355 = __cxa_allocate_exception(0x10uLL);
          v356 = v451;
          v357 = v449;
          v358 = (const char *)espresso_get_status_string();
          v359 = (const char *)&v449;
          if (v356 < 0)
            v359 = (const char *)v357;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v359, v66, v358);
          MEMORY[0x1DF0EC99C](v355, &v454);
          __cxa_throw(v355, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v451 < 0)
          operator delete(v449);
        v67 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v447, &byte_1DEBD87CE);
        if (v67)
        {
          v360 = __cxa_allocate_exception(0x10uLL);
          v361 = v448;
          v362 = (const char *)v447[0];
          v363 = (const char *)espresso_get_status_string();
          v364 = (const char *)v447;
          if (v361 < 0)
            v364 = v362;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v364, v67, v363);
          MEMORY[0x1DF0EC99C](v360, &v454);
          __cxa_throw(v360, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v448 < 0)
          operator delete(v447[0]);
        v68 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v445, &byte_1DEBD87CE);
        if (v68)
        {
          v365 = __cxa_allocate_exception(0x10uLL);
          v366 = v446;
          v367 = (const char *)v445[0];
          v368 = (const char *)espresso_get_status_string();
          v369 = (const char *)v445;
          if (v366 < 0)
            v369 = v367;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v369, v68, v368);
          MEMORY[0x1DF0EC99C](v365, &v454);
          __cxa_throw(v365, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v446 < 0)
          operator delete(v445[0]);
        v69 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v443, &byte_1DEBD87CE);
        if (v69)
        {
          v370 = __cxa_allocate_exception(0x10uLL);
          v371 = v444;
          v372 = (const char *)v443[0];
          v373 = (const char *)espresso_get_status_string();
          v374 = (const char *)v443;
          if (v371 < 0)
            v374 = v372;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v374, v69, v373);
          MEMORY[0x1DF0EC99C](v370, &v454);
          __cxa_throw(v370, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v444 < 0)
          operator delete(v443[0]);
        v70 = espresso_plan_build();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to build plan.");
        if (v70)
        {
          v375 = __cxa_allocate_exception(0x10uLL);
          v376 = v442;
          v377 = (void **)__p[0];
          v378 = (const char *)espresso_get_status_string();
          v379 = __p;
          if (v376 < 0)
            v379 = v377;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v379, v70, v378);
          MEMORY[0x1DF0EC99C](v375, &v454);
          __cxa_throw(v375, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v442 < 0)
          operator delete(__p[0]);
        v71 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v439, "Unable to bind hidden state.");
        if (v71)
        {
          v380 = __cxa_allocate_exception(0x10uLL);
          v381 = v440;
          v382 = (void **)v439[0];
          v383 = (const char *)espresso_get_status_string();
          v384 = v439;
          if (v381 < 0)
            v384 = v382;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v384, v71, v383);
          MEMORY[0x1DF0EC99C](v380, &v454);
          __cxa_throw(v380, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v440 < 0)
          operator delete(v439[0]);
        v72 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v437, "Unable to bind input.");
        if (v72)
        {
          v385 = __cxa_allocate_exception(0x10uLL);
          v386 = v438;
          v387 = (void **)v437[0];
          v388 = (const char *)espresso_get_status_string();
          v389 = v437;
          if (v386 < 0)
            v389 = v387;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v389, v72, v388);
          MEMORY[0x1DF0EC99C](v385, &v454);
          __cxa_throw(v385, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v438 < 0)
          operator delete(v437[0]);
        v73 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v435, "Unable to bind output_new_hidden.");
        if (v73)
        {
          v390 = __cxa_allocate_exception(0x10uLL);
          v391 = v436;
          v392 = (void **)v435[0];
          v393 = (const char *)espresso_get_status_string();
          v394 = v435;
          if (v391 < 0)
            v394 = v392;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v394, v73, v393);
          MEMORY[0x1DF0EC99C](v390, &v454);
          __cxa_throw(v390, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v436 < 0)
          operator delete(v435[0]);
        v74 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(&v432, "Unable to bind o1_bit.");
        if (v74)
        {
          v395 = __cxa_allocate_exception(0x10uLL);
          v396 = v434;
          v397 = (void **)v432;
          v398 = (const char *)espresso_get_status_string();
          v399 = &v432;
          if (v396 < 0)
            v399 = v397;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v399, v74, v398);
          MEMORY[0x1DF0EC99C](v395, &v454);
          __cxa_throw(v395, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v434 < 0)
          operator delete(v432);
        v75 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v430, "Unable to bind o1_bit_scaled.");
        if (v75)
        {
          v400 = __cxa_allocate_exception(0x10uLL);
          v401 = v431;
          v402 = (void **)v430[0];
          v403 = (const char *)espresso_get_status_string();
          v404 = v430;
          if (v401 < 0)
            v404 = v402;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v404, v75, v403);
          MEMORY[0x1DF0EC99C](v400, &v454);
          __cxa_throw(v400, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v431 < 0)
          operator delete(v430[0]);
        v76 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v428, "Unable to bind o2_bit.");
        if (v76)
        {
          v405 = __cxa_allocate_exception(0x10uLL);
          v406 = v429;
          v407 = (void **)v428[0];
          v408 = (const char *)espresso_get_status_string();
          v409 = v428;
          if (v406 < 0)
            v409 = v407;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v409, v76, v408);
          MEMORY[0x1DF0EC99C](v405, &v454);
          __cxa_throw(v405, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v429 < 0)
          operator delete(v428[0]);
        v77 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v426, "Unable to bind o2_bit_scaled.");
        if (v77)
        {
          v410 = __cxa_allocate_exception(0x10uLL);
          v411 = v427;
          v412 = (void **)v426[0];
          v413 = (const char *)espresso_get_status_string();
          v414 = v426;
          if (v411 < 0)
            v414 = v412;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v414, v77, v413);
          MEMORY[0x1DF0EC99C](v410, &v454);
          __cxa_throw(v410, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v427 < 0)
          operator delete(v426[0]);
        v59[24].__shared_weak_owners_ = (uint64_t)v59[14].__vftable;
        v59[25].__vftable = v59[7].__vftable;
        v59[25].__shared_owners_ = v59[32].__shared_owners_;
        ((void (*)(std::__shared_weak_count *))v59[1].__on_zero_shared_weak)(&v59[1]);
        if (v54)
        {
          v78 = (unint64_t *)&v54->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        *(_QWORD *)&v417 = v59 + 1;
        *((_QWORD *)&v417 + 1) = v59;
        do
          v80 = __ldxr(v60);
        while (__stxr(v80 + 1, v60));
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, &v417);
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
        if (*((_QWORD *)&v417 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        do
          v84 = __ldaxr(v60);
        while (__stlxr(v84 - 1, v60));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        v85 = v416;
        if (v416)
        {
          v86 = (unint64_t *)&v416->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          goto LABEL_347;
        }
        goto LABEL_349;
      }
    }
LABEL_157:
    if (size >= 3)
    {
      v88 = size;
      v89 = v30;
      while (1)
      {
        v90 = (char *)memchr(v89, 115, v88 - 2);
        if (!v90)
          goto LABEL_233;
        if (*(_WORD *)v90 == 30067 && v90[2] == 98)
          break;
        v89 = (std::string *)(v90 + 1);
        v88 = v31 - (char *)v89;
        if (v31 - (char *)v89 < 3)
          goto LABEL_233;
      }
      if (v90 != v31 && v90 - (char *)v30 != -1)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v92 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          LOWORD(v454.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1DE3F6000, v92, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with AMX subscaling dual softmax wavernn model", (uint8_t *)&v454, 2u);
        }
        Diagnostics::log(6, "EspressoWaveRNNModule init with AMX subscaling dual softmax wavernn model", v93);
        v94 = *(std::__shared_weak_count_vtbl **)(v28 + 296);
        v95 = *(std::__shared_weak_count **)(v28 + 304);
        v424 = v94;
        v425 = v95;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        v98 = (std::__shared_weak_count *)operator new(0x4B0uLL);
        v99 = v98;
        v98->__shared_owners_ = 0;
        v100 = (unint64_t *)&v98->__shared_owners_;
        v98->__shared_weak_owners_ = 0;
        v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935730;
        v428[0] = v94;
        v428[1] = v95;
        if (v95)
        {
          v101 = (unint64_t *)&v95->__shared_owners_;
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
        }
        v98[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9209C0;
        std::string::basic_string[abi:ne180100]<0>(&v98[1].__shared_owners_, "Stub");
        LOBYTE(v99[2].__shared_weak_owners_) = 0;
        LODWORD(v99[25].__shared_weak_owners_) = 0;
        v99[3].__vftable = 0;
        v99[3].__shared_owners_ = 0;
        v103 = (NeuralTTSUtils *)MEMORY[0x1DF0ECD80](&v99[26]);
        LOBYTE(v99[28].__shared_weak_owners_) = 0;
        v99[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9223F0;
        if (NeuralTTSUtils::is_amx_available(v103))
          v104 = "AMX";
        else
          v104 = "CPU";
        MEMORY[0x1DF0ECA80](&v99[1].__shared_owners_, v104);
        v99[3].__vftable = v94;
        v99[3].__shared_owners_ = (uint64_t)&v94->~__shared_weak_count_0;
        v105 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(&v452, &byte_1DEBD87CE);
        if (v105)
        {
          v260 = __cxa_allocate_exception(0x10uLL);
          v261 = v453;
          v262 = (const char *)v452;
          v263 = (const char *)espresso_get_status_string();
          v264 = (const char *)&v452;
          if (v261 < 0)
            v264 = v262;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v264, v105, v263);
          MEMORY[0x1DF0EC99C](v260, &v454);
          __cxa_throw(v260, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v453 < 0)
          operator delete((void *)v452);
        v106 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(&v449, &byte_1DEBD87CE);
        if (v106)
        {
          v265 = __cxa_allocate_exception(0x10uLL);
          v266 = v451;
          v267 = v449;
          v268 = (const char *)espresso_get_status_string();
          v269 = (const char *)&v449;
          if (v266 < 0)
            v269 = (const char *)v267;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v269, v106, v268);
          MEMORY[0x1DF0EC99C](v265, &v454);
          __cxa_throw(v265, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v451 < 0)
          operator delete(v449);
        v107 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v447, &byte_1DEBD87CE);
        if (v107)
        {
          v270 = __cxa_allocate_exception(0x10uLL);
          v271 = v448;
          v272 = (const char *)v447[0];
          v273 = (const char *)espresso_get_status_string();
          v274 = (const char *)v447;
          if (v271 < 0)
            v274 = v272;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v274, v107, v273);
          MEMORY[0x1DF0EC99C](v270, &v454);
          __cxa_throw(v270, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v448 < 0)
          operator delete(v447[0]);
        v108 = espresso_network_declare_output();
        std::string::basic_string[abi:ne180100]<0>(v445, &byte_1DEBD87CE);
        if (v108)
        {
          v275 = __cxa_allocate_exception(0x10uLL);
          v276 = v446;
          v277 = (const char *)v445[0];
          v278 = (const char *)espresso_get_status_string();
          v279 = (const char *)v445;
          if (v276 < 0)
            v279 = v277;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v279, v108, v278);
          MEMORY[0x1DF0EC99C](v275, &v454);
          __cxa_throw(v275, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v446 < 0)
          operator delete(v445[0]);
        v109 = espresso_plan_build();
        std::string::basic_string[abi:ne180100]<0>(v443, "Unable to build plan.");
        if (v109)
        {
          v280 = __cxa_allocate_exception(0x10uLL);
          v281 = v444;
          v282 = (const char *)v443[0];
          v283 = (const char *)espresso_get_status_string();
          v284 = (const char *)v443;
          if (v281 < 0)
            v284 = v282;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v284, v109, v283);
          MEMORY[0x1DF0EC99C](v280, &v454);
          __cxa_throw(v280, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v444 < 0)
          operator delete(v443[0]);
        v110 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind hidden state.");
        if (v110)
        {
          v285 = __cxa_allocate_exception(0x10uLL);
          v286 = v442;
          v287 = (void **)__p[0];
          v288 = (const char *)espresso_get_status_string();
          v289 = __p;
          if (v286 < 0)
            v289 = v287;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v289, v110, v288);
          MEMORY[0x1DF0EC99C](v285, &v454);
          __cxa_throw(v285, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v442 < 0)
          operator delete(__p[0]);
        v111 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v439, "Unable to bind input.");
        if (v111)
        {
          v290 = __cxa_allocate_exception(0x10uLL);
          v291 = v440;
          v292 = (void **)v439[0];
          v293 = (const char *)espresso_get_status_string();
          v294 = v439;
          if (v291 < 0)
            v294 = v292;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v294, v111, v293);
          MEMORY[0x1DF0EC99C](v290, &v454);
          __cxa_throw(v290, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v440 < 0)
          operator delete(v439[0]);
        v112 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v437, "Unable to bind output_new_hidden.");
        if (v112)
        {
          v295 = __cxa_allocate_exception(0x10uLL);
          v296 = v438;
          v297 = (void **)v437[0];
          v298 = (const char *)espresso_get_status_string();
          v299 = v437;
          if (v296 < 0)
            v299 = v297;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v299, v112, v298);
          MEMORY[0x1DF0EC99C](v295, &v454);
          __cxa_throw(v295, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v438 < 0)
          operator delete(v437[0]);
        v113 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v435, "Unable to bind softmax_p_ct.");
        if (v113)
        {
          v300 = __cxa_allocate_exception(0x10uLL);
          v301 = v436;
          v302 = (void **)v435[0];
          v303 = (const char *)espresso_get_status_string();
          v304 = v435;
          if (v301 < 0)
            v304 = v302;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v304, v113, v303);
          MEMORY[0x1DF0EC99C](v300, &v454);
          __cxa_throw(v300, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v436 < 0)
          operator delete(v435[0]);
        v114 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(&v432, "Unable to bind softmax_p_ft.");
        if (v114)
        {
          v305 = __cxa_allocate_exception(0x10uLL);
          v306 = v434;
          v307 = (void **)v432;
          v308 = (const char *)espresso_get_status_string();
          v309 = &v432;
          if (v306 < 0)
            v309 = v307;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v309, v114, v308);
          MEMORY[0x1DF0EC99C](v305, &v454);
          __cxa_throw(v305, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v434 < 0)
          operator delete(v432);
        v115 = espresso_network_bind_buffer();
        std::string::basic_string[abi:ne180100]<0>(v430, "Unable to bind softmax_p_ft.");
        if (v115)
        {
          v310 = __cxa_allocate_exception(0x10uLL);
          v311 = v431;
          v312 = (void **)v430[0];
          v313 = (const char *)espresso_get_status_string();
          v314 = v430;
          if (v311 < 0)
            v314 = v312;
          StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v314, v115, v313);
          MEMORY[0x1DF0EC99C](v310, &v454);
          __cxa_throw(v310, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        if (v431 < 0)
          operator delete(v430[0]);
        v99[24].__shared_weak_owners_ = (uint64_t)v99[14].__vftable;
        v99[25].__vftable = v99[7].__vftable;
        v99[25].__shared_owners_ = v99[32].__shared_owners_;
        ((void (*)(std::__shared_weak_count *))v99[1].__on_zero_shared_weak)(&v99[1]);
        v51 = a1 + 272;
        if (v95)
        {
          v116 = (unint64_t *)&v95->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v426[0] = &v99[1];
        v426[1] = v99;
        do
          v118 = __ldxr(v100);
        while (__stxr(v118 + 1, v100));
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, (__int128 *)v426);
        v119 = (std::__shared_weak_count *)v426[1];
        if (v426[1])
        {
          v120 = (unint64_t *)((char *)v426[1] + 8);
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        do
          v122 = __ldaxr(v100);
        while (__stlxr(v122 - 1, v100));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
        v85 = v425;
        if (v425)
        {
          v123 = (unint64_t *)&v425->__shared_owners_;
          do
            v87 = __ldaxr(v123);
          while (__stlxr(v87 - 1, v123));
          goto LABEL_347;
        }
        goto LABEL_349;
      }
LABEL_233:
      if (size >= 8)
      {
        v124 = size;
        v125 = v30;
        while (1)
        {
          v126 = (char *)memchr(v125, 49, v124 - 7);
          if (!v126)
            goto LABEL_291;
          if (*(_QWORD *)v126 == 0x78616D74666F7331)
            break;
          v125 = (std::string *)(v126 + 1);
          v124 = v31 - (char *)v125;
          if (v31 - (char *)v125 < 8)
            goto LABEL_291;
        }
        if (v126 != v31 && v126 - (char *)v30 != -1)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v127 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v454.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v127, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with single softmax wavernn model", (uint8_t *)&v454, 2u);
          }
          Diagnostics::log(6, "EspressoWaveRNNModule init with single softmax wavernn model", v128);
          v129 = *(std::__shared_weak_count_vtbl **)(v28 + 296);
          v130 = *(std::__shared_weak_count **)(v28 + 304);
          v432 = v129;
          v433 = v130;
          if (v130)
          {
            v131 = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }
          v133 = (std::__shared_weak_count *)operator new(0x360uLL);
          v134 = v133;
          v133->__shared_owners_ = 0;
          v135 = (unint64_t *)&v133->__shared_owners_;
          v133->__shared_weak_owners_ = 0;
          v133->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356C0;
          v437[0] = v129;
          v437[1] = v130;
          if (v130)
          {
            v136 = (unint64_t *)&v130->__shared_owners_;
            do
              v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }
          v133[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9209C0;
          std::string::basic_string[abi:ne180100]<0>(&v133[1].__shared_owners_, "Stub");
          LOBYTE(v134[2].__shared_weak_owners_) = 0;
          LODWORD(v134[25].__shared_weak_owners_) = 0;
          v134[3].__vftable = 0;
          v134[3].__shared_owners_ = 0;
          MEMORY[0x1DF0ECD80](&v134[26]);
          LOBYTE(v134[28].__shared_weak_owners_) = 0;
          v134[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA922370;
          MEMORY[0x1DF0ECA80](&v134[1].__shared_owners_, "SingleSoftmax");
          v134[3].__vftable = v129;
          v134[3].__shared_owners_ = (uint64_t)&v129->~__shared_weak_count_0;
          v138 = espresso_network_declare_output();
          std::string::basic_string[abi:ne180100]<0>(&v452, &byte_1DEBD87CE);
          if (v138)
          {
            v315 = __cxa_allocate_exception(0x10uLL);
            v316 = v453;
            v317 = (const char *)v452;
            v318 = (const char *)espresso_get_status_string();
            v319 = (const char *)&v452;
            if (v316 < 0)
              v319 = v317;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v319, v138, v318);
            MEMORY[0x1DF0EC99C](v315, &v454);
            __cxa_throw(v315, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v453 < 0)
            operator delete((void *)v452);
          v139 = espresso_network_declare_output();
          std::string::basic_string[abi:ne180100]<0>(&v449, &byte_1DEBD87CE);
          if (v139)
          {
            v320 = __cxa_allocate_exception(0x10uLL);
            v321 = v451;
            v322 = v449;
            v323 = (const char *)espresso_get_status_string();
            v324 = (const char *)&v449;
            if (v321 < 0)
              v324 = (const char *)v322;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v324, v139, v323);
            MEMORY[0x1DF0EC99C](v320, &v454);
            __cxa_throw(v320, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v451 < 0)
            operator delete(v449);
          v140 = espresso_plan_build();
          std::string::basic_string[abi:ne180100]<0>(v447, "Unable to build plan.");
          if (v140)
          {
            v325 = __cxa_allocate_exception(0x10uLL);
            v326 = v448;
            v327 = (const char *)v447[0];
            v328 = (const char *)espresso_get_status_string();
            v329 = (const char *)v447;
            if (v326 < 0)
              v329 = v327;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v329, v140, v328);
            MEMORY[0x1DF0EC99C](v325, &v454);
            __cxa_throw(v325, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v448 < 0)
            operator delete(v447[0]);
          v141 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v445, "Unable to bind hidden state.");
          if (v141)
          {
            v330 = __cxa_allocate_exception(0x10uLL);
            v331 = v446;
            v332 = (const char *)v445[0];
            v333 = (const char *)espresso_get_status_string();
            v334 = (const char *)v445;
            if (v331 < 0)
              v334 = v332;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v334, v141, v333);
            MEMORY[0x1DF0EC99C](v330, &v454);
            __cxa_throw(v330, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v446 < 0)
            operator delete(v445[0]);
          v142 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v443, "Unable to bind input.");
          if (v142)
          {
            v335 = __cxa_allocate_exception(0x10uLL);
            v336 = v444;
            v337 = (const char *)v443[0];
            v338 = (const char *)espresso_get_status_string();
            v339 = (const char *)v443;
            if (v336 < 0)
              v339 = v337;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v339, v142, v338);
            MEMORY[0x1DF0EC99C](v335, &v454);
            __cxa_throw(v335, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v444 < 0)
            operator delete(v443[0]);
          v143 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind output_new_hidden.");
          if (v143)
          {
            v340 = __cxa_allocate_exception(0x10uLL);
            v341 = v442;
            v342 = (void **)__p[0];
            v343 = (const char *)espresso_get_status_string();
            v344 = __p;
            if (v341 < 0)
              v344 = v342;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v344, v143, v343);
            MEMORY[0x1DF0EC99C](v340, &v454);
            __cxa_throw(v340, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v442 < 0)
            operator delete(__p[0]);
          v144 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v439, "Unable to bind softmax_p_ct.");
          if (v144)
          {
            v345 = __cxa_allocate_exception(0x10uLL);
            v346 = v440;
            v347 = (void **)v439[0];
            v348 = (const char *)espresso_get_status_string();
            v349 = v439;
            if (v346 < 0)
              v349 = v347;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v349, v144, v348);
            MEMORY[0x1DF0EC99C](v345, &v454);
            __cxa_throw(v345, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v440 < 0)
            operator delete(v439[0]);
          v134[24].__shared_weak_owners_ = (uint64_t)v134[14].__vftable;
          v134[25].__vftable = v134[7].__vftable;
          v134[25].__shared_owners_ = v134[32].__shared_owners_;
          ((void (*)(std::__shared_weak_count *))v134[1].__on_zero_shared_weak)(&v134[1]);
          v51 = a1 + 272;
          if (v130)
          {
            v145 = (unint64_t *)&v130->__shared_owners_;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v435[0] = &v134[1];
          v435[1] = v134;
          do
            v147 = __ldxr(v135);
          while (__stxr(v147 + 1, v135));
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, (__int128 *)v435);
          v148 = (std::__shared_weak_count *)v435[1];
          if (v435[1])
          {
            v149 = (unint64_t *)((char *)v435[1] + 8);
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          do
            v151 = __ldaxr(v135);
          while (__stlxr(v151 - 1, v135));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
          v85 = v433;
          if (v433)
          {
            v152 = (unint64_t *)&v433->__shared_owners_;
            do
              v87 = __ldaxr(v152);
            while (__stlxr(v87 - 1, v152));
            goto LABEL_347;
          }
          goto LABEL_349;
        }
LABEL_291:
        v153 = v30;
        while (1)
        {
          if (size == 7)
            goto LABEL_296;
          v154 = (char *)memchr(v153, 50, size - 7);
          if (!v154)
            goto LABEL_296;
          if (*(_QWORD *)v154 == 0x78616D74666F7332)
            break;
          v153 = (std::string *)(v154 + 1);
          size = v31 - (char *)v153;
          if (v31 - (char *)v153 < 8)
            goto LABEL_296;
        }
        if (v154 != v31 && v154 - (char *)v30 != -1)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v157 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v454.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v157, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with dual softmax wavernn model", (uint8_t *)&v454, 2u);
          }
          Diagnostics::log(6, "EspressoWaveRNNModule init with dual softmax wavernn model", v158);
          v159 = *(std::__shared_weak_count_vtbl **)(v28 + 296);
          v160 = *(std::__shared_weak_count **)(v28 + 304);
          v435[0] = v159;
          v435[1] = v160;
          if (v160)
          {
            v161 = (unint64_t *)&v160->__shared_owners_;
            do
              v162 = __ldxr(v161);
            while (__stxr(v162 + 1, v161));
          }
          v163 = (std::__shared_weak_count *)operator new(0x408uLL);
          v164 = v163;
          v163->__shared_owners_ = 0;
          v165 = (unint64_t *)&v163->__shared_owners_;
          v163->__shared_weak_owners_ = 0;
          v163->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935650;
          v439[0] = v159;
          v439[1] = v160;
          if (v160)
          {
            v166 = (unint64_t *)&v160->__shared_owners_;
            do
              v167 = __ldxr(v166);
            while (__stxr(v167 + 1, v166));
          }
          v163[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9209C0;
          std::string::basic_string[abi:ne180100]<0>(&v163[1].__shared_owners_, "Stub");
          LOBYTE(v164[2].__shared_weak_owners_) = 0;
          LODWORD(v164[25].__shared_weak_owners_) = 0;
          v164[3].__vftable = 0;
          v164[3].__shared_owners_ = 0;
          MEMORY[0x1DF0ECD80](&v164[26]);
          LOBYTE(v164[28].__shared_weak_owners_) = 0;
          v164[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9222E8;
          MEMORY[0x1DF0ECA80](&v164[1].__shared_owners_, "DualSoftmax");
          v164[3].__vftable = v159;
          v164[3].__shared_owners_ = (uint64_t)&v159->~__shared_weak_count_0;
          v168 = espresso_plan_build();
          std::string::basic_string[abi:ne180100]<0>(&v452, "Unable to build plan.");
          if (v168)
          {
            v230 = __cxa_allocate_exception(0x10uLL);
            v231 = v453;
            v232 = (const char *)v452;
            v233 = (const char *)espresso_get_status_string();
            v234 = (const char *)&v452;
            if (v231 < 0)
              v234 = v232;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v234, v168, v233);
            MEMORY[0x1DF0EC99C](v230, &v454);
            __cxa_throw(v230, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v453 < 0)
            operator delete((void *)v452);
          v169 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(&v449, "Unable to bind hidden state.");
          if (v169)
          {
            v235 = __cxa_allocate_exception(0x10uLL);
            v236 = v451;
            v237 = v449;
            v238 = (const char *)espresso_get_status_string();
            v239 = (const char *)&v449;
            if (v236 < 0)
              v239 = (const char *)v237;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v239, v169, v238);
            MEMORY[0x1DF0EC99C](v235, &v454);
            __cxa_throw(v235, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v451 < 0)
            operator delete(v449);
          v170 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v447, "Unable to bind input.");
          if (v170)
          {
            v240 = __cxa_allocate_exception(0x10uLL);
            v241 = v448;
            v242 = (const char *)v447[0];
            v243 = (const char *)espresso_get_status_string();
            v244 = (const char *)v447;
            if (v241 < 0)
              v244 = v242;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v244, v170, v243);
            MEMORY[0x1DF0EC99C](v240, &v454);
            __cxa_throw(v240, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v448 < 0)
            operator delete(v447[0]);
          v171 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v445, "Unable to bind output_new_hidden.");
          if (v171)
          {
            v245 = __cxa_allocate_exception(0x10uLL);
            v246 = v446;
            v247 = (const char *)v445[0];
            v248 = (const char *)espresso_get_status_string();
            v249 = (const char *)v445;
            if (v246 < 0)
              v249 = v247;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v249, v171, v248);
            MEMORY[0x1DF0EC99C](v245, &v454);
            __cxa_throw(v245, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v446 < 0)
            operator delete(v445[0]);
          v172 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(v443, "Unable to bind softmax_p_ct.");
          if (v172)
          {
            v250 = __cxa_allocate_exception(0x10uLL);
            v251 = v444;
            v252 = (const char *)v443[0];
            v253 = (const char *)espresso_get_status_string();
            v254 = (const char *)v443;
            if (v251 < 0)
              v254 = v252;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", v254, v172, v253);
            MEMORY[0x1DF0EC99C](v250, &v454);
            __cxa_throw(v250, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v444 < 0)
            operator delete(v443[0]);
          v173 = espresso_network_bind_buffer();
          std::string::basic_string[abi:ne180100]<0>(__p, "Unable to bind softmax_p_ft.");
          if (v173)
          {
            v255 = __cxa_allocate_exception(0x10uLL);
            v256 = v442;
            v257 = (void **)__p[0];
            v258 = (const char *)espresso_get_status_string();
            v259 = __p;
            if (v256 < 0)
              v259 = v257;
            StringFormatter::StringFormatter((StringFormatter *)&v454, "%s Error: %d, %s", (const char *)v259, v173, v258);
            MEMORY[0x1DF0EC99C](v255, &v454);
            __cxa_throw(v255, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          if (v442 < 0)
            operator delete(__p[0]);
          v164[24].__shared_weak_owners_ = (uint64_t)v164[14].__vftable;
          v164[25].__vftable = v164[7].__vftable;
          v164[25].__shared_owners_ = v164[32].__shared_owners_;
          ((void (*)(std::__shared_weak_count *))v164[1].__on_zero_shared_weak)(&v164[1]);
          v51 = a1 + 272;
          if (v160)
          {
            v174 = (unint64_t *)&v160->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          v437[0] = &v164[1];
          v437[1] = v164;
          do
            v176 = __ldxr(v165);
          while (__stxr(v176 + 1, v165));
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, (__int128 *)v437);
          v177 = (std::__shared_weak_count *)v437[1];
          if (v437[1])
          {
            v178 = (unint64_t *)((char *)v437[1] + 8);
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          do
            v180 = __ldaxr(v165);
          while (__stlxr(v180 - 1, v165));
          if (!v180)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
          v85 = (std::__shared_weak_count *)v435[1];
          if (v435[1])
          {
            v181 = (unint64_t *)((char *)v435[1] + 8);
            do
              v87 = __ldaxr(v181);
            while (__stlxr(v87 - 1, v181));
            goto LABEL_347;
          }
          goto LABEL_349;
        }
      }
    }
LABEL_296:
    v155 = __cxa_allocate_exception(0x10uLL);
    v156 = &v418;
    if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v156 = (std::string *)v418.__r_.__value_.__r.__words[0];
    StringFormatter::StringFormatter((StringFormatter *)&v454, "Unrecognized model: '%s'", (const char *)v156);
    MEMORY[0x1DF0EC99C](v155, &v454);
    __cxa_throw(v155, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v36 = *(_QWORD *)(v28 + 296);
  v37 = *(std::__shared_weak_count **)(v28 + 304);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v36)
  {
    v41 = HIBYTE(v418.__r_.__value_.__r.__words[2]);
    if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v42 = &v418;
    }
    else
    {
      v41 = v418.__r_.__value_.__l.__size_;
      v42 = (std::string *)v418.__r_.__value_.__r.__words[0];
    }
    if (v41 >= 5)
    {
      v43 = (char *)v42 + v41;
      v44 = v42;
      do
      {
        v45 = (char *)memchr(v44, 102, v41 - 4);
        if (!v45)
          break;
        if (*(_DWORD *)v45 == 1702065510 && v45[4] == 100)
        {
          if (v45 == v43 || v45 - (char *)v42 == -1)
            break;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v51 = a1 + 272;
          v195 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
          {
            LOWORD(v454.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1DE3F6000, v195, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", (uint8_t *)&v454, 2u);
          }
          Diagnostics::log(6, "EspressoWaveRNNModule init with ANE FUSED subscaling dual softmax wavernn model", v196);
          v197 = *(__int128 **)(v421 + 296);
          v198 = *(std::__shared_weak_count **)(v421 + 304);
          v449 = (std::string *)v197;
          v450 = v198;
          if (v198)
          {
            v199 = (unint64_t *)&v198->__shared_owners_;
            do
              v200 = __ldxr(v199);
            while (__stxr(v200 + 1, v199));
          }
          std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEProcessor,std::allocator<EspressoWaveRNNFusedSubscalingANEProcessor>,std::shared_ptr<EspressoWaveRNNFusedSubscalingANEModel> const,void>(&v452, (uint64_t)v197, v198);
          if ((_QWORD)v452)
          {
            *(_OWORD *)&v454.__r_.__value_.__l.__data_ = v452;
            if (*((_QWORD *)&v452 + 1))
            {
              v201 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
              do
                v202 = __ldxr(v201);
              while (__stxr(v202 + 1, v201));
            }
          }
          else
          {
            *(_OWORD *)&v454.__r_.__value_.__l.__data_ = 0uLL;
          }
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, (__int128 *)&v454);
          v223 = (std::__shared_weak_count *)v454.__r_.__value_.__l.__size_;
          if (v454.__r_.__value_.__l.__size_)
          {
            v224 = (unint64_t *)(v454.__r_.__value_.__l.__size_ + 8);
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
          v226 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
          if (*((_QWORD *)&v452 + 1))
          {
            v227 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
            do
              v228 = __ldaxr(v227);
            while (__stlxr(v228 - 1, v227));
            if (!v228)
            {
              ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
              std::__shared_weak_count::__release_weak(v226);
            }
          }
          v85 = v450;
          if (v450)
          {
            v229 = (unint64_t *)&v450->__shared_owners_;
            do
              v87 = __ldaxr(v229);
            while (__stlxr(v87 - 1, v229));
            goto LABEL_347;
          }
          goto LABEL_349;
        }
        v44 = (std::string *)(v45 + 1);
        v41 = v43 - (char *)v44;
      }
      while (v43 - (char *)v44 >= 5);
    }
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v203 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(v454.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v203, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with ANE subscaling dual softmax wavernn model", (uint8_t *)&v454, 2u);
    }
    Diagnostics::log(6, "EspressoWaveRNNModule init with ANE subscaling dual softmax wavernn model", v204);
    v206 = *(__int128 **)(v421 + 296);
    v205 = *(std::__shared_weak_count **)(v421 + 304);
    v449 = (std::string *)v206;
    v450 = v205;
    if (v205)
    {
      v207 = (unint64_t *)&v205->__shared_owners_;
      do
        v208 = __ldxr(v207);
      while (__stxr(v208 + 1, v207));
    }
    v209 = (std::__shared_weak_count *)operator new(0x578uLL);
    v210 = v209;
    v209->__shared_owners_ = 0;
    v211 = (unint64_t *)&v209->__shared_owners_;
    v209->__shared_weak_owners_ = 0;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356F8;
    v212 = &v209[1].__vftable;
    v454.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
    v454.__r_.__value_.__l.__size_ = (std::string::size_type)v205;
    if (v205)
    {
      v213 = (unint64_t *)&v205->__shared_owners_;
      do
        v214 = __ldxr(v213);
      while (__stxr(v214 + 1, v213));
    }
    EspressoWaveRNNSubscalingANEProcessor::EspressoWaveRNNSubscalingANEProcessor((uint64_t)&v209[1], (uint64_t *)&v454);
    if (v205)
    {
      v215 = (unint64_t *)&v205->__shared_owners_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    *(_QWORD *)&v452 = v212;
    *((_QWORD *)&v452 + 1) = v210;
    do
      v217 = __ldxr(v211);
    while (__stxr(v217 + 1, v211));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, &v452);
    v218 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
    if (*((_QWORD *)&v452 + 1))
    {
      v219 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
      do
        v220 = __ldaxr(v219);
      while (__stlxr(v220 - 1, v219));
      if (!v220)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
    do
      v221 = __ldaxr(v211);
    while (__stlxr(v221 - 1, v211));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
    v85 = v450;
    v51 = a1 + 272;
    if (v450)
    {
      v222 = (unint64_t *)&v450->__shared_owners_;
      do
        v87 = __ldaxr(v222);
      while (__stlxr(v87 - 1, v222));
      goto LABEL_347;
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v191 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      LOWORD(v454.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1DE3F6000, v191, OS_LOG_TYPE_INFO, "EspressoWaveRNNModule init with Stub wavernn processor.", (uint8_t *)&v454, 2u);
    }
    Diagnostics::log(6, "EspressoWaveRNNModule init with Stub wavernn processor.", v192);
    v193 = operator new(0x2B8uLL);
    v193[1] = 0;
    v193[2] = 0;
    *v193 = &off_1EA934658;
    bzero(v193 + 4, 0x298uLL);
    v193[3] = &off_1EA9209C0;
    std::string::basic_string[abi:ne180100]<0>(v193 + 4, "Stub");
    *((_BYTE *)v193 + 64) = 0;
    *((_DWORD *)v193 + 154) = 0;
    v193[9] = 0;
    v193[10] = 0;
    MEMORY[0x1DF0ECD80](v193 + 78);
    *((_BYTE *)v193 + 688) = 0;
    v454.__r_.__value_.__r.__words[0] = (std::string::size_type)(v193 + 3);
    v454.__r_.__value_.__l.__size_ = (std::string::size_type)v193;
    v51 = a1 + 272;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v415, (__int128 *)&v454);
    v85 = (std::__shared_weak_count *)v454.__r_.__value_.__l.__size_;
    if (v454.__r_.__value_.__l.__size_)
    {
      v194 = (unint64_t *)(v454.__r_.__value_.__l.__size_ + 8);
      do
        v87 = __ldaxr(v194);
      while (__stlxr(v87 - 1, v194));
LABEL_347:
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
LABEL_349:
  std::string::basic_string[abi:ne180100]<0>(&v454, "frame_size");
  LODWORD(v452) = 240;
  *(_QWORD *)(*(_QWORD *)v51 + 32) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(a2, (const void **)&v454.__r_.__value_.__l.__data_, (unsigned int *)&v452);
  if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v454.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v182 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v184 = *(_QWORD *)(*(_QWORD *)v51 + 32);
    LODWORD(v454.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v454.__r_.__value_.__r.__words + 4) = v184;
    _os_log_impl(&dword_1DE3F6000, v182, OS_LOG_TYPE_INFO, "WaveRNN module frame size: %ld", (uint8_t *)&v454, 0xCu);
  }
  Diagnostics::log(6, "WaveRNN module frame size: %ld", v183, *(_QWORD *)(*(_QWORD *)v51 + 32));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v185 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    LOWORD(v454.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v185, OS_LOG_TYPE_INFO, "Successfully initialized WaveRNN module", (uint8_t *)&v454, 2u);
  }
  Diagnostics::log(6, "Successfully initialized WaveRNN module", v186);
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v418.__r_.__value_.__l.__data_);
  v187 = v422;
  if (v422)
  {
    v188 = (unint64_t *)&v422->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  return a1;
}

void sub_1DE9C8CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, EspressoWaveRNNProcessor *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, ...)
{
  Module *v19;
  uint64_t v20;
  va_list va;

  va_start(va, a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20 - 176);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a7);
  Module::~Module(v19);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<EspressoWaveRNNFusedSubscalingANEProcessor,std::allocator<EspressoWaveRNNFusedSubscalingANEProcessor>,std::shared_ptr<EspressoWaveRNNFusedSubscalingANEModel> const,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];

  v6 = operator new(0x830uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA935998;
  v8 = v6 + 3;
  v13[0] = a2;
  v13[1] = (uint64_t)a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  EspressoWaveRNNFusedSubscalingANEProcessor::EspressoWaveRNNFusedSubscalingANEProcessor((uint64_t)(v6 + 3), v13);
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1DE9C99A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNDualSoftmaxProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9356C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSingleSoftmaxProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNSubscalingCPUProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNFusedSubscaleCPUProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<EspressoWaveRNNProcessor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void FRCodeBitmap::copy_to(uint64_t a1, unint64_t *a2)
{
  uint64_t i;
  uint64_t j;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;

  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 64; ++j)
    {
      if (((*(_QWORD *)(a1 + 8 * i) >> j) & 1) != 0)
      {
        v6 = ((_BYTE)i << 6) + j;
        v8 = (_BYTE *)a2[1];
        v7 = a2[2];
        if ((unint64_t)v8 >= v7)
        {
          v10 = *a2;
          v11 = &v8[-*a2];
          v12 = (unint64_t)(v11 + 1);
          if ((uint64_t)(v11 + 1) < 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v13 = v7 - v10;
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
            v14 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
            v15 = (char *)operator new(v14);
          else
            v15 = 0;
          v16 = &v11[(_QWORD)v15];
          v17 = &v11[(_QWORD)v15];
          *v17 = v6;
          v9 = v17 + 1;
          if (v8 != (_BYTE *)v10)
          {
            v18 = &v8[~v10];
            do
            {
              v19 = *--v8;
              (v18--)[(_QWORD)v15] = v19;
            }
            while (v8 != (_BYTE *)v10);
            v8 = (_BYTE *)*a2;
            v16 = v15;
          }
          *a2 = (unint64_t)v16;
          a2[1] = (unint64_t)v9;
          a2[2] = (unint64_t)&v15[v14];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        a2[1] = (unint64_t)v9;
      }
    }
  }
}

void FRCodeUMap::FRCodeUMap(FRCodeUMap *this, const FRCodeUMap *a2)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  FRCodeUMap::copy(this, a2);
}

void sub_1DE9C9CB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FRCodeUMap::copy(FRCodeUMap *this, const FRCodeUMap *a2)
{
  void *v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  _BYTE *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int16 v19[8];

  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  v4 = (void *)operator new[]();
  *((_QWORD *)this + 8) = v4;
  memcpy(v4, *((const void **)a2 + 8), 2 * *((unsigned int *)this + 18));
  result = uset_getSerializedSet();
  if (!(_DWORD)result)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v19[0] = 0;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "Copy SerializedSet error!", (uint8_t *)v19, 2u);
    }
    result = Diagnostics::log(3, "Copy SerializedSet error!", v7);
  }
  v8 = (char *)*((_QWORD *)this + 1);
  v9 = (char *)*((_QWORD *)a2 + 1);
  v10 = (_BYTE *)*((_QWORD *)a2 + 2);
  v11 = v10 - v9;
  v12 = *((_QWORD *)this + 3);
  if (v12 - (unint64_t)v8 < v10 - v9)
  {
    if (v8)
    {
      *((_QWORD *)this + 2) = v8;
      operator delete(v8);
      v12 = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    if ((v11 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 2 * v12;
    if (2 * v12 <= v11)
      v13 = v10 - v9;
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    result = (uint64_t)std::vector<signed char>::__vallocate[abi:ne180100]((_QWORD *)this + 1, v14);
    v8 = (char *)*((_QWORD *)this + 2);
    goto LABEL_23;
  }
  v15 = (_BYTE *)*((_QWORD *)this + 2);
  v16 = v15 - v8;
  if (v15 - v8 >= v11)
  {
LABEL_23:
    if (v10 != v9)
      result = (uint64_t)memmove(v8, v9, v10 - v9);
    v18 = &v8[v11];
    goto LABEL_26;
  }
  v17 = &v9[v16];
  if (v15 != v8)
  {
    result = (uint64_t)memmove(*((void **)this + 1), v9, v16);
    v8 = (char *)*((_QWORD *)this + 2);
  }
  if (v10 != v17)
    result = (uint64_t)memmove(v8, v17, v10 - v17);
  v18 = &v8[v10 - v17];
LABEL_26:
  *((_QWORD *)this + 2) = v18;
  return result;
}

void FRCodeUMap::~FRCodeUMap(FRCodeUMap *this)
{
  uint64_t v2;
  void *v3;

  if (!*(_BYTE *)this)
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
      MEMORY[0x1DF0ED014](v2, 0x1000C40BDFB0063);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void FRCodeUMap::copy_to(char *a1, char *a2, unint64_t *a3)
{
  char *v5;
  _BYTE *v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = (_BYTE *)a3[1];
    do
    {
      v7 = *v5;
      v8 = a3[2];
      if ((unint64_t)v6 >= v8)
      {
        v10 = *a3;
        v11 = &v6[-*a3];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v8 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v11[(_QWORD)v15];
        v17 = &v11[(_QWORD)v15];
        *v17 = v7;
        v9 = v17 + 1;
        if (v6 != (_BYTE *)v10)
        {
          v18 = &v6[~v10];
          do
          {
            v19 = *--v6;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v6 != (_BYTE *)v10);
          v6 = (_BYTE *)*a3;
          v16 = v15;
        }
        *a3 = (unint64_t)v16;
        a3[1] = (unint64_t)v9;
        a3[2] = (unint64_t)&v15[v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = v7;
        v9 = v6 + 1;
      }
      a3[1] = (unint64_t)v9;
      ++v5;
      v6 = v9;
    }
    while (v5 != a2);
  }
}

void FRCode::init_tables(FRCode *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  int v8;

  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 32) = 1065353216;
    FRCode::init_tables(void)::g_bnd_map = v5;
  }
  v2 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\B");
  v8 = 0;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v2, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v3 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\E");
  v8 = 1;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = (uint64_t *)FRCode::init_tables(void)::g_bnd_map;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\b");
  v8 = 2;
  std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(v4, (unsigned __int8 *)__p, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  FRCode::g_bnd_map_ = FRCode::init_tables(void)::g_bnd_map;
}

void sub_1DE9CA168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,FRCode::BndType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FRCode::BndType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FRCode::BndType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FRCode::BndType>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  std::string *v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  v18 = a1 + 2;
  *((_DWORD *)v16 + 10) = *(_DWORD *)(a3 + 24);
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v16 = *v37;
LABEL_75:
    *v37 = v16;
    goto LABEL_76;
  }
  *(_QWORD *)v16 = *v18;
  *v18 = v16;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v16)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
}

void sub_1DE9CA5CC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void FRCode::copy_and_append_ops(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;

  v3 = a3 + a2;
  if (v3 > a2)
  {
    v5 = (_DWORD *)a1[1];
    v6 = -1431655765 * (((unint64_t)v5 - *a1) >> 2) - a2;
    v7 = a2;
    do
    {
      v8 = (_DWORD *)*a1;
      v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 2);
      if (v9 <= v7)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v10 = &v8[3 * v7];
      v12 = *v10;
      v11 = v10[1];
      v13 = v10[2];
      v14 = v11 + v6;
      v15 = v13 + v6;
      if (v12 == 6)
        v11 += v6;
      else
        v15 = v13;
      if (v12 == 8)
        v16 = v14;
      else
        v16 = v11;
      if (v12 == 8)
        v17 = v13;
      else
        v17 = v15;
      v18 = a1[2];
      if ((unint64_t)v5 >= v18)
      {
        if (v9 + 1 > 0x1555555555555555)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v8) >> 2);
        v20 = 2 * v19;
        if (2 * v19 <= v9 + 1)
          v20 = v9 + 1;
        if (v19 >= 0xAAAAAAAAAAAAAAALL)
          v21 = 0x1555555555555555;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v21);
        else
          v22 = 0;
        v23 = (_DWORD *)(v21 + 12 * v9);
        *v23 = v12;
        v23[1] = v16;
        v23[2] = v17;
        v25 = (_DWORD *)*a1;
        v24 = (_DWORD *)a1[1];
        v26 = v23;
        if (v24 != (_DWORD *)*a1)
        {
          do
          {
            v27 = *(_QWORD *)(v24 - 3);
            v24 -= 3;
            v28 = v24[2];
            *(_QWORD *)(v26 - 3) = v27;
            v26 -= 3;
            v26[2] = v28;
          }
          while (v24 != v25);
          v24 = (_DWORD *)*a1;
        }
        v5 = v23 + 3;
        *a1 = v26;
        a1[1] = v23 + 3;
        a1[2] = v21 + 12 * v22;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v5 = v12;
        v5[1] = v16;
        v5[2] = v17;
        v5 += 3;
      }
      a1[1] = v5;
      ++v7;
    }
    while (v7 != v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

uint64_t FRCode::get_previous_op(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v8;
  unsigned int v9;

  if (a1 == a2)
    return 0xFFFFFFFFLL;
  v2 = *(_DWORD *)(a2 - 12);
  v3 = 0xFFFFFFFFLL;
  if (v2 <= 0xF)
  {
    if (((1 << v2) & 0xF400) != 0)
      return -1431655765 * ((unint64_t)(a2 - a1) >> 2) - 1;
    if (((1 << v2) & 0x28) != 0)
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
      v3 = (v4 - 1);
      if (v4 > v3)
      {
        v5 = 0;
        while (2)
        {
          switch(*(_DWORD *)(a1 + 12 * v3))
          {
            case 2:
            case 4:
              if (!--v5)
                return v3;
              goto LABEL_12;
            case 3:
            case 5:
              ++v5;
              goto LABEL_12;
            default:
LABEL_12:
              v3 = (v3 - 1);
              if (v4 <= v3)
                break;
              continue;
          }
          break;
        }
      }
LABEL_13:
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    }
    if (v2 != 9)
      return v3;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
    if ((*(_BYTE *)(a2 - 8) & 0x80) == 0)
      return (v6 - 1);
    if (v6 < 2)
      return 0xFFFFFFFFLL;
    v8 = (v6 - 2);
    if (v6 <= v8)
      goto LABEL_13;
    v9 = v6 - 3;
    while ((*(_DWORD *)(a1 + 12 * v8 + 4) + 62) >= 0x33u)
    {
      v8 = v9;
      if (v6 <= v9--)
        goto LABEL_13;
    }
    return v9 + 1;
  }
  return v3;
}

uint64_t FRCode::create_range(uint64_t a1, void **a2, uint64_t *a3, uint64_t a4, int a5)
{
  void **v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  _BYTE *v18;
  uint64_t i;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t j;
  _BYTE *v44;
  _BYTE *v45;
  unint64_t v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::value_type *v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char v77;
  std::string::const_reference v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  std::string::value_type v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  size_t v100;
  char *v101;
  char *v102;
  int64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  size_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  size_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char v127;
  char *v128;
  char *v129;
  char *v130;
  char v131;
  std::string::value_type v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  size_t v140;
  void *v141;
  char *v142;
  char *v143;
  char v144;
  std::string::value_type v145;
  char *v146;
  void *v147;
  char *v148;
  char *v149;
  char *v150;
  char v151;
  int64_t v152;
  int64_t v153;
  unint64_t v154;
  size_t v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  size_t v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  size_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char v175;
  char *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  size_t v182;
  char *v183;
  char *v184;
  std::string::value_type *v185;
  char *v186;
  char v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  char v195;
  char *v196;
  char *v197;
  char v198;
  char *v199;
  char *v200;
  unsigned int v201;
  char *v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  size_t v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char v213;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  size_t v220;
  char *v221;
  std::string::value_type *v222;
  char *v223;
  char v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  size_t v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  size_t v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  std::string::value_type *v246;
  char *v247;
  char v248;
  char *v249;
  char *v250;
  char *v251;
  char v252;
  char *v253;
  std::string::value_type *v254;
  char *v255;
  char v256;
  char *v257;
  char *v258;
  char v259;
  char *v260;
  char *v261;
  char *v262;
  char v263;
  char *v264;
  char *v265;
  char v266;
  char *v267;
  char *v268;
  uint64_t *v269;
  char *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  size_t v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char v280;
  std::string *v281;
  std::string::size_type size;
  uint64_t v283;
  NSObject *v284;
  const char *v285;
  char *v286;
  uint64_t v287;
  NSObject *v288;
  char *v289;
  char *v290;
  size_t v291;
  char *v292;
  size_t v293;
  char *v294;
  char *v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  void *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  __int128 v316;
  __int128 v317;
  unint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t k;
  uint64_t v324;
  const FRCodeUMap *v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  NSObject *v331;
  char v332;
  uint64_t *v334;
  unint64_t v335;
  std::string::size_type v336;
  uint64_t v338;
  int v339;
  unint64_t v340;
  void *__dst[2];
  void *v342[2];
  uint64_t v343;
  uint64_t v344;
  int v345;
  char v346;
  std::string v347;
  void *__p;
  char *v349;
  char *v350;
  uint8_t buf[4];
  int v352;
  _BYTE *v353;
  _BYTE v354[24];
  uint64_t *v355;

  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
  {
    v6 = a2;
    v7 = 0;
    v8 = *(char *)(a4 + 23);
    v9 = *(_QWORD *)a4;
    if (v8 >= 0)
      v9 = a4;
    v338 = v9;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a4 + 23);
    else
      v10 = *(_QWORD *)(a4 + 8);
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)v342 = 0u;
    LOBYTE(v343) = a5;
    v353 = 0;
    *(_QWORD *)v354 = 0;
    *(_QWORD *)&v354[8] = 0;
    if (a5)
      v11 = 2;
    else
      v11 = 1;
    v335 = v10;
    v12 = v10 - 1;
    if (v11 < v10 - 1)
    {
      v7 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(unsigned __int8 *)boost::basic_string_ref<char,std::char_traits<char>>::at(v338, v335, v11);
        if (v14 == 92)
        {
          if ((_BYTE *)v13 == v7 || (v15 = v7 - 1, *(v7 - 1) != 92))
          {
            if ((unint64_t)v7 >= *(_QWORD *)&v354[8])
            {
              v26 = &v7[-v13];
              v27 = (uint64_t)&v7[-v13 + 1];
              if (v27 < 0)
                goto LABEL_577;
              v28 = *(_QWORD *)&v354[8] - v13;
              if (2 * (*(_QWORD *)&v354[8] - v13) > v27)
                v27 = 2 * v28;
              if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
                v29 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
                v30 = (unint64_t)operator new(v29);
              else
                v30 = 0;
              v35 = &v26[v30];
              v36 = &v26[v30];
              *v36 = 92;
              v37 = v36 + 1;
              if ((_BYTE *)v13 == v7)
              {
                v13 = (unint64_t)v35;
              }
              else
              {
                v38 = &v7[~v13];
                do
                {
                  v39 = *--v7;
                  (v38--)[v30] = v39;
                }
                while (v7 != (_BYTE *)v13);
                v7 = v353;
                v13 = v30;
              }
              v353 = (_BYTE *)v13;
              *(_QWORD *)&v354[8] = v30 + v29;
              if (v7)
                operator delete(v7);
              v7 = v37;
            }
            else
            {
              *v7++ = 92;
            }
            goto LABEL_83;
          }
          v16 = (void *)((unint64_t)__dst[1] | 0x10000000);
LABEL_16:
          __dst[1] = v16;
        }
        else
        {
          if ((_BYTE *)v13 == v7 || (v15 = v7 - 1, *(v7 - 1) != 92))
          {
            v18 = &v7[-v13];
            if ((unint64_t)&v7[-v13] >= 2 && *(v7 - 1) == 45)
            {
              *(_QWORD *)v354 = v7 - 1;
              v20 = *(v7 - 2);
              v7 -= 2;
              for (i = v20; (int)i <= (char)v14; ++i)
              {
                if ((*(_BYTE *)(a1 + 120) & 8) != 0
                  && ((i & 0x80) != 0
                    ? (v21 = __maskrune(i, 0x100uLL))
                    : (v21 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * i + 60) & 0x100),
                      v21))
                {
                  *(void **)((char *)__dst + (((unint64_t)case_folding[i] >> 3) & 0x18)) = (void *)((1 << case_folding[i]) | *(unint64_t *)((char *)__dst + (((unint64_t)case_folding[i] >> 3) & 0x18)));
                  v22 = case_folding[i & 0xFFFFFEFF | 0x100];
                  v23 = 1 << v22;
                  v24 = (void **)((char *)__dst + ((v22 >> 3) & 0x18));
                  v25 = (uint64_t)*v24;
                }
                else
                {
                  v25 = 1 << i;
                  v24 = &__dst[i >> 6];
                  v23 = (uint64_t)*v24;
                }
                *v24 = (void *)(v23 | v25);
              }
            }
            else if ((unint64_t)v7 >= *(_QWORD *)&v354[8])
            {
              v31 = (unint64_t)(v18 + 1);
              if ((uint64_t)(v18 + 1) < 0)
LABEL_577:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v32 = *(_QWORD *)&v354[8] - v13;
              if (2 * (*(_QWORD *)&v354[8] - v13) > v31)
                v31 = 2 * v32;
              if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
                v33 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
                v34 = (unint64_t)operator new(v33);
              else
                v34 = 0;
              v18[v34] = v14;
              v40 = (uint64_t)&v18[v34 + 1];
              if ((_BYTE *)v13 == v7)
              {
                v13 = (unint64_t)&v18[v34];
              }
              else
              {
                v41 = &v7[~v13];
                do
                {
                  v42 = *--v7;
                  (v41--)[v34] = v42;
                }
                while (v7 != (_BYTE *)v13);
                v7 = v353;
                v13 = v34;
              }
              v353 = (_BYTE *)v13;
              *(_QWORD *)&v354[8] = v34 + v33;
              if (v7)
                operator delete(v7);
              v7 = (_BYTE *)v40;
            }
            else
            {
              *v7++ = v14;
            }
            goto LABEL_83;
          }
          switch((char)v14)
          {
            case 'a':
              v17 = (void *)((unint64_t)__dst[0] | 0x4000200000000000);
              goto LABEL_81;
            case 'b':
              goto LABEL_74;
            case 'c':
              v17 = (void *)((unint64_t)__dst[0] | 0x400000000000000);
              goto LABEL_81;
            case 'd':
              for (j = 48; j != 58; ++j)
                __dst[j >> 6] = (void *)((unint64_t)__dst[j >> 6] | (1 << j));
              break;
            case 'e':
              v17 = (void *)((unint64_t)__dst[0] | 0x8000000);
              goto LABEL_81;
            default:
              if ((char)v14 == 115)
              {
                v17 = (void *)((unint64_t)__dst[0] | 0x100000000);
LABEL_81:
                __dst[0] = v17;
              }
              else
              {
                if ((char)v14 == 117)
                {
                  v16 = (void *)((unint64_t)__dst[1] | 0x80000000);
                  goto LABEL_16;
                }
LABEL_74:
                *(void **)((char *)__dst + ((v14 >> 3) & 0x18)) = (void *)(*(unint64_t *)((char *)__dst
                                                                                               + ((v14 >> 3) & 0x18)) | (1 << v14));
              }
              break;
          }
        }
        v7 = v15;
LABEL_83:
        *(_QWORD *)v354 = v7;
        if (++v11 == v12)
        {
          v44 = v353;
          if (v353 == v7)
          {
            v6 = a2;
          }
          else
          {
            v45 = v7 - 1;
            v6 = a2;
            do
            {
              *(void **)((char *)__dst + (((unint64_t)*v45 >> 3) & 0x18)) = (void *)((1 << *v45) | *(unint64_t *)((char *)__dst + (((unint64_t)*v45 >> 3) & 0x18)));
              *(_QWORD *)v354 = v45;
            }
            while (v45-- != v44);
            v7 = v44;
          }
          break;
        }
      }
    }
    v304 = (char *)v6[1];
    v305 = (char *)v6[2];
    if (v304 >= v305)
    {
      v307 = 0xCCCCCCCCCCCCCCCDLL * ((v304 - (_BYTE *)*v6) >> 3);
      v308 = v307 + 1;
      if (v307 + 1 > 0x666666666666666)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v309 = 0xCCCCCCCCCCCCCCCDLL * ((v305 - (_BYTE *)*v6) >> 3);
      if (2 * v309 > v308)
        v308 = 2 * v309;
      if (v309 >= 0x333333333333333)
        v310 = 0x666666666666666;
      else
        v310 = v308;
      if (v310)
        v310 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v310);
      else
        v311 = 0;
      v312 = v310 + 40 * v307;
      v313 = v310 + 40 * v311;
      *(_OWORD *)v312 = *(_OWORD *)__dst;
      *(_OWORD *)(v312 + 16) = *(_OWORD *)v342;
      *(_QWORD *)(v312 + 32) = v343;
      v306 = (void *)(v312 + 40);
      v315 = (char *)*v6;
      v314 = (char *)v6[1];
      if (v314 != *v6)
      {
        do
        {
          v316 = *(_OWORD *)(v314 - 40);
          v317 = *(_OWORD *)(v314 - 24);
          *(_BYTE *)(v312 - 8) = *(v314 - 8);
          *(_OWORD *)(v312 - 24) = v317;
          *(_OWORD *)(v312 - 40) = v316;
          v312 -= 40;
          v314 -= 40;
        }
        while (v314 != v315);
        v314 = (char *)*v6;
      }
      *v6 = (void *)v312;
      v6[1] = v306;
      v6[2] = (void *)v313;
      if (v314)
        operator delete(v314);
    }
    else
    {
      *(_OWORD *)v304 = *(_OWORD *)__dst;
      *((_OWORD *)v304 + 1) = *(_OWORD *)v342;
      *((_QWORD *)v304 + 4) = v343;
      v306 = v304 + 40;
    }
    v6[1] = v306;
    v318 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v306 - (_BYTE *)*v6) >> 3);
    if (v7)
    {
      v319 = v7;
LABEL_565:
      operator delete(v319);
      return (v318 - 1);
    }
    return (v318 - 1);
  }
  __p = 0;
  v349 = 0;
  v350 = 0;
  memset(&v347, 0, sizeof(v347));
  __dst[0] = 0;
  __dst[1] = 0;
  v332 = a5;
  if (a5)
    v48 = 2;
  else
    v48 = 1;
  v342[0] = 0;
  std::string::push_back(&v347, 91);
  v334 = a3;
  v49 = v48;
LABEL_93:
  v50 = *(unsigned __int8 *)(a4 + 23);
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v51 = a4;
    if (v49 >= v50 - 1)
      goto LABEL_469;
LABEL_98:
    v52 = (int)v49 + 1;
    v53 = *(unsigned __int8 *)(v51 + (int)v49);
    if ((v53 + 62) <= 0x32u)
    {
      if ((v50 & 0x80) != 0)
      {
        if (*(_QWORD *)(a4 + 8) == v52)
          goto LABEL_126;
        v54 = *(_QWORD *)a4;
      }
      else
      {
        v54 = a4;
        if (v50 == v52)
          goto LABEL_126;
      }
      v55 = *(unsigned __int8 *)(v54 + v52);
      if ((v53 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v53 & 0xF] >> (v55 >> 5)) & 1) != 0)
        {
          v52 = (int)v49 + 2;
          if ((v50 & 0x80) == 0)
          {
            v56 = a4;
            if (v50 == v52)
              goto LABEL_126;
            goto LABEL_121;
          }
          if (*(_QWORD *)(a4 + 8) != v52)
          {
            v56 = *(_QWORD *)a4;
LABEL_121:
            v59 = *(char *)(v56 + v52);
            v60 = v49 + 3;
            goto LABEL_122;
          }
        }
      }
      else
      {
        if (v53 <= 0xDF)
        {
          if ((char)v55 < -64)
            LODWORD(v52) = v49 + 2;
          goto LABEL_126;
        }
        if (((byte_1DED166DF[v55 >> 4] >> (v53 & 7)) & 1) != 0)
        {
          v52 = (int)v49 + 2;
          if ((v50 & 0x80) != 0)
          {
            v61 = *(_QWORD *)(a4 + 8);
            if (v61 == v52)
              goto LABEL_126;
            v58 = *(_QWORD *)a4;
            if (*(char *)(*(_QWORD *)a4 + v52) > -65)
              goto LABEL_126;
            LODWORD(v52) = v49 + 3;
            if (v61 == (_DWORD)v49 + 3)
              goto LABEL_126;
            v57 = (int)v52;
          }
          else
          {
            if (v50 == v52)
              goto LABEL_126;
            if (*(char *)(a4 + v52) >= -64)
              goto LABEL_126;
            LODWORD(v52) = v49 + 3;
            if (v50 == (_DWORD)v49 + 3)
              goto LABEL_126;
            v57 = (int)v52;
            v58 = a4;
          }
          v59 = *(char *)(v58 + v57);
          v60 = v49 + 4;
LABEL_122:
          if (v59 < -64)
            LODWORD(v52) = v60;
        }
      }
    }
LABEL_126:
    v339 = v52 - v49;
    if ((int)v52 - (int)v49 >= 2)
    {
      v62 = (int)v52;
      v63 = v49;
      if (v49 < (int)v52)
      {
        do
        {
          v64 = (std::string::value_type *)std::string::at((const std::string *)a4, v63);
          std::string::push_back(&v347, *v64);
          ++v63;
        }
        while (v62 != v63);
      }
      v65 = (char *)__dst[1];
      if (__dst[0] != __dst[1])
      {
        v66 = v349;
        do
        {
          if (v66 >= v350)
          {
            v68 = (unint64_t)__p;
            v69 = v66 - (_BYTE *)__p;
            v70 = v66 - (_BYTE *)__p + 1;
            if (v70 < 0)
              goto LABEL_573;
            v71 = v350 - (_BYTE *)__p;
            if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v70)
              v70 = 2 * v71;
            if (v71 >= 0x3FFFFFFFFFFFFFFFLL)
              v72 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
              v73 = (char *)operator new(v72);
            else
              v73 = 0;
            v74 = &v73[v69];
            v75 = &v73[v69];
            *v75 = *(v65 - 1);
            v67 = v75 + 1;
            if (v66 != (char *)v68)
            {
              v76 = &v66[~v68];
              do
              {
                v77 = *--v66;
                (v76--)[(_QWORD)v73] = v77;
              }
              while (v66 != (char *)v68);
              v66 = (char *)__p;
              v74 = v73;
            }
            __p = v74;
            v349 = v67;
            v350 = &v73[v72];
            if (v66)
              operator delete(v66);
          }
          else
          {
            *v66 = *(v65 - 1);
            v67 = v66 + 1;
          }
          v349 = v67;
          v65 = (char *)__dst[1] - 1;
          __dst[1] = v65;
          v66 = v67;
        }
        while (__dst[0] != v65);
      }
      v78 = std::string::at((const std::string *)a4, v49);
      v79 = (char *)v78;
      v80 = v349;
      if (v349 < v350)
      {
        *v349 = *v78;
        v81 = v80 + 1;
LABEL_151:
        v82 = v81;
LABEL_261:
        v349 = v82;
        goto LABEL_468;
      }
      v96 = (unint64_t)__p;
      v97 = v349 - (_BYTE *)__p;
      v98 = v349 - (_BYTE *)__p + 1;
      if (v98 < 0)
LABEL_573:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v99 = v350 - (_BYTE *)__p;
      if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v98)
        v98 = 2 * v99;
      if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
        v100 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v100 = v98;
      if (v100)
        v101 = (char *)operator new(v100);
      else
        v101 = 0;
      v148 = &v101[v97];
      v149 = &v101[v97];
      *v149 = *v79;
      v82 = v149 + 1;
      if (v80 == (char *)v96)
      {
LABEL_259:
        __p = v148;
        v349 = v82;
        v350 = &v101[v100];
        if (v80)
          operator delete(v80);
        goto LABEL_261;
      }
      v150 = &v80[~v96];
      do
      {
        v151 = *--v80;
        (v150--)[(_QWORD)v101] = v151;
      }
      while (v80 != (char *)v96);
LABEL_258:
      v80 = (char *)__p;
      v148 = v101;
      goto LABEL_259;
    }
    v83 = *std::string::at((const std::string *)a4, v49);
    v85 = (unint64_t)__dst[0];
    v84 = (char *)__dst[1];
    if (v83 == 92)
    {
      if (__dst[0] != __dst[1] && *((_BYTE *)__dst[1] - 1) == 92)
      {
        std::string::append(&v347, "\\\\");
        v86 = v349;
        if (v349 >= v350)
        {
          v161 = (unint64_t)__p;
          v162 = v349 - (_BYTE *)__p;
          v163 = v349 - (_BYTE *)__p + 1;
          if (v163 < 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v164 = v350 - (_BYTE *)__p;
          if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v163)
            v163 = 2 * v164;
          if (v164 >= 0x3FFFFFFFFFFFFFFFLL)
            v165 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v165 = v163;
          if (v165)
            v166 = (char *)operator new(v165);
          else
            v166 = 0;
          v192 = &v166[v162];
          v193 = &v166[v162];
          *v193 = 92;
          v87 = v193 + 1;
          if (v86 != (char *)v161)
          {
            v194 = &v86[~v161];
            do
            {
              v195 = *--v86;
              (v194--)[(_QWORD)v166] = v195;
            }
            while (v86 != (char *)v161);
            v86 = (char *)__p;
            v192 = v166;
          }
          __p = v192;
          v349 = v87;
          v350 = &v166[v165];
          if (v86)
            operator delete(v86);
        }
        else
        {
          *v349 = 92;
          v87 = v86 + 1;
        }
        v349 = v87;
        v102 = (char *)__dst[1] - 1;
        goto LABEL_343;
      }
      if (__dst[1] < v342[0])
      {
        *(_BYTE *)__dst[1] = 92;
        v102 = v84 + 1;
LABEL_343:
        __dst[1] = v102;
        goto LABEL_468;
      }
      v152 = (char *)__dst[1] - (char *)__dst[0];
      v153 = (char *)__dst[1] - (char *)__dst[0] + 1;
      if (v153 >= 0)
      {
        v154 = (char *)v342[0] - (char *)__dst[0];
        if (2 * ((char *)v342[0] - (char *)__dst[0]) > (unint64_t)v153)
          v153 = 2 * v154;
        if (v154 >= 0x3FFFFFFFFFFFFFFFLL)
          v155 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v155 = v153;
        if (v155)
          v156 = (char *)operator new(v155);
        else
          v156 = 0;
        v167 = &v156[v152];
        v168 = &v156[v152];
        *v168 = 92;
        v102 = v168 + 1;
        if ((char *)v85 != v84)
        {
          v169 = &v84[~v85];
          do
          {
            v170 = *--v84;
            (v169--)[(_QWORD)v156] = v170;
          }
          while (v84 != (char *)v85);
          v85 = (unint64_t)__dst[0];
          v167 = v156;
        }
        __dst[0] = v167;
        v342[0] = &v156[v155];
        if (v85)
          operator delete((void *)v85);
        goto LABEL_343;
      }
LABEL_581:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    v88 = v83;
    if (__dst[0] != __dst[1] && *((_BYTE *)__dst[1] - 1) == 92)
    {
      switch(v83)
      {
        case 'a':
          v89 = v349;
          if (v349 < v350)
            goto LABEL_301;
          v90 = (unint64_t)__p;
          v91 = v349 - (_BYTE *)__p;
          v92 = v349 - (_BYTE *)__p + 1;
          if (v92 < 0)
            goto LABEL_581;
          v93 = v350 - (_BYTE *)__p;
          if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v92)
            v92 = 2 * v93;
          if (v93 >= 0x3FFFFFFFFFFFFFFFLL)
            v94 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          if (v94)
            v95 = (char *)operator new(v94);
          else
            v95 = 0;
          v253 = &v95[v91];
          v254 = &v95[v91];
          *v254 = v88;
          v171 = v254 + 1;
          if (v89 != (char *)v90)
          {
            v255 = &v89[~v90];
            do
            {
              v256 = *--v89;
              (v255--)[(_QWORD)v95] = v256;
            }
            while (v89 != (char *)v90);
            v89 = (char *)__p;
            v253 = v95;
          }
          __p = v253;
          v349 = v171;
          v350 = &v95[v94];
          if (v89)
            operator delete(v89);
          goto LABEL_457;
        case 'b':
          goto LABEL_344;
        case 'c':
          v199 = v349;
          if (v349 >= v350)
          {
            v225 = (unint64_t)__p;
            v226 = v349 - (_BYTE *)__p;
            v227 = v349 - (_BYTE *)__p + 1;
            if (v227 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v228 = v350 - (_BYTE *)__p;
            if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v227)
              v227 = 2 * v228;
            if (v228 >= 0x3FFFFFFFFFFFFFFFLL)
              v229 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v229 = v227;
            if (v229)
              v230 = (char *)operator new(v229);
            else
              v230 = 0;
            v249 = &v230[v226];
            v250 = &v230[v226];
            *v250 = 58;
            v200 = v250 + 1;
            if (v199 != (char *)v225)
            {
              v251 = &v199[~v225];
              do
              {
                v252 = *--v199;
                (v251--)[(_QWORD)v230] = v252;
              }
              while (v199 != (char *)v225);
              v199 = (char *)__p;
              v249 = v230;
            }
            __p = v249;
            v349 = v200;
            v350 = &v230[v229];
            if (v199)
              operator delete(v199);
          }
          else
          {
            *v349 = 58;
            v200 = v199 + 1;
          }
          v349 = v200;
          std::string::append(&v347, "\\:");
          goto LABEL_466;
        case 'd':
          std::string::append(&v347, "0-9");
          v201 = 48;
          v202 = v349;
          do
          {
            if (v202 >= v350)
            {
              v204 = (unint64_t)__p;
              v205 = v202 - (_BYTE *)__p;
              v206 = v202 - (_BYTE *)__p + 1;
              if (v206 < 0)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v207 = v350 - (_BYTE *)__p;
              if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v206)
                v206 = 2 * v207;
              if (v207 >= 0x3FFFFFFFFFFFFFFFLL)
                v208 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v208 = v206;
              if (v208)
                v209 = (char *)operator new(v208);
              else
                v209 = 0;
              v210 = &v209[v205];
              v211 = &v209[v205];
              *v211 = v201;
              v203 = v211 + 1;
              if (v202 != (char *)v204)
              {
                v212 = &v202[~v204];
                do
                {
                  v213 = *--v202;
                  (v212--)[(_QWORD)v209] = v213;
                }
                while (v202 != (char *)v204);
                v202 = (char *)__p;
                v210 = v209;
              }
              __p = v210;
              v349 = v203;
              v350 = &v209[v208];
              if (v202)
                operator delete(v202);
            }
            else
            {
              *v202 = v201;
              v203 = v202 + 1;
            }
            v349 = v203;
            v202 = v203;
          }
          while (v201++ < 0x39);
          goto LABEL_466;
        case 'e':
          std::string::append(&v347, "\\u001b");
          v196 = v349;
          if (v349 < v350)
          {
            v198 = 27;
            goto LABEL_373;
          }
          v231 = (unint64_t)__p;
          v232 = v349 - (_BYTE *)__p;
          v233 = v349 - (_BYTE *)__p + 1;
          if (v233 < 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v234 = v350 - (_BYTE *)__p;
          if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v233)
            v233 = 2 * v234;
          if (v234 >= 0x3FFFFFFFFFFFFFFFLL)
            v220 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v220 = v233;
          if (v220)
            v221 = (char *)operator new(v220);
          else
            v221 = 0;
          v245 = &v221[v232];
          v257 = &v221[v232];
          *v257 = 27;
          v215 = v257 + 1;
          if (v196 == (char *)v231)
            goto LABEL_463;
          v258 = &v196[~v231];
          do
          {
            v259 = *--v196;
            (v258--)[(_QWORD)v221] = v259;
          }
          while (v196 != (char *)v231);
          goto LABEL_462;
        default:
          if (v83 == 115)
          {
            std::string::push_back(&v347, 32);
            v196 = v349;
            if (v349 < v350)
            {
              v198 = 32;
LABEL_373:
              *v196 = v198;
              v197 = v196 + 1;
              goto LABEL_374;
            }
            v241 = (unint64_t)__p;
            v242 = v349 - (_BYTE *)__p;
            v243 = v349 - (_BYTE *)__p + 1;
            if (v243 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v244 = v350 - (_BYTE *)__p;
            if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v243)
              v243 = 2 * v244;
            if (v244 >= 0x3FFFFFFFFFFFFFFFLL)
              v220 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v220 = v243;
            if (v220)
              v221 = (char *)operator new(v220);
            else
              v221 = 0;
            v245 = &v221[v242];
            v264 = &v221[v242];
            *v264 = 32;
            v215 = v264 + 1;
            if (v196 != (char *)v241)
            {
              v265 = &v196[~v241];
              do
              {
                v266 = *--v196;
                (v265--)[(_QWORD)v221] = v266;
              }
              while (v196 != (char *)v241);
              goto LABEL_462;
            }
          }
          else
          {
            if (v83 == 117)
            {
              v89 = v349;
              if (v349 >= v350)
              {
                v235 = (unint64_t)__p;
                v236 = v349 - (_BYTE *)__p;
                v237 = v349 - (_BYTE *)__p + 1;
                if (v237 < 0)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v238 = v350 - (_BYTE *)__p;
                if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v237)
                  v237 = 2 * v238;
                if (v238 >= 0x3FFFFFFFFFFFFFFFLL)
                  v239 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v239 = v237;
                if (v239)
                  v240 = (char *)operator new(v239);
                else
                  v240 = 0;
                v260 = &v240[v236];
                v261 = &v240[v236];
                *v261 = 95;
                v171 = v261 + 1;
                if (v89 != (char *)v235)
                {
                  v262 = &v89[~v235];
                  do
                  {
                    v263 = *--v89;
                    (v262--)[(_QWORD)v240] = v263;
                  }
                  while (v89 != (char *)v235);
                  v89 = (char *)__p;
                  v260 = v240;
                }
                __p = v260;
                v349 = v171;
                v350 = &v240[v239];
                if (v89)
                  operator delete(v89);
                v88 = 95;
              }
              else
              {
                v88 = 95;
LABEL_301:
                *v89 = v88;
                v171 = v89 + 1;
              }
LABEL_457:
              v349 = v171;
              std::string::push_back(&v347, v88);
              goto LABEL_466;
            }
LABEL_344:
            std::string::push_back(&v347, 92);
            std::string::push_back(&v347, v83);
            v196 = v349;
            if (v349 < v350)
            {
              *v349 = v83;
              v197 = v196 + 1;
LABEL_374:
              v215 = v197;
LABEL_465:
              v349 = v215;
LABEL_466:
              v146 = (char *)__dst[1] - 1;
              goto LABEL_467;
            }
            v216 = (unint64_t)__p;
            v217 = v349 - (_BYTE *)__p;
            v218 = v349 - (_BYTE *)__p + 1;
            if (v218 < 0)
              goto LABEL_581;
            v219 = v350 - (_BYTE *)__p;
            if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v218)
              v218 = 2 * v219;
            if (v219 >= 0x3FFFFFFFFFFFFFFFLL)
              v220 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v220 = v218;
            if (v220)
              v221 = (char *)operator new(v220);
            else
              v221 = 0;
            v245 = &v221[v217];
            v246 = &v221[v217];
            *v246 = v88;
            v215 = v246 + 1;
            if (v196 != (char *)v216)
            {
              v247 = &v196[~v216];
              do
              {
                v248 = *--v196;
                (v247--)[(_QWORD)v221] = v248;
              }
              while (v196 != (char *)v216);
LABEL_462:
              v196 = (char *)__p;
              v245 = v221;
            }
          }
LABEL_463:
          __p = v245;
          v349 = v215;
          v350 = &v221[v220];
          if (v196)
            operator delete(v196);
          goto LABEL_465;
      }
    }
    if (v49 > v48
      && *std::string::at((const std::string *)a4, v49 - 1) != 92
      && v83 - 36 <= 0x3A
      && ((1 << (v83 - 36)) & 0x400000000000005) != 0)
    {
      std::string::push_back(&v347, 92);
      std::string::push_back(&v347, v83);
      v80 = v349;
      if (v349 < v350)
      {
        *v349 = v83;
        v81 = v80 + 1;
        goto LABEL_151;
      }
      v188 = (unint64_t)__p;
      v189 = v349 - (_BYTE *)__p;
      v190 = v349 - (_BYTE *)__p + 1;
      if (v190 >= 0)
      {
        v191 = v350 - (_BYTE *)__p;
        if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v190)
          v190 = 2 * v191;
        if (v191 >= 0x3FFFFFFFFFFFFFFFLL)
          v100 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v100 = v190;
        if (v100)
          v101 = (char *)operator new(v100);
        else
          v101 = 0;
        v148 = &v101[v189];
        v222 = &v101[v189];
        *v222 = v88;
        v82 = v222 + 1;
        if (v80 == (char *)v188)
          goto LABEL_259;
        v223 = &v80[~v188];
        do
        {
          v224 = *--v80;
          (v223--)[(_QWORD)v101] = v224;
        }
        while (v80 != (char *)v188);
        goto LABEL_258;
      }
      goto LABEL_581;
    }
    v103 = (char *)__dst[1] - (char *)__dst[0];
    if ((void *)((char *)__dst[1] - (char *)__dst[0]) < (void *)2
      || (v104 = (char *)__dst[1] - 1, *((_BYTE *)__dst[1] - 1) != 45))
    {
      if (__dst[1] >= v342[0])
      {
        v157 = v103 + 1;
        if (v103 + 1 < 0)
          goto LABEL_581;
        v158 = (char *)v342[0] - (char *)__dst[0];
        if (2 * ((char *)v342[0] - (char *)__dst[0]) > v157)
          v157 = 2 * v158;
        if (v158 >= 0x3FFFFFFFFFFFFFFFLL)
          v159 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v159 = v157;
        if (v159)
          v160 = (char *)operator new(v159);
        else
          v160 = 0;
        v172 = &v160[v103];
        v173 = &v160[v103];
        *v173 = v83;
        v147 = v173 + 1;
        if ((char *)v85 != v84)
        {
          v174 = &v84[~v85];
          do
          {
            v175 = *--v84;
            (v174--)[(_QWORD)v160] = v175;
          }
          while (v84 != (char *)v85);
          v85 = (unint64_t)__dst[0];
          v172 = v160;
        }
        __dst[0] = v172;
        v342[0] = &v160[v159];
        if (v85)
          operator delete((void *)v85);
      }
      else
      {
        *(_BYTE *)__dst[1] = v83;
        v147 = v84 + 1;
      }
      __dst[1] = v147;
      v176 = v349;
      if (v349 >= v350)
      {
        v178 = (unint64_t)__p;
        v179 = v349 - (_BYTE *)__p;
        v180 = v349 - (_BYTE *)__p + 1;
        if (v180 < 0)
          goto LABEL_581;
        v181 = v350 - (_BYTE *)__p;
        if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v180)
          v180 = 2 * v181;
        if (v181 >= 0x3FFFFFFFFFFFFFFFLL)
          v182 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v182 = v180;
        if (v182)
          v183 = (char *)operator new(v182);
        else
          v183 = 0;
        v184 = &v183[v179];
        v185 = &v183[v179];
        *v185 = v88;
        v177 = v185 + 1;
        if (v176 != (char *)v178)
        {
          v186 = &v176[~v178];
          do
          {
            v187 = *--v176;
            (v186--)[(_QWORD)v183] = v187;
          }
          while (v176 != (char *)v178);
          v176 = (char *)__p;
          v184 = v183;
        }
        __p = v184;
        v349 = v177;
        v350 = &v183[v182];
        if (v176)
          operator delete(v176);
      }
      else
      {
        *v349 = v83;
        v177 = v176 + 1;
      }
      v349 = v177;
      std::string::push_back(&v347, v88);
      goto LABEL_468;
    }
    std::string::push_back(&v347, v83);
    --__dst[1];
    v105 = *(v84 - 2);
    if ((int)v105 > v83)
      goto LABEL_251;
    v336 = v49;
    while (1)
    {
      if ((*(_BYTE *)(a1 + 120) & 8) == 0)
      {
        v107 = v349;
        v106 = (unint64_t)v350;
LABEL_193:
        if ((unint64_t)v107 >= v106)
        {
          v112 = (unint64_t)__p;
          v113 = v107 - (_BYTE *)__p;
          v114 = v107 - (_BYTE *)__p + 1;
          if (v114 < 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v115 = v106 - (_QWORD)__p;
          if (2 * v115 > v114)
            v114 = 2 * v115;
          if (v115 >= 0x3FFFFFFFFFFFFFFFLL)
            v116 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
            v117 = (char *)operator new(v116);
          else
            v117 = 0;
          v124 = &v117[v113];
          v125 = &v117[v113];
          *v125 = v105;
          v111 = v125 + 1;
          if (v107 != (char *)v112)
          {
            v126 = &v107[~v112];
            do
            {
              v127 = *--v107;
              (v126--)[(_QWORD)v117] = v127;
            }
            while (v107 != (char *)v112);
            v107 = (char *)__p;
            v124 = v117;
          }
          __p = v124;
          v349 = v111;
          v350 = &v117[v116];
          if (v107)
            operator delete(v107);
        }
        else
        {
          *v107 = v105;
          v111 = v107 + 1;
        }
        v349 = v111;
        goto LABEL_249;
      }
      if ((v105 & 0x80) != 0)
        v108 = __maskrune(v105, 0x100uLL);
      else
        v108 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v105 + 60) & 0x100;
      v107 = v349;
      v106 = (unint64_t)v350;
      if (!v108)
        goto LABEL_193;
      v109 = case_folding[v105];
      if (v349 >= v350)
      {
        v118 = (unint64_t)__p;
        v119 = v349 - (_BYTE *)__p;
        v120 = v349 - (_BYTE *)__p + 1;
        if (v120 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v121 = v350 - (_BYTE *)__p;
        if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v120)
          v120 = 2 * v121;
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
          v122 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
          v123 = (char *)operator new(v122);
        else
          v123 = 0;
        v128 = &v123[v119];
        v129 = &v123[v119];
        *v129 = v109;
        v110 = v129 + 1;
        if (v107 != (char *)v118)
        {
          v130 = &v107[~v118];
          do
          {
            v131 = *--v107;
            (v130--)[(_QWORD)v123] = v131;
          }
          while (v107 != (char *)v118);
          v107 = (char *)__p;
          v128 = v123;
        }
        __p = v128;
        v349 = v110;
        v350 = &v123[v122];
        if (v107)
          operator delete(v107);
      }
      else
      {
        *v349 = v109;
        v110 = v107 + 1;
      }
      v349 = v110;
      v132 = case_folding[v105 & 0xFFFFFEFF | 0x100];
      if (v110 >= v350)
        break;
      *v110 = v132;
      v133 = (uint64_t)(v110 + 1);
LABEL_245:
      v349 = (char *)v133;
      if (v105 == v109)
        v145 = v132;
      else
        v145 = v109;
      std::string::push_back(&v347, v145);
LABEL_249:
      if ((int)++v105 > v83)
      {
        v104 = (char *)__dst[1];
LABEL_251:
        v146 = v104 - 1;
LABEL_467:
        __dst[1] = v146;
LABEL_468:
        v49 += v339;
        goto LABEL_93;
      }
    }
    v134 = v109;
    v135 = v48;
    v136 = (unint64_t)__p;
    v137 = v110 - (_BYTE *)__p;
    v138 = v110 - (_BYTE *)__p + 1;
    if (v138 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v139 = v350 - (_BYTE *)__p;
    if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v138)
      v138 = 2 * v139;
    if (v139 >= 0x3FFFFFFFFFFFFFFFLL)
      v140 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v140 = v138;
    if (v140)
      v141 = operator new(v140);
    else
      v141 = 0;
    v142 = (char *)v141 + v140;
    *((_BYTE *)v141 + v137) = v132;
    v133 = (uint64_t)v141 + v137 + 1;
    if (v110 == (char *)v136)
    {
      __p = (char *)v141 + v137;
      v349 = (char *)v141 + v137 + 1;
      v350 = v142;
      v48 = v135;
      v109 = v134;
    }
    else
    {
      v143 = &v110[~v136];
      v48 = v135;
      do
      {
        v144 = *--v110;
        (v143--)[(_QWORD)v141] = v144;
      }
      while (v110 != (char *)v136);
      v110 = (char *)__p;
      __p = v141;
      v349 = (char *)v133;
      v350 = v142;
      v109 = v134;
      if (!v110)
        goto LABEL_244;
    }
    operator delete(v110);
LABEL_244:
    v49 = v336;
    goto LABEL_245;
  }
  if (v49 < *(_QWORD *)(a4 + 8) - 1)
  {
    v51 = *(_QWORD *)a4;
    goto LABEL_98;
  }
LABEL_469:
  v267 = (char *)__dst[0];
  if (__dst[0] == __dst[1])
  {
    v269 = v334;
  }
  else
  {
    v268 = v349;
    v267 = (char *)__dst[1];
    v269 = v334;
    do
    {
      if (v268 >= v350)
      {
        v271 = (unint64_t)__p;
        v272 = v268 - (_BYTE *)__p;
        v273 = v268 - (_BYTE *)__p + 1;
        if (v273 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v274 = v350 - (_BYTE *)__p;
        if (2 * (v350 - (_BYTE *)__p) > (unint64_t)v273)
          v273 = 2 * v274;
        if (v274 >= 0x3FFFFFFFFFFFFFFFLL)
          v275 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v275 = v273;
        if (v275)
          v276 = (char *)operator new(v275);
        else
          v276 = 0;
        v277 = &v276[v272];
        v278 = &v276[v272];
        *v278 = *(v267 - 1);
        v270 = v278 + 1;
        if (v268 != (char *)v271)
        {
          v279 = &v268[~v271];
          do
          {
            v280 = *--v268;
            (v279--)[(_QWORD)v276] = v280;
          }
          while (v268 != (char *)v271);
          v268 = (char *)__p;
          v277 = v276;
        }
        __p = v277;
        v349 = v270;
        v350 = &v276[v275];
        if (v268)
          operator delete(v268);
      }
      else
      {
        *v268 = *(v267 - 1);
        v270 = v268 + 1;
      }
      v349 = v270;
      v267 = (char *)__dst[1] - 1;
      __dst[1] = v267;
      v268 = v270;
    }
    while (__dst[0] != v267);
  }
  std::string::push_back(&v347, 93);
  if (v267)
    operator delete(v267);
  LOBYTE(__dst[0]) = 0;
  v342[0] = 0;
  v342[1] = 0;
  __dst[1] = 0;
  v346 = v332;
  v352 = 0;
  if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v281 = &v347;
  else
    v281 = (std::string *)v347.__r_.__value_.__r.__words[0];
  if ((v347.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v347.__r_.__value_.__r.__words[2]);
  else
    size = v347.__r_.__value_.__l.__size_;
  UTFString::to_utf16((std::basic_string<char16_t> *)&v353, (const char *)v281, size);
  v283 = uset_openPatternOptions();
  if (v352)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v284 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v284, OS_LOG_TYPE_ERROR, "create uset error!", buf, 2u);
    }
    v286 = "create uset error!";
LABEL_511:
    Diagnostics::log(3, v286, v285);
    goto LABEL_512;
  }
  v287 = v283;
  MEMORY[0x1DF0EE01C]();
  MEMORY[0x1DF0EE064](v287);
  v344 = operator new[]();
  v345 = uset_serialize();
  if (v352)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v288 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v288, OS_LOG_TYPE_ERROR, "Serialization error!", buf, 2u);
    }
    v286 = "Serialization error!";
    goto LABEL_511;
  }
  uset_close();
  if (!uset_getSerializedSet())
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v331 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v331, OS_LOG_TYPE_ERROR, "Get SerializedSet error!", buf, 2u);
    }
    v286 = "Get SerializedSet error!";
    goto LABEL_511;
  }
LABEL_512:
  if ((v354[15] & 0x80000000) != 0)
    operator delete(v353);
  v290 = (char *)__p;
  v289 = v349;
  v291 = v349 - (_BYTE *)__p;
  v292 = (char *)__dst[1];
  if ((void *)((char *)v342[1] - (char *)__dst[1]) < (void *)(v349 - (_BYTE *)__p))
  {
    if ((v291 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v293 = 2 * (uint64_t)v342[1];
    if (2 * (uint64_t)v342[1] <= v291)
      v293 = v349 - (_BYTE *)__p;
    std::vector<signed char>::__vallocate[abi:ne180100](&__dst[1], v293);
    v292 = (char *)v342[0];
    goto LABEL_523;
  }
  if ((char *)v342[0] - (char *)__dst[1] >= v291)
  {
LABEL_523:
    if (v289 != v290)
      memmove(v292, v290, v291);
    v295 = &v292[v291];
    goto LABEL_526;
  }
  v294 = (char *)__p + (char *)v342[0] - (char *)__dst[1];
  if (v349 != v294)
    memmove(__dst[1], v294, v349 - v294);
  v295 = (char *)__dst[1] + v289 - v294;
LABEL_526:
  v342[0] = v295;
  v296 = v269[2];
  v297 = v269[1];
  if (v297 >= v296)
  {
    v299 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v297 - *v269) >> 4);
    if (v299 + 1 > 0x333333333333333)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v300 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v296 - *v269) >> 4);
    v301 = 2 * v300;
    if (2 * v300 <= v299 + 1)
      v301 = v299 + 1;
    if (v300 >= 0x199999999999999)
      v302 = 0x333333333333333;
    else
      v302 = v301;
    v355 = v269 + 2;
    if (v302)
    {
      if (v302 > 0x333333333333333)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v303 = (char *)operator new(80 * v302);
    }
    else
    {
      v303 = 0;
    }
    v353 = v303;
    *(_QWORD *)v354 = &v303[80 * v299];
    *(_QWORD *)&v354[8] = *(_QWORD *)v354;
    *(_QWORD *)&v354[16] = &v303[80 * v302];
    FRCodeUMap::FRCodeUMap(*(FRCodeUMap **)v354, (const FRCodeUMap *)__dst);
    v320 = *(_QWORD *)v354;
    *(_QWORD *)&v354[8] += 80;
    v322 = *v269;
    v321 = v269[1];
    for (k = 80; ; k -= 80)
    {
      v324 = v320 + k;
      if (v321 + k - 80 == v322)
        break;
      v325 = (const FRCodeUMap *)(v321 + k - 160);
      FRCodeUMap::FRCodeUMap((FRCodeUMap *)(v324 - 160), v325);
    }
    v326 = v269[2];
    v340 = *(_QWORD *)&v354[8];
    v327 = *(_OWORD *)&v354[8];
    v328 = *(_OWORD *)v269;
    *v269 = v324 - 80;
    *(_OWORD *)v354 = v328;
    *(_OWORD *)(v269 + 1) = v327;
    *(_QWORD *)&v354[16] = v326;
    v353 = (_BYTE *)v328;
    std::__split_buffer<FRCodeUMap>::~__split_buffer((uint64_t)&v353);
    v298 = v340;
  }
  else
  {
    FRCodeUMap::FRCodeUMap((FRCodeUMap *)v269[1], (const FRCodeUMap *)__dst);
    v298 = v297 + 80;
    v269[1] = v297 + 80;
  }
  v269[1] = v298;
  v329 = (uint64_t)(v298 - *v269) >> 4;
  FRCodeUMap::~FRCodeUMap((FRCodeUMap *)__dst);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  LODWORD(v318) = -858993459 * v329;
  v319 = __p;
  if (__p)
  {
    v349 = (char *)__p;
    goto LABEL_565;
  }
  return (v318 - 1);
}

void sub_1DE9CC5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t boost::basic_string_ref<char,std::char_traits<char>>::at(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int8x16_t v4;
  uint64_t v5;
  std::logic_error v6;

  if (a2 <= a3)
  {
    std::logic_error::logic_error(&v6, "boost::string_ref::at");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    v4.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/1ce10175-54cc-11ef-a474-76625042721f/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/utility/string_ref.hpp";
    v4.i64[1] = (uint64_t)"const charT &boost::basic_string_ref<char>::at(size_t) const [charT = char, traits = std::char_traits<char>]";
    v5 = 139;
    boost::throw_exception<std::out_of_range>(&v6, &v4);
  }
  return a1 + a3;
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1, int8x16_t *a2)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_1EA9264B8;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *(_QWORD *)exception = &off_1EA926440;
  *((_QWORD *)exception + 1) = &unk_1EA926470;
  *((_QWORD *)exception + 3) = &unk_1EA926498;
  *((_QWORD *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1DF0EC9CC](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::out_of_range>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1EA9264B8;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5028] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1EA9264E8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1EA926440;
  *(_QWORD *)(v2 + 8) = &unk_1EA926470;
  *(_QWORD *)(v2 + 24) = &unk_1EA926498;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::out_of_range>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_1DE9CC9F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1DF0EC9CC](a1 + 8);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1DF0EC9CCLL);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1DF0EC9CC](a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1DF0EC9CCLL);
}

{
  *a1 = &unk_1EA9264E8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x1DF0EC9CC](a1 - 2);
  JUMPOUT(0x1DF0ED014);
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1EA9264B8;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5028] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1EA9264E8;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1EA926440;
  *(_QWORD *)(a1 + 8) = &unk_1EA926470;
  *(_QWORD *)(a1 + 24) = &unk_1EA926498;
  return a1;
}

uint64_t std::__split_buffer<FRCodeUMap>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    FRCodeUMap::~FRCodeUMap((FRCodeUMap *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void FRCode::compile(uint64_t a1, std::string **a2)
{
  std::__shared_weak_count *v4;
  std::string *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  _BYTE *v12;
  std::__shared_weak_count *size;
  uint64_t *data;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  unint64_t v37;
  std::string::size_type v38;
  int v39;
  std::string::size_type v40;
  uint64_t *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string::size_type v56;
  int v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  int v73;
  std::string::size_type v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  void *v101;
  int v102;
  int v103;
  unint64_t v104;
  __int128 *v105;
  __int128 v106;
  NSObject *v107;
  const char *v108;
  std::string *v109;
  std::string *v110;
  int v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  _BOOL4 v120;
  const char *v121;
  char *v122;
  int v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  int v127;
  char *v128;
  _BYTE *v129;
  int previous_op;
  int v131;
  int v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  NSObject *v136;
  _BOOL4 v137;
  _BOOL4 v138;
  _BOOL4 v139;
  std::string::size_type v140;
  std::string *v141;
  char *v142;
  _BOOL4 v143;
  _BOOL4 v144;
  int v145;
  int v146;
  _QWORD *v147;
  NSObject *v148;
  const char *v149;
  int v150;
  int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  NSObject *v162;
  const char *v163;
  _BYTE *v164;
  _BYTE *v165;
  int v166;
  std::string *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  _BYTE *v177;
  unsigned int v178;
  char *v179;
  int v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v184;
  uint64_t v185;
  int v186;
  int v187;
  _QWORD *v188;
  int v189;
  _QWORD *v190;
  unint64_t v191;
  int8x8_t v192;
  unint64_t v193;
  uint8x8_t v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  int v208;
  int i;
  int v210;
  int j;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  int v215;
  char *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  _DWORD *v221;
  _DWORD *v222;
  _DWORD *v223;
  uint64_t v224;
  int v225;
  int v226;
  NSObject *v227;
  const char *v228;
  char *v229;
  char *v230;
  _BYTE *v231;
  int v232;
  int v233;
  int v234;
  _QWORD *v235;
  char *v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unsigned __int8 **v241;
  unsigned __int8 *v242;
  uint64_t v243;
  unint64_t v244;
  _BOOL4 v245;
  std::string::size_type v246;
  int v247;
  std::string *v248;
  std::string::size_type v249;
  int low;
  int high;
  int v252;
  _QWORD *v253;
  char *v254;
  int v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  _BYTE *v261;
  unsigned int v262;
  int v263;
  unsigned int v264;
  _QWORD *v265;
  char *v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  _DWORD *v270;
  uint64_t v271;
  int v272;
  char *v273;
  char *v274;
  _BYTE *v275;
  char *v276;
  int v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  _DWORD *v286;
  uint64_t v287;
  int v288;
  NSObject *v289;
  NSObject *v290;
  _DWORD *v291;
  _DWORD *v292;
  _DWORD *v293;
  _DWORD *v294;
  uint64_t v295;
  int v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  _DWORD *v311;
  _DWORD *v312;
  _DWORD *v313;
  uint64_t v314;
  int v315;
  unint64_t v316;
  _DWORD *v317;
  _DWORD *v318;
  _DWORD *v319;
  uint64_t v320;
  int v321;
  NSObject *v322;
  int *v323;
  int v324;
  int v325;
  unint64_t v326;
  unsigned int v327;
  int v328;
  char *v329;
  _DWORD *v330;
  int v331;
  char *v332;
  char *v333;
  char *v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  char *v339;
  char *v340;
  int v341;
  int v342;
  int *v343;
  char *v344;
  int *v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  char *v351;
  int *v352;
  int v353;
  int v354;
  char *v355;
  int *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char *v361;
  int *v362;
  int v363;
  char *v364;
  char *v365;
  char *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  char *v372;
  int v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  _DWORD *v381;
  uint64_t v382;
  int v383;
  unsigned int *v384;
  unsigned int *v385;
  unint64_t v386;
  int v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  char *v396;
  int v397;
  int v398;
  int *v399;
  char *v400;
  int *v401;
  char *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  unint64_t v406;
  char *v407;
  int *v408;
  int v409;
  int v410;
  char *v411;
  int *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char *v417;
  int *v418;
  int v419;
  char *v420;
  _DWORD *v421;
  uint64_t v422;
  int v423;
  int v424;
  char *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char *v432;
  char *v433;
  int v434;
  _DWORD *v435;
  _DWORD *v436;
  _DWORD *v437;
  _DWORD *v438;
  uint64_t v439;
  int v440;
  _DWORD *v441;
  _DWORD *v442;
  _DWORD *v443;
  _DWORD *v444;
  uint64_t v445;
  int v446;
  _DWORD *v447;
  uint64_t v448;
  int v449;
  int v450;
  _QWORD *v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  _DWORD *v463;
  _DWORD *v464;
  _DWORD *v465;
  _DWORD *v466;
  uint64_t v467;
  int v468;
  int v469;
  unint64_t v470;
  unint64_t v471;
  std::string::size_type v472;
  std::string::size_type k;
  int v474;
  _QWORD *v475;
  char *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  _DWORD *v481;
  _DWORD *v482;
  _DWORD *v483;
  _DWORD *v484;
  uint64_t v485;
  int v486;
  std::string::size_type v487;
  _DWORD *v488;
  uint64_t v489;
  int v490;
  _DWORD *v491;
  uint64_t v492;
  int v493;
  _DWORD *v494;
  uint64_t v495;
  int v496;
  _DWORD *v497;
  uint64_t v498;
  int v499;
  _DWORD *v500;
  uint64_t v501;
  int v502;
  _DWORD *v503;
  uint64_t v504;
  int v505;
  _DWORD *v506;
  uint64_t v507;
  int v508;
  _DWORD *v509;
  uint64_t v510;
  int v511;
  _DWORD *v512;
  uint64_t v513;
  int v514;
  _DWORD *v515;
  uint64_t v516;
  int v517;
  char *v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  char *v523;
  unint64_t v524;
  _DWORD *v525;
  _DWORD *v526;
  uint64_t v527;
  int v528;
  unint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  _DWORD *v533;
  BOOL v534;
  int v535;
  BOOL v537;
  unsigned int v538;
  int m;
  int v540;
  BOOL v541;
  char v542;
  char *v543;
  unint64_t v544;
  _DWORD *v545;
  char *v546;
  _DWORD *v547;
  unsigned int v548;
  unsigned int v549;
  _DWORD *v550;
  int v551;
  int64_t v552;
  int v553;
  BOOL v554;
  unsigned int v555;
  int64_t v556;
  char *v557;
  char *v558;
  char *v559;
  NSObject *v560;
  const char *v561;
  unsigned __int8 *v562;
  unsigned __int8 *v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  unint64_t v570;
  unint64_t v571;
  size_t v572;
  char *v573;
  unint64_t v574;
  unint64_t v575;
  char *v576;
  char *v577;
  unsigned __int8 *v578;
  unsigned __int8 *v579;
  unsigned __int8 v580;
  char *v581;
  unsigned __int8 *v582;
  unsigned __int8 v583;
  unsigned int v584;
  _OWORD *v585;
  char *v586;
  unint64_t v587;
  _OWORD *v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  _OWORD *v592;
  unint64_t v593;
  __int128 v594;
  __int128 v595;
  char *v596;
  unsigned __int8 *v597;
  unsigned __int8 *v598;
  unsigned int v599;
  _OWORD *v600;
  char *v601;
  unint64_t v602;
  _OWORD *v603;
  unint64_t v604;
  unint64_t v605;
  uint64_t v606;
  _OWORD *v607;
  unint64_t v608;
  __int128 v609;
  __int128 v610;
  char *v611;
  void *v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  char *v616;
  uint64_t v617;
  char *v618;
  uint64_t v619;
  uint64_t v620;
  char *v621;
  unsigned int v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  _QWORD *v626;
  uint64_t v627;
  unint64_t v628;
  void *v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  int v636;
  std::string v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  void *v641;
  char *v642;
  char *v643;
  void *v644;
  char *v645;
  char *v646;
  void *v647;
  char *v648;
  char *v649;
  void *__p;
  uint64_t *v651;
  unint64_t v652;
  void *v653;
  unsigned __int8 *v654;
  uint64_t v655;
  void *v656;
  unsigned __int8 *v657;
  char *v658;
  void *v659;
  char *v660;
  char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  void *v665;
  char *v666;
  unint64_t v667;
  void *__src;
  char *v669;
  unint64_t v670;
  _QWORD *v671;
  std::__shared_weak_count *v672;
  uint64_t *v673;
  std::__shared_weak_count *v674;
  std::string *v675;
  std::__shared_weak_count *v676;
  uint64_t *v677;
  std::__shared_weak_count *v678;
  uint8_t buf[4];
  _BYTE *v680;
  _BYTE v681[32];
  uint64_t v682;
  uint64_t v683;

  v683 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v675 = *a2;
  v676 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v681, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)&v681[16] = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)v681 = v8;
  }
  v9 = v681[23];
  if (v681[23] < 0)
    v9 = *(_QWORD *)&v681[8];
  v10 = v9 + 1;
  v11 = (void *)operator new[]();
  *(_QWORD *)(a1 + 24) = v11;
  if (v681[23] >= 0)
    v12 = v681;
  else
    v12 = *(_BYTE **)v681;
  memcpy(v11, v12, v10);
  data = (uint64_t *)v5[9].__r_.__value_.__l.__data_;
  size = (std::__shared_weak_count *)v5[9].__r_.__value_.__l.__size_;
  __src = data;
  v669 = (char *)size;
  if (size)
  {
    v15 = (unint64_t *)&size->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_DWORD *)(a1 + 4) = (data[1] - *data) >> 5;
  *(_QWORD *)(a1 + 16) = operator new[]();
  *(_QWORD *)(a1 + 8) = operator new[]();
  if (*(_DWORD *)(a1 + 4))
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *data;
      if (v18 >= (data[1] - *data) >> 5)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v20 = (_QWORD *)(v19 + v17);
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + v18) = *(_DWORD *)(v19 + v17 + 24);
      LODWORD(v19) = *(char *)(v19 + v17 + 23);
      if ((v19 & 0x80000000) != 0)
        v19 = v20[1];
      else
        v19 = v19;
      v21 = v19 + 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = operator new[]();
      if (*((char *)v20 + 23) < 0)
        v20 = (_QWORD *)*v20;
      memcpy(*(void **)(*(_QWORD *)(a1 + 8) + 8 * v18++), v20, v21);
      v17 += 32;
    }
    while (v18 < *(unsigned int *)(a1 + 4));
  }
  if (size)
  {
    v22 = (unint64_t *)&size->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if ((v681[23] & 0x80000000) != 0)
    operator delete(*(void **)v681);
  if (v4)
  {
    v24 = (unint64_t *)&v4->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v26 = *a2;
  v27 = (std::__shared_weak_count *)(*a2)[8].__r_.__value_.__r.__words[2];
  v673 = (uint64_t *)(*a2)[8].__r_.__value_.__l.__size_;
  v674 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v26 = *a2;
  }
  if (v26[6].__r_.__value_.__s.__data_[1])
    *(_QWORD *)(a1 + 120) |= 1uLL;
  if (v26[6].__r_.__value_.__s.__data_[0])
    *(_QWORD *)(a1 + 120) |= 8uLL;
  v31 = v26[9].__r_.__value_.__l.__data_;
  v30 = (std::__shared_weak_count *)v26[9].__r_.__value_.__l.__size_;
  v671 = v31;
  v672 = v30;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *v31;
  v35 = v31[1];
  while (v34 != v35)
  {
    if ((*(_DWORD *)(v34 + 24) & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 120) |= 2uLL;
      break;
    }
    v34 += 32;
  }
  __src = 0;
  v669 = 0;
  v670 = 0;
  v665 = 0;
  v666 = 0;
  v667 = 0;
  v662 = 0;
  v663 = 0;
  v664 = 0;
  v659 = 0;
  v660 = 0;
  v661 = 0;
  v656 = 0;
  v657 = 0;
  v658 = 0;
  v653 = 0;
  v654 = 0;
  v655 = 0;
  v36 = *a2;
  v651 = 0;
  v652 = 0;
  v37 = HIBYTE(v36[3].__r_.__value_.__r.__words[2]);
  if ((v37 & 0x80u) != 0)
    v37 = v36[3].__r_.__value_.__l.__size_;
  __p = 0;
  if (v37)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      if ((!v38 || *std::string::at(v36 + 3, (v38 - 1)) != 92) && *std::string::at(v36 + 3, v38) == 41)
        ++v39;
      ++v38;
      v40 = HIBYTE(v36[3].__r_.__value_.__r.__words[2]);
      if ((v40 & 0x80u) != 0)
        v40 = v36[3].__r_.__value_.__l.__size_;
    }
    while (v40 > v38);
    v41 = v651;
    v37 = v652;
    v42 = (v39 + 1) + 1;
    v43 = __p;
  }
  else
  {
    v43 = 0;
    v41 = 0;
    v42 = 2;
  }
  v44 = ((char *)v41 - v43) >> 3;
  if ((unint64_t)(v44 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v45 = v37 - (_QWORD)v43;
  v46 = v45 >> 2;
  if (v45 >> 2 <= (unint64_t)(v44 + 1))
    v46 = v44 + 1;
  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v46;
  if (v47)
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v652, v47);
  else
    v48 = 0;
  v49 = (uint64_t *)&v48[8 * v44];
  v50 = &v48[8 * v47];
  *v49 = (v42 << 32) | 1;
  v51 = v49 + 1;
  v53 = (char *)__p;
  v52 = (char *)v651;
  if (v651 != __p)
  {
    do
    {
      v54 = *((_QWORD *)v52 - 1);
      v52 -= 8;
      *--v49 = v54;
    }
    while (v52 != v53);
    v52 = (char *)__p;
  }
  __p = v49;
  v651 = v51;
  v652 = (unint64_t)v50;
  if (v52)
    operator delete(v52);
  v651 = v51;
  v55 = HIBYTE(v36[1].__r_.__value_.__r.__words[2]);
  if ((v55 & 0x80u) != 0)
    v55 = v36[1].__r_.__value_.__l.__size_;
  if (v55)
  {
    v56 = 0;
    v57 = 0;
    do
    {
      if ((!v56 || *std::string::at(v36 + 1, (v56 - 1)) != 92) && *std::string::at(v36 + 1, v56) == 41)
        ++v57;
      ++v56;
      v58 = HIBYTE(v36[1].__r_.__value_.__r.__words[2]);
      if ((v58 & 0x80u) != 0)
        v58 = v36[1].__r_.__value_.__l.__size_;
    }
    while (v58 > v56);
    v51 = v651;
  }
  else
  {
    v57 = 0;
  }
  v59 = v42 + (v57 + 1);
  v60 = *((unsigned int *)v51 - 1);
  if ((unint64_t)v51 >= v652)
  {
    v62 = ((char *)v51 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v63 = (uint64_t)(v652 - (_QWORD)__p) >> 2;
    if (v63 <= v62 + 1)
      v63 = v62 + 1;
    if (v652 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v652, v64);
    else
      v65 = 0;
    v66 = (uint64_t *)&v65[8 * v62];
    v67 = &v65[8 * v64];
    *v66 = v60 | (v59 << 32);
    v61 = v66 + 1;
    v69 = (char *)__p;
    v68 = (char *)v651;
    if (v651 != __p)
    {
      do
      {
        v70 = *((_QWORD *)v68 - 1);
        v68 -= 8;
        *--v66 = v70;
      }
      while (v68 != v69);
      v68 = (char *)__p;
    }
    __p = v66;
    v651 = v61;
    v652 = (unint64_t)v67;
    if (v68)
      operator delete(v68);
  }
  else
  {
    *v51 = v60 | (v59 << 32);
    v61 = v51 + 1;
  }
  v651 = v61;
  v71 = HIBYTE(v36[4].__r_.__value_.__r.__words[2]);
  if ((v71 & 0x80u) != 0)
    v71 = v36[4].__r_.__value_.__l.__size_;
  if (v71)
  {
    v72 = 0;
    v73 = 0;
    do
    {
      if ((!v72 || *std::string::at(v36 + 4, (v72 - 1)) != 92) && *std::string::at(v36 + 4, v72) == 41)
        ++v73;
      ++v72;
      v74 = HIBYTE(v36[4].__r_.__value_.__r.__words[2]);
      if ((v74 & 0x80u) != 0)
        v74 = v36[4].__r_.__value_.__l.__size_;
    }
    while (v74 > v72);
    v61 = v651;
  }
  else
  {
    v73 = 0;
  }
  v75 = *((unsigned int *)v61 - 1);
  v76 = (v59 + v73 + 1);
  if ((unint64_t)v61 >= v652)
  {
    v78 = ((char *)v61 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v78 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v79 = (uint64_t)(v652 - (_QWORD)__p) >> 2;
    if (v79 <= v78 + 1)
      v79 = v78 + 1;
    if (v652 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    if (v80)
      v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v652, v80);
    else
      v81 = 0;
    v82 = &v81[8 * v78];
    v83 = &v81[8 * v80];
    *(_QWORD *)v82 = v75 | (v76 << 32);
    v77 = (uint64_t *)(v82 + 8);
    v85 = (char *)__p;
    v84 = (char *)v651;
    if (v651 != __p)
    {
      do
      {
        v86 = *((_QWORD *)v84 - 1);
        v84 -= 8;
        *((_QWORD *)v82 - 1) = v86;
        v82 -= 8;
      }
      while (v84 != v85);
      v84 = (char *)__p;
    }
    __p = v82;
    v651 = v77;
    v652 = (unint64_t)v83;
    if (v84)
      operator delete(v84);
  }
  else
  {
    *v61 = v75 | (v76 << 32);
    v77 = v61 + 1;
  }
  v651 = v77;
  v647 = 0;
  v648 = 0;
  v649 = 0;
  v644 = 0;
  v645 = 0;
  v646 = 0;
  v641 = 0;
  v642 = 0;
  v643 = 0;
  v638 = 0;
  v639 = 0;
  v640 = 0;
  v87 = v669;
  if ((unint64_t)v669 >= v670)
  {
    v89 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
    v90 = v89 + 1;
    if (v89 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v90)
      v90 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v91 = 0x1555555555555555;
    else
      v91 = v90;
    if (v91)
      v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v91);
    else
      v92 = 0;
    v93 = (char *)(v91 + 12 * v89);
    v94 = v91 + 12 * v92;
    *(_QWORD *)v93 = 0;
    *((_DWORD *)v93 + 2) = 0;
    v88 = v93 + 12;
    v96 = __src;
    v95 = v669;
    if (v669 != __src)
    {
      do
      {
        v97 = *(_QWORD *)(v95 - 3);
        v95 -= 3;
        v98 = v95[2];
        *(_QWORD *)(v93 - 12) = v97;
        v93 -= 12;
        *((_DWORD *)v93 + 2) = v98;
      }
      while (v95 != v96);
      v95 = __src;
    }
    __src = v93;
    v669 = v88;
    v670 = v94;
    if (v95)
      operator delete(v95);
  }
  else
  {
    *(_QWORD *)v669 = 0;
    v88 = (char *)v87 + 12;
    *((_DWORD *)v87 + 2) = 0;
  }
  v669 = v88;
  v99 = *v673;
  v100 = &unk_1F044B000;
  v101 = &unk_1F044B000;
  if (v673[1] != *v673)
  {
    v102 = 0;
    v103 = 0;
    v104 = 0;
    while (1)
    {
      v105 = (__int128 *)(v99 + 24 * v104);
      if (*((char *)v105 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v637, *(const std::string::value_type **)v105, *((_QWORD *)v105 + 1));
      }
      else
      {
        v106 = *v105;
        v637.__r_.__value_.__r.__words[2] = *((_QWORD *)v105 + 2);
        *(_OWORD *)&v637.__r_.__value_.__l.__data_ = v106;
      }
      if (fr_verbose_log(void)::is_verbose_)
      {
        if (v100[443] != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v107 = *((_QWORD *)v101 + 442);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          v109 = &v637;
          if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v109 = (std::string *)v637.__r_.__value_.__r.__words[0];
          *(_DWORD *)v681 = 136315138;
          *(_QWORD *)&v681[4] = v109;
          _os_log_impl(&dword_1DE3F6000, v107, OS_LOG_TYPE_DEBUG, "Raw: %s", v681, 0xCu);
        }
        v110 = &v637;
        if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v110 = (std::string *)v637.__r_.__value_.__r.__words[0];
        Diagnostics::log(7, "Raw: %s", v108, v110);
      }
      v636 = v103;
      if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v637.__r_.__value_.__l.__size_ != 1)
          goto LABEL_211;
        v111 = *v637.__r_.__value_.__l.__data_;
      }
      else
      {
        if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_211;
        v111 = v637.__r_.__value_.__s.__data_[0];
      }
      if (v111 <= 42)
      {
        if (v111 == 40)
        {
          v123 = v103 + 1;
          if (*(_DWORD *)__p == v103 + 1)
          {
            v124 = v669;
            if ((unint64_t)v669 < v670)
            {
              *(_QWORD *)v669 = 0x100000002;
              goto LABEL_195;
            }
            v198 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
            v199 = v198 + 1;
            if (v198 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v199)
              v199 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v200 = 0x1555555555555555;
            else
              v200 = v199;
            if (v200)
              v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
            else
              v201 = 0;
            v310 = v200 + 12 * v198;
            *(_QWORD *)v310 = 0x100000002;
            *(_DWORD *)(v310 + 8) = 0;
            v312 = __src;
            v311 = v669;
            v313 = (_DWORD *)v310;
            if (v669 != __src)
            {
              do
              {
                v314 = *(_QWORD *)(v311 - 3);
                v311 -= 3;
                v315 = v311[2];
                *(_QWORD *)(v313 - 3) = v314;
                v313 -= 3;
                v313[2] = v315;
              }
              while (v311 != v312);
              goto LABEL_704;
            }
LABEL_705:
            v125 = (char *)(v310 + 12);
            __src = v313;
            v669 = (char *)(v310 + 12);
            v670 = v200 + 12 * v201;
            if (v311)
              operator delete(v311);
LABEL_707:
            v669 = v125;
            v424 = -1431655765 * ((unint64_t)(v125 - (_BYTE *)__src) >> 2);
            v425 = v648;
            if (v648 >= v649)
            {
              v427 = (char *)v647;
              v428 = (v648 - (_BYTE *)v647) >> 2;
              v429 = v428 + 1;
              if ((unint64_t)(v428 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v430 = v649 - (_BYTE *)v647;
              if ((v649 - (_BYTE *)v647) >> 1 > v429)
                v429 = v430 >> 1;
              if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFFCLL)
                v431 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v431 = v429;
              if (v431)
              {
                v432 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v649, v431);
                v427 = (char *)v647;
                v425 = v648;
              }
              else
              {
                v432 = 0;
              }
              v433 = &v432[4 * v428];
              *(_DWORD *)v433 = v424;
              v426 = v433 + 4;
              while (v425 != v427)
              {
                v434 = *((_DWORD *)v425 - 1);
                v425 -= 4;
                *((_DWORD *)v433 - 1) = v434;
                v433 -= 4;
              }
              v647 = v433;
              v648 = v426;
              v649 = &v432[4 * v431];
              if (v427)
                operator delete(v427);
            }
            else
            {
              *(_DWORD *)v648 = v424;
              v426 = v425 + 4;
            }
            v648 = v426;
            if (SHIBYTE(v640) < 0)
            {
              *(_BYTE *)v638 = 0;
              v639 = 0;
            }
            else
            {
              LOBYTE(v638) = 0;
              HIBYTE(v640) = 0;
            }
            v226 = 6;
            v636 = v103 + 1;
            goto LABEL_749;
          }
          if (*((_DWORD *)__p + 1) > v123)
          {
            v172 = v103 - 999;
            v173 = v669;
            if ((unint64_t)v669 < v670)
              goto LABEL_273;
            v298 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
            v299 = v298 + 1;
            if (v298 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v299)
              v299 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v200 = 0x1555555555555555;
            else
              v200 = v299;
            if (v200)
              v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
            else
              v201 = 0;
            v310 = v200 + 12 * v298;
            *(_DWORD *)v310 = 4;
            *(_DWORD *)(v310 + 4) = v172;
            *(_DWORD *)(v310 + 8) = 0;
            v421 = __src;
            v311 = v669;
            v313 = (_DWORD *)v310;
            if (v669 == __src)
              goto LABEL_705;
            do
            {
              v422 = *(_QWORD *)(v311 - 3);
              v311 -= 3;
              v423 = v311[2];
              *(_QWORD *)(v313 - 3) = v422;
              v313 -= 3;
              v313[2] = v423;
            }
            while (v311 != v421);
LABEL_704:
            v311 = __src;
            goto LABEL_705;
          }
          if (*((_DWORD *)__p + 3) <= v123)
          {
            if (*((_DWORD *)__p + 4) == v123)
            {
              v124 = v669;
              if ((unint64_t)v669 < v670)
              {
                *(_QWORD *)v669 = 2;
LABEL_195:
                *((_DWORD *)v124 + 2) = 0;
                v125 = (char *)v124 + 12;
                goto LABEL_707;
              }
              v459 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
              v460 = v459 + 1;
              if (v459 + 1 > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v460)
                v460 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v200 = 0x1555555555555555;
              else
                v200 = v460;
              if (v200)
                v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
              else
                v201 = 0;
              v310 = v200 + 12 * v459;
              *(_QWORD *)v310 = 2;
              *(_DWORD *)(v310 + 8) = 0;
              v509 = __src;
              v311 = v669;
              v313 = (_DWORD *)v310;
              if (v669 == __src)
                goto LABEL_705;
              do
              {
                v510 = *(_QWORD *)(v311 - 3);
                v311 -= 3;
                v511 = v311[2];
                *(_QWORD *)(v313 - 3) = v510;
                v313 -= 3;
                v313[2] = v511;
              }
              while (v311 != v509);
              goto LABEL_704;
            }
            v172 = v103 - 1499;
            v173 = v669;
            if ((unint64_t)v669 >= v670)
            {
              v375 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
              v376 = v375 + 1;
              if (v375 + 1 > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v376)
                v376 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v200 = 0x1555555555555555;
              else
                v200 = v376;
              if (v200)
                v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
              else
                v201 = 0;
              v310 = v200 + 12 * v375;
              *(_DWORD *)v310 = 4;
              *(_DWORD *)(v310 + 4) = v172;
              *(_DWORD *)(v310 + 8) = 0;
              v503 = __src;
              v311 = v669;
              v313 = (_DWORD *)v310;
              if (v669 == __src)
                goto LABEL_705;
              do
              {
                v504 = *(_QWORD *)(v311 - 3);
                v311 -= 3;
                v505 = v311[2];
                *(_QWORD *)(v313 - 3) = v504;
                v313 -= 3;
                v313[2] = v505;
              }
              while (v311 != v503);
              goto LABEL_704;
            }
LABEL_273:
            *(_DWORD *)v173 = 4;
            *((_DWORD *)v173 + 1) = v172;
          }
          else
          {
            v173 = v669;
            if ((*(_BYTE *)(a1 + 120) & 2) != 0)
            {
              if ((unint64_t)v669 >= v670)
              {
                v461 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
                v462 = v461 + 1;
                if (v461 + 1 > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v462)
                  v462 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v200 = 0x1555555555555555;
                else
                  v200 = v462;
                if (v200)
                  v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
                else
                  v201 = 0;
                v310 = v200 + 12 * v461;
                *(_DWORD *)v310 = 2;
                *(_DWORD *)(v310 + 4) = v123;
                *(_DWORD *)(v310 + 8) = 0;
                v512 = __src;
                v311 = v669;
                v313 = (_DWORD *)v310;
                if (v669 == __src)
                  goto LABEL_705;
                do
                {
                  v513 = *(_QWORD *)(v311 - 3);
                  v311 -= 3;
                  v514 = v311[2];
                  *(_QWORD *)(v313 - 3) = v513;
                  v313 -= 3;
                  v313[2] = v514;
                }
                while (v311 != v512);
                goto LABEL_704;
              }
              *(_DWORD *)v669 = 2;
            }
            else
            {
              if ((unint64_t)v669 >= v670)
              {
                v457 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
                v458 = v457 + 1;
                if (v457 + 1 > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v458)
                  v458 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v200 = 0x1555555555555555;
                else
                  v200 = v458;
                if (v200)
                  v200 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v200);
                else
                  v201 = 0;
                v310 = v200 + 12 * v457;
                *(_DWORD *)v310 = 4;
                *(_DWORD *)(v310 + 4) = v123;
                *(_DWORD *)(v310 + 8) = 0;
                v506 = __src;
                v311 = v669;
                v313 = (_DWORD *)v310;
                if (v669 == __src)
                  goto LABEL_705;
                do
                {
                  v507 = *(_QWORD *)(v311 - 3);
                  v311 -= 3;
                  v508 = v311[2];
                  *(_QWORD *)(v313 - 3) = v507;
                  v313 -= 3;
                  v313[2] = v508;
                }
                while (v311 != v506);
                goto LABEL_704;
              }
              *(_DWORD *)v669 = 4;
            }
            *((_DWORD *)v173 + 1) = v123;
          }
          v125 = v173 + 12;
          *((_DWORD *)v173 + 2) = 0;
          goto LABEL_707;
        }
        if (v111 == 41)
        {
          v116 = v669;
          v117 = (v669 - (_BYTE *)__src) / 12;
          if (*(_DWORD *)__p == v103)
          {
            if (*((_DWORD *)v669 - 3) == 2 && *((_DWORD *)v669 - 2) == 1)
            {
              v669 -= 12;
              LODWORD(v117) = v117 - 2;
LABEL_648:
              v384 = (unsigned int *)v641;
              v385 = (unsigned int *)v642;
              if (v641 != v642)
              {
                do
                {
                  v386 = *v384;
                  if (0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2) <= v386)
                    std::vector<int>::__throw_out_of_range[abi:ne180100]();
                  *((_DWORD *)__src + 3 * v386 + 1) = v117;
                  ++v384;
                }
                while (v384 != v385);
                v387 = -1 - 1431655765 * ((unint64_t)(v669 - (_BYTE *)__src) >> 2);
                v388 = v642;
                if (v642 >= v643)
                {
                  v390 = (char *)v641;
                  v391 = (v642 - (_BYTE *)v641) >> 2;
                  v392 = v391 + 1;
                  if ((unint64_t)(v391 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v393 = v643 - (_BYTE *)v641;
                  if ((v643 - (_BYTE *)v641) >> 1 > v392)
                    v392 = v393 >> 1;
                  if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFFCLL)
                    v394 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v394 = v392;
                  if (v394)
                  {
                    v395 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v643, v394);
                    v390 = (char *)v641;
                    v388 = v642;
                  }
                  else
                  {
                    v395 = 0;
                  }
                  v396 = &v395[4 * v391];
                  *(_DWORD *)v396 = v387;
                  v389 = v396 + 4;
                  while (v388 != v390)
                  {
                    v397 = *((_DWORD *)v388 - 1);
                    v388 -= 4;
                    *((_DWORD *)v396 - 1) = v397;
                    v396 -= 4;
                  }
                  v641 = v396;
                  v642 = v389;
                  v643 = &v395[4 * v394];
                  if (v390)
                    operator delete(v390);
                }
                else
                {
                  *(_DWORD *)v642 = v387;
                  v389 = v388 + 4;
                }
                v642 = v389;
                v398 = *((_DWORD *)v645 - 1) - *((_DWORD *)v648 - 1);
                v400 = v660;
                v399 = (int *)v661;
                if (v660 >= v661)
                {
                  v402 = (char *)v659;
                  v403 = (v660 - (_BYTE *)v659) >> 2;
                  v404 = v403 + 1;
                  if ((unint64_t)(v403 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v405 = v661 - (_BYTE *)v659;
                  if ((v661 - (_BYTE *)v659) >> 1 > v404)
                    v404 = v405 >> 1;
                  if ((unint64_t)v405 >= 0x7FFFFFFFFFFFFFFCLL)
                    v406 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v406 = v404;
                  if (v406)
                  {
                    v407 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v661, v406);
                    v402 = (char *)v659;
                    v400 = v660;
                  }
                  else
                  {
                    v407 = 0;
                  }
                  v408 = (int *)&v407[4 * v403];
                  *v408 = v398;
                  v401 = v408 + 1;
                  while (v400 != v402)
                  {
                    v409 = *((_DWORD *)v400 - 1);
                    v400 -= 4;
                    *--v408 = v409;
                  }
                  v399 = (int *)&v407[4 * v406];
                  v659 = v408;
                  v660 = (char *)v401;
                  v661 = (char *)v399;
                  if (v402)
                  {
                    operator delete(v402);
                    v399 = (int *)v661;
                  }
                }
                else
                {
                  *(_DWORD *)v660 = v398;
                  v401 = (int *)(v400 + 4);
                }
                v660 = (char *)v401;
                v410 = *((_DWORD *)v642 - 1) - *((_DWORD *)v648 - 1);
                if (v401 >= v399)
                {
                  v412 = (int *)v659;
                  v413 = ((char *)v401 - (_BYTE *)v659) >> 2;
                  v414 = v413 + 1;
                  if ((unint64_t)(v413 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v415 = (char *)v399 - (_BYTE *)v659;
                  if (v415 >> 1 > v414)
                    v414 = v415 >> 1;
                  if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
                    v416 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v416 = v414;
                  if (v416)
                  {
                    v417 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v661, v416);
                    v412 = (int *)v659;
                    v401 = (int *)v660;
                  }
                  else
                  {
                    v417 = 0;
                  }
                  v418 = (int *)&v417[4 * v413];
                  *v418 = v410;
                  v411 = (char *)(v418 + 1);
                  while (v401 != v412)
                  {
                    v419 = *--v401;
                    *--v418 = v419;
                  }
                  v659 = v418;
                  v660 = v411;
                  v661 = &v417[4 * v416];
                  if (v412)
                    operator delete(v412);
                }
                else
                {
                  *v401 = v410;
                  v411 = (char *)(v401 + 1);
                }
                v660 = v411;
                v645 = (char *)v644;
                v642 = (char *)v641;
                v420 = (char *)__src + 12 * *((unsigned int *)v648 - 1);
                ++*((_DWORD *)v420 + 2);
              }
              v648 -= 4;
              goto LABEL_745;
            }
            if ((unint64_t)v669 < v670)
            {
              *(_QWORD *)v669 = 0x100000003;
              goto LABEL_286;
            }
            v257 = v117 + 1;
            if ((unint64_t)(v117 + 1) > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v257)
              v257 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v258 = 0x1555555555555555;
            else
              v258 = v257;
            if (v258)
              v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
            else
              v259 = 0;
            v316 = v258 + 12 * v117;
            *(_QWORD *)v316 = 0x100000003;
            *(_DWORD *)(v316 + 8) = 0;
            v318 = __src;
            v317 = v669;
            v319 = (_DWORD *)v316;
            if (v669 != __src)
            {
              do
              {
                v320 = *(_QWORD *)(v317 - 3);
                v317 -= 3;
                v321 = v317[2];
                *(_QWORD *)(v319 - 3) = v320;
                v319 -= 3;
                v319[2] = v321;
              }
              while (v317 != v318);
              goto LABEL_644;
            }
LABEL_645:
            v179 = (char *)(v316 + 12);
            __src = v319;
            v669 = (char *)(v316 + 12);
            v670 = v258 + 12 * v259;
            if (v317)
              operator delete(v317);
LABEL_647:
            v669 = v179;
            goto LABEL_648;
          }
          if (*((_DWORD *)__p + 1) > v103)
          {
            v171 = v103 - 1000;
            if ((unint64_t)v669 < v670)
              goto LABEL_270;
            v297 = v117 + 1;
            if ((unint64_t)(v117 + 1) > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v297)
              v297 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v258 = 0x1555555555555555;
            else
              v258 = v297;
            if (v258)
              v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
            else
              v259 = 0;
            v316 = v258 + 12 * v117;
            *(_DWORD *)v316 = 5;
            *(_DWORD *)(v316 + 4) = v171;
            *(_DWORD *)(v316 + 8) = 0;
            v381 = __src;
            v317 = v669;
            v319 = (_DWORD *)v316;
            if (v669 == __src)
              goto LABEL_645;
            do
            {
              v382 = *(_QWORD *)(v317 - 3);
              v317 -= 3;
              v383 = v317[2];
              *(_QWORD *)(v319 - 3) = v382;
              v319 -= 3;
              v319[2] = v383;
            }
            while (v317 != v381);
LABEL_644:
            v317 = __src;
            goto LABEL_645;
          }
          if (*((_DWORD *)__p + 3) <= v103)
          {
            if (*((_DWORD *)__p + 4) == v103)
            {
              if ((unint64_t)v669 < v670)
              {
                *(_QWORD *)v669 = 3;
LABEL_286:
                *((_DWORD *)v116 + 2) = 0;
                v179 = (char *)v116 + 12;
                goto LABEL_647;
              }
              v455 = v117 + 1;
              if ((unint64_t)(v117 + 1) > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v455)
                v455 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v258 = 0x1555555555555555;
              else
                v258 = v455;
              if (v258)
                v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
              else
                v259 = 0;
              v316 = v258 + 12 * v117;
              *(_QWORD *)v316 = 3;
              *(_DWORD *)(v316 + 8) = 0;
              v497 = __src;
              v317 = v669;
              v319 = (_DWORD *)v316;
              if (v669 == __src)
                goto LABEL_645;
              do
              {
                v498 = *(_QWORD *)(v317 - 3);
                v317 -= 3;
                v499 = v317[2];
                *(_QWORD *)(v319 - 3) = v498;
                v319 -= 3;
                v319[2] = v499;
              }
              while (v317 != v497);
              goto LABEL_644;
            }
            v171 = v103 - 1500;
            if ((unint64_t)v669 >= v670)
            {
              v374 = v117 + 1;
              if ((unint64_t)(v117 + 1) > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v374)
                v374 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v258 = 0x1555555555555555;
              else
                v258 = v374;
              if (v258)
                v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
              else
                v259 = 0;
              v316 = v258 + 12 * v117;
              *(_DWORD *)v316 = 5;
              *(_DWORD *)(v316 + 4) = v171;
              *(_DWORD *)(v316 + 8) = 0;
              v491 = __src;
              v317 = v669;
              v319 = (_DWORD *)v316;
              if (v669 == __src)
                goto LABEL_645;
              do
              {
                v492 = *(_QWORD *)(v317 - 3);
                v317 -= 3;
                v493 = v317[2];
                *(_QWORD *)(v319 - 3) = v492;
                v319 -= 3;
                v319[2] = v493;
              }
              while (v317 != v491);
              goto LABEL_644;
            }
LABEL_270:
            *(_DWORD *)v669 = 5;
            *((_DWORD *)v116 + 1) = v171;
          }
          else
          {
            if ((*(_BYTE *)(a1 + 120) & 2) != 0)
            {
              if ((unint64_t)v669 >= v670)
              {
                v456 = v117 + 1;
                if ((unint64_t)(v117 + 1) > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v456)
                  v456 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v258 = 0x1555555555555555;
                else
                  v258 = v456;
                if (v258)
                  v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
                else
                  v259 = 0;
                v316 = v258 + 12 * v117;
                *(_DWORD *)v316 = 3;
                *(_DWORD *)(v316 + 4) = v103;
                *(_DWORD *)(v316 + 8) = 0;
                v500 = __src;
                v317 = v669;
                v319 = (_DWORD *)v316;
                if (v669 == __src)
                  goto LABEL_645;
                do
                {
                  v501 = *(_QWORD *)(v317 - 3);
                  v317 -= 3;
                  v502 = v317[2];
                  *(_QWORD *)(v319 - 3) = v501;
                  v319 -= 3;
                  v319[2] = v502;
                }
                while (v317 != v500);
                goto LABEL_644;
              }
              v197 = 3;
            }
            else
            {
              if ((unint64_t)v669 >= v670)
              {
                v454 = v117 + 1;
                if ((unint64_t)(v117 + 1) > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v454)
                  v454 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v258 = 0x1555555555555555;
                else
                  v258 = v454;
                if (v258)
                  v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v258);
                else
                  v259 = 0;
                v316 = v258 + 12 * v117;
                *(_DWORD *)v316 = 5;
                *(_DWORD *)(v316 + 4) = v103;
                *(_DWORD *)(v316 + 8) = 0;
                v494 = __src;
                v317 = v669;
                v319 = (_DWORD *)v316;
                if (v669 == __src)
                  goto LABEL_645;
                do
                {
                  v495 = *(_QWORD *)(v317 - 3);
                  v317 -= 3;
                  v496 = v317[2];
                  *(_QWORD *)(v319 - 3) = v495;
                  v319 -= 3;
                  v319[2] = v496;
                }
                while (v317 != v494);
                goto LABEL_644;
              }
              v197 = 5;
            }
            *(_DWORD *)v669 = v197;
            *((_DWORD *)v116 + 1) = v103;
          }
          v179 = (char *)v116 + 12;
          *((_DWORD *)v116 + 2) = 0;
          goto LABEL_647;
        }
      }
      else
      {
        switch(v111)
        {
          case '+':
            v126 = HIBYTE(v640);
            if (v640 < 0)
              v126 = v639;
            if (v126)
              goto LABEL_748;
            v127 = v102;
            v129 = __src;
            v128 = v669;
            previous_op = FRCode::get_previous_op((uint64_t)__src, (uint64_t)v669);
            v131 = previous_op;
            if (previous_op != -1)
            {
              v132 = 1 - 1431655765 * ((unint64_t)(v128 - v129) >> 2);
              v133 = v669;
              if ((unint64_t)v669 >= v670)
              {
                v300 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
                v301 = v300 + 1;
                if (v300 + 1 > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v301)
                  v301 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v302 = 0x1555555555555555;
                else
                  v302 = v301;
                if (v302)
                  v302 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v302);
                else
                  v303 = 0;
                v435 = (_DWORD *)(v302 + 12 * v300);
                *v435 = 6;
                v435[1] = v132;
                v435[2] = v131;
                v437 = __src;
                v436 = v669;
                v438 = v435;
                if (v669 != __src)
                {
                  do
                  {
                    v439 = *(_QWORD *)(v436 - 3);
                    v436 -= 3;
                    v440 = v436[2];
                    *(_QWORD *)(v438 - 3) = v439;
                    v438 -= 3;
                    v438[2] = v440;
                  }
                  while (v436 != v437);
                  v436 = __src;
                }
                v134 = (char *)(v435 + 3);
                __src = v438;
                v669 = (char *)(v435 + 3);
                v670 = v302 + 12 * v303;
                if (v436)
                  operator delete(v436);
              }
              else
              {
                *(_DWORD *)v669 = 6;
                *((_DWORD *)v133 + 1) = v132;
                v134 = (char *)v133 + 12;
                *((_DWORD *)v133 + 2) = previous_op;
              }
              v669 = v134;
              MEMORY[0x1DF0ECA80](&v638, "+");
              v226 = 6;
              v100 = (_QWORD *)&unk_1F044B000;
              goto LABEL_377;
            }
            v100 = &unk_1F044B000;
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v102 = v127;
            v290 = *((_QWORD *)v101 + 442);
            if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v681 = 0;
              _os_log_impl(&dword_1DE3F6000, v290, OS_LOG_TYPE_ERROR, "Invalid + op in the rule!", v681, 2u);
            }
            v229 = "Invalid + op in the rule!";
            goto LABEL_362;
          case '?':
            v118 = HIBYTE(v640);
            if (v640 < 0)
              v118 = v639;
            if (!v118)
            {
              v177 = __src;
              v176 = v669;
              v178 = FRCode::get_previous_op((uint64_t)__src, (uint64_t)v669);
              if (v178 != -1)
              {
                *(_DWORD *)v681 = 6;
                *(_DWORD *)&v681[4] = 1 - 1431655765 * ((unint64_t)(v176 - v177) >> 2);
                *(_DWORD *)&v681[8] = v178 + 1;
                std::vector<FRCode::Op>::insert((uint64_t)&__src, (char *)__src + 12 * v178, (uint64_t *)v681);
                MEMORY[0x1DF0ECA80](&v638, "+");
                goto LABEL_748;
              }
              if (v100[443] != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v289 = *((_QWORD *)v101 + 442);
              if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v681 = 0;
                _os_log_impl(&dword_1DE3F6000, v289, OS_LOG_TYPE_ERROR, "Invalid ? op in the rule!", v681, 2u);
              }
              v229 = "Invalid ? op in the rule!";
              goto LABEL_362;
            }
            if (v100[443] != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v119 = *((_QWORD *)v101 + 442);
            v120 = os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
            v122 = "Unsupport successtive ? op in the rule!, ignore";
            if (v120)
            {
              *(_WORD *)v681 = 0;
              _os_log_impl(&dword_1DE3F6000, v119, OS_LOG_TYPE_ERROR, "Unsupport successtive ? op in the rule!, ignore", v681, 2u);
              v122 = "Unsupport successtive ? op in the rule!, ignore";
            }
LABEL_210:
            Diagnostics::log(3, v122, v121);
            goto LABEL_748;
          case '|':
            v112 = v669;
            v113 = (v669 - (_BYTE *)__src) / 12;
            v114 = v113 + 1;
            if ((unint64_t)v669 >= v670)
            {
              v168 = v113 + 1;
              if ((unint64_t)(v113 + 1) > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v168)
                v168 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v169 = 0x1555555555555555;
              else
                v169 = v168;
              if (v169)
                v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v169);
              else
                v170 = 0;
              v267 = (_DWORD *)(v169 + 12 * v113);
              *v267 = 8;
              v267[1] = v114;
              v267[2] = 0;
              v269 = __src;
              v268 = v669;
              v270 = v267;
              if (v669 != __src)
              {
                do
                {
                  v271 = *(_QWORD *)(v268 - 3);
                  v268 -= 3;
                  v272 = v268[2];
                  *(_QWORD *)(v270 - 3) = v271;
                  v270 -= 3;
                  v270[2] = v272;
                }
                while (v268 != v269);
                v268 = __src;
              }
              v115 = (char *)(v267 + 3);
              __src = v270;
              v669 = (char *)(v267 + 3);
              v670 = v169 + 12 * v170;
              if (v268)
                operator delete(v268);
            }
            else
            {
              *(_DWORD *)v669 = 8;
              *((_DWORD *)v112 + 1) = v114;
              v115 = (char *)v112 + 12;
              *((_DWORD *)v112 + 2) = 0;
            }
            v669 = v115;
            if (SHIBYTE(v640) < 0)
            {
              *(_BYTE *)v638 = 0;
              v639 = 0;
            }
            else
            {
              LOBYTE(v638) = 0;
              HIBYTE(v640) = 0;
            }
            if (v644 != v645)
            {
              v273 = (char *)__src + 12 * *((unsigned int *)v648 - 1);
              ++*((_DWORD *)v273 + 2);
              v275 = __src;
              v274 = v669;
LABEL_539:
              v331 = -1 - 1431655765 * ((unint64_t)(v274 - v275) >> 2);
              v332 = v642;
              if (v642 >= v643)
              {
                v334 = (char *)v641;
                v335 = (v642 - (_BYTE *)v641) >> 2;
                v336 = v335 + 1;
                if ((unint64_t)(v335 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v337 = v643 - (_BYTE *)v641;
                if ((v643 - (_BYTE *)v641) >> 1 > v336)
                  v336 = v337 >> 1;
                if ((unint64_t)v337 >= 0x7FFFFFFFFFFFFFFCLL)
                  v338 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v338 = v336;
                if (v338)
                {
                  v339 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v643, v338);
                  v334 = (char *)v641;
                  v332 = v642;
                }
                else
                {
                  v339 = 0;
                }
                v340 = &v339[4 * v335];
                *(_DWORD *)v340 = v331;
                v333 = v340 + 4;
                while (v332 != v334)
                {
                  v341 = *((_DWORD *)v332 - 1);
                  v332 -= 4;
                  *((_DWORD *)v340 - 1) = v341;
                  v340 -= 4;
                }
                v641 = v340;
                v642 = v333;
                v643 = &v339[4 * v338];
                if (v334)
                  operator delete(v334);
              }
              else
              {
                *(_DWORD *)v642 = v331;
                v333 = v332 + 4;
              }
              v642 = v333;
              v342 = *((_DWORD *)v645 - 1) - *((_DWORD *)v648 - 1);
              v344 = v660;
              v343 = (int *)v661;
              if (v660 >= v661)
              {
                v346 = (char *)v659;
                v347 = (v660 - (_BYTE *)v659) >> 2;
                v348 = v347 + 1;
                if ((unint64_t)(v347 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v349 = v661 - (_BYTE *)v659;
                if ((v661 - (_BYTE *)v659) >> 1 > v348)
                  v348 = v349 >> 1;
                if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL)
                  v350 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v350 = v348;
                if (v350)
                {
                  v351 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v661, v350);
                  v346 = (char *)v659;
                  v344 = v660;
                }
                else
                {
                  v351 = 0;
                }
                v352 = (int *)&v351[4 * v347];
                *v352 = v342;
                v345 = v352 + 1;
                while (v344 != v346)
                {
                  v353 = *((_DWORD *)v344 - 1);
                  v344 -= 4;
                  *--v352 = v353;
                }
                v343 = (int *)&v351[4 * v350];
                v659 = v352;
                v660 = (char *)v345;
                v661 = (char *)v343;
                if (v346)
                {
                  operator delete(v346);
                  v343 = (int *)v661;
                }
              }
              else
              {
                *(_DWORD *)v660 = v342;
                v345 = (int *)(v344 + 4);
              }
              v660 = (char *)v345;
              v354 = *((_DWORD *)v642 - 1) - *((_DWORD *)v648 - 1);
              if (v345 >= v343)
              {
                v356 = (int *)v659;
                v357 = ((char *)v345 - (_BYTE *)v659) >> 2;
                v358 = v357 + 1;
                if ((unint64_t)(v357 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v359 = (char *)v343 - (_BYTE *)v659;
                if (v359 >> 1 > v358)
                  v358 = v359 >> 1;
                if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFFCLL)
                  v360 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v360 = v358;
                if (v360)
                {
                  v361 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v661, v360);
                  v356 = (int *)v659;
                  v345 = (int *)v660;
                }
                else
                {
                  v361 = 0;
                }
                v362 = (int *)&v361[4 * v357];
                *v362 = v354;
                v355 = (char *)(v362 + 1);
                while (v345 != v356)
                {
                  v363 = *--v345;
                  *--v362 = v363;
                }
                v659 = v362;
                v660 = v355;
                v661 = &v361[4 * v360];
                if (v356)
                  operator delete(v356);
              }
              else
              {
                *v345 = v354;
                v355 = (char *)(v345 + 1);
              }
              v660 = v355;
              v364 = v645;
              if (v645 >= v646)
              {
                v366 = (char *)v644;
                v367 = (v645 - (_BYTE *)v644) >> 2;
                v368 = v367 + 1;
                v101 = &unk_1F044B000;
                if ((unint64_t)(v367 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v369 = v646 - (_BYTE *)v644;
                if ((v646 - (_BYTE *)v644) >> 1 > v368)
                  v368 = v369 >> 1;
                if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFFCLL)
                  v370 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v370 = v368;
                if (v370)
                {
                  v371 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v646, v370);
                  v366 = (char *)v644;
                  v364 = v645;
                }
                else
                {
                  v371 = 0;
                }
                v372 = &v371[4 * v367];
                *(_DWORD *)v372 = v114;
                v365 = v372 + 4;
                while (v364 != v366)
                {
                  v373 = *((_DWORD *)v364 - 1);
                  v364 -= 4;
                  *((_DWORD *)v372 - 1) = v373;
                  v372 -= 4;
                }
                v644 = v372;
                v645 = v365;
                v646 = &v371[4 * v370];
                if (v366)
                  operator delete(v366);
              }
              else
              {
                *(_DWORD *)v645 = v114;
                v365 = v364 + 4;
                v101 = &unk_1F044B000;
              }
              v645 = v365;
              goto LABEL_748;
            }
            v276 = (char *)__src + 12 * *((unsigned int *)v648 - 1);
            *(_DWORD *)v681 = 7;
            *(_DWORD *)&v681[4] = (unint64_t)(v660 - (_BYTE *)v659) >> 3;
            *(_DWORD *)&v681[8] = 1;
            std::vector<FRCode::Op>::insert((uint64_t)&__src, v276, (uint64_t *)v681);
            v277 = *((_DWORD *)v648 - 1) + 1;
            v278 = v645;
            if (v645 >= v646)
            {
              v280 = (char *)v644;
              v281 = (v645 - (_BYTE *)v644) >> 2;
              v282 = v281 + 1;
              if ((unint64_t)(v281 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v283 = v646 - (_BYTE *)v644;
              if ((v646 - (_BYTE *)v644) >> 1 > v282)
                v282 = v283 >> 1;
              if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFFCLL)
                v284 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v284 = v282;
              if (v284)
              {
                v285 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v646, v284);
                v280 = (char *)v644;
                v278 = v645;
              }
              else
              {
                v285 = 0;
              }
              v323 = (int *)&v285[4 * v281];
              *v323 = v277;
              v279 = (char *)(v323 + 1);
              while (v278 != v280)
              {
                v324 = *((_DWORD *)v278 - 1);
                v278 -= 4;
                *--v323 = v324;
              }
              v644 = v323;
              v645 = v279;
              v646 = &v285[4 * v284];
              if (v280)
                operator delete(v280);
            }
            else
            {
              *(_DWORD *)v645 = v277;
              v279 = v278 + 4;
            }
            v645 = v279;
            v325 = *((_DWORD *)v648 - 1);
            v326 = (v325 + 1);
            v275 = __src;
            v274 = v669;
            if (0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2) <= v326)
            {
LABEL_538:
              v114 = v113 + 2;
              goto LABEL_539;
            }
            v327 = v325 + 2;
            while (2)
            {
              v328 = *(_DWORD *)&v275[12 * v326];
              if (v328 == 8)
              {
                v330 = &v275[12 * v326 + 4];
LABEL_536:
                ++*v330;
                v275 = __src;
                v274 = v669;
              }
              else if (v328 == 6)
              {
                v329 = &v275[12 * v326];
                ++*((_DWORD *)v329 + 1);
                v330 = v329 + 8;
                goto LABEL_536;
              }
              v326 = v327;
              v541 = 0xAAAAAAAAAAAAAAABLL * ((v274 - v275) >> 2) > v327++;
              if (!v541)
                goto LABEL_538;
              continue;
            }
        }
      }
      if (v111 == 42)
      {
        v135 = HIBYTE(v640);
        if (v640 < 0)
          v135 = v639;
        if (!v135)
        {
          v261 = __src;
          v260 = v669;
          v262 = FRCode::get_previous_op((uint64_t)__src, (uint64_t)v669);
          if (v262 != -1)
          {
            v263 = 2 - 1431655765 * ((unint64_t)(v260 - v261) >> 2);
            *(_DWORD *)v681 = 6;
            *(_DWORD *)&v681[4] = v263;
            v264 = v262 + 1;
            *(_DWORD *)&v681[8] = v262 + 1;
            std::vector<FRCode::Op>::insert((uint64_t)&__src, (char *)__src + 12 * v262, (uint64_t *)v681);
            v265 = v669;
            if ((unint64_t)v669 >= v670)
            {
              v377 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
              v378 = v377 + 1;
              if (v377 + 1 > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v378)
                v378 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v379 = 0x1555555555555555;
              else
                v379 = v378;
              if (v379)
                v379 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v379);
              else
                v380 = 0;
              v463 = (_DWORD *)(v379 + 12 * v377);
              *v463 = 6;
              v463[1] = v263;
              v463[2] = v264;
              v465 = __src;
              v464 = v669;
              v466 = v463;
              if (v669 != __src)
              {
                do
                {
                  v467 = *(_QWORD *)(v464 - 3);
                  v464 -= 3;
                  v468 = v464[2];
                  *(_QWORD *)(v466 - 3) = v467;
                  v466 -= 3;
                  v466[2] = v468;
                }
                while (v464 != v465);
                v464 = __src;
              }
              v266 = (char *)(v463 + 3);
              __src = v466;
              v669 = (char *)(v463 + 3);
              v670 = v379 + 12 * v380;
              if (v464)
                operator delete(v464);
            }
            else
            {
              *(_DWORD *)v669 = 6;
              *((_DWORD *)v265 + 1) = v263;
              v266 = (char *)v265 + 12;
              *((_DWORD *)v265 + 2) = v264;
            }
            v669 = v266;
            MEMORY[0x1DF0ECA80](&v638, "+");
            goto LABEL_748;
          }
          if (v100[443] != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v322 = *((_QWORD *)v101 + 442);
          if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v681 = 0;
            _os_log_impl(&dword_1DE3F6000, v322, OS_LOG_TYPE_ERROR, "Invalid * op in the rule!", v681, 2u);
          }
          v229 = "Invalid * op in the rule!";
          goto LABEL_362;
        }
        if (v100[443] != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v136 = *((_QWORD *)v101 + 442);
        v137 = os_log_type_enabled(v136, OS_LOG_TYPE_ERROR);
        v122 = "Invalid successtive * op in the rule!";
        if (v137)
        {
          *(_WORD *)v681 = 0;
          _os_log_impl(&dword_1DE3F6000, v136, OS_LOG_TYPE_ERROR, "Invalid successtive * op in the rule!", v681, 2u);
          v122 = "Invalid successtive * op in the rule!";
        }
        goto LABEL_210;
      }
LABEL_211:
      std::string::basic_string[abi:ne180100]<0>(v681, "{");
      v138 = UTFString::startswith((const void **)&v637.__r_.__value_.__l.__data_, v681);
      v139 = v138;
      if ((v681[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v681);
        if (v139)
        {
LABEL_213:
          if ((SHIBYTE(v637.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            v140 = HIBYTE(v637.__r_.__value_.__r.__words[2]);
            if (HIBYTE(v637.__r_.__value_.__r.__words[2]) > 1u)
            {
              v141 = &v637;
              v142 = &v637.__r_.__value_.__s.__data_[1];
              goto LABEL_242;
            }
LABEL_222:
            if (v100[443] != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v148 = *((_QWORD *)v101 + 442);
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v681 = 0;
              _os_log_impl(&dword_1DE3F6000, v148, OS_LOG_TYPE_ERROR, "Invalid {} op in the rule!", v681, 2u);
            }
            v127 = v102;
            Diagnostics::log(3, "Invalid {} op in the rule!", v149);
            v150 = 0;
            v151 = 0;
LABEL_332:
            v205 = FRCode::get_previous_op((uint64_t)__src, (uint64_t)v669);
            v206 = v205;
            if (v205 != -1)
            {
              v207 = -1431655765 * ((unint64_t)(v669 - (_BYTE *)__src) >> 2);
              v208 = v207 - v205;
              if (v150 < 0)
              {
                *(_DWORD *)v681 = 6;
                *(_DWORD *)&v681[4] = v207 + 1;
                *(_DWORD *)&v681[8] = v205 + 1;
                std::vector<FRCode::Op>::insert((uint64_t)&__src, (char *)__src + 12 * v205, (uint64_t *)v681);
                if (v151 == -1)
                  goto LABEL_375;
                if (v151)
                  goto LABEL_337;
              }
              else
              {
                for (i = v150; i; --i)
                  FRCode::copy_and_append_ops(&__src, v206, v208);
                if (v151)
                {
LABEL_337:
                  v210 = v151 - v150;
                  if (v210 >= 1)
                  {
                    for (j = 0; j != v210; ++j)
                    {
                      v212 = v669;
                      v213 = (v669 - (_BYTE *)__src) / 12;
                      v214 = v213 + 1;
                      v215 = v213 + 1 + v208;
                      if ((unint64_t)v669 >= v670)
                      {
                        v217 = v213 + 1;
                        if ((unint64_t)(v213 + 1) > 0x1555555555555555)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v217)
                          v217 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                          v218 = 0x1555555555555555;
                        else
                          v218 = v217;
                        if (v218)
                          v218 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v218);
                        else
                          v219 = 0;
                        v220 = (_DWORD *)(v218 + 12 * v213);
                        *v220 = 6;
                        v220[1] = v214;
                        v220[2] = v215;
                        v222 = __src;
                        v221 = v669;
                        v223 = v220;
                        if (v669 != __src)
                        {
                          do
                          {
                            v224 = *(_QWORD *)(v221 - 3);
                            v221 -= 3;
                            v225 = v221[2];
                            *(_QWORD *)(v223 - 3) = v224;
                            v223 -= 3;
                            v223[2] = v225;
                          }
                          while (v221 != v222);
                          v221 = __src;
                        }
                        v216 = (char *)(v220 + 3);
                        __src = v223;
                        v669 = (char *)(v220 + 3);
                        v670 = v218 + 12 * v219;
                        if (v221)
                          operator delete(v221);
                      }
                      else
                      {
                        *(_DWORD *)v669 = 6;
                        *((_DWORD *)v212 + 1) = v214;
                        v216 = (char *)v212 + 12;
                        *((_DWORD *)v212 + 2) = v215;
                      }
                      v669 = v216;
                      FRCode::copy_and_append_ops(&__src, v206, v208);
                    }
                    v226 = 6;
                    v101 = &unk_1F044B000;
LABEL_376:
                    v100 = (_QWORD *)&unk_1F044B000;
LABEL_377:
                    v102 = v127;
                    goto LABEL_749;
                  }
LABEL_375:
                  v226 = 6;
                  goto LABEL_376;
                }
              }
              v231 = __src;
              v230 = v669;
              v232 = FRCode::get_previous_op((uint64_t)__src, (uint64_t)v669);
              v233 = v232;
              v234 = 1 - 1431655765 * ((unint64_t)(v230 - v231) >> 2);
              v235 = v669;
              if ((unint64_t)v669 >= v670)
              {
                v237 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
                v238 = v237 + 1;
                v100 = (_QWORD *)&unk_1F044B000;
                if (v237 + 1 > 0x1555555555555555)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v102 = v127;
                if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v238)
                  v238 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v239 = 0x1555555555555555;
                else
                  v239 = v238;
                if (v239)
                  v239 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v239);
                else
                  v240 = 0;
                v291 = (_DWORD *)(v239 + 12 * v237);
                *v291 = 6;
                v291[1] = v234;
                v291[2] = v233;
                v293 = __src;
                v292 = v669;
                v294 = v291;
                if (v669 != __src)
                {
                  do
                  {
                    v295 = *(_QWORD *)(v292 - 3);
                    v292 -= 3;
                    v296 = v292[2];
                    *(_QWORD *)(v294 - 3) = v295;
                    v294 -= 3;
                    v294[2] = v296;
                  }
                  while (v292 != v293);
                  v292 = __src;
                }
                v236 = (char *)(v291 + 3);
                __src = v294;
                v669 = (char *)(v291 + 3);
                v670 = v239 + 12 * v240;
                if (v292)
                  operator delete(v292);
              }
              else
              {
                *(_DWORD *)v669 = 6;
                *((_DWORD *)v235 + 1) = v234;
                v236 = (char *)v235 + 12;
                *((_DWORD *)v235 + 2) = v232;
                v100 = (_QWORD *)&unk_1F044B000;
                v102 = v127;
              }
              v669 = v236;
              goto LABEL_748;
            }
            v100 = &unk_1F044B000;
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v102 = v127;
            v227 = *((_QWORD *)v101 + 442);
            if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v681 = 0;
              _os_log_impl(&dword_1DE3F6000, v227, OS_LOG_TYPE_ERROR, "Invalid previous op from { in the rule!", v681, 2u);
            }
            v229 = "Invalid previous op from { in the rule!";
LABEL_362:
            Diagnostics::log(3, v229, v228);
            v226 = 1;
            goto LABEL_749;
          }
          v140 = v637.__r_.__value_.__l.__size_;
          if (v637.__r_.__value_.__l.__size_ < 2)
            goto LABEL_222;
          v141 = (std::string *)v637.__r_.__value_.__r.__words[0];
          v142 = (char *)(v637.__r_.__value_.__r.__words[0] + 1);
LABEL_242:
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v681, v142, (char *)v141 + v140 - 1, (char *)v141 + v140 - 1 - v142);
          UTFString::split(&v677, (const std::string *)v681, 0x2Cu, 0);
          v159 = *v677;
          v160 = v677[1];
          v161 = 0xAAAAAAAAAAAAAAABLL * ((v160 - *v677) >> 3);
          if (v161 >= 3)
          {
            if (v100[443] != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v162 = *((_QWORD *)v101 + 442);
            if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
            {
              v164 = v681;
              if (v681[23] < 0)
                v164 = *(_BYTE **)v681;
              *(_DWORD *)buf = 136315138;
              v680 = v164;
              _os_log_impl(&dword_1DE3F6000, v162, OS_LOG_TYPE_ERROR, "More than 2 parts in {} block, got: {%s}", buf, 0xCu);
            }
            v165 = v681;
            if (v681[23] < 0)
              v165 = *(_BYTE **)v681;
            Diagnostics::log(3, "More than 2 parts in {} block, got: {%s}", v163, v165);
            v150 = 0;
            v151 = 0;
            goto LABEL_324;
          }
          if (v160 == v159)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          if (*(char *)(v159 + 23) < 0)
          {
            if (!*(_QWORD *)(v159 + 8))
              goto LABEL_288;
LABEL_255:
            v166 = std::stoi((const std::string *)v159, 0, 10);
            v159 = *v677;
            v161 = 0xAAAAAAAAAAAAAAABLL * ((v677[1] - *v677) >> 3);
          }
          else
          {
            if (*(_BYTE *)(v159 + 23))
              goto LABEL_255;
LABEL_288:
            v166 = 0;
          }
          if (v161 <= 1)
          {
            v151 = 0;
            v150 = v166 - 1;
          }
          else
          {
            v180 = std::stoi((const std::string *)(v159 + 24), 0, 10);
            v150 = v166 - 1;
            if (v180 < 2)
            {
              if (v180 == 1)
                v151 = -1;
              else
                v151 = v180;
            }
            else
            {
              v151 = v180 - 1;
            }
          }
LABEL_324:
          v202 = v678;
          if (v678)
          {
            v203 = (unint64_t *)&v678->__shared_owners_;
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          if ((v681[23] & 0x80000000) != 0)
            operator delete(*(void **)v681);
          v127 = v102;
          goto LABEL_332;
        }
      }
      else if (v138)
      {
        goto LABEL_213;
      }
      std::string::basic_string[abi:ne180100]<0>(v681, "[^");
      v143 = UTFString::startswith((const void **)&v637.__r_.__value_.__l.__data_, v681);
      v144 = v143;
      if ((v681[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v681);
        if (v144)
        {
LABEL_219:
          v145 = FRCode::create_range(a1, &v665, &v662, (uint64_t)&v637, 1);
          v146 = *(_DWORD *)(a1 + 120) & 1;
          v147 = v669;
          if ((unint64_t)v669 >= v670)
          {
            v155 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
            v156 = v155 + 1;
            if (v155 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v156)
              v156 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v157 = 0x1555555555555555;
            else
              v157 = v156;
            if (v157)
              v157 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v157);
            else
              v158 = 0;
            v181 = (_DWORD *)(v157 + 12 * v155);
            *v181 = 13;
            v181[1] = v145;
            v181[2] = v146;
            v183 = __src;
            v182 = v669;
            v184 = v181;
            if (v669 != __src)
            {
              do
              {
                v185 = *(_QWORD *)(v182 - 3);
                v182 -= 3;
                v186 = v182[2];
                *(_QWORD *)(v184 - 3) = v185;
                v184 -= 3;
                v184[2] = v186;
              }
              while (v182 != v183);
              goto LABEL_741;
            }
            goto LABEL_742;
          }
          *(_DWORD *)v669 = 13;
          goto LABEL_232;
        }
      }
      else if (v143)
      {
        goto LABEL_219;
      }
      std::string::basic_string[abi:ne180100]<0>(v681, "[");
      v152 = UTFString::startswith((const void **)&v637.__r_.__value_.__l.__data_, v681);
      v153 = v152;
      if ((v681[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v681);
        if (v153)
        {
LABEL_230:
          v145 = FRCode::create_range(a1, &v665, &v662, (uint64_t)&v637, 0);
          v146 = *(_DWORD *)(a1 + 120) & 1;
          v147 = v669;
          if ((unint64_t)v669 >= v670)
          {
            v174 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
            v175 = v174 + 1;
            if (v174 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v175)
              v175 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v157 = 0x1555555555555555;
            else
              v157 = v175;
            if (v157)
              v157 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v157);
            else
              v158 = 0;
            v181 = (_DWORD *)(v157 + 12 * v174);
            *v181 = 12;
            v181[1] = v145;
            v181[2] = v146;
            v286 = __src;
            v182 = v669;
            v184 = v181;
            if (v669 != __src)
            {
              do
              {
                v287 = *(_QWORD *)(v182 - 3);
                v182 -= 3;
                v288 = v182[2];
                *(_QWORD *)(v184 - 3) = v287;
                v184 -= 3;
                v184[2] = v288;
              }
              while (v182 != v286);
              goto LABEL_741;
            }
            goto LABEL_742;
          }
          *(_DWORD *)v669 = 12;
LABEL_232:
          *((_DWORD *)v147 + 1) = v145;
          *((_DWORD *)v147 + 2) = v146;
          v154 = (char *)v147 + 12;
          goto LABEL_744;
        }
      }
      else if (v152)
      {
        goto LABEL_230;
      }
      if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v637.__r_.__value_.__l.__size_ == 1)
        {
          v167 = (std::string *)v637.__r_.__value_.__r.__words[0];
LABEL_299:
          if (v167->__r_.__value_.__s.__data_[0] == 46)
          {
            v187 = *(_DWORD *)(a1 + 120) & 1;
            v188 = v669;
            if ((unint64_t)v669 < v670)
            {
              *(_DWORD *)v669 = 14;
              *((_DWORD *)v188 + 1) = v187;
              v154 = (char *)v188 + 12;
              *((_DWORD *)v188 + 2) = 0;
              goto LABEL_744;
            }
            v308 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
            v309 = v308 + 1;
            if (v308 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v309)
              v309 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v157 = 0x1555555555555555;
            else
              v157 = v309;
            if (v157)
              v157 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v157);
            else
              v158 = 0;
            v181 = (_DWORD *)(v157 + 12 * v308);
            *v181 = 14;
            v181[1] = v187;
            v181[2] = 0;
            v447 = __src;
            v182 = v669;
            v184 = v181;
            if (v669 != __src)
            {
              do
              {
                v448 = *(_QWORD *)(v182 - 3);
                v182 -= 3;
                v449 = v182[2];
                *(_QWORD *)(v184 - 3) = v448;
                v184 -= 3;
                v184[2] = v449;
              }
              while (v182 != v447);
              goto LABEL_741;
            }
            goto LABEL_742;
          }
        }
      }
      else if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) == 1)
      {
        v167 = &v637;
        goto LABEL_299;
      }
      v189 = v102;
      v190 = (_QWORD *)FRCode::g_bnd_map_;
      v191 = std::__string_hash<char>::operator()[abi:ne180100](FRCode::g_bnd_map_ + 24, (uint64_t)&v637);
      v192 = (int8x8_t)v190[1];
      if (!*(_QWORD *)&v192)
        goto LABEL_392;
      v193 = v191;
      v194 = (uint8x8_t)vcnt_s8(v192);
      v194.i16[0] = vaddlv_u8(v194);
      v195 = v194.u32[0];
      if (v194.u32[0] > 1uLL)
      {
        v196 = v191;
        if (v191 >= *(_QWORD *)&v192)
          v196 = v191 % *(_QWORD *)&v192;
      }
      else
      {
        v196 = (*(_QWORD *)&v192 - 1) & v191;
      }
      v241 = *(unsigned __int8 ***)(*v190 + 8 * v196);
      if (!v241 || (v242 = *v241) == 0)
      {
LABEL_392:
        std::string::basic_string[abi:ne180100]<0>(v681, "\\");
        v101 = &unk_1F044B000;
        v100 = (_QWORD *)&unk_1F044B000;
        v245 = UTFString::startswith((const void **)&v637.__r_.__value_.__l.__data_, v681);
        v102 = v189;
        if ((v681[23] & 0x80000000) != 0)
          operator delete(*(void **)v681);
        if (v245)
        {
          v246 = HIBYTE(v637.__r_.__value_.__r.__words[2]);
          if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v246 = v637.__r_.__value_.__l.__size_;
          if (v246 >= 2)
          {
            v247 = *std::string::at(&v637, 1uLL);
            switch(v247)
            {
              case 'a':
                *(_QWORD *)v681 = 0x2D00000009;
                *(_DWORD *)&v681[8] = 0;
                std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                *(_QWORD *)v681 = 0x3E00000009;
                *(_DWORD *)&v681[8] = 0;
                std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                break;
              case 'b':
                goto LABEL_813;
              case 'c':
                *(_QWORD *)v681 = 0x3A00000009;
                *(_DWORD *)&v681[8] = 0;
                std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                break;
              case 'd':
                std::string::basic_string[abi:ne180100]<0>(v681, "[0-9]");
                v469 = FRCode::create_range(a1, &v665, &v662, (uint64_t)v681, 0);
                if ((v681[23] & 0x80000000) != 0)
                  operator delete(*(void **)v681);
                *(_DWORD *)v681 = 12;
                *(_DWORD *)&v681[4] = v469;
                *(_DWORD *)&v681[8] = *(_DWORD *)(a1 + 120) & 1;
                std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                break;
              case 'e':
                *(_QWORD *)v681 = 0x1B00000009;
                *(_DWORD *)&v681[8] = 0;
                std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                break;
              default:
                if (v247 == 115)
                {
                  *(_QWORD *)v681 = 0x2000000009;
                  *(_DWORD *)&v681[8] = 0;
                  std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                }
                else if (v247 == 117)
                {
                  *(_QWORD *)v681 = 0x5F00000009;
                  *(_DWORD *)&v681[8] = 0;
                  std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                }
                else
                {
LABEL_813:
                  *(_DWORD *)v681 = 9;
                  *(_QWORD *)&v681[4] = *std::string::at(&v637, 1uLL);
                  std::vector<FRCode::Op>::push_back[abi:ne180100]((unint64_t *)&__src, (uint64_t *)v681);
                }
                break;
            }
            v472 = HIBYTE(v637.__r_.__value_.__r.__words[2]);
            if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v472 = v637.__r_.__value_.__l.__size_;
            if (v472 >= 3)
            {
              for (k = 2; k < v487; ++k)
              {
                v474 = *std::string::at(&v637, k);
                v475 = v669;
                if ((unint64_t)v669 >= v670)
                {
                  v477 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
                  v478 = v477 + 1;
                  if (v477 + 1 > 0x1555555555555555)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v478)
                    v478 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v479 = 0x1555555555555555;
                  else
                    v479 = v478;
                  if (v479)
                    v479 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v479);
                  else
                    v480 = 0;
                  v481 = (_DWORD *)(v479 + 12 * v477);
                  *v481 = 9;
                  v481[1] = v474;
                  v481[2] = 0;
                  v483 = __src;
                  v482 = v669;
                  v484 = v481;
                  if (v669 != __src)
                  {
                    do
                    {
                      v485 = *(_QWORD *)(v482 - 3);
                      v482 -= 3;
                      v486 = v482[2];
                      *(_QWORD *)(v484 - 3) = v485;
                      v484 -= 3;
                      v484[2] = v486;
                    }
                    while (v482 != v483);
                    v482 = __src;
                  }
                  v476 = (char *)(v481 + 3);
                  __src = v484;
                  v669 = (char *)(v481 + 3);
                  v670 = v479 + 12 * v480;
                  if (v482)
                    operator delete(v482);
                }
                else
                {
                  *(_DWORD *)v669 = 9;
                  *((_DWORD *)v475 + 1) = v474;
                  v476 = (char *)v475 + 12;
                  *((_DWORD *)v475 + 2) = 0;
                }
                v669 = v476;
                v487 = HIBYTE(v637.__r_.__value_.__r.__words[2]);
                if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v487 = v637.__r_.__value_.__l.__size_;
              }
            }
            goto LABEL_745;
          }
          goto LABEL_748;
        }
        if ((*(_BYTE *)(a1 + 120) & 1) != 0 && (*std::string::at(&v637, 0) + 62) <= 0x32u)
        {
          if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v248 = &v637;
          else
            v248 = (std::string *)v637.__r_.__value_.__r.__words[0];
          if ((v637.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v249 = HIBYTE(v637.__r_.__value_.__r.__words[2]);
          else
            v249 = v637.__r_.__value_.__l.__size_;
          low = FRCode::get_low((uint64_t)v248, v249);
          high = FRCode::get_high((uint64_t)v248, v249);
          v252 = high;
          v253 = v669;
          v102 = v189;
          if ((unint64_t)v669 < v670)
          {
            *(_DWORD *)v669 = 10;
            *((_DWORD *)v253 + 1) = low;
            v254 = (char *)v253 + 12;
            *((_DWORD *)v253 + 2) = high;
            goto LABEL_865;
          }
          v452 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
          v453 = v452 + 1;
          if (v452 + 1 > 0x1555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v453)
            v453 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v306 = 0x1555555555555555;
          else
            v306 = v453;
          if (v306)
          {
            v306 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v306);
            v102 = v189;
          }
          else
          {
            v307 = 0;
          }
          v441 = (_DWORD *)(v306 + 12 * v452);
          *v441 = 10;
          v441[1] = low;
          v441[2] = v252;
          v488 = __src;
          v442 = v669;
          v444 = v441;
          if (v669 != __src)
          {
            do
            {
              v489 = *(_QWORD *)(v442 - 3);
              v442 -= 3;
              v490 = v442[2];
              *(_QWORD *)(v444 - 3) = v489;
              v444 -= 3;
              v444[2] = v490;
            }
            while (v442 != v488);
            goto LABEL_862;
          }
        }
        else
        {
          v255 = *std::string::at(&v637, 0);
          v256 = v669;
          if ((unint64_t)v669 < v670)
          {
            *(_DWORD *)v669 = 9;
            *((_DWORD *)v256 + 1) = v255;
            v254 = (char *)v256 + 12;
            *((_DWORD *)v256 + 2) = 0;
LABEL_865:
            v669 = v254;
            v226 = 0;
            if (SHIBYTE(v640) < 0)
            {
              *(_BYTE *)v638 = 0;
              v639 = 0;
            }
            else
            {
              LOBYTE(v638) = 0;
              HIBYTE(v640) = 0;
            }
            goto LABEL_749;
          }
          v304 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
          v305 = v304 + 1;
          if (v304 + 1 > 0x1555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v305)
            v305 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v306 = 0x1555555555555555;
          else
            v306 = v305;
          if (v306)
            v306 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v306);
          else
            v307 = 0;
          v441 = (_DWORD *)(v306 + 12 * v304);
          *v441 = 9;
          v441[1] = v255;
          v441[2] = 0;
          v443 = __src;
          v442 = v669;
          v444 = v441;
          if (v669 != __src)
          {
            do
            {
              v445 = *(_QWORD *)(v442 - 3);
              v442 -= 3;
              v446 = v442[2];
              *(_QWORD *)(v444 - 3) = v445;
              v444 -= 3;
              v444[2] = v446;
            }
            while (v442 != v443);
LABEL_862:
            v442 = __src;
          }
        }
        v254 = (char *)(v441 + 3);
        __src = v444;
        v669 = (char *)(v441 + 3);
        v670 = v306 + 12 * v307;
        if (v442)
          operator delete(v442);
        goto LABEL_865;
      }
      v243 = (uint64_t)(v190 + 4);
      while (1)
      {
        v244 = *((_QWORD *)v242 + 1);
        if (v244 == v193)
          break;
        if (v195 > 1)
        {
          if (v244 >= *(_QWORD *)&v192)
            v244 %= *(_QWORD *)&v192;
        }
        else
        {
          v244 &= *(_QWORD *)&v192 - 1;
        }
        if (v244 != v196)
          goto LABEL_392;
LABEL_391:
        v242 = *(unsigned __int8 **)v242;
        if (!v242)
          goto LABEL_392;
      }
      if ((std::equal_to<std::string>::operator()[abi:ne180100](v243, v242 + 16, (unsigned __int8 *)&v637) & 1) == 0)
        goto LABEL_391;
      v450 = *((_DWORD *)v242 + 10);
      v451 = v669;
      if ((unint64_t)v669 < v670)
      {
        *(_DWORD *)v669 = 11;
        *((_DWORD *)v451 + 1) = v450;
        v154 = (char *)v451 + 12;
        *((_DWORD *)v451 + 2) = 0;
        v101 = &unk_1F044B000;
        v100 = (_QWORD *)&unk_1F044B000;
        v102 = v189;
        goto LABEL_744;
      }
      v470 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
      v471 = v470 + 1;
      v101 = &unk_1F044B000;
      v100 = (_QWORD *)&unk_1F044B000;
      if (v470 + 1 > 0x1555555555555555)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v102 = v189;
      if (0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2) > v471)
        v471 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v157 = 0x1555555555555555;
      else
        v157 = v471;
      if (v157)
        v157 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v157);
      else
        v158 = 0;
      v181 = (_DWORD *)(v157 + 12 * v470);
      *v181 = 11;
      v181[1] = v450;
      v181[2] = 0;
      v515 = __src;
      v182 = v669;
      v184 = v181;
      if (v669 != __src)
      {
        do
        {
          v516 = *(_QWORD *)(v182 - 3);
          v182 -= 3;
          v517 = v182[2];
          *(_QWORD *)(v184 - 3) = v516;
          v184 -= 3;
          v184[2] = v517;
        }
        while (v182 != v515);
LABEL_741:
        v182 = __src;
      }
LABEL_742:
      v154 = (char *)(v181 + 3);
      __src = v184;
      v669 = (char *)(v181 + 3);
      v670 = v157 + 12 * v158;
      if (v182)
        operator delete(v182);
LABEL_744:
      v669 = v154;
LABEL_745:
      if (SHIBYTE(v640) < 0)
      {
        *(_BYTE *)v638 = 0;
        v639 = 0;
      }
      else
      {
        LOBYTE(v638) = 0;
        HIBYTE(v640) = 0;
      }
LABEL_748:
      v226 = 6;
LABEL_749:
      if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v637.__r_.__value_.__l.__data_);
      if (v226 != 6 && v226)
        goto LABEL_1090;
      v104 = (v102 + 1);
      v99 = *v673;
      if (0xAAAAAAAAAAAAAAABLL * ((v673[1] - *v673) >> 3) <= v104)
      {
        v88 = v669;
        break;
      }
      ++v102;
      v103 = v636;
    }
  }
  if ((unint64_t)v88 >= v670)
  {
    v519 = 0xAAAAAAAAAAAAAAABLL * ((v88 - (_BYTE *)__src) >> 2);
    if (v519 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v520 = 0x5555555555555556 * ((uint64_t)(v670 - (_QWORD)__src) >> 2);
    if (v520 <= v519 + 1)
      v520 = v519 + 1;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - (_QWORD)__src) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v521 = 0x1555555555555555;
    else
      v521 = v520;
    if (v521)
      v521 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v521);
    else
      v522 = 0;
    v523 = (char *)(v521 + 12 * v519);
    v524 = v521 + 12 * v522;
    *(_QWORD *)v523 = 1;
    *((_DWORD *)v523 + 2) = 0;
    v518 = v523 + 12;
    v526 = __src;
    v525 = v669;
    if (v669 != __src)
    {
      do
      {
        v527 = *(_QWORD *)(v525 - 3);
        v525 -= 3;
        v528 = v525[2];
        *(_QWORD *)(v523 - 12) = v527;
        v523 -= 12;
        *((_DWORD *)v523 + 2) = v528;
      }
      while (v525 != v526);
      v525 = __src;
    }
    __src = v523;
    v669 = v518;
    v670 = v524;
    if (v525)
      operator delete(v525);
  }
  else
  {
    *(_QWORD *)v88 = 1;
    *((_DWORD *)v88 + 2) = 0;
    v518 = v88 + 12;
  }
  v669 = v518;
  v529 = (v518 - (_BYTE *)__src) / 12;
  if (v518 != __src)
  {
    v530 = 0;
    v531 = 0;
    if (v529 <= 1)
      v532 = 1;
    else
      v532 = (v518 - (_BYTE *)__src) / 12;
    v533 = (char *)__src + 4;
    v534 = 1;
    while (1)
    {
      v535 = *(v533 - 1);
      if ((v535 - 2) >= 4 && v535 != 0)
      {
        if (v535 == 11)
        {
          if (!*v533)
            goto LABEL_938;
          ++v531;
        }
        else
        {
          ++v531;
        }
      }
      v534 = v529 > ++v530;
      v533 += 3;
      if (v532 == v530)
        goto LABEL_938;
    }
  }
  v534 = 0;
  v531 = 0;
LABEL_938:
  v537 = v534 && v531 == 0 || !v534;
  v538 = v529 - 1;
  if (v537 && (v538 & 0x80000000) == 0)
  {
    for (m = v529 - 1; ; --m)
    {
      if (v529 <= m)
LABEL_1121:
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v540 = *((_DWORD *)__src + 3 * m);
      if ((v540 - 1) >= 5)
      {
        if (v540 == 11)
        {
          v541 = *((_DWORD *)__src + 3 * m + 1) == 1 || m <= 0;
          if (v541)
            break;
        }
        else if (m <= 0)
        {
          break;
        }
      }
      else if (m < 1)
      {
        break;
      }
    }
  }
  if (v537)
  {
    if ((v538 & 0x80000000) == 0)
    {
      v542 = 0;
      while (1)
      {
        v543 = (char *)__src;
        v544 = 0xAAAAAAAAAAAAAAABLL * ((v669 - (_BYTE *)__src) >> 2);
        if (v544 <= v538)
          goto LABEL_1121;
        v545 = (char *)__src + 12 * v538;
        if (*v545 != 3)
          break;
        v546 = (char *)__src + 12 * v538;
        v549 = *((_DWORD *)v546 + 1);
        v547 = v546 + 4;
        v548 = v549;
        if (!v549)
        {
          v529 = (v529 - 2);
          if ((v529 & 0x80000000) == 0)
          {
            v550 = (char *)__src + 12 * v529 + 4;
            v551 = 1;
            v552 = v529;
            while (1)
            {
              if (v544 <= v529)
                goto LABEL_1121;
              v553 = *(v550 - 1);
              v554 = v553 == 2 && *v550 == 0;
              if (v554 && ((v551 ^ 1) & 1) == 0)
                break;
              v555 = v553 - 9;
              if (v555 < 6)
                v551 = (((0x3Bu >> v555) & 1) == 0) & v551;
              v550 -= 3;
              v541 = v552-- <= 0;
              if (v541)
                goto LABEL_981;
            }
            v556 = v669 - (char *)(v545 + 3);
            if (v669 != (char *)(v545 + 3))
            {
              memmove((char *)__src + 12 * v538, v545 + 3, v669 - (char *)(v545 + 3));
              v543 = (char *)__src;
            }
            v557 = (char *)v545 + v556;
            v669 = v557;
            v558 = &v543[12 * v552];
            v559 = (char *)(v557 - (v558 + 12));
            if (v557 != v558 + 12)
              memmove(&v543[12 * v552], v558 + 12, v557 - (v558 + 12));
            v669 = &v559[(_QWORD)v558];
            goto LABEL_982;
          }
          goto LABEL_981;
        }
        LODWORD(v529) = v538;
        if (v548 >= 3)
        {
          *v547 = 2;
          goto LABEL_994;
        }
LABEL_982:
        v538 = v529 - 1;
        if ((int)v529 - 1 < 0)
          goto LABEL_994;
      }
      if (*v545 == 5)
      {
        if ((v542 & 1) == 0)
        {
          if ((*((_DWORD *)__src + 3 * v538 + 1) + 1499) > 0x5D8)
          {
            v542 = 0;
            goto LABEL_981;
          }
          *(_QWORD *)v545 = 3;
        }
        v542 = 1;
      }
LABEL_981:
      LODWORD(v529) = v538;
      goto LABEL_982;
    }
LABEL_994:
    *(_DWORD *)(a1 + 112) = FRCode::calc_min_length((uint64_t *)&__src, &v659, 0, -1431655765 * ((unint64_t)(v669 - (_BYTE *)__src) >> 2));
    FRCode::update_anchor_bytes(a1, &v665, &v662, &__src, &v659, (unint64_t *)&v656, (unint64_t *)&v653, 0, -1431655765 * ((unint64_t)(v669 - (_BYTE *)__src) >> 2));
    v562 = (unsigned __int8 *)v656;
    v563 = v657;
    if ((*(_BYTE *)(a1 + 120) & 8) != 0 && (int)v657 - (int)v656 >= 1)
    {
      v564 = 0;
      v565 = ((_DWORD)v657 - (_DWORD)v656);
      while (1)
      {
        v566 = (unint64_t)v656;
        v567 = v563 - (_BYTE *)v656;
        if (v563 - (_BYTE *)v656 <= v564)
          std::vector<int>::__throw_out_of_range[abi:ne180100]();
        v568 = *((unsigned __int8 *)v656 + v564);
        v569 = case_folding[v568];
        if (v569 == (_DWORD)v568)
        {
          LOBYTE(v569) = case_folding[v568 + 256];
          if (v563 >= (unsigned __int8 *)v658)
          {
            v570 = v567 + 1;
            if (v567 + 1 < 0)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v571 = v658 - (_BYTE *)v656;
            if (2 * (v658 - (_BYTE *)v656) > v570)
              v570 = 2 * v571;
            if (v571 >= 0x3FFFFFFFFFFFFFFFLL)
              v572 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v572 = v570;
            if (v572)
              v573 = (char *)operator new(v572);
            else
              v573 = 0;
            v576 = &v573[v567];
            v577 = &v573[v567];
            *v577 = v569;
            v578 = (unsigned __int8 *)(v577 + 1);
            if (v563 != (unsigned __int8 *)v566)
            {
              v579 = &v563[~v566];
              do
              {
                v580 = *--v563;
                (v579--)[(_QWORD)v573] = v580;
              }
              while (v563 != (unsigned __int8 *)v566);
              goto LABEL_1027;
            }
            goto LABEL_1028;
          }
        }
        else if (v563 >= (unsigned __int8 *)v658)
        {
          v574 = v567 + 1;
          if (v567 + 1 < 0)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v575 = v658 - (_BYTE *)v656;
          if (2 * (v658 - (_BYTE *)v656) > v574)
            v574 = 2 * v575;
          if (v575 >= 0x3FFFFFFFFFFFFFFFLL)
            v572 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v572 = v574;
          if (v572)
            v573 = (char *)operator new(v572);
          else
            v573 = 0;
          v576 = &v573[v567];
          v581 = &v573[v567];
          *v581 = v569;
          v578 = (unsigned __int8 *)(v581 + 1);
          if (v563 != (unsigned __int8 *)v566)
          {
            v582 = &v563[~v566];
            do
            {
              v583 = *--v563;
              (v582--)[(_QWORD)v573] = v583;
            }
            while (v563 != (unsigned __int8 *)v566);
LABEL_1027:
            v563 = (unsigned __int8 *)v656;
            v576 = v573;
          }
LABEL_1028:
          v656 = v576;
          v657 = v578;
          v658 = &v573[v572];
          if (v563)
            operator delete(v563);
          v563 = v578;
          goto LABEL_1031;
        }
        *v563++ = v569;
LABEL_1031:
        v657 = v563;
        if (++v564 == v565)
        {
          v562 = (unsigned __int8 *)v656;
          break;
        }
      }
    }
    if (v562 != v563)
    {
      LOBYTE(v682) = 0;
      memset(v681, 0, sizeof(v681));
      do
      {
        v584 = *v562++;
        *(_QWORD *)&v681[((unint64_t)v584 >> 3) & 0x18] |= 1 << v584;
      }
      while (v562 != v563);
      v585 = v666;
      if ((unint64_t)v666 >= v667)
      {
        v587 = 0x666666666666666;
        v588 = v665;
        v589 = 0xCCCCCCCCCCCCCCCDLL * ((v666 - (_BYTE *)v665) >> 3);
        v590 = v589 + 1;
        if (v589 + 1 > 0x666666666666666)
          goto LABEL_1149;
        if (0x999999999999999ALL * ((uint64_t)(v667 - (_QWORD)v665) >> 3) > v590)
          v590 = 0x999999999999999ALL * ((uint64_t)(v667 - (_QWORD)v665) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v667 - (_QWORD)v665) >> 3) < 0x333333333333333)
          v587 = v590;
        if (v587)
        {
          v587 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v587);
          v588 = v665;
          v585 = v666;
        }
        else
        {
          v591 = 0;
        }
        v592 = (_OWORD *)(v587 + 40 * v589);
        v593 = v587 + 40 * v591;
        *v592 = *(_OWORD *)v681;
        v592[1] = *(_OWORD *)&v681[16];
        *((_QWORD *)v592 + 4) = v682;
        v586 = (char *)v592 + 40;
        if (v585 == v588)
        {
          v596 = (char *)v592;
        }
        else
        {
          do
          {
            v594 = *(_OWORD *)((char *)v585 - 40);
            v595 = *(_OWORD *)((char *)v585 - 24);
            v596 = (char *)v592 - 40;
            *((_BYTE *)v592 - 8) = *((_BYTE *)v585 - 8);
            *(_OWORD *)((char *)v592 - 24) = v595;
            *(_OWORD *)((char *)v592 - 40) = v594;
            v585 = (_OWORD *)((char *)v585 - 40);
            v592 = (_OWORD *)((char *)v592 - 40);
          }
          while (v585 != v588);
        }
        v665 = v596;
        v666 = v586;
        v667 = v593;
        if (v588)
          operator delete(v588);
      }
      else
      {
        *(_OWORD *)v666 = *(_OWORD *)v681;
        v585[1] = *(_OWORD *)&v681[16];
        *((_QWORD *)v585 + 4) = v682;
        v586 = (char *)v585 + 40;
      }
      v666 = v586;
      *(_QWORD *)(a1 + 120) |= 0x10uLL;
    }
    v597 = (unsigned __int8 *)v653;
    v598 = v654;
    if (v653 == v654)
    {
LABEL_1073:
      *(_DWORD *)(a1 + 40) = -1431655765 * ((v669 - (_BYTE *)__src) >> 2);
      v612 = (void *)operator new[]();
      *(_QWORD *)(a1 + 32) = v612;
      memcpy(v612, __src, 12 * *(unsigned int *)(a1 + 40));
      v613 = -858993459 * ((v666 - (_BYTE *)v665) >> 3);
      *(_DWORD *)(a1 + 56) = v613;
      v614 = v613;
      v615 = (char *)operator new[]();
      v616 = v615;
      if (v614)
      {
        v617 = 40 * v614;
        v618 = v615;
        do
        {
          v618[32] = 0;
          *(_OWORD *)v618 = 0uLL;
          *((_OWORD *)v618 + 1) = 0uLL;
          v618 += 40;
          v617 -= 40;
        }
        while (v617);
      }
      *(_QWORD *)(a1 + 48) = v615;
      v619 = *(unsigned int *)(a1 + 56);
      memcpy(v615, v665, 40 * v619);
      v620 = *(_QWORD *)(a1 + 120);
      if ((~*(_DWORD *)(a1 + 120) & 0x30) != 0)
      {
        if ((v620 & 0x10) != 0)
        {
          *(_QWORD *)(a1 + 96) = &v616[40 * v619 - 40];
        }
        else if ((v620 & 0x20) != 0)
        {
          *(_QWORD *)(a1 + 104) = 0;
        }
      }
      else
      {
        v621 = &v616[40 * v619];
        *(_QWORD *)(a1 + 96) = v621 - 80;
        *(_QWORD *)(a1 + 104) = v621 - 40;
      }
      v622 = -858993459 * ((v663 - v662) >> 4);
      *(_DWORD *)(a1 + 72) = v622;
      v623 = v622;
      v624 = (_QWORD *)operator new[]();
      *v624 = 80;
      v624[1] = v623;
      v625 = v624 + 2;
      if (v623)
      {
        v626 = v624 + 2;
        do
        {
          *(_BYTE *)v626 = 0;
          v626[2] = 0;
          v626[3] = 0;
          v626[1] = 0;
          v626 += 10;
        }
        while (v626 != &v625[10 * v623]);
      }
      *(_QWORD *)(a1 + 64) = v625;
      if (*(_DWORD *)(a1 + 72))
      {
        v627 = 0;
        v628 = 0;
        do
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((v663 - v662) >> 4) <= v628)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          FRCodeUMap::copy((FRCodeUMap *)(*(_QWORD *)(a1 + 64) + v627), (const FRCodeUMap *)(v662 + v627));
          ++v628;
          v627 += 80;
        }
        while (v628 < *(unsigned int *)(a1 + 72));
      }
      *(_DWORD *)(a1 + 88) = (unint64_t)(v660 - (_BYTE *)v659) >> 2;
      v629 = (void *)operator new[]();
      *(_QWORD *)(a1 + 80) = v629;
      memcpy(v629, v659, 4 * *(unsigned int *)(a1 + 88));
      goto LABEL_1090;
    }
    memset(v681, 0, sizeof(v681));
    LOBYTE(v682) = 1;
    do
    {
      v599 = *v597++;
      *(_QWORD *)&v681[((unint64_t)v599 >> 3) & 0x18] |= 1 << v599;
    }
    while (v597 != v598);
    v600 = v666;
    if ((unint64_t)v666 < v667)
    {
      *(_OWORD *)v666 = *(_OWORD *)v681;
      v600[1] = *(_OWORD *)&v681[16];
      *((_QWORD *)v600 + 4) = v682;
      v601 = (char *)v600 + 40;
LABEL_1072:
      v666 = v601;
      *(_QWORD *)(a1 + 120) |= 0x20uLL;
      goto LABEL_1073;
    }
    v602 = 0x666666666666666;
    v603 = v665;
    v604 = 0xCCCCCCCCCCCCCCCDLL * ((v666 - (_BYTE *)v665) >> 3);
    v605 = v604 + 1;
    if (v604 + 1 <= 0x666666666666666)
    {
      if (0x999999999999999ALL * ((uint64_t)(v667 - (_QWORD)v665) >> 3) > v605)
        v605 = 0x999999999999999ALL * ((uint64_t)(v667 - (_QWORD)v665) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v667 - (_QWORD)v665) >> 3) < 0x333333333333333)
        v602 = v605;
      if (v602)
      {
        v602 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v602);
        v603 = v665;
        v600 = v666;
      }
      else
      {
        v606 = 0;
      }
      v607 = (_OWORD *)(v602 + 40 * v604);
      v608 = v602 + 40 * v606;
      *v607 = *(_OWORD *)v681;
      v607[1] = *(_OWORD *)&v681[16];
      *((_QWORD *)v607 + 4) = v682;
      v601 = (char *)v607 + 40;
      if (v600 == v603)
      {
        v611 = (char *)v607;
      }
      else
      {
        do
        {
          v609 = *(_OWORD *)((char *)v600 - 40);
          v610 = *(_OWORD *)((char *)v600 - 24);
          v611 = (char *)v607 - 40;
          *((_BYTE *)v607 - 8) = *((_BYTE *)v600 - 8);
          *(_OWORD *)((char *)v607 - 24) = v610;
          *(_OWORD *)((char *)v607 - 40) = v609;
          v600 = (_OWORD *)((char *)v600 - 40);
          v607 = (_OWORD *)((char *)v607 - 40);
        }
        while (v600 != v603);
      }
      v665 = v611;
      v666 = v601;
      v667 = v608;
      if (v603)
        operator delete(v603);
      goto LABEL_1072;
    }
LABEL_1149:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (v100[443] != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v560 = *((_QWORD *)v101 + 442);
  if (os_log_type_enabled(v560, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v681 = 0;
    _os_log_impl(&dword_1DE3F6000, v560, OS_LOG_TYPE_ERROR, "Invalid boundary op in the rule, please check!", v681, 2u);
  }
  Diagnostics::log(3, "Invalid boundary op in the rule, please check!", v561);
LABEL_1090:
  if (SHIBYTE(v640) < 0)
    operator delete(v638);
  if (v641)
  {
    v642 = (char *)v641;
    operator delete(v641);
  }
  if (v644)
  {
    v645 = (char *)v644;
    operator delete(v644);
  }
  if (v647)
  {
    v648 = (char *)v647;
    operator delete(v647);
  }
  if (__p)
  {
    v651 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v653)
  {
    v654 = (unsigned __int8 *)v653;
    operator delete(v653);
  }
  if (v656)
  {
    v657 = (unsigned __int8 *)v656;
    operator delete(v656);
  }
  if (v659)
  {
    v660 = (char *)v659;
    operator delete(v659);
  }
  *(_QWORD *)v681 = &v662;
  std::vector<FRCodeUMap>::__destroy_vector::operator()[abi:ne180100]((void ***)v681);
  if (v665)
  {
    v666 = (char *)v665;
    operator delete(v665);
  }
  if (__src)
  {
    v669 = (char *)__src;
    operator delete(__src);
  }
  v630 = v672;
  if (v672)
  {
    v631 = (unint64_t *)&v672->__shared_owners_;
    do
      v632 = __ldaxr(v631);
    while (__stlxr(v632 - 1, v631));
    if (!v632)
    {
      ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
      std::__shared_weak_count::__release_weak(v630);
    }
  }
  v633 = v674;
  if (v674)
  {
    v634 = (unint64_t *)&v674->__shared_owners_;
    do
      v635 = __ldaxr(v634);
    while (__stlxr(v635 - 1, v634));
    if (!v635)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
}

void sub_1DE9D0F84()
{
  uint64_t v0;

  __cxa_end_catch();
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v0 - 240);
  JUMPOUT(0x1DE9D118CLL);
}

void sub_1DE9D0F94()
{
  uint64_t v0;

  __cxa_end_catch();
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v0 - 240);
  JUMPOUT(0x1DE9D118CLL);
}

void sub_1DE9D0FA4()
{
  JUMPOUT(0x1DE9D112CLL);
}

void sub_1DE9D1148()
{
  uint64_t v0;

  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v0 - 256);
  JUMPOUT(0x1DE9D12D4);
}

void sub_1DE9D11B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  JUMPOUT(0x1DE9D11C4);
}

void sub_1DE9D11F0()
{
  JUMPOUT(0x1DE9D1254);
}

void std::vector<FRCode::Op>::insert(uint64_t a1, char *__src, uint64_t *a3)
{
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;

  v6 = *(char **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v12 = *(char **)a1;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v13 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = __src - v12;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 2);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v12) >> 2);
    if (2 * v16 > v13)
      v13 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v13;
    if (v17)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v17);
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = &v19[12 * v15];
    v23 = &v19[12 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src)
          v26 = 1;
        else
          v26 = 2 * v15;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v26);
        v22 = &v27[12 * (v26 >> 2)];
        v23 = &v27[12 * v28];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(12 * v15) >> 2);
        if (v24 >= -1)
          v25 = v24 + 1;
        else
          v25 = v24 + 2;
        v22 -= 12 * (v25 >> 1);
      }
    }
    v29 = *a3;
    *((_DWORD *)v22 + 2) = *((_DWORD *)a3 + 2);
    *(_QWORD *)v22 = v29;
    v30 = *(char **)a1;
    v31 = v22;
    if (*(char **)a1 != __src)
    {
      v32 = __src;
      v31 = v22;
      do
      {
        v33 = *(_QWORD *)(v32 - 12);
        v32 -= 12;
        v34 = *((_DWORD *)v32 + 2);
        *(_QWORD *)(v31 - 12) = v33;
        v31 -= 12;
        *((_DWORD *)v31 + 2) = v34;
      }
      while (v32 != v30);
    }
    v35 = *(_BYTE **)(a1 + 8);
    v36 = v35 - __src;
    if (v35 != __src)
      memmove(v22 + 12, __src, v35 - __src);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v31;
    *(_QWORD *)(a1 + 8) = &v22[v36 + 12];
    *(_QWORD *)(a1 + 16) = v23;
    if (v37)
      operator delete(v37);
  }
  else if (__src == v6)
  {
    v21 = *a3;
    *((_DWORD *)__src + 2) = *((_DWORD *)a3 + 2);
    *(_QWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 12;
  }
  else
  {
    v8 = __src + 12;
    v9 = v6 - 12;
    v10 = *(_QWORD *)(a1 + 8);
    while (v9 < v6)
    {
      v11 = *(_QWORD *)v9;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
      *(_QWORD *)v10 = v11;
      v10 += 12;
      v9 += 12;
    }
    *(_QWORD *)(a1 + 8) = v10;
    if (v6 != v8)
      memmove(__src + 12, __src, v6 - v8);
    v20 = *a3;
    *((_DWORD *)__src + 2) = *((_DWORD *)a3 + 2);
    *(_QWORD *)__src = v20;
  }
}

void sub_1DE9D154C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::vector<FRCode::Op>::push_back[abi:ne180100](unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;

  v5 = a1[1];
  v4 = a1[2];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 2);
    v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::Op>>(v11);
    else
      v12 = 0;
    v13 = v11 + 12 * v8;
    v14 = v11 + 12 * v12;
    v15 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v13 = v15;
    v7 = v13 + 12;
    v17 = (_DWORD *)*a1;
    v16 = (_DWORD *)a1[1];
    if (v16 != (_DWORD *)*a1)
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 3);
        v16 -= 3;
        v19 = v16[2];
        *(_QWORD *)(v13 - 12) = v18;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v19;
      }
      while (v16 != v17);
      v16 = (_DWORD *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
  }
  a1[1] = v7;
}

uint64_t FRCode::get_low(uint64_t a1, unint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint64_t v5;
  unint64_t i;
  unsigned int v9;
  uint8_t buf[16];

  if (a2 >= 9)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_ERROR, "Assumption of raw is one utf8 char, this doesn't hold here", buf, 2u);
    }
    Diagnostics::log(3, "Assumption of raw is one utf8 char, this doesn't hold here", v3);
    return 0;
  }
  if (a2 >= 4)
    v5 = 4;
  else
    v5 = a2;
  v9 = 0;
  if (!v5)
    return 0;
  for (i = 0; i != v5; ++i)
    buf[i - 4] = *(_BYTE *)boost::basic_string_ref<char,std::char_traits<char>>::at(a1, a2, i);
  return v9;
}

uint64_t FRCode::get_high(uint64_t a1, unint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint64_t result;
  uint64_t v7;
  unint64_t i;
  unsigned int v9;
  uint8_t buf[16];

  if (a2 < 9)
  {
    result = 0;
    if (a2 <= 4)
      v7 = 4;
    else
      v7 = a2;
    v9 = 0;
    if (v7 >= 5)
    {
      for (i = 4; i != v7; ++i)
        buf[i - 4] = *(_BYTE *)boost::basic_string_ref<char,std::char_traits<char>>::at(a1, a2, i);
      return v9;
    }
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_ERROR, "Assumption of raw is one utf8 char, this doesn't hold here", buf, 2u);
    }
    Diagnostics::log(3, "Assumption of raw is one utf8 char, this doesn't hold here", v3);
    return 0;
  }
  return result;
}

uint64_t FRCode::calc_min_length(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  int v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  NSObject *v24;
  const char *v25;
  int v28;
  uint8_t buf[16];

  if (a3 < a4)
  {
    v4 = a4;
    v5 = a3;
    v8 = 0;
    while (2)
    {
      v9 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) > v5)
      {
        v10 = v5;
        switch(*(_DWORD *)(v9 + 12 * v5))
        {
          case 6:
            v11 = v9 + 12 * v5;
            v13 = *(_DWORD *)(v11 + 4);
            v12 = *(_DWORD *)(v11 + 8);
            if (v13 <= v12)
              v5 = v12;
            else
              v5 = v13;
            goto LABEL_7;
          case 7:
            v28 = v8;
            v14 = v9 + 12 * v5;
            v17 = *(_DWORD *)(v14 + 4);
            v16 = (_DWORD *)(v14 + 4);
            v15 = v17;
            if (v17 >= v16[1] + v17)
            {
              v5 = 0;
              v19 = -1;
            }
            else
            {
              v5 = 0;
              v18 = 2 * v15;
              v19 = -1;
              do
              {
                v20 = FRCode::calc_min_length(a1, a2, (*(_DWORD *)(*a2 + 4 * v18) + v10), (*(_DWORD *)(*a2 + 4 * (v18 + 1)) + v10));
                if (v20 < v19)
                {
                  v21 = *(_DWORD *)(*a2 + 4 * (v18 + 1)) + v10;
                  if (*(_DWORD *)(*a1 + 12 * v21) == 8)
                    v5 = *(_DWORD *)(*a1 + 12 * v21 + 4);
                  else
                    v5 = v21 + 1;
                  v19 = v20;
                }
                ++v15;
                v18 += 2;
              }
              while (v16[1] + *v16 > v15);
            }
            v4 = a4;
            v8 = v19 + v28;
            goto LABEL_7;
          case 8:
            v5 = *(_DWORD *)(v9 + 12 * v5 + 4);
            goto LABEL_7;
          case 9:
          case 0xC:
          case 0xD:
          case 0xE:
            goto LABEL_5;
          case 0xA:
            v22 = *(_DWORD *)(v9 + 12 * v5 + 4);
            if (HIBYTE(v22))
            {
              v23 = *(_DWORD *)(v9 + 12 * v5 + 8);
              if (v23)
              {
                if (v23 > 0xFF)
                {
                  if (HIWORD(v23))
                  {
                    if (Diagnostics_GetLogObject(void)::onceToken != -1)
                      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                    v24 = Diagnostics_GetLogObject(void)::__profile_log_default;
                    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1DE3F6000, v24, OS_LOG_TYPE_ERROR, "Invalid UTF8 Char", buf, 2u);
                    }
                    Diagnostics::log(3, "Invalid UTF8 Char", v25);
                  }
                  else
                  {
                    v8 = (v8 + 6);
                  }
                }
                else
                {
                  v8 = (v8 + 5);
                }
              }
              else
              {
                v8 = (v8 + 4);
              }
            }
            else if (v22 <= 0xFE)
            {
LABEL_5:
              v8 = (v8 + 1);
            }
            else if (v22 > 0xFFFE)
            {
              v8 = (v8 + 3);
            }
            else
            {
              v8 = (v8 + 2);
            }
            goto LABEL_6;
          default:
LABEL_6:
            v5 = v10 + 1;
LABEL_7:
            if (v5 >= v4)
              return v8;
            continue;
        }
      }
      break;
    }
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  }
  return 0;
}

void FRCode::update_anchor_bytes(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unint64_t *a6, unint64_t *a7, int a8, int a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  unint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  char v68;
  _BYTE *v69;
  char v70;
  unint64_t *v71;
  int v72;
  char v73;

  v9 = a1;
  if (a8 < a9)
  {
    v10 = a5;
    v11 = a4;
    v12 = a3;
    v13 = a2;
    v14 = *a4;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 2);
    v16 = 1;
    while (2)
    {
      if (v15 <= a8)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v17 = a8;
      switch(*(_DWORD *)(v14 + 12 * a8))
      {
        case 6:
          v18 = v14 + 12 * a8;
          v19 = a6;
          v20 = a7;
          FRCode::update_anchor_bytes(a1, a2, a3, a4, a5, a6, a7, *(unsigned int *)(v18 + 4), v15);
          FRCode::update_anchor_bytes(v9, v13, v12, v11, v10, v19, v20, *(unsigned int *)(v18 + 8), -1431655765 * ((v11[1] - *v11) >> 2));
          goto LABEL_62;
        case 7:
          v73 = v16;
          v21 = v14 + 12 * a8;
          v25 = *(_DWORD *)(v21 + 4);
          v23 = (_DWORD *)(v21 + 4);
          v24 = v25;
          v26 = v23 + 1;
          if (v25 < v23[1] + v25)
          {
            v27 = 2 * v24;
            do
            {
              v28 = (*(_DWORD *)(*v10 + 4 * v27) + v17);
              v72 = *(_DWORD *)(*v10 + 4 * (v27 + 1)) + v17;
              v29 = v13;
              v30 = v12;
              v31 = v11;
              v32 = v10;
              v33 = a6;
              v34 = a7;
              v35 = v11;
              v36 = v10;
              v37 = v23;
              FRCode::update_anchor_bytes(a1, v29, v30, v31, v32, a6, a7, v28, v72);
              v23 = v37;
              v10 = v36;
              v11 = v35;
              a7 = v34;
              a6 = v33;
              v13 = a2;
              v12 = a3;
              ++v24;
              v27 += 2;
            }
            while (*v26 + *v23 > v24);
          }
          v9 = a1;
          if ((v73 & 1) == 0)
            return;
          goto LABEL_63;
        case 8:
          a8 = *(_DWORD *)(v14 + 12 * a8 + 4);
          goto LABEL_6;
        case 9:
          v38 = *(_DWORD *)(v14 + 12 * a8 + 4);
          v40 = (_BYTE *)a6[1];
          v51 = a6[2];
          if ((unint64_t)v40 < v51)
            goto LABEL_30;
          v58 = *a6;
          v59 = &v40[-*a6];
          v60 = (unint64_t)(v59 + 1);
          if ((uint64_t)(v59 + 1) < 0)
            goto LABEL_67;
          v61 = v51 - v58;
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x3FFFFFFFFFFFFFFFLL)
            v62 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = a6;
            v47 = (unint64_t)operator new(v62);
            a6 = v63;
          }
          else
          {
            v47 = 0;
          }
          v65 = &v59[v47];
          v66 = (char *)(v47 + v62);
          v59[v47] = v38;
          v52 = (uint64_t)&v59[v47 + 1];
          if (v40 == (_BYTE *)v58)
            goto LABEL_58;
          v69 = &v40[~v58];
          do
          {
            v70 = *--v40;
            (v69--)[v47] = v70;
          }
          while (v40 != (_BYTE *)v58);
          goto LABEL_57;
        case 0xA:
          LOBYTE(v38) = *(_BYTE *)(v14 + 12 * a8 + 4);
          v40 = (_BYTE *)a6[1];
          v39 = a6[2];
          if ((unint64_t)v40 < v39)
          {
LABEL_30:
            *v40 = v38;
            v52 = (uint64_t)(v40 + 1);
          }
          else
          {
            v41 = *a6;
            v42 = &v40[-*a6];
            v43 = (unint64_t)(v42 + 1);
            if ((uint64_t)(v42 + 1) < 0)
LABEL_67:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v44 = v39 - v41;
            if (2 * v44 > v43)
              v43 = 2 * v44;
            if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
              v45 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              v46 = a6;
              v47 = (unint64_t)operator new(v45);
              a6 = v46;
            }
            else
            {
              v47 = 0;
            }
            v65 = &v42[v47];
            v66 = (char *)(v47 + v45);
            v42[v47] = v38;
            v52 = (uint64_t)&v42[v47 + 1];
            if (v40 == (_BYTE *)v41)
            {
LABEL_58:
              v47 = (unint64_t)v65;
            }
            else
            {
              v67 = &v40[~v41];
              do
              {
                v68 = *--v40;
                (v67--)[v47] = v68;
              }
              while (v40 != (_BYTE *)v41);
LABEL_57:
              v40 = (_BYTE *)*a6;
            }
            *a6 = v47;
            a6[1] = v52;
            a6[2] = (unint64_t)v66;
            if (v40)
            {
              v71 = a6;
              operator delete(v40);
              a6 = v71;
            }
          }
          a6[1] = v52;
          goto LABEL_62;
        case 0xC:
          v53 = *(unsigned int *)(v14 + 12 * a8 + 4);
          if ((*(_BYTE *)(a1 + 120) & 1) == 0)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v53)
            {
              v49 = *a2 + 40 * v53;
              v50 = a6;
              goto LABEL_34;
            }
            goto LABEL_66;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v53)
            goto LABEL_68;
          v64 = *a3 + 80 * v53;
          v55 = *(char **)(v64 + 8);
          v56 = *(char **)(v64 + 16);
          v57 = a6;
          break;
        case 0xD:
          v48 = *(unsigned int *)(v14 + 12 * a8 + 4);
          if ((*(_BYTE *)(a1 + 120) & 1) == 0)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v48)
            {
              v49 = *a2 + 40 * v48;
              v50 = a7;
LABEL_34:
              FRCodeBitmap::copy_to(v49, v50);
              goto LABEL_62;
            }
LABEL_66:
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 4) <= v48)
LABEL_68:
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v54 = *a3 + 80 * v48;
          v55 = *(char **)(v54 + 8);
          v56 = *(char **)(v54 + 16);
          v57 = a7;
          break;
        case 0xE:
          v16 = 0;
          ++a8;
          if (v17 + 1 >= a9)
            return;
          continue;
        default:
          ++a8;
LABEL_6:
          if (a8 >= a9)
            goto LABEL_62;
          continue;
      }
      break;
    }
    FRCodeUMap::copy_to(v55, v56, v57);
LABEL_62:
    if ((v16 & 1) == 0)
      return;
  }
LABEL_63:
  *(_QWORD *)(v9 + 120) |= 4uLL;
}

void std::vector<FRCodeUMap>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        FRCodeUMap::~FRCodeUMap((FRCodeUMap *)(v4 - 80));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t FRCode::to_string(FRCode *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  std::locale::id *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  std::locale v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  if (*(_DWORD *)(a2 + 40))
  {
    v3 = 0;
    v4 = 0;
    v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v6 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Pos: ", 5);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" | ", 3);
      v9 = FRCode::OpKindNames[v6];
      v10 = strlen(v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" | Left: ", 9);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" | Right: ", 10);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet(&v21, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
      ++v4;
      v3 += 12;
    }
    while (v4 < *(unsigned int *)(a2 + 40));
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v15;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE9D2260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 FRCode::add_state(unint64_t *a1, int a2, _OWORD *a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __n128 result;
  __int128 v38;
  __int128 v39;

  v9 = (char *)*a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
LABEL_5:
    v11 = a1[2];
    if (v8 >= v11)
    {
      v13 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v8 - (_QWORD)v9) >> 2);
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x14E5E0A72F05397)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v11 - (_QWORD)v9) >> 2);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0xA72F05397829CBLL)
        v16 = 0x14E5E0A72F05397;
      else
        v16 = v14;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(v16);
      else
        v17 = 0;
      v18 = v16 + 196 * v13;
      *(_DWORD *)v18 = -1;
      *(_OWORD *)(v18 + 4) = 0u;
      *(_OWORD *)(v18 + 20) = 0u;
      v19 = v16 + 196 * v17;
      *(_OWORD *)(v18 + 36) = 0u;
      *(_OWORD *)(v18 + 52) = 0u;
      *(_OWORD *)(v18 + 68) = 0u;
      *(_OWORD *)(v18 + 84) = 0u;
      *(_OWORD *)(v18 + 100) = 0u;
      *(_OWORD *)(v18 + 116) = 0u;
      *(_OWORD *)(v18 + 132) = 0u;
      *(_OWORD *)(v18 + 148) = 0u;
      *(_OWORD *)(v18 + 164) = 0u;
      *(_OWORD *)(v18 + 180) = 0u;
      v12 = v18 + 196;
      v21 = (char *)*a1;
      v20 = (char *)a1[1];
      if (v20 != (char *)*a1)
      {
        do
        {
          *(_OWORD *)(v18 - 196) = *(_OWORD *)(v20 - 196);
          v22 = *(_OWORD *)(v20 - 180);
          v23 = *(_OWORD *)(v20 - 164);
          v24 = *(_OWORD *)(v20 - 148);
          *(_OWORD *)(v18 - 132) = *(_OWORD *)(v20 - 132);
          *(_OWORD *)(v18 - 148) = v24;
          *(_OWORD *)(v18 - 164) = v23;
          *(_OWORD *)(v18 - 180) = v22;
          v25 = *(_OWORD *)(v20 - 116);
          v26 = *(_OWORD *)(v20 - 100);
          v27 = *(_OWORD *)(v20 - 84);
          *(_OWORD *)(v18 - 68) = *(_OWORD *)(v20 - 68);
          *(_OWORD *)(v18 - 84) = v27;
          *(_OWORD *)(v18 - 100) = v26;
          *(_OWORD *)(v18 - 116) = v25;
          v28 = *(_OWORD *)(v20 - 52);
          v29 = *(_OWORD *)(v20 - 36);
          v30 = *(_OWORD *)(v20 - 20);
          *(_DWORD *)(v18 - 4) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v18 - 20) = v30;
          *(_OWORD *)(v18 - 36) = v29;
          *(_OWORD *)(v18 - 52) = v28;
          v18 -= 196;
          v20 -= 196;
        }
        while (v20 != v21);
        v20 = (char *)*a1;
      }
      *a1 = v18;
      a1[1] = v12;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v8 = -1;
      *(_OWORD *)(v8 + 4) = 0u;
      *(_OWORD *)(v8 + 20) = 0u;
      *(_OWORD *)(v8 + 36) = 0u;
      *(_OWORD *)(v8 + 52) = 0u;
      *(_OWORD *)(v8 + 68) = 0u;
      *(_OWORD *)(v8 + 84) = 0u;
      *(_OWORD *)(v8 + 100) = 0u;
      *(_OWORD *)(v8 + 116) = 0u;
      *(_OWORD *)(v8 + 132) = 0u;
      *(_OWORD *)(v8 + 148) = 0u;
      *(_OWORD *)(v8 + 164) = 0u;
      v12 = v8 + 196;
      *(_OWORD *)(v8 + 180) = 0u;
    }
    a1[1] = v12;
    *(_DWORD *)(v12 - 196) = a2;
    v31 = a3[1];
    *(_OWORD *)(v12 - 192) = *a3;
    *(_OWORD *)(v12 - 176) = v31;
    v32 = a3[2];
    v33 = a3[3];
    v34 = a3[5];
    *(_OWORD *)(v12 - 128) = a3[4];
    *(_OWORD *)(v12 - 112) = v34;
    *(_OWORD *)(v12 - 160) = v32;
    *(_OWORD *)(v12 - 144) = v33;
    v35 = a1[1];
    v36 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v35 - 96) = *(_OWORD *)a4;
    *(_OWORD *)(v35 - 80) = v36;
    result = *(__n128 *)(a4 + 32);
    v38 = *(_OWORD *)(a4 + 48);
    v39 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(v35 - 32) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v35 - 16) = v39;
    *(__n128 *)(v35 - 64) = result;
    *(_OWORD *)(v35 - 48) = v38;
  }
  else
  {
    v10 = (_DWORD *)*a1;
    while (*v10 != a2)
    {
      v10 += 49;
      if (v10 == (_DWORD *)v8)
        goto LABEL_5;
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(unint64_t a1)
{
  if (a1 >= 0x14E5E0A72F05398)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(196 * a1);
}

uint64_t FRCode::match_step(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t a6, int a7, int a8, int a9, char a10)
{
  unint64_t *v10;
  unint64_t v12;
  unint64_t v14;
  BOOL v15;
  char v16;
  BOOL v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type size;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int high;
  uint64_t v69;
  int v70;
  int *v71;
  int v72;
  char *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  void **v86;
  __int128 v87;
  void **v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v94;
  int low;
  BOOL v96;
  char v97;
  int v101;
  char v103;
  char v104;
  unint64_t v105;
  uint64_t *v108;
  _OWORD __p[5];
  std::string v110;

  v10 = a4;
  v12 = a3[1];
  if (v12 != *a3)
  {
    v14 = 0;
    v103 = 0;
    v15 = a8 == 0;
    v105 = a8;
    v94 = a8 - 1;
    v101 = a8 + 1;
    if (a6 == a8)
      v15 = 1;
    v96 = v15;
    if (a6 <= a8)
      v16 = 1;
    else
      v16 = a10;
    v104 = v16;
    v17 = a6 <= a8 || (a9 - 7) < 0xFFFFFFFB;
    v97 = a10 | v17;
    v12 = *a3;
    while (1)
    {
      v18 = (unsigned int *)(v12 + 196 * v14);
      v19 = a1[4];
      v20 = *v18;
      switch(*(_DWORD *)(v19 + 12 * *v18))
      {
        case 0:
        case 4:
        case 5:
          v21 = v20 + 1;
          goto LABEL_67;
        case 1:
          v29 = v12 + 196 * v14;
          v32 = *(_DWORD *)(v29 + 100);
          v31 = v29 + 100;
          v30 = v32;
          v33 = *(_DWORD *)(v31 - 96);
          v34 = *(_DWORD *)(v31 + 4);
          v35 = *(_DWORD *)(v31 - 92);
          v36 = *(uint64_t **)a2;
          v37 = *(std::__shared_weak_count **)(a2 + 8);
          v108 = *(uint64_t **)a2;
          if (v37)
          {
            p_shared_owners = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(p_shared_owners);
            while (__stxr(v39 + 1, p_shared_owners));
          }
          v40 = (v34 + a7 - v35);
          v41 = a8 - v30 + v33;
          v43 = *v36;
          v42 = v36[1];
          while (2)
          {
            if (v43 == v42)
            {
              memset((char *)&__p[3] + 8, 0, 24);
              memset((char *)__p + 8, 0, 48);
              LODWORD(__p[0]) = v34 + a7 - v35;
              v74 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v40);
              std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v110, v74, &v74[v75], v75);
              *(std::string *)((char *)__p + 8) = v110;
              FRCode::get_replacement(&v110, (uint64_t)a1, a5, a6, v31 - 96);
              v76 = (char *)a1[3];
              *(std::string *)&__p[2] = v110;
              std::string::basic_string[abi:ne180100]<0>(&v110, v76);
              if (SHIBYTE(__p[4]) < 0)
                operator delete(*((void **)&__p[3] + 1));
              *(std::string *)((char *)&__p[3] + 8) = v110;
              v77 = v108[1];
              if (v77 >= v108[2])
              {
                v78 = std::vector<FRReplaceInst>::__push_back_slow_path<FRReplaceInst const&>(v108, (uint64_t)__p);
              }
              else
              {
                std::allocator<FRReplaceInst>::construct[abi:ne180100]<FRReplaceInst,FRReplaceInst const&>(v108[1], (uint64_t)__p);
                v78 = v77 + 80;
                v108[1] = v77 + 80;
              }
              v108[1] = v78;
              if (SHIBYTE(__p[4]) < 0)
                operator delete(*((void **)&__p[3] + 1));
              if (SBYTE7(__p[3]) < 0)
                operator delete(*(void **)&__p[2]);
              if (SHIBYTE(__p[1]) < 0)
                operator delete(*((void **)&__p[0] + 1));
            }
            else
            {
              if (*(_DWORD *)v43 != (_DWORD)v40)
              {
                v43 += 80;
                continue;
              }
              if (*(char *)(v43 + 31) < 0)
                v81 = *(_QWORD *)(v43 + 16);
              else
                v81 = *(unsigned __int8 *)(v43 + 31);
              if (v81 + v40 < v41)
              {
                v84 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v40);
                std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v84, &v84[v85], v85);
                v86 = (void **)(v43 + 8);
                if (*(char *)(v43 + 31) < 0)
                  operator delete(*v86);
                v87 = __p[0];
                *(_QWORD *)(v43 + 24) = *(_QWORD *)&__p[1];
                *(_OWORD *)v86 = v87;
                FRCode::get_replacement((std::string *)__p, (uint64_t)a1, a5, a6, v31 - 96);
                v88 = (void **)(v43 + 32);
                if (*(char *)(v43 + 55) < 0)
                  operator delete(*v88);
                *(_OWORD *)v88 = __p[0];
                *(_QWORD *)(v43 + 48) = *(_QWORD *)&__p[1];
              }
            }
            break;
          }
          if (v37)
          {
            v89 = (unint64_t *)&v37->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v103 = 1;
          goto LABEL_105;
        case 2:
          v44 = (_OWORD *)(v12 + 196 * v14 + 4);
          v45 = (_DWORD *)v44 + *(unsigned int *)(v19 + 12 * v20 + 4);
          if (!*v45)
            *v45 = v101;
          v21 = v20 + 1;
          v46 = v12 + 196 * v14;
          goto LABEL_68;
        case 3:
          v47 = v12 + 196 * v14;
          v48 = v47 + 100;
          *(_DWORD *)(v47 + 100 + 4 * *(unsigned int *)(v19 + 12 * v20 + 4)) = v101;
          v21 = v20 + 1;
          v44 = (_OWORD *)(v47 + 4);
          goto LABEL_69;
        case 6:
          v49 = v19 + 12 * v20;
          v50 = v12 + 196 * v14;
          v51 = (_OWORD *)(v50 + 4);
          v52 = v50 + 100;
          FRCode::add_state(a3, *(_DWORD *)(v49 + 4), (_OWORD *)(v50 + 4), v50 + 100);
          v21 = *(_DWORD *)(v49 + 8);
          v53 = a3;
          v44 = v51;
          v48 = v52;
          goto LABEL_70;
        case 7:
          v54 = v19 + 12 * v20;
          v57 = *(_DWORD *)(v54 + 4);
          v55 = (_DWORD *)(v54 + 4);
          v56 = v57;
          if (v57 < v55[1] + v57)
          {
            v58 = v12 + 196 * v14;
            v59 = (_OWORD *)(v58 + 4);
            v60 = v58 + 100;
            v61 = 2 * v56;
            do
            {
              FRCode::add_state(a3, *(_DWORD *)(a1[10] + 4 * v61) + *v18, v59, v60);
              ++v56;
              v61 += 2;
            }
            while (v55[1] + *v55 > v56);
            v10 = a4;
          }
          goto LABEL_105;
        case 8:
          v21 = *(_DWORD *)(v19 + 12 * v20 + 4);
          goto LABEL_67;
        case 9:
          if ((v104 & 1) != 0)
            goto LABEL_105;
          v62 = a1[15];
          v63 = *(unsigned __int8 *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v105);
          if ((v62 & 8) == 0)
          {
            if (*(_DWORD *)(v19 + 12 * v20 + 4) != (_DWORD)v63)
              goto LABEL_105;
LABEL_88:
            v21 = *v18 + 1;
            goto LABEL_89;
          }
          v82 = *(_DWORD *)(v19 + 12 * v20 + 4);
          if (v82 == case_folding[v63] || v82 == case_folding[v63 + 256])
            goto LABEL_88;
LABEL_105:
          ++v14;
          v12 = *a3;
          if (0x7D6343EB1A1F58D1 * ((uint64_t)(a3[1] - *a3) >> 2) <= v14)
            goto LABEL_108;
          break;
        case 0xA:
          if ((v97 & 1) != 0)
            goto LABEL_105;
          v64 = boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v105);
          low = FRCode::get_low(v64, v65);
          v66 = boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v105);
          high = FRCode::get_high(v66, v67);
          if (low == *(_DWORD *)(v19 + 12 * v20 + 4))
          {
            v10 = a4;
            if (high == *(_DWORD *)(v19 + 12 * v20 + 8))
              goto LABEL_76;
          }
          else
          {
            v10 = a4;
          }
          goto LABEL_105;
        case 0xB:
          v69 = v19 + 12 * v20;
          v72 = *(_DWORD *)(v69 + 4);
          v71 = (int *)(v69 + 4);
          v70 = v72;
          if (!(v72 | a8))
          {
            FRCode::add_state(a3, v20 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
            v70 = *v71;
          }
          if (v70 == 1 && a6 == v105)
          {
            FRCode::add_state(a3, *v18 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
            v70 = *v71;
          }
          if (v70 != 2
            || !v96
            && *(_BYTE *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v94) != 32
            && *(_BYTE *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v105) != 32)
          {
            goto LABEL_105;
          }
          v21 = *v18 + 1;
LABEL_67:
          v46 = v12 + 196 * v14;
          v44 = (_OWORD *)(v46 + 4);
LABEL_68:
          v48 = v46 + 100;
LABEL_69:
          v53 = a3;
          goto LABEL_70;
        case 0xC:
        case 0xD:
          if ((v104 & 1) != 0)
            goto LABEL_105;
          v22 = v19 + 12 * v20;
          v23 = *(_DWORD *)(v22 + 4);
          if (*(_DWORD *)(v22 + 8) == 1)
          {
            v24 = a1[8];
            v25 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a5, a6, v105);
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v110, v25, &v25[v26], v26);
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &v110;
            else
              v27 = (std::string *)v110.__r_.__value_.__r.__words[0];
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            else
              size = v110.__r_.__value_.__l.__size_;
            UTFString::to_utf16((std::basic_string<char16_t> *)__p, (const char *)v27, size);
            if (SBYTE7(__p[1]) < 0)
              operator delete(*(void **)&__p[0]);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            if ((uset_serializedContains() != 0) != (*(_BYTE *)(v24 + 80 * v23 + 76) == 1))
              FRCode::add_state(v10, *v18 + 1, (_OWORD *)(v12 + 196 * v14 + 4), v12 + 196 * v14 + 100);
          }
          else
          {
            v79 = a1[6] + 40 * v23;
            v80 = (_BYTE *)boost::basic_string_ref<char,std::char_traits<char>>::at(a5, a6, v105);
            if ((*(_BYTE *)(v79 + 32) == 1) != ((*(_QWORD *)(v79
                                                            + (((unint64_t)*v80 >> 3) & 0x18)) >> *v80) & 1))
            {
LABEL_76:
              v21 = *v18 + 1;
LABEL_89:
              v83 = v12 + 196 * v14;
              v44 = (_OWORD *)(v83 + 4);
              v48 = v83 + 100;
              v53 = v10;
LABEL_70:
              FRCode::add_state(v53, v21, v44, v48);
            }
          }
          goto LABEL_105;
        case 0xE:
          if ((a10 & 1) != 0)
            goto LABEL_105;
          v21 = v20 + 1;
          goto LABEL_89;
        default:
          goto LABEL_105;
      }
    }
  }
  v103 = 0;
LABEL_108:
  *a3 = *v10;
  *v10 = v12;
  v91 = a3[1];
  a3[1] = v10[1];
  v10[1] = v91;
  v92 = a3[2];
  a3[2] = v10[2];
  v10[1] = *v10;
  v10[2] = v92;
  return v103 & 1;
}

void sub_1DE9D2D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31)
{
  FRReplaceInst::~FRReplaceInst(&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t boost::basic_string_ref<char,std::char_traits<char>>::substr(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int8x16_t v4;
  uint64_t v5;
  std::logic_error v6;

  if (a2 < a3)
  {
    std::logic_error::logic_error(&v6, "string_ref::substr");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    v4.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/1ce10175-54cc-11ef-a474-76625042721f/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/utility/string_ref.hpp";
    v4.i64[1] = (uint64_t)"basic_string_ref<charT, traits> boost::basic_string_ref<char>::substr(size_type, size_type) con"
                         "st [charT = char, traits = std::char_traits<char>]";
    v5 = 166;
    boost::throw_exception<std::out_of_range>(&v6, &v4);
  }
  return a1 + a3;
}

void FRCode::get_replacement(std::string *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  const std::string::value_type *p_p;
  std::string::size_type v15;
  void *__p;
  std::string::size_type v17;
  unsigned __int8 v18;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)(a2 + 4))
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v10);
      if (v11 == 255)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(*(_QWORD *)(a2 + 8) + 8 * v10));
        if ((v18 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v18 & 0x80u) == 0)
          v15 = v18;
        else
          v15 = v17;
      }
      else
      {
        v12 = (char *)boost::basic_string_ref<char,std::char_traits<char>>::substr(a3, a4, (*(_DWORD *)(a5 + 4 * v11 + 8) - 1));
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v12, &v12[v13], v13);
        if ((v18 & 0x80u) == 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if ((v18 & 0x80u) == 0)
          v15 = v18;
        else
          v15 = v17;
      }
      std::string::append(a1, p_p, v15);
      if ((char)v18 < 0)
        operator delete(__p);
      ++v10;
    }
    while (v10 < *(unsigned int *)(a2 + 4));
  }
}

void sub_1DE9D2F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void FRReplaceInst::~FRReplaceInst(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<FRCode::State>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (0x7D6343EB1A1F58D1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2) < a2)
  {
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 196;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FRCode::State>>(a2);
    v5 = &v4[196 * v3];
    v7 = &v4[196 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *(_OWORD *)(v10 - 196) = *(_OWORD *)(v8 - 196);
        v11 = *(_OWORD *)(v8 - 180);
        v12 = *(_OWORD *)(v8 - 164);
        v13 = *(_OWORD *)(v8 - 148);
        *(_OWORD *)(v10 - 132) = *(_OWORD *)(v8 - 132);
        *(_OWORD *)(v10 - 148) = v13;
        *(_OWORD *)(v10 - 164) = v12;
        *(_OWORD *)(v10 - 180) = v11;
        v14 = *(_OWORD *)(v8 - 116);
        v15 = *(_OWORD *)(v8 - 100);
        v16 = *(_OWORD *)(v8 - 84);
        *(_OWORD *)(v10 - 68) = *(_OWORD *)(v8 - 68);
        *(_OWORD *)(v10 - 84) = v16;
        *(_OWORD *)(v10 - 100) = v15;
        *(_OWORD *)(v10 - 116) = v14;
        v17 = *(_OWORD *)(v8 - 52);
        v18 = *(_OWORD *)(v8 - 36);
        v19 = *(_OWORD *)(v8 - 20);
        *((_DWORD *)v10 - 1) = *((_DWORD *)v8 - 1);
        *(_OWORD *)(v10 - 20) = v19;
        *(_OWORD *)(v10 - 36) = v18;
        *(_OWORD *)(v10 - 52) = v17;
        v10 -= 196;
        v8 -= 196;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void TextSplitModule::~TextSplitModule(char **this)
{
  *this = (char *)&off_1EA91E378;
  std::__tree<std::string>::destroy((uint64_t)(this + 35), this[36]);
  Module::~Module((Module *)this);
}

{
  *this = (char *)&off_1EA91E378;
  std::__tree<std::string>::destroy((uint64_t)(this + 35), this[36]);
  Module::~Module((Module *)this);
  JUMPOUT(0x1DF0ED014);
}

void TextSplitModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *p_p;
  size_t v9;
  std::string *p_dst;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  int64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  char *v25;
  int v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string *i;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string *v39;
  std::string *j;
  std::string *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string *k;
  unint64_t m;
  char *v53;
  char *v54;
  unint64_t *v55;
  std::string *v56;
  NSObject *v57;
  const char *v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  _QWORD *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  void *v93;
  std::__shared_weak_count *v94;
  char v95;
  std::string *v96;
  std::string *v97;
  unint64_t v98;
  void *__p;
  std::string *v100;
  unint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  void *v106;
  std::string __dst;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(*(_QWORD *)v3 + 8);
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 16);
  v104 = v5;
  v105 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  v103 = 0;
  v102 = 0uLL;
  if ((v101 & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v101 & 0x8000000000000000) == 0)
    v9 = HIBYTE(v101);
  else
    v9 = (size_t)v100;
  __dst.__r_.__value_.__r.__words[0] = 0;
  __dst.__r_.__value_.__r.__words[2] = v9;
  if (v9 >= 0x11)
  {
    p_dst = (std::string *)operator new[]();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    p_dst = &__dst;
    if (!v9)
      goto LABEL_15;
  }
  memmove(p_dst, p_p, v9);
LABEL_15:
  std::__sort<std::__less<char,char> &,char *>();
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(&v102, v5, &__dst);
  if (__dst.__r_.__value_.__r.__words[2] >= 0x11 && __dst.__r_.__value_.__r.__words[0])
    MEMORY[0x1DF0ECFFC](__dst.__r_.__value_.__r.__words[0], 0x1000C8077774924);
  if (SHIBYTE(v101) < 0)
    operator delete(__p);
  v11 = (char *)v102;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v102 + 1) - v102) >> 3) <= *(int *)(a1 + 272))
  {
    v43 = a2[1];
    v87 = *a2;
    v88 = (std::__shared_weak_count *)v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v87);
    v46 = v88;
    if (v88)
    {
      v47 = (unint64_t *)&v88->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    __p = 0;
    v100 = 0;
    v101 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    if ((_QWORD)v102 != *((_QWORD *)&v102 + 1))
    {
      v86 = (_QWORD *)(a1 + 288);
      v84 = (char *)*((_QWORD *)&v102 + 1);
      do
      {
        v12 = v97;
        if ((unint64_t)v97 >= v98)
        {
          v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v96, (__int128 *)v11);
        }
        else
        {
          if (v11[23] < 0)
          {
            std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v13 = *(_OWORD *)v11;
            v97->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
          }
          v14 = v12 + 1;
        }
        v97 = v14;
        v15 = *(_QWORD **)(a1 + 280);
        if (v15 == v86)
        {
LABEL_61:
          v31 = v84;
        }
        else
        {
          v16 = v11[23];
          while (1)
          {
            v17 = v11;
            v18 = v16;
            if ((v16 & 0x80) != 0)
            {
              v17 = *(char **)v11;
              v18 = *((_QWORD *)v11 + 1);
            }
            v19 = *((char *)v15 + 55);
            v20 = v19 >= 0 ? (char *)(v15 + 4) : (char *)v15[4];
            v21 = v19 >= 0 ? *((unsigned __int8 *)v15 + 55) : v15[5];
            if (!v21)
              break;
            if (v18 >= v21)
            {
              v25 = &v17[v18];
              v26 = *v20;
              v27 = v17;
              do
              {
                v28 = v18 - v21;
                if (v28 == -1)
                  break;
                v29 = (char *)memchr(v27, v26, v28 + 1);
                if (!v29)
                  break;
                v30 = v29;
                if (!memcmp(v29, v20, v21))
                {
                  if (v30 == v25 || v30 - v17 == -1)
                    break;
                  goto LABEL_56;
                }
                v27 = v30 + 1;
                v18 = v25 - (v30 + 1);
              }
              while (v18 >= v21);
            }
            v22 = (_QWORD *)v15[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v15[2];
                v24 = *v23 == (_QWORD)v15;
                v15 = v23;
              }
              while (!v24);
            }
            v15 = v23;
            if (v23 == v86)
              goto LABEL_61;
          }
LABEL_56:
          std::string::basic_string[abi:ne180100]<0>(&v93, " ");
          boost::algorithm::join<std::vector<std::string>,std::string>(&__dst, (uint64_t)v96, (uint64_t)v97, (uint64_t)&v93);
          v31 = v84;
          if (v95 < 0)
            operator delete(v93);
          v32 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)&__dst);
          }
          else
          {
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v100, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else
            {
              v33 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
              v100->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
            }
            v34 = v32 + 1;
          }
          v100 = v34;
          v14 = v96;
          for (i = v97; i != v14; --i)
          {
            if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(i[-1].__r_.__value_.__l.__data_);
          }
          v97 = v14;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            v14 = v97;
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v96) >> 3) >= 0x32)
        {
          std::string::basic_string[abi:ne180100]<0>(&v93, " ");
          boost::algorithm::join<std::vector<std::string>,std::string>(&__dst, (uint64_t)v96, (uint64_t)v97, (uint64_t)&v93);
          if (v95 < 0)
            operator delete(v93);
          v36 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)&__dst);
          }
          else
          {
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v100, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else
            {
              v37 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
              v100->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
            }
            v38 = v36 + 1;
          }
          v100 = v38;
          v39 = v96;
          for (j = v97; j != v39; --j)
          {
            if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(j[-1].__r_.__value_.__l.__data_);
          }
          v97 = v39;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        v11 += 24;
      }
      while (v11 != v31);
      if (v96 != v97)
      {
        std::string::basic_string[abi:ne180100]<0>(&v93, " ");
        boost::algorithm::join<std::vector<std::string>,std::string>(&__dst, (uint64_t)v96, (uint64_t)v97, (uint64_t)&v93);
        if (v95 < 0)
          operator delete(v93);
        v41 = v100;
        if ((unint64_t)v100 >= v101)
        {
          v49 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)&__dst);
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v100, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else
          {
            v42 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            v100->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
          }
          v49 = v41 + 1;
        }
        v100 = v49;
        v50 = v96;
        for (k = v97; k != v50; --k)
        {
          if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(k[-1].__r_.__value_.__l.__data_);
        }
        v97 = v50;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    if (v100 != __p)
    {
      for (m = 0; 0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (_BYTE *)__p) >> 3) > m; ++m)
      {
        v53 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v53 + 8) = 0u;
        *((_OWORD *)v53 + 2) = 0u;
        *(_QWORD *)v53 = &off_1EA932198;
        *((_QWORD *)v53 + 3) = v53 + 32;
        v93 = v53 + 24;
        v94 = (std::__shared_weak_count *)v53;
        v54 = (char *)operator new(0x50uLL);
        *((_QWORD *)v54 + 1) = 0;
        v55 = (unint64_t *)(v54 + 8);
        *((_QWORD *)v54 + 2) = 0;
        *(_QWORD *)v54 = &off_1EA932588;
        *(_OWORD *)(v54 + 24) = 0u;
        v56 = (std::string *)(v54 + 24);
        *(_OWORD *)(v54 + 40) = 0u;
        *(_OWORD *)(v54 + 56) = 0u;
        *((_QWORD *)v54 + 9) = 0;
        v91 = v54 + 24;
        v92 = (std::__shared_weak_count *)v54;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
        {
          v59 = (char *)__p + 24 * m;
          if (v59[23] < 0)
            v59 = *(char **)v59;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 67109378;
          HIDWORD(__dst.__r_.__value_.__r.__words[0]) = m;
          LOWORD(__dst.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v59;
          _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_INFO, "Split text [%d]: %s", (uint8_t *)&__dst, 0x12u);
        }
        v60 = (char *)__p + 24 * m;
        if (v60[23] < 0)
          v60 = *(char **)v60;
        Diagnostics::log(6, "Split text [%d]: %s", v58, m, v60);
        std::string::operator=(v56, (const std::string *)__p + m);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        v62 = v61[5];
        if (v62)
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v54 + 24);
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
          do
            v63 = __ldxr(v55);
          while (__stxr(v63 + 1, v55));
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v62 + 8, (__int128 *)&__dst.__r_.__value_.__r.__words[1]);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA9231E8;
          v64 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__r.__words[2])
          {
            v65 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v53 = (char *)v94;
          v89 = v93;
          v90 = v94;
          if (!v94)
            goto LABEL_140;
        }
        else
        {
          v67 = (_QWORD *)operator new();
          *v67 = &off_1EA9231E8;
          v67[1] = v56;
          v67[2] = v54;
          do
            v68 = __ldxr(v55);
          while (__stxr(v68 + 1, v55));
          v69 = v61[5];
          v61[5] = (uint64_t)v67;
          if (v69)
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
          v89 = v53 + 24;
          v90 = (std::__shared_weak_count *)v53;
        }
        v70 = (unint64_t *)(v53 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
LABEL_140:
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, &v89);
        v72 = v90;
        if (v90)
        {
          v73 = (unint64_t *)&v90->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v75 = v92;
        if (v92)
        {
          v76 = (unint64_t *)&v92->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = v94;
        if (v94)
        {
          v79 = (unint64_t *)&v94->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
      }
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  v81 = v105;
  if (v105)
  {
    v82 = (unint64_t *)&v105->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
}

void sub_1DE9D3B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void ***a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void **p_p,uint64_t a29,uint64_t a30,char *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  a22 = &p_p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  p_p = (void **)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  __p = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v37 - 152);
  _Unwind_Resume(a1);
}

void boost::algorithm::join<std::vector<std::string>,std::string>(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v8;
  char *v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  uint64_t v13;
  int v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  char *v21;
  std::string::size_type v22;

  v6 = a2;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3)
    goto LABEL_10;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (uint64_t)this, v9, &v9[v10], v10);
  while (1)
  {
    v6 += 24;
LABEL_10:
    if (v6 == a3)
      break;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v12 = this;
    else
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    v13 = (uint64_t)v12 + size;
    v14 = *(char *)(a4 + 23);
    if (v14 >= 0)
      v15 = (char *)a4;
    else
      v15 = *(char **)a4;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a4 + 23);
    else
      v16 = *(_QWORD *)(a4 + 8);
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v13, v15, &v15[v16], v16);
    v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v17 & 0x80u) == 0)
      v18 = this;
    else
      v18 = (std::string *)this->__r_.__value_.__r.__words[0];
    if ((v17 & 0x80u) != 0)
      v17 = this->__r_.__value_.__l.__size_;
    v19 = (uint64_t)v18 + v17;
    v20 = *(char *)(v6 + 23);
    if (v20 >= 0)
      v21 = (char *)v6;
    else
      v21 = *(char **)v6;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(v6 + 23);
    else
      v22 = *(_QWORD *)(v6 + 8);
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v19, v21, &v21[v22], v22);
  }
}

void sub_1DE9D3DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<FrontendInput>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<FrontendInput>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9231E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FrontendInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FrontendInput>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  unsigned int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;

  v7 = a3;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__n_add)
      return;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    if (!__n_add)
      return;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = this;
  }
  v11 = a2 - (_QWORD)v10;
  if (v10 > (std::string *)a3 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= a3)
  {
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      v13 = 0;
      v14 = 0;
      v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      v13 = v16.__r_.__value_.__l.__size_;
      v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0)
      v15 = &v16;
    else
      v15 = (std::string *)v14;
    if ((v12 & 0x80u) == 0)
      v13 = v12;
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, (char *)v15, (char *)v15 + v13);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1DE9D400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RobertaWordEmbInference::inference(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string::size_type size;
  std::__wrap_iter<const char *> v17;
  std::__wrap_iter<const char *> v18;
  std::__shared_weak_count *cntrl;
  uint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  const char *v29;
  std::locale::__imp *v30;
  std::string *v31;
  __int128 *v32;
  __int128 *v33;
  std::locale::__imp *locale;
  __int128 v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  std::chrono::steady_clock::time_point v39;
  NSObject *v40;
  std::chrono::steady_clock::time_point v41;
  std::chrono::steady_clock::time_point v42;
  const char *v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  std::__shared_weak_count *ct;
  uint64_t *v50;
  unint64_t v51;
  std::string v52;
  std::string v53;
  std::regex_traits<char> v54;
  __int128 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::regex_traits<char> v59;
  __int128 v60;
  std::shared_ptr<std::__empty_state<char>> v61;
  std::__owns_one_state<char> *v62;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v63;
  std::locale v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  __int128 buf;
  _QWORD v71[4];

  v71[1] = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v59, "\\u001b\\\\(.*?)=(.*?)\\\\");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v54, "\\\\e\\\\(.*?)=(.*?)\\\\");
  std::locale::locale(&v63.__traits_.__loc_, &v59.__loc_);
  *(_OWORD *)&v63.__traits_.__ct_ = *(_OWORD *)&v59.__ct_;
  *(_OWORD *)&v63.__flags_ = v60;
  v63.__start_ = v61;
  if (v61.__cntrl_)
  {
    p_shared_owners = &v61.__cntrl_->__shared_owners_;
    do
      v7 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v7 + 1, (unint64_t *)p_shared_owners));
  }
  v63.__end_ = v62;
  std::locale::locale(&v64, &v54.__loc_);
  v65 = *(_OWORD *)&v54.__ct_;
  v66 = v55;
  v67 = v56;
  v68 = v57;
  if (v57)
  {
    v8 = (unint64_t *)&v57->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v69 = v58;
  v71[0] = 0;
  buf = 0uLL;
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v53.__r_.__value_.__s.__data_[8] = 0;
  *(_QWORD *)&buf = operator new(0x80uLL);
  *((_QWORD *)&buf + 1) = buf;
  v71[0] = buf + 128;
  *((_QWORD *)&buf + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::basic_regex<char,std::regex_traits<char>>>,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>> const*,std::basic_regex<char,std::regex_traits<char>>*>((int)v71, &v63.__traits_.__loc_, (std::locale *)&buf, (std::locale *)buf);
  v10 = 128;
  do
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v61 + v10);
    std::locale::~locale((std::locale *)((char *)&v59.__loc_ + v10));
    v10 -= 64;
  }
  while (v10);
  if (*(char *)(v5 + 119) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v5 + 96), *(_QWORD *)(v5 + 104));
  else
    v52 = *(std::string *)(v5 + 96);
  v12 = *((_QWORD *)&buf + 1);
  for (i = buf; i != v12; i += 64)
  {
    std::locale::locale(&v63.__traits_.__loc_, (const std::locale *)i);
    *(_OWORD *)&v63.__traits_.__ct_ = *(_OWORD *)(i + 8);
    *(_OWORD *)&v63.__flags_ = *(_OWORD *)(i + 24);
    v13 = *(std::__shared_weak_count **)(i + 48);
    v63.__start_.__ptr_ = *(std::shared_ptr<std::__empty_state<char>>::element_type **)(i + 40);
    v63.__start_.__cntrl_ = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v63.__end_ = *(std::__owns_one_state<char> **)(i + 56);
    memset(&v53, 0, sizeof(v53));
    size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v52;
    else
      v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v52.__r_.__value_.__l.__size_;
    v18.__i_ = &v17.__i_[size];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v53, v17, v18, &v63, &byte_1DEBD87CE);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v52 = v53;
    cntrl = v63.__start_.__cntrl_;
    if (v63.__start_.__cntrl_)
    {
      v20 = &v63.__start_.__cntrl_->__shared_owners_;
      do
        v21 = __ldaxr((unint64_t *)v20);
      while (__stlxr(v21 - 1, (unint64_t *)v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    std::locale::~locale(&v63.__traits_.__loc_);
  }
  v63.__traits_.__loc_.__locale_ = (std::locale::__imp *)&buf;
  std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  v22 = v57;
  if (v57)
  {
    v23 = (unint64_t *)&v57->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::locale::~locale(&v54.__loc_);
  v25 = v61.__cntrl_;
  if (v61.__cntrl_)
  {
    v26 = &v61.__cntrl_->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v59.__loc_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v28 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v30 = (std::locale::__imp *)&v52;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::locale::__imp *)v52.__r_.__value_.__r.__words[0];
    LODWORD(v63.__traits_.__loc_.__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v63.__traits_.__loc_.__locale_ + 4) = v30;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "Original text without marker in Roberta word embedding module is: %s", (uint8_t *)&v63, 0xCu);
  }
  v31 = &v52;
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = (std::string *)v52.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Original text without marker in Roberta word embedding module is: %s", v29, v31);
  BBPE::encode_and_return_vector((uint64_t **)&v54, *(_QWORD *)(a1 + 24), &v52);
  memset(&v59, 0, sizeof(v59));
  std::vector<float>::resize((uint64_t)&v59, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v54.__loc_.__locale_ + 1) - *(_QWORD *)v54.__loc_.__locale_) >> 3));
  v32 = *(__int128 **)v54.__loc_.__locale_;
  v33 = (__int128 *)*((_QWORD *)v54.__loc_.__locale_ + 1);
  if (*(__int128 **)v54.__loc_.__locale_ != v33)
  {
    locale = v59.__loc_.__locale_;
    do
    {
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v63, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      }
      else
      {
        v35 = *v32;
        v63.__traits_.__col_ = (const std::collate<char> *)*((_QWORD *)v32 + 2);
        *(_OWORD *)&v63.__traits_.__loc_.__locale_ = v35;
      }
      v36 = *((_QWORD *)v32 + 3);
      v63.__loop_count_ = *((_DWORD *)v32 + 8);
      *(_QWORD *)&v63.__flags_ = v36;
      *(float *)locale = (float)(int)v36;
      if (SHIBYTE(v63.__traits_.__col_) < 0)
        operator delete(v63.__traits_.__loc_.__locale_);
      v32 = (__int128 *)((char *)v32 + 40);
      locale = (std::locale::__imp *)((char *)locale + 4);
    }
    while (v32 != v33);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v63.__traits_.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1DE3F6000, v37, OS_LOG_TYPE_DEBUG, "RobertaWordEmb inference begin.", (uint8_t *)&v63, 2u);
  }
  Diagnostics::log(7, "RobertaWordEmb inference begin.", v38);
  (*(void (**)(uint64_t, std::regex_traits<char> *))(*(_QWORD *)a1 + 8))(a1, &v59);
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v40 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    LODWORD(v63.__traits_.__loc_.__locale_) = 134217984;
    *(double *)((char *)&v63.__traits_.__loc_.__locale_ + 4) = (double)((v41.__d_.__rep_ - v39.__d_.__rep_) / 1000000)
                                                             / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v40, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference time: %.3f s", (uint8_t *)&v63, 0xCu);
  }
  v42.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "RobertaWordEmb inference time: %.3f s", v43, (double)((v42.__d_.__rep_ - v39.__d_.__rep_) / 1000000) / 1000.0);
  memset(&v63, 0, 24);
  (*(void (**)(uint64_t, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)a1 + 16))(a1, &v63);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_DEBUG, "RobertaWordEmb inference end.", (uint8_t *)&buf, 2u);
  }
  Diagnostics::log(7, "RobertaWordEmb inference end.", v45);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = 0xAAAAAAAAAAAAAAABLL
                                  * (((char *)v63.__traits_.__ct_ - (char *)v63.__traits_.__loc_.__locale_) >> 3);
    _os_log_impl(&dword_1DE3F6000, v46, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb generates output_embedding of length %zu", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "RobertaWordEmb generates output_embedding of length %zu", v47, 0xAAAAAAAAAAAAAAABLL * (((char *)v63.__traits_.__ct_ - (char *)v63.__traits_.__loc_.__locale_) >> 3));
  v48 = *(_QWORD *)(a3 + 24);
  if (!v48)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)v48 + 48))(v48, &v63);
  *(_QWORD *)&buf = &v63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v59.__loc_.__locale_)
  {
    v59.__ct_ = (const std::ctype<char> *)v59.__loc_.__locale_;
    operator delete(v59.__loc_.__locale_);
  }
  ct = (std::__shared_weak_count *)v54.__ct_;
  if (v54.__ct_)
  {
    v50 = &v54.__ct_->__shared_owners_;
    do
      v51 = __ldaxr((unint64_t *)v50);
    while (__stlxr(v51 - 1, (unint64_t *)v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))ct->__on_zero_shared)(ct);
      std::__shared_weak_count::__release_weak(ct);
    }
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_1DE9D4884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::locale a39)
{
  uint64_t v39;
  uint64_t v40;

  if (a2)
  {
    a39.__locale_ = (std::locale::__imp *)(v40 - 128);
    std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
    std::locale::~locale(&a23);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
    std::locale::~locale(&a31);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v39 + 8) + 56))(*(_QWORD *)(v39 + 8));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DE9D49D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DE9D49E4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DE9D49ECLL);
  __clang_call_terminate(a1);
}

void RobertaWordEmbInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  InferenceEngine::DataTensor *v13;
  std::__shared_weak_count *v14;
  void *__p;
  char v16;
  InferenceEngine::DataTensor *v17;
  std::__shared_weak_count *v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
  InferenceEngine::DataTensor::build_from_1d_array<float>(a2, &v17);
  if (v16 < 0)
    operator delete(__p);
  InferenceEngine::DataTensor::unsqueeze(v17, 0);
  v4 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 8);
  v13 = v17;
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (**v4)(v4, &v13);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1DE9D4B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 - 32);
  _Unwind_Resume(a1);
}

void RobertaWordEmbInference::get_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  void *__p[2];
  char v9;
  InferenceEngine::DataTensor *v10;
  std::__shared_weak_count *v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "word_emb");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 32))(&v10, v3, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v10, v7);
  if (v7[0] != a2)
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a2, *(_QWORD *)v7[0], *(_QWORD *)(v7[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7[0] + 8) - *(_QWORD *)v7[0]) >> 3));
  v12 = (void **)v7;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1DE9D4C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 24) = &a10;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 24));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18 - 40);
  _Unwind_Resume(a1);
}

void RobertaWordEmbModule::~RobertaWordEmbModule(RobertaWordEmbModule *this)
{
  RobertaWordEmbModule::~RobertaWordEmbModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA90A670;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void RobertaWordEmbModule::prepare(RobertaWordEmbModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint8_t buf[8];
  __int128 v39;
  void *v40;

  if (*((_BYTE *)this + 272))
    return;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = (char *)operator new(0x208uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA9330E8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_WORD *)v4 + 12) = 257;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_QWORD *)&v37 = v4 + 24;
  *((_QWORD *)&v37 + 1) = v4;
  std::vector<int>::resize((std::vector<int> *)(v4 + 56), 0xC8uLL);
  v4[26] = 1;
  v5 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v5 + 1) = 0;
  v6 = (unint64_t *)(v5 + 8);
  *(_QWORD *)v5 = &off_1EA932E10;
  *(_OWORD *)(v5 + 24) = 0u;
  *((_QWORD *)v5 + 2) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *((_QWORD *)v5 + 21) = 0;
  v35 = v5 + 24;
  v36 = (std::__shared_weak_count *)v5;
  v7 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_QWORD *)v7 = &off_1EA932198;
  *((_QWORD *)v7 + 3) = v7 + 32;
  v33 = v7 + 24;
  v34 = (std::__shared_weak_count *)v7;
  Agglomerate::set<std::shared_ptr<TacotronFeature>>((uint64_t)(v7 + 24), &v37);
  *(_QWORD *)buf = &v40;
  v9 = v8[5];
  if (v9)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&v39 = v5 + 24;
    *((_QWORD *)&v39 + 1) = v5;
    do
      v10 = __ldxr(v6);
    while (__stxr(v10 + 1, v6));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9 + 8, &v39);
    *(_QWORD *)buf = &off_1EA923288;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v7 = (char *)v34;
    v31 = v33;
    v32 = v34;
    if (!v34)
      goto LABEL_24;
  }
  else
  {
    v14 = (_QWORD *)operator new();
    *v14 = &off_1EA923288;
    v14[1] = v5 + 24;
    v14[2] = v5;
    do
      v15 = __ldxr(v6);
    while (__stxr(v15 + 1, v6));
    v16 = v8[5];
    v8[5] = (uint64_t)v14;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v31 = v7 + 24;
    v32 = (std::__shared_weak_count *)v7;
  }
  v17 = (unint64_t *)(v7 + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
LABEL_24:
  (*(void (**)(RobertaWordEmbModule *, char **))(*(_QWORD *)this + 80))(this, &v31);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v34;
  if (v34)
  {
    v23 = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1DE9D50B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void RobertaWordEmbModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  void (***v15)(_QWORD, uint64_t *, _BYTE *);
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v35 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v36 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)v8 + 16);
  v33 = v10;
  v34 = v9;
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb module start.", buf, 2u);
  }
  Diagnostics::log(5, "RobertaWordEmb module start.", v14);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(_BYTE *)(a1 + 272) = 1;
  v15 = *(void (****)(_QWORD, uint64_t *, _BYTE *))(a1 + 344);
  v30 = v10;
  v31 = v9;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v38 = 0;
  v18 = operator new(0x20uLL);
  *v18 = &off_1EA90ACD8;
  v18[1] = a1;
  v18[2] = &v35;
  v18[3] = a2;
  v38 = v18;
  (**v15)(v15, &v30, v37);
  v19 = v38;
  if (v38 == v37)
  {
    v20 = 4;
    v19 = v37;
    goto LABEL_18;
  }
  if (v38)
  {
    v20 = 5;
LABEL_18:
    (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  v24 = v34;
  if (v34)
  {
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1DE9D5394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA90ACD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA90ACD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::operator()(uint64_t a1, uint64_t *a2)
{
  _BYTE *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void **v36;
  __int128 v37;
  void *v38;

  v2 = *(_BYTE **)(a1 + 8);
  if (v2[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v36) = 0;
      _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEFAULT, "RobertaWordEmb inference cancelled.", (uint8_t *)&v36, 2u);
    }
    Diagnostics::log(5, "RobertaWordEmb inference cancelled.", v4);
  }
  else
  {
    v6 = **(_QWORD **)(a1 + 16) + 56;
    if ((uint64_t *)v6 != a2)
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v7 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v7->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
    *(_OWORD *)&v7[1].__shared_owners_ = 0u;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)&v7[1].__shared_owners_;
    v9 = (uint64_t)&v7[1];
    v10 = *(uint64_t **)(a1 + 24);
    v11 = *v10;
    {
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v36 = &v38;
      v18 = v17[5];
      if (v18)
      {
        v36 = (void **)&off_1EA923288;
        *(_QWORD *)&v37 = v14;
        *((_QWORD *)&v37 + 1) = v13;
        if (v13)
        {
          v19 = (unint64_t *)&v13->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v18 + 8, &v37);
        v36 = (void **)&off_1EA923288;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        v24 = (_QWORD *)operator new();
        *v24 = &off_1EA923288;
        v24[1] = v14;
        v24[2] = v13;
        if (v13)
        {
          v25 = (unint64_t *)&v13->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = v17[5];
        v17[5] = (uint64_t)v24;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    Agglomerate::set<std::shared_ptr<TacotronFeature>>(v9, *(__int128 **)(a1 + 16));
    v36 = (void **)&v7[1].__vftable;
    *(_QWORD *)&v37 = v7;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    (*(void (**)(_BYTE *, void ***))(*(_QWORD *)v2 + 72))(v2, &v36);
    v31 = (std::__shared_weak_count *)v37;
    if ((_QWORD)v37)
    {
      v32 = (unint64_t *)(v37 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1DE9D57CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v13;

  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<RobertaWordEmbModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::vector<std::vector<float>> &)>::target_type()
{
}

void std::__shared_ptr_emplace<RobertaWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RobertaWordEmbInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90AFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<RobertaWordEmbInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA90A6E0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<BBPE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BBPE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<BBPE>::__on_zero_shared(uint64_t a1)
{
  pcre2_code_free_8(*(_QWORD *)(a1 + 240));
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(a1 + 184));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 136);
  BBPEVocab::~BBPEVocab((BBPEVocab *)(a1 + 64));
  return std::__hash_table<std::__hash_value_type<std::string,char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char>>>::~__hash_table(a1 + 24);
}

void RobertaWordEmbPersistentModule::~RobertaWordEmbPersistentModule(void **this)
{
  *this = &off_1EA90A8E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA90A8E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t NeuralFallbacklistConnection::should_consume_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  void **v12;
  __int128 v13;
  int64_t v14;
  void **v15;
  char v16;
  std::string *v17;
  int64_t v18;
  char v19;
  void **v20;
  char *v21;
  int v22;
  void **v23;
  int64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  __int128 *v33;
  std::string v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40[2];
  unsigned __int8 v41;
  void *__p;
  char v43;
  int v44;
  uint64_t **v45;
  std::__shared_weak_count *v46;

  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
    return 0;
  FrontendFeature::FrontendFeature((FrontendFeature *)v35, *(const FrontendFeature **)(*(_QWORD *)v3 + 8));
  if (v35[0] == v35[1] || (v4 = *(_DWORD **)(v35[0] + 72), v5 = *(_DWORD **)(v35[0] + 80), v4 == v5))
  {
    if (!*(_BYTE *)(a1 + 72))
    {
LABEL_64:
      v9 = 0;
      goto LABEL_65;
    }
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v34, *(_QWORD *)(a1 + 56));
    if (v34.__r_.__value_.__r.__words[0])
    {
      LODWORD(v45) = 4;
      Observable::emit((uint64_t **)v34.__r_.__value_.__l.__data_, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v45);
    }
    size = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v7 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
LABEL_61:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    do
    {
      if (*v4 == 1)
      {
        *(_BYTE *)(a1 + 72) = 0;
        v11 = *(__int128 **)(a1 + 80);
        v10 = *(__int128 **)(a1 + 88);
        if (v11 == v10)
          break;
        v12 = v40;
        v33 = *(__int128 **)(a1 + 88);
        while (1)
        {
          if (*((char *)v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v13 = *v11;
            v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
          }
          v14 = v41;
          if ((v41 & 0x80u) == 0)
            v15 = v12;
          else
            v15 = (void **)v40[0];
          v16 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v34;
          else
            v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          else
            v18 = v34.__r_.__value_.__l.__size_;
          if (!v18)
          {
LABEL_43:
            *(_BYTE *)(a1 + 72) = 1;
            SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v45, *(_QWORD *)(a1 + 56));
            if (v45)
            {
              v44 = 4;
              Observable::emit(v45, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v44);
            }
            v28 = v46;
            if (v46)
            {
              p_shared_owners = (unint64_t *)&v46->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            v19 = 0;
            v16 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
            goto LABEL_51;
          }
          if ((v41 & 0x80u) != 0)
            v14 = (int64_t)v40[1];
          if (v14 < v18)
          {
            v19 = 1;
            goto LABEL_51;
          }
          v20 = v12;
          v21 = (char *)v15 + v14;
          v22 = v17->__r_.__value_.__s.__data_[0];
          v23 = v15;
          while (1)
          {
            v24 = v14 - v18;
            if (v24 == -1 || (v25 = (char *)memchr(v23, v22, v24 + 1)) == 0)
            {
LABEL_39:
              v19 = 1;
              v12 = v20;
LABEL_40:
              v10 = v33;
              goto LABEL_51;
            }
            v26 = v25;
            if (!memcmp(v25, v17, v18))
              break;
            v23 = (void **)(v26 + 1);
            v14 = v21 - (v26 + 1);
            if (v14 < v18)
              goto LABEL_39;
          }
          v19 = 1;
          v12 = v20;
          if (v26 == v21)
            goto LABEL_40;
          v27 = v26 - (char *)v15 == -1;
          v10 = v33;
          if (!v27)
            goto LABEL_43;
LABEL_51:
          if (v16 < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if ((v19 & 1) == 0)
            goto LABEL_63;
          v11 = (__int128 *)((char *)v11 + 24);
          if (v11 == v10)
            goto LABEL_55;
        }
      }
      v4 += 14;
    }
    while (v4 != v5);
LABEL_55:
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_64;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&v34, *(_QWORD *)(a1 + 56));
    if (v34.__r_.__value_.__r.__words[0])
    {
      LODWORD(v45) = 4;
      Observable::emit((uint64_t **)v34.__r_.__value_.__l.__data_, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v45);
    }
    size = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
      do
        v8 = __ldaxr(v31);
      while (__stlxr(v8 - 1, v31));
      goto LABEL_61;
    }
  }
LABEL_63:
  v9 = 1;
LABEL_65:
  if (v43 < 0)
    operator delete(__p);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if (v39 < 0)
    operator delete(v38);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  return v9;
}

void sub_1DE9D5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  FrontendFeature::~FrontendFeature(&a17);
  _Unwind_Resume(a1);
}

void FrontendFeature::~FrontendFeature(void **this)
{
  void **v2;

  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this + 6;
  std::vector<Prompt>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<WordFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<PhoneFeature>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t NeuralFallbackConnection::should_consume_data(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  const char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  NSObject *v38;
  const char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  const char *v46;
  _BOOL8 is_ane_available;
  NeuralTTSUtils *v48;
  NSObject *v49;
  const char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  const char *v55;
  unint64_t *v56;
  NSObject *v57;
  const char *v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  uint8_t buf[8];
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint8_t v68[8];
  std::__shared_weak_count *v69;
  int v70;

  if (NeuralTTSUtils::disable_neural_tts)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v3 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v3, OS_LOG_TYPE_DEFAULT, "Neural TTS is disabled explicitly", buf, 2u);
    }
    Diagnostics::log(5, "Neural TTS is disabled explicitly", v4);
    *(_DWORD *)v68 = 0;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 56));
    if (*(_QWORD *)buf)
      Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, v68);
    v5 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    return 1;
  }
  v12 = *(_QWORD **)(*(_QWORD *)v10 + 8);
  v11 = *(std::__shared_weak_count **)(*(_QWORD *)v10 + 16);
  v63 = v12;
  v64 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v16 = *v12;
  v15 = v12[1];
  *(_QWORD *)buf = 0;
  v66 = 0;
  v67 = 0;
  v17 = v15 - v16;
  if (!v17)
  {
    v22 = 0;
    goto LABEL_29;
  }
  v18 = 0x84BDA12F684BDA13 * (v17 >> 3);
  std::vector<BOOL>::__vallocate[abi:ne180100](buf, v18);
  v19 = v66;
  v20 = (unint64_t)v66 + v18;
  v66 = (std::__shared_weak_count *)((char *)v66 + v18);
  if (!v19)
  {
    v21 = v20 - 1;
    goto LABEL_24;
  }
  v21 = v20 - 1;
  if (((v20 - 1) ^ ((unint64_t)&v19[-1].__shared_weak_owners_ + 7)) >= 0x40)
  {
LABEL_24:
    v23 = v21 >> 6;
    if (v20 >= 0x41)
      v24 = v23;
    else
      v24 = 0;
    *(_QWORD *)(*(_QWORD *)buf + 8 * v24) = 0;
  }
  *(_QWORD *)v68 = *(_QWORD *)buf + 8 * ((unint64_t)v19 >> 6);
  LODWORD(v69) = v19 & 0x3F;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)v68, v18);
  v22 = *(uint64_t ***)buf;
LABEL_29:
  v25 = (int *)v12[6];
  v26 = (int *)v12[7];
  if (v25 != v26)
  {
    v27 = (int *)v12[6];
    do
    {
      v28 = *v27;
      v29 = v27[1] + v28;
      if (v28 < v29)
      {
        do
        {
          *(uint64_t **)((char *)v22 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) = (uint64_t *)(*(unint64_t *)((char *)v22 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) | (1 << v28));
          ++v28;
        }
        while (v28 < v29);
      }
      v27 += 18;
    }
    while (v27 != v26);
  }
  v31 = *v12;
  v30 = v12[1];
  v32 = v30 - *v12;
  if (v30 == *v12)
  {
    if (v22)
LABEL_44:
      operator delete(v22);
    goto LABEL_45;
  }
  v33 = 0;
  v34 = 0;
  v35 = v32 / 216;
  if (v35 <= 1)
    v36 = 1;
  else
    v36 = v35;
  v37 = (_BYTE *)(v31 + 24);
  while (((*(unint64_t *)((char *)v22 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) != 0 || *v37)
  {
    v33 = ++v34 >= v35;
    v37 += 216;
    if (v36 == v34)
      goto LABEL_44;
  }
  if (v25 == v26)
    goto LABEL_68;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v45 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v68 = 0;
    _os_log_impl(&dword_1DE3F6000, v45, OS_LOG_TYPE_DEFAULT, "Partial prompt is found and ignored in neural TTS.", v68, 2u);
  }
  Diagnostics::log(5, "Partial prompt is found and ignored in neural TTS.", v46, v63);
  v22 = *(uint64_t ***)buf;
  if (*(_QWORD *)buf)
LABEL_68:
    operator delete(v22);
  if (v33)
  {
LABEL_45:
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v38 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v38, OS_LOG_TYPE_INFO, "Neural TTS is not used because prompt is found", buf, 2u);
    }
    Diagnostics::log(6, "Neural TTS is not used because prompt is found", v39, v63);
    *(_DWORD *)v68 = 3;
    SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 56));
    if (*(_QWORD *)buf)
      Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, v68);
    v40 = v66;
    if (!v66)
      goto LABEL_56;
    v41 = (unint64_t *)&v66->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    goto LABEL_54;
  }
  is_ane_available = NeuralTTSUtils::is_ane_available((NeuralTTSUtils *)v22);
  if (is_ane_available || NeuralTTSUtils::is_amx_available((NeuralTTSUtils *)is_ane_available))
  {
    SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(v68, *(_QWORD *)(a1 + 56));
    if (*(_QWORD *)v68 && !**(_BYTE **)v68)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_INFO, "WaveRNN ANE model is not ready for use.", buf, 2u);
      }
      Diagnostics::log(6, "WaveRNN ANE model is not ready for use.", v58, v63);
      v70 = 2;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 56));
      if (*(_QWORD *)buf)
        Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v70);
      v51 = v66;
      if (!v66)
        goto LABEL_107;
      v59 = (unint64_t *)&v66->__shared_owners_;
      do
        v53 = __ldaxr(v59);
      while (__stlxr(v53 - 1, v59));
    }
    else
    {
      if (!NeuralTTSUtils::check_fallback_conditions(v48))
      {
        v8 = 0;
LABEL_108:
        v60 = v69;
        if (v69)
        {
          v61 = (unint64_t *)&v69->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_57;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v49 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DE3F6000, v49, OS_LOG_TYPE_DEFAULT, "Neural TTS is disabled due to thermal condition or low power mode", buf, 2u);
      }
      Diagnostics::log(5, "Neural TTS is disabled due to thermal condition or low power mode", v50, v63);
      v70 = 5;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 56));
      if (*(_QWORD *)buf)
        Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, &v70);
      v51 = v66;
      if (!v66)
      {
LABEL_107:
        v8 = 1;
        goto LABEL_108;
      }
      v52 = (unint64_t *)&v66->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
    }
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    goto LABEL_107;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v54, OS_LOG_TYPE_DEFAULT, "No ANE or AMX or GPU is found, use fallback pipeline instead.", buf, 2u);
  }
  Diagnostics::log(5, "No ANE or AMX or GPU is found, use fallback pipeline instead.", v55, v63);
  *(_DWORD *)v68 = 1;
  SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(buf, *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)buf)
    Observable::emit(*(uint64_t ***)buf, (char *)TTSSynthesizerEvent::NeuralSynthesisFallback, v68);
  v40 = v66;
  if (v66)
  {
    v56 = (unint64_t *)&v66->__shared_owners_;
    do
      v42 = __ldaxr(v56);
    while (__stlxr(v42 - 1, v56));
LABEL_54:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_56:
  v8 = 1;
LABEL_57:
  if (v64)
  {
    v43 = (unint64_t *)&v64->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return v8;
}

void sub_1DE9D6678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get_if<EspressoWaveRNNANEStatus>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9D6760(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Observable::on_event(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, std::string **a4@<X8>)
{
  std::mutex *v8;
  std::string *v9;
  unint64_t *p_size;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  uint64_t v35;
  void *v36;
  void *__p[2];
  std::string::size_type v38;
  void *v39[2];
  char v40;
  void **v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a3[3])
  {
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v8 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v9 = (std::string *)operator new(0x50uLL);
  v9->__r_.__value_.__l.__size_ = 0;
  p_size = &v9->__r_.__value_.__l.__size_;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA935CE0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v11 = a3[3];
  if (!v11)
    goto LABEL_5;
  if ((_QWORD *)v11 != a3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_5:
    v41 = (void **)v11;
    goto LABEL_8;
  }
  v41 = v39;
  (*(void (**)(_QWORD *, void **))(*a3 + 24))(a3, v39);
LABEL_8:
  v12 = v9 + 1;
  if (SHIBYTE(v38) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v9[1].__r_.__value_.__r.__words[2] = v38;
  }
  v13 = (uint64_t)v41;
  if (!v41)
    goto LABEL_14;
  if (v41 != v39)
  {
    v13 = (*((uint64_t (**)(void))*v41 + 2))();
LABEL_14:
    v9[3].__r_.__value_.__r.__words[0] = v13;
    goto LABEL_16;
  }
  v9[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v9[2];
  (*((void (**)(void **))v39[0] + 3))(v39);
LABEL_16:
  v14 = v41;
  if (v41 == v39)
  {
    v15 = 4;
    v14 = v39;
    goto LABEL_20;
  }
  if (v41)
  {
    v15 = 5;
LABEL_20:
    (*((void (**)(void))*v14 + v15))();
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  *a4 = v12;
  a4[1] = v9;
  std::string::basic_string[abi:ne180100]<0>(v39, a2);
  __p[0] = v39;
  v16 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a1, (const void **)v39, (_OWORD **)__p);
  v17 = v16;
  v19 = (char *)v16[8];
  v18 = v16[9];
  if ((unint64_t)v19 >= v18)
  {
    v22 = (char *)v16[7];
    v23 = (v19 - v22) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v25 = v18 - (_QWORD)v22;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v27 = (char *)operator new(16 * v26);
    v28 = &v27[16 * v23];
    v29 = *(_OWORD *)a4;
    *(_OWORD *)v28 = *(_OWORD *)a4;
    if (*((_QWORD *)&v29 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v22 = (char *)v17[7];
      v19 = (char *)v17[8];
    }
    if (v19 == v22)
    {
      v34 = vdupq_n_s64((unint64_t)v19);
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v19 - 1);
        v19 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
      }
      while (v19 != v22);
      v34 = *(int64x2_t *)(v17 + 7);
    }
    v21 = v28 + 16;
    v17[7] = v32;
    v17[8] = v28 + 16;
    v17[9] = &v27[16 * v26];
    v35 = v34.i64[1];
    v36 = (void *)v34.i64[0];
    while ((void *)v35 != v36)
      v35 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 16);
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_QWORD *)v19 = *a4;
    *((_QWORD *)v19 + 1) = v9;
    do
      v20 = __ldxr(p_size);
    while (__stxr(v20 + 1, p_size));
    v21 = v19 + 16;
  }
  v17[8] = v21;
  if (v40 < 0)
    operator delete(v39[0]);
  std::mutex::unlock(v8);
}

void sub_1DE9D6A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void **a21)
{
  std::mutex *v21;
  std::__shared_weak_count *v22;
  void **v24;
  uint64_t v25;
  void *v26;

  v24 = a21;
  if (a21 == &a15)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*((void (**)(void))*v24 + v25))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v26);
  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<Observer>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<Observer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Observer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<Observer>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void Observable::remove_observer(uint64_t a1, const void ***a2)
{
  std::mutex *v4;
  const void **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  _QWORD *v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *a2;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &v17, *a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x50uLL);
    v15[0] = v7;
    v15[1] = a1 + 8;
    v16 = 0;
    v9 = (std::string *)(v7 + 4);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v10 = *(_OWORD *)v5;
      v7[6] = (uint64_t)v5[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    v16 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)a1, v17, v8, v7);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  v11 = v7[8];
  if (v7[7] == v11)
  {
    v12 = (_QWORD *)v7[7];
  }
  else
  {
    v12 = (_QWORD *)v7[7];
    while ((const void **)*v12 != *a2)
    {
      v12 += 2;
      if (v12 == (_QWORD *)v11)
      {
        v12 = (_QWORD *)v7[8];
        break;
      }
    }
  }
  if (v12 != (_QWORD *)v11)
  {
    v13 = (__int128 *)(v12 + 2);
    if (v12 + 2 != (_QWORD *)v11)
    {
      do
      {
        if (*(const void ***)v13 != *a2)
          v12 = (_QWORD *)(std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v12, v13) + 16);
        ++v13;
      }
      while (v13 != (__int128 *)v11);
      v11 = v7[8];
    }
  }
  if (v12 != (_QWORD *)v11)
  {
    v14 = v12;
    while ((_QWORD *)v11 != v14)
    {
      v11 -= 16;
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v11);
    }
    v7[8] = (uint64_t)v14;
  }
  std::mutex::unlock(v4);
}

void sub_1DE9D6E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void Observable::emit(uint64_t **this, char *a2, void *a3)
{
  std::mutex *v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void **v14;

  v6 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v14 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<Observer>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (_OWORD **)&v14);
  if (v13 < 0)
    operator delete(__p[0]);
  v9 = (uint64_t *)*((_QWORD *)v7 + 7);
  v8 = (uint64_t *)*((_QWORD *)v7 + 8);
  while (v9 != v8)
  {
    v10 = *v9;
    __p[0] = a3;
    v11 = *(_QWORD *)(v10 + 48);
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __p);
    v9 += 2;
  }
  std::mutex::unlock(v6);
}

void sub_1DE9D6F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;

  if (a14 < 0)
    operator delete(__p);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void Environment::Environment(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1DE9D7020(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SharedObjectPool::get<FeatureBook>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  const char *v16;
  char v17;
  NSObject *v18;
  const char *v19;
  std::vector<std::string>::pointer v20;
  std::vector<std::string>::pointer v21;
  uint64_t v22;
  __int128 v23;
  _BYTE *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t *v28;
  void **v29;
  uint64_t **v30;
  const void **v31;
  char *v32;
  std::string *v33;
  uint64_t *v34;
  void **v35;
  char *v36;
  void **v37;
  std::string *v38;
  unsigned __int8 *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  uint64_t **v47;
  std::string *value;
  uint64_t **leaf_high;
  uint64_t *v50;
  BOOL v51;
  std::string *v52;
  char *v53;
  _QWORD *v54;
  const void **v55;
  __int128 v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t **v59;
  char *v60;
  char *v61;
  _BOOL4 v62;
  char **v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  void *exception;
  std::vector<std::string> *v87;
  uint64_t v88;
  std::recursive_mutex *v90;
  char *v91;
  _QWORD *v92;
  _QWORD **v93;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *__p;
  _BYTE *v100;
  std::string v101;
  unsigned __int8 *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  char v110[8];
  std::string **v111;
  std::string v112;
  std::vector<std::string> v113;
  uint64_t v114;
  unint64_t v115;
  char *__endptr;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  std::vector<std::string> v121;
  uint64_t v122;
  unint64_t v123;
  char v124[8];
  uint64_t *v125;
  unsigned __int8 v126[8];
  uint64_t *v127;
  __int128 buf;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v90 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v3 = a2 + 32;
  {
    goto LABEL_176;
  }
  v88 = a2 + 32;
  SharedObjectPool::get<VoiceConfig>(&v97, (__int128 **)a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v97 + 72))(&v95, v97, 1885889131, 0);
  v4 = (char *)operator new(0x50uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  v5 = v4 + 56;
  *((_QWORD *)v4 + 6) = v4 + 56;
  v6 = (_QWORD **)(v4 + 48);
  v91 = v4;
  *(_QWORD *)v4 = &off_1EA932240;
  *(_OWORD *)(v4 + 24) = 0u;
  v87 = (std::vector<std::string> *)(v4 + 24);
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 18) = 0;
  v7 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v126, (uint64_t)&v95);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, (char *)FEATURE_NAMES_KEY);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v124, (uint64_t)v8);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v126, (char *)FEATURE_NAMES_KEY);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v121, (unsigned __int8 *)v9);
  std::vector<std::string>::__vdeallocate(v87);
  *((std::vector<std::string> *)v91 + 1) = v121;
  memset(&v121, 0, sizeof(v121));
  *(_QWORD *)&buf = &v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v121.__begin_ = (std::vector<std::string>::pointer)v126;
  v121.__end_ = 0;
  v121.__end_cap_.__value_ = 0;
  v122 = 0;
  v123 = 0x8000000000000000;
  if (v126[0] == 1)
  {
    v121.__end_ = (std::vector<std::string>::pointer)(v127 + 1);
    v121.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v127, (const std::string::value_type **)&FEATURE_NAMES_KEY);
  }
  else if (v126[0] == 2)
  {
    v121.__end_cap_.__value_ = (std::string *)v127[1];
  }
  else
  {
    v123 = 1;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v126, (unsigned __int8 **)&v121, &buf);
  *(_QWORD *)&buf = v126;
  *((_QWORD *)&buf + 1) = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0x8000000000000000;
  v10 = v126[0];
  if (v126[0] == 1)
  {
    *((_QWORD *)&buf + 1) = v127 + 1;
    v11 = v5;
    *((_QWORD *)&buf + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v127, (const std::string::value_type **)&FEATURE_QUESTION_KEY);
    v10 = v126[0];
  }
  else
  {
    v11 = v5;
    if (v126[0] == 2)
    {
      v12 = v127;
      v129 = v127[1];
      __endptr = (char *)v126;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0x8000000000000000;
LABEL_15:
      v118 = v12[1];
      goto LABEL_18;
    }
    v131 = 1;
  }
  __endptr = (char *)v126;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0x8000000000000000;
  if (v10 == 1)
  {
    v117 = v127 + 1;
  }
  else
  {
    if (v10 == 2)
    {
      v12 = v127;
      goto LABEL_15;
    }
    v120 = 1;
  }
LABEL_18:
  v93 = v6;
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&buf, (unsigned __int8 **)&__endptr))
  {
    v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v126, (char *)FEATURE_QUESTION_KEY);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<std::string>,std::vector<std::string>,0>(&v113, (unsigned __int8 *)v13);
    begin = v113.__begin_;
    for (i = v113.__end_; begin != i; ++begin)
    {
      __endptr = 0;
      v16 = (const char *)begin;
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        v16 = (const char *)begin->__r_.__value_.__r.__words[0];
      v17 = strtol(v16, &__endptr, 10);
      if (*__endptr)
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v18 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          v20 = begin;
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
            v20 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v20;
          _os_log_impl(&dword_1DE3F6000, v18, OS_LOG_TYPE_ERROR, "Invalid question bit value '%s'", (uint8_t *)&buf, 0xCu);
        }
        v21 = begin;
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          v21 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
        Diagnostics::log(3, "Invalid question bit value '%s'", v19, v21);
        v11 = v5;
      }
      else
      {
        *((_DWORD *)v91 + 18) |= 1 << v17;
      }
    }
    *(_QWORD *)&buf = v126;
    *((_QWORD *)&buf + 1) = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0x8000000000000000;
    if (v126[0] == 1)
    {
      *((_QWORD *)&buf + 1) = v127 + 1;
      *((_QWORD *)&buf + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>((uint64_t)v127, (const std::string::value_type **)&FEATURE_QUESTION_KEY);
    }
    else if (v126[0] == 2)
    {
      v129 = v127[1];
    }
    else
    {
      v131 = 1;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v126, (unsigned __int8 **)&buf, &__endptr);
    __endptr = (char *)&v113;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  __endptr = (char *)v126;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0x8000000000000000;
  if (v126[0])
  {
    if (v126[0] == 2)
    {
      v118 = *v127;
    }
    else if (v126[0] == 1)
    {
      v117 = (uint64_t *)*v127;
    }
    else
    {
      v120 = 0;
    }
  }
  else
  {
    v120 = 1;
  }
  v92 = v91 + 64;
  while (1)
  {
    v113.__end_cap_.__value_ = 0;
    v114 = 0;
    v113.__end_ = 0;
    v113.__begin_ = (std::vector<std::string>::pointer)v126;
    v115 = 0x8000000000000000;
    if (v126[0] == 2)
    {
      v113.__end_cap_.__value_ = (std::string *)v127[1];
    }
    else if (v126[0] == 1)
    {
      v113.__end_ = (std::vector<std::string>::pointer)(v127 + 1);
    }
    else
    {
      v115 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&__endptr, (unsigned __int8 **)&v113))
    {
      break;
    }
    v22 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&__endptr);
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
    }
    else
    {
      v23 = *(_OWORD *)v22;
      v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v23;
    }
    v24 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&__endptr);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v110, (uint64_t)v24);
    v108 = 0;
    v109 = 0;
    v107 = &v108;
    v113.__end_cap_.__value_ = 0;
    v114 = 0;
    v113.__end_ = 0;
    v113.__begin_ = (std::vector<std::string>::pointer)v110;
    v115 = 0x8000000000000000;
    if (v110[0])
    {
      if (v110[0] == 2)
      {
        v113.__end_cap_.__value_ = *v111;
      }
      else if (v110[0] == 1)
      {
        v113.__end_ = *v111;
      }
      else
      {
        v115 = 0;
      }
    }
    else
    {
      v115 = 1;
    }
    while (1)
    {
      v104 = 0;
      v105 = 0;
      v103 = 0;
      v102 = (unsigned __int8 *)v110;
      v106 = 0x8000000000000000;
      if (v110[0] == 2)
      {
        v104 = (uint64_t)v111[1];
      }
      else if (v110[0] == 1)
      {
        v103 = (uint64_t *)(v111 + 1);
      }
      else
      {
        v106 = 1;
      }
      if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v113, &v102))
      {
        break;
      }
      v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v113);
      if (*(char *)(v25 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
      }
      else
      {
        v26 = *(_OWORD *)v25;
        v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v26;
      }
      v27 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v113);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>(v27, &__p);
      v28 = v108;
      v29 = (void **)&v108;
      v30 = &v108;
      if (!v108)
        goto LABEL_82;
      v29 = (void **)&v108;
      while (1)
      {
        while (1)
        {
          v30 = (uint64_t **)v28;
          v31 = (const void **)(v28 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v109, (const void **)&v101.__r_.__value_.__l.__data_, (const void **)v28 + 4))break;
          v28 = *v30;
          v29 = (void **)v30;
          if (!*v30)
            goto LABEL_82;
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v109, v31, (const void **)&v101.__r_.__value_.__l.__data_))break;
        v29 = (void **)(v30 + 1);
        v28 = v30[1];
        if (!v28)
          goto LABEL_82;
      }
      v32 = (char *)*v29;
      if (!*v29)
      {
LABEL_82:
        v32 = (char *)operator new(0x50uLL);
        v102 = (unsigned __int8 *)v32;
        v103 = (uint64_t *)&v108;
        LOBYTE(v104) = 0;
        v33 = (std::string *)(v32 + 32);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v33, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v101.__r_.__value_.__l.__data_;
          *((_QWORD *)v32 + 6) = *((_QWORD *)&v101.__r_.__value_.__l + 2);
        }
        *((_QWORD *)v32 + 8) = 0;
        *((_QWORD *)v32 + 9) = 0;
        *((_QWORD *)v32 + 7) = 0;
        LOBYTE(v104) = 1;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v30;
        *v29 = v32;
        v34 = (uint64_t *)v32;
        if (*v107)
        {
          v107 = (uint64_t **)*v107;
          v34 = (uint64_t *)*v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v108, v34);
        ++v109;
        v102 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v102);
      }
      if (v32 + 56 != (char *)&__p)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v32 + 56, (char *)__p, (uint64_t)v100, (v100 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v100 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&v113);
      v11 = v5;
    }
    v35 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v93, &v102, (const void **)&v112.__r_.__value_.__l.__data_);
    v36 = (char *)*v35;
    if (!*v35)
    {
      v37 = v35;
      v36 = (char *)operator new(0x50uLL);
      v113.__begin_ = (std::vector<std::string>::pointer)v36;
      v113.__end_ = (std::vector<std::string>::pointer)v11;
      LOBYTE(v113.__end_cap_.__value_) = 0;
      v38 = (std::string *)(v36 + 32);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v38, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
        *((_QWORD *)v36 + 6) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
      }
      *((_QWORD *)v36 + 9) = 0;
      *((_QWORD *)v36 + 8) = 0;
      *((_QWORD *)v36 + 7) = v36 + 64;
      LOBYTE(v113.__end_cap_.__value_) = 1;
      v39 = v102;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = v39;
      *v37 = v36;
      v40 = (_QWORD *)**v93;
      v41 = (uint64_t *)v36;
      if (v40)
      {
        *v93 = v40;
        v41 = (uint64_t *)*v37;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v11, v41);
      ++*v92;
      v113.__begin_ = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v113);
    }
    v42 = (uint64_t **)(v36 + 56);
    if (v36 + 56 != (char *)&v107)
    {
      v43 = v107;
      if (*((_QWORD *)v36 + 9))
      {
        v44 = *((_QWORD *)v36 + 8);
        v45 = *((_QWORD *)v36 + 7);
        *((_QWORD *)v36 + 7) = v36 + 64;
        *(_QWORD *)(v44 + 16) = 0;
        *((_QWORD *)v36 + 8) = 0;
        *((_QWORD *)v36 + 9) = 0;
        if (*(_QWORD *)(v45 + 8))
          v46 = *(std::string **)(v45 + 8);
        else
          v46 = (std::string *)v45;
        v113.__begin_ = (std::vector<std::string>::pointer)(v36 + 56);
        v113.__end_ = v46;
        v113.__end_cap_.__value_ = v46;
        if (v46)
        {
          v113.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v46);
          v47 = &v108;
          if (v43 != &v108)
          {
            do
            {
              std::string::operator=((std::string *)((char *)v46 + 32), (const std::string *)(v43 + 4));
              if (v46 != (std::string *)v43)
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v46[2].__r_.__value_.__s.__data_[8], (char *)v43[7], (uint64_t)v43[8], ((char *)v43[8] - (char *)v43[7]) >> 2);
              value = v113.__end_cap_.__value_;
              leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)(v36 + 56), &v102, (const void **)&v113.__end_cap_.__value_[1].__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)v36 + 7, (uint64_t)v102, leaf_high, (uint64_t *)value);
              v113.__end_cap_.__value_ = v113.__end_;
              if (v113.__end_)
                v113.__end_ = (std::vector<std::string>::pointer)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::__detach_next((uint64_t)v113.__end_);
              v50 = v43[1];
              if (v50)
              {
                do
                {
                  v47 = (uint64_t **)v50;
                  v50 = (uint64_t *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  v47 = (uint64_t **)v43[2];
                  v51 = *v47 == (uint64_t *)v43;
                  v43 = v47;
                }
                while (!v51);
              }
              v46 = v113.__end_cap_.__value_;
              if (v113.__end_cap_.__value_)
                v51 = v47 == &v108;
              else
                v51 = 1;
              v43 = v47;
            }
            while (!v51);
          }
        }
        else
        {
          v47 = v43;
        }
        std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v113);
        v43 = v47;
        v11 = v5;
      }
      if (v43 != &v108)
      {
        v52 = (std::string *)(v36 + 64);
        do
        {
          v53 = (char *)operator new(0x50uLL);
          v54 = v53;
          v113.__begin_ = (std::vector<std::string>::pointer)v53;
          v113.__end_ = v52;
          LOBYTE(v113.__end_cap_.__value_) = 0;
          v55 = (const void **)(v53 + 32);
          if (*((char *)v43 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v53 + 32), (const std::string::value_type *)v43[4], (std::string::size_type)v43[5]);
          }
          else
          {
            v56 = *((_OWORD *)v43 + 2);
            *((_QWORD *)v53 + 6) = v43[6];
            *(_OWORD *)v55 = v56;
          }
          v54[7] = 0;
          v54[8] = 0;
          v54[9] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v54 + 7, v43[7], (uint64_t)v43[8], ((char *)v43[8] - (char *)v43[7]) >> 2);
          LOBYTE(v113.__end_cap_.__value_) = 1;
          v57 = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__find_leaf_high((uint64_t)v42, &v102, v55);
          std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v42, (uint64_t)v102, v57, (uint64_t *)v113.__begin_);
          v113.__begin_ = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v113);
          v58 = v43[1];
          if (v58)
          {
            do
            {
              v59 = (uint64_t **)v58;
              v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v59 = (uint64_t **)v43[2];
              v51 = *v59 == (uint64_t *)v43;
              v43 = v59;
            }
            while (!v51);
          }
          v43 = v59;
          v11 = v5;
        }
        while (v59 != &v108);
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v108);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v111, v110[0]);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++((unsigned __int8 **)&__endptr);
  }
  std::string::basic_string[abi:ne180100]<0>(&__endptr, "name");
  v60 = *(char **)v11;
  v61 = v11;
  if (!*(_QWORD *)v11)
    goto LABEL_146;
  do
  {
    v62 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)v92, (const void **)v60 + 4, (const void **)&__endptr);
    v63 = (char **)(v60 + 8);
    if (!v62)
    {
      v63 = (char **)v60;
      v11 = v60;
    }
    v60 = *v63;
  }
  while (*v63);
  v61 = v5;
  if (v11 == v5
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)v92, (const void **)&__endptr, (const void **)v11 + 4))
  {
LABEL_146:
    v11 = v61;
  }
  if (SHIBYTE(v118) < 0)
    operator delete(__endptr);
  if (v5 == v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)&__endptr, "Feature book doesn't have phone name encoding.");
    MEMORY[0x1DF0EC99C](exception, &__endptr);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v125, v124[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v127, v126[0]);
  *(_QWORD *)&v94 = v87;
  *((_QWORD *)&v94 + 1) = v91;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v96, v95);
  v64 = v98;
  v65 = v88;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      v65 = v88;
    }
  }
  v121.__begin_ = (std::vector<std::string>::pointer)&buf;
  v69 = v68[5];
  if (v69)
  {
    if (v91)
    {
      v70 = (unint64_t *)(v91 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = *(std::__shared_weak_count **)(v69 + 16);
    *(_OWORD *)(v69 + 8) = v94;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)v91;
  }
  else
  {
    v76 = operator new();
    v75 = (std::__shared_weak_count *)v91;
    *(_QWORD *)v76 = &off_1EA923188;
    *(_OWORD *)(v76 + 8) = v94;
    if (v91)
    {
      v77 = (unint64_t *)(v91 + 8);
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v79 = v68[5];
    v68[5] = v76;
    if (v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  }
  if (v75)
  {
    v80 = (unint64_t *)&v75->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v3 = v88;
LABEL_176:
  v83 = *(_QWORD *)(*(_QWORD *)v82 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v82 + 8);
  a1[1] = v83;
  if (v83)
  {
    v84 = (unint64_t *)(v83 + 8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  std::recursive_mutex::unlock(v90);
}

void sub_1DE9D7DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned __int8 a24,uint64_t *a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  uint64_t v54;
  void *v56;

  __p = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v54 - 168), *(unsigned __int8 *)(v54 - 176));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v54 - 152), *(unsigned __int8 *)(v54 - 160));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::vector<int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::vector<int>>>>>::destroy(*(_QWORD **)(a15 + 56));
  __p = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a15);
  operator delete(v56);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a25, a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::recursive_mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NNInputEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NNInputEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NNInputEncoder>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<FeatureBook>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923188;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<FeatureBook>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923188;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

float std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(uint64_t a1, char *__src, int *a3, int *a4, uint64_t a5)
{
  int *v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  int *v21;
  float *v22;
  int v23;
  float result;
  float *v25;
  uint64_t v26;
  float *v27;
  int v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  int v33;
  void *__p;
  float *v35;
  float *v36;
  char *v37;
  uint64_t v38;

  if (a5 < 1)
    return result;
  v6 = a3;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 <= (uint64_t)(v11 - v12) >> 2)
  {
    v19 = (uint64_t)(v12 - (_QWORD)__src) >> 2;
    if (v19 >= a5)
    {
      v20 = &a3[a5];
      v22 = *(float **)(v9 - 8);
    }
    else
    {
      v20 = &a3[v19];
      if (v20 == a4)
      {
        v22 = *(float **)(v9 - 8);
      }
      else
      {
        v21 = &a3[v19];
        v22 = *(float **)(v9 - 8);
        do
        {
          v23 = *v21++;
          result = (float)v23;
          *v22++ = (float)v23;
        }
        while (v21 != a4);
      }
      *(_QWORD *)(a1 + 8) = v22;
      if ((uint64_t)(v12 - (_QWORD)__src) < 1)
        return result;
    }
    v29 = (float *)&__src[4 * a5];
    v30 = &v22[-a5];
    v31 = v22;
    if ((unint64_t)v30 < v12)
    {
      v31 = v22;
      do
      {
        v32 = *v30++;
        result = v32;
        *v31++ = v32;
      }
      while ((unint64_t)v30 < v12);
    }
    *(_QWORD *)(a1 + 8) = v31;
    if (v22 != v29)
      memmove(&v22[-(v22 - v29)], __src, (char *)v22 - (char *)v29);
    for (; v6 != v20; v7 += 4)
    {
      v33 = *v6++;
      result = (float)v33;
      *(float *)v7 = (float)v33;
    }
  }
  else
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__src - v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v38 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    else
      v18 = 0;
    v25 = (float *)&v18[4 * v15];
    __p = v18;
    v35 = v25;
    v37 = &v18[4 * v17];
    v26 = 4 * a5;
    v27 = &v25[a5];
    do
    {
      v28 = *v6++;
      *v25++ = (float)v28;
      v26 -= 4;
    }
    while (v26);
    v36 = v27;
    std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v7);
    if (v36 != v35)
      v36 = (float *)((char *)v36 + (((char *)v35 - (char *)v36 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__p)
      operator delete(__p);
  }
  return result;
}

void sub_1DE9D82BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FrontendEnvironment::get_shared_component_instance<PronunciationDictionary>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  PronounceSqliteDict *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  void *v28;

  v2 = (_QWORD *)(a1 + 168);
  {
    if (v2 == v3)
      return 0;
    else
      return v3[5] + 8;
  }
  else
  {
    v25 = &v28;
    v6 = (_QWORD *)operator new();
    *v6 = &off_1EA9230E8;
    v6[1] = 0;
    v6[2] = 0;
    (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 16))(&v25, *(_QWORD *)(a1 + 96), 1886545272, 1);
    v7 = (uint64_t *)v25;
    if (v25)
    {
      v8 = (char *)operator new(0xA0uLL);
      v9 = v8;
      *(_OWORD *)(v8 + 8) = 0u;
      *(_QWORD *)v8 = &off_1EA933C80;
      *((_QWORD *)v8 + 3) = &off_1EA91F800;
      v10 = (PronounceSqliteDict *)(v8 + 24);
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 7) = v7;
      *(_OWORD *)(v8 + 40) = 0u;
      v11 = v26;
      *((_QWORD *)v8 + 8) = v26;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = v27;
      *((_OWORD *)v8 + 6) = 0uLL;
      *(_OWORD *)(v8 + 72) = v14;
      *((_OWORD *)v8 + 7) = 0uLL;
      *((_OWORD *)v8 + 8) = 0uLL;
      *((_OWORD *)v8 + 9) = 0uLL;
      v15 = sqlite3_open_MemoryMap((const void **)&v25, (sqlite3 **)v8 + 4);
      v16 = v15;
      PronounceSqliteDict::report_error(v10, v15, "open dictionary");
      if (!v16)
        PronounceSqliteDict::setup(v10, 0);
      *(_QWORD *)&v17 = v10;
      *((_QWORD *)&v17 + 1) = v9;
      v18 = (std::__shared_weak_count *)v6[2];
      *(_OWORD *)(v6 + 1) = v17;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    v21 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v5[5];
    v5[5] = (uint64_t)v6;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v6 = (_QWORD *)v5[5];
    }
    return (uint64_t)(v6 + 1);
  }
}

void sub_1DE9D8540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v12);
  MEMORY[0x1DF0ED014](v11, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *Agglomerate::ItemHolder<PronunciationDictionary>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9230E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<PronunciationDictionary>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9230E8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<NNetExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9326A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NNetExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9326A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<NNetExtractor>::__on_zero_shared(uint64_t a1)
{
  NNetExtractor::~NNetExtractor((NNetExtractor *)(a1 + 24));
}

void NormClassify::nn_prediction(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  void *exception;
  const char *v28;
  const float **v29[3];
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  void **v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  v5 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v31, a3);
  v6 = *(_QWORD *)(a2 + 24);
  v32 = v5;
  memset(v29, 0, sizeof(v29));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v29, v31, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v31) >> 3));
  to_roost<float,float>((uint64_t)&v35, v29);
  if (*(_DWORD *)(v6 + 236) >= 2u)
  {
    if (*((_QWORD *)&v36 + 1) != *(_DWORD *)(*(_QWORD *)(v6 + 208) + 120))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v28 = (const char *)(v6 + 464);
      if (*(char *)(v6 + 487) < 0)
        v28 = *(const char **)v28;
      MEMORY[0x1DF0EC99C](exception, v34);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v7 = 0;
    v8 = 104;
    do
    {
      v9 = *(_QWORD *)(v6 + 208) + v8;
      *(_BYTE *)(v9 - 104) = (_BYTE)v35;
      *(_OWORD *)(v9 - 96) = v36;
      *(_QWORD *)(v9 - 80) = v37;
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 - 72), v38, (uint64_t)v39);
      *(_QWORD *)(v9 - 56) = v40;
      RnnComponent::activation_func((RnnComponent *)(*(_QWORD *)(v6 + 208) + v8 - 104));
      v10 = (_QWORD *)(*(_QWORD *)(v6 + 208) + v8);
      LOBYTE(v35) = *((_BYTE *)v10 - 48);
      v36 = *(_OWORD *)(v10 - 5);
      v37 = *(v10 - 3);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v38, *(v10 - 2), *(v10 - 1));
      v40 = *v10;
      ++v7;
      v8 += 248;
    }
    while (v7 < (unint64_t)*(unsigned int *)(v6 + 236) >> 1);
  }
  to_std<float,float>(v30, (char *)&v35);
  v11 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v35 = (void **)v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v14 = *(_QWORD *)v30[0];
  if (*(_QWORD *)(v30[0] + 8) != *(_QWORD *)v30[0])
  {
    v15 = 0;
    v16 = 0;
    v17 = a1 + 2;
    do
    {
      if ((unint64_t)v15 >= *v17)
      {
        v19 = *a1;
        v20 = (v15 - *a1) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = *v17 - (_QWORD)v19;
        if (v22 >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v23);
          v19 = *a1;
          v15 = a1[1];
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *(_DWORD *)(v14 + 4 * v16);
        v18 = v25 + 4;
        while (v15 != v19)
        {
          v26 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        *a1 = v25;
        a1[1] = v18;
        a1[2] = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v15 = *(_DWORD *)(v14 + 4 * v16);
        v18 = v15 + 4;
      }
      a1[1] = v18;
      ++v16;
      v14 = *(_QWORD *)v30[0];
      v15 = v18;
    }
    while (v16 < (uint64_t)(*(_QWORD *)(v30[0] + 8) - *(_QWORD *)v30[0]) >> 2);
  }
  v35 = (void **)v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  v35 = (void **)&v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
}

void sub_1DE9D89D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
      __p = &a12;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p = &a18;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void NormClassify::get_label(_QWORD *a1, uint64_t a2, char *a3, unint64_t a4, unsigned __int16 *a5, int a6, unsigned __int8 **a7)
{
  unsigned __int16 *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  const char *v22;
  size_t v23;
  unsigned __int8 *v24;
  float likelihood;
  float *v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  float v33;
  float v34;
  float *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float *v52;
  int v53;
  int v54;
  float *v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int16 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  const char *v85;
  const char *v86;
  const std::string::value_type *p_p;
  std::string::size_type v88;
  uint64_t v89;
  std::string *v90;
  const char *v91;
  float *v92;
  BOOL v93;
  float *v94;
  float v95;
  float *v96;
  float v97;
  float v98;
  char *v99;
  int v100;
  unint64_t v103;
  unsigned __int16 *v106;
  void *__p;
  std::string::size_type v108;
  unsigned __int8 v109;
  std::string v110;
  float *v111;
  float *v112;
  _QWORD v113[2];

  v7 = a5;
  v8 = a1;
  v111 = 0;
  v112 = 0;
  v113[0] = 0;
  if (a4 == 1)
  {
    if (*a5 == *(unsigned __int16 *)(a2 + 76))
    {
      v7 = (unsigned __int16 *)(a2 + 76);
      v9 = 2;
    }
    else
    {
      v9 = 1;
    }
    goto LABEL_6;
  }
  v9 = a4;
  if (a4)
  {
LABEL_6:
    v100 = a6;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v103 = v9;
    v106 = v7;
    while (1)
    {
      v14 = (__int16)v7[v13];
      v15 = v7[v13];
      if ((v14 & 0x80000000) == 0)
      {
        if (v9 == 1)
        {
          v16 = v112;
          if ((unint64_t)v112 >= v113[0])
          {
            v27 = v111;
            v37 = v112 - v111;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = v113[0] - (_QWORD)v111;
            if ((uint64_t)(v113[0] - (_QWORD)v111) >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v38;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v31);
              v27 = v111;
              v16 = v112;
            }
            else
            {
              v32 = 0;
            }
            v52 = (float *)&v32[4 * v37];
            *v52 = 1.0;
            v17 = v52 + 1;
            while (v16 != v27)
            {
              v53 = *((_DWORD *)v16-- - 1);
              *((_DWORD *)v52-- - 1) = v53;
            }
            goto LABEL_113;
          }
          *v112 = 1.0;
          v17 = v16 + 1;
          goto LABEL_115;
        }
        v20 = *a7;
        v21 = a7[1];
        if (*a7 == v21)
          goto LABEL_36;
        v22 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), v7[v13]);
        v23 = strlen(v22);
        while (1)
        {
          if ((char)v20[23] < 0)
          {
            if (v23 == *((_QWORD *)v20 + 1))
            {
              if (v23 == -1)
LABEL_178:
                std::string::__throw_out_of_range[abi:ne180100]();
              v24 = *(unsigned __int8 **)v20;
LABEL_23:
              if (!memcmp(v24, v22, v23))
                goto LABEL_26;
            }
          }
          else if (v23 == v20[23])
          {
            v24 = v20;
            if (v23 == -1)
              goto LABEL_178;
            goto LABEL_23;
          }
          v20 += 24;
          if (v20 == v21)
          {
            v20 = v21;
LABEL_26:
            v7 = v106;
            if (v20 != a7[1])
            {
              likelihood = -get_likelihood(a3, v15);
              v26 = v112;
              if ((unint64_t)v112 >= v113[0])
              {
                v27 = v111;
                v28 = v112 - v111;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v30 = v113[0] - (_QWORD)v111;
                if ((uint64_t)(v113[0] - (_QWORD)v111) >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                v9 = v103;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v31);
                  v27 = v111;
                  v26 = v112;
                }
                else
                {
                  v32 = 0;
                }
                v52 = (float *)&v32[4 * v28];
                *v52 = likelihood;
                v17 = v52 + 1;
                while (v26 != v27)
                {
                  v68 = *((_DWORD *)v26-- - 1);
                  *((_DWORD *)v52-- - 1) = v68;
                }
                goto LABEL_113;
              }
LABEL_37:
              *v26 = likelihood;
              v17 = v26 + 1;
              v9 = v103;
              goto LABEL_115;
            }
LABEL_36:
            likelihood = get_likelihood(a3, v15);
            v26 = v112;
            if ((unint64_t)v112 < v113[0])
              goto LABEL_37;
            v27 = v111;
            v40 = v112 - v111;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v42 = v113[0] - (_QWORD)v111;
            if ((uint64_t)(v113[0] - (_QWORD)v111) >> 1 > v41)
              v41 = v42 >> 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v41;
            v9 = v103;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v31);
              v27 = v111;
              v26 = v112;
            }
            else
            {
              v32 = 0;
            }
            v52 = (float *)&v32[4 * v40];
            *v52 = likelihood;
            v17 = v52 + 1;
            while (v26 != v27)
            {
              v54 = *((_DWORD *)v26-- - 1);
              *((_DWORD *)v52-- - 1) = v54;
            }
LABEL_113:
            v111 = v52;
            v112 = v17;
            v113[0] = &v32[4 * v31];
            if (v27)
              operator delete(v27);
LABEL_115:
            v112 = v17;
            if ((unint64_t)v11 >= v10)
            {
              v69 = v11 - v12;
              if (v11 - v12 <= -3)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v70 = v69 >> 1;
              if (v10 - (unint64_t)v12 <= (v69 >> 1) + 1)
                v71 = v70 + 1;
              else
                v71 = v10 - (_QWORD)v12;
              if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFELL)
                v72 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
                v72 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v72);
              else
                v73 = 0;
              v74 = (char *)(v72 + 2 * v70);
              *(_WORD *)v74 = v14;
              v66 = v74 + 2;
              while (v11 != v12)
              {
                v75 = *((_WORD *)v11 - 1);
                v11 -= 2;
                *((_WORD *)v74 - 1) = v75;
                v74 -= 2;
              }
              v10 = v72 + 2 * v73;
              if (v12)
                operator delete(v12);
              v12 = v74;
            }
            else
            {
              *(_WORD *)v11 = v14;
              v59 = v11 + 2;
LABEL_117:
              v66 = v59;
            }
            goto LABEL_134;
          }
        }
      }
      if (v9 == 2)
      {
        v18 = v112;
        if ((unint64_t)v112 < v113[0])
        {
          *v112 = 1.0;
          v19 = v18 + 1;
LABEL_40:
          v36 = v19;
          goto LABEL_91;
        }
        v43 = v111;
        v44 = v112 - v111;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v113[0] - (_QWORD)v111;
        if ((uint64_t)(v113[0] - (_QWORD)v111) >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v47);
          v43 = v111;
          v18 = v112;
        }
        else
        {
          v48 = 0;
        }
        v55 = (float *)&v48[4 * v44];
        *v55 = 1.0;
        v36 = v55 + 1;
        while (v18 != v43)
        {
          v56 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v55-- - 1) = v56;
        }
      }
      else
      {
        v33 = get_likelihood(a3, v15 & 0x7FFF);
        v34 = v33;
        v35 = v112;
        if ((unint64_t)v112 < v113[0])
        {
          *v112 = v33;
          v19 = v35 + 1;
          goto LABEL_40;
        }
        v43 = v111;
        v49 = v112 - v111;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = v113[0] - (_QWORD)v111;
        if ((uint64_t)(v113[0] - (_QWORD)v111) >> 1 > v50)
          v50 = v51 >> 1;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v50;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v113, v47);
          v43 = v111;
          v35 = v112;
        }
        else
        {
          v48 = 0;
        }
        v55 = (float *)&v48[4 * v49];
        *v55 = v34;
        v36 = v55 + 1;
        while (v35 != v43)
        {
          v57 = *((_DWORD *)v35-- - 1);
          *((_DWORD *)v55-- - 1) = v57;
        }
      }
      v111 = v55;
      v112 = v36;
      v113[0] = &v48[4 * v47];
      if (v43)
        operator delete(v43);
LABEL_91:
      v112 = v36;
      v58 = v7[++v13];
      if ((unint64_t)v11 < v10)
      {
        *(_WORD *)v11 = v58;
        v59 = v11 + 2;
        goto LABEL_117;
      }
      v60 = v11 - v12;
      if (v11 - v12 <= -3)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v61 = v60 >> 1;
      if (v10 - (unint64_t)v12 <= (v60 >> 1) + 1)
        v62 = v61 + 1;
      else
        v62 = v10 - (_QWORD)v12;
      if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFELL)
        v63 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
        v63 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v63);
      else
        v64 = 0;
      v65 = (char *)(v63 + 2 * v61);
      *(_WORD *)v65 = v58;
      v66 = v65 + 2;
      while (v11 != v12)
      {
        v67 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v65 - 1) = v67;
        v65 -= 2;
      }
      v10 = v63 + 2 * v64;
      if (v12)
        operator delete(v12);
      v12 = v65;
LABEL_134:
      ++v13;
      v11 = v66;
      if (v13 >= v9)
      {
        if (Diagnostics::s_log_level < *(_DWORD *)(a2 + 72))
        {
          v8 = a1;
          v76 = a2;
          goto LABEL_166;
        }
        v77 = v9;
        v78 = 0;
        v79 = 0;
        memset(&v110, 0, sizeof(v110));
        v80 = v12;
        v76 = a2;
        do
        {
          v81 = v106[v79];
          if ((__int16)v106[v79] < 0)
          {
            v85 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), v81 & 0x7FFF);
            v86 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), *(unsigned __int16 *)v80);
            StringFormatter::StringFormatter((StringFormatter *)&__p, " %s:%s : %5.3f", v85, v86, v111[v78]);
            if ((v109 & 0x80u) == 0)
              p_p = (const std::string::value_type *)&__p;
            else
              p_p = (const std::string::value_type *)__p;
            if ((v109 & 0x80u) == 0)
              v88 = v109;
            else
              v88 = v108;
            std::string::append(&v110, p_p, v88);
            if ((char)v109 < 0)
              operator delete(__p);
            ++v79;
          }
          else
          {
            v82 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40), v81);
            StringFormatter::StringFormatter((StringFormatter *)&__p, " %s : %5.3f", v82, v111[v78]);
            if ((v109 & 0x80u) == 0)
              v83 = (const std::string::value_type *)&__p;
            else
              v83 = (const std::string::value_type *)__p;
            if ((v109 & 0x80u) == 0)
              v84 = v109;
            else
              v84 = v108;
            std::string::append(&v110, v83, v84);
            if ((char)v109 < 0)
              operator delete(__p);
          }
          ++v79;
          ++v78;
          v80 += 2;
        }
        while (v79 < v77);
        v89 = *(unsigned int *)(a2 + 72);
        v90 = &v110;
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v90 = (std::string *)v110.__r_.__value_.__r.__words[0];
        v8 = a1;
        a6 = v100;
LABEL_160:
        v91 = "Basic";
        if (a6)
          v91 = "Smart";
        Diagnostics::log(v89, "Possible %s Labels:%s\n", a3, v91, v90);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        goto LABEL_166;
      }
    }
  }
  v76 = a2;
  v89 = *(unsigned int *)(a2 + 72);
  if (Diagnostics::s_log_level >= (int)v89)
  {
    v12 = 0;
    memset(&v110, 0, sizeof(v110));
    v90 = &v110;
    goto LABEL_160;
  }
  v12 = 0;
LABEL_166:
  v92 = v111 + 1;
  v93 = v111 == v112 || v92 == v112;
  v94 = v111;
  if (!v93)
  {
    v95 = *v111;
    v94 = v111;
    v96 = v111 + 1;
    do
    {
      v97 = *v96++;
      v98 = v97;
      if (v95 < v97)
      {
        v95 = v98;
        v94 = v92;
      }
      v92 = v96;
    }
    while (v96 != v112);
  }
  v99 = (char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v76 + 40) + 24))(*(_QWORD *)(v76 + 40), *(unsigned __int16 *)&v12[((char *)v94 - (char *)v111) << 30 >> 31]);
  std::string::basic_string[abi:ne180100]<0>(v8, v99);
  operator delete(v12);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
}

void sub_1DE9D9304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;
  void *v35;

  if (v32)
    operator delete(v32);
  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

float get_likelihood(_QWORD *a1, uint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 < (unint64_t)((uint64_t)(a1[1] - *a1) >> 2))
    return *(float *)(*a1 + 4 * a2);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    v7 = ((uint64_t)(a1[1] - *a1) >> 2) - 1;
    *(_DWORD *)buf = 67109376;
    v9 = a2;
    v10 = 2048;
    v11 = v7;
    _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_ERROR, "NormClassify illegal label %u max %zu", buf, 0x12u);
  }
  Diagnostics::log(3, "NormClassify illegal label %u max %zu", v6, a2, ((uint64_t)(a1[1] - *a1) >> 2) - 1);
  return 0.0;
}

void NormClassify::get_basic_label(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4, unsigned __int8 **a5)
{
  int v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  void *__p;
  uint64_t (*v27)(_QWORD);
  char v28;
  void **p_p;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  __p = &off_1EA92E280;
  v27 = MEMORY[0x1E0DE5A30];
  p_p = &__p;
  v10 = UTFString::for_all<std::string>(a4, &__p);
  v11 = p_p;
  if (p_p == &__p)
  {
    v12 = 4;
    v11 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_6;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_6:
  if (v10)
  {
    v13 = *(_QWORD *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, "_DIGIT_");
    v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, &__p);
    goto LABEL_24;
  }
  __p = &off_1EA92E280;
  v27 = (uint64_t (*)(_QWORD))MEMORY[0x1E0DE59F0];
  p_p = &__p;
  v16 = UTFString::for_all<std::string>(a4, &__p);
  v17 = p_p;
  if (p_p == &__p)
  {
    v18 = 4;
    v17 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_13;
    v18 = 5;
  }
  (*((void (**)(void))*v17 + v18))();
LABEL_13:
  if (!v16)
  {
    __p = &off_1EA92E280;
    v27 = MEMORY[0x1E0DE5A48];
    p_p = &__p;
    v20 = UTFString::for_all<std::string>(a4, &__p);
    v21 = p_p;
    if (p_p == &__p)
    {
      v22 = 4;
      v21 = &__p;
    }
    else
    {
      if (!p_p)
      {
LABEL_20:
        v23 = *(_QWORD *)(a2 + 40);
        if (v20)
          std::string::basic_string[abi:ne180100]<0>(&__p, "_PUNCT_");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "_NONE_");
        v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, &__p);
        goto LABEL_24;
      }
      v22 = 5;
    }
    (*((void (**)(void))*v21 + v22))();
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "_ALPHA_");
  v14 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, &__p);
LABEL_24:
  v24 = v14;
  v25 = v15;
  if (v28 < 0)
    operator delete(__p);
  NormClassify::get_label(a1, a2, a3, v24, v25, 0, a5);
}

void sub_1DE9D9734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *boost::algorithm::split<std::vector<std::string>,std::string&,boost::algorithm::detail::is_any_ofF<char>>(__int128 *a1, uint64_t *a2, _QWORD *__src, int a4)
{
  _QWORD *v5;
  size_t v8;
  void *v9;
  size_t v10;
  void **v11;
  void **v12;
  size_t v13;
  void **v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  size_t v20;
  void *v21;
  void **v22;
  size_t v23;
  void *v24;
  void **v25;
  size_t v26;
  void *v27;
  void **v28;
  size_t v29;
  void *v30;
  void **v31;
  size_t v32;
  void *v33;
  void **v34;
  size_t v35;
  void **v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  void *v41;
  BOOL v42;
  int v43;
  char *v44;
  char *v45;
  unint64_t v46;
  std::vector<std::string>::pointer end;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 *v59;
  unint64_t v60;
  unint64_t v61;
  std::vector<std::string> v62;
  uint64_t (**v63)();
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70[10];
  __int128 __p;
  std::string::size_type v72;
  std::vector<std::string> *v73;
  char v74;
  std::__split_buffer<std::string> __v;
  void *__srca[2];
  size_t __n;
  void *__dst[2];
  size_t v79;
  int v80;
  void *v81[2];
  size_t v82;
  int v83;
  void *v84[2];
  size_t v85;
  int v86;
  void *v87[2];
  size_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  char v92;
  void *v93[2];
  size_t v94;
  int v95;
  void *v96[2];
  size_t v97;
  int v98;
  void *v99[2];
  size_t v100;
  int v101;
  void *__s2;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void **v107[2];
  size_t v108;
  int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;

  v5 = __src;
  v115 = *MEMORY[0x1E0C80C00];
  v8 = __src[2];
  __n = v8;
  __srca[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (void *)operator new[]();
    __srca[0] = v9;
    v5 = (_QWORD *)*v5;
  }
  else
  {
    v9 = __srca;
  }
  memcpy(v9, v5, v8);
  v10 = __n;
  v108 = __n;
  v107[0] = 0;
  if (__n >= 0x11)
  {
    v11 = (void **)operator new[]();
    v107[0] = v11;
    v12 = (void **)__srca[0];
  }
  else
  {
    v11 = (void **)v107;
    v12 = __srca;
  }
  v61 = v10;
  memcpy(v11, v12, v10);
  v13 = v108;
  v79 = v108;
  __dst[0] = 0;
  if (v108 > 0x10)
  {
    __dst[0] = (void *)operator new[]();
    v14 = v107[0];
    memcpy(__dst[0], v107[0], v13);
    v80 = a4;
    if (v14)
      MEMORY[0x1DF0ECFFC](v14, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v107, v108);
    v80 = a4;
    v13 = v79;
  }
  v15 = *((char *)a2 + 23);
  if (v15 >= 0)
    v16 = a2;
  else
    v16 = (uint64_t *)*a2;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)a2 + 23);
  else
    v17 = a2[1];
  v97 = v13;
  v96[0] = 0;
  if (v13 >= 0x11)
  {
    v18 = (void *)operator new[]();
    v96[0] = v18;
    v19 = (void **)__dst[0];
  }
  else
  {
    v18 = v96;
    v19 = __dst;
  }
  memcpy(v18, v19, v13);
  v98 = a4;
  v20 = v97;
  v88 = v97;
  v87[0] = 0;
  if (v97 >= 0x11)
  {
    v21 = (void *)operator new[]();
    v87[0] = v21;
    v22 = (void **)v96[0];
  }
  else
  {
    v21 = v87;
    v22 = v96;
  }
  memcpy(v21, v22, v20);
  v89 = a4;
  v23 = v88;
  v82 = v88;
  v81[0] = 0;
  v60 = v13;
  if (v88 >= 0x11)
  {
    v24 = (void *)operator new[]();
    v81[0] = v24;
    v25 = (void **)v87[0];
  }
  else
  {
    v24 = v81;
    v25 = v87;
  }
  memcpy(v24, v25, v23);
  v83 = a4;
  v63 = 0;
  v26 = v82;
  v85 = v82;
  v84[0] = 0;
  if (v82 >= 0x11)
  {
    v27 = (void *)operator new[]();
    v84[0] = v27;
    v28 = (void **)v81[0];
  }
  else
  {
    v27 = v84;
    v28 = v81;
  }
  memcpy(v27, v28, v26);
  v86 = a4;
  v29 = v85;
  v94 = v85;
  v93[0] = 0;
  if (v85 >= 0x11)
  {
    v30 = (void *)operator new[]();
    v93[0] = v30;
    v31 = (void **)v84[0];
  }
  else
  {
    v30 = v93;
    v31 = v84;
  }
  memcpy(v30, v31, v29);
  v95 = a4;
  v32 = v94;
  v100 = v94;
  v99[0] = 0;
  v59 = a1;
  if (v94 >= 0x11)
  {
    v33 = (void *)operator new[]();
    v99[0] = v33;
    v34 = (void **)v93[0];
  }
  else
  {
    v33 = v99;
    v34 = v93;
  }
  memcpy(v33, v34, v32);
  v101 = a4;
  v35 = v100;
  v108 = v100;
  v107[0] = 0;
  if (v100 >= 0x11)
  {
    v36 = (void **)operator new[]();
    v107[0] = v36;
    v37 = (void **)v99[0];
  }
  else
  {
    v36 = (void **)v107;
    v37 = v99;
  }
  memcpy(v36, v37, v35);
  v109 = a4;
  v38 = (_QWORD *)operator new();
  v39 = v38;
  v40 = v108;
  v38[2] = v108;
  *v38 = 0;
  if (v40 >= 0x11)
  {
    v41 = (void *)operator new[]();
    *v39 = v41;
    memcpy(v41, v107[0], v39[2]);
    *((_DWORD *)v39 + 6) = a4;
    v64 = v39;
    if (v107[0])
      MEMORY[0x1DF0ECFFC](v107[0], 0x1000C8077774924);
  }
  else
  {
    memcpy(v38, v107, v40);
    *((_DWORD *)v39 + 6) = a4;
    v64 = v39;
  }
  if (v35 >= 0x11 && v99[0])
    MEMORY[0x1DF0ECFFC](v99[0], 0x1000C8077774924);
  if (v32 >= 0x11 && v93[0])
    MEMORY[0x1DF0ECFFC](v93[0], 0x1000C8077774924);
  v63 = boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable;
  if (v29 >= 0x11 && v84[0])
    MEMORY[0x1DF0ECFFC](v84[0], 0x1000C8077774924);
  if (v26 >= 0x11 && v81[0])
    MEMORY[0x1DF0ECFFC](v81[0], 0x1000C8077774924);
  if (v23 >= 0x11 && v87[0])
    MEMORY[0x1DF0ECFFC](v87[0], 0x1000C8077774924);
  v65 = v16;
  v66 = v16;
  v67 = v16;
  v68 = (uint64_t)v16 + v17;
  v69 = 0;
  if (v17)
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)&v63);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v70, (uint64_t *)&v63);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)&v63);
  if (v20 >= 0x11 && v96[0])
    MEMORY[0x1DF0ECFFC](v96[0], 0x1000C8077774924);
  v87[0] = 0;
  v90 = 0u;
  v91 = 0u;
  v92 = 1;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v93, (uint64_t *)v87);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v87);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v84, v70);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v81, (uint64_t *)v93);
  memset(&v62, 0, sizeof(v62));
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v107, (uint64_t *)v84);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v99, (uint64_t *)v81);
  v73 = &v62;
  v74 = 0;
  while (1)
  {
    if (v107[0])
      v42 = v114 == 0;
    else
      v42 = 0;
    v43 = !v42;
    if (!v99[0])
    {
      if (v43)
        break;
      goto LABEL_74;
    }
    if (((v106 == 0) & ~v43) == 0)
    {
      if (v43 == (v106 != 0))
        break;
LABEL_74:
      v44 = v110;
      v45 = v111;
      v46 = v111 - v110;
      goto LABEL_75;
    }
    v44 = v110;
    v45 = v111;
    v46 = v111 - v110;
    if (v111 - v110 == v103 - (_QWORD)__s2 && !memcmp(v110, __s2, v111 - v110) && v112 == v104 && v113 == v105)
      break;
LABEL_75:
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v44, v45, v46);
    end = v62.__end_;
    if (v62.__end_ >= v62.__end_cap_.__value_)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62.__end_ - (char *)v62.__begin_) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3) > v50)
        v50 = 0x5555555555555556 * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3) >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v50;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v62.__end_cap_;
      if (v51)
        v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v62.__end_cap_, v51);
      else
        v52 = 0;
      v53 = v52 + v49;
      __v.__first_ = v52;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v52[v51];
      v54 = __p;
      v53->__r_.__value_.__r.__words[2] = v72;
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      v72 = 0;
      __p = 0uLL;
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v62, &__v);
      v55 = v62.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v62.__end_ = v55;
      if (SHIBYTE(v72) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v48 = __p;
      v62.__end_->__r_.__value_.__r.__words[2] = v72;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v48;
      v62.__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)v107);
  }
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v99);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v107);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v81);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v84);
  v56 = *v59;
  *v59 = *(_OWORD *)&v62.__begin_;
  *(_OWORD *)&v62.__begin_ = v56;
  v57 = (std::string *)*((_QWORD *)v59 + 2);
  *((_QWORD *)v59 + 2) = v62.__end_cap_.__value_;
  v62.__end_cap_.__value_ = v57;
  v107[0] = (void **)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v107);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2((uint64_t *)v93);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(v70);
  if (v60 >= 0x11 && __dst[0])
    MEMORY[0x1DF0ECFFC](__dst[0], 0x1000C8077774924);
  if (v61 >= 0x11 && __srca[0])
    MEMORY[0x1DF0ECFFC](__srca[0], 0x1000C8077774924);
  return v59;
}

void sub_1DE9D9FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;

  MEMORY[0x1DF0ED014](v63, 0x1012C405C87E9CELL);
  v72 = *(_QWORD *)(v70 - 184);
  if (v72)
    MEMORY[0x1DF0ECFFC](v72, 0x1000C8077774924);
  if (v69 >= 0x11 && STACK[0x2B8])
    MEMORY[0x1DF0ECFFC](STACK[0x2B8], 0x1000C8077774924);
  if (v68 >= 0x11 && STACK[0x248])
    MEMORY[0x1DF0ECFFC](STACK[0x248], 0x1000C8077774924);
  if (v67 >= 0x11 && a63)
    MEMORY[0x1DF0ECFFC](a63, 0x1000C8077774924);
  if (v66 >= 0x11 && a53)
    MEMORY[0x1DF0ECFFC](a53, 0x1000C8077774924);
  if (v65 >= 0x11 && STACK[0x200])
    MEMORY[0x1DF0ECFFC](STACK[0x200], 0x1000C8077774924);
  if (v64 >= 0x11 && STACK[0x298])
    MEMORY[0x1DF0ECFFC](STACK[0x298], 0x1000C8077774924);
  if (a11 >= 0x11 && a49)
    MEMORY[0x1DF0ECFFC](a49, 0x1000C8077774924);
  if (a12 >= 0x11)
  {
    if (a46)
      MEMORY[0x1DF0ECFFC](a46, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::invoke(const void ***a1, char *a2, char *a3)
{
  const void **v5;
  size_t v6;
  _QWORD *v7;
  const void *v8;
  char *v9;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = (size_t)(*a1)[2];
  v12 = v6;
  v11[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v11[0] = v7;
    v8 = *v5;
  }
  else
  {
    v7 = v11;
    v8 = v5;
  }
  memcpy(v7, v8, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v11, *a2))
      goto LABEL_9;
    ++a2;
  }
  a2 = a3;
LABEL_9:
  if (v12 >= 0x11 && v11[0])
    MEMORY[0x1DF0ECFFC](v11[0], 0x1000C8077774924);
  if (a2 == a3)
    return a3;
  if (!*((_DWORD *)v5 + 6))
  {
    v9 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v9))
        break;
      ++v9;
    }
    while (v9 != a3);
  }
  return a2;
}

void PronSourceProxy::~PronSourceProxy(PronSourceProxy *this)
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t PronSourceProxy::is_word(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t PronSourceProxy::pronounce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t PronSourceProxy::pronounce_multi(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t PronSourceProxy::is_multiword_prefix(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void PronSourceProxy::set_fallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE9DA51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void PronSourceList::~PronSourceList(PronSourceList *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t PronSourceList::is_word(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
    return 0;
  v5 = v2 + 16;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 - 16) + 16))(*(_QWORD *)(v5 - 16), a2);
    if ((result & 1) != 0)
      break;
    v7 = v5 == v3;
    v5 += 16;
  }
  while (!v7);
  return result;
}

_QWORD *PronSourceList::pronounce@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  _QWORD *i;
  _QWORD *result;

  v5 = *(_QWORD **)(a1 + 8);
  for (i = *(_QWORD **)(a1 + 16); v5 != i; v5 += 2)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 24))(*v5, a2, a3);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(_QWORD *)(a4 + 8))
        return result;
      operator delete(*(void **)a4);
    }
    else if (*(_BYTE *)(a4 + 23))
    {
      return result;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, &byte_1DEBD87CE);
}

_QWORD *PronSourceList::pronounce_multi@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *i;
  _QWORD *result;

  v4 = *(_QWORD **)(a1 + 8);
  for (i = *(_QWORD **)(a1 + 16); v4 != i; v4 += 2)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 32))(*v4, a2);
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        return result;
      operator delete(*(void **)a3);
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      return result;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, &byte_1DEBD87CE);
}

uint64_t PronSourceList::is_multiword_prefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3 == v4)
    return 0;
  v7 = v3 + 16;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 - 16) + 40))(*(_QWORD *)(v7 - 16), a2, a3);
    if ((result & 1) != 0)
      break;
    v9 = v7 == v4;
    v7 += 16;
  }
  while (!v9);
  return result;
}

uint64_t PronSource::is_word()
{
  return 0;
}

_QWORD *PronSource::pronounce_multi@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, &byte_1DEBD87CE);
}

uint64_t PronSource::is_multiword_prefix()
{
  return 0;
}

void std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::__map_value_compare<std::type_index,std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>,std::less<std::type_index>,true>,std::allocator<std::__value_type<std::type_index,std::unique_ptr<Agglomerate::ItemHolderBase>>>>::destroy(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

void PronounceImpl::~PronounceImpl(PronounceImpl *this)
{
  *(_QWORD *)this = &off_1EA91D480;
  *((_QWORD *)this + 13) = &unk_1EA91D4D0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  FrontendModule::~FrontendModule((void **)this);
}

{
  *(_QWORD *)this = &off_1EA91D480;
  *((_QWORD *)this + 13) = &unk_1EA91D4D0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x1DF0ED014);
}

void PronounceImpl::generate_tokens(PronounceImpl *this)
{
  void **v2;
  void **v3;
  void **v4;
  char *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  char *v11;
  _DWORD *v12;
  int v13;
  int *v14;
  void **v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  _DWORD *v28;
  int v29;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  int v36;
  void **v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  void **v43;
  uint64_t v44;
  void **v45;
  char *v46;
  __int128 v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  int64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _DWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  void **v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::string __p;
  __int128 v93;
  void *v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  std::string v99;
  void **v100;

  if (*((_BYTE *)this + 8))
    return;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v88, *((_QWORD *)this + 2), 0);
  if ((_QWORD)v88)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
    v2 = (void **)v88;
    v4 = v2 + 1;
    if (v2 + 1 != v3)
    {
      v5 = (char *)v3[5];
      v6 = *((_DWORD *)v5 + 2);
      if (v6 == 1885892462)
      {
        if (*((_QWORD *)this + 20))
        {
          if (v4 != v15)
          {
            v16 = (char *)v15[5];
            *(_OWORD *)v94 = 0u;
            v95 = 0u;
            v93 = 0u;
            std::string::operator=((std::string *)&v94[1], (const std::string *)(v5 + 32));
            v96 = *((_OWORD *)v5 + 1);
            if (v16[31] < 0)
            {
              std::string::__init_copy_ctor_external(&v99, *((const std::string::value_type **)v16 + 1), *((_QWORD *)v16 + 2));
            }
            else
            {
              v17 = *(_OWORD *)(v16 + 8);
              v99.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 3);
              *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v17;
            }
            v22 = (_QWORD *)*((_QWORD *)this + 26);
            (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**((_QWORD **)this + 20)
                                                                                             + 24))(&__p, *((_QWORD *)this + 20), &v99, v16 + 32);
            (*(void (**)(__int128 *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v22 + 16))(&v97, *v22, &__p);
            std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v93, (uint64_t *)v97, *((uint64_t **)&v97 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3));
            v90 = (void **)&v97;
            std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v90);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            Agglomerate::set<TokenPronunciationItem>(v88, (uint64_t)&v93);
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v99.__r_.__value_.__l.__data_);
            TokenPronunciationItem::~TokenPronunciationItem((void **)&v93);
          }
        }
      }
      else if (v6 == 1952807028)
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        *(_QWORD *)&v87 = v2;
        *((_QWORD *)&v87 + 1) = *((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        if (v4 == v10)
          goto LABEL_73;
        v11 = (char *)v10[5];
        v12 = v11 + 8;
        v13 = v11[31];
        if ((v11[31] & 0x80000000) == 0)
        {
          v14 = (int *)(v11 + 8);
          switch(v11[31])
          {
            case 5:
              goto LABEL_60;
            case 7:
              goto LABEL_20;
            case 9:
              goto LABEL_69;
            case 12:
              goto LABEL_47;
            default:
              goto LABEL_73;
          }
        }
        v18 = *((_QWORD *)v11 + 2);
        if (v18 != 7)
          goto LABEL_43;
        v14 = *(int **)v12;
LABEL_20:
        v19 = *v14;
        v20 = *(int *)((char *)v14 + 3);
        if (v19 != 1414287957 || v20 != 1415071060)
        {
LABEL_24:
          if ((v13 & 0x80) == 0)
          {
            if (v13 != 5)
            {
LABEL_73:
              if (v4 == v43)
                v44 = 0;
              else
                v44 = (uint64_t)v43[5] + 8;
              if (v4 == v45)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
              }
              else
              {
                v46 = (char *)v45[5];
                if (v46[31] < 0)
                {
                  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v46 + 1), *((_QWORD *)v46 + 2));
                }
                else
                {
                  v47 = *(_OWORD *)(v46 + 8);
                  __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v46 + 3);
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
                }
              }
              *(_OWORD *)v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              std::string::operator=((std::string *)&v94[1], (const std::string *)(v5 + 32));
              v96 = *((_OWORD *)v5 + 1);
              v90 = v2;
              v91 = v7;
              if (v7)
              {
                p_shared_owners = (unint64_t *)&v7->__shared_owners_;
                do
                  v49 = __ldxr(p_shared_owners);
                while (__stxr(v49 + 1, p_shared_owners));
              }
              v50 = PronounceImpl::handle_multiword((uint64_t)this, (uint64_t *)&v90, (uint64_t)&v93);
              if (v7)
              {
                v51 = (unint64_t *)&v7->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
              if (!v50)
              {
                if (v44
                  && (*(char *)(v44 + 79) < 0 ? (v62 = *(_QWORD *)(v44 + 64)) : (v62 = *(unsigned __int8 *)(v44 + 79)),
                      v62))
                {
                  (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(***((_QWORD ***)this + 26) + 16))(&v99, **((_QWORD **)this + 26), v44 + 56);
                  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v93, (uint64_t *)v99.__r_.__value_.__l.__data_, (uint64_t *)v99.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3));
                  *(_QWORD *)&v97 = &v99;
                  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
                }
                else
                {
                  v89 = v87;
                  if (*((_QWORD *)&v87 + 1))
                  {
                    v63 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                    do
                      v64 = __ldxr(v63);
                    while (__stxr(v64 + 1, v63));
                  }
                  (*(void (**)(std::string *__return_ptr, _QWORD, void **, std::string *))(**((_QWORD **)this + 18) + 24))(&v99, *((_QWORD *)this + 18), &v94[1], &__p);
                  (*(void (**)(__int128 *__return_ptr, _QWORD, std::string *))(***((_QWORD ***)this + 26)
                                                                                        + 16))(&v97, **((_QWORD **)this + 26), &v99);
                  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v93, (uint64_t *)v97, *((uint64_t **)&v97 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3));
                  v100 = (void **)&v97;
                  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v100);
                  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v99.__r_.__value_.__l.__data_);
                  if (*((_QWORD *)&v87 + 1))
                  {
                    v65 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
                    }
                  }
                }
              }
              Agglomerate::set<TokenPronunciationItem>(v87, (uint64_t)&v93);
              if (SHIBYTE(v95) < 0)
                operator delete(v94[1]);
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
LABEL_94:
              std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v87);
              while (v50)
              {
                --v50;
                do
                {
                  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v93, *((_QWORD *)this + 2), 0);
                  std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v93);
                  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
                  v53 = v93;
                  if ((_QWORD *)(v53 + 8) == v54)
                    v55 = 0;
                  else
                    v55 = (_DWORD *)(v54[5] + 8);
                  v56 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
                  if (*((_QWORD *)&v93 + 1))
                  {
                    v57 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                }
                while (*v55 != 1952807028);
              }
              goto LABEL_106;
            }
LABEL_60:
            v35 = *v12;
            v36 = *((unsigned __int8 *)v12 + 4);
            if (v35 != 1279610963 || v36 != 76)
              goto LABEL_73;
            *(_OWORD *)v94 = 0u;
            v95 = 0u;
            v38 = &v94[1];
            v93 = 0u;
            std::string::operator=((std::string *)&v94[1], (const std::string *)(v5 + 32));
            if (SHIBYTE(v95) < 0)
            {
              v38 = (void **)v94[1];
              if (*((_BYTE *)v94[1] + v95 - 1) == 95)
              {
                v39 = v95 - 1;
                *(_QWORD *)&v95 = v95 - 1;
                goto LABEL_144;
              }
            }
            else if (*((_BYTE *)v94 + HIBYTE(v95) + 7) == 95)
            {
              v39 = HIBYTE(v95) - 1;
              HIBYTE(v95) = v39 & 0x7F;
LABEL_144:
              *((_BYTE *)v38 + v39) = 0;
            }
            v96 = *((_OWORD *)v5 + 1);
            v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
            v99.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
            if (v7)
            {
              v74 = (unint64_t *)&v7->__shared_owners_;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v50 = PronounceImpl::handle_multiword((uint64_t)this, (uint64_t *)&v99, (uint64_t)&v93);
            if (v7)
            {
              v76 = (unint64_t *)&v7->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            if (v50)
            {
              Agglomerate::set<TokenPronunciationItem>(v87, (uint64_t)&v93);
            }
            else
            {
              v97 = v87;
              if (*((_QWORD *)&v87 + 1))
              {
                v78 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                do
                  v79 = __ldxr(v78);
                while (__stxr(v79 + 1, v78));
              }
              PronounceImpl::handle_spelled_word((uint64_t)this, (uint64_t *)&v97);
              if (*((_QWORD *)&v87 + 1))
              {
                v80 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
                }
              }
            }
            if (SHIBYTE(v95) < 0)
              operator delete(v94[1]);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
            std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_94;
          }
          v18 = *((_QWORD *)v11 + 2);
LABEL_43:
          switch(v18)
          {
            case 5:
              v12 = *(_DWORD **)v12;
              goto LABEL_60;
            case 9:
              v12 = *(_DWORD **)v12;
LABEL_69:
              v40 = *(_DWORD **)v12;
              v41 = *((unsigned __int8 *)v12 + 8);
              if (v40 != (_DWORD *)0x554F5F4C4C455053 || v41 != 84)
                goto LABEL_73;
              v90 = v2;
              v91 = v7;
              if (v7)
              {
                v67 = (unint64_t *)&v7->__shared_owners_;
                do
                  v68 = __ldxr(v67);
                while (__stxr(v68 + 1, v67));
              }
              if (v4 == v69)
                v70 = 0;
              else
                v70 = (uint64_t)v69[5] + 8;
              *(_OWORD *)v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              std::string::operator=((std::string *)&v94[1], (const std::string *)(v70 + 24));
              if (SHIBYTE(v95) < 0)
              {
                v83 = (void **)v94[1];
                v82 = v95 - 1;
                *(_QWORD *)&v95 = v95 - 1;
              }
              else
              {
                v82 = HIBYTE(v95) - 1;
                HIBYTE(v95) = v82 & 0x7F;
                v83 = &v94[1];
              }
              *((_BYTE *)v83 + v82) = 0;
              v84 = (_QWORD *)*((_QWORD *)this + 26);
              v85 = *((_QWORD *)this + 22);
              std::string::basic_string[abi:ne180100]<0>(&__p, "NN");
              (*(void (**)(__int128 *__return_ptr, uint64_t, void **, std::string *))(*(_QWORD *)v85 + 24))(&v97, v85, &v94[1], &__p);
              (*(void (**)(std::string *__return_ptr, _QWORD, __int128 *))(*(_QWORD *)*v84 + 16))(&v99, *v84, &v97);
              std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v93, (uint64_t *)v99.__r_.__value_.__l.__data_, (uint64_t *)v99.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3));
              *(_QWORD *)&v89 = &v99;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
              if (v98 < 0)
                operator delete((void *)v97);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v96 = *(_OWORD *)(v70 + 8);
              Agglomerate::set<TokenPronunciationItem>((uint64_t)v90, (uint64_t)&v93);
              if (SHIBYTE(v95) < 0)
                operator delete(v94[1]);
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
              v7 = v91;
              if (v91)
              {
                v86 = (unint64_t *)&v91->__shared_owners_;
                do
                  v34 = __ldaxr(v86);
                while (__stlxr(v34 - 1, v86));
LABEL_179:
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
              break;
            case 12:
              v12 = *(_DWORD **)v12;
LABEL_47:
              v28 = *(_DWORD **)v12;
              v29 = v12[2];
              if (v28 != (_DWORD *)0x4C505F4C4C455053 || v29 != 1279349333)
                goto LABEL_73;
              *(_QWORD *)&v93 = v2;
              *((_QWORD *)&v93 + 1) = v7;
              if (v7)
              {
                v31 = (unint64_t *)&v7->__shared_owners_;
                do
                  v32 = __ldxr(v31);
                while (__stxr(v32 + 1, v31));
              }
              PronounceImpl::handle_spelled_word((uint64_t)this, (uint64_t *)&v93);
              if (v7)
              {
                v33 = (unint64_t *)&v7->__shared_owners_;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 - 1, v33));
                goto LABEL_179;
              }
              break;
            default:
              goto LABEL_73;
          }
LABEL_181:
          std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v87);
LABEL_106:
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          goto LABEL_34;
        }
        v26 = (uint64_t *)(v5 + 32);
        v27 = v5[55];
        if (v27 < 0)
        {
          if (*((_QWORD *)v5 + 5) != 2)
            goto LABEL_24;
          v26 = (uint64_t *)*v26;
        }
        else if (v27 != 2)
        {
          goto LABEL_24;
        }
        if (*((_BYTE *)v26 + 1) == 95)
        {
          *(_QWORD *)&v93 = v2;
          *((_QWORD *)&v93 + 1) = v7;
          if (v7)
          {
            v71 = (unint64_t *)&v7->__shared_owners_;
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          PronounceImpl::handle_spelled_word((uint64_t)this, (uint64_t *)&v93);
          if (!v7)
            goto LABEL_181;
          v73 = (unint64_t *)&v7->__shared_owners_;
          do
            v34 = __ldaxr(v73);
          while (__stlxr(v34 - 1, v73));
          goto LABEL_179;
        }
        goto LABEL_24;
      }
    }
    std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, &v88);
  }
  else
  {
    *((_BYTE *)this + 8) = 1;
  }
LABEL_34:
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1DE9DB3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void PronounceImpl::add_pls_dictionary(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  PronounceSqliteDict *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  xmlParserCtxt *v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  const char *v29;
  int v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  int (__cdecl *v53)(void *);
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  __int128 *user_data;
  xmlSAXHandler v62;
  __int128 v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 __p;
  uint64_t v69;
  __int128 v70;
  sqlite3_stmt *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;

  v5 = a1[20];
  v4 = (std::__shared_weak_count *)a1[21];
  v59 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = operator new(0xA0uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA9333F8;
  v10 = (PronounceSqliteDict *)(v8 + 3);
  v60 = v4;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    v8[10] = 0;
    v8[3] = &off_1EA91E9D8;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_QWORD *)&v70 = &off_1EA91CC70;
    v78 = v5;
    v79 = v4;
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  else
  {
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    v8[10] = 0;
    v8[3] = &off_1EA91E9D8;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_QWORD *)&v70 = &off_1EA91CC70;
    v78 = v5;
    v79 = 0;
  }
  v16 = sqlite3_open_v2("PLSDict", (sqlite3 **)&v70 + 1, 262278, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v70, v16, "open compiled PLS dictionary");
  v17 = sqlite3_exec(*((sqlite3 **)&v70 + 1), "CREATE TABLE Metadata (name TEXT, value TEXT);", 0, 0, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v70, v17, "create metadata table");
  v18 = sqlite3_exec(*((sqlite3 **)&v70 + 1), "INSERT INTO Metadata VALUES('version','2.0');", 0, 0, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v70, v18, "set version");
  v19 = sqlite3_exec(*((sqlite3 **)&v70 + 1), "CREATE TABLE Dictionary (spelling TEXT, pos TEXT, pronunciation TEXT);",
          0,
          0,
          0);
  BuildPLSDict::report_error((BuildPLSDict *)&v70, v19, "create dictionary");
  v20 = sqlite3_prepare_v2(*((sqlite3 **)&v70 + 1), "INSERT INTO Dictionary VALUES(?, ?, ?);", -1, &v71, 0);
  BuildPLSDict::report_error((BuildPLSDict *)&v70, v20, "compile entry creation query");
  if (v4)
  {
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  memset(&v62.isStandalone, 0, 40);
  v62.setDocumentLocator = 0;
  memset(&v62.endDocument, 0, 24);
  *(_OWORD *)&v62.fatalError = 0u;
  *(_OWORD *)&v62.initialized = 0u;
  v62.serror = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  __p = 0u;
  v62.attributeDecl = (attributeDeclSAXFunc)SSML_attribute_decl;
  v62.elementDecl = (elementDeclSAXFunc)SSML_element_decl;
  v62.cdataBlock = (cdataBlockSAXFunc)SSML_cdata_block;
  v62.externalSubset = (externalSubsetSAXFunc)SSML_subset;
  user_data = &v70;
  v62.internalSubset = (internalSubsetSAXFunc)SSML_subset;
  v62.entityDecl = (entityDeclSAXFunc)SSML_entity_decl;
  v62.notationDecl = (notationDeclSAXFunc)SSML_subset;
  v62.processingInstruction = (processingInstructionSAXFunc)SSML_processing_instruction;
  v62.comment = (commentSAXFunc)SSML_comment;
  v62.unparsedEntityDecl = (unparsedEntityDeclSAXFunc)SSML_unparsed_entity_decl;
  v62.startDocument = (startDocumentSAXFunc)SSML_start_document;
  v69 = 0;
  v62.startElementNs = (startElementNsSAX2Func)SSML_start_elementNs;
  v62.endElementNs = (endElementNsSAX2Func)SSML_end_elementNs;
  v62.characters = (charactersSAXFunc)SSML_characters;
  v62.ignorableWhitespace = (ignorableWhitespaceSAXFunc)SSML_characters;
  v62.reference = (referenceSAXFunc)SSML_reference;
  v62.endDocument = (endDocumentSAXFunc)SSML_end_document;
  v62.warning = (warningSAXFunc)SSML_warning;
  v62.error = (errorSAXFunc)SSML_error;
  v62.initialized = -554844497;
  v63 = xmmword_1DED16BC0;
  v23 = *((unsigned __int8 *)a2 + 23);
  if ((v23 & 0x80u) != 0)
    v23 = a2[1];
  v64 = -1;
  if (v23)
  {
    v24 = xmlCreatePushParserCtxt(&v62, &user_data, 0, 0, 0);
    xmlCtxtUseOptions(v24, 2051);
    v25 = *((unsigned __int8 *)a2 + 23);
    v26 = (v25 & 0x80u) != 0;
    if ((v25 & 0x80u) != 0)
      v25 = *((_DWORD *)a2 + 2);
    if (v25 >= 512)
      v27 = 512;
    else
      v27 = v25;
    if (v27)
    {
      v28 = 0;
      do
      {
        if (v26)
          v29 = (const char *)*a2;
        else
          v29 = (const char *)a2;
        xmlParseChunk(v24, &v29[v28], v27, 0);
        v28 += v27;
        v30 = *((unsigned __int8 *)a2 + 23);
        v26 = (v30 & 0x80u) != 0;
        if ((v30 & 0x80u) != 0)
          v30 = *((_DWORD *)a2 + 2);
        v31 = v30 - v28;
        if (v31 >= 512)
          v27 = 512;
        else
          v27 = v31;
      }
      while (v27);
    }
    xmlParseChunk(v24, 0, 0, 1);
    xmlFreeParserCtxt(v24);
  }
  PronounceSqliteDict::setup(v10, *((sqlite3 **)&v70 + 1));
  if (SHIBYTE(v69) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v67) < 0)
    operator delete(*((void **)&v66 + 1));
  if (SBYTE7(v66) < 0)
    operator delete((void *)v65);
  BuildPLSDict::~BuildPLSDict((BuildPLSDict *)&v70);
  if (v60)
  {
    v32 = (unint64_t *)&v60->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *(_QWORD *)&v58 = v10;
  *((_QWORD *)&v58 + 1) = v9;
  v34 = a1[16];
  v70 = v58;
  if (*((_QWORD *)&v58 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(_QWORD *)(v34 + 24);
  v38 = *(_OWORD **)(v34 + 16);
  if ((unint64_t)v38 >= v37)
  {
    v40 = *(_QWORD *)(v34 + 8);
    v41 = ((uint64_t)v38 - v40) >> 4;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v42 = v37 - v40;
    v43 = v42 >> 3;
    if (v42 >> 3 <= (unint64_t)(v41 + 1))
      v43 = v41 + 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    v62.hasExternalSubset = (hasExternalSubsetSAXFunc)(v34 + 24);
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v44);
    v47 = &v45[16 * v41];
    *(_OWORD *)v47 = v58;
    v49 = *(_QWORD **)(v34 + 8);
    v48 = *(_QWORD **)(v34 + 16);
    if (v48 == v49)
    {
      v52 = vdupq_n_s64((unint64_t)v48);
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 2;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *v48 = 0;
        v48[1] = 0;
      }
      while (v48 != v49);
      v52 = *(int64x2_t *)(v34 + 8);
    }
    v39 = v47 + 16;
    *(_QWORD *)(v34 + 8) = v50;
    *(_QWORD *)(v34 + 16) = v47 + 16;
    *(int64x2_t *)&v62.internalSubset = v52;
    v53 = *(int (__cdecl **)(void *))(v34 + 24);
    *(_QWORD *)(v34 + 24) = &v45[16 * v46];
    v62.hasInternalSubset = v53;
    user_data = (__int128 *)v52.i64[0];
    std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&user_data);
  }
  else
  {
    *v38 = v58;
    v39 = v38 + 1;
  }
  *(_QWORD *)(v34 + 16) = v39;
  if (*((_QWORD *)&v58 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v58 + 1) + 16))(*((_QWORD *)&v58 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v58 + 1));
    }
  }
  if (v59)
  {
    v56 = (unint64_t *)&v59->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1DE9DBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3 - 224);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'PronounceImpl::add_pls_dictionary(uint64_t a1, uint64_t *a2)
{
  PronounceImpl::add_pls_dictionary((_QWORD *)(a1 - 104), a2);
}

void `non-virtual thunk to'PronounceImpl::~PronounceImpl(PronounceImpl *this)
{
  void **v2;
  char *v3;

  *((_QWORD *)this - 13) = &off_1EA91D480;
  v2 = (void **)((char *)this - 104);
  *(_QWORD *)this = &unk_1EA91D4D0;
  v3 = (char *)this + 8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  FrontendModule::~FrontendModule(v2);
}

{
  void **v2;
  char *v3;

  *((_QWORD *)this - 13) = &off_1EA91D480;
  v2 = (void **)((char *)this - 104);
  *(_QWORD *)this = &unk_1EA91D4D0;
  v3 = (char *)this + 8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  FrontendModule::~FrontendModule(v2);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<PronouncePLSDict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9333F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronouncePLSDict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9333F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronouncePLSDict>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PronounceImpl::handle_spelled_word(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  void **v15;
  uint64_t *v16;
  __int128 v17;
  void *v18[2];
  __int128 v19;
  __int128 v20;
  void ***v21;

  v4 = *a2;
  if ((_QWORD *)(v4 + 8) == v5)
    v6 = 0;
  else
    v6 = v5[5] + 8;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  std::string::operator=((std::string *)&v18[1], (const std::string *)(v6 + 24));
  if (SHIBYTE(v19) < 0)
  {
    v7 = v19 - 1;
    if ((unint64_t)v19 > 1)
    {
      v8 = (void **)v18[1];
      if (*((_BYTE *)v18[1] + v19 - 1) == 95)
      {
        *(_QWORD *)&v19 = v19 - 1;
        goto LABEL_11;
      }
    }
  }
  else if (HIBYTE(v19) > 1u && *((_BYTE *)v18 + HIBYTE(v19) + 7) == 95)
  {
    v7 = HIBYTE(v19) - 1;
    --HIBYTE(v19);
    v8 = &v18[1];
LABEL_11:
    *((_BYTE *)v8 + v7) = 0;
  }
  v9 = *(_QWORD **)(a1 + 208);
  v10 = *(_QWORD *)(a1 + 192);
  std::string::basic_string[abi:ne180100]<0>(v11, "NN");
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v10 + 24))(__p, v10, &v18[1], v11);
  (*(void (**)(void ***__return_ptr, _QWORD, void **))(*(_QWORD *)*v9 + 16))(&v15, *v9, __p);
  std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)&v17, (uint64_t *)v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
  v21 = &v15;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  v20 = *(_OWORD *)(v6 + 8);
  Agglomerate::set<TokenPronunciationItem>(*a2, (uint64_t)&v17);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  v15 = (void **)&v17;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1DE9DC05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 56) = &a22;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 56));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  TokenPronunciationItem::~TokenPronunciationItem(&a25);
  _Unwind_Resume(a1);
}

int64_t PronounceImpl::handle_multiword(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  std::string *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  std::string::size_type v26;
  BOOL v27;
  std::string::size_type v28;
  char v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  std::vector<std::string>::pointer end;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  size_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  std::__split_buffer<std::string>::pointer v69;
  void *v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type v73;
  std::vector<std::string>::pointer v74;
  __int128 v75;
  std::string *v76;
  std::string *v77;
  unint64_t v78;
  std::string::size_type v79;
  std::string *v80;
  std::string::size_type v81;
  std::__split_buffer<std::string>::pointer end_high;
  std::string::size_type v83;
  std::vector<std::string>::pointer v84;
  __int128 v85;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v87;
  std::string *v88;
  std::string::size_type v89;
  size_t v90;
  char *first;
  std::string *v92;
  int v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  std::string *v96;
  void *v97;
  char v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  int64_t v123;
  uint64_t v124;
  int64_t v125;
  std::__split_buffer<std::string>::pointer v126;
  uint64_t v128;
  const std::string *p_p;
  std::string::pointer data;
  char *v131;
  std::string *v132;
  std::string *v133;
  std::string v134;
  std::string v135;
  std::string v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *__p;
  __int128 v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  uint64_t v145;
  std::string *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  std::vector<std::string> v151;
  std::__split_buffer<std::string> v152;
  std::string v153;
  _QWORD v154[5];

  v154[2] = *MEMORY[0x1E0C80C00];
  memset(&v151, 0, sizeof(v151));
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v6 = (std::string *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  memset(&v143, 0, sizeof(v143));
  memset(&v142, 0, sizeof(v142));
  size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v144.__r_.__value_.__l.__size_;
  memset(&v141, 0, sizeof(v141));
  __p = 0;
  v140 = 0uLL;
  if (size == 1)
  {
    v8 = &v144;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v143.__r_.__value_.__r.__words[0] = v8->__r_.__value_.__s.__data_[0] | 0x2E00;
    v143.__r_.__value_.__l.__size_ = 0;
    *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 7) = 0;
    *((_BYTE *)&v143.__r_.__value_.__s + 23) = 2;
  }
  v9 = *a2;
  if ((_QWORD *)(v9 + 8) != v10)
  {
    std::string::operator=(&v142, (const std::string *)(v10[5] + 32));
    v9 = *a2;
  }
  v132 = v6;
  if ((_QWORD *)(v9 + 8) != v11)
    std::string::operator=(&v141, (const std::string *)(v11[5] + 64));
  v12 = 0;
  v133 = (std::string *)a3;
  while (1)
  {
    v13 = v146;
    if ((unint64_t)v146 >= v147)
    {
      v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v145, (__int128 *)&v142);
    }
    else
    {
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v146, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
      }
      else
      {
        v14 = *(_OWORD *)&v142.__r_.__value_.__l.__data_;
        v146->__r_.__value_.__r.__words[2] = v142.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v15 = v13 + 1;
    }
    v146 = v15;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&v137, *(_QWORD *)(a1 + 16), v12);
    v16 = v137;
    if (!v137
    {
LABEL_28:
      v21 = 2;
      goto LABEL_29;
    }
    v18 = v17[5];
    v19 = *(_DWORD *)(v18 + 8);
    if (v19 == 1952807028)
    {
      memset(&v136, 0, sizeof(v136));
      if ((_QWORD *)(v16 + 8) == v25)
      {
        v28 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = v141.__r_.__value_.__l.__size_;
        if (v28)
          goto LABEL_53;
      }
      else
      {
        std::string::operator=(&v136, (const std::string *)(v25[5] + 64));
        v26 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v26 = v141.__r_.__value_.__l.__size_;
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          v27 = v136.__r_.__value_.__l.__size_ == 0;
        else
          v27 = HIBYTE(v136.__r_.__value_.__r.__words[2]) == 0;
        v29 = v27;
        if (v26)
        {
          if ((v29 & 1) == 0)
          {
            v21 = 1;
            goto LABEL_262;
          }
LABEL_53:
          if (v151.__begin_ == v151.__end_)
          {
            std::operator+<char>();
            v30 = std::string::append(&v134, "〉");
            v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            v135.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            v32 = std::string::append(&v135, "_");
            v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v33;
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            v34 = *(char *)(v18 + 55);
            if (v34 >= 0)
              v35 = (const std::string::value_type *)(v18 + 32);
            else
              v35 = *(const std::string::value_type **)(v18 + 32);
            if (v34 >= 0)
              v36 = *(unsigned __int8 *)(v18 + 55);
            else
              v36 = *(_QWORD *)(v18 + 40);
            v37 = std::string::append(&v153, v35, v36);
            v38 = v37->__r_.__value_.__r.__words[0];
            v154[0] = v37->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v154 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
            v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            end = v151.__end_;
            if (v151.__end_ >= v151.__end_cap_.__value_)
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v151.__end_ - (char *)v151.__begin_) >> 3);
              v42 = v41 + 1;
              if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3) > v42)
                v42 = 0x5555555555555556 * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3) >= 0x555555555555555)
                v43 = 0xAAAAAAAAAAAAAAALL;
              else
                v43 = v42;
              v152.__end_cap_.__value_ = (std::allocator<std::string> *)&v151.__end_cap_;
              if (!v43)
              {
                v77 = 0;
LABEL_189:
                v88 = v77 + v41;
                v152.__first_ = v77;
                v152.__begin_ = v88;
                v152.__end_cap_.__value_ = &v77[v43];
                v89 = v154[0];
                v88->__r_.__value_.__r.__words[0] = v38;
                v88->__r_.__value_.__l.__size_ = v89;
                *(std::string::size_type *)((char *)&v88->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v154 + 7);
                *((_BYTE *)&v88->__r_.__value_.__s + 23) = v39;
                v154[0] = 0;
                *(_QWORD *)((char *)v154 + 7) = 0;
                v152.__end_ = v88 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v151, &v152);
                v63 = v151.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&v152);
                goto LABEL_190;
              }
LABEL_156:
              v77 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v151.__end_cap_, v43);
              goto LABEL_189;
            }
            goto LABEL_105;
          }
          goto LABEL_234;
        }
        if ((v29 & 1) == 0)
        {
          if (v151.__begin_ == v151.__end_)
          {
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            else
              v52 = v144.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v134, v52 + 1);
            if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = &v134;
            else
              v53 = (std::string *)v134.__r_.__value_.__r.__words[0];
            if (v52)
            {
              if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = &v144;
              else
                v54 = (std::string *)v144.__r_.__value_.__r.__words[0];
              memmove(v53, v54, v52);
            }
            *(_WORD *)((char *)&v53->__r_.__value_.__l.__data_ + v52) = 95;
            v55 = std::string::append(&v134, "〈");
            v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v135.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v136;
            else
              v57 = (std::string *)v136.__r_.__value_.__r.__words[0];
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            else
              v58 = v136.__r_.__value_.__l.__size_;
            v59 = std::string::append(&v135, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v153.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            v61 = std::string::append(&v153, "〉");
            v38 = v61->__r_.__value_.__r.__words[0];
            v154[0] = v61->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v154 + 7) = *(std::string::size_type *)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
            v39 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            end = v151.__end_;
            if (v151.__end_ >= v151.__end_cap_.__value_)
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v151.__end_ - (char *)v151.__begin_) >> 3);
              v78 = v41 + 1;
              if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3) > v78)
                v78 = 0x5555555555555556 * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v151.__end_cap_.__value_ - (char *)v151.__begin_) >> 3) >= 0x555555555555555)
                v43 = 0xAAAAAAAAAAAAAAALL;
              else
                v43 = v78;
              v152.__end_cap_.__value_ = (std::allocator<std::string> *)&v151.__end_cap_;
              if (!v43)
              {
                v77 = 0;
                goto LABEL_189;
              }
              goto LABEL_156;
            }
LABEL_105:
            v62 = v154[0];
            end->__r_.__value_.__r.__words[0] = v38;
            end->__r_.__value_.__l.__size_ = v62;
            *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v154 + 7);
            *((_BYTE *)&end->__r_.__value_.__s + 23) = v39;
            v63 = end + 1;
LABEL_190:
            v151.__end_ = v63;
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v135.__r_.__value_.__l.__data_);
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v134.__r_.__value_.__l.__data_);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v90 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            else
              v90 = v144.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v152, v90 + 1);
            if (SHIBYTE(v152.__end_) >= 0)
              first = (char *)&v152;
            else
              first = (char *)v152.__first_;
            if (v90)
            {
              if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v92 = &v144;
              else
                v92 = (std::string *)v144.__r_.__value_.__r.__words[0];
              memmove(first, v92, v90);
            }
            *(_WORD *)&first[v90] = 95;
            v93 = *(char *)(v18 + 55);
            if (v93 >= 0)
              v94 = (const std::string::value_type *)(v18 + 32);
            else
              v94 = *(const std::string::value_type **)(v18 + 32);
            if (v93 >= 0)
              v95 = *(unsigned __int8 *)(v18 + 55);
            else
              v95 = *(_QWORD *)(v18 + 40);
            v96 = std::string::append((std::string *)&v152, v94, v95);
            v97 = (void *)v96->__r_.__value_.__r.__words[0];
            v153.__r_.__value_.__r.__words[0] = v96->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v96->__r_.__value_.__r.__words[1] + 7);
            v98 = HIBYTE(v96->__r_.__value_.__r.__words[2]);
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v140) < 0)
              operator delete(__p);
            __p = v97;
            *(_QWORD *)&v140 = v153.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)&v140 + 7) = *(std::string::size_type *)((char *)v153.__r_.__value_.__r.__words + 7);
            HIBYTE(v140) = v98;
            if (SHIBYTE(v152.__end_) < 0)
              operator delete(v152.__first_);
            v99 = *(_QWORD *)(v18 + 24) + *(_QWORD *)(v18 + 16);
            v100 = v149;
            if (v149 >= v150)
            {
              v102 = v148;
              v103 = (v149 - v148) >> 3;
              v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v105 = v150 - v148;
              if ((v150 - v148) >> 2 > v104)
                v104 = v105 >> 2;
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v104;
              if (v106)
              {
                v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v150, v106);
                v102 = v148;
                v100 = v149;
              }
              else
              {
                v107 = 0;
              }
              v108 = &v107[8 * v103];
              *(_QWORD *)v108 = v99;
              v101 = v108 + 8;
              while (v100 != v102)
              {
                v109 = *((_QWORD *)v100 - 1);
                v100 -= 8;
                *((_QWORD *)v108 - 1) = v109;
                v108 -= 8;
              }
              v148 = v108;
              v149 = v101;
              v150 = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v149 = v99;
              v101 = v100 + 8;
            }
            v149 = v101;
          }
LABEL_234:
          v21 = 2;
LABEL_262:
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          goto LABEL_29;
        }
      }
      v44 = v142.__r_.__value_.__l.__size_;
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      v45 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      v46 = v144.__r_.__value_.__l.__size_;
      if (v44)
      {
        if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v144.__r_.__value_.__r.__words[2])
           : v144.__r_.__value_.__l.__size_)
        {
          if (((*(uint64_t (**)(_QWORD, std::string *, std::string *))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), &v144, &v142) & 1) != 0)goto LABEL_124;
          v45 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
          v46 = v144.__r_.__value_.__l.__size_;
        }
      }
      if ((v45 & 0x80u) == 0)
        v46 = v45;
      if (v46)
      {
        v48 = *(_QWORD *)(a1 + 144);
        std::string::basic_string[abi:ne180100]<0>(&v152, "_");
        v49 = (*(uint64_t (**)(uint64_t, std::string *, std::__split_buffer<std::string> *))(*(_QWORD *)v48 + 40))(v48, &v144, &v152);
        v50 = v49;
        if (SHIBYTE(v152.__end_) < 0)
        {
          operator delete(v152.__first_);
          if ((v50 & 1) != 0)
            goto LABEL_84;
        }
        else if ((v49 & 1) != 0)
        {
LABEL_84:
          v51 = 1;
          goto LABEL_111;
        }
        LOBYTE(v45) = *((_BYTE *)&v144.__r_.__value_.__s + 23);
      }
      v51 = 0;
      if ((v45 & 0x80) != 0)
      {
        *v144.__r_.__value_.__l.__data_ = 0;
        v144.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v144.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = 0;
      }
LABEL_111:
      v64 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      v65 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = v143.__r_.__value_.__l.__size_;
      if (v64)
      {
        v66 = *(_QWORD *)(a1 + 144);
        std::string::basic_string[abi:ne180100]<0>(&v152, "_");
        v67 = (*(uint64_t (**)(uint64_t, std::string *, std::__split_buffer<std::string> *))(*(_QWORD *)v66 + 40))(v66, &v143, &v152);
        v68 = v67;
        if (SHIBYTE(v152.__end_) < 0)
        {
          operator delete(v152.__first_);
          if ((v68 & 1) != 0)
          {
LABEL_123:
            MEMORY[0x1DF0ECA80](&v142, "_");
LABEL_124:
            if (*(char *)(v18 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v152, *(const std::string::value_type **)(v18 + 32), *(_QWORD *)(v18 + 40));
            }
            else
            {
              *(_OWORD *)&v152.__first_ = *(_OWORD *)(v18 + 32);
              v152.__end_ = *(std::__split_buffer<std::string>::pointer *)(v18 + 48);
            }
            if (SHIBYTE(v152.__end_) < 0)
            {
              v70 = v152.__first_;
              if (v152.__first_->__r_.__value_.__s.__data_[(unint64_t)v152.__begin_ - 1] == 95)
              {
                v69 = --v152.__begin_;
                goto LABEL_132;
              }
            }
            else if (*((_BYTE *)&v151.__end_cap_.__value_ + HIBYTE(v152.__end_) + 7) == 95)
            {
              v69 = (std::__split_buffer<std::string>::pointer)(HIBYTE(v152.__end_) - 1);
              HIBYTE(v152.__end_) = (HIBYTE(v152.__end_) - 1) & 0x7F;
              v70 = &v152;
LABEL_132:
              v69->__r_.__value_.__s.__data_[(_QWORD)v70] = 0;
            }
            v71 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
            if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v71 = v144.__r_.__value_.__l.__size_;
            if (v71)
            {
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v142.__r_.__value_.__l.__data_, (const void **)&v152.__first_, (uint64_t)&v153);
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = &v153;
              else
                v72 = (std::string *)v153.__r_.__value_.__r.__words[0];
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v73 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
              else
                v73 = v153.__r_.__value_.__l.__size_;
              std::string::append(&v144, (const std::string::value_type *)v72, v73);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
              v74 = v151.__end_;
              if (v151.__end_ >= v151.__end_cap_.__value_)
              {
                v76 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v151, (__int128 *)&v144);
              }
              else
              {
                if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v151.__end_, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
                }
                else
                {
                  v75 = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
                  v151.__end_->__r_.__value_.__r.__words[2] = v144.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
                }
                v76 = v74 + 1;
              }
              v151.__end_ = v76;
            }
            v79 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v79 = v143.__r_.__value_.__l.__size_;
            if (v79)
            {
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v142.__r_.__value_.__l.__data_, (const void **)&v152.__first_, (uint64_t)&v153);
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v80 = &v153;
              else
                v80 = (std::string *)v153.__r_.__value_.__r.__words[0];
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v81 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
              else
                v81 = v153.__r_.__value_.__l.__size_;
              std::string::append(&v143, (const std::string::value_type *)v80, v81);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
              end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v152.__end_);
              if (SHIBYTE(v152.__end_) < 0)
                end_high = v152.__begin_;
              if (end_high == (std::__split_buffer<std::string>::pointer)1)
                std::string::push_back(&v143, 46);
              v83 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
              if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v83 = v144.__r_.__value_.__l.__size_;
              if (!v83)
              {
                v84 = v151.__end_;
                if (v151.__end_ >= v151.__end_cap_.__value_)
                {
                  v87 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v151, (__int128 *)&v143);
                }
                else
                {
                  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v151.__end_, v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v85 = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
                    v151.__end_->__r_.__value_.__r.__words[2] = v143.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
                  }
                  v87 = v84 + 1;
                }
                v151.__end_ = v87;
              }
            }
            else
            {
              begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v152.__end_);
              if (SHIBYTE(v152.__end_) < 0)
                begin = v152.__begin_;
              if (begin == (std::__split_buffer<std::string>::pointer)1)
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v144.__r_.__value_.__l.__data_, 46, (uint64_t)&v153);
                if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v143.__r_.__value_.__l.__data_);
                v143 = v153;
              }
            }
            v110 = *(_QWORD *)(v18 + 24) + *(_QWORD *)(v18 + 16);
            v111 = v149;
            if (v149 >= v150)
            {
              v113 = v148;
              v114 = (v149 - v148) >> 3;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v116 = v150 - v148;
              if ((v150 - v148) >> 2 > v115)
                v115 = v116 >> 2;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v150, v117);
                v113 = v148;
                v111 = v149;
              }
              else
              {
                v118 = 0;
              }
              v119 = &v118[8 * v114];
              *(_QWORD *)v119 = v110;
              v112 = v119 + 8;
              while (v111 != v113)
              {
                v120 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *((_QWORD *)v119 - 1) = v120;
                v119 -= 8;
              }
              v148 = v119;
              v149 = v112;
              v150 = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v149 = v110;
              v112 = v111 + 8;
            }
            v149 = v112;
            v121 = v137;
            if ((_QWORD *)(v121 + 8) == v122)
            {
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              {
                *v142.__r_.__value_.__l.__data_ = 0;
                v142.__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                v142.__r_.__value_.__s.__data_[0] = 0;
                *((_BYTE *)&v142.__r_.__value_.__s + 23) = 0;
              }
            }
            else
            {
              std::string::operator=(&v142, (const std::string *)(v122[5] + 32));
            }
            if (SHIBYTE(v152.__end_) < 0)
              operator delete(v152.__first_);
            v21 = 0;
            goto LABEL_262;
          }
        }
        else if ((v67 & 1) != 0)
        {
          goto LABEL_123;
        }
        v65 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      }
      if (v65 < 0)
      {
        *v143.__r_.__value_.__l.__data_ = 0;
        v143.__r_.__value_.__l.__size_ = 0;
        if ((v51 & 1) == 0)
          goto LABEL_234;
      }
      else
      {
        v143.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v143.__r_.__value_.__s + 23) = 0;
        if (!v51)
          goto LABEL_234;
      }
      goto LABEL_123;
    }
    if (v19 != 1853189228)
      goto LABEL_28;
    v20 = v146 - 1;
    if (SHIBYTE(v146[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20->__r_.__value_.__l.__data_);
    v146 = v20;
    v21 = 4;
LABEL_29:
    v22 = v138;
    if (!v138)
      break;
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (v24)
      break;
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v21)
      goto LABEL_34;
LABEL_35:
    ++v12;
  }
  if (!v21)
    goto LABEL_35;
LABEL_34:
  if (v21 == 4)
    goto LABEL_35;
  if (v21 == 2)
  {
    memset(&v152, 0, 24);
    v123 = v151.__end_ - v151.__begin_;
    if (v151.__end_ != v151.__begin_)
    {
      v124 = 24 * v123 - 24;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, char *))(**(_QWORD **)(a1 + 144) + 32))(&v136, *(_QWORD *)(a1 + 144), (char *)v151.__begin_ + v124);
        if (SHIBYTE(v152.__end_) < 0)
          operator delete(v152.__first_);
        v125 = v123 - 1;
        v152.__end_ = (std::__split_buffer<std::string>::pointer)v136.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v152.__first_ = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
        v126 = (std::__split_buffer<std::string>::pointer)HIBYTE(v136.__r_.__value_.__r.__words[2]);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v126 = v152.__begin_;
        if (v126)
          break;
        v124 -= 24;
        --v123;
        if (!v125)
        {
          if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_276;
          goto LABEL_299;
        }
      }
      v128 = HIBYTE(v140);
      if (v140 < 0)
        v128 = v140;
      if (v128)
        p_p = (const std::string *)&__p;
      else
        p_p = &v151.__begin_[v125];
      std::string::operator=(v132, p_p);
      (*(void (**)(std::string *__return_ptr, _QWORD, std::__split_buffer<std::string> *))(***(_QWORD ***)(a1 + 208) + 16))(&v136, **(_QWORD **)(a1 + 208), &v152);
      if (&v136 != v133)
        std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)v133, (uint64_t *)v136.__r_.__value_.__l.__data_, (uint64_t *)v136.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136.__r_.__value_.__l.__size_ - v136.__r_.__value_.__r.__words[0]) >> 3));
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
      std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
      data = v133[2].__r_.__value_.__l.__data_;
      v131 = &data[v133[2].__r_.__value_.__l.__size_];
      if ((unint64_t)v131 <= *(_QWORD *)&v148[8 * v125])
        v131 = *(char **)&v148[8 * v125];
      v133[2].__r_.__value_.__l.__size_ = v131 - data;
      if ((HIBYTE(v152.__end_) & 0x80) != 0)
LABEL_299:
        operator delete(v152.__first_);
    }
  }
  else
  {
    v123 = 0;
  }
LABEL_276:
  if (SHIBYTE(v140) < 0)
    operator delete(__p);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  v152.__first_ = (std::__split_buffer<std::string>::pointer)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  v152.__first_ = (std::__split_buffer<std::string>::pointer)&v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  return v123;
}

void sub_1DE9DD07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v63;
  void *v65;

  *(_QWORD *)(v63 - 208) = v62;
  if (*(char *)(v63 - 169) < 0)
    operator delete(*(void **)(v63 - 192));
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  if (a61 < 0)
    operator delete(a56);
  a56 = &a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  v65 = *(void **)(v63 - 240);
  if (v65)
  {
    *(_QWORD *)(v63 - 232) = v65;
    operator delete(v65);
  }
  *(_QWORD *)(v63 - 240) = v63 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 240));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PronounceSqliteDict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceSqliteDict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceSqliteDict>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Agglomerate::set<std::shared_ptr<PLSHandler>>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;

  v20 = &v19;
  v4 = v3[5];
  if (v4)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    *v13 = &off_1EA923148;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<PLSHandler>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923148;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<PLSHandler>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923148;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<PronounceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<PronounceAffix,std::allocator<PronounceAffix>,std::string &,std::shared_ptr<PronSourceList> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD v21[2];
  uint64_t *v22[3];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  std::string __p;
  uint64_t v29[12];
  char v30;
  uint64_t v31;

  v8 = operator new(0x80uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1EA932B70;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v8[9] = a4;
    v8[3] = &off_1EA91DAF8;
    *((_OWORD *)v8 + 2) = 0u;
    v12 = v8 + 4;
    v13 = v8 + 5;
    *((_OWORD *)v8 + 3) = 0u;
    v8[8] = a3;
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  else
  {
    v8[9] = 0;
    v8[3] = &off_1EA91DAF8;
    *((_OWORD *)v8 + 2) = 0u;
    v12 = v8 + 4;
    v13 = v8 + 5;
    *((_OWORD *)v8 + 3) = 0u;
    v8[8] = a3;
  }
  std::string::basic_string[abi:ne180100]<0>(v8 + 10, "〈");
  std::string::basic_string[abi:ne180100]<0>(v9 + 13, "〉");
  v16 = *(unsigned __int8 *)(a2 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v17 = FSTGrammar::create((const char *)a2, 1);
    v18 = *v12;
    *v12 = v17;
    if (!v18)
      goto LABEL_14;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  }
  v17 = *v12;
LABEL_14:
  if (v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "RULES");
    std::string::basic_string[abi:ne180100]<0>(v24, &byte_1DEBD87CE);
    (*(void (**)(std::string *__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v17 + 8))(&__p, v17, v26, v24);
    std::istringstream::basic_istringstream[abi:ne180100](v29, &__p, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](v22, v29);
    memset(v21, 0, sizeof(v21));
    std::copy[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::back_insert_iterator<std::vector<std::string>>>((uint64_t)v22, (uint64_t)v21, v13);
    if (v23 < 0)
      operator delete(v22[1]);
    v29[0] = *MEMORY[0x1E0DE4F58];
    *(uint64_t *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v29[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v30 < 0)
      operator delete((void *)v29[10]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1DF0ECF6C](&v31);
  }
  if (a4)
  {
    v19 = (unint64_t *)&a4->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = v9 + 3;
  a1[1] = v9;
}

void sub_1DE9DD768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  void **v59;
  void **v60;
  uint64_t *v61;
  std::__shared_weak_count **v62;
  uint64_t v64;
  void *v65;

  if (a21 < 0)
    operator delete(__p);
  a40 = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)&a40 + *(_QWORD *)(a40 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  a42 = MEMORY[0x1E0DE4FB8] + 16;
  if (a55 < 0)
    operator delete(a50);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&a58);
  if (*(char *)(v58 + 127) < 0)
    operator delete(*v60);
  if (*(char *)(v58 + 103) < 0)
    operator delete(*v59);
  if (*v62)
    std::__shared_weak_count::__release_weak(*v62);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v58);
  operator delete(v65);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PronounceSpell>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceSpell>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceSpell>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PronounceLetter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceLetter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceLetter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<NativePhonemePassThrough>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NativePhonemePassThrough>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NativePhonemePassThrough>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PronSourceProxy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronSourceProxy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronSourceProxy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PronounceNNMT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9327B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceNNMT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9327B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceNNMT>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PronounceAffix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronounceAffix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronounceAffix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<PronSourceList>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PronSourceList>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<PronSourceList>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PronouncePersistentModule::~PronouncePersistentModule(void **this)
{
  *this = &off_1EA920F30;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 47));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA920F30;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 47));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 45));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 43));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void UnitSegmentStream::~UnitSegmentStream(UnitSegmentStream *this)
{
  void **v2;

  *(_QWORD *)this = &off_1EA91F050;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  v2 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1EA91F050;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  v2 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void UnitSegmentStream::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  Unit *v27;
  Unit *v28;
  int v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  GryphonAnalysis *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  GryphonAnalysis *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  GryphonAnalysis *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  NSObject *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _QWORD *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168[2];
  char v169;
  float v170;
  _BYTE v171[24];
  _BYTE *v172;
  std::mutex v173;
  _BYTE block[24];
  _BYTE v175[30];
  _BYTE *v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 272);
      v7 = v6[1];
      v8 = *(_QWORD *)(v7 - 104);
      if (*(_QWORD *)(v7 - 112) != v8)
      {
        if (*(_DWORD *)(v8 - 180) + 1 != *(_DWORD *)(v4 + 4))
          goto LABEL_19;
        v9 = *(unsigned __int8 *)(v8 - 97);
        v10 = *(_QWORD *)(v8 - 112);
        if ((v9 & 0x80u) == 0)
          v11 = *(unsigned __int8 *)(v8 - 97);
        else
          v11 = *(_QWORD *)(v8 - 112);
        v12 = *(unsigned __int8 *)(v4 + 87);
        v13 = (char)v12;
        if ((v12 & 0x80u) != 0)
          v12 = *(_QWORD *)(v4 + 72);
        if (v11 != v12)
          goto LABEL_19;
        v14 = (const void **)(v8 - 120);
        if (v13 >= 0)
          v15 = (unsigned __int8 *)(v4 + 64);
        else
          v15 = *(unsigned __int8 **)(v4 + 64);
        if ((v9 & 0x80) != 0)
        {
          if (memcmp(*v14, v15, v10))
            goto LABEL_19;
        }
        else if ((_DWORD)v9)
        {
          while (*(unsigned __int8 *)v14 == *v15)
          {
            v14 = (const void **)((char *)v14 + 1);
            ++v15;
            if (!--v9)
              goto LABEL_32;
          }
LABEL_19:
          v16 = v6[2];
          if (v7 >= v16)
          {
            v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *v6) >> 3);
            v19 = v18 + 1;
            if (v18 + 1 > 0x222222222222222)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v16 - *v6) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x111111111111111)
              v21 = 0x222222222222222;
            else
              v21 = v19;
            *(_QWORD *)&v175[8] = v6 + 2;
            if (v21)
              v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v21);
            else
              v22 = 0;
            v23 = v21 + 120 * v18;
            *(_QWORD *)block = v21;
            *(_QWORD *)&block[8] = v23;
            *(_QWORD *)v175 = v21 + 120 * v22;
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_QWORD *)(v23 + 104) = 0;
            *(_QWORD *)(v23 + 112) = 0;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_WORD *)v23 = 257;
            *(_OWORD *)(v23 + 24) = 0u;
            *(_OWORD *)(v23 + 8) = 0u;
            *(_QWORD *)(v23 + 72) = 0;
            *(_OWORD *)(v23 + 56) = 0u;
            *(_OWORD *)(v23 + 40) = 0u;
            *(_QWORD *)(v23 + 96) = 0;
            *(_WORD *)(v23 + 112) = 0;
            *(_QWORD *)&block[16] = v23 + 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v6, block);
            v17 = v6[1];
            std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            *(_OWORD *)v7 = 0u;
            *(_OWORD *)(v7 + 16) = 0u;
            *(_OWORD *)(v7 + 32) = 0u;
            *(_OWORD *)(v7 + 48) = 0u;
            *(_OWORD *)(v7 + 80) = 0u;
            *(_OWORD *)(v7 + 96) = 0u;
            *(_QWORD *)(v7 + 104) = 0;
            *(_QWORD *)(v7 + 112) = 0;
            *(_OWORD *)(v7 + 64) = 0u;
            *(_WORD *)v7 = 257;
            *(_OWORD *)(v7 + 8) = 0u;
            *(_OWORD *)(v7 + 24) = 0u;
            *(_OWORD *)(v7 + 40) = 0u;
            *(_OWORD *)(v7 + 56) = 0u;
            *(_QWORD *)(v7 + 72) = 0;
            *(_QWORD *)(v7 + 96) = 0;
            *(_WORD *)(v7 + 112) = 0;
            v17 = v7 + 120;
            v6[1] = v17;
          }
          v6[1] = v17;
          ++*(_DWORD *)(a1 + 348);
        }
      }
LABEL_32:
      v24 = *(_DWORD **)(v4 + 160);
      v25 = *(_DWORD **)(v4 + 168);
      while (v24 != v25)
      {
        if (*v24 == 1)
          *(_DWORD *)(a1 + 352) = 0;
        v24 += 14;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8);
      v27 = *(Unit **)(v26 - 112);
      v28 = *(Unit **)(v26 - 104);
      if (v27 == v28)
      {
        if (*(_DWORD *)(a1 + 348))
          v29 = 15;
        else
          v29 = 0;
        *(float *)(v26 - 36) = (float)v29;
        *(_DWORD *)(v26 - 32) = 1092616192;
      }
      v30 = *(_QWORD *)(v26 - 96);
      if ((unint64_t)v28 >= v30)
      {
        v32 = 0xD37A6F4DE9BD37A7 * ((v28 - v27) >> 3);
        if (v32 + 1 > 0x1642C8590B21642)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v33 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v30 - (_QWORD)v27) >> 3);
        v34 = 2 * v33;
        if (2 * v33 <= v32 + 1)
          v34 = v32 + 1;
        if (v33 >= 0xB21642C8590B21)
          v35 = 0x1642C8590B21642;
        else
          v35 = v34;
        *(_QWORD *)&v175[8] = v26 - 96;
        if (v35)
          v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Unit>>(v35);
        else
          v36 = 0;
        *(_QWORD *)block = v35;
        *(_QWORD *)&block[8] = v35 + 184 * v32;
        *(_QWORD *)&block[16] = *(_QWORD *)&block[8];
        *(_QWORD *)v175 = v35 + 184 * v36;
        Unit::Unit(*(Unit **)&block[8], (const Unit *)v4);
        *(_QWORD *)&block[16] += 184;
        std::vector<Unit>::__swap_out_circular_buffer((uint64_t *)(v26 - 112), block);
        v31 = *(char **)(v26 - 104);
        std::__split_buffer<Unit>::~__split_buffer((uint64_t)block);
      }
      else
      {
        Unit::Unit(v28, (const Unit *)v4);
        v31 = (char *)v28 + 184;
        *(_QWORD *)(v26 - 104) = v31;
      }
      *(_QWORD *)(v26 - 104) = v31;
      v4 += 184;
    }
    while (v4 != v5);
  }
  v37 = *(uint64_t **)(a1 + 272);
  if (*v37 != v37[1])
  {
    v38 = *(std::__shared_weak_count **)(a1 + 320);
    v166 = *(_QWORD *)(a1 + 312);
    v167 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
    }
    v42 = *(_QWORD *)(a1 + 328);
    v41 = *(std::__shared_weak_count **)(a1 + 336);
    if (v41)
    {
      v43 = (unint64_t *)&v41->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = (double)*(int *)(a1 + 344) / 1000.0;
    v170 = v45;
    v173.__m_.__sig = 850045863;
    memset(v173.__m_.__opaque, 0, sizeof(v173.__m_.__opaque));
    v169 = 0;
    v47 = *v37;
    v46 = v37[1];
    v48 = operator new(0x30uLL);
    v49 = 0xEEEEEEEEEEEEEEEFLL * ((v46 - v47) >> 3);
    *v48 = &off_1EA92E2D8;
    v48[1] = a1 + 288;
    v48[2] = v37;
    v48[3] = &v166;
    v48[4] = &v169;
    v48[5] = &v170;
    v50 = vcvtps_s32_f32((float)v49 * 0.25);
    v172 = v48;
    if ((int)v49 < v50)
      v50 = -286331153 * ((v46 - v47) >> 3);
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block[8] = 1174405120;
    *(_QWORD *)&block[16] = ___Z19multithread_forloopmmNSt3__18functionIFvmmEEE_block_invoke;
    *(_QWORD *)v175 = &__block_descriptor_tmp_1;
    *(_QWORD *)&v175[8] = v50;
    *(_QWORD *)&v175[16] = 0xEEEEEEEEEEEEEEEFLL * ((v46 - v47) >> 3);
    std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::__clone((uint64_t)v48);
    v176 = v51;
    v52 = 4;
    dispatch_apply(4uLL, 0, block);
    v53 = v176;
    if (v176 == &v175[24])
    {
      v53 = &v175[24];
    }
    else
    {
      if (!v176)
        goto LABEL_69;
      v52 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v52))();
LABEL_69:
    v54 = v172;
    if (v172 == v171)
    {
      v55 = 4;
      v54 = v171;
    }
    else
    {
      if (!v172)
        goto LABEL_74;
      v55 = 5;
    }
    (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_74:
    if (v169)
      goto LABEL_80;
    SharedObjectPool::get_if<OverlappingPrompt>(block, v42);
    v57 = *(_QWORD *)block;
    v56 = *(std::__shared_weak_count **)&block[8];
    if (!*(_QWORD *)&block[8])
      goto LABEL_79;
    v58 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      if (v57)
      {
LABEL_80:
        v60 = *v37;
        v61 = v37[1];
        if (*v37 != v61)
        {
          v62 = (unint64_t *)&v41->__shared_owners_;
          do
          {
            v63 = *(_QWORD *)(v60 + 8);
            if ((*(_DWORD *)(v63 + 4) & 0x80000000) != 0)
            {
              v66 = *(_QWORD *)(v63 + 160);
              v67 = *(_QWORD *)(v63 + 168);
              while (v66 != v67)
              {
                if (*(_DWORD *)v66 == 9 && *(_BYTE *)(v66 + 48) != 0)
                {
                  SharedObjectPool::get<OverlappingPrompt>(block, v42);
                  OverlappingPrompt::store_overlap(*(_QWORD **)block, *(char **)(v60 + 56), *(char **)(v60 + 64));
                  *(_QWORD *)(v60 + 64) = *(_QWORD *)(v60 + 56);
                  v69 = *(std::__shared_weak_count **)&block[8];
                  if (*(_QWORD *)&block[8])
                  {
                    v70 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                }
                v66 += 56;
              }
            }
            if (*(_QWORD *)(v60 + 56) != *(_QWORD *)(v60 + 64))
            {
              v168[0] = v42;
              v168[1] = (uint64_t)v41;
              if (v41)
              {
                do
                  v64 = __ldxr(v62);
                while (__stxr(v64 + 1, v62));
              }
              OverlappingPrompt::overlap_if_available(v168, v60 + 56);
              if (v41)
              {
                do
                  v65 = __ldaxr(v62);
                while (__stlxr(v65 - 1, v62));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
            }
            v60 += 120;
          }
          while (v60 != v61);
        }
      }
    }
    else
    {
LABEL_79:
      if (v57)
        goto LABEL_80;
    }
    std::mutex::~mutex(&v173);
    if (v41)
    {
      v73 = (unint64_t *)&v41->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v75 = (uint64_t **)(a1 + 272);
    v76 = v167;
    if (v167)
    {
      v77 = (unint64_t *)&v167->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if ((*v75)[1] != **v75)
    {
      v79 = 0;
      do
      {
        v80 = (GryphonAnalysis *)GryphonAnalysis::Storage(v72);
        if (*(_BYTE *)v80)
        {
          v81 = **v75;
          if (0xEEEEEEEEEEEEEEEFLL * (((*v75)[1] - v81) >> 3) <= v79)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v82 = (_QWORD *)GryphonAnalysis::Storage(v80);
          v83 = v82;
          v84 = v81 + 120 * v79;
          v86 = v82[55];
          v85 = v82[56];
          if (v86 >= v85)
          {
            v89 = v82[54];
            v90 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v86 - v89) >> 3);
            v91 = v90 + 1;
            if (v90 + 1 > 0x222222222222222)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v92 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v85 - v89) >> 3);
            if (2 * v92 > v91)
              v91 = 2 * v92;
            if (v92 >= 0x111111111111111)
              v93 = 0x222222222222222;
            else
              v93 = v91;
            *(_QWORD *)&v175[8] = v83 + 56;
            if (v93)
              v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v93);
            else
              v94 = 0;
            *(_QWORD *)block = v93;
            *(_QWORD *)&block[8] = v93 + 120 * v90;
            *(_QWORD *)&block[16] = *(_QWORD *)&block[8];
            *(_QWORD *)v175 = v93 + 120 * v94;
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(*(uint64_t *)&block[8], v84);
            *(_QWORD *)&block[16] += 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v83 + 54, block);
            v88 = v83[55];
            v87 = (GryphonAnalysis *)std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(v82[55], v84);
            v88 = v86 + 120;
            v83[55] = v88;
          }
          v83[55] = v88;
          v95 = (_QWORD *)GryphonAnalysis::Storage(v87);
          v96 = v95;
          v98 = v95[58];
          v97 = v95[59];
          if (v98 >= v97)
          {
            v100 = v95[57];
            v101 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v98 - v100) >> 3);
            v102 = v101 + 1;
            if (v101 + 1 > 0x222222222222222)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v103 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v97 - v100) >> 3);
            if (2 * v103 > v102)
              v102 = 2 * v103;
            if (v103 >= 0x111111111111111)
              v104 = 0x222222222222222;
            else
              v104 = v102;
            *(_QWORD *)&v175[8] = v96 + 59;
            if (v104)
              v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v104);
            else
              v105 = 0;
            *(_QWORD *)block = v104;
            *(_QWORD *)&block[8] = v104 + 120 * v101;
            *(_QWORD *)&block[16] = *(_QWORD *)&block[8];
            *(_QWORD *)v175 = v104 + 120 * v105;
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(*(uint64_t *)&block[8], v84);
            *(_QWORD *)&block[16] += 120;
            std::vector<AudioSegmentation>::__swap_out_circular_buffer(v96 + 57, block);
            v99 = v96[58];
            std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
          }
          else
          {
            std::allocator<AudioSegmentation>::construct[abi:ne180100]<AudioSegmentation,AudioSegmentation const&>(v95[58], v84);
            v99 = v98 + 120;
            v96[58] = v99;
          }
          v96[58] = v99;
        }
        v106 = (double)*(int *)(a1 + 344) / 1000.0;
        v107 = **(_QWORD **)(a1 + 272);
        v108 = *(_QWORD *)(v107 + 120 * v79 + 8);
        if ((*(_DWORD *)(v108 + 4) & 0x80000000) != 0)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v120 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v122 = **v75 + 120 * v79;
            v123 = *(_QWORD *)(v122 + 8);
            v124 = -*(_DWORD *)(v123 + 4);
            LODWORD(v122) = -*(_DWORD *)(*(_QWORD *)(v122 + 16) - 180);
            v125 = (uint64_t)(float)(*(float *)(v123 + 148) * v106);
            *(_DWORD *)block = 134219008;
            *(_QWORD *)&block[4] = v79;
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = v124;
            *(_WORD *)&block[18] = 1024;
            *(_DWORD *)&block[20] = v122;
            *(_WORD *)v175 = 2048;
            *(_QWORD *)&v175[2] = (uint64_t)(float)(v106 * (float)v124);
            *(_WORD *)&v175[10] = 2048;
            *(_QWORD *)&v175[12] = v125;
            _os_log_impl(&dword_1DE3F6000, v120, OS_LOG_TYPE_DEBUG, "Segment %3ld: %7d-%-7d %6ld @ %-8ld sil", block, 0x2Cu);
          }
          v126 = **v75 + 120 * v79;
          v72 = (GryphonAnalysis *)Diagnostics::log(7, "Segment %3ld: %7d-%-7d %6ld @ %-8ld sil", v121, v79, -*(_DWORD *)(*(_QWORD *)(v126 + 8) + 4), -*(_DWORD *)(*(_QWORD *)(v126 + 16) - 180), (uint64_t)(float)(v106 * (float)-*(_DWORD *)(*(_QWORD *)(v126 + 8) + 4)), (uint64_t)(float)(*(float *)(*(_QWORD *)(v126 + 8) + 148) * v106), v165);
        }
        else
        {
          v109 = *(_QWORD *)(v107 + 120 * v79 + 16);
          v110 = 0.0;
          while (v108 != v109)
          {
            v110 = v110 + *(float *)(v108 + 152);
            v108 += 184;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v111 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v113 = **v75 + 120 * v79;
            v114 = *(_QWORD *)(v113 + 8);
            v115 = (_QWORD *)(v114 + 64);
            if (*(char *)(v114 + 87) < 0)
              v115 = (_QWORD *)*v115;
            v116 = *(_DWORD *)(v114 + 4);
            v117 = *(_DWORD *)(*(_QWORD *)(v113 + 16) - 180);
            v118 = (uint64_t)(float)(v110 * v106);
            v119 = (uint64_t)(float)(*(float *)(v114 + 148) * v106);
            *(_DWORD *)block = 134219266;
            *(_QWORD *)&block[4] = v79;
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = v116;
            *(_WORD *)&block[18] = 1024;
            *(_DWORD *)&block[20] = v117;
            *(_WORD *)v175 = 2048;
            *(_QWORD *)&v175[2] = v118;
            *(_WORD *)&v175[10] = 2048;
            *(_QWORD *)&v175[12] = v119;
            *(_WORD *)&v175[20] = 2080;
            *(_QWORD *)&v175[22] = v115;
            _os_log_impl(&dword_1DE3F6000, v111, OS_LOG_TYPE_DEBUG, "Segment %3ld: %7d-%-7d %6ld @ %-8ld %s", block, 0x36u);
          }
          else
          {
            v118 = (uint64_t)(float)(v110 * v106);
          }
          v127 = **v75 + 120 * v79;
          v128 = *(_QWORD *)(v127 + 8);
          v129 = (_QWORD *)(v128 + 64);
          if (*(char *)(v128 + 87) < 0)
            v129 = (_QWORD *)*v129;
          v72 = (GryphonAnalysis *)Diagnostics::log(7, "Segment %3ld: %7d-%-7d %6ld @ %-8ld %s", v112, v79, *(unsigned int *)(v128 + 4), *(unsigned int *)(*(_QWORD *)(v127 + 16) - 180), v118, (uint64_t)(float)(*(float *)(v128 + 148) * v106), v129);
        }
        ++v79;
      }
      while (v79 < 0xEEEEEEEEEEEEEEEFLL * (((*v75)[1] - **v75) >> 3));
    }
    v130 = (std::__shared_weak_count *)operator new(0x30uLL);
    *(_OWORD *)&v130->__shared_owners_ = 0u;
    v131 = (unint64_t *)&v130->__shared_owners_;
    *(_OWORD *)&v130[1].__shared_owners_ = 0u;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)&v130[1].__shared_owners_;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
    *(_QWORD *)block = &v173;
    v133 = v132[5];
    if (v133)
    {
      v135 = *(_QWORD *)(a1 + 272);
      v134 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)block = &off_1EA923548;
      *(_QWORD *)&block[8] = v135;
      *(_QWORD *)&block[16] = v134;
      if (v134)
      {
        v136 = (unint64_t *)(v134 + 8);
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v133 + 8, (__int128 *)&block[8]);
      *(_QWORD *)block = &off_1EA923548;
      v138 = *(std::__shared_weak_count **)&block[16];
      if (*(_QWORD *)&block[16])
      {
        v139 = (unint64_t *)(*(_QWORD *)&block[16] + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
    }
    else
    {
      v141 = (_QWORD *)operator new();
      v143 = *(_QWORD *)(a1 + 272);
      v142 = *(_QWORD *)(a1 + 280);
      *v141 = &off_1EA923548;
      v141[1] = v143;
      v141[2] = v142;
      if (v142)
      {
        v144 = (unint64_t *)(v142 + 8);
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      v146 = v132[5];
      v132[5] = (uint64_t)v141;
      if (v146)
        (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
    }
    v173.__m_.__sig = (uint64_t)&v130[1];
    *(_QWORD *)v173.__m_.__opaque = v130;
    do
      v147 = __ldxr(v131);
    while (__stxr(v147 + 1, v131));
    (*(void (**)(uint64_t, std::mutex *))(*(_QWORD *)a1 + 72))(a1, &v173);
    v148 = *(std::__shared_weak_count **)v173.__m_.__opaque;
    if (*(_QWORD *)v173.__m_.__opaque)
    {
      v149 = (unint64_t *)(*(_QWORD *)v173.__m_.__opaque + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    *(_DWORD *)(a1 + 348) = 0;
    ++*(_DWORD *)(a1 + 352);
    v151 = operator new(0x30uLL);
    v151[1] = 0;
    v151[2] = 0;
    *v151 = &off_1EA9365A0;
    v151[4] = 0;
    v151[5] = 0;
    v151[3] = 0;
    *(_QWORD *)block = v151 + 3;
    *(_QWORD *)&block[8] = v151;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 272, (__int128 *)block);
    v152 = *(std::__shared_weak_count **)&block[8];
    if (*(_QWORD *)&block[8])
    {
      v153 = (unint64_t *)(*(_QWORD *)&block[8] + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = *v75;
    v156 = (*v75)[1];
    v157 = (unint64_t *)(*v75 + 2);
    if (v156 >= *v157)
    {
      v159 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v156 - *v155) >> 3);
      v160 = v159 + 1;
      if (v159 + 1 > 0x222222222222222)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v157 - *v155) >> 3) > v160)
        v160 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v157 - *v155) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*v157 - *v155) >> 3) >= 0x111111111111111)
        v161 = 0x222222222222222;
      else
        v161 = v160;
      *(_QWORD *)&v175[8] = v157;
      if (v161)
        v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(v161);
      else
        v162 = 0;
      v163 = v161 + 120 * v159;
      *(_QWORD *)block = v161;
      *(_QWORD *)&block[8] = v163;
      *(_QWORD *)v175 = v161 + 120 * v162;
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)(v163 + 16) = 0u;
      *(_OWORD *)(v163 + 32) = 0u;
      *(_OWORD *)(v163 + 48) = 0u;
      *(_OWORD *)(v163 + 80) = 0u;
      *(_OWORD *)(v163 + 96) = 0u;
      *(_QWORD *)(v163 + 104) = 0;
      *(_QWORD *)(v163 + 112) = 0;
      *(_OWORD *)(v163 + 64) = 0u;
      *(_WORD *)v163 = 257;
      *(_OWORD *)(v163 + 24) = 0u;
      *(_OWORD *)(v163 + 8) = 0u;
      *(_QWORD *)(v163 + 72) = 0;
      *(_OWORD *)(v163 + 56) = 0u;
      *(_OWORD *)(v163 + 40) = 0u;
      *(_QWORD *)(v163 + 96) = 0;
      *(_WORD *)(v163 + 112) = 0;
      *(_QWORD *)&block[16] = v163 + 120;
      std::vector<AudioSegmentation>::__swap_out_circular_buffer(v155, block);
      v158 = v155[1];
      std::__split_buffer<AudioSegmentation>::~__split_buffer((uint64_t)block);
    }
    else
    {
      *(_OWORD *)v156 = 0u;
      *(_OWORD *)(v156 + 16) = 0u;
      *(_OWORD *)(v156 + 32) = 0u;
      *(_OWORD *)(v156 + 48) = 0u;
      *(_OWORD *)(v156 + 80) = 0u;
      *(_OWORD *)(v156 + 96) = 0u;
      *(_QWORD *)(v156 + 104) = 0;
      *(_QWORD *)(v156 + 112) = 0;
      *(_OWORD *)(v156 + 64) = 0u;
      *(_WORD *)v156 = 257;
      *(_OWORD *)(v156 + 8) = 0u;
      *(_OWORD *)(v156 + 24) = 0u;
      *(_OWORD *)(v156 + 40) = 0u;
      *(_OWORD *)(v156 + 56) = 0u;
      *(_QWORD *)(v156 + 72) = 0;
      *(_QWORD *)(v156 + 96) = 0;
      *(_WORD *)(v156 + 112) = 0;
      v158 = v156 + 120;
      v155[1] = v156 + 120;
    }
    v155[1] = v158;
    do
      v164 = __ldaxr(v131);
    while (__stlxr(v164 - 1, v131));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
}

void sub_1DE9DEC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  std::mutex::~mutex((std::mutex *)&a29);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (a21)
  {
    v33 = (unint64_t *)&a21->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioSegmentation>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a1);
}

uint64_t *std::vector<AudioSegmentation>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_WORD *)(v2 + v5 - 120);
      *(_QWORD *)(v6 - 104) = 0;
      *(_QWORD *)(v6 - 96) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_WORD *)(v6 - 120) = v8;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v6 - 96) = *(_QWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v6 - 88) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_QWORD *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(_QWORD *)(v6 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v6 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 40);
      v10 = *(_OWORD *)(v2 + v5 - 24);
      v11 = *(_WORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 48) = 0;
      *(_WORD *)(v6 - 8) = v11;
      *(_OWORD *)(v6 - 24) = v10;
      *(_OWORD *)(v6 - 40) = v9;
      v5 -= 120;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AudioSegmentation>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::allocator<AudioSegmentation>::destroy[abi:ne180100](i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SharedObjectPool::get_if<OverlappingPrompt>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    a1[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9DF060(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void SharedObjectPool::get<OverlappingPrompt>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void **v26;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    goto LABEL_20;
  }
  v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933698;
  v6[1].std::__shared_count = 0u;
  *(_OWORD *)&v6[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[2].__shared_owners_ = 0u;
  v24 = v6;
  v26 = &v25;
  v9 = v8[5];
  if (!v9)
  {
    v15 = (_QWORD *)operator new();
    *v15 = &off_1EA923388;
    v15[1] = v6 + 1;
    v15[2] = v6;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v8[5];
    v8[5] = (uint64_t)v15;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    goto LABEL_16;
  }
  *(_QWORD *)&v10 = v6 + 1;
  *((_QWORD *)&v10 + 1) = v6;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = *(std::__shared_weak_count **)(v9 + 16);
  *(_OWORD *)(v9 + 8) = v10;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v6 = v24;
  if (v24)
  {
LABEL_16:
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_20:
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v20 + 8);
  a1[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9DF25C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9365A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9365A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<AudioSegmentation>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<AudioSegmentation>::destroy[abi:ne180100](v3);
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<std::vector<AudioSegmentation>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923548;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<std::vector<AudioSegmentation>>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923548;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<OverlappingPrompt>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923388;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<OverlappingPrompt>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923388;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1EA92E2D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1EA92E2D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned __int16 v43;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int16 v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int16 v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned __int16 v78;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  __int16 *v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  int v87;
  unint64_t v88;
  int v89;
  __int16 *v90;
  __int16 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  float v97;
  int v98;
  int *v99;
  unint64_t v100;
  unint64_t v101;
  int *v102;
  float *v103;
  float v104;
  unint64_t *v105;
  unint64_t v106;
  void *exception;
  unsigned __int16 v108;
  uint64_t v109;
  unsigned __int16 v110;
  int v111;
  int v112;
  std::__shared_weak_count *v113;
  unsigned int *v114;
  uint64_t *v116;
  uint64_t v117;
  void *__p;
  unsigned __int16 *v119;
  void *v120;
  __int16 *v121;
  uint64_t v122;
  unsigned __int8 md[8];
  unsigned __int16 *v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (uint64_t *)(**(_QWORD **)(a1 + 8) + 16 * *a3);
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = **(_QWORD **)(a1 + 16);
  v10 = v9 + 120 * v3;
  v11 = *(_QWORD *)(v10 + 8);
  v116 = (uint64_t *)(v10 + 8);
  v12 = *(unsigned int *)(v11 + 4);
  v117 = v3;
  if ((v12 & 0x80000000) == 0 || (v51 = *(_QWORD *)(v11 + 160), v50 = *(_QWORD *)(v11 + 168), v51 == v50))
  {
LABEL_5:
    v13 = v9 + 120 * v3;
    v14 = (char **)(v13 + 56);
    *(_QWORD *)(v13 + 64) = *(_QWORD *)(v13 + 56);
    v15 = v13 + 64;
    v16 = (int)*(float *)(v15 + 24);
    if ((v12 & 0x80000000) != 0)
    {
      v53 = (*(_DWORD *)(v6 + 72) * (v16 + (int)*(float *)(v15 + 20) - v12));
    }
    else
    {
      v111 = (int)*(float *)(v15 + 24);
      v112 = (int)*(float *)(v15 + 20);
      v17 = *(int *)(*(_QWORD *)(v15 - 48) - 180);
      v18 = *(_QWORD *)(v6 + 32);
      v19 = *(_QWORD *)(v6 + 168);
      v20 = (unsigned int *)(v19 + v18 + 10 * v12);
      v21 = v18 + 10 * (int)v17;
      *(_QWORD *)(v6 + 144) = v21;
      v22 = v19 + v21;
      v113 = v5;
      v114 = v20;
      v23 = *v20;
      v24 = *(_DWORD *)(v19 + v21) + *(unsigned __int8 *)(v19 + v21 + 4);
      v25 = v24 - *v20;
      if (v24 < *v20 || v25 >= 0x7D1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        StringFormatter::StringFormatter((StringFormatter *)md, "AudioExtractor: Preposterous extraction request %d[%u]..%u[%u]\n", v12, v23, v17, v24);
        MEMORY[0x1DF0EC99C](exception, md);
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 16) + 12);
      v27 = v23 * v26;
      if (v23 || *((_WORD *)v20 + 3))
      {
        v109 = v24 * v26 - v27;
        v5 = v113;
        if (*(_DWORD *)v6 == 2)
        {
          *(_QWORD *)md = 0;
          v124 = 0;
          v125 = 0;
          v54 = **(_WORD **)(v6 + 88);
          std::vector<unsigned short>::resize((char **)md, v25);
          v55 = v23 / v54;
          v56 = v55 * v54;
          v57 = *(_QWORD *)(v6 + 48) + 2 * **(unsigned __int16 **)(v6 + 88) * (unint64_t)v55;
          v58 = *(_QWORD *)(v6 + 168);
          v59 = v57 + 2 * (v23 - v56);
          *(_QWORD *)(v6 + 144) = v59;
          v60 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8 * v55);
          if (v23 != v56)
          {
            v61 = 0;
            v62 = v58 + v57;
            do
              v60 += *(unsigned __int16 *)(v62 + 2 * (unsigned __int16)v61++);
            while (v23 - v56 > (unsigned __int16)v61);
          }
          memcpy(*(void **)md, (const void *)(v58 + v59), (size_t)v124 - *(_QWORD *)md);
          v63 = *(_QWORD *)(v6 + 40) + v60;
          v120 = 0;
          v121 = 0;
          v122 = 0;
          DecompressAudio::decompress_relevant_audio(*(_QWORD *)(v6 + 112), md, v63, &v120);
          v64 = *(_QWORD *)(v6 + 64);
          if (v64)
          {
            v65 = v64 + 4 * v12;
            v66 = *(_QWORD *)(v6 + 168);
            v67 = v64 + 4 * v17;
            *(_QWORD *)(v6 + 144) = v67;
            v68 = *(unsigned __int16 *)(v66 + v65);
            v69 = v66 + v67;
            v70 = *((unsigned __int16 *)v114 + 3);
            v71 = *(_DWORD *)(v6 + 72);
            v72 = v71 * v112;
            v73 = v70 - v71 * v112;
            v74 = v68 - v70 + v71 * v112;
            v75 = *(unsigned __int16 *)(v66 + v67 + 2);
            v76 = *(unsigned __int16 *)(v22 + 8);
            v77 = v71 * v111;
            if (v76 - v77 >= v75)
              v78 = 0;
            else
              v78 = v75 + v77 - v76;
            v110 = v78;
            if (v73 < v68 && v74 != 0)
            {
              std::vector<unsigned short>::vector(&__p, v74);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v14, *v14, (unsigned __int16 *)__p, v119, ((char *)v119 - (_BYTE *)__p) >> 1);
              if (__p)
              {
                v119 = (unsigned __int16 *)__p;
                operator delete(__p);
              }
              v70 = *((unsigned __int16 *)v114 + 3);
              v77 = *(_DWORD *)(v6 + 72);
              v76 = *(unsigned __int16 *)(v22 + 8);
              v68 = *(unsigned __int16 *)(v66 + v65);
              v75 = *(unsigned __int16 *)(v69 + 2);
              v72 = v77 * v112;
              LOWORD(v77) = v77 * v111;
            }
            v80 = v76 - v77;
            if (v72 <= v70)
              v81 = v70 - v72;
            else
              v81 = 0;
            if (v72 <= v76)
              v82 = v80;
            else
              v82 = 0;
            if (v81 > v68)
              v68 = v81;
            v83 = (__int16 *)((char *)v120 + 2 * v68);
            if (v82 <= v75)
              v84 = v75;
            else
              v84 = v82;
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((uint64_t)v14, *(char **)v15, v83, &v121[-v84], &v121[-v84] - v83);
            if (v110)
            {
              std::vector<unsigned short>::vector(&__p, v110);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v14, *(char **)v15, (unsigned __int16 *)__p, v119, ((char *)v119 - (_BYTE *)__p) >> 1);
              if (__p)
              {
                v119 = (unsigned __int16 *)__p;
                operator delete(__p);
              }
            }
          }
          else
          {
            v89 = *(_DWORD *)(v6 + 72);
            v90 = (__int16 *)((char *)v120 + 2 * *((unsigned __int16 *)v114 + 3) + -2 * (v89 * v112));
            v91 = &v121[v89 * v111 - *(unsigned __int16 *)(v22 + 8)];
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<short *>,std::__wrap_iter<short *>>((uint64_t)v14, *v14, v90, v91, v91 - v90);
          }
          if (v120)
          {
            v121 = (__int16 *)v120;
            operator delete(v120);
          }
LABEL_78:
          if (*(_QWORD *)md)
          {
            v124 = *(unsigned __int16 **)md;
            operator delete(*(void **)md);
          }
          goto LABEL_80;
        }
        if (*(_DWORD *)v6 == 1)
        {
          std::vector<float>::resize((uint64_t)v14, 0);
          v28 = *(_QWORD *)(v6 + 40) + 2 * v27;
          *(_QWORD *)(v6 + 144) = v28;
          v29 = *(_QWORD *)(v6 + 168);
          v30 = (__int16 *)(v29 + v28);
          v31 = *(_QWORD *)(v6 + 64);
          if (v31)
          {
            v32 = v31 + 4 * v12;
            v33 = v31 + 4 * v17;
            *(_QWORD *)(v6 + 144) = v33;
            LODWORD(v31) = *(unsigned __int16 *)(v29 + v32);
            v34 = v29 + v33;
            v35 = *((unsigned __int16 *)v114 + 3);
            v36 = *(_DWORD *)(v6 + 72);
            v37 = v36 * v112;
            v38 = v35 - v36 * v112;
            v39 = v31 - v35 + v36 * v112;
            v40 = *(unsigned __int16 *)(v29 + v33 + 2);
            v41 = *(unsigned __int16 *)(v22 + 8);
            v42 = v36 * v111;
            if (v41 - v42 >= v40)
              v43 = 0;
            else
              v43 = v40 + v42 - v41;
            v108 = v43;
            if (v38 < v31 && v39 != 0)
            {
              std::vector<unsigned short>::vector(md, v39);
              std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v14, *v14, *(unsigned __int16 **)md, v124, ((uint64_t)v124 - *(_QWORD *)md) >> 1);
              if (*(_QWORD *)md)
              {
                v124 = *(unsigned __int16 **)md;
                operator delete(*(void **)md);
              }
              v35 = *((unsigned __int16 *)v114 + 3);
              v42 = *(_DWORD *)(v6 + 72);
              v41 = *(unsigned __int16 *)(v22 + 8);
              LODWORD(v31) = *(unsigned __int16 *)(v29 + v32);
              v40 = *(unsigned __int16 *)(v34 + 2);
              v37 = v42 * v112;
              LOWORD(v42) = v42 * v111;
            }
            v45 = v41 - v42;
            if (v37 <= v35)
              v46 = v35 - v37;
            else
              v46 = 0;
            if (v37 <= v41)
              v47 = v45;
            else
              v47 = 0;
            v48 = *(char **)v15;
            if (v46 <= v31)
              v31 = v31;
            else
              v31 = v46;
            v49 = v31 + *v30;
            if (v47 > v40)
              v40 = v47;
            *(float *)md = (float)(int)(v30[v109 - 1] - v40);
            std::vector<float>::insert((uint64_t)v14, v48, v49, (char *)md);
            if (!v108)
              goto LABEL_80;
            std::vector<unsigned short>::vector(md, v108);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((uint64_t)v14, *(char **)v15, *(unsigned __int16 **)md, v124, ((uint64_t)v124 - *(_QWORD *)md) >> 1);
            goto LABEL_78;
          }
          v86 = *v14;
          v87 = *(_DWORD *)(v6 + 72);
          v88 = *((unsigned __int16 *)v114 + 3) + *v30 - v87 * v112;
          *(float *)md = (float)(v30[v109 - 1] + v87 * v111 - *(unsigned __int16 *)(v22 + 8));
          std::vector<float>::insert((uint64_t)v14, v86, v88, (char *)md);
        }
LABEL_80:
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG)
          || Diagnostics::s_log_level >= 7)
        {
          CC_SHA1(*v14, (*(_DWORD *)v15 - *v14) & 0xFFFFFFFC, md);
        }
        goto LABEL_85;
      }
      v53 = v24 * v26
          - v27
          + (*(_DWORD *)(v6 + 72) * v112)
          + (unint64_t)(*(_DWORD *)(v6 + 72) * v16);
      v5 = v113;
    }
    std::vector<float>::resize((uint64_t)v14, v53);
    goto LABEL_80;
  }
  while (1)
  {
    if (*(_DWORD *)v51 == 9)
    {
      v52 = *(unsigned int *)(v51 + 4);
      if ((_DWORD)v52 != 0x7FFFFFFF)
        break;
    }
    v51 += 56;
    if (v51 == v50)
      goto LABEL_5;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 24) + 24))(**(_QWORD **)(a1 + 24), v52, v9 + 120 * v3 + 56);
  v85 = v9 + 120 * v3;
  *(_DWORD *)(v85 + 84) = 0;
  *(_DWORD *)(v85 + 88) = 0;
  if (*(_BYTE *)(v51 + 48))
    **(_BYTE **)(a1 + 32) = 1;
LABEL_85:
  v92 = v9 + 120 * v117;
  v94 = *(_QWORD *)(v92 + 16);
  v93 = v92 + 16;
  std::vector<int>::resize((std::vector<int> *)(v93 + 16), 0xD37A6F4DE9BD37A7 * ((v94 - *v116) >> 3));
  v95 = *v116;
  v96 = *(_DWORD *)(*v116 + 4);
  v97 = **(float **)(a1 + 40);
  v98 = (int)(float)(*(float *)(v9 + 120 * v117 + 84) * v97);
  v99 = *(int **)(v93 + 16);
  *v99 = v98;
  if ((v96 & 0x80000000) == 0)
  {
    v100 = 0xD37A6F4DE9BD37A7 * ((*(_QWORD *)v93 - v95) >> 3);
    if (v100 >= 2)
    {
      v101 = v100 - 1;
      v102 = v99 + 1;
      v103 = (float *)(v95 + 152);
      do
      {
        v104 = *v103;
        v103 += 46;
        v98 = (int)(float)((float)v98 + (float)(v104 * v97));
        *v102++ = v98;
        --v101;
      }
      while (v101);
    }
  }
  if (v5)
  {
    v105 = (unint64_t *)&v5->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DE9DFD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0,std::allocator<populate_segments(std::vector<AudioSegmentation> &,std::vector<std::shared_ptr<AudioExtractor>> &,std::shared_ptr<GeneratedPromptDB>,std::shared_ptr<SharedObjectPool>,int)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void SharedObjectPool::get<GeneratedPromptDB>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  uint64_t **v37;
  __int128 v38;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  {
    SharedObjectPool::get<VoiceConfig>(&v35, (__int128 **)a2);
    v9 = (std::__shared_weak_count *)operator new(0x38uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933628;
    v11 = &v9[1].__vftable;
    v12 = v36;
    v37 = (uint64_t **)v35;
    *(_QWORD *)&v38 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    GeneratedPromptDB::GeneratedPromptDB((uint64_t)&v9[1], (uint64_t *)&v37, a2);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v34 = v10;
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v37 = &v35;
    v21 = v20[5];
    if (v21)
    {
      v37 = (uint64_t **)&off_1EA923368;
      *(_QWORD *)&v38 = v11;
      *((_QWORD *)&v38 + 1) = v34;
      if (v34)
      {
        v22 = (unint64_t *)&v34->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v21 + 8, &v38);
      v37 = (uint64_t **)&off_1EA923368;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = v34;
    }
    else
    {
      v28 = (_QWORD *)operator new();
      v27 = v34;
      *v28 = &off_1EA923368;
      v28[1] = v11;
      v28[2] = v34;
      if (v34)
      {
        v29 = (unint64_t *)&v34->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v20[5];
      v20[5] = (uint64_t)v28;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    if (v27)
    {
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  a1[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9E00E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::recursive_mutex *v4;
  std::__shared_weak_count *v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v7);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AudioExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioExtractor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<AudioExtractor>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 176);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 136);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<GeneratedPromptDB>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923368;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<GeneratedPromptDB>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923368;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<FRBMatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FRBMatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<FRBMatch>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  v2 = *(void ***)(a1 + 248);
  if (v2)
  {
    v3 = *(void ***)(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        v8 = v3;
        std::vector<FRBMatchGroupRecord>::__destroy_vector::operator()[abi:ne180100](&v8);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(_QWORD **)(a1 + 232));
  v5 = *(void **)(a1 + 200);
  if (v5)
  {
    *(_QWORD *)(a1 + 208) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(*(_QWORD **)(a1 + 184));
  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(*a1);
    std::__tree<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::__map_value_compare<BinaryCounter const*,std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>,std::less<BinaryCounter const*>,true>,std::allocator<std::__value_type<BinaryCounter const*,std::shared_ptr<FRMatchCounter>>>>::destroy(a1[1]);
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::vector<FRBMatchGroupRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<unsigned int>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t FRBMatch::check_counter_status(unsigned int *a1, unsigned int **a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  uint8_t buf[4];
  unsigned int *v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  if (fr_verbose_log(void)::is_verbose_)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v8 = **a2;
      *(_DWORD *)buf = 134218752;
      v14 = a1;
      v15 = 1024;
      v16 = v8;
      v17 = 1024;
      v18 = v3;
      v19 = 1024;
      v20 = v4;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "Cell Counter %p, Idx: %d, Min: %d, Max: %d", buf, 0x1Eu);
    }
    Diagnostics::log(7, "Cell Counter %p, Idx: %d, Min: %d, Max: %d", v7, a1, **a2, v3, v4);
  }
  v9 = **a2;
  if (v9 <= v4 || (_DWORD)v4 == 0)
    v11 = 1;
  else
    v11 = 2;
  if (v9 >= v3)
    return v11;
  else
    return 0;
}

uint64_t FRBMatch::counting(uint64_t a1, unsigned int *a2)
{
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int **v31;
  unsigned int v32;
  int v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v39[2];
  unsigned int *v40[2];
  __int128 v41;
  std::__shared_weak_count *v42;
  unsigned int *v43;
  unsigned int *v44;

  v4 = *a2 != 1 || a2[1] != 1;
  v5 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD **)(a1 + 160);
  if (!v6)
    goto LABEL_15;
  v7 = (_QWORD *)(a1 + 160);
  v8 = *(_QWORD **)(a1 + 160);
  do
  {
    v9 = v8[4];
    v10 = v9 >= (unint64_t)a2;
    if (v9 >= (unint64_t)a2)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v10)
      v7 = v8;
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v5 || v7[4] > (unint64_t)a2)
  {
LABEL_15:
    v12 = (std::__shared_weak_count *)operator new(0x20uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9329B0;
    v12[1].__vftable = 0;
    v43 = (unsigned int *)&v12[1];
    v44 = (unsigned int *)v12;
    *(_QWORD *)&v41 = a2;
    *((_QWORD *)&v41 + 1) = v12 + 1;
    v42 = v12;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (_QWORD *)(a1 + 160);
    if (v6)
    {
      while (1)
      {
        while (1)
        {
          v15 = v6;
          v16 = v6[4];
          if (v16 <= (unint64_t)a2)
            break;
          v6 = (_QWORD *)*v6;
          v5 = v15;
          if (!*v15)
            goto LABEL_24;
        }
        if (v16 >= (unint64_t)a2)
          break;
        v6 = (_QWORD *)v6[1];
        if (!v6)
        {
          v5 = v15 + 1;
          goto LABEL_24;
        }
      }
    }
    else
    {
LABEL_24:
      v17 = operator new(0x38uLL);
      v17[2] = v41;
      *((_QWORD *)v17 + 6) = v12;
      *((_QWORD *)&v41 + 1) = 0;
      v42 = 0;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v15;
      *v5 = v17;
      v18 = **(_QWORD **)(a1 + 152);
      if (v18)
      {
        *(_QWORD *)(a1 + 152) = v18;
        v17 = (_OWORD *)*v5;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), (uint64_t *)v17);
      ++*(_QWORD *)(a1 + 168);
      v12 = v42;
      if (!v42)
      {
LABEL_31:
        v21 = v43;
        ++*v43;
        if (v4)
        {
          v22 = (std::__shared_weak_count *)v44;
          v40[0] = v21;
          v40[1] = v44;
          if (v44)
          {
            v23 = (unint64_t *)(v44 + 2);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = FRBMatch::check_counter_status(a2, v40);
            v43[1] = v25;
            do
              v26 = __ldaxr(v23);
            while (__stlxr(v26 - 1, v23));
            goto LABEL_37;
          }
          v31 = v40;
LABEL_47:
          v32 = FRBMatch::check_counter_status(a2, v31);
          v43[1] = v32;
          goto LABEL_53;
        }
        goto LABEL_51;
      }
    }
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_31;
  }
  v43 = 0;
  v44 = 0;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v43, v7[5], v7[6]);
  v21 = v43;
  v27 = *v43 + 1;
  *v43 = v27;
  if (!v4)
  {
    if (v27 < *a2 || v27 > a2[1])
    {
      v33 = 2;
LABEL_52:
      v21[1] = v33;
      goto LABEL_53;
    }
LABEL_51:
    v33 = 1;
    goto LABEL_52;
  }
  v22 = (std::__shared_weak_count *)v44;
  v39[0] = v21;
  v39[1] = v44;
  if (!v44)
  {
    v31 = v39;
    goto LABEL_47;
  }
  v28 = (unint64_t *)(v44 + 2);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  v30 = FRBMatch::check_counter_status(a2, v39);
  v43[1] = v30;
  do
    v26 = __ldaxr(v28);
  while (__stlxr(v26 - 1, v28));
LABEL_37:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_53:
  v34 = (std::__shared_weak_count *)v44;
  v35 = v43[1];
  if (v44)
  {
    v36 = (unint64_t *)(v44 + 2);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return v35;
}

void sub_1DE9E09AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<FRMatchCounter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9329B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<FRMatchCounter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9329B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void FRBMatch::undoCounting(uint64_t a1, unsigned int *a2)
{
  _BOOL4 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int *v21[2];
  unsigned int *v22;
  unsigned int *v23;

  v3 = *a2 != 1 || a2[1] != 1;
  v6 = *(_QWORD **)(a1 + 160);
  v4 = (_QWORD *)(a1 + 160);
  v5 = v6;
  if (!v6)
    goto LABEL_15;
  v7 = v4;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v4 && v7[4] <= (unint64_t)a2)
  {
    v22 = 0;
    v23 = 0;
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v22, v7[5], v7[6]);
    v14 = v22;
    if (*v22)
      --*v22;
    if (v3)
    {
      v15 = (std::__shared_weak_count *)v23;
      v21[0] = v14;
      v21[1] = v23;
      if (v23)
      {
        v16 = (unint64_t *)(v23 + 2);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v18 = FRBMatch::check_counter_status(a2, v21);
        v22[1] = v18;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v20 = FRBMatch::check_counter_status(a2, v21);
        v22[1] = v20;
      }
    }
    else
    {
      v14[1] = 1;
    }
  }
  else
  {
LABEL_15:
    v22 = 0;
    v23 = 0;
  }
  v11 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v12 = (unint64_t *)(v23 + 2);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void FRBMatchGroupRecord::~FRBMatchGroupRecord(void **this)
{
  void **v2;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1DE9E0D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE9E0D48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 std::allocator<FRBMatchGroupRecord>::construct[abi:ne180100]<FRBMatchGroupRecord,FRBMatchGroupRecord const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  v5 = *((_QWORD *)a2 + 8);
  this[2].__r_.__value_.__r.__words[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_1DE9E0DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<FRBMatchGroupRecord>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::allocator<FRBMatchGroupRecord>::destroy[abi:ne180100](i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void FRBMatch::rollback_to_previous_matched_buffer(FRBMatch *this)
{
  FRBMatch *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  std::string::size_type v73;
  std::string *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  std::string *v103;
  std::__shared_weak_count *size;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::string::value_type *v116;
  std::string::value_type v117;
  std::string *v118;
  int v119;
  uint64_t v120;
  unint64_t v122;
  int v123;
  int *v124;
  _DWORD *v125;
  _QWORD *v126;
  uint64_t *v127;
  unint64_t v128;
  int v129;
  int *__p;
  std::string v131[2];
  __int128 v132;
  _BYTE v133[28];

  if (*((_BYTE *)this + 56))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 16);
    v3 = *((_QWORD *)this + 17);
    if (v2 != v3)
    {
      v4 = 0uLL;
      do
      {
        v6 = v3 - 8;
        v5 = *(_DWORD *)(v3 - 8);
        v7 = *(int *)(v3 - 4);
        v8 = *((_DWORD *)v1 + 10);
        v9 = v3 - v2;
        if ((unint64_t)(v3 - v2) < 9
          || ((v10 = *((_DWORD *)v1 + 15), v10 == v8) ? (v11 = v5 == v10) : (v11 = 0), v3 = v6, !v11))
        {
          v13 = *((_QWORD *)v1 + 28);
          v12 = *((_QWORD *)v1 + 29);
          if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) <= v5)
            std::vector<int>::__throw_out_of_range[abi:ne180100]();
          v14 = (uint64_t *)(v13 + 24 * v5);
          v15 = *v14;
          v16 = 0x2E8BA2E8BA2E8BA3 * ((v14[1] - *v14) >> 3);
          if (v16 <= v7)
            goto LABEL_166;
          if (v9 == 8 && v5 == v8)
          {
            v17 = *((int *)v1 + 11);
            if (v16 <= v17)
LABEL_166:
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            if (v13 == v12)
              goto LABEL_153;
            v18 = v15 + 88 * (int)v17;
            v21 = *(_QWORD *)(v18 + 72);
            v20 = (_DWORD *)(v18 + 72);
            v19 = v21;
            v22 = v15 + 88 * (int)v7;
            v23 = *(_QWORD *)(v22 + 72);
            v125 = (_DWORD *)(v22 + 72);
            *(_OWORD *)&v133[12] = v4;
            if (v21 >= v23)
              v24 = v23;
            else
              v24 = v19;
            v132 = v4;
            *(_OWORD *)v133 = v4;
            v25 = v17;
            std::string::operator=((std::string *)&v132, (const std::string *)(v15 + 88 * (int)v17));
            v119 = v25;
            std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v133[8], *(_QWORD *)(v15 + 88 * v25 + 56), *(_QWORD *)(v15 + 88 * v25 + 64));
            *(_DWORD *)&v133[24] = *v20 - 1;
            memset(v131, 0, 44);
            std::string::operator=(v131, (const std::string *)(v15 + 88 * (int)v7));
            v120 = v15;
            v26 = v15 + 88 * (int)v7;
            std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v131[1].__r_.__value_.__r.__words, *(_QWORD *)(v26 + 56), *(_QWORD *)(v26 + 64));
            LODWORD(v131[1].__r_.__value_.__r.__words[2]) = *v125 - 1;
            v27 = *(_DWORD *)(v26 + 80);
            v28 = *(_QWORD *)(v26 + 48);
            v29 = (char *)operator new(0x10uLL);
            v30 = (int *)(v29 + 16);
            *(_DWORD *)v29 = v27;
            __p = (int *)v29;
            *((_QWORD *)v29 + 1) = v28;
            if ((v24 & 0x80000000) != 0)
            {
              v32 = 0;
              v31 = 0;
              goto LABEL_109;
            }
            v31 = 0;
            v32 = 0;
            v122 = 0;
            v124 = (int *)(v29 + 16);
            while (1)
            {
              v33 = *((_QWORD *)v1 + 28);
              if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 29) - v33) >> 3) <= v24)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v128 = v24;
              v126 = (_QWORD *)(v33 + 24 * v24 + 8);
              v127 = (uint64_t *)(v33 + 24 * v24);
              v34 = *v127;
              if (*v126 != *v127)
                break;
LABEL_93:
              v24 = v128 - 1;
              v1 = this;
              if ((int)v128 <= 0)
              {
LABEL_104:
                if (__p == v30)
                {
LABEL_126:
                  v97 = (unint64_t)(v32 - v31) >> 4;
                  v98 = (v32 - v31) >> 4;
                  v99 = v97 - 1;
                  v15 = v120;
                  while ((v99 & 0x80000000) == 0)
                  {
                    if (v98 <= v99)
                      std::vector<int>::__throw_out_of_range[abi:ne180100]();
                    v100 = &v31[16 * v99];
                    v101 = *(int *)v100 + 2;
                    v102 = *((_QWORD *)v1 + 9);
                    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v102) >> 3) <= v101)
LABEL_160:
                      std::vector<int>::__throw_out_of_range[abi:ne180100]();
                    std::string::push_back((std::string *)(v102 + 24 * v101), v100[4]);
                    if (*(int *)v100 >= 1)
                    {
                      v103 = (std::string *)*((_QWORD *)v1 + 9);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v1 + 10) - (_QWORD)v103) >> 3) < 3)
                        goto LABEL_160;
                      std::string::push_back(v103 + 2, v100[4]);
                    }
                    --v99;
                    FRBMatch::counting((uint64_t)v1, *((unsigned int **)v100 + 1));
                  }
                  if (v31)
                    operator delete(v31);
                  if (__p)
                    operator delete(__p);
                  size = (std::__shared_weak_count *)v131[1].__r_.__value_.__l.__size_;
                  if (v131[1].__r_.__value_.__l.__size_)
                  {
                    v105 = (unint64_t *)(v131[1].__r_.__value_.__l.__size_ + 8);
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  if (SHIBYTE(v131[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v131[0].__r_.__value_.__l.__data_);
                  v107 = *(std::__shared_weak_count **)&v133[16];
                  if (*(_QWORD *)&v133[16])
                  {
                    v108 = (unint64_t *)(*(_QWORD *)&v133[16] + 8);
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  if ((v133[7] & 0x80000000) != 0)
                    operator delete((void *)v132);
                  LODWORD(v17) = v119;
LABEL_153:
                  v110 = v15 + 88 * (int)v17;
                  v112 = *(int *)(v110 + 80);
                  v111 = (int *)(v110 + 80);
                  v113 = v112 + 2;
                  v114 = *((_QWORD *)v1 + 9);
                  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v114) >> 3) > v112 + 2)
                  {
                    v115 = v15 + 88 * (int)v17;
                    v117 = *(_BYTE *)(v115 + 84);
                    v116 = (std::string::value_type *)(v115 + 84);
                    std::string::push_back((std::string *)(v114 + 24 * v113), v117);
                    v4 = 0uLL;
                    if (*v111 < 1)
                      goto LABEL_157;
                    v118 = (std::string *)*((_QWORD *)v1 + 9);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v1 + 10) - (_QWORD)v118) >> 3) > 2)
                    {
                      std::string::push_back(v118 + 2, *v116);
                      v4 = 0uLL;
                      goto LABEL_157;
                    }
                  }
LABEL_165:
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                }
LABEL_109:
                v86 = __p;
                while (2)
                {
                  v87 = *v86;
                  v88 = *((_QWORD *)v1 + 9);
                  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v88) >> 3) <= v87 + 2)
                    std::vector<int>::__throw_out_of_range[abi:ne180100]();
                  v89 = (unsigned int *)*((_QWORD *)v86 + 1);
                  v90 = (uint64_t *)(v88 + 24 * (v87 + 2));
                  if (*((char *)v90 + 23) < 0)
                  {
                    v92 = v90[1];
                    if (v92)
                    {
                      v91 = v92 - 1;
                      v90[1] = v91;
                      v90 = (uint64_t *)*v90;
LABEL_116:
                      *((_BYTE *)v90 + v91) = 0;
                    }
                  }
                  else if (*((_BYTE *)v90 + 23))
                  {
                    v91 = *((unsigned __int8 *)v90 + 23) - 1;
                    *((_BYTE *)v90 + 23) = v91;
                    goto LABEL_116;
                  }
                  if ((int)v87 >= 1)
                  {
                    v93 = *((_QWORD *)v1 + 9);
                    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v93) >> 3) <= 2)
                      std::vector<int>::__throw_out_of_range[abi:ne180100]();
                    if (*(char *)(v93 + 71) < 0)
                    {
                      v96 = *(_QWORD *)(v93 + 56);
                      if (v96)
                      {
                        v95 = v96 - 1;
                        v94 = *(_QWORD *)(v93 + 48);
                        *(_QWORD *)(v93 + 56) = v95;
LABEL_124:
                        *(_BYTE *)(v94 + v95) = 0;
                      }
                    }
                    else if (*(_BYTE *)(v93 + 71))
                    {
                      v94 = v93 + 48;
                      v95 = *(unsigned __int8 *)(v93 + 71) - 1;
                      *(_BYTE *)(v93 + 71) = v95;
                      goto LABEL_124;
                    }
                  }
                  FRBMatch::undoCounting((uint64_t)v1, v89);
                  v86 += 4;
                  if (v86 == v30)
                    goto LABEL_126;
                  continue;
                }
              }
            }
            v35 = 0;
            v123 = 0;
            v36 = 0;
            while (2)
            {
              v129 = v36;
              v37 = (uint64_t *)(v34 + 88 * v35 + 24);
              v38 = v34 + 88 * v35;
              v41 = *(_QWORD *)(v38 + 32);
              v40 = (uint64_t *)(v38 + 32);
              v39 = v41;
              if (*(_QWORD *)v125 <= v128
                || (v42 = v34 + 88 * v35,
                    v44 = *(_QWORD *)(v42 + 72),
                    v43 = (_DWORD *)(v42 + 72),
                    v44 != SLODWORD(v131[1].__r_.__value_.__r.__words[2]))
                || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*v37, v39, (unsigned __int8 **)v131) == *v40)
              {
                v45 = 0;
              }
              else
              {
                std::string::operator=(v131, (const std::string *)(v34 + 88 * v35));
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v131[1].__r_.__value_.__r.__words, *(_QWORD *)(v34 + 88 * v35 + 56), *(_QWORD *)(v34 + 88 * v35 + 64));
                LODWORD(v131[1].__r_.__value_.__r.__words[2]) = *v43 - 1;
                v45 = 1;
              }
              v46 = v34 + 88 * v35;
              v48 = *(_QWORD *)(v46 + 72);
              v47 = (_DWORD *)(v46 + 72);
              if (v48 != *(int *)&v133[24]
                || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*v37, *v40, (unsigned __int8 **)&v132) == *v40)
              {
                if (v129 & 1 | ((v45 & 1) == 0))
                {
                  v36 = v45 | v129;
                }
                else
                {
                  v49 = v34 + 88 * v35;
                  v50 = *(_DWORD *)(v49 + 80);
                  v51 = *(_QWORD *)(v49 + 48);
                  if (v30 >= v124)
                  {
                    v53 = ((char *)v30 - (char *)__p) >> 4;
                    v54 = v53 + 1;
                    if ((unint64_t)(v53 + 1) >> 60)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    if (((char *)v124 - (char *)__p) >> 3 > v54)
                      v54 = ((char *)v124 - (char *)__p) >> 3;
                    if ((unint64_t)((char *)v124 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
                      v55 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v55 = v54;
                    if (v55)
                      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v55);
                    else
                      v56 = 0;
                    v65 = v55 + 16 * v53;
                    *(_DWORD *)v65 = v50;
                    *(_QWORD *)(v65 + 8) = v51;
                    if (v30 == __p)
                    {
                      v67 = v55 + 16 * v53;
                    }
                    else
                    {
                      v66 = v55 + 16 * v53;
                      do
                      {
                        v67 = v66 - 16;
                        *(_OWORD *)(v66 - 16) = *((_OWORD *)v30 - 1);
                        v30 -= 4;
                        v66 -= 16;
                      }
                      while (v30 != __p);
                    }
                    v124 = (int *)(v55 + 16 * v56);
                    v30 = (int *)(v65 + 16);
                    if (__p)
                      operator delete(__p);
                    v52 = (int *)v67;
                    v36 = 1;
                    goto LABEL_75;
                  }
                  *v30 = v50;
                  *((_QWORD *)v30 + 1) = v51;
                  v30 += 4;
                  v36 = 1;
                }
                v52 = __p;
                goto LABEL_75;
              }
              std::string::operator=((std::string *)&v132, (const std::string *)(v34 + 88 * v35));
              std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v133[8], *(_QWORD *)(v34 + 88 * v35 + 56), *(_QWORD *)(v34 + 88 * v35 + 64));
              *(_DWORD *)&v133[24] = *v47 - 1;
              if (((v45 | v123) & 1) != 0)
              {
LABEL_47:
                v52 = __p;
              }
              else
              {
                v57 = v34 + 88 * v35;
                v59 = *(_DWORD *)(v57 + 80);
                v58 = *(_DWORD *)(v57 + 84);
                v60 = *(_QWORD *)(v57 + 48);
                if ((unint64_t)v32 < v122)
                {
                  *(_DWORD *)v32 = v59;
                  *((_DWORD *)v32 + 1) = v58;
                  *((_QWORD *)v32 + 1) = v60;
                  v32 += 16;
                  v123 = 1;
                  goto LABEL_47;
                }
                v61 = (v32 - v31) >> 4;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v122 - (_QWORD)v31) >> 3 > v62)
                  v62 = (uint64_t)(v122 - (_QWORD)v31) >> 3;
                if (v122 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
                  v63 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v63 = v62;
                if (v63)
                  v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v63);
                else
                  v64 = 0;
                v68 = v63 + 16 * v61;
                *(_DWORD *)v68 = v59;
                *(_DWORD *)(v68 + 4) = v58;
                *(_QWORD *)(v68 + 8) = v60;
                if (v32 == v31)
                {
                  v70 = (char *)(v63 + 16 * v61);
                  v52 = __p;
                }
                else
                {
                  v69 = v63 + 16 * v61;
                  v52 = __p;
                  do
                  {
                    v70 = (char *)(v69 - 16);
                    *(_OWORD *)(v69 - 16) = *((_OWORD *)v32 - 1);
                    v32 -= 16;
                    v69 -= 16;
                  }
                  while (v32 != v31);
                }
                v122 = v63 + 16 * v64;
                v32 = (char *)(v68 + 16);
                if (v31)
                  operator delete(v31);
                v123 = 1;
                v31 = v70;
              }
              v36 = v129;
LABEL_75:
              v71 = v133[7];
              if (v133[7] >= 0)
                v72 = v133[7];
              else
                v72 = *((_QWORD *)&v132 + 1);
              v73 = HIBYTE(v131[0].__r_.__value_.__r.__words[2]);
              if ((v131[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v73 = v131[0].__r_.__value_.__l.__size_;
              __p = v52;
              if (v72 == v73)
              {
                if ((v131[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v74 = v131;
                else
                  v74 = (std::string *)v131[0].__r_.__value_.__r.__words[0];
                if ((v133[7] & 0x80) != 0)
                {
                  if (memcmp((const void *)v132, v74, *((size_t *)&v132 + 1)))
                    goto LABEL_92;
                }
                else if (v133[7])
                {
                  v75 = (unsigned __int8 *)&v132;
                  while (*v75 == v74->__r_.__value_.__s.__data_[0])
                  {
                    ++v75;
                    v74 = (std::string *)((char *)v74 + 1);
                    if (!--v71)
                      goto LABEL_91;
                  }
                  goto LABEL_92;
                }
LABEL_91:
                if (*(_DWORD *)&v133[24] == LODWORD(v131[1].__r_.__value_.__r.__words[2]))
                {
                  v1 = this;
                  goto LABEL_104;
                }
              }
LABEL_92:
              ++v35;
              v34 = *v127;
              if (0x2E8BA2E8BA2E8BA3 * ((*v126 - *v127) >> 3) <= v35)
                goto LABEL_93;
              continue;
            }
          }
          v76 = v15 + 88 * (int)v7;
          v78 = *(int *)(v76 + 80);
          v77 = (int *)(v76 + 80);
          v79 = v78 + 2;
          v80 = *((_QWORD *)v1 + 9);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v80) >> 3) <= v78 + 2)
            goto LABEL_165;
          v81 = (uint64_t *)(v80 + 24 * v79);
          if (*((char *)v81 + 23) < 0)
          {
            v82 = v81[1] - 1;
            v81[1] = v82;
            v81 = (uint64_t *)*v81;
          }
          else
          {
            v82 = *((unsigned __int8 *)v81 + 23) - 1;
            *((_BYTE *)v81 + 23) = v82 & 0x7F;
          }
          *((_BYTE *)v81 + v82) = 0;
          if (*v77 >= 1)
          {
            v83 = *((_QWORD *)v1 + 9);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 10) - v83) >> 3) <= 2)
              goto LABEL_165;
            if (*(char *)(v83 + 71) < 0)
            {
              v84 = *(_QWORD *)(v83 + 48);
              v85 = *(_QWORD *)(v83 + 56) - 1;
              *(_QWORD *)(v83 + 56) = v85;
            }
            else
            {
              v84 = v83 + 48;
              v85 = *(unsigned __int8 *)(v83 + 71) - 1;
              *(_BYTE *)(v83 + 71) = v85 & 0x7F;
            }
            *(_BYTE *)(v84 + v85) = 0;
          }
LABEL_157:
          v2 = *((_QWORD *)v1 + 16);
          v3 = *((_QWORD *)v1 + 17) - 8;
        }
        *((_QWORD *)v1 + 17) = v3;
      }
      while (v2 != v3);
    }
  }
}

void sub_1DE9E1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,char a23)
{
  uint64_t v23;

  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair((uint64_t)&a23);
  std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v23 - 144);
  _Unwind_Resume(a1);
}

std::string *FRBMatch::set_rule(uint64_t a1, int a2, std::string *__str)
{
  std::string *result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  *(_DWORD *)(a1 + 120) = a2;
  *(_BYTE *)(a1 + 56) = 1;
  result = std::string::operator=((std::string *)(a1 + 16), __str);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v5 = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a1 + 224);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 232) - v6) >> 3);
  if (v7 == v5)
  {
    v8 = 0;
  }
  else
  {
    if (v7 <= v5)
      std::vector<int>::__throw_out_of_range[abi:ne180100]();
    v8 = -1171354717
       * ((*(_QWORD *)(v6 + 24 * v5 + 8) - *(_QWORD *)(v6 + 24 * v5)) >> 3)
       - 1;
  }
  *(_DWORD *)(a1 + 44) = v8;
  return result;
}

_QWORD *Agglomerate::ItemHolder<GrammaticalNumberRules>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9230A8;
  GrammaticalNumberRules::~GrammaticalNumberRules((GrammaticalNumberRules *)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<GrammaticalNumberRules>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9230A8;
  GrammaticalNumberRules::~GrammaticalNumberRules((GrammaticalNumberRules *)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

void NormExec::normalize_group(uint64_t a1, const std::string::value_type ****a2, uint64_t a3)
{
  _QWORD *v6;
  const std::string::value_type ***v7;
  const std::string::value_type ***v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  std::string::size_type v17;
  const std::string::value_type ***v18;
  unint64_t v19;
  __int128 *v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;
  void *v26[2];
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 24) + 96))(v26);
  if (SHIBYTE(v30) < 0)
  {
    if (v29 != 8)
      goto LABEL_24;
    v6 = v28;
  }
  else
  {
    if (SHIBYTE(v30) != 8)
      goto LABEL_24;
    v6 = &v28;
  }
  if (*v6 == 0x4C414E4944524143)
  {
    memset(&v25, 0, sizeof(v25));
    v7 = *a2;
    v8 = a2[1];
    while (v7 != v8)
    {
      v9 = *((char *)*v7 + 23);
      if (v9 >= 0)
        v10 = (const std::string::value_type *)*v7;
      else
        v10 = **v7;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)*v7 + 23);
      else
        v11 = (std::string::size_type)(*v7)[1];
      std::string::append(&v25, v10, v11);
      v7 += 3;
    }
    v12 = *(_QWORD *)(a1 + 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "INTEGER");
    (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(_QWORD *)v12 + 80))(v23, v12, &v25, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = *(_QWORD *)(a1 + 56);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
    GrammaticalNumberRules::update_number(v13, a1 + 64, (uint64_t)v23, (uint64_t)__p);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
LABEL_24:
  v14 = *(_QWORD *)(a3 + 8);
  if (v14 >= *(_QWORD *)(a3 + 16))
  {
    v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)v26);
  }
  else
  {
    if (SHIBYTE(v27) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), (const std::string::value_type *)v26[0], (std::string::size_type)v26[1]);
    }
    else
    {
      v15 = *(_OWORD *)v26;
      *(_QWORD *)(v14 + 16) = v27;
      *(_OWORD *)v14 = v15;
    }
    v16 = v14 + 24;
    *(_QWORD *)(a3 + 8) = v16;
  }
  *(_QWORD *)(a3 + 8) = v16;
  v18 = *a2;
  v17 = (std::string::size_type)a2[1];
  if (v17 - (_QWORD)*a2 != 24)
  {
    v19 = 0;
    v20 = (__int128 *)(a1 + 32);
    do
    {
      if (v16 >= *(_QWORD *)(a3 + 16))
      {
        v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v20);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v20);
        v16 += 24;
      }
      *(_QWORD *)(a3 + 8) = v16;
      ++v19;
      v18 = *a2;
      v17 = (std::string::size_type)a2[1];
    }
    while (v19 < -1 - 0x5555555555555555 * ((uint64_t)(v17 - (_QWORD)*a2) >> 3));
  }
  while ((const std::string::value_type ***)v17 != v18)
  {
    v17 -= 24;
    v25.__r_.__value_.__r.__words[0] = v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  }
  a2[1] = v18;
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v28);
}

void sub_1DE9E1C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v39 + 8) = v40;
  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, __int128 **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::string *)&v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_1DE9E1E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void NashvilleFEPersistentModule::~NashvilleFEPersistentModule(NashvilleFEPersistentModule *this)
{
  NashvilleFEPersistentModule::~NashvilleFEPersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1EA9214A8;
  v3 = *((_QWORD *)this + 52);
  for (i = *((_QWORD *)this + 53); v3 != i; i = *((_QWORD *)this + 53))
  {
    v5 = *(void **)(i - 16);
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      i = *((_QWORD *)this + 53);
    }
    *((_QWORD *)this + 53) = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](i - 16);
    NashvilleFEPersistentModule::unload_resource(this, v5, v4);
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v3 = *((_QWORD *)this + 52);
  }
  v10 = (void **)((char *)this + 416);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 384);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  PersistentModule::~PersistentModule((void **)this);
}

void NashvilleFEPersistentModule::unload_resource(_QWORD *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  const char *v14;
  uint64_t i;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  uint8_t buf[16];

  if (!lpsrc
  {
    v32 = 0;
    goto LABEL_26;
  }
  v31 = v5;
  v32 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = (uint64_t *)*((_QWORD *)v5 + 1);
  if (v12)
  {
    ve_ttsResourceUnload(*(_QWORD *)(a1[37] + 280), *(_QWORD *)(a1[37] + 288), v12, *((_QWORD *)v5 + 2), v6, v7, v8, v9);
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_ERROR, "Ignore invalid resource handle", buf, 2u);
    }
    Diagnostics::log(3, "Ignore invalid resource handle", v14, v31);
  }
  v16 = a1[52];
  for (i = a1[53]; v16 != i; i = a1[53])
  {
    if (*(_QWORD *)v16)
    {
      if (v17)
      {
        v18 = *(std::__shared_weak_count **)(v16 + 8);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          if (v31[1] == v17[1])
          {
            i = a1[53];
            goto LABEL_34;
          }
          do
            v21 = __ldaxr(v19);
          while (__stlxr(v21 - 1, v19));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else if (v31[1] == v17[1])
        {
          v18 = 0;
LABEL_34:
          v24 = (__int128 *)(v16 + 16);
          if (v16 + 16 != i)
          {
            do
            {
              v25 = *v24;
              *(_QWORD *)v24 = 0;
              *((_QWORD *)v24 + 1) = 0;
              v26 = *(std::__shared_weak_count **)(v16 + 8);
              *(_OWORD *)v16 = v25;
              if (v26)
              {
                v27 = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              ++v24;
              v16 += 16;
            }
            while (v24 != (__int128 *)i);
            i = a1[53];
          }
          while (i != v16)
          {
            i -= 16;
            std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](i);
          }
          a1[53] = v16;
          if (v18)
          {
            v29 = (unint64_t *)&v18->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          break;
        }
      }
    }
    v16 += 16;
  }
LABEL_26:
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1DE9E22C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void NashvilleFEModule::~NashvilleFEModule(NashvilleFEModule *this)
{
  NashvilleFEModule::~NashvilleFEModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91ED10;
  dispatch_release(*((dispatch_object_t *)this + 55));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((_QWORD **)this + 66));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::mutex::~mutex((std::mutex *)this + 5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void NashvilleFEModule::retrieve(std::condition_variable *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *m;
  std::unique_lock<std::mutex> v5;

  if (*(_QWORD *)this[3].__cv_.__opaque)
  {
    Module::retrieve((Module *)this, a2);
    return;
  }
  m = (std::mutex *)&this[6].__cv_.__opaque[24];
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&this[6].__cv_.__opaque[24];
  v5.__owns_ = 1;
  std::mutex::lock((std::mutex *)&this[6].__cv_.__opaque[24]);
  if (LODWORD(this[9].__cv_.__sig) == 2)
  {
    Module::retrieve((Module *)this, a2);
LABEL_10:
    std::mutex::unlock(m);
    return;
  }
  LODWORD(this[9].__cv_.__sig) = 0;
  std::condition_variable::notify_all(this + 8);
  while (!LODWORD(this[9].__cv_.__sig))
    std::condition_variable::wait(this + 8, &v5);
  Module::retrieve((Module *)this, a2);
  if (v5.__owns_)
  {
    m = v5.__m_;
    goto LABEL_10;
  }
}

void sub_1DE9E23D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::cancel(NashvilleFEModule *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (std::recursive_mutex *)((char *)this + 208);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 208));
  *((_BYTE *)this + 160) = 1;
  std::recursive_mutex::unlock(v2);
  v3 = *((_QWORD *)this + 34);
  v19 = 0;
  if (!ve_ttsGetRsrc(*(_QWORD *)(v3 + 280), *(_QWORD *)(v3 + 288), &v19))
  {
    NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v17, (unint64_t)v19);
    if (v17)
    {
      v10 = ve_ttsStop(*(_QWORD *)(v3 + 280), *(_QWORD *)(v3 + 288), v4, v5, v6, v7, v8, v9);
      if (v10)
      {
        v11 = v10;
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v21 = v11;
          _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_ERROR, "Unable to cancel in LegacyFE, error: 0x%08zx", buf, 0xCu);
        }
        Diagnostics::log(3, "Unable to cancel in LegacyFE, error: 0x%08zx", v13, v11);
      }
    }
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1DE9E255C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::clean_up(NashvilleFEModule *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 320);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)this + 5);
  while (*((_DWORD *)this + 108) != 2)
  {
    *((_DWORD *)this + 108) = 0;
    std::condition_variable::notify_all((std::condition_variable *)this + 8);
    std::condition_variable::wait((std::condition_variable *)this + 8, &v2);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 36) + 64))(*((_QWORD *)this + 36));
  Module::clean_up(this);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_1DE9E263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void NashvilleFEModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  const char *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  UTFRegex *v33;
  int v34;
  const char *v35;
  int64_t v36;
  UText *v37;
  UText *v38;
  uint64_t v39;
  URegularExpression **v40;
  uint64_t v41;
  URegularExpression **v42;
  uint64_t v43;
  const UChar *v44;
  int32_t v45;
  const UChar *v46;
  int32_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  void **v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  unint64_t v54;
  std::string *v55;
  int data;
  int v57;
  int v59;
  int v60;
  _BOOL4 v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  void **v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  NSObject *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  BOOL v100;
  unint64_t *v101;
  unint64_t v102;
  int v103;
  _QWORD block[6];
  std::__shared_weak_count *v105;
  __int128 __str;
  char **v107;
  std::__shared_weak_count *v108;
  _BYTE v109[24];
  void *v110[2];
  char v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _QWORD v116[3];
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  std::string v120;
  std::string buf[11];
  std::string __p[11];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 432) = 0;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(__p, *(_QWORD *)(v4 + 8));
    v6 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(__p, *(_QWORD *)(v4 + 8));
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = __p;
  else
    v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  memset(v116, 0, sizeof(v116));
  v9 = *(_QWORD *)(a1 + 304);
  v10 = a2[1];
  v114 = *a2;
  v115 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 24))(v9, &v114);
  v13 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 304) + 16))(__p);
  v21 = *(std::__shared_weak_count **)(*(_QWORD *)v16 + 16);
  v112 = *(_QWORD *)(*(_QWORD *)v16 + 8);
  v113 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v27 = *(_QWORD *)(a1 + 272);
  LOWORD(v117) = 1;
  ve_ttsGetLanguageList(*(_QWORD *)(v27 + 264), *(_QWORD *)(v27 + 272), (char *)buf, &v117, v17, v18, v19, v20);
  memcpy(__p, buf, 0x104uLL);
  std::string::basic_string[abi:ne180100]<0>(v110, &__p[5].__r_.__value_.__s.__data_[8]);
  UTFRegex::UTFRegex((UTFRegex *)v109, **(const UTFRegex ***)(a1 + 448));
  v28 = v112;
  SiriTTS::preprocess_for_vendor_voice(__p, (const void **)v110, (UTFRegex *)v109, v112, (_QWORD **)(a1 + 520));
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  v29 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v28 + 16) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
  *(_OWORD *)v28 = v29;
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  UTFRegex::~UTFRegex((UTFRegex *)v109);
  *(_QWORD *)&__str = v28;
  *((_QWORD *)&__str + 1) = v113;
  if (v113)
  {
    v30 = (unint64_t *)&v113->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (char *)operator new(0x30uLL);
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  *(_QWORD *)v32 = &off_1EA9366F0;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v32 + 4) = 0;
  *((_QWORD *)v32 + 5) = 0;
  v107 = (char **)(v32 + 24);
  v108 = (std::__shared_weak_count *)v32;
  if (*(_BYTE *)(a1 + 496))
  {
    v33 = *(UTFRegex **)(a1 + 448);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    v34 = *(char *)(v28 + 23);
    if (v34 >= 0)
      v35 = (const char *)v28;
    else
      v35 = *(const char **)v28;
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v28 + 23);
    else
      v36 = *(_QWORD *)(v28 + 8);
    v37 = utext_openUTF8(0, v35, v36, (UErrorCode *)__p);
    if (SLODWORD(__p[0].__r_.__value_.__l.__data_) <= 0)
      v38 = v37;
    else
      v38 = 0;
    UTFRegex::set_text(v33, v38, 1);
    v39 = 0;
    v103 = 0;
    while (UTFRegex::search(*(URegularExpression ***)(a1 + 448)))
    {
      v40 = *(URegularExpression ***)(a1 + 448);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      v41 = uregex_start(*v40, 0, (UErrorCode *)__p);
      v42 = *(URegularExpression ***)(a1 + 448);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      v43 = uregex_end(*v42, 0, (UErrorCode *)__p);
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)__p, *(URegularExpression ***)(a1 + 448), 1);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = (const UChar *)__p;
      else
        v44 = (const UChar *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        v45 = __p[0].__r_.__value_.__r.__words[1];
      UTFString::to_utf8(buf, v44, v45);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      UTFRegex::group<std::basic_string<char16_t>>((uint64_t)__p, *(URegularExpression ***)(a1 + 448), 2);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = (const UChar *)__p;
      else
        v46 = (const UChar *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        v47 = __p[0].__r_.__value_.__r.__words[1];
      UTFString::to_utf8(&v120, v46, v47);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!(_DWORD)v41)
        {
LABEL_67:
          v41 = v39;
          goto LABEL_84;
        }
      }
      else if (!(_DWORD)v41)
      {
        goto LABEL_67;
      }
      v48 = (std::__shared_weak_count *)operator new(0x50uLL);
      v48->__shared_owners_ = 0;
      v49 = (unint64_t *)&v48->__shared_owners_;
      v48->__shared_weak_owners_ = 0;
      v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932588;
      v48[1].std::__shared_count = 0u;
      v50 = (void **)&v48[1].__vftable;
      *(_OWORD *)&v48[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v48[2].__shared_owners_ = 0u;
      v48[3].__vftable = 0;
      *(_QWORD *)&v119 = v48 + 1;
      *((_QWORD *)&v119 + 1) = v48;
      if ((*((_BYTE *)&buf[0].__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (buf[0].__r_.__value_.__l.__size_ != 2)
          goto LABEL_80;
        v51 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(buf[0].__r_.__value_.__r.__words[2]) != 2)
          goto LABEL_80;
        v51 = buf;
      }
      if (LOWORD(v51->__r_.__value_.__l.__data_) == 28276)
      {
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v120.__r_.__value_.__l.__size_ == 5)
          {
            v53 = (std::string *)v120.__r_.__value_.__r.__words[0];
LABEL_94:
            data = (int)v53->__r_.__value_.__l.__data_;
            v57 = v53->__r_.__value_.__s.__data_[4];
            if (data == 1818587251 && v57 == 108)
            {
              std::string::basic_string(__p, (const std::string *)__str, (int)v39, (int)v41 - (int)v39, (std::allocator<char> *)&v117);
              NashvilleFEModule::update_spell_text((uint64_t)&v117, a1, __p);
              if (SHIBYTE(v48[1].__shared_weak_owners_) < 0)
                operator delete(*v50);
              *(_OWORD *)v50 = v117;
              v48[1].__shared_weak_owners_ = v118;
              MEMORY[0x1DF0ECA80](&v48[2], &byte_1DEBD87CE);
              LODWORD(v48[3].__vftable) = v39;
              std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v107, &v119);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              v103 = 1;
              goto LABEL_81;
            }
          }
        }
        else if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) == 5)
        {
          v53 = &v120;
          goto LABEL_94;
        }
      }
      if ((*((_BYTE *)&buf[0].__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (buf[0].__r_.__value_.__l.__size_ != 2)
          goto LABEL_80;
        v52 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(buf[0].__r_.__value_.__r.__words[2]) != 2)
          goto LABEL_80;
        v52 = buf;
      }
      if (LOWORD(v52->__r_.__value_.__l.__data_) == 28276)
      {
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v120.__r_.__value_.__l.__size_ != 6)
            goto LABEL_80;
          v55 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) != 6)
            goto LABEL_80;
          v55 = &v120;
        }
        v59 = (int)v55->__r_.__value_.__l.__data_;
        v60 = WORD2(v55->__r_.__value_.__r.__words[0]);
        v62 = v59 == 1836216174 && v60 == 27745;
        if ((v62 & v103) == 1)
        {
          std::string::basic_string(__p, (const std::string *)__str, (int)v39, (int)v43 - (int)v39, (std::allocator<char> *)&v117);
          NashvilleFEModule::update_spell_text((uint64_t)&v117, a1, __p);
          if (SHIBYTE(v48[1].__shared_weak_owners_) < 0)
            operator delete(*v50);
          *(_OWORD *)v50 = v117;
          v48[1].__shared_weak_owners_ = v118;
          MEMORY[0x1DF0ECA80](&v48[2], &byte_1DEBD87CE);
          LODWORD(v48[3].__vftable) = v39;
          std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v107, &v119);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v103 = 1;
          v41 = v43;
          goto LABEL_81;
        }
      }
LABEL_80:
      v41 = v39;
      do
LABEL_81:
        v54 = __ldaxr(v49);
      while (__stlxr(v54 - 1, v49));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
LABEL_84:
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      v39 = v41;
    }
    if (*(char *)(__str + 23) < 0)
      v63 = *(_QWORD *)(__str + 8);
    else
      v63 = *(unsigned __int8 *)(__str + 23);
    if (v63 > (int)v39)
    {
      std::string::basic_string(__p, (const std::string *)__str, (int)v39, v63 - (int)v39, (std::allocator<char> *)buf);
      v64 = (std::__shared_weak_count *)operator new(0x50uLL);
      v64->__shared_owners_ = 0;
      v65 = (unint64_t *)&v64->__shared_owners_;
      v64->__shared_weak_owners_ = 0;
      v64[1].std::__shared_count = 0u;
      v66 = (void **)&v64[1].__vftable;
      v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932588;
      *(_OWORD *)&v64[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v64[2].__shared_owners_ = 0u;
      v64[3].__vftable = 0;
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64[1];
      v120.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
      NashvilleFEModule::update_spell_text((uint64_t)buf, a1, __p);
      if (SHIBYTE(v64[1].__shared_weak_owners_) < 0)
        operator delete(*v66);
      *(_OWORD *)v66 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      v64[1].__shared_weak_owners_ = buf[0].__r_.__value_.__r.__words[2];
      MEMORY[0x1DF0ECA80](&v64[2], &byte_1DEBD87CE);
      LODWORD(v64[3].__vftable) = v39;
      std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100](v107, (__int128 *)&v120);
      do
        v67 = __ldaxr(v65);
      while (__stlxr(v67 - 1, v65));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v68 = *v107;
    v69 = v107[1];
    if ((unint64_t)(v69 - *v107) >= 0x11)
    {
      while (2)
      {
        if (v68 == v69)
        {
          v77 = v69;
        }
        else
        {
          v70 = *(_QWORD *)v68;
          v71 = (std::__shared_weak_count *)*((_QWORD *)v68 + 1);
          __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)v68;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(a1, v70);
          if (v71)
          {
            v75 = (unint64_t *)&v71->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          if (!v74)
          {
            v68 += 16;
            continue;
          }
          v77 = v69;
          if (v68 != v69)
          {
            v94 = v68 + 16;
            if (v68 + 16 != v69)
            {
              v77 = v68;
              while (1)
              {
                v95 = *((_QWORD *)v68 + 2);
                v96 = (std::__shared_weak_count *)*((_QWORD *)v68 + 3);
                v68 = v94;
                __p[0].__r_.__value_.__r.__words[0] = v95;
                __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v96;
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldxr(v97);
                  while (__stxr(v98 + 1, v97));
                }
                v99 = NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(a1, v95);
                v100 = v99;
                if (v96)
                {
                  v101 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                    break;
                }
                if (!v99)
                  goto LABEL_186;
LABEL_187:
                v94 = v68 + 16;
                if (v68 + 16 == v69)
                  goto LABEL_144;
              }
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
              if (v100)
                goto LABEL_187;
LABEL_186:
              std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v77, (__int128 *)v68);
              v77 += 16;
              goto LABEL_187;
            }
            v77 = v68;
          }
        }
        break;
      }
LABEL_144:
      v78 = v107[1];
      if (v77 != v78)
      {
        while (v78 != v77)
        {
          v78 -= 16;
          std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v78);
        }
        v107[1] = v77;
      }
    }
  }
  else
  {
    *(_DWORD *)(v28 + 48) = 0;
    std::vector<std::shared_ptr<TacotronFeature>>::push_back[abi:ne180100]((char **)v32 + 3, &__str);
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  if (*((_QWORD *)&__str + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(NSObject **)(a1 + 440);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke;
  block[3] = &__block_descriptor_tmp_2090;
  block[4] = a1;
  block[5] = v107;
  v105 = v108;
  if (v108)
  {
    v83 = (unint64_t *)&v108->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  dispatch_async(v82, block);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v108;
  if (v108)
  {
    v89 = (unint64_t *)&v108->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v111 < 0)
    operator delete(v110[0]);
  v91 = v113;
  if (v113)
  {
    v92 = (unint64_t *)&v113->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DE9E31A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  a43 = &a35;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void ___ZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t ***v3;
  uint64_t **v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  uint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  const char *v38;
  NashvilleFE *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  NSObject *v46;
  const char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  float v64;
  NashvilleFE *v65;
  uint8_t *v66;
  std::__shared_weak_count *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD v71[3];
  uint8_t *v72;
  uint8_t buf[24];
  uint8_t *v74;
  uint8_t v75[24];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v64 = 0.0;
  rep = 0;
  kdebug_trace();
  v3 = *(uint64_t ****)(a1 + 40);
  v5 = *v3;
  v4 = v3[1];
  if (*v3 != v4)
  {
    do
    {
      v7 = *v5;
      v6 = (std::__shared_weak_count *)v5[1];
      v62 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v10 = *(_QWORD **)(v2 + 272);
      v11 = *((_DWORD *)v7 + 12);
      v12 = *(std::__shared_weak_count **)(v2 + 296);
      v60 = *(_QWORD *)(v2 + 288);
      v61 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v72 = 0;
      v15 = (uint8_t *)operator new(0x20uLL);
      *(_QWORD *)v15 = &off_1EA931CF0;
      *((_QWORD *)v15 + 1) = v2;
      *((_QWORD *)v15 + 2) = &rep;
      *((_QWORD *)v15 + 3) = &v64;
      v72 = v15;
      v68 = 0;
      v16 = *((unsigned __int8 *)v7 + 23);
      v17 = (char)v16;
      if ((v16 & 0x80u) != 0)
        v16 = *((unsigned int *)v7 + 2);
      if (v17 >= 0)
        v18 = v7;
      else
        v18 = (uint64_t *)*v7;
      v69 = v16;
      v70 = v18;
      v19 = (char *)operator new(0x68uLL);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = &off_1EA9339E0;
      *(_OWORD *)(v19 + 24) = 0u;
      v20 = (uint64_t)(v19 + 24);
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      v66 = (uint8_t *)(v19 + 24);
      v67 = (std::__shared_weak_count *)v19;
      v21 = (char *)operator new(0x70uLL);
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *(_QWORD *)v21 = &off_1EA934D20;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_OWORD *)(v21 + 72) = 0u;
      *(_OWORD *)(v21 + 88) = 0u;
      *((_QWORD *)v21 + 13) = 0;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_QWORD *)buf = v21 + 24;
      *(_QWORD *)&buf[8] = v21;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v20, (__int128 *)buf);
      v22 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v66;
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v66 + 2, v60, (uint64_t)v61);
      std::string::operator=((std::string *)(*(_QWORD *)v25 + 32), (const std::string *)v7);
      std::string::operator=((std::string *)(*(_QWORD *)v25 + 56), (const std::string *)v7);
      v26 = v25 + 48;
      *(_DWORD *)(*(_QWORD *)v25 + 80) = v11;
      v27 = v72;
      if (v72)
      {
        if (v72 == (uint8_t *)v71)
        {
          v74 = buf;
          (*(void (**)(_QWORD *, uint8_t *))(v71[0] + 24))(v71, buf);
          v27 = v74;
        }
        else
        {
          v27 = (uint8_t *)(*(uint64_t (**)(void))(*(_QWORD *)v72 + 16))();
          v74 = v27;
        }
      }
      else
      {
        v74 = 0;
      }
      if (v26 != buf)
      {
        v28 = (uint8_t *)*((_QWORD *)v25 + 9);
        if (v27 == buf)
        {
          if (v28 == v26)
          {
            (*(void (**)(uint8_t *, uint8_t *))(*(_QWORD *)buf + 24))(buf, v75);
            (*(void (**)(uint8_t *))(*(_QWORD *)v74 + 32))(v74);
            v74 = 0;
            (*(void (**)(_QWORD, uint8_t *))(**((_QWORD **)v25 + 9) + 24))(*((_QWORD *)v25 + 9), buf);
            (*(void (**)(_QWORD))(**((_QWORD **)v25 + 9) + 32))(*((_QWORD *)v25 + 9));
            *((_QWORD *)v25 + 9) = 0;
            v74 = buf;
            (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)v75 + 24))(v75, (_QWORD *)v25 + 6);
            (*(void (**)(uint8_t *))(*(_QWORD *)v75 + 32))(v75);
            *((_QWORD *)v25 + 9) = v26;
            v27 = v74;
          }
          else
          {
            (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, (_QWORD *)v25 + 6);
            (*(void (**)(uint8_t *))(*(_QWORD *)v74 + 32))(v74);
            v27 = (uint8_t *)*((_QWORD *)v25 + 9);
            v74 = v27;
            *((_QWORD *)v25 + 9) = v26;
          }
        }
        else
        {
          if (v28 == v26)
          {
            (*(void (**)(_QWORD *, uint8_t *))(*(_QWORD *)v26 + 24))((_QWORD *)v25 + 6, buf);
            (*(void (**)(_QWORD))(**((_QWORD **)v25 + 9) + 32))(*((_QWORD *)v25 + 9));
            *((_QWORD *)v25 + 9) = v74;
            v27 = buf;
            v74 = buf;
LABEL_35:
            v29 = 4;
            goto LABEL_36;
          }
          v74 = (uint8_t *)*((_QWORD *)v25 + 9);
          *((_QWORD *)v25 + 9) = v27;
          v27 = v28;
        }
      }
      if (v27 == buf)
      {
        v27 = buf;
        goto LABEL_35;
      }
      if (!v27)
        goto LABEL_37;
      v29 = 5;
LABEL_36:
      (*(void (**)(void))(*(_QWORD *)v27 + 8 * v29))();
LABEL_37:
      v31 = v10[37];
      v30 = v10[38];
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)v25 + 5);
      *((_QWORD *)v25 + 4) = v31;
      *((_QWORD *)v25 + 5) = v30;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v65 = 0;
      if (ve_ttsGetRsrc(v10[35], v10[36], &v65))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DE3F6000, v37, OS_LOG_TYPE_ERROR, "Unable to ve_ttsGetRsrc for binding bridge", buf, 2u);
        }
        Diagnostics::log(3, "Unable to ve_ttsGetRsrc for binding bridge", v38);
      }
      else
      {
        v39 = v65;
        v40 = v67;
        *(_QWORD *)buf = v25;
        *(_QWORD *)&buf[8] = v67;
        if (v67)
        {
          v41 = (unint64_t *)&v67->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        NashvilleFE::set_binding_with_rsrc(v39, (uint64_t *)buf);
        if (v40)
        {
          v43 = (unint64_t *)&v40->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v45 = ve_ttsProcessText2Speech(v10[35], v10[36], (uint64_t)&v68);
        *v10 = v45;
        if (v45)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v46 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            v48 = *v10;
            *(_DWORD *)v75 = 134217984;
            *(_QWORD *)&v75[4] = v48;
            _os_log_impl(&dword_1DE3F6000, v46, OS_LOG_TYPE_ERROR, "Unable to ve_ttsProcessText2Speech in LegacyFE, error: 0x%08zx", v75, 0xCu);
          }
          Diagnostics::log(3, "Unable to ve_ttsProcessText2Speech in LegacyFE, error: 0x%08zx", v47, *v10);
        }
        *(_OWORD *)v75 = 0uLL;
        NashvilleFE::set_binding_with_rsrc(v65, (uint64_t *)v75);
      }
      v49 = v67;
      if (v67)
      {
        v50 = (unint64_t *)&v67->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v72;
      if (v72 == (uint8_t *)v71)
      {
        v52 = (uint8_t *)v71;
        v53 = 4;
      }
      else
      {
        if (!v72)
          goto LABEL_76;
        v53 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_76:
      if (v61)
      {
        v54 = (unint64_t *)&v61->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (v62)
      {
        v56 = (unint64_t *)&v62->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v58 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v64 / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v58, OS_LOG_TYPE_DEFAULT, "Nashville FE Latency : %.3f s", buf, 0xCu);
  }
  Diagnostics::log(5, "Nashville FE Latency : %.3f s", v59, v64 / 1000.0);
  std::mutex::lock((std::mutex *)(v2 + 320));
  *(_DWORD *)(v2 + 432) = 2;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 384));
  std::mutex::unlock((std::mutex *)(v2 + 320));
}

void sub_1DE9E3ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c80_ZTSNSt3__110shared_ptrINS_6vectorINS0_I13FrontendInputEENS_9allocatorIS3_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c80_ZTSNSt3__110shared_ptrINS_6vectorINS0_I13FrontendInputEENS_9allocatorIS3_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
}

void NashvilleFE::set_binding_with_rsrc(NashvilleFE *a1, uint64_t *a2)
{
  std::mutex *v4;
  NashvilleFE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  BOOL v29;

  v4 = (std::mutex *)NashvilleFE::binding_mutex(a1);
  std::mutex::lock(v4);
  v6 = NashvilleFE::rsrc_bindings(v5);
  v7 = *a2;
  v9 = (uint64_t *)(v6 + 8);
  v8 = *(uint64_t **)(v6 + 8);
  if (*a2)
  {
    v10 = (uint64_t *)(v6 + 8);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v10 = v8;
          v11 = v8[4];
          if (v11 <= (unint64_t)a1)
            break;
          v8 = (uint64_t *)*v8;
          v9 = v10;
          if (!*v10)
            goto LABEL_9;
        }
        if (v11 >= (unint64_t)a1)
          break;
        v8 = (uint64_t *)v8[1];
        if (!v8)
        {
          v9 = v10 + 1;
          goto LABEL_9;
        }
      }
      v12 = v8;
    }
    else
    {
LABEL_9:
      v12 = (uint64_t *)operator new(0x38uLL);
      v12[5] = 0;
      v12[6] = 0;
      v12[4] = (uint64_t)a1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v10;
      *v9 = (uint64_t)v12;
      v13 = **(_QWORD **)v6;
      v14 = v12;
      if (v13)
      {
        *(_QWORD *)v6 = v13;
        v14 = (uint64_t *)*v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 8), v14);
      ++*(_QWORD *)(v6 + 16);
      v7 = *a2;
    }
    v22 = a2[1];
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)v12[6];
    v12[5] = v7;
    v12[6] = v22;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else if (v8)
  {
    v15 = (uint64_t *)(v6 + 8);
    v16 = *(_QWORD **)(v6 + 8);
    do
    {
      v17 = v16[4];
      v18 = v17 >= (unint64_t)a1;
      if (v17 >= (unint64_t)a1)
        v19 = v16;
      else
        v19 = v16 + 1;
      if (v18)
        v15 = v16;
      v16 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v15 != v9 && v15[4] <= (unint64_t)a1)
    {
      v20 = (uint64_t *)v15[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        v28 = v15;
        do
        {
          v21 = (uint64_t *)v28[2];
          v29 = *v21 == (_QWORD)v28;
          v28 = v21;
        }
        while (!v29);
      }
      if (*(uint64_t **)v6 == v15)
        *(_QWORD *)v6 = v21;
      --*(_QWORD *)(v6 + 16);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v8, v15);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 5));
      operator delete(v15);
    }
  }
  std::mutex::unlock(v4);
}

void sub_1DE9E3D88(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t NashvilleFE::binding_mutex(NashvilleFE *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&NashvilleFE::binding_mutex(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&NashvilleFE::binding_mutex(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::binding_mutex(void)::$_0 &&>>);
  }
  return NashvilleFE::binding_mutex(void)::_mutex;
}

uint64_t NashvilleFE::rsrc_bindings(NashvilleFE *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&NashvilleFE::rsrc_bindings(void)::once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&NashvilleFE::rsrc_bindings(void)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::rsrc_bindings(void)::$_0 &&>>);
  }
  return NashvilleFE::rsrc_bindings(void)::_bridge_bindings;
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::rsrc_bindings(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  NashvilleFE::rsrc_bindings(void)::_bridge_bindings = (uint64_t)result;
  return result;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<NashvilleFE::binding_mutex(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  NashvilleFE::binding_mutex(void)::_mutex = v0;
  return result;
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<NashvilleAdapterModuleInput>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void std::__shared_ptr_emplace<NashvilleFEBinding>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9339E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFEBinding>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9339E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NashvilleFEBinding>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

void _ZNSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEED0Ev()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA931CF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE7__cloneEPNS0_6__baseISB_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA931CF0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEEclEOSA_(uint64_t a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  std::string::size_type v4;
  uint64_t v5;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::string *v14;
  const char *v15;
  std::string *p_buf;
  NSObject *v17;
  std::string *v18;
  const char *v19;
  std::string *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::unique_lock<std::mutex> __lk;
  uint8_t v45[16];
  std::string buf;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v5 + 320);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v5 + 320));
  v6 = (std::chrono::steady_clock::now().__d_.__rep_ - **(_QWORD **)(a1 + 16)) / 1000000;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = (double)v6 / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_DEFAULT, "Nashville FE Chunk Latency : %.3f s", (uint8_t *)&buf, 0xCu);
  }
  Diagnostics::log(5, "Nashville FE Chunk Latency : %.3f s", v8, (double)v6 / 1000.0);
  **(float **)(a1 + 24) = **(float **)(a1 + 24) + (float)v6;
  *(_BYTE *)(v4 + 144) = 0;
  v9 = *(_QWORD *)v4;
  if (*(_QWORD *)(v4 + 8) != *(_QWORD *)v4)
  {
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(_QWORD *)(v9 + 80);
    while (v10 != v11)
    {
      if ((*(_DWORD *)v10 - 1) <= 1)
      {
        v12 = *(char *)(v4 + 143) < 0 ? *(_QWORD *)(v4 + 128) : *(unsigned __int8 *)(v4 + 143);
        if (*(_QWORD *)(v10 + 40) + *(_QWORD *)(v10 + 32) >= v12)
        {
          *(_BYTE *)(v4 + 144) = 1;
          break;
        }
      }
      v10 += 56;
    }
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&buf, v4 + 120);
    v14 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v45 = 136315138;
    *(_QWORD *)&v45[4] = v14;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&buf, v4 + 120);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v17 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&buf, v4 + 72);
    v18 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v45 = 136315138;
    *(_QWORD *)&v45[4] = v18;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&buf, v4 + 72);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &buf;
  else
    v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v23 = *(unsigned __int8 *)(v4 + 144);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v23;
    _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_INFO, "End of stream: %d", (uint8_t *)&buf, 8u);
  }
  Diagnostics::log(6, "End of stream: %d", v22, *(unsigned __int8 *)(v4 + 144));
  v24 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v24->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  *(_OWORD *)&v24[1].__shared_owners_ = 0u;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&v24[1].__shared_owners_;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
  v27 = v26[5];
  if (v27)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923288;
    buf.__r_.__value_.__l.__size_ = v4;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v3;
    if (v3)
    {
      v28 = (unint64_t *)&v3->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v27 + 8, (__int128 *)&buf.__r_.__value_.__r.__words[1]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA923288;
    v30 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
    if (buf.__r_.__value_.__r.__words[2])
    {
      v31 = (unint64_t *)(buf.__r_.__value_.__r.__words[2] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    v33 = (_QWORD *)operator new();
    *v33 = &off_1EA923288;
    v33[1] = v4;
    v33[2] = v3;
    if (v3)
    {
      v34 = (unint64_t *)&v3->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = v26[5];
    v26[5] = (uint64_t)v33;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24[1];
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  do
    v37 = __ldxr(p_shared_owners);
  while (__stxr(v37 + 1, p_shared_owners));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 72))(v5, &buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_DWORD *)(v5 + 432) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(v5 + 384));
  while (*(_DWORD *)(v5 + 432))
    std::condition_variable::wait((std::condition_variable *)(v5 + 384), &__lk);
  (*(std::chrono::steady_clock::time_point **)(a1 + 16))->__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  do
    v41 = __ldaxr(p_shared_owners);
  while (__stlxr(v41 - 1, p_shared_owners));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v3)
  {
    v42 = (unint64_t *)&v3->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1DE9E46F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__shared_weak_count *v16;
  std::mutex *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::mutex::unlock(v17);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEEEUb_E3__3))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN17NashvilleFEModule12process_dataENS_10shared_ptrI11AgglomerateEEEUb_E3__3NS_9allocatorIS6_EEFvNS3_I15FrontendFeatureEEEE11target_typeEv()
{
  return &_ZTIZZN17NashvilleFEModule12process_dataENSt3__110shared_ptrI11AgglomerateEEEUb_E3__3;
}

void NashvilleFEModule::update_spell_text(uint64_t a1, uint64_t a2, std::string *a3)
{
  UTFRegex *v6;
  int v7;
  const char *v8;
  int64_t size;
  UText *v10;
  UText *v11;
  URegularExpression **v12;
  int32_t v13;
  std::string::size_type v14;
  unint64_t v15;
  int32_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  uint64_t v27;
  std::string *v28;
  std::string *v30;
  std::string::size_type v31;
  unint64_t v32;
  std::string::size_type v33;
  int v34;
  int v35;
  UTFRegex *v36;
  int v37;
  const char *v38;
  int64_t v39;
  UText *v40;
  UText *v41;
  URegularExpression **v42;
  int32_t v43;
  std::string::size_type v44;
  std::string *p_p;
  std::string::size_type v46;
  std::string __p;
  UErrorCode status;

  v6 = *(UTFRegex **)(a2 + 480);
  status = U_ZERO_ERROR;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v7 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    v8 = (const char *)a3;
  else
    v8 = (const char *)a3->__r_.__value_.__r.__words[0];
  if (v7 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  v10 = utext_openUTF8(0, v8, size, (UErrorCode *)&__p);
  if (SLODWORD(__p.__r_.__value_.__l.__data_) <= 0)
    v11 = v10;
  else
    v11 = 0;
  UTFRegex::set_text(v6, v11, 1);
  if (uregex_find(*(URegularExpression **)v6, 0, &status))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v12 = *(URegularExpression ***)(a2 + 480);
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    v13 = uregex_end(*v12, 0, (UErrorCode *)&__p);
    v14 = v13;
    std::string::basic_string(&__p, a3, 0, v13, (std::allocator<char> *)&status);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = __p;
    v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v15 & 0x80u) != 0)
      v15 = a3->__r_.__value_.__l.__size_;
    if (v15 > v13)
    {
      v16 = v13;
      while (1)
      {
        v17 = *std::string::at(a3, v14);
        if (v17 < 0 && (v17 + 62) > 0x32u)
        {
          v18 = 1;
          goto LABEL_49;
        }
        v19 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
        {
          v24 = (std::string *)a3->__r_.__value_.__r.__words[0];
          LODWORD(v20) = v16 + 1;
          v22 = *(unsigned __int8 *)(a3->__r_.__value_.__r.__words[0] + v14);
          if ((v22 + 62) >= 0x33u || a3->__r_.__value_.__l.__size_ == (int)v20)
            goto LABEL_45;
          v21 = (int)v20;
        }
        else
        {
          LODWORD(v20) = v16 + 1;
          v21 = v16 + 1;
          v22 = a3->__r_.__value_.__s.__data_[v14];
          if ((v22 + 11) < 0xCDu || v19 == (int)v20)
            goto LABEL_45;
          v24 = a3;
        }
        v25 = v24->__r_.__value_.__s.__data_[v21];
        if ((v22 & 0xF0) == 0xE0)
          break;
        if (v22 > 0xDF)
        {
          if (((byte_1DED166DF[v25 >> 4] >> (v22 & 7)) & 1) == 0)
            goto LABEL_45;
          v20 = v16 + 2;
          if ((v19 & 0x80) != 0)
          {
            v33 = a3->__r_.__value_.__l.__size_;
            if (v33 == v20)
              goto LABEL_45;
            v28 = (std::string *)a3->__r_.__value_.__r.__words[0];
            if (*(char *)(a3->__r_.__value_.__r.__words[0] + v20) > -65)
              goto LABEL_45;
            LODWORD(v20) = v16 + 3;
            if (v33 == v16 + 3)
              goto LABEL_45;
            v27 = (int)v20;
          }
          else
          {
            if (v19 == v20)
              goto LABEL_45;
            if (a3->__r_.__value_.__s.__data_[v20] >= -64)
              goto LABEL_45;
            LODWORD(v20) = v16 + 3;
            if (v19 == v16 + 3)
              goto LABEL_45;
            v27 = (int)v20;
            v28 = a3;
          }
          v34 = v28->__r_.__value_.__s.__data_[v27];
          v35 = v16 + 4;
LABEL_68:
          if (v34 < -64)
            LODWORD(v20) = v35;
          goto LABEL_45;
        }
        if ((char)v25 < -64)
          LODWORD(v20) = v16 + 2;
LABEL_45:
        v18 = v20 - v16;
        if (v17 == 27 && v18 == 1)
        {
          std::string::basic_string(&__p, a3, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&status);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v46 = __p.__r_.__value_.__l.__size_;
          std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v46);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_49:
        std::string::basic_string(&__p, a3, v14, v18, (std::allocator<char> *)&status);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &__p;
        else
          v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v31 = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a1, (const std::string::value_type *)v30, v31);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::push_back((std::string *)a1, 11);
        v16 += v18;
        v14 = v16;
        v32 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if ((v32 & 0x80u) != 0)
          v32 = a3->__r_.__value_.__l.__size_;
        if (v32 <= v16)
          return;
      }
      if (((a00000000000000[v22 & 0xF] >> (v25 >> 5)) & 1) == 0)
        goto LABEL_45;
      v20 = v16 + 2;
      if ((v19 & 0x80) != 0)
      {
        if (a3->__r_.__value_.__l.__size_ == v20)
          goto LABEL_45;
        v26 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      else
      {
        v26 = a3;
        if (v19 == v20)
          goto LABEL_45;
      }
      v34 = v26->__r_.__value_.__s.__data_[v20];
      v35 = v16 + 3;
      goto LABEL_68;
    }
  }
  else
  {
    v36 = *(UTFRegex **)(a2 + 504);
    status = U_ZERO_ERROR;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    v37 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v37 >= 0)
      v38 = (const char *)a3;
    else
      v38 = (const char *)a3->__r_.__value_.__r.__words[0];
    if (v37 >= 0)
      v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      v39 = a3->__r_.__value_.__l.__size_;
    v40 = utext_openUTF8(0, v38, v39, (UErrorCode *)&__p);
    if (SLODWORD(__p.__r_.__value_.__l.__data_) <= 0)
      v41 = v40;
    else
      v41 = 0;
    UTFRegex::set_text(v36, v41, 1);
    if (uregex_find(*(URegularExpression **)v36, 0, &status))
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v42 = *(URegularExpression ***)(a2 + 504);
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v43 = uregex_end(*v42, 0, (UErrorCode *)&__p);
      std::string::basic_string(&__p, a3, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&status);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v44 = __p.__r_.__value_.__r.__words[2];
    }
    else
    {
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a1, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
        return;
      }
      *(_OWORD *)a1 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
      v44 = a3->__r_.__value_.__r.__words[2];
    }
    *(_QWORD *)(a1 + 16) = v44;
  }
}

void sub_1DE9E4C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

BOOL NashvilleFEModule::split_requests(std::shared_ptr<FrontendInput>)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  UTFRegex *v4;
  std::string::size_type v5;
  std::string *p_p;
  std::string::size_type size;
  UText *v8;
  UText *v9;
  int v10;
  std::string v12;
  std::string __p;
  UErrorCode status;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  UTFString::lstrip(&v12);
  UTFString::rstrip(&v12);
  v3 = v12.__r_.__value_.__r.__words[2];
  __p = v12;
  memset(&v12, 0, sizeof(v12));
  v4 = *(UTFRegex **)(a1 + 464);
  status = U_ZERO_ERROR;
  v5 = HIBYTE(v3);
  if ((v5 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v5 & 0x80u) == 0)
    size = v5;
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = utext_openUTF8(0, (const char *)p_p, size, &status);
  if (status <= U_ZERO_ERROR)
    v9 = v8;
  else
    v9 = 0;
  UTFRegex::set_text(v4, v9, 1);
  status = U_ZERO_ERROR;
  v10 = uregex_matches(*(URegularExpression **)v4, 0, &status);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10 != 0;
}

void sub_1DE9E4DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9366F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9366F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<FrontendInput>>>::__on_zero_shared(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void NashvilleFE::retrieve_binding_with_rsrc(NashvilleFE *this, unint64_t a2)
{
  std::mutex *v4;
  NashvilleFE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = (std::mutex *)NashvilleFE::binding_mutex(this);
  std::mutex::lock(v4);
  v6 = NashvilleFE::rsrc_bindings(v5);
  v9 = *(_QWORD **)(v6 + 8);
  v7 = v6 + 8;
  v8 = v9;
  if (!v9)
    goto LABEL_12;
  v10 = (_QWORD *)v7;
  v11 = v8;
  do
  {
    v12 = v11[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v11;
    else
      v14 = v11 + 1;
    if (v13)
      v10 = v11;
    v11 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v10 != (_QWORD *)v7 && v10[4] <= a2)
  {
    while (1)
    {
      while (1)
      {
        v15 = v8[4];
        if (v15 <= a2)
          break;
        v8 = (_QWORD *)*v8;
        if (!v8)
          goto LABEL_19;
      }
      if (v15 >= a2)
        break;
      v8 = (_QWORD *)v8[1];
      if (!v8)
LABEL_19:
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    v17 = v8[5];
    v16 = v8[6];
    *(_QWORD *)this = v17;
    *((_QWORD *)this + 1) = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  else
  {
LABEL_12:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  std::mutex::unlock(v4);
}

void sub_1DE9E4F88(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *NashvilleFE::NashvilleFE(_QWORD *a1, __int128 ***a2)
{
  unint64_t *v4;
  char **v5;
  uint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  __int128 **v17;
  std::recursive_mutex *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  unsigned int Interfaces;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int LanguageList;
  NSObject *v39;
  const char *v40;
  const char *v41;
  std::string::size_type v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int VoiceList;
  std::string::size_type v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  _QWORD v80[33];
  _QWORD v81[2];
  __int16 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  std::string v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  int v91;
  const char *v92;
  __int16 v93;
  uint64_t v94;
  _BYTE v95[32];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  _OWORD v116[8];
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int v126;
  std::string v127[32];
  std::__fs::filesystem::path v128[11];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 1;
  *((_OWORD *)a1 + 2) = 0u;
  v5 = (char **)(a1 + 4);
  v6 = (uint64_t)(a1 + 37);
  a1[37] = 0;
  a1[38] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[6] = 0;
  SharedObjectPool::get<VoiceConfig>(&v89, *a2);
  SharedObjectPool::get<TrackSubstitutions>(v127, (uint64_t)*a2);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v6, (__int128 *)v127);
  size = (std::__shared_weak_count *)v127[0].__r_.__value_.__l.__size_;
  if (v127[0].__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(v127[0].__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v10 = v89;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(&v86, v89, 1651664996, 2);
  memset(&v85, 0, sizeof(v85));
  if (v86)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(&v118, v10, 1651664996, 0);
    *(_OWORD *)&v128[0].__pn_.__r_.__value_.__l.__data_ = v118;
    v128[0].__pn_.__r_.__value_.__r.__words[2] = v119;
    *(_QWORD *)&v119 = 0;
    v118 = 0uLL;
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)v95, v128);
    v11 = v95[23];
    if ((v95[23] & 0x80000000) != 0)
    {
LABEL_8:
      std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v95, *(std::string::size_type *)&v95[8]);
LABEL_17:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      v85 = v127[0];
      *((_BYTE *)&v127[0].__r_.__value_.__s + 23) = 0;
      v127[0].__r_.__value_.__s.__data_[0] = 0;
      if (v11 < 0)
        operator delete(*(void **)v95);
      if (SHIBYTE(v128[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128[0].__pn_.__r_.__value_.__l.__data_);
      if (SBYTE7(v119) < 0)
        operator delete((void *)v118);
      goto LABEL_30;
    }
LABEL_16:
    v127[0] = *(std::string *)v95;
    goto LABEL_17;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v127, v10, 1650550884, 2);
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v86, (uint64_t)v127[0].__r_.__value_.__l.__data_, v127[0].__r_.__value_.__l.__size_);
  v88 = *(_OWORD *)&v127[0].__r_.__value_.__r.__words[2];
  v12 = (std::__shared_weak_count *)v127[0].__r_.__value_.__l.__size_;
  if (v127[0].__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v127[0].__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v86)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(&v118, v89, 1650550884, 0);
    *(_OWORD *)&v128[0].__pn_.__r_.__value_.__l.__data_ = v118;
    v128[0].__pn_.__r_.__value_.__r.__words[2] = v119;
    *(_QWORD *)&v119 = 0;
    v118 = 0uLL;
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)v95, v128);
    v11 = v95[23];
    if ((v95[23] & 0x80000000) != 0)
      goto LABEL_8;
    goto LABEL_16;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v127[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_ERROR, "Unable to mmap either broker.hdr or broker.hdr.asset", (uint8_t *)v127, 2u);
  }
  Diagnostics::log(3, "Unable to mmap either broker.hdr or broker.hdr.asset", v16);
LABEL_30:
  v17 = *a2;
  v18 = (std::recursive_mutex *)(v17 + 7);
  std::recursive_mutex::lock((std::recursive_mutex *)(v17 + 7));
  {
    v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    v20 = *(std::__shared_weak_count **)(*(_QWORD *)v19 + 16);
    v83 = v21;
    v84 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    std::recursive_mutex::unlock(v18);
    if (v21)
      goto LABEL_53;
  }
  else
  {
    v83 = 0;
    v84 = 0;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v17 + 7));
  }
  *(_OWORD *)(a1 + 7) = 0u;
  v21 = (uint64_t)(a1 + 7);
  a1[23] = 0;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_WORD *)a1 + 28) = 8963;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  a1[32] = 0;
  *((_DWORD *)a1 + 48) = 131584;
  SiriTTS::vocalizer_common_resource_path((SiriTTS *)v127);
  v24 = &v85;
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = (std::string *)v85.__r_.__value_.__r.__words[0];
  if ((v127[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = v127;
  else
    v25 = (std::string *)v127[0].__r_.__value_.__r.__words[0];
  v128[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  v128[0].__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
  a1[25] = v128;
  Interfaces = vplatform_GetInterfaces(a1 + 7, (_WORD *)a1 + 96);
  *a1 = Interfaces;
  if (Interfaces)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v29 = *a1;
      *(_DWORD *)v95 = 136315394;
      *(_QWORD *)&v95[4] = "vplatform_GetInterfaces(&default_ve_install_, &platform_resource_)";
      *(_WORD *)&v95[12] = 2048;
      *(_QWORD *)&v95[14] = v29;
      _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", v95, 0x16u);
    }
    Diagnostics::log(3, "NashvilleFE: %s returned %zx", v28, "vplatform_GetInterfaces(&default_ve_install_, &platform_resource_)", *a1);
    v21 = 0;
  }
  else
  {
    a1[11] = &SiriTTSVocalizerGetCriticalSectionImpl::__CriticalSectionImpl;
  }
  if (SHIBYTE(v127[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v127[0].__r_.__value_.__l.__data_);
    if (Interfaces)
      goto LABEL_75;
  }
  else if (Interfaces)
  {
    goto LABEL_75;
  }
LABEL_53:
  if (v86)
    *(_QWORD *)(v21 + 8) = v88;
  v30 = ve_ttsInitialize(v21, a1 + 33);
  *a1 = v30;
  if (!(_DWORD)v30)
  {
    v82 = 1;
    MEMORY[0x1E0C80A78](v30);
    LanguageList = ve_ttsGetLanguageList(a1[33], a1[34], (char *)v80, &v82, v34, v35, v36, v37);
    *a1 = LanguageList;
    if (LanguageList)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
      v41 = "ve_ttsGetLanguageList(ve_speech_, languages, &numberOfElement)";
      if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        goto LABEL_74;
      v42 = *a1;
      LODWORD(v127[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v127[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsGetLanguageList(ve_speech_, languages, &numberOfElement)";
      WORD2(v127[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v127[0].__r_.__value_.__r.__words[1] + 6) = v42;
    }
    else
    {
      v43 = memcpy(v128, v80, 0x104uLL);
      MEMORY[0x1E0C80A78](v43);
      v45 = &v80[-32 * v44];
      VoiceList = ve_ttsGetVoiceList(a1[33], a1[34], (const char *)v128, (uint64_t)v45, &v82, v46, v47, v48);
      *a1 = VoiceList;
      if (!VoiceList)
      {
        memcpy(v127, v45, sizeof(v127));
        v65 = ve_ttsOpen(a1[33], a1[34], 0, 0, (uint64_t)(a1 + 35), v62, v63, v64);
        *a1 = v65;
        if (v65)
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
          v41 = "ve_ttsOpen(ve_speech_, NULL, NULL, &ve_instance_)";
          if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            goto LABEL_74;
          v66 = *a1;
          *(_DWORD *)v95 = 136315394;
          *(_QWORD *)&v95[4] = "ve_ttsOpen(ve_speech_, NULL, NULL, &ve_instance_)";
          *(_WORD *)&v95[12] = 2048;
          *(_QWORD *)&v95[14] = v66;
          v51 = (std::string *)v95;
        }
        else
        {
          LODWORD(v118) = 1;
          strncpy((char *)&v118 + 4, (const char *)v128, 0x80uLL);
          LODWORD(v116[0]) = 2;
          strncpy((char *)v116 + 4, &v127[10].__r_.__value_.__s.__data_[16], 0x80uLL);
          v100 = v124;
          v101 = v125;
          v96 = v120;
          v97 = v121;
          v98 = v122;
          v99 = v123;
          *(_OWORD *)v95 = v118;
          *(_OWORD *)&v95[16] = v119;
          v108 = v116[5];
          v109 = v116[6];
          v110 = v116[7];
          v104 = v116[1];
          v105 = v116[2];
          v106 = v116[3];
          v107 = v116[4];
          v102 = v126;
          v111 = v117;
          v103 = v116[0];
          v112 = 7;
          v113 = 2;
          v114 = 19;
          v115 = 1;
          v71 = ve_ttsSetParamList(a1[35], a1[36], v95, 4, v67, v68, v69, v70);
          *a1 = v71;
          if (v71)
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
            v41 = "ve_ttsSetParamList(ve_instance_, params, sizeof(params) / sizeof(*params))";
            if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))goto LABEL_74;
            v77 = *a1;
            v91 = 136315394;
            v92 = "ve_ttsSetParamList(ve_instance_, params, sizeof(params) / sizeof(*params))";
            v93 = 2048;
            v94 = v77;
          }
          else
          {
            v81[0] = a1;
            v81[1] = nashville_fe_ve_synthesis_callback;
            v78 = ve_ttsSetOutDevice(a1[35], a1[36], (uint64_t)v81, v72, v73, v74, v75, v76);
            *a1 = v78;
            if (!v78)
            {
              std::vector<unsigned char>::resize(v4);
              std::vector<VE_MARKINFO>::resize(v5);
              goto LABEL_75;
            }
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
            v41 = "ve_ttsSetOutDevice(ve_instance_, &ve_out_device)";
            if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))goto LABEL_74;
            v79 = *a1;
            v91 = 136315394;
            v92 = "ve_ttsSetOutDevice(ve_instance_, &ve_out_device)";
            v93 = 2048;
            v94 = v79;
          }
          v51 = (std::string *)&v91;
        }
        goto LABEL_73;
      }
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v39 = Diagnostics_GetLogObject(void)::__profile_log_default;
      v41 = "ve_ttsGetVoiceList(ve_speech_, language.szLanguage, voiceInfos, &numberOfElement)";
      if (!os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        goto LABEL_74;
      v50 = *a1;
      LODWORD(v127[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v127[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsGetVoiceList(ve_speech_, language.szLanguage, voiceInfos, &numberOfElement)";
      WORD2(v127[0].__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v127[0].__r_.__value_.__r.__words[1] + 6) = v50;
    }
    v51 = v127;
LABEL_73:
    _os_log_impl(&dword_1DE3F6000, v39, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", (uint8_t *)v51, 0x16u);
LABEL_74:
    Diagnostics::log(3, "NashvilleFE: %s returned %zx", v40, v41, *a1);
    goto LABEL_75;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v31 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    v33 = *a1;
    LODWORD(v127[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v127[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ve_ttsInitialize(ve_install, &ve_speech_)";
    WORD2(v127[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v127[0].__r_.__value_.__r.__words[1] + 6) = v33;
    _os_log_impl(&dword_1DE3F6000, v31, OS_LOG_TYPE_ERROR, "NashvilleFE: %s returned %zx", (uint8_t *)v127, 0x16u);
  }
  Diagnostics::log(3, "NashvilleFE: %s returned %zx", v32, "ve_ttsInitialize(ve_install, &ve_speech_)", *a1);
LABEL_75:
  v52 = v84;
  if (v84)
  {
    v53 = (unint64_t *)&v84->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v55 = v87;
  if (v87)
  {
    v56 = (unint64_t *)&v87->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v90;
  if (v90)
  {
    v59 = (unint64_t *)&v90->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return a1;
}

void sub_1DE9E5BA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v7;
  void *v8;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 32);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 80);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1 + 112);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v5);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 40) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void sub_1DE9E5CA4()
{
  JUMPOUT(0x1DE9E5C74);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t nashville_fe_ve_synthesis_callback(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)a4 == 8)
  {
    v4 = *(_QWORD **)(a4 + 8);
    v5 = a3[1];
    v4[1] = a3[2] - v5;
    v4[2] = v5;
    v6 = a3[4];
    v4[3] = a3[5] - v6;
    v4[4] = v6;
  }
  return 0;
}

void std::vector<unsigned char>::resize(unint64_t *a1)
{
  unint64_t v1;

  v1 = a1[1] - *a1;
  if (v1 > 0x7FF)
  {
    if (v1 != 2048)
      a1[1] = *a1 + 2048;
  }
  else
  {
    std::vector<signed char>::__append(a1, 2048 - v1);
  }
}

void std::vector<VE_MARKINFO>::resize(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * (v4 >> 3);
  if (v5 > 0x3F)
  {
    if (v4 == 3584)
      return;
    v18 = v3 + 3584;
    goto LABEL_17;
  }
  v6 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v2) >> 3) >= 64 - v5)
  {
    bzero(a1[1], 56 * ((3528 - v4) / 0x38uLL) + 56);
    v18 = &v2[56 * ((3528 - v4) / 0x38uLL) + 56];
LABEL_17:
    a1[1] = v18;
    return;
  }
  v7 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v3) >> 3);
  v8 = 0xDB6DB6DB6DB6DB6ELL * ((v6 - v3) >> 3);
  if (v8 <= 0x40)
    v8 = 64;
  if (v7 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v8;
  if (v9 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v10 = 56 * v9;
  v11 = (char *)operator new(56 * v9);
  v12 = &v11[8 * (v4 >> 3)];
  v13 = &v11[v10];
  bzero(v12, 56 * ((3528 - v4) / 0x38uLL) + 56);
  v14 = &v12[56 * ((3528 - v4) / 0x38uLL) + 56];
  if (v2 != v3)
  {
    do
    {
      v15 = *(_OWORD *)(v2 - 56);
      v16 = *(_OWORD *)(v2 - 40);
      v17 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v12 - 24) = v17;
      *(_OWORD *)(v12 - 40) = v16;
      *(_OWORD *)(v12 - 56) = v15;
      v12 -= 56;
      v2 -= 56;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v2)
    operator delete(v2);
}

uint64_t *NashvilleFE::load_resource(uint64_t a1, int a2, char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t *v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  if (*(char *)(a5 + 23) >= 0)
    v9 = (const char *)a5;
  else
    v9 = *(const char **)a5;
  v10 = ve_ttsResourceLoad(a1, a2, v9, a4, a3, &v15, a7, a8);
  if (!(_DWORD)v10)
    return v15;
  v11 = v10;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v17 = a3;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_ERROR, "Error (ve_ttsResourceLoad %p) : 0x%x", buf, 0x12u);
  }
  Diagnostics::log(3, "Error (ve_ttsResourceLoad %p) : 0x%x", v13, a3, v11);
  return 0;
}

uint64_t std::unique_ptr<MemoryMap>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DE9E6150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void NashvilleFEPersistentModule::load_voice_resource(std::__shared_weak_count **a1, int64x2_t *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *resource;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count **v29;
  _QWORD *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count **v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  __int128 v48;
  int64x2_t v49;
  uint64_t v50;
  _QWORD buf[6];

  buf[5] = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v7 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = v9;
    _os_log_impl(&dword_1DE3F6000, v7, OS_LOG_TYPE_INFO, "Loading resource: '%s'", (uint8_t *)buf, 0xCu);
  }
  if (*(char *)(a3 + 23) >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  Diagnostics::log(6, "Loading resource: '%s'", v8, v10);
  v11 = (std::__shared_weak_count *)operator new(0x30uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936300;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E060;
  v13 = v11 + 1;
  v11[1].__shared_owners_ = 0;
  v11[1].__shared_weak_owners_ = 0;
  v14 = a2[18].i64[1];
  v15 = operator new();
  MemoryMap::MemoryMap((_QWORD *)v15, a3);
  resource = NashvilleFE::load_resource(*(_QWORD *)(v14 + 280), *(_QWORD *)(v14 + 288), *(char **)(v15 + 16), *(_DWORD *)(v15 + 24), a4, v16, v17, v18);
  if (resource)
  {
    v21 = v19;
    v22 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v15);
    MEMORY[0x1DF0ED014](v22, 0x1070C401CED0764);
    v11[1].__shared_owners_ = (uint64_t)resource;
    v11[1].__shared_weak_owners_ = v21;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v23 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0)
        v25 = a3;
      else
        v25 = *(_QWORD *)a3;
      LODWORD(buf[0]) = 134218242;
      *(_QWORD *)((char *)buf + 4) = v11 + 1;
      WORD2(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 6) = v25;
      _os_log_impl(&dword_1DE3F6000, v23, OS_LOG_TYPE_DEFAULT, "Resource %p loaded: '%s'", (uint8_t *)buf, 0x16u);
    }
    if (*(char *)(a3 + 23) >= 0)
      v26 = a3;
    else
      v26 = *(_QWORD *)a3;
    Diagnostics::log(5, "Resource %p loaded: '%s'", v24, v13, v26);
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v29 = (std::__shared_weak_count **)a2[26].i64[1];
    v28 = a2[27].u64[0];
    if ((unint64_t)v29 >= v28)
    {
      v37 = a2[26].i64[0];
      v38 = ((uint64_t)v29 - v37) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v40 = v28 - v37;
      if (v40 >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      buf[4] = a2 + 27;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v41);
      v44 = (std::__shared_weak_count **)&v42[16 * v38];
      *v44 = v13;
      v44[1] = v11;
      v46 = (_QWORD *)a2[26].i64[0];
      v45 = (_QWORD *)a2[26].i64[1];
      if (v45 == v46)
      {
        v49 = vdupq_n_s64((unint64_t)v45);
        v47 = &v42[16 * v38];
      }
      else
      {
        v47 = &v42[16 * v38];
        do
        {
          v48 = *((_OWORD *)v45 - 1);
          v45 -= 2;
          *((_OWORD *)v47 - 1) = v48;
          v47 -= 16;
          *v45 = 0;
          v45[1] = 0;
        }
        while (v45 != v46);
        v49 = a2[26];
      }
      v30 = v44 + 2;
      a2[26].i64[0] = (uint64_t)v47;
      a2[26].i64[1] = (uint64_t)(v44 + 2);
      *(int64x2_t *)&buf[1] = v49;
      v50 = a2[27].i64[0];
      a2[27].i64[0] = (uint64_t)&v42[16 * v43];
      buf[3] = v50;
      buf[0] = v49.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v29 = v13;
      v29[1] = v11;
      v30 = v29 + 2;
    }
    a2[26].i64[1] = (uint64_t)v30;
    *a1 = v13;
    a1[1] = v11;
  }
  else
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v31 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a3 + 23) >= 0)
        v33 = a3;
      else
        v33 = *(_QWORD *)a3;
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v33;
      _os_log_impl(&dword_1DE3F6000, v31, OS_LOG_TYPE_ERROR, "Error (ve_ttsResourceLoad %s)", (uint8_t *)buf, 0xCu);
    }
    if (*(char *)(a3 + 23) >= 0)
      v34 = a3;
    else
      v34 = *(_QWORD *)a3;
    Diagnostics::log(3, "Error (ve_ttsResourceLoad %s)", v32, v34);
    v35 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v15);
    MEMORY[0x1DF0ED014](v35, 0x1070C401CED0764);
    *a1 = 0;
    a1[1] = 0;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1DE9E65BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SiriTTS::NashvilleVoiceResource::~NashvilleVoiceResource(SiriTTS::NashvilleVoiceResource *this)
{
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SiriTTS::NashvilleVoiceResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<NashvilleFE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleFE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<NashvilleFE>::__on_zero_shared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = ve_ttsClose(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v9)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v9;
      _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_ERROR, "Error ve_ttsClose 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsClose 0x%x", v11, v9);
  }
  v12 = ve_ttsUnInitialize(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296));
  if ((_DWORD)v12)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v13 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v21 = v12;
      _os_log_impl(&dword_1DE3F6000, v13, OS_LOG_TYPE_ERROR, "Error ve_ttsUnInitialize 0x%x", buf, 8u);
    }
    Diagnostics::log(3, "Error ve_ttsUnInitialize 0x%x", v14, v12);
  }
  if (*(_WORD *)(a1 + 80) == 8963)
  {
    v15 = vplatform_ReleaseInterfaces(a1 + 80);
    if ((_DWORD)v15)
    {
      if (Diagnostics_GetLogObject(void)::onceToken != -1)
        dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
      v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
      if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v21 = v15;
        _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_ERROR, "Error vplatform_ReleaseInterfaces 0x%x", buf, 8u);
      }
      Diagnostics::log(3, "Error vplatform_ReleaseInterfaces 0x%x", v17, v15);
    }
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 320);
  v18 = *(void **)(a1 + 56);
  if (v18)
  {
    *(_QWORD *)(a1 + 64) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 32);
  if (v19)
  {
    *(_QWORD *)(a1 + 40) = v19;
    operator delete(v19);
  }
}

void sub_1DE9E69CC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<NashvilleAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9342A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NashvilleAdapterModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9342A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<NashvilleAdapterModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SSMLPreprocessorModule>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SSMLPreprocessorModule>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SSMLPreprocessorModule>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void NashvilleFEPersistentModule::load_voice_resource(std::__shared_weak_count **a1, int64x2_t *a2, char *a3, _QWORD *a4, uint64_t a5)
{
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *resource;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count **v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count **v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  __int128 v39;
  int64x2_t v40;
  uint64_t v41;
  _QWORD buf[6];

  buf[5] = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v12 = *a4;
    LODWORD(buf[0]) = 134218240;
    *(_QWORD *)((char *)buf + 4) = a3;
    WORD2(buf[1]) = 2048;
    *(_QWORD *)((char *)&buf[1] + 6) = v12;
    _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_INFO, "Loading resource from memory: %p, size: %ld", (uint8_t *)buf, 0x16u);
  }
  Diagnostics::log(6, "Loading resource from memory: %p, size: %ld", v11, a3, *a4);
  v13 = (std::__shared_weak_count *)operator new(0x30uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936300;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA92E060;
  v15 = v13 + 1;
  v13[1].__shared_owners_ = 0;
  v13[1].__shared_weak_owners_ = 0;
  resource = NashvilleFE::load_resource(*(_QWORD *)(a2[18].i64[1] + 280), *(_QWORD *)(a2[18].i64[1] + 288), a3, *a4, a5, v16, v17, v18);
  if (resource)
  {
    v13[1].__shared_owners_ = (uint64_t)resource;
    v13[1].__shared_weak_owners_ = v20;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v21 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = v13 + 1;
      _os_log_impl(&dword_1DE3F6000, v21, OS_LOG_TYPE_DEFAULT, "Resource %p loaded from memory.", (uint8_t *)buf, 0xCu);
    }
    Diagnostics::log(5, "Resource %p loaded from memory.", v22, v15);
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v25 = (std::__shared_weak_count **)a2[26].i64[1];
    v24 = a2[27].u64[0];
    if ((unint64_t)v25 >= v24)
    {
      v28 = a2[26].i64[0];
      v29 = ((uint64_t)v25 - v28) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v31 = v24 - v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      buf[4] = a2 + 27;
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Agglomerate>>>(v32);
      v35 = (std::__shared_weak_count **)&v33[16 * v29];
      *v35 = v15;
      v35[1] = v13;
      v37 = (_QWORD *)a2[26].i64[0];
      v36 = (_QWORD *)a2[26].i64[1];
      if (v36 == v37)
      {
        v40 = vdupq_n_s64((unint64_t)v36);
        v38 = &v33[16 * v29];
      }
      else
      {
        v38 = &v33[16 * v29];
        do
        {
          v39 = *((_OWORD *)v36 - 1);
          v36 -= 2;
          *((_OWORD *)v38 - 1) = v39;
          v38 -= 16;
          *v36 = 0;
          v36[1] = 0;
        }
        while (v36 != v37);
        v40 = a2[26];
      }
      v26 = v35 + 2;
      a2[26].i64[0] = (uint64_t)v38;
      a2[26].i64[1] = (uint64_t)(v35 + 2);
      *(int64x2_t *)&buf[1] = v40;
      v41 = a2[27].i64[0];
      a2[27].i64[0] = (uint64_t)&v33[16 * v34];
      buf[3] = v41;
      buf[0] = v40.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v25 = v15;
      v25[1] = v13;
      v26 = v25 + 2;
    }
    a2[26].i64[1] = (uint64_t)v26;
    *a1 = v15;
    a1[1] = v13;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1DE9E6D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t nashville_fe_module_load_voice(_WORD **a1)
{
  uint64_t BrokerString;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t AddRefCountedObject;
  const char *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char __s2[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LODWORD(v18) = 0;
  BrokerString = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  if ((BrokerString & 0x80000000) == 0)
  {
    v3 = (const char *)a1[4];
    if (v3)
    {
      v4 = BrokerString;
      if (!strcmp(v3 + 152, __s2))
        goto LABEL_19;
    }
  }
  v5 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 1, 0);
  if ((v5 & 0x80000000) != 0)
  {
    __s2[0] = 0;
  }
  else
  {
    v4 = v5;
    v6 = (const char *)a1[4];
    if (!v6 || strcmp(v6 + 152, __s2))
    {
      AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
      if (!(_DWORD)v18)
        __s2[0] = 0;
      if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
        return AddRefCountedObject;
    }
    if (__s2[0])
      goto LABEL_19;
  }
  AddRefCountedObject = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 0);
  v4 = AddRefCountedObject;
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  AddRefCountedObject = uselect_CheckForDataFile(*a1, (uint64_t)a1[1], __s2, &v18);
  if (!(_DWORD)v18)
    __s2[0] = 0;
  if ((AddRefCountedObject & 0x80001FFF) == 0x8000000A)
    return AddRefCountedObject;
  if (!__s2[0])
  {
    v4 = uselect_CreateBrokerString((uint64_t)a1[2], __s2, 0x100uLL, 0, 0, 0, 1);
    if ((v4 & 0x80000000) != 0)
      return v4;
  }
LABEL_19:
  v8 = (const char *)a1[4];
  if (v8)
  {
    v9 = (uint64_t)(v8 + 152);
    if (!strcmp(v8 + 152, __s2))
      return v4;
    v10 = a1[3];
    if (!v10 || (v11 = *((_QWORD *)v10 + 6)) == 0)
      v11 = *((_QWORD *)a1[2] + 6);
    AddRefCountedObject = objc_ReleaseObject(v11, v9);
    a1[4] = 0;
    if ((AddRefCountedObject & 0x80000000) != 0)
      return AddRefCountedObject;
  }
  v18 = 0;
  v12 = a1[3];
  if (v12 && (v13 = *((_QWORD *)v12 + 6)) != 0)
  {
    v14 = (uint64_t)a1[2];
  }
  else
  {
    v14 = (uint64_t)a1[2];
    v13 = *(_QWORD *)(v14 + 48);
  }
  AddRefCountedObject = objc_GetAddRefCountedObject(v13, (uint64_t)__s2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))uselect_ObjcVoiceOpen, (void (*)(_QWORD, _QWORD, __int128 *))uselect_ObjcVoiceClose, v14, &v18);
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v15 = *(_QWORD *)(v18 + 32);
  a1[4] = (_WORD *)v15;
  AddRefCountedObject = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectrawdataversion", (char *)(v15 + 64));
  if ((AddRefCountedObject & 0x80000000) != 0)
    return AddRefCountedObject;
  v16 = paramc_ParamSetStr(*((_QWORD *)a1[2] + 5), (uint64_t)"uselectreductionversion", (char *)a1[4] + 140);
  v4 = v16;
  if ((v16 & 0x80000000) == 0)
  {
    if (a1[4][1789] == 2)
      return v16;
    else
      return 2686459919;
  }
  return v4;
}

uint64_t nashville_fe_module_closeStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(a2 + v4);
    if (v6)
    {
      v7 = (uint64_t *)(a2 + v4);
      v8 = (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 72))(v6, *(_QWORD *)(a2 + v4 + 8));
      *v7 = safeh_GetNullHandle();
      v7[1] = v9;
      if ((int)v5 > -1 && v8 < 0)
        v5 = v8;
      else
        v5 = v5;
    }
    v4 += 16;
  }
  while (v4 != 48);
  return v5;
}

uint64_t nashville_fe_module_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0)
    return 2686459912;
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  return nashville_fe_module_load_voice((_WORD **)a1);
}

uint64_t nashville_fe_module_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0)
    return 2686459912;
  v7 = 0;
  for (i = a1 + 64; ; i += 16)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v9 + 64);
    if (v7 * 8)
    {
      v11 = szOUTPUT_STREAMS[v7];
      v12 = a3;
      v13 = a4;
      v14 = 0;
      v15 = i;
    }
    else
    {
      v14 = (*(uint64_t (**)(void))(v9 + 152))();
      v12 = a3;
      v13 = a4;
      v11 = "application/x-realspeak-markers-pp;version=4.0";
      v15 = a1 + 64;
    }
    v16 = v10(v12, v13, 207, v11, v14, 1, v15);
    if ((v16 & 0x80000000) != 0)
      break;
    if (++v7 == 3)
      return v16;
  }
  nashville_fe_module_closeStreams(*(_QWORD *)(a1 + 48), a1 + 64);
  return v16;
}

void _NashvilleFEModule_ReportModifiedText(unint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 __dst;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v12, a1);
  v5 = v12;
  if (v12)
  {
    std::string::basic_string[abi:ne180100](&__dst, a2, a3);
    v6 = *(_QWORD *)v5 + 56;
    if (*(char *)(*(_QWORD *)v5 + 79) < 0)
      operator delete(*(void **)v6);
    *(_OWORD *)v6 = __dst;
    *(_QWORD *)(v6 + 16) = v11;
  }
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DE9E72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _Gryphon_TrackSubstitution(unint64_t a1, int a2, int a3, int a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v10, a1);
  if (v10)
    TrackSubstitutions::add_substitution(*(TrackSubstitutions **)(v10 + 32), a3, a2, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DE9E7398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nashville_fe_module_Process(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int Layers;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  _QWORD *v29;
  char *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v58;
  int v60;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  std::__shared_weak_count *v68;
  char *v69;
  std::__shared_weak_count *v70;
  uint8_t buf[8];
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  int v75[3];

  v75[0] = 0;
  result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 128);
  if ((result & 0x80000000) != 0)
    return 2686459912;
  *a5 = 1;
  if (a1[8])
  {
    v10 = (_QWORD *)a1[15];
    bzero(v10, 0xE48uLL);
    *v10 = a1[4];
    v11 = usextract_ProcessStart(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", a1[5], a3, a4, (uint64_t)v10, v75);
    v17 = v11;
    if (v11 < 0)
    {
      log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"NASHVILLE_FE_MODULE", 55005, "%s%x", v13, v14, v15, v16, "lhError");
      v19 = 1;
      v18 = v17;
    }
    else if (*((__int16 *)v10 + 5) > 1)
    {
      Layers = usextract_allocateLayers(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", v10, *((unsigned __int16 *)v10 + 5) + 4 * *((__int16 *)v10 + 7));
      if (Layers < 0)
      {
        v18 = Layers;
        v19 = 1;
      }
      else
      {
        v18 = usextract_Process(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", a1[5], a3, a4, (uint64_t)v10, v15, v16);
        if ((v18 & 0x80000000) == 0)
        {
          v21 = (int *)v10[439];
          if (v21)
          {
            if (*((_DWORD *)v10 + 880))
            {
              v22 = (unsigned __int16 *)v10[225];
              v23 = *v22;
              if (*v22)
              {
                v24 = 0;
                while (*v21 != 26)
                {
                  ++v24;
                  v21 += 8;
                  if (v23 == v24)
                    goto LABEL_31;
                }
                if (v23 <= (unsigned __int16)v24)
                  goto LABEL_30;
                v25 = 0;
                v26 = v23 - v24;
                do
                {
                  v27 = *v21;
                  v21 += 8;
                  if (v27 == 8)
                    v25 = 1;
                  --v26;
                }
                while (v26);
                if (!v25)
                {
LABEL_30:
                  v22[1] += v23 - v24;
                  *v22 = v24;
                }
              }
            }
          }
LABEL_31:
          NashvilleFE::retrieve_binding_with_rsrc((NashvilleFE *)&v73, a1[2]);
          v28 = (uint64_t *)v73;
          if (v73)
          {
            v63 = v17;
            v29 = *(_QWORD **)v73;
            *v29 = v10;
            v29[1] = a1[5];
            v29[2] = a3;
            v29[3] = a4;
            v30 = (char *)operator new(0x30uLL);
            *(_OWORD *)(v30 + 8) = 0u;
            v31 = (unint64_t *)(v30 + 8);
            *((_OWORD *)v30 + 2) = 0u;
            *(_QWORD *)v30 = &off_1EA932198;
            *((_QWORD *)v30 + 3) = v30 + 32;
            *(_QWORD *)buf = v30 + 24;
            v72 = (std::__shared_weak_count *)v30;
            Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>((uint64_t)(v30 + 24), v28);
            v32 = v28[2];
            v69 = v30 + 24;
            v70 = (std::__shared_weak_count *)v30;
            do
              v33 = __ldxr(v31);
            while (__stxr(v33 + 1, v31));
            (*(void (**)(uint64_t, char **))(*(_QWORD *)v32 + 24))(v32, &v69);
            v17 = v63;
            v34 = v70;
            if (v70)
            {
              p_shared_owners = (unint64_t *)&v70->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v37 = v73;
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v73 + 16) + 16))(&v67);
            if (*(_QWORD *)(v37 + 72))
            {
              v39 = *(_QWORD *)(*(_QWORD *)v38 + 8);
              v40 = *(_QWORD *)(*(_QWORD *)v38 + 16);
              v66[0] = v39;
              v66[1] = v40;
              if (v40)
              {
                v41 = (unint64_t *)(v40 + 8);
                do
                  v42 = __ldxr(v41);
                while (__stxr(v42 + 1, v41));
                v65 = v40;
                do
                  v43 = __ldxr(v41);
                while (__stxr(v43 + 1, v41));
              }
              else
              {
                v65 = 0;
              }
              v64 = v39;
              v46 = *(_QWORD *)(v37 + 72);
              if (!v46)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 48))(v46, &v64);
              std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
              std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v66);
            }
            v47 = v68;
            if (v68)
            {
              v48 = (unint64_t *)&v68->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = v72;
            if (v72)
            {
              v51 = (unint64_t *)&v72->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          else
          {
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_INFO, "No binding found for rsrc object, probably synthesis is cancelled.", buf, 2u);
            }
            Diagnostics::log(6, "No binding found for rsrc object, probably synthesis is cancelled.", v45);
          }
          v53 = v74;
          if (v74)
          {
            v54 = (unint64_t *)&v74->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
        }
        v19 = 0;
      }
    }
    else
    {
      if (!v75[0])
      {
        *a5 = 0;
        v18 = v11;
LABEL_83:
        v60 = usextract_ProcessEnd(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", (uint64_t)v10);
        if (v60 < 0 && v18 > -1)
          v18 = v60;
LABEL_88:
        LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[5] + 64))(a3, a4);
        if ((int)result >= 0 || v18 <= -1)
          return v18;
        else
          return result;
      }
      v18 = v11;
      if (a1[8])
      {
        v18 = v11;
        if (*((_DWORD *)v10 + 880))
        {
          v18 = (*(uint64_t (**)(void))(a1[6] + 104))();
          if (v18 < 0)
            log_OutPublic(*(_QWORD *)(a1[2] + 32), (uint64_t)"NASHVILLE_FE_MODULE", 55008, "%s%s%s%x", v13, v14, v15, v16, "contentType");
        }
      }
      v19 = 1;
      *a5 = 1;
    }
    if (v75[0])
    {
      v56 = nashville_fe_module_closeStreams(a1[6], (uint64_t)(a1 + 8));
      if (v56 < 0 && v18 > -1)
        v18 = v56;
    }
    if ((v19 & 1) == 0)
    {
      v58 = usextract_freeLayers(a1[2], (uint64_t)"NASHVILLE_FE_MODULE", v10, v12, v13, v14, v15, v16);
      if (v58 < 0 && v18 > -1)
        v18 = v58;
    }
    if (v17 < 0)
      goto LABEL_88;
    goto LABEL_83;
  }
  return result;
}

void sub_1DE9E7960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v11 - 112);
  _Unwind_Resume(a1);
}

void Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  __int128 v20;
  void *v21;

  v19 = &v21;
  v4 = v3[5];
  if (v4)
  {
    v6 = *a2;
    v5 = a2[1];
    v19 = (void **)&off_1EA923468;
    *(_QWORD *)&v20 = v6;
    *((_QWORD *)&v20 + 1) = v5;
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 8, &v20);
    v19 = (void **)&off_1EA923468;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = v3;
    v13 = (_QWORD *)operator new();
    v15 = *a2;
    v14 = a2[1];
    *v13 = &off_1EA923468;
    v13[1] = v15;
    v13[2] = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v12[5];
    v12[5] = (uint64_t)v13;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<NashvilleAdapterModuleInput>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923468;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<NashvilleAdapterModuleInput>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA923468;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

uint64_t nashville_fe_module_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1029, 128) & 0x80000000) != 0)
    return 2686459912;
  else
    return nashville_fe_module_closeStreams(*(_QWORD *)(a1 + 48), a1 + 64);
}

uint64_t nashville_fe_module_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2686459905;
  result = 0;
  *a2 = &INashvilleFEModule;
  return result;
}

uint64_t nashville_fe_module_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  if (!a3)
    return 2686459911;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 1030;
  }
  return result;
}

uint64_t nashville_fe_module_ClassClose()
{
  return 0;
}

uint64_t nashville_fe_module_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t voice;
  uint64_t Object;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  v23 = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v26 + 8), 1, 128);
  if (!v10)
  {
    Object = 2686459914;
    v18 = v26;
LABEL_14:
    log_OutPublic(*(_QWORD *)(v18 + 32), (uint64_t)"NASHVILLE_FE_MODULE", 31000, 0, v11, v12, v13, v14, v22);
    return Object;
  }
  v15 = v10;
  *v10 = a3;
  v10[1] = a4;
  v16 = v26;
  v10[2] = v26;
  v10[3] = a1;
  v10[5] = 0;
  v10[6] = 0;
  v10[4] = 0;
  v17 = heap_Calloc(*(_QWORD **)(v16 + 8), 1, 3656);
  v15[15] = v17;
  v18 = v26;
  if (!v17)
  {
    Object = 2686459914;
    goto LABEL_14;
  }
  paramc_ParamSetStr(*(_QWORD *)(v26 + 40), (uint64_t)"voiceaddon", &byte_1DEBD87CE);
  voice = nashville_fe_module_load_voice((_WORD **)v15);
  if ((voice & 0x80000000) != 0
    || (voice = objc_GetObject(*(_QWORD *)(v26 + 48), (uint64_t)"LINGDB", &v24), (voice & 0x80000000) != 0))
  {
    Object = voice;
    goto LABEL_16;
  }
  v15[5] = *(_QWORD *)(v24 + 8);
  Object = objc_GetObject(*(_QWORD *)(v26 + 48), (uint64_t)"SYNTHSTREAM", &v25);
  if ((Object & 0x80000000) != 0)
  {
LABEL_16:
    nashville_fe_module_ObjClose(*(_QWORD **)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return Object;
  }
  v15[6] = *(_QWORD *)(v25 + 8);
  *((_DWORD *)v15 + 28) = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(v26 + 40), (uint64_t)"usewordorthography", &v23) & 0x80000000) == 0 && v23 == 1)
    *((_DWORD *)v15 + 28) = 1;
  *(_QWORD *)a5 = v15;
  *(_DWORD *)(a5 + 8) = 1029;
  return Object;
}

uint64_t nashville_fe_module_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = safeh_HandleCheck((uint64_t)a1, a2, 1029, 128);
  if ((result & 0x80000000) != 0)
    return 2686459912;
  if (a1)
  {
    if (a1[5])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"LINGDB");
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[7])
      objc_ReleaseObject(*(_QWORD *)(a1[2] + 48), (uint64_t)"FE_DEPES");
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectrawdataversion", &byte_1DEBD87CE);
    paramc_ParamSetStr(*(_QWORD *)(a1[2] + 40), (uint64_t)"uselectreductionversion", &byte_1DEBD87CE);
    v4 = a1[4];
    if (v4)
    {
      v5 = a1[3];
      if (!v5 || (v6 = *(_QWORD *)(v5 + 48)) == 0)
        v6 = *(_QWORD *)(a1[2] + 48);
      objc_ReleaseObject(v6, v4 + 152);
    }
    v7 = a1[15];
    if (v7)
      heap_Free(*(_QWORD **)(a1[2] + 8), v7);
    heap_Free(*(_QWORD **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

void SharedObjectPool::get<RNN>(_QWORD *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::string *p_p;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string __p;

  v4 = (std::recursive_mutex *)(a2 + 56);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 56));
  v5 = a2 + 32;
  {
    SharedObjectPool::get<VoiceConfig>(&v35, (__int128 **)a2);
    (*(void (**)(std::string **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(&p_p, v35, 1919839846, 2);
    if (v34)
    {
      v10 = operator new(0x200uLL);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = &off_1EA9358F0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "rnn");
      NNetExtractor::NNetExtractor((uint64_t)(v10 + 3), (uint64_t)&p_p, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)&v31 = v10 + 3;
      *((_QWORD *)&v31 + 1) = v10;
    }
    else
    {
      v31 = 0uLL;
    }
    v11 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    p_p = &__p;
    v18 = v17[5];
    if (v18)
    {
      if (*((_QWORD *)&v31 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(std::__shared_weak_count **)(v18 + 16);
      *(_OWORD *)(v18 + 8) = v31;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    }
    else
    {
      v25 = operator new();
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      *(_QWORD *)v25 = &off_1EA9234C8;
      *(_OWORD *)(v25 + 8) = v31;
      if (*((_QWORD *)&v31 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = v17[5];
      v17[5] = v25;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    if (v24)
    {
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  *a1 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::recursive_mutex::unlock(v4);
}

void sub_1DE9E81C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::recursive_mutex *v23;
  std::__shared_weak_count *v24;
  void *v26;

  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::recursive_mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RNNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RNNOutputDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *Agglomerate::ItemHolder<std::shared_ptr<RNN>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void Agglomerate::ItemHolder<std::shared_ptr<RNN>>::~ItemHolder(_QWORD *a1)
{
  *a1 = &off_1EA9234C8;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1DF0ED014);
}

uint64_t UTFText::dispatch_clone(UTFText *this, UText *a2, const UText *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v9;

  v9 = UTFText::utf_text((UTFText *)a2, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, UText *, const UText *, uint64_t))(*(_QWORD *)v9 + 16))(v9, this, a2, a3, a4);
}

uint64_t UTFText::dispatch_native_length(UTFText *this, UText *a2)
{
  uint64_t v3;

  v3 = UTFText::utf_text(this, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *))(*(_QWORD *)v3 + 24))(v3, this);
}

uint64_t UTFText::dispatch_access(UTFText *this, UText *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = UTFText::utf_text(this, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, UText *, uint64_t))(*(_QWORD *)v6 + 32))(v6, this, a2, a3);
}

uint64_t UTFText::dispatch_extract(UTFText *a1, const UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = UTFText::utf_text(a1, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, const UText *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, a1, a2, a3, a4, a5, a6);
}

uint64_t UTFText::dispatch_replace(UTFText *a1, const UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = UTFText::utf_text(a1, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, const UText *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a1, a2, a3, a4, a5, a6);
}

uint64_t UTFText::dispatch_copy(UTFText *this, UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v13;

  v13 = UTFText::utf_text(this, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, UText *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 56))(v13, this, a2, a3, a4, a5, a6);
}

uint64_t UTFText::dispatch_map_offset_to_native(UTFText *this, const UText *a2)
{
  uint64_t v3;

  v3 = UTFText::utf_text(this, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *))(*(_QWORD *)v3 + 64))(v3, this);
}

uint64_t UTFText::dispatch_map_native_index_to_utf16(UTFText *this, const UText *a2)
{
  uint64_t v4;

  v4 = UTFText::utf_text(this, a2);
  return (*(uint64_t (**)(uint64_t, UTFText *, const UText *))(*(_QWORD *)v4 + 72))(v4, this, a2);
}

uint64_t UTFText::utf_text(UTFText *this, const UText *a2)
{
  void *exception;
  _BYTE v5[24];

  if (*((_UNKNOWN **)this + 7) != &UTFText::UTFTEXT_FUNCS)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    StringFormatter::StringFormatter((StringFormatter *)v5, "UText instance %p is not an UTFText\n", this);
    MEMORY[0x1DF0EC99C](exception, v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *((_QWORD *)this + 9);
}

void sub_1DE9E85D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

UText *UTFText::clone(UTFText *this, UText *__dst, const UText *__src, int a4, UErrorCode *a5)
{
  UText *v5;

  if (a4)
  {
    v5 = 0;
    *a5 = U_UNSUPPORTED_ERROR;
  }
  else
  {
    v5 = __dst;
    memcpy(__dst, __src, __src->sizeOfStruct);
  }
  return v5;
}

uint64_t UTFText::replace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  *a7 = 30;
  return 0;
}

void UTFText::copy(UTFText *this, UText *a2, uint64_t a3, uint64_t a4, uint64_t a5, signed __int8 a6, UErrorCode *a7)
{
  *a7 = U_NO_WRITE_PERMISSION;
}

uint64_t TTSACDecoder::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, UInt32 a5, char *a6)
{
  uint64_t v9;
  BOOL v10;
  char v11;
  int v12;
  UInt32 v13;
  uint64_t v14;
  BOOL v15;
  UInt32 ioOutputDataPacketSize;
  AudioBufferList outOutputData;
  _DWORD inInputDataProcUserData[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  inInputDataProcUserData[0] = *(_DWORD *)(a1 + 16);
  if ((inInputDataProcUserData[0] & 0x80000000) != 0)
  {
    v9 = *a4;
    inInputDataProcUserData[1] = (unint64_t)(a4[1] - *a4) >> 1;
    v20 = v9;
    v21 = a3;
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  outOutputData.mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = 1;
  do
  {
    outOutputData.mBuffers[0].mDataByteSize = 2 * a5;
    outOutputData.mBuffers[0].mData = a6;
    ioOutputDataPacketSize = a5;
    if (AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 8), (AudioConverterComplexInputDataProc)ttsac_fetch_data, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0))
    {
      v10 = 1;
    }
    else
    {
      v10 = ioOutputDataPacketSize == 0;
    }
    v11 = !v10;
    v12 = v11 & (ioOutputDataPacketSize < a5);
    if (v12)
      v13 = ioOutputDataPacketSize;
    else
      v13 = 0;
    if (v12)
      v14 = ioOutputDataPacketSize;
    else
      v14 = 0;
    v15 = v12 != 1 || a5 == ioOutputDataPacketSize;
    a5 -= v13;
    a6 += 2 * v14;
  }
  while (!v15);
  return AudioConverterReset(*(AudioConverterRef *)(a1 + 8));
}

void TTSACDecoder::~TTSACDecoder(AudioConverterRef *this)
{
  TTSACDecoder::~TTSACDecoder(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *this = (AudioConverterRef)&off_1EA91CFB0;
  AudioConverterDispose(this[1]);
}

uint64_t ttsac_fetch_data(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, char *a5)
{
  int v5;
  char *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  char *v11;
  UInt32 v12;

  v5 = *((_DWORD *)a5 + 1);
  if ((*(_DWORD *)a5 & 0x80000000) != 0)
  {
    if (v5 >= 1)
      v5 = 1;
    *a2 = v5;
    if (v5)
    {
      v10 = (unsigned __int16 *)*((_QWORD *)a5 + 1);
      v11 = (char *)*((_QWORD *)a5 + 2);
      v12 = *v10;
      a3->mBuffers[0].mData = v11;
      a3->mBuffers[0].mNumberChannels = 1;
      a3->mBuffers[0].mDataByteSize = v12;
      *((_DWORD *)a5 + 9) = v12;
      *((_QWORD *)a5 + 1) = v10 + 1;
      *((_QWORD *)a5 + 2) = &v11[v12];
      *a4 = (AudioStreamPacketDescription *)(a5 + 24);
      v9 = *((_DWORD *)a5 + 1) - 1;
      goto LABEL_10;
    }
  }
  else
  {
    if (v5 >= *a2)
      v5 = *a2;
    *a2 = v5;
    if (v5)
    {
      a3->mBuffers[0].mNumberChannels = 1;
      v6 = (char *)*((_QWORD *)a5 + 2);
      a3->mBuffers[0].mData = v6;
      v7 = *((_DWORD *)a5 + 1);
      v8 = *(_DWORD *)a5 * *a2;
      a3->mBuffers[0].mDataByteSize = v8;
      *((_QWORD *)a5 + 2) = &v6[v8];
      v9 = v7 - *a2;
LABEL_10:
      *((_DWORD *)a5 + 1) = v9;
    }
  }
  return 0;
}

void InjectJSONImpl::~InjectJSONImpl(InjectJSONImpl *this)
{
  InjectJSONImpl::~InjectJSONImpl(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91D928;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 36, *((unsigned __int8 *)this + 280));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((_QWORD **)this + 33));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((_QWORD **)this + 30));
  std::__tree<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<FastRewriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<FastRewriter>>>>::destroy(*((_QWORD **)this + 27));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  *(_QWORD *)this = off_1EA91CE38;
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  FrontendModule::~FrontendModule((void **)this);
}

void InjectJSONImpl::generate_tokens(InjectJSONImpl *this)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  char *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  std::string *p_p;
  BOOL v12;
  int data;
  int v15;
  unsigned __int8 *v17;
  char v18;
  std::string::size_type v19;
  unsigned __int8 *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  uint8_t *v34;
  unsigned __int8 *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  uint64_t v40;
  uint64_t *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  unsigned int *v58;
  NSObject *v60;
  const char *v61;
  std::string *v62;
  std::string *v63;
  unsigned __int8 *v64;
  _OWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int v70;
  BOOL v71;
  int v72;
  int v73;
  int v74;
  std::string::size_type v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t *p_size;
  uint64_t **v88;
  uint64_t *v89;
  char *v90;
  std::string *v91;
  uint64_t *v92;
  uint64_t *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *size;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *k;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  std::string::size_type v106;
  uint64_t **v107;
  char *v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  std::string::size_type v112;
  char *i;
  int64x2_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t j;
  std::string::size_type v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v136;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  std::string::size_type v147;
  uint64_t *v150;
  uint64_t *v151;
  int v152;
  uint64_t **v153;
  uint64_t *v154;
  int v155;
  uint64_t **v156;
  _BYTE *v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  std::string *v168;
  std::string::size_type v169;
  int v170;
  int v171;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  const void **v178;
  const void **v179;
  const void **v180;
  uint64_t **v181;
  uint64_t *v182;
  uint64_t **v183;
  std::string *v184;
  __int128 v185;
  const void **v186;
  const void **v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  const void *v193;
  uint64_t v194;
  const void *v195;
  const void **v196;
  uint64_t v197;
  const void *v198;
  uint64_t v199;
  float v200;
  uint64_t v201;
  const void *v202;
  void *v203;
  const void **v204;
  const void **v205;
  const void **v206;
  int v207;
  char *v208;
  unint64_t *v209;
  uint64_t v210;
  const char **v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  size_t v216;
  size_t v217;
  uint8_t *v218;
  const void **v219;
  uint64_t *v220;
  uint64_t *v221;
  int v222;
  uint64_t **v223;
  uint64_t *v224;
  int v225;
  uint64_t **v226;
  uint64_t v227;
  const char **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint8_t *v233;
  size_t v234;
  size_t v235;
  uint8_t *v236;
  _QWORD *v237;
  uint64_t v238;
  void **v239;
  void **v240;
  void **v241;
  void **v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint8_t *v249;
  size_t v250;
  size_t v251;
  uint8_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v259;
  unint64_t v260;
  char *v261;
  std::string *v262;
  std::string *v263;
  __int128 v264;
  void *v265;
  std::string *v266;
  uint8_t *v267;
  uint8_t *__s1;
  std::__shared_weak_count *__s1a;
  char *v270;
  uint64_t **v271;
  uint64_t **v272;
  uint64_t **v273;
  char *v274;
  std::string __p;
  std::string v276;
  char *v277;
  char *v278;
  uint64_t v279[2];
  const void **v280;
  std::__shared_weak_count *v281;
  std::string v282;
  std::string v283;
  uint8_t buf[16];
  _BYTE v285[56];
  uint64_t v286;

  v286 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 **)((char *)this + 296);
  v3 = (unsigned __int8 *)this + 280;
  v4 = (char *)this + 192;
  v273 = (uint64_t **)((char *)this + 208);
  v270 = (char *)this + 216;
  v271 = (uint64_t **)((char *)this + 232);
  v272 = (uint64_t **)((char *)this + 256);
  v274 = (char *)this + 192;
  while (1)
  {
    v5 = *v3;
    if (v5 == 2)
    {
      v7 = 0;
      v6 = *(_QWORD *)(*((_QWORD *)this + 36) + 8);
      goto LABEL_6;
    }
    if (v5 == 1)
    {
      v6 = 0;
      v7 = *((_QWORD *)this + 36) + 8;
LABEL_6:
      v8 = 0x8000000000000000;
      goto LABEL_8;
    }
    v6 = 0;
    v7 = 0;
    v8 = 1;
LABEL_8:
    *(_QWORD *)buf = v3;
    *(_QWORD *)&buf[8] = v7;
    *(_OWORD *)v285 = v6;
    *(_QWORD *)&v285[16] = v8;
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v2, (unsigned __int8 **)buf))
    {
      break;
    }
    v9 = *v2;
    v10 = **v2;
    if (v10 == 2)
    {
      v9 = (unsigned __int8 *)*((_QWORD *)this + 39);
    }
    else if (v10 == 1)
    {
      v9 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 56);
    }
    else if (*((_QWORD *)this + 41))
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(buf, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)buf, exception);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "what");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v9, (const void **)buf, &__p);
    if ((v285[7] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      p_p = &__p;
      switch(*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        case 5:
          goto LABEL_30;
        case 6:
          v12 = LODWORD(__p.__r_.__value_.__l.__data_) == 1651469415 && WORD2(__p.__r_.__value_.__r.__words[0]) == 27745;
          if (v12)
            goto LABEL_81;
          if (LODWORD(__p.__r_.__value_.__l.__data_) != 1634887792 || WORD2(__p.__r_.__value_.__r.__words[0]) != 25971)
            goto LABEL_97;
          goto LABEL_75;
        case 8:
          v19 = __p.__r_.__value_.__r.__words[0];
          goto LABEL_44;
        case 0xA:
          if (__p.__r_.__value_.__r.__words[0] != 0x7475626972747461
            || LOWORD(__p.__r_.__value_.__r.__words[1]) != 29541)
          {
            goto LABEL_97;
          }
          goto LABEL_111;
        default:
          goto LABEL_97;
      }
    }
    switch(__p.__r_.__value_.__l.__size_)
    {
      case 5uLL:
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
        data = (int)p_p->__r_.__value_.__l.__data_;
        v15 = p_p->__r_.__value_.__s.__data_[4];
        if (data != 1701539700 || v15 != 110)
          goto LABEL_97;
        v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        InjectJSONImpl::inject_token((uint64_t)this, v17);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v2);
        v18 = 0;
        goto LABEL_107;
      case 6uLL:
        if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1651469415
          || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 27745)
        {
          if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 1634887792
            || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) != 25971)
          {
LABEL_97:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v60 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v62 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v62;
            }
            v63 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_106;
          }
LABEL_75:
          v37 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
          v38 = (std::__shared_weak_count *)operator new(0x30uLL);
          *(_OWORD *)&v38->__shared_owners_ = 0u;
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          *(_OWORD *)&v38[1].__shared_owners_ = 0u;
          v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
          v38[1].__vftable = (std::__shared_weak_count_vtbl *)&v38[1].__shared_owners_;
          v283.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38[1];
          v283.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
          v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "id");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v40, (std::string *)buf);
          v282.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v271, (const void **)buf, &v282);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v41 + 7, (uint64_t)&v38[1], (uint64_t)v38);
          if ((v285[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (*v37 == 1
            && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v37 + 1), "num_words"))
          {
            v42 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_words");
            *(_QWORD *)buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v42, (unint64_t *)buf);
            v43 = *(_QWORD *)buf;
            v44 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_syllables");
            *(_QWORD *)buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v44, (unint64_t *)buf);
            v45 = *(_QWORD *)buf;
            v46 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v37, "num_phonemes");
            *(_QWORD *)buf = 0;
            nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v46, (unint64_t *)buf);
            v47 = *(_QWORD *)buf;
            *(_QWORD *)buf = &v282;
            v49 = (_QWORD *)v48[5];
            if (v49)
            {
              v49[1] = v47;
              v49[2] = v45;
              v49[3] = v43;
              v4 = v274;
            }
            else
            {
              v140 = (_QWORD *)operator new();
              *v140 = &off_1EA922E48;
              v140[1] = v47;
              v140[2] = v45;
              v140[3] = v43;
              v141 = v48[5];
              v48[5] = (uint64_t)v140;
              v4 = v274;
              if (v141)
                (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
            }
          }
          do
            v142 = __ldaxr(p_shared_owners);
          while (__stlxr(v142 - 1, p_shared_owners));
          if (v142)
            goto LABEL_106;
LABEL_576:
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          goto LABEL_106;
        }
LABEL_81:
        v50 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        v51 = (char *)operator new(0xC8uLL);
        *((_QWORD *)v51 + 1) = 0;
        *((_QWORD *)v51 + 2) = 0;
        *(_QWORD *)v51 = &off_1EA933FC8;
        *(_OWORD *)(v51 + 120) = 0u;
        *(_OWORD *)(v51 + 40) = 0u;
        *(_OWORD *)(v51 + 56) = 0u;
        *(_OWORD *)(v51 + 72) = 0u;
        *(_OWORD *)(v51 + 88) = 0u;
        *(_OWORD *)(v51 + 104) = 0u;
        *(_OWORD *)(v51 + 24) = 0u;
        *(_OWORD *)(v51 + 136) = 0u;
        *((_QWORD *)v51 + 16) = v51 + 136;
        *(_OWORD *)(v51 + 152) = 0u;
        *(_OWORD *)(v51 + 168) = 0u;
        *(_OWORD *)(v51 + 184) = 0u;
        *(_QWORD *)buf = v51 + 24;
        *(_QWORD *)&buf[8] = v51;
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v4, (__int128 *)buf);
        v52 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v283, "text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v50, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v55 = *(_QWORD *)v4;
        if (*(char *)(*(_QWORD *)v4 + 23) < 0)
          operator delete(*(void **)v55);
        v56 = *(_OWORD *)buf;
        *(_QWORD *)(v55 + 16) = *(_QWORD *)v285;
        *(_OWORD *)v55 = v56;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "parser");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("legacy", (char *)v50, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v57 = v285[7];
        if ((v285[7] & 0x80000000) != 0)
        {
          if (*(_QWORD *)&buf[8] != 4)
          {
            *(_DWORD *)(*(_QWORD *)v4 + 24) = 1818715001;
LABEL_148:
            operator delete(*(void **)buf);
            goto LABEL_149;
          }
          v58 = *(unsigned int **)buf;
        }
        else
        {
          if (v285[7] != 4)
          {
            *(_DWORD *)(*(_QWORD *)v4 + 24) = 1818715001;
LABEL_149:
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v283, "base");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v50, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
            v78 = *(_QWORD *)v4 + 32;
            if (*(char *)(*(_QWORD *)v4 + 55) < 0)
              operator delete(*(void **)v78);
            *(_OWORD *)v78 = *(_OWORD *)buf;
            *(_QWORD *)(v78 + 16) = *(_QWORD *)v285;
            v285[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v283, "startmark");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v50, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
            v79 = *(_QWORD *)v4 + 56;
            if (*(char *)(*(_QWORD *)v4 + 79) < 0)
              operator delete(*(void **)v79);
            *(_OWORD *)v79 = *(_OWORD *)buf;
            *(_QWORD *)(v79 + 16) = *(_QWORD *)v285;
            v285[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v283, "endmark");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v50, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
            v80 = *(_QWORD *)v4 + 80;
            if (*(char *)(*(_QWORD *)v4 + 103) < 0)
              operator delete(*(void **)v80);
            *(_OWORD *)v80 = *(_OWORD *)buf;
            *(_QWORD *)(v80 + 16) = *(_QWORD *)v285;
            v285[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            if (*v50 == 1)
            {
              if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v50 + 1), "lexica"))
              {
                v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v50, "lexica");
                v82 = (unsigned __int8 *)v81;
                *(_OWORD *)&v276.__r_.__value_.__r.__words[1] = 0uLL;
                v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276.__r_.__value_.__l.__size_;
                if (*(_BYTE *)v81 != 1)
                {
                  v259 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
                  v260 = *v82;
                  if (v260 > 9)
                    v261 = "number";
                  else
                    v261 = off_1EA94C758[v260];
                  v262 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v283, v261);
                  v263 = std::string::insert(v262, 0, "type must be object, but is ");
                  v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
                  *(_QWORD *)v285 = *((_QWORD *)&v263->__r_.__value_.__l + 2);
                  *(_OWORD *)buf = v264;
                  v263->__r_.__value_.__l.__size_ = 0;
                  v263->__r_.__value_.__r.__words[2] = 0;
                  v263->__r_.__value_.__r.__words[0] = 0;
                  nlohmann::detail::type_error::create(302, (uint64_t)buf, v259);
                }
                *(_OWORD *)&v282.__r_.__value_.__r.__words[1] = 0uLL;
                v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282.__r_.__value_.__l.__size_;
                v83 = *(_QWORD **)(v81 + 8);
                v86 = (_QWORD *)*v83;
                v84 = v83 + 1;
                v85 = v86;
                if (v86 == v84)
                {
                  size = 0;
                }
                else
                {
                  p_size = (uint64_t *)&v282.__r_.__value_.__l.__size_;
                  do
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v283, (uint64_t)(v85 + 7));
                    if (*((char *)v85 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v85[4], v85[5]);
                    }
                    else
                    {
                      *(_OWORD *)buf = *((_OWORD *)v85 + 2);
                      *(_QWORD *)v285 = v85[6];
                    }
                    v285[8] = v283.__r_.__value_.__s.__data_[0];
                    *(_QWORD *)&v285[16] = v283.__r_.__value_.__l.__size_;
                    v283.__r_.__value_.__s.__data_[0] = 0;
                    v283.__r_.__value_.__l.__size_ = 0;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v283.__r_.__value_.__l.__size_, 0);
                    v88 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(&v282, p_size, &v280, v279, (const void **)buf);
                    v89 = *v88;
                    if (!*v88)
                    {
                      v90 = (char *)operator new(0x48uLL);
                      v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
                      v283.__r_.__value_.__l.__size_ = (std::string::size_type)&v282.__r_.__value_.__l.__size_;
                      v283.__r_.__value_.__s.__data_[16] = 0;
                      v91 = (std::string *)(v90 + 32);
                      if ((v285[7] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
                        v92 = (uint64_t *)v283.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        *(_OWORD *)&v91->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
                        *((_QWORD *)v90 + 6) = *(_QWORD *)v285;
                        v92 = (uint64_t *)v90;
                      }
                      v90[56] = v285[8];
                      *((_QWORD *)v90 + 8) = *(_QWORD *)&v285[16];
                      v285[8] = 0;
                      *(_QWORD *)&v285[16] = 0;
                      v283.__r_.__value_.__s.__data_[16] = 1;
                      std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at((uint64_t **)&v282, (uint64_t)v280, v88, v92);
                      v89 = (uint64_t *)v283.__r_.__value_.__r.__words[0];
                      v283.__r_.__value_.__r.__words[0] = 0;
                      std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v283, 0);
                    }
                    v93 = (uint64_t *)v89[1];
                    if (v93)
                    {
                      do
                      {
                        p_size = v93;
                        v93 = (uint64_t *)*v93;
                      }
                      while (v93);
                    }
                    else
                    {
                      do
                      {
                        p_size = (uint64_t *)v89[2];
                        v12 = *p_size == (_QWORD)v89;
                        v89 = p_size;
                      }
                      while (!v12);
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v285[16], v285[8]);
                    if ((v285[7] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    v94 = (_QWORD *)v85[1];
                    v4 = v274;
                    if (v94)
                    {
                      do
                      {
                        v95 = v94;
                        v94 = (_QWORD *)*v94;
                      }
                      while (v94);
                    }
                    else
                    {
                      do
                      {
                        v95 = (_QWORD *)v85[2];
                        v12 = *v95 == (_QWORD)v85;
                        v85 = v95;
                      }
                      while (!v12);
                    }
                    v85 = v95;
                  }
                  while (v95 != v84);
                  size = (char *)v276.__r_.__value_.__l.__size_;
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v276, size);
                v105 = (char *)v282.__r_.__value_.__l.__size_;
                v276 = v282;
                if (v282.__r_.__value_.__r.__words[2])
                {
                  *(_QWORD *)(v282.__r_.__value_.__l.__size_ + 16) = &v276.__r_.__value_.__l.__size_;
                  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282.__r_.__value_.__l.__size_;
                  *(_OWORD *)&v282.__r_.__value_.__r.__words[1] = 0uLL;
                  v105 = 0;
                }
                else
                {
                  v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276.__r_.__value_.__l.__size_;
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v282, v105);
                v106 = v276.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v276.__r_.__value_.__l.__data_ != &v276.__r_.__value_.__r.__words[1])
                {
                  do
                  {
                    memset(v285, 0, 32);
                    *(_OWORD *)buf = 0u;
                    *(_DWORD *)&v285[32] = 2139095040;
                    *(_OWORD *)&v285[40] = xmmword_1DED16BD0;
                    std::string::basic_string[abi:ne180100]<0>(&v282, "uri");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(v106 + 56), (const void **)&v282.__r_.__value_.__l.__data_, &v283);
                    if ((v285[7] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    *(_OWORD *)buf = *(_OWORD *)&v283.__r_.__value_.__l.__data_;
                    *(_QWORD *)v285 = *((_QWORD *)&v283.__r_.__value_.__l + 2);
                    *((_BYTE *)&v283.__r_.__value_.__s + 23) = 0;
                    v283.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v282.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v282, "media_type");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(v106 + 56), (const void **)&v282.__r_.__value_.__l.__data_, &v283);
                    if ((v285[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v285[8]);
                    *(std::string *)&v285[8] = v283;
                    *((_BYTE *)&v283.__r_.__value_.__s + 23) = 0;
                    v283.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v282.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v283, "timeout");
                    LODWORD(v282.__r_.__value_.__l.__data_) = 2139095040;
                    *(_DWORD *)&v285[32] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>((unsigned __int8 *)(v106 + 56), (const void **)&v283.__r_.__value_.__l.__data_, (uint64_t)&v282);
                    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v283.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v283, "maxage");
                    LODWORD(v282.__r_.__value_.__l.__data_) = -1;
                    *(_QWORD *)&v285[40] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>((unsigned __int8 *)(v106 + 56), (const void **)&v283.__r_.__value_.__l.__data_, (unsigned int *)&v282);
                    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v283.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v283, "maxstale");
                    LODWORD(v282.__r_.__value_.__l.__data_) = 0;
                    *(_QWORD *)&v285[48] = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)(v106 + 56), (const void **)&v283.__r_.__value_.__l.__data_, (unsigned int *)&v282);
                    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v283.__r_.__value_.__l.__data_);
                    v107 = (uint64_t **)(*(_QWORD *)v4 + 104);
                    v283.__r_.__value_.__r.__words[0] = v106 + 32;
                    v108 = std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v107, (const void **)(v106 + 32), (__int128 **)&v283);
                    std::string::operator=((std::string *)(v108 + 56), (const std::string *)buf);
                    std::string::operator=((std::string *)(v108 + 80), (const std::string *)&v285[8]);
                    *(_OWORD *)(v108 + 104) = *(_OWORD *)&v285[32];
                    *((_QWORD *)v108 + 15) = *(_QWORD *)&v285[48];
                    if ((v285[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v285[8]);
                    if ((v285[7] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    v109 = *(std::string **)(v106 + 8);
                    if (v109)
                    {
                      do
                      {
                        v110 = v109;
                        v109 = (std::string *)v109->__r_.__value_.__r.__words[0];
                      }
                      while (v109);
                    }
                    else
                    {
                      do
                      {
                        v110 = *(std::string **)(v106 + 16);
                        v12 = v110->__r_.__value_.__r.__words[0] == v106;
                        v106 = (std::string::size_type)v110;
                      }
                      while (!v12);
                    }
                    v106 = (std::string::size_type)v110;
                  }
                  while (v110 != (std::string *)&v276.__r_.__value_.__r.__words[1]);
                }
                std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)&v276, (char *)v276.__r_.__value_.__l.__size_);
              }
              if (*v50 == 1)
              {
                if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v50 + 1), "meta"))
                {
                  v111 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v50, "meta");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v111, &v283);
                  v112 = v283.__r_.__value_.__l.__size_;
                  for (i = (char *)v283.__r_.__value_.__r.__words[0]; i != (char *)v112; i += 16)
                  {
                    *(_OWORD *)buf = 0u;
                    memset(v285, 0, sizeof(v285));
                    std::string::basic_string[abi:ne180100]<0>(&v276, "name");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, i, (const void **)&v276.__r_.__value_.__l.__data_, &v282);
                    *(_OWORD *)buf = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
                    *(_QWORD *)v285 = *((_QWORD *)&v282.__r_.__value_.__l + 2);
                    *((_BYTE *)&v282.__r_.__value_.__s + 23) = 0;
                    v282.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v276.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v276, "http-equiv");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, i, (const void **)&v276.__r_.__value_.__l.__data_, &v282);
                    *(std::string *)&v285[8] = v282;
                    *((_BYTE *)&v282.__r_.__value_.__s + 23) = 0;
                    v282.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v276.__r_.__value_.__l.__data_);
                    std::string::basic_string[abi:ne180100]<0>(&v276, "content");
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, i, (const void **)&v276.__r_.__value_.__l.__data_, &v282);
                    *(std::string *)&v285[32] = v282;
                    *((_BYTE *)&v282.__r_.__value_.__s + 23) = 0;
                    v282.__r_.__value_.__s.__data_[0] = 0;
                    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v276.__r_.__value_.__l.__data_);
                    v114 = *(int64x2_t **)v4;
                    v115 = *(_QWORD *)(*(_QWORD *)v4 + 136);
                    if (v115 >= *(_QWORD *)(*(_QWORD *)v4 + 144))
                    {
                      v116 = std::vector<MetaElement>::__push_back_slow_path<MetaElement const&>(v114 + 8, (__int128 *)buf);
                    }
                    else
                    {
                      std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>(*(std::string **)(*(_QWORD *)v4 + 136), (__int128 *)buf);
                      v116 = v115 + 72;
                      v114[8].i64[1] = v115 + 72;
                    }
                    v114[8].i64[1] = v116;
                    if ((v285[55] & 0x80000000) != 0)
                      operator delete(*(void **)&v285[32]);
                    if ((v285[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v285[8]);
                    if ((v285[7] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                  }
                  *(_QWORD *)buf = &v283;
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
                if (*v50 == 1
                  && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v50 + 1), "metadata"))
                {
                  v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v50, "metadata");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v117, &v283);
                  v119 = v283.__r_.__value_.__l.__size_;
                  for (j = v283.__r_.__value_.__r.__words[0]; j != v119; j += 16)
                  {
                    v120 = *(_QWORD *)v4;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(j, &v282);
                    v121 = *(_QWORD *)(v120 + 168);
                    v122 = *(_QWORD *)(v120 + 160);
                    if (v122 >= v121)
                    {
                      v124 = *(_QWORD *)(v120 + 152);
                      v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v124) >> 3);
                      v126 = v125 + 1;
                      if (v125 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - v124) >> 3);
                      if (2 * v127 > v126)
                        v126 = 2 * v127;
                      if (v127 >= 0x555555555555555)
                        v128 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v128 = v126;
                      *(_QWORD *)&v285[16] = v120 + 168;
                      if (v128)
                        v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v120 + 168, v128);
                      else
                        v129 = 0;
                      v130 = &v129[24 * v125];
                      *(_QWORD *)buf = v129;
                      *(_QWORD *)&buf[8] = v130;
                      *(_QWORD *)&v285[8] = &v129[24 * v128];
                      v131 = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
                      *((_QWORD *)v130 + 2) = *((_QWORD *)&v282.__r_.__value_.__l + 2);
                      *(_OWORD *)v130 = v131;
                      memset(&v282, 0, sizeof(v282));
                      *(_QWORD *)v285 = v130 + 24;
                      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v120 + 152), (std::__split_buffer<std::string> *)buf);
                      v132 = *(_QWORD *)(v120 + 160);
                      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)buf);
                      v133 = SHIBYTE(v282.__r_.__value_.__r.__words[2]);
                      *(_QWORD *)(v120 + 160) = v132;
                      v4 = v274;
                      if (v133 < 0)
                        operator delete(v282.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v123 = *(_OWORD *)&v282.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v122 + 16) = *((_QWORD *)&v282.__r_.__value_.__l + 2);
                      *(_OWORD *)v122 = v123;
                      *(_QWORD *)(v120 + 160) = v122 + 24;
                    }
                  }
                  *(_QWORD *)buf = &v283;
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
              }
            }
            goto LABEL_106;
          }
          v58 = (unsigned int *)buf;
        }
        v70 = bswap32(*v58);
        v71 = v70 >= 0x73736D6C;
        v72 = v70 > 0x73736D6C;
        v73 = !v71;
        if (v72 == v73)
          v74 = 1936944492;
        else
          v74 = 1818715001;
        *(_DWORD *)(*(_QWORD *)v4 + 24) = v74;
        if ((v57 & 0x80000000) == 0)
          goto LABEL_149;
        goto LABEL_148;
      case 8uLL:
        v19 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
LABEL_44:
        if (v19 != 0x65636E65746E6573)
          goto LABEL_97;
        v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        v22 = operator new(0x30uLL);
        *(_OWORD *)((char *)v22 + 8) = 0u;
        v22[2] = 0u;
        *(_QWORD *)v22 = &off_1EA932198;
        *((_QWORD *)v22 + 3) = v22 + 2;
        v23 = (uint64_t)v22 + 24;
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v22 + 24;
        v282.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
        v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v21, "id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v24, (std::string *)buf);
        v283.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v272, (const void **)buf, &v283);
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v25 + 7, (uint64_t)v22 + 24, (uint64_t)v22);
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (*v21 != 1)
          goto LABEL_199;
        if (!std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v21 + 1), "sent_type"))goto LABEL_192;
        std::string::basic_string[abi:ne180100]<0>(&v283, "sent_type");
        if (*v21 != 1
          || !std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((_QWORD *)v21 + 1), (const void **)&v283.__r_.__value_.__l.__data_))
        {
          LODWORD(v31) = 0;
          goto LABEL_143;
        }
        v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v21, (const void **)&v283.__r_.__value_.__l.__data_);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v26, (std::string *)buf);
        v27 = operator new(0x18uLL);
        *(_OWORD *)v27 = xmmword_1EA94B3D0;
        v27[2] = "yes/no-question";
        v28 = v285[7];
        v29 = *(_QWORD *)&buf[8];
        if (v285[7] >= 0)
          v30 = v285[7];
        else
          v30 = *(_QWORD *)&buf[8];
        if (!v30)
          goto LABEL_63;
        v31 = 0;
        __s1 = *(uint8_t **)buf;
        while (1)
        {
          v32 = strlen((const char *)v27[v31]);
          v33 = v32;
          if ((v28 & 0x80) != 0)
          {
            if (v32 == v29)
            {
              v34 = __s1;
              if (v29 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
LABEL_61:
              if (!memcmp(v34, (const void *)v27[v31], v33))
                goto LABEL_64;
            }
          }
          else if (v32 == v28)
          {
            v34 = buf;
            goto LABEL_61;
          }
          if (++v31 == 3)
          {
LABEL_63:
            LODWORD(v31) = 0;
LABEL_64:
            operator delete(v27);
            v4 = v274;
            if ((v285[7] & 0x80000000) != 0)
              operator delete(*(void **)buf);
LABEL_143:
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            *(_QWORD *)buf = &v283;
            v77 = v76[5];
            if (v77)
            {
              *(_DWORD *)(v77 + 8) = v31;
            }
            else
            {
              v97 = operator new();
              *(_QWORD *)v97 = &off_1EA922EA8;
              *(_DWORD *)(v97 + 8) = v31;
              v98 = v76[5];
              v76[5] = v97;
              if (v98)
                (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
            }
LABEL_192:
            if (*v21 == 1)
            {
              v99 = *((_QWORD *)v21 + 1);
              v102 = *(uint64_t **)(v99 + 8);
              v100 = (uint64_t *)(v99 + 8);
              for (k = v102; k; k = (uint64_t *)*k)
              {
                if (std::string::compare((const std::string *)(k + 4), "num_phrases") <= 0)
                {
                  if ((std::string::compare((const std::string *)(k + 4), "num_phrases") & 0x80000000) == 0)
                  {
                    v150 = (uint64_t *)*k;
                    v151 = k;
                    if (*k)
                    {
                      v151 = k;
                      do
                      {
                        v152 = std::string::compare((const std::string *)(v150 + 4), "num_phrases");
                        v153 = (uint64_t **)(v150 + 1);
                        if (v152 >= 0)
                        {
                          v153 = (uint64_t **)v150;
                          v151 = v150;
                        }
                        v150 = *v153;
                      }
                      while (*v153);
                    }
                    v154 = (uint64_t *)k[1];
                    v4 = v274;
                    if (v154)
                    {
                      do
                      {
                        v155 = std::string::compare((const std::string *)(v154 + 4), "num_phrases");
                        v156 = (uint64_t **)(v154 + 1);
                        if (v155 > 0)
                        {
                          v156 = (uint64_t **)v154;
                          v100 = v154;
                        }
                        v154 = *v156;
                      }
                      while (*v156);
                    }
                    if (v151 != v100)
                    {
                      v157 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v21, "num_phrases");
                      *(_QWORD *)buf = 0;
                      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v157, (unint64_t *)buf);
                      v158 = *(_QWORD *)buf;
                      v159 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v21, "num_words");
                      *(_QWORD *)buf = 0;
                      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v159, (unint64_t *)buf);
                      v160 = *(_QWORD *)buf;
                      v161 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v21, "num_syllables");
                      *(_QWORD *)buf = 0;
                      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v161, (unint64_t *)buf);
                      v162 = *(_QWORD *)buf;
                      v163 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v21, "num_phonemes");
                      *(_QWORD *)buf = 0;
                      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v163, (unint64_t *)buf);
                      v164 = *(_QWORD *)buf;
                      *(_QWORD *)buf = &v283;
                      v166 = (_QWORD *)v165[5];
                      if (v166)
                      {
                        v166[1] = v164;
                        v166[2] = v162;
                        v166[3] = v160;
                        v166[4] = v158;
                        v4 = v274;
                      }
                      else
                      {
                        v237 = (_QWORD *)operator new();
                        *v237 = &off_1EA922F68;
                        v237[1] = v164;
                        v237[2] = v162;
                        v237[3] = v160;
                        v237[4] = v158;
                        v238 = v165[5];
                        v165[5] = (uint64_t)v237;
                        v4 = v274;
                        if (v238)
                          (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
                      }
                    }
                    break;
                  }
                  ++k;
                }
                else
                {
                  v100 = k;
                }
              }
            }
LABEL_199:
            v38 = (std::__shared_weak_count *)v282.__r_.__value_.__l.__size_;
            if (v282.__r_.__value_.__l.__size_)
            {
              v103 = (unint64_t *)(v282.__r_.__value_.__l.__size_ + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              goto LABEL_575;
            }
            goto LABEL_106;
          }
        }
      case 0xAuLL:
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x7475626972747461
          || *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) != 29541)
        {
          goto LABEL_97;
        }
LABEL_111:
        v64 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v2);
        std::string::basic_string[abi:ne180100]<0>(&v283, "super");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        v65 = std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v273, (const void **)buf, &v282);
        v66 = *((_QWORD *)v65 + 7);
        v67 = (std::__shared_weak_count *)*((_QWORD *)v65 + 8);
        v276.__r_.__value_.__r.__words[0] = v66;
        v276.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(buf, "type");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)buf, &v282);
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          switch(*((_BYTE *)&v282.__r_.__value_.__s + 23))
          {
            case 4:
              if (LODWORD(v282.__r_.__value_.__l.__data_) == 1146244951)
                goto LABEL_303;
              if (LODWORD(v282.__r_.__value_.__l.__data_) == 1196310860)
                goto LABEL_364;
              goto LABEL_375;
            case 5:
              if (LODWORD(v282.__r_.__value_.__l.__data_) == 1095061587 && v282.__r_.__value_.__s.__data_[4] == 75)
                goto LABEL_350;
              if (LODWORD(v282.__r_.__value_.__l.__data_) == 1128877910 && v282.__r_.__value_.__s.__data_[4] == 69)
                goto LABEL_363;
              if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) != 0)
                goto LABEL_323;
              goto LABEL_335;
            case 6:
              if (LODWORD(v282.__r_.__value_.__l.__data_) != 1263488844
                || WORD2(v282.__r_.__value_.__r.__words[0]) != 20565)
              {
                goto LABEL_374;
              }
              goto LABEL_314;
            case 7:
              if (LODWORD(v282.__r_.__value_.__l.__data_) != 1397707344
                || *(_DWORD *)((char *)v282.__r_.__value_.__r.__words + 3) != 1497648979)
              {
                goto LABEL_588;
              }
              goto LABEL_286;
            case 8:
              if (v282.__r_.__value_.__r.__words[0] == 0x45434E45544E4553)
                goto LABEL_343;
              if (v282.__r_.__value_.__r.__words[0] != 0x5349534148504D45)
                goto LABEL_588;
              goto LABEL_342;
            case 9:
              if (v282.__r_.__value_.__r.__words[0] != 0x5041524741524150 || v282.__r_.__value_.__s.__data_[8] != 72)
                goto LABEL_588;
              goto LABEL_349;
            default:
              goto LABEL_588;
          }
        }
        v75 = v282.__r_.__value_.__l.__size_;
        switch(v282.__r_.__value_.__l.__size_)
        {
          case 4uLL:
            if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1146244951)
            {
LABEL_303:
              v136 = 4;
              goto LABEL_390;
            }
            if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1196310860)
            {
LABEL_364:
              v136 = 6;
              goto LABEL_390;
            }
            if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_372;
            v75 = v282.__r_.__value_.__l.__size_;
            if (v282.__r_.__value_.__l.__size_ == 5)
            {
LABEL_319:
              if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1128877910
                && *(_BYTE *)(v282.__r_.__value_.__r.__words[0] + 4) == 69)
              {
LABEL_363:
                v136 = 7;
                goto LABEL_390;
              }
LABEL_323:
              v75 = v282.__r_.__value_.__l.__size_;
            }
LABEL_324:
            if (v75 == 7)
            {
              if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1397707344
                && *(_DWORD *)(v282.__r_.__value_.__r.__words[0] + 3) == 1497648979)
              {
LABEL_286:
                v136 = 8;
                goto LABEL_390;
              }
              if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_335;
            }
            v147 = v282.__r_.__value_.__l.__size_;
            if (v282.__r_.__value_.__l.__size_ != 8)
              goto LABEL_366;
LABEL_333:
            if (*(_QWORD *)v282.__r_.__value_.__l.__data_ == 0x5349534148504D45)
            {
LABEL_342:
              v136 = 9;
              goto LABEL_390;
            }
            if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_335:
              if (HIBYTE(v282.__r_.__value_.__r.__words[2]) == 4)
                goto LABEL_375;
              if (HIBYTE(v282.__r_.__value_.__r.__words[2]) == 5)
              {
                if (LODWORD(v282.__r_.__value_.__l.__data_) != 1229215041 || v282.__r_.__value_.__s.__data_[4] != 79)
                {
LABEL_588:
                  v265 = __cxa_allocate_exception(0x10uLL);
                  v266 = &v282;
                  if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v266 = (std::string *)v282.__r_.__value_.__r.__words[0];
                  MEMORY[0x1DF0EC99C](v265, buf);
                  __cxa_throw(v265, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
                }
LABEL_377:
                v136 = 10;
                goto LABEL_390;
              }
              goto LABEL_373;
            }
            v147 = v282.__r_.__value_.__l.__size_;
LABEL_366:
            if (v147 == 5)
            {
              if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1229215041
                && *(_BYTE *)(v282.__r_.__value_.__r.__words[0] + 4) == 79)
              {
                goto LABEL_377;
              }
              if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
              {
LABEL_372:
                if (HIBYTE(v282.__r_.__value_.__r.__words[2]) == 4)
                {
LABEL_375:
                  if (LODWORD(v282.__r_.__value_.__l.__data_) != 1129530692)
                    goto LABEL_588;
LABEL_376:
                  v136 = 11;
                  goto LABEL_390;
                }
LABEL_373:
                if (HIBYTE(v282.__r_.__value_.__r.__words[2]) != 6)
                  goto LABEL_588;
LABEL_374:
                v168 = &v282;
                goto LABEL_384;
              }
            }
            v169 = v282.__r_.__value_.__l.__size_;
            if (v282.__r_.__value_.__l.__size_ == 4)
            {
              if (*(_DWORD *)v282.__r_.__value_.__l.__data_ == 1129530692)
                goto LABEL_376;
              if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_588;
              v169 = v282.__r_.__value_.__l.__size_;
            }
            if (v169 != 6)
              goto LABEL_588;
LABEL_383:
            v168 = (std::string *)v282.__r_.__value_.__r.__words[0];
LABEL_384:
            v170 = (int)v168->__r_.__value_.__l.__data_;
            v171 = WORD2(v168->__r_.__value_.__r.__words[0]);
            if (v170 != 760824147 || v171 != 21313)
              goto LABEL_588;
            v136 = 5;
LABEL_390:
            if (v66)
            {
              v279[0] = v66;
              v279[1] = (uint64_t)v67;
              if (v67)
              {
                v173 = (unint64_t *)&v67->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              TokenAttributes::create_nested(&v280, v279, v136);
              if (v67)
              {
                v175 = (unint64_t *)&v67->__shared_owners_;
                do
                  v176 = __ldaxr(v175);
                while (__stlxr(v176 - 1, v175));
                if (!v176)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
            }
            else
            {
              v177 = (std::__shared_weak_count *)operator new(0x158uLL);
              v177->__shared_owners_ = 0;
              v177->__shared_weak_owners_ = 0;
              v177->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933158;
              *(_OWORD *)&v177[1].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[2].__shared_owners_ = 0u;
              v177[3].std::__shared_count = 0u;
              *(_OWORD *)&v177[3].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[4].__shared_owners_ = 0u;
              v177[5].std::__shared_count = 0u;
              *(_OWORD *)&v177[5].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[6].__shared_owners_ = 0u;
              v177[7].std::__shared_count = 0u;
              *(_OWORD *)&v177[7].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[8].__shared_owners_ = 0u;
              v177[9].std::__shared_count = 0u;
              *(_OWORD *)&v177[9].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[10].__shared_owners_ = 0u;
              v177[1].std::__shared_count = 0u;
              v177[11].std::__shared_count = 0u;
              *(_OWORD *)&v177[11].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v177[12].__shared_owners_ = 0u;
              v177[13].std::__shared_count = 0u;
              *(_OWORD *)&v177[13].__shared_weak_owners_ = 0u;
              v280 = (const void **)&v177[1].__vftable;
              v281 = v177;
            }
            *((_DWORD *)v280 + 8) = v136;
            std::string::basic_string[abi:ne180100]<0>(&v283, "id");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
            v178 = v280 + 9;
            if (*((char *)v280 + 95) < 0)
              operator delete((void *)*v178);
            *(_OWORD *)v178 = *(_OWORD *)buf;
            v178[2] = *(const void **)v285;
            v285[7] = 0;
            buf[0] = 0;
            if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v283.__r_.__value_.__l.__data_);
            v179 = v280;
            v180 = v280 + 9;
            v181 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)v273, &v283, v280 + 9);
            v182 = *v181;
            if (!*v181)
            {
              v183 = v181;
              v182 = (uint64_t *)operator new(0x48uLL);
              *(_QWORD *)buf = v182;
              *(_QWORD *)&buf[8] = v270;
              v285[0] = 0;
              v184 = (std::string *)(v182 + 4);
              if (*((char *)v179 + 95) < 0)
              {
                std::string::__init_copy_ctor_external(v184, (const std::string::value_type *)v179[9], (std::string::size_type)v179[10]);
              }
              else
              {
                v185 = *(_OWORD *)v180;
                v182[6] = (uint64_t)v180[2];
                *(_OWORD *)&v184->__r_.__value_.__l.__data_ = v185;
              }
              v182[7] = 0;
              v182[8] = 0;
              v285[0] = 1;
              std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(v273, (uint64_t)v283.__r_.__value_.__l.__data_, v183, v182);
              *(_QWORD *)buf = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
            }
            break;
          case 5uLL:
            if (*(_DWORD *)v282.__r_.__value_.__l.__data_ != 1095061587
              || *(_BYTE *)(v282.__r_.__value_.__r.__words[0] + 4) != 75)
            {
              goto LABEL_319;
            }
LABEL_350:
            v136 = 0;
            goto LABEL_390;
          case 6uLL:
            if (*(_DWORD *)v282.__r_.__value_.__l.__data_ != 1263488844
              || *(_WORD *)(v282.__r_.__value_.__r.__words[0] + 4) != 20565)
            {
              goto LABEL_383;
            }
LABEL_314:
            v136 = 1;
            goto LABEL_390;
          case 8uLL:
            if (*(_QWORD *)v282.__r_.__value_.__l.__data_ != 0x45434E45544E4553)
              goto LABEL_333;
LABEL_343:
            v136 = 3;
            goto LABEL_390;
          case 9uLL:
            if (*(_QWORD *)v282.__r_.__value_.__l.__data_ != 0x5041524741524150
              || *(_BYTE *)(v282.__r_.__value_.__r.__words[0] + 8) != 72)
            {
              goto LABEL_588;
            }
LABEL_349:
            v136 = 2;
            goto LABEL_390;
          default:
            goto LABEL_324;
        }
        break;
      default:
        goto LABEL_97;
    }
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v182 + 7, (uint64_t)v280, (uint64_t)v281);
    std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v280 + 2, *((_QWORD *)this + 24), *((_QWORD *)this + 25));
    v186 = v280;
    switch(*((_DWORD *)v280 + 8))
    {
      case 0:
      case 2:
      case 3:
      case 6:
      case 0xB:
        goto LABEL_410;
      case 1:
        std::string::basic_string[abi:ne180100]<0>(&v283, "ref");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v206 = v280 + 12;
        if (*((char *)v280 + 119) < 0)
          goto LABEL_475;
        goto LABEL_476;
      case 4:
        std::string::basic_string[abi:ne180100]<0>(&v283, "role");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v219 = v280 + 15;
        if (*((char *)v280 + 143) < 0)
          operator delete((void *)*v219);
        *(_OWORD *)v219 = *(_OWORD *)buf;
        v219[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        v186 = v280;
LABEL_410:
        std::string::basic_string[abi:ne180100]<0>(&v283, "lang");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>((char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (uint64_t)*v186 + 40, (std::string *)buf);
        v187 = v280 + 5;
        if (*((char *)v280 + 63) < 0)
          operator delete((void *)*v187);
        *(_OWORD *)v187 = *(_OWORD *)buf;
        v187[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        if (*v64 != 1)
          goto LABEL_565;
        v188 = *((_QWORD *)v64 + 1);
        v191 = *(uint64_t **)(v188 + 8);
        v189 = (uint64_t *)(v188 + 8);
        v190 = v191;
        if (!v191)
          goto LABEL_565;
        while (2)
        {
          if (std::string::compare((const std::string *)(v190 + 4), "onlangfailure") > 0)
          {
            v189 = v190;
            goto LABEL_420;
          }
          if (std::string::compare((const std::string *)(v190 + 4), "onlangfailure") < 0)
          {
            ++v190;
LABEL_420:
            v190 = (uint64_t *)*v190;
            if (!v190)
              goto LABEL_565;
            continue;
          }
          break;
        }
        v220 = (uint64_t *)*v190;
        v221 = v190;
        if (*v190)
        {
          v221 = v190;
          do
          {
            v222 = std::string::compare((const std::string *)(v220 + 4), "onlangfailure");
            v223 = (uint64_t **)(v220 + 1);
            if (v222 >= 0)
            {
              v223 = (uint64_t **)v220;
              v221 = v220;
            }
            v220 = *v223;
          }
          while (*v223);
        }
        v224 = (uint64_t *)v190[1];
        v4 = v274;
        if (v224)
        {
          do
          {
            v225 = std::string::compare((const std::string *)(v224 + 4), "onlangfailure");
            v226 = (uint64_t **)(v224 + 1);
            if (v225 > 0)
            {
              v226 = (uint64_t **)v224;
              v189 = v224;
            }
            v224 = *v226;
          }
          while (*v226);
        }
        if (v221 == v189)
          goto LABEL_565;
        std::string::basic_string[abi:ne180100]<0>(&v283, "onlangfailure");
        if (*v64 == 1
          && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((_QWORD *)v64 + 1), (const void **)&v283.__r_.__value_.__l.__data_))
        {
          v227 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v64, (const void **)&v283.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v227, (std::string *)buf);
          v228 = (const char **)operator new(0x20uLL);
          *(_OWORD *)v228 = xmmword_1EA94C7E8;
          *((_OWORD *)v228 + 1) = *(_OWORD *)&off_1EA94C7F8;
          v229 = v285[7];
          v230 = *(_QWORD *)&buf[8];
          if (v285[7] >= 0)
            v231 = v285[7];
          else
            v231 = *(_QWORD *)&buf[8];
          if (v231)
          {
            v232 = 0;
            v233 = *(uint8_t **)buf;
            while (1)
            {
              v234 = strlen(v228[v232]);
              v235 = v234;
              if ((v229 & 0x80) != 0)
              {
                if (v234 == v230)
                {
                  v236 = v233;
                  if (v230 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
LABEL_508:
                  if (!memcmp(v236, v228[v232], v235))
                    goto LABEL_578;
                }
              }
              else if (v234 == v229)
              {
                v236 = buf;
                goto LABEL_508;
              }
              if (++v232 == 4)
              {
                LODWORD(v232) = 3;
                goto LABEL_578;
              }
            }
          }
          LODWORD(v232) = 3;
LABEL_578:
          operator delete(v228);
          v4 = v274;
          if ((v285[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        else
        {
          LODWORD(v232) = 3;
        }
        *((_DWORD *)v280 + 16) = v232;
LABEL_477:
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
        {
          v203 = (void *)v283.__r_.__value_.__r.__words[0];
LABEL_479:
          operator delete(v203);
        }
        goto LABEL_565;
      case 5:
        std::string::basic_string[abi:ne180100]<0>(&v283, "interpret-as");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v204 = v280 + 18;
        if (*((char *)v280 + 167) < 0)
          operator delete((void *)*v204);
        *(_OWORD *)v204 = *(_OWORD *)buf;
        v204[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "format");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v205 = v280 + 21;
        if (*((char *)v280 + 191) < 0)
          operator delete((void *)*v205);
        *(_OWORD *)v205 = *(_OWORD *)buf;
        v205[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "detail");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v206 = v280 + 24;
        if (*((char *)v280 + 215) < 0)
LABEL_475:
          operator delete((void *)*v206);
LABEL_476:
        *(_OWORD *)v206 = *(_OWORD *)buf;
        v206[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        goto LABEL_477;
      case 7:
        v208 = (char *)operator new(0xA8uLL);
        *((_QWORD *)v208 + 1) = 0;
        v209 = (unint64_t *)(v208 + 8);
        *((_QWORD *)v208 + 2) = 0;
        *(_QWORD *)v208 = &off_1EA935DF8;
        *(_OWORD *)(v208 + 152) = 0u;
        *(_OWORD *)(v208 + 136) = 0u;
        *(_OWORD *)(v208 + 120) = 0u;
        *(_OWORD *)(v208 + 104) = 0u;
        *(_OWORD *)(v208 + 88) = 0u;
        *(_OWORD *)(v208 + 72) = 0u;
        *(_OWORD *)(v208 + 56) = 0u;
        *(_OWORD *)(v208 + 40) = 0u;
        *(_OWORD *)(v208 + 24) = 0u;
        v277 = v208 + 24;
        v278 = v208;
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v208 + 3, (uint64_t)v186[35], (uint64_t)v186[36]);
        *((_DWORD *)v208 + 40) = 2;
        std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v280 + 35, (uint64_t)(v208 + 24), (uint64_t)v208);
        std::string::basic_string[abi:ne180100]<0>(&v283, "gender");
        __s1a = (std::__shared_weak_count *)v208;
        if (*v64 != 1
          || !std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((_QWORD *)v64 + 1), (const void **)&v283.__r_.__value_.__l.__data_))
        {
          LODWORD(v215) = 0;
          goto LABEL_518;
        }
        v210 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v64, (const void **)&v283.__r_.__value_.__l.__data_);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v210, (std::string *)buf);
        v211 = (const char **)operator new(0x20uLL);
        *(_OWORD *)v211 = xmmword_1EA94C808;
        *((_OWORD *)v211 + 1) = *(_OWORD *)&off_1EA94C818;
        v212 = v285[7];
        v213 = *(_QWORD *)&buf[8];
        if (v285[7] >= 0)
          v214 = v285[7];
        else
          v214 = *(_QWORD *)&buf[8];
        if (v214)
        {
          v215 = 0;
          v267 = *(uint8_t **)buf;
          while (1)
          {
            v216 = strlen(v211[v215]);
            v217 = v216;
            if ((v212 & 0x80) != 0)
            {
              if (v216 == v213)
              {
                v218 = v267;
                if (v213 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
LABEL_470:
                if (!memcmp(v218, v211[v215], v217))
                  goto LABEL_516;
              }
            }
            else if (v216 == v212)
            {
              v218 = buf;
              goto LABEL_470;
            }
            if (++v215 == 4)
            {
              LODWORD(v215) = 0;
              goto LABEL_516;
            }
          }
        }
        LODWORD(v215) = 0;
LABEL_516:
        operator delete(v211);
        v4 = v274;
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
LABEL_518:
        *((_DWORD *)v208 + 10) = v215;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(buf, "age");
        LODWORD(v283.__r_.__value_.__l.__data_) = 0;
        *((_QWORD *)v208 + 6) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v64, (const void **)buf, (unsigned int *)&v283);
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::string::basic_string[abi:ne180100]<0>(buf, "variant");
        LODWORD(v283.__r_.__value_.__l.__data_) = 0;
        *((_QWORD *)v208 + 7) = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)v64, (const void **)buf, (unsigned int *)&v283);
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        std::string::basic_string[abi:ne180100]<0>(&v283, "name");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v239 = (void **)(v208 + 64);
        if (v208[87] < 0)
          operator delete(*v239);
        *(_OWORD *)v239 = *(_OWORD *)buf;
        *((_QWORD *)v208 + 10) = *(_QWORD *)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "languages");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v240 = (void **)(v208 + 88);
        if (v208[111] < 0)
          operator delete(*v240);
        *(_OWORD *)v240 = *(_OWORD *)buf;
        *((_QWORD *)v208 + 13) = *(_QWORD *)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "required");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v241 = (void **)(v208 + 112);
        if (v208[135] < 0)
          operator delete(*v241);
        *(_OWORD *)v241 = *(_OWORD *)buf;
        *((_QWORD *)v208 + 16) = *(_QWORD *)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "ordering");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v242 = (void **)(v208 + 136);
        if (v208[159] < 0)
          operator delete(*v242);
        *(_OWORD *)v242 = *(_OWORD *)buf;
        *((_QWORD *)v208 + 19) = *(_QWORD *)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v283, "onvoicefailure");
        if (*v64 == 1
          && std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(*((_QWORD *)v64 + 1), (const void **)&v283.__r_.__value_.__l.__data_))
        {
          v243 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v64, (const void **)&v283.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v243, (std::string *)buf);
          v244 = operator new(0x18uLL);
          *(_OWORD *)v244 = xmmword_1EA94C828;
          v244[2] = "processorchoice";
          v245 = v285[7];
          v246 = *(_QWORD *)&buf[8];
          if (v285[7] >= 0)
            v247 = v285[7];
          else
            v247 = *(_QWORD *)&buf[8];
          if (v247)
          {
            v248 = 0;
            v249 = *(uint8_t **)buf;
            while (1)
            {
              v250 = strlen((const char *)v244[v248]);
              v251 = v250;
              if ((v245 & 0x80) != 0)
              {
                if (v250 == v246)
                {
                  v252 = v249;
                  if (v246 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
LABEL_552:
                  if (!memcmp(v252, (const void *)v244[v248], v251))
                    goto LABEL_558;
                }
              }
              else if (v250 == v245)
              {
                v252 = buf;
                goto LABEL_552;
              }
              if (++v248 == 3)
              {
                LODWORD(v248) = 2;
                goto LABEL_558;
              }
            }
          }
          LODWORD(v248) = 2;
LABEL_558:
          operator delete(v244);
          v4 = v274;
          if ((v285[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        else
        {
          LODWORD(v248) = 2;
        }
        LODWORD(__s1a[6].__shared_weak_owners_) = v248;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        do
          v253 = __ldaxr(v209);
        while (__stlxr(v253 - 1, v209));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))__s1a->__on_zero_shared)(__s1a);
          std::__shared_weak_count::__release_weak(__s1a);
        }
LABEL_565:
        v254 = v281;
        if (v281)
        {
          v255 = (unint64_t *)&v281->__shared_owners_;
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v282.__r_.__value_.__l.__data_);
        v38 = (std::__shared_weak_count *)v276.__r_.__value_.__l.__size_;
        if (v276.__r_.__value_.__l.__size_)
        {
          v257 = (unint64_t *)(v276.__r_.__value_.__l.__size_ + 8);
          do
            v104 = __ldaxr(v257);
          while (__stlxr(v104 - 1, v257));
LABEL_575:
          if (!v104)
            goto LABEL_576;
        }
LABEL_106:
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v2);
        v18 = 1;
LABEL_107:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v18 & 1) == 0)
          return;
        break;
      case 8:
        if (*v64 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v64 + 1), "pitch"))
          {
            v192 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v64, "pitch");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v192, (std::string *)buf);
            v193 = (const void *)ParseAttr::parse_pitch((std::string *)buf);
            v280[27] = v193;
            if ((v285[7] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (*v64 == 1)
          {
            if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v64 + 1), "range"))
            {
              v194 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v64, "range");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v194, (std::string *)buf);
              v195 = (const void *)ParseAttr::parse_pitch((std::string *)buf);
              v280[28] = v195;
              if ((v285[7] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v283, "contour");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v196 = v280 + 31;
        if (*((char *)v280 + 271) < 0)
          operator delete((void *)*v196);
        *(_OWORD *)v196 = *(_OWORD *)buf;
        v196[2] = *(const void **)v285;
        v285[7] = 0;
        buf[0] = 0;
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        if (*v64 != 1)
          goto LABEL_565;
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v64 + 1), "rate"))
        {
          v197 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v64, "rate");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v197, (std::string *)buf);
          v198 = (const void *)ParseAttr::parse_rate((std::string *)buf);
          v280[29] = v198;
          if ((v285[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (*v64 != 1)
          goto LABEL_565;
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v64 + 1), "duration"))
        {
          v199 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v64, "duration");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v199, (std::string *)buf);
          v200 = ParseAttr::parse_timedesignation((const std::string *)buf);
          *((float *)v280 + 68) = v200;
          if ((v285[7] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (*v64 != 1)
          goto LABEL_565;
        if (!std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)v64 + 1), "volume"))goto LABEL_565;
        v201 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v64, "volume");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v201, (std::string *)buf);
        v202 = (const void *)ParseAttr::parse_volume((std::string *)buf);
        v280[28] = v202;
        if ((v285[7] & 0x80000000) == 0)
          goto LABEL_565;
        v203 = *(void **)buf;
        goto LABEL_479;
      case 9:
        std::string::basic_string[abi:ne180100]<0>(&v283, "level");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)v64, (const void **)&v283.__r_.__value_.__l.__data_, (std::string *)buf);
        v207 = ParseAttr::parse_emphasis((const void **)buf);
        *((_DWORD *)v280 + 69) = v207;
        if ((v285[7] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_477;
      default:
        goto LABEL_565;
    }
  }
  *((_BYTE *)this + 8) = 1;
}

void sub_1DE9EB214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;

  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  if (*(char *)(v43 - 201) < 0)
    operator delete(*(void **)(v43 - 224));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *InjectJSONImpl::set_text(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t *v14;
  _QWORD *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE v21[8];
  uint64_t *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[19];

  v29[18] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v21[0] = 0;
  v22 = 0;
  LODWORD(v3) = *(char *)(a2 + 23);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v26 = 0;
  v6 = (int)v3 < 0;
  if ((int)v3 >= 0)
    v7 = a2;
  else
    v7 = v4;
  v3 = v3;
  if (v6)
    v3 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>(v7, v7 + v3, (uint64_t)v25, 1, (uint64_t)v27);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse((uint64_t)v27, 1, (uint64_t)v21);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer((uint64_t)v29);
  v8 = v28;
  if (v28 == v27)
  {
    v9 = 4;
    v8 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v26;
  if (v26 == v25)
  {
    v11 = 4;
    v10 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = (_BYTE *)(a1 + 280);
  v13 = *(unsigned __int8 *)(a1 + 280);
  *(_BYTE *)(a1 + 280) = v21[0];
  v21[0] = v13;
  v14 = *(uint64_t **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v22;
  v22 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v13);
  result = v24;
  if (v24 == v23)
  {
    v16 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_21;
    v16 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
LABEL_21:
  v17 = *v12;
  if (*v12)
  {
    if (v17 == 2)
    {
      v19 = 0;
      v18 = **(_QWORD **)(a1 + 288);
    }
    else
    {
      if (v17 != 1)
      {
        v18 = 0;
        v20 = 0;
        v19 = 0;
        goto LABEL_29;
      }
      v18 = 0;
      v19 = **(_QWORD **)(a1 + 288);
    }
    v20 = 0x8000000000000000;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 1;
  }
LABEL_29:
  *(_QWORD *)(a1 + 296) = v12;
  *(_QWORD *)(a1 + 304) = v19;
  *(_QWORD *)(a1 + 312) = v18;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = v20;
  return result;
}

void sub_1DE9EB94C(_Unwind_Exception *a1, unsigned __int8 a2, uint64_t a3, ...)
{
  uint64_t **v3;
  va_list v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD *);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~parser((uint64_t *)va2);
  v5 = (va_list)v18;
  if (v18 == (_QWORD *)va1)
  {
    v6 = 4;
    va_copy(v5, va1);
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v3, a2);
  v7 = (va_list)v13;
  if (v13 == (_QWORD *)va)
  {
    v8 = 4;
    va_copy(v7, va);
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_11:
  _Unwind_Resume(a1);
}

void InjectJSONImpl::inject_token(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD *v4;
  uint64_t v5;
  std::string *v6;
  int v7;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  _OWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void **v94;
  __int16 v95;
  int v96;
  int v97;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int64_t size;
  std::string *v106;
  char *v107;
  __int16 v108;
  char *v109;
  uint64_t *v110;
  uint64_t *v111;
  int v112;
  uint64_t **v113;
  uint64_t *v114;
  int v115;
  uint64_t **v116;
  uint64_t v117;
  int64_t v118;
  std::string *v119;
  char *v120;
  __int16 v123;
  __int16 v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  void *exception;
  std::string *v133;
  __int16 v134;
  std::string *v135;
  std::string v136;
  __int128 v137;
  void *v138;
  void *v139[2];
  __int128 v140;
  std::__shared_weak_count *v141;
  __int128 v142;
  void *v143[2];
  _QWORD v144[4];
  __int128 v145;
  const std::string::value_type *v146;
  void *v147;
  uint64_t *v148;
  char v149;
  _BYTE __p[104];
  __int128 v151;
  uint64_t v152;
  void **v153;
  std::string v154;

  v4 = operator new(0x30uLL);
  *(_OWORD *)((char *)v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1EA932198;
  *((_QWORD *)&v142 + 1) = v4;
  v4[2] = 0u;
  *((_QWORD *)v4 + 3) = v4 + 2;
  v5 = (uint64_t)v4 + 24;
  v141 = 0;
  *(_QWORD *)&v142 = (char *)v4 + 24;
  v140 = 0u;
  *(_OWORD *)v139 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)__p, &v136);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    v6 = &v136;
    switch(*((_BYTE *)&v136.__r_.__value_.__s + 23))
    {
      case 4:
        if (LODWORD(v136.__r_.__value_.__l.__data_) != 1415071060)
          goto LABEL_6;
        goto LABEL_10;
      case 5:
        if (LODWORD(v136.__r_.__value_.__l.__data_) != 1095062082 || v136.__r_.__value_.__s.__data_[4] != 75)
          goto LABEL_27;
        goto LABEL_98;
      case 6:
        if (LODWORD(v136.__r_.__value_.__l.__data_) != 1297044048 || WORD2(v136.__r_.__value_.__r.__words[0]) != 21584)
          goto LABEL_105;
        goto LABEL_49;
      case 8:
        if (v136.__r_.__value_.__r.__words[0] == 0x434954454E4F4850)
          goto LABEL_66;
        goto LABEL_105;
      case 0xC:
        if (v136.__r_.__value_.__r.__words[0] != 0x5F4E474945524F46
          || LODWORD(v136.__r_.__value_.__r.__words[1]) != 1415071060)
        {
          goto LABEL_105;
        }
        goto LABEL_97;
      case 0xD:
        goto LABEL_101;
      case 0x10:
        if (v136.__r_.__value_.__r.__words[0] != 0x5F4E474945524F46
          || v136.__r_.__value_.__l.__size_ != 0x434954454E4F4850)
        {
          goto LABEL_105;
        }
        goto LABEL_55;
      default:
        goto LABEL_105;
    }
  }
  switch(v136.__r_.__value_.__l.__size_)
  {
    case 4uLL:
      if (*(_DWORD *)v136.__r_.__value_.__l.__data_ != 1415071060)
        goto LABEL_71;
LABEL_10:
      v7 = 1952807028;
      goto LABEL_107;
    case 5uLL:
      if (*(_DWORD *)v136.__r_.__value_.__l.__data_ == 1095062082
        && *(_BYTE *)(v136.__r_.__value_.__r.__words[0] + 4) == 75)
      {
LABEL_98:
        v7 = 1651664235;
        goto LABEL_107;
      }
      if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_71;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 4)
        goto LABEL_6;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 13)
        goto LABEL_100;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_105;
LABEL_27:
      if (LODWORD(v136.__r_.__value_.__l.__data_) == 1229215041 && v136.__r_.__value_.__s.__data_[4] == 79)
        goto LABEL_95;
      if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_76;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 4)
      {
LABEL_6:
        if (LODWORD(v136.__r_.__value_.__l.__data_) != 1263681869)
          goto LABEL_82;
        goto LABEL_96;
      }
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 5)
        goto LABEL_403;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) != 13)
      {
LABEL_105:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v136, "NULL"))
        {
          exception = __cxa_allocate_exception(0x10uLL);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &v136;
          else
            v133 = (std::string *)v136.__r_.__value_.__r.__words[0];
          MEMORY[0x1DF0EC99C](exception, __p);
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        v7 = 1853189228;
        goto LABEL_107;
      }
LABEL_100:
      v6 = &v136;
      goto LABEL_101;
    case 6uLL:
      if (*(_DWORD *)v136.__r_.__value_.__l.__data_ != 1297044048
        || *(_WORD *)(v136.__r_.__value_.__r.__words[0] + 4) != 21584)
      {
        goto LABEL_71;
      }
LABEL_49:
      v7 = 1886547312;
      goto LABEL_107;
    case 8uLL:
      if (*(_QWORD *)v136.__r_.__value_.__l.__data_ != 0x434954454E4F4850)
        goto LABEL_71;
LABEL_66:
      v7 = 1885892462;
      goto LABEL_107;
    case 0xCuLL:
      if (*(_QWORD *)v136.__r_.__value_.__l.__data_ != 0x5F4E474945524F46
        || *(_DWORD *)(v136.__r_.__value_.__r.__words[0] + 8) != 1415071060)
      {
        goto LABEL_71;
      }
LABEL_97:
      v7 = 1718909044;
      goto LABEL_107;
    case 0x10uLL:
      if (*(_QWORD *)v136.__r_.__value_.__l.__data_ != 0x5F4E474945524F46
        || *(_QWORD *)(v136.__r_.__value_.__r.__words[0] + 8) != 0x434954454E4F4850)
      {
        goto LABEL_71;
      }
LABEL_55:
      v7 = 1718642798;
      goto LABEL_107;
    default:
LABEL_71:
      if (v136.__r_.__value_.__l.__size_ == 5
        && *(_DWORD *)v136.__r_.__value_.__l.__data_ == 1229215041
        && *(_BYTE *)(v136.__r_.__value_.__r.__words[0] + 4) == 79)
      {
LABEL_95:
        v7 = 1635083369;
        goto LABEL_107;
      }
LABEL_76:
      if (v136.__r_.__value_.__l.__size_ != 4)
        goto LABEL_85;
      if (*(_DWORD *)v136.__r_.__value_.__l.__data_ == 1263681869)
      {
LABEL_96:
        v7 = 1835102827;
        goto LABEL_107;
      }
      if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_85:
        if (v136.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)v136.__r_.__value_.__l.__data_ != 1129530692)
          goto LABEL_87;
LABEL_99:
        v7 = 1684370275;
        goto LABEL_107;
      }
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 13)
        goto LABEL_100;
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) == 5)
      {
LABEL_403:
        if (LODWORD(v136.__r_.__value_.__l.__data_) != 1129207120 || v136.__r_.__value_.__s.__data_[4] != 84)
          goto LABEL_105;
        goto LABEL_408;
      }
      if (HIBYTE(v136.__r_.__value_.__r.__words[2]) != 4)
        goto LABEL_105;
LABEL_82:
      if (LODWORD(v136.__r_.__value_.__l.__data_) == 1129530692)
        goto LABEL_99;
      if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_105;
LABEL_87:
      if (v136.__r_.__value_.__l.__size_ != 5)
        goto LABEL_93;
      if (*(_DWORD *)v136.__r_.__value_.__l.__data_ == 1129207120
        && *(_BYTE *)(v136.__r_.__value_.__r.__words[0] + 4) == 84)
      {
LABEL_408:
        v7 = 1886809699;
        goto LABEL_107;
      }
      if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_105;
LABEL_93:
      if (v136.__r_.__value_.__l.__size_ != 13)
        goto LABEL_105;
      v6 = (std::string *)v136.__r_.__value_.__r.__words[0];
LABEL_101:
      v19 = v6->__r_.__value_.__r.__words[0];
      v20 = *(std::string::size_type *)((char *)v6->__r_.__value_.__r.__words + 5);
      if (v19 != 0x5F4E474945524F46 || v20 != 0x54434E55505F4E47)
        goto LABEL_105;
      v7 = 1718644323;
LABEL_107:
      LODWORD(v137) = v7;
      v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "attr");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v22, (std::string *)__p);
      v143[0] = __p;
      v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 208), (const void **)__p, (_OWORD **)v143);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v140 + 1, *((_QWORD *)v23 + 7), *((_QWORD *)v23 + 8));
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)a2 + 1), "where"))
      {
        v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "where");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, v24);
        v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(__p, "start");
        v143[0] = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v25, (unint64_t *)v143);
        *((void **)&v137 + 1) = v143[0];
        v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(__p, "length");
        v143[0] = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v26, (unint64_t *)v143);
        v138 = v143[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[8], __p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v143, "text");
      std::string::basic_string[abi:ne180100]<0>(&v147, "name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v147, &v154);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>((char *)a2, (const void **)v143, (uint64_t)&v154, (std::string *)__p);
      if (SBYTE7(v140) < 0)
        operator delete(v139[0]);
      *(_OWORD *)v139 = *(_OWORD *)__p;
      *(_QWORD *)&v140 = *(_QWORD *)&__p[16];
      __p[23] = 0;
      __p[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if (v149 < 0)
        operator delete(v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      Agglomerate::set<TokenBasicItem>(v5, &v137);
      v153 = (void **)"norm_label";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v153))
      {
        v145 = 0u;
        *(_OWORD *)v143 = 0u;
        memset(v144, 0, sizeof(v144));
        v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "norm_label");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v27, (std::string *)__p);
        *(_OWORD *)v143 = *(_OWORD *)__p;
        v144[0] = *(_QWORD *)&__p[16];
        memset(&__p[24], 0, 40);
        std::string::basic_string[abi:ne180100]<0>(&v147, "unnormalized");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v147, &v154);
        *(std::string *)&__p[24] = v154;
        *((_BYTE *)&v154.__r_.__value_.__s + 23) = 0;
        v154.__r_.__value_.__s.__data_[0] = 0;
        if (v149 < 0)
          operator delete(v147);
        v28 = (std::__shared_weak_count *)operator new(0x30uLL);
        *(_OWORD *)&v28->__shared_owners_ = 0u;
        v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
        *(_OWORD *)&v28[1].__shared_owners_ = 0u;
        v28[1].__vftable = (std::__shared_weak_count_vtbl *)&v28[1].__shared_owners_;
        *(_QWORD *)&v29 = v28 + 1;
        *((_QWORD *)&v29 + 1) = v28;
        v145 = v29;
        Agglomerate::set<TokenBasicItem>((uint64_t)&v28[1], (__int128 *)__p);
        std::string::basic_string[abi:ne180100]<0>(&v147, "connector");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v147, &v154);
        *(std::string *)&v144[1] = v154;
        *((_BYTE *)&v154.__r_.__value_.__s + 23) = 0;
        v154.__r_.__value_.__s.__data_[0] = 0;
        if (v149 < 0)
          operator delete(v147);
        if ((__p[47] & 0x80000000) != 0)
          operator delete(*(void **)&__p[24]);
        Agglomerate::set<TokenNormalizerItem>(v5, (__int128 *)v143);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        if (SHIBYTE(v144[3]) < 0)
          operator delete((void *)v144[1]);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
      }
      v32 = v142;
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"part_of_speech";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
        {
          v143[0] = 0;
          v143[1] = 0;
          v144[0] = 0;
          v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "part_of_speech");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v33, (std::string *)__p);
          *(_OWORD *)v143 = *(_OWORD *)__p;
          v144[0] = *(_QWORD *)&__p[16];
          Agglomerate::set<TokenPartOfSpeechItem>(v32, (uint64_t)v143);
          if (SHIBYTE(v144[0]) < 0)
            operator delete(v143[0]);
        }
      }
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"written";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
        {
          v143[0] = 0;
          v143[1] = 0;
          v144[0] = 0;
          v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "written");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v34, (std::string *)__p);
          *(_OWORD *)v143 = *(_OWORD *)__p;
          v144[0] = *(_QWORD *)&__p[16];
          Agglomerate::set<TokenWrittenItem>(v32, (uint64_t)v143);
          if (SHIBYTE(v144[0]) < 0)
            operator delete(v143[0]);
        }
      }
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"no_preceding_space";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "no_preceding_space");
        LOBYTE(v143[0]) = 0;
        v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)__p, (unsigned __int8 *)v143);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)__p = v143;
        v37 = v36[5];
        if (v37)
        {
          *(_BYTE *)(v37 + 8) = v35;
        }
        else
        {
          v38 = operator new();
          *(_QWORD *)v38 = &off_1EA923028;
          *(_BYTE *)(v38 + 8) = v35;
          v39 = v36[5];
          v36[5] = v38;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        }
      }
      v146 = "pron";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), &v146))
      {
        memset(__p, 0, 48);
        v40 = *(_QWORD **)(a1 + 184);
        std::string::basic_string[abi:ne180100]<0>(&v147, "pron");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v147, &v154);
        (*(void (**)(void **__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v40 + 16))(v143, *v40, &v154);
        std::vector<PhonemeRepresentation::Word>::__assign_with_size[abi:ne180100]<PhonemeRepresentation::Word*,PhonemeRepresentation::Word*>((uint64_t *)__p, (uint64_t *)v143[0], (uint64_t *)v143[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v143[1] - (char *)v143[0]) >> 3));
        v153 = v143;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v153);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        if (v149 < 0)
          operator delete(v147);
        std::string::basic_string[abi:ne180100]<0>(&v154, "pron_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        if ((__p[47] & 0x80000000) != 0)
          operator delete(*(void **)&__p[24]);
        *(_OWORD *)&__p[24] = *(_OWORD *)v143;
        *(_QWORD *)&__p[40] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        Agglomerate::set<TokenPronunciationItem>(v32, (uint64_t)__p);
        if ((__p[47] & 0x80000000) != 0)
          operator delete(*(void **)&__p[24]);
        v143[0] = __p;
        std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
      }
      v147 = "phon";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v147))
      {
        memset(__p, 0, 72);
        v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "phon");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v41, (std::string *)v143);
        *(_OWORD *)__p = *(_OWORD *)v143;
        *(_QWORD *)&__p[16] = v144[0];
        std::string::basic_string[abi:ne180100]<0>(&v154, "alphabet");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[24] = *(_OWORD *)v143;
        *(_QWORD *)&__p[40] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v154, "sub");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[48] = *(_OWORD *)v143;
        *(_QWORD *)&__p[64] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        Agglomerate::set<TokenPhoneticItem>(v32, (__int128 *)__p);
        if ((__p[71] & 0x80000000) != 0)
          operator delete(*(void **)&__p[48]);
        if ((__p[47] & 0x80000000) != 0)
          operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      v42 = operator new(0x10uLL);
      v43 = 0;
      *v42 = "strength";
      v42[1] = "time";
      while (1)
      {
        v154.__r_.__value_.__r.__words[0] = v42[v43];
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
          {
            break;
          }
        }
        if (++v43 == 2)
          goto LABEL_199;
      }
      v44 = nanf(&byte_1DEBD87CE);
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)a2 + 1), "strength"))
        {
          v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "strength");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v45, (std::string *)__p);
          v46 = operator new(0x58uLL);
          v46[2] = xmmword_1EA94B000;
          v46[3] = *(_OWORD *)&off_1EA94B010;
          v46[4] = xmmword_1EA94B020;
          *((_QWORD *)v46 + 10) = "x-strong";
          *v46 = xmmword_1EA94AFE0;
          v46[1] = *(_OWORD *)&off_1EA94AFF0;
          v47 = ParseAttr::parse_prosodic_level((const void **)__p, v46, (uint64_t)v46 + 88);
          operator delete(v46);
          if ((v47 | 4) == 4)
            v47 = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        else
        {
          v47 = 8;
        }
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)a2 + 1), "time"))
          {
            v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "time");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v48, (std::string *)__p);
            v44 = ParseAttr::parse_timedesignation((const std::string *)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
      }
      else
      {
        v47 = 8;
      }
      *(_QWORD *)__p = v143;
      v50 = v49[5];
      if (v50)
      {
        *(float *)(v50 + 8) = v44;
        *(_DWORD *)(v50 + 12) = v47;
      }
      else
      {
        v51 = operator new();
        *(_QWORD *)v51 = &off_1EA922D88;
        *(float *)(v51 + 8) = v44;
        *(_DWORD *)(v51 + 12) = v47;
        v52 = v49[5];
        v49[5] = v51;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      }
LABEL_199:
      operator delete(v42);
      v53 = operator new(0x10uLL);
      v54 = 0;
      *v53 = "sentence";
      v53[1] = "boundary";
      while (1)
      {
        v146 = (const std::string::value_type *)v53[v54];
        if (*a2 == 1)
        {
          if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), &v146))
          {
            break;
          }
        }
        if (++v54 == 2)
          goto LABEL_203;
      }
      memset(&__p[8], 0, 32);
      std::string::basic_string[abi:ne180100]<0>(&v154, "sentence");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
      v147 = v143;
      v78 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 256), (const void **)v143, (_OWORD **)&v147);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&__p[24], v78[7], v78[8]);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v154, "phrase");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
      v147 = v143;
      v79 = std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 232), (const void **)v143, (_OWORD **)&v147);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&__p[8], v79[7], v79[8]);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v154, "boundary");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      if ((v144[0] & 0x8000000000000000) != 0)
      {
        if (v143[1] != (void *)6)
        {
          if (v143[1] != (void *)8)
          {
            if (v143[1] != (void *)9)
              goto LABEL_334;
            if (*(_QWORD *)v143[0] != 0x7061726761726170 || *((_BYTE *)v143[0] + 8) != 104)
              goto LABEL_334;
LABEL_265:
LABEL_328:
            v95 = 257;
            goto LABEL_348;
          }
          v93 = *(void **)v143[0];
LABEL_327:
          if (v93 != (void *)0x65636E65746E6573)
          {
LABEL_334:
            *(_WORD *)__p = 0;
            goto LABEL_335;
          }
          goto LABEL_328;
        }
        v94 = (void **)v143[0];
      }
      else
      {
        if (HIBYTE(v144[0]) != 6)
        {
          if (HIBYTE(v144[0]) != 8)
          {
            if (HIBYTE(v144[0]) != 9)
              goto LABEL_334;
            if (v143[0] != (void *)0x7061726761726170 || LOBYTE(v143[1]) != 104)
              goto LABEL_334;
            goto LABEL_265;
          }
          v93 = v143[0];
          goto LABEL_327;
        }
        v94 = v143;
      }
      v96 = *(_DWORD *)v94;
      v97 = *((unsigned __int16 *)v94 + 2);
      if (v96 != 1634887792 || v97 != 25971)
        goto LABEL_334;
      v95 = 1;
LABEL_348:
      *(_WORD *)__p = v95;
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char [9]>(*((_QWORD *)a2 + 1), "break"))
      {
        std::string::basic_string[abi:ne180100]<0>(&v147, "break");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)a2, (const void **)&v147, &v154);
        if (v149 < 0)
          operator delete(v147);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          size = v154.__r_.__value_.__l.__size_;
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v154;
        else
          v106 = (std::string *)v154.__r_.__value_.__r.__words[0];
        v107 = (char *)v106 + size;
        if (size >= 5)
        {
          v135 = v106;
          v118 = size;
          v119 = v106;
          do
          {
            v120 = (char *)memchr(v119, 109, v118 - 4);
            if (!v120)
              break;
            if (*(_DWORD *)v120 == 1701080941 && v120[4] == 108)
              goto LABEL_380;
            v119 = (std::string *)(v120 + 1);
            v118 = v107 - (char *)v119;
          }
          while (v107 - (char *)v119 > 4);
          v120 = (char *)v106 + size;
LABEL_380:
          if (v120 - (char *)v106 == -1 || v120 == v107)
            v123 = 0;
          else
            v123 = 256;
          v134 = v123;
          do
          {
            v109 = (char *)memchr(v106, 112, size - 4);
            if (!v109)
              break;
            if (*(_DWORD *)v109 == 1668183408 && v109[4] == 116)
              goto LABEL_394;
            v106 = (std::string *)(v109 + 1);
            size = v107 - (v109 + 1);
          }
          while (size > 4);
          v109 = v107;
LABEL_394:
          v106 = v135;
          v108 = v134;
        }
        else
        {
          v108 = 0;
          v109 = (char *)v106 + size;
        }
        v126 = v109 != v107 && v109 - (char *)v106 != -1;
        v147 = &v153;
        v128 = v127[5];
        if (v128)
        {
          *(_WORD *)(v128 + 8) = v108 | v126;
        }
        else
        {
          v130 = operator new();
          *(_QWORD *)v130 = &off_1EA922E28;
          *(_WORD *)(v130 + 8) = v108 | v126;
          v131 = v127[5];
          v127[5] = v130;
          if (v131)
            (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
      }
LABEL_335:
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      Agglomerate::set<TokenPhrasingItem>(v32, (__int16 *)__p);
      v99 = *(std::__shared_weak_count **)&__p[32];
      if (*(_QWORD *)&__p[32])
      {
        v100 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v103 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
LABEL_203:
      operator delete(v53);
      v55 = v142;
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"sentence_break";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
        {
          *(_QWORD *)__p = v143;
          if (!v56[5])
          {
            v57 = (_QWORD *)operator new();
            *v57 = &off_1EA922F48;
            v58 = v56[5];
            v56[5] = (uint64_t)v57;
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          }
        }
      }
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"src";
      if (*a2 != 1
        || !std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
      {
        goto LABEL_233;
      }
      memset(__p, 0, 24);
      *(_DWORD *)&__p[24] = 2139095040;
      *(_WORD *)&__p[28] = 1;
      *(_OWORD *)&__p[32] = xmmword_1DED16BD0;
      *(_OWORD *)&__p[48] = xmmword_1DED16BE0;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)&__p[64] = _D0;
      v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "src");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v63, (std::string *)v143);
      v64 = *a2;
      *(_OWORD *)__p = *(_OWORD *)v143;
      *(_QWORD *)&__p[16] = v144[0];
      if (v64 != 1)
        goto LABEL_217;
      v65 = *((_QWORD *)a2 + 1);
      v68 = *(uint64_t **)(v65 + 8);
      v66 = (uint64_t *)(v65 + 8);
      v67 = v68;
      if (!v68)
        goto LABEL_217;
      while (std::string::compare((const std::string *)(v67 + 4), "timeout") > 0)
      {
        v66 = v67;
LABEL_216:
        v67 = (uint64_t *)*v67;
        if (!v67)
          goto LABEL_217;
      }
      if (std::string::compare((const std::string *)(v67 + 4), "timeout") < 0)
      {
        ++v67;
        goto LABEL_216;
      }
      v110 = (uint64_t *)*v67;
      v111 = v67;
      if (*v67)
      {
        v111 = v67;
        do
        {
          v112 = std::string::compare((const std::string *)(v110 + 4), "timeout");
          v113 = (uint64_t **)(v110 + 1);
          if (v112 >= 0)
          {
            v113 = (uint64_t **)v110;
            v111 = v110;
          }
          v110 = *v113;
        }
        while (*v113);
      }
      v114 = (uint64_t *)v67[1];
      if (v114)
      {
        do
        {
          v115 = std::string::compare((const std::string *)(v114 + 4), "timeout");
          v116 = (uint64_t **)(v114 + 1);
          if (v115 > 0)
          {
            v116 = (uint64_t **)v114;
            v66 = v114;
          }
          v114 = *v116;
        }
        while (*v116);
      }
      if (v111 != v66)
      {
        v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "timeout");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v117, (std::string *)v143);
        *(_DWORD *)&__p[24] = ParseAttr::parse_timedesignation((const std::string *)v143);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
      }
LABEL_217:
      std::string::basic_string[abi:ne180100]<0>(v143, "maxage");
      LODWORD(v147) = -1;
      *(_QWORD *)&__p[32] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>(a2, (const void **)v143, (unsigned int *)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "maxstale");
      LODWORD(v147) = 0;
      *(_QWORD *)&__p[40] = (int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)v143, (unsigned int *)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "clipbegin");
      LODWORD(v147) = 0;
      *(_DWORD *)&__p[48] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v143, (uint64_t)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "clipend");
      LODWORD(v147) = 2139095040;
      *(_DWORD *)&__p[52] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v143, (uint64_t)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "repeatdur");
      LODWORD(v147) = 0;
      *(_DWORD *)&__p[60] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v143, (uint64_t)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "repeatcount");
      LODWORD(v147) = 1065353216;
      *(_DWORD *)&__p[56] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<float,0>(a2, (const void **)v143, (uint64_t)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      std::string::basic_string[abi:ne180100]<0>(v143, "overlap");
      LOBYTE(v147) = 0;
      __p[29] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)v143, (unsigned __int8 *)&v147);
      if (SHIBYTE(v144[0]) < 0)
        operator delete(v143[0]);
      Agglomerate::set<TokenAudioItem>(v55, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
LABEL_233:
      v69 = v142;
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"num_phonemes";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
      {
        v70 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_words");
        *(_QWORD *)__p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v70, (unint64_t *)__p);
        v71 = *(_QWORD *)__p;
        v72 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_syllables");
        *(_QWORD *)__p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v72, (unint64_t *)__p);
        v73 = *(_QWORD *)__p;
        v74 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "num_phonemes");
        *(_QWORD *)__p = 0;
        nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v74, (unint64_t *)__p);
        v75 = *(_QWORD *)__p;
        *(_QWORD *)__p = v143;
        v77 = (_QWORD *)v76[5];
        if (v77)
        {
          v77[1] = v75;
          v77[2] = v73;
          v77[3] = v71;
        }
        else
        {
          v82 = (_QWORD *)operator new();
          *v82 = &off_1EA922DA8;
          v82[1] = v75;
          v82[2] = v73;
          v82[3] = v71;
          v83 = v76[5];
          v76[5] = (uint64_t)v82;
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
        }
      }
      v153 = (void **)"override";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v153))
      {
        v152 = 0;
        v151 = 0u;
        memset(&__p[8], 0, 96);
        v84 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "override");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v147, v84);
        std::string::basic_string[abi:ne180100]<0>(v143, "rule");
        LODWORD(v154.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)__p = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v147, (const void **)v143, (unsigned int *)&v154);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
        std::string::basic_string[abi:ne180100]<0>(&v154, "norm_label");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[8] = *(_OWORD *)v143;
        *(_QWORD *)&__p[24] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v154, "part_of_speech");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[32] = *(_OWORD *)v143;
        *(_QWORD *)&__p[48] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v154, "pronunciation");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[56] = *(_OWORD *)v143;
        *(_QWORD *)&__p[72] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v154, "original_text");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[80] = *(_OWORD *)v143;
        *(_QWORD *)&__p[96] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v154, "language");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        v151 = *(_OWORD *)v143;
        v152 = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v148, v147);
        Agglomerate::set<TokenOverrideItem>(v69, (const TokenOverrideItem *)__p);
        if (SHIBYTE(v152) < 0)
          operator delete((void *)v151);
        if ((__p[103] & 0x80000000) != 0)
          operator delete(*(void **)&__p[80]);
        if ((__p[79] & 0x80000000) != 0)
          operator delete(*(void **)&__p[56]);
        if ((__p[55] & 0x80000000) != 0)
          operator delete(*(void **)&__p[32]);
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
      }
      v154.__r_.__value_.__r.__words[0] = (std::string::size_type)"mecab_pronunciation";
      if (*a2 == 1)
      {
        if (std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v154.__r_.__value_.__l.__data_))
        {
          memset(__p, 0, 48);
          v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "mecab_pronunciation");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v85, (std::string *)v143);
          *(_OWORD *)__p = *(_OWORD *)v143;
          *(_QWORD *)&__p[16] = v144[0];
          Agglomerate::set<TokenMeCabItem>(v69, (__int128 *)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
      }
      v153 = (void **)"prompt";
      if (*a2 == 1
        && std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(*((_QWORD *)a2 + 1), (const std::string::value_type **)&v153))
      {
        __p[0] = 0;
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_DWORD *)&__p[24] = 0x7FFFFFFF;
        memset(&__p[32], 0, 24);
        v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "prompt");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v147, v86);
        std::string::basic_string[abi:ne180100]<0>(&v154, "prompt_id");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)&v147, (const void **)&v154.__r_.__value_.__l.__data_, (std::string *)v143);
        *(_OWORD *)&__p[32] = *(_OWORD *)v143;
        *(_QWORD *)&__p[48] = v144[0];
        HIBYTE(v144[0]) = 0;
        LOBYTE(v143[0]) = 0;
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(v143, "unit_start");
        LODWORD(v154.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)&__p[16] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v147, (const void **)v143, (unsigned int *)&v154);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
        std::string::basic_string[abi:ne180100]<0>(v143, "unit_end");
        LODWORD(v154.__r_.__value_.__l.__data_) = 0;
        *(_DWORD *)&__p[20] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v147, (const void **)v143, (unsigned int *)&v154);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
        std::string::basic_string[abi:ne180100]<0>(v143, "generated_id");
        LODWORD(v154.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
        *(_DWORD *)&__p[24] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)&v147, (const void **)v143, (unsigned int *)&v154);
        if (SHIBYTE(v144[0]) < 0)
          operator delete(v143[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v148, v147);
        Agglomerate::set<TokenPromptItem>(v69, (uint64_t)__p);
        if ((__p[55] & 0x80000000) != 0)
          operator delete(*(void **)&__p[32]);
      }
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)(a1 + 32), &v142);
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      v87 = v141;
      if (v141)
      {
        v88 = (unint64_t *)&v141->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (SBYTE7(v140) < 0)
        operator delete(v139[0]);
      v90 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      return;
  }
}

void sub_1DE9ED888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a35 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (a19 < 0)
    operator delete(a14);
  TokenBasicItem::~TokenBasicItem(&a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<TokenAttributes>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<TokenAttributes>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<FastRewriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__count_multi<char const*>(uint64_t a1, const std::string::value_type **a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = *v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        v9 = (uint64_t *)v6;
        v7 = (_QWORD *)v6;
      }
      v6 = *v9;
    }
    while (*v9);
  }
  v10 = v3[1];
  if (v10)
  {
    do
    {
      v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        v12 = (uint64_t *)v10;
        v2 = (_QWORD *)v10;
      }
      v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2)
    return 0;
  result = 0;
  do
  {
    v13 = (_QWORD *)v7[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v7[2];
        v15 = *v14 == (_QWORD)v7;
        v7 = v14;
      }
      while (!v15);
    }
    ++result;
    v7 = v14;
  }
  while (v14 != v2);
  return result;
}

void Agglomerate::set<TokenMeCabItem>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  void **v14;
  __int128 __p;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;

  v14 = &v19;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenMeCabItem>::ItemHolder((uint64_t)&v14, a2);
    v5 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v5);
    v6 = __p;
    *(_QWORD *)(v4 + 24) = v16;
    *(_OWORD *)v5 = v6;
    HIBYTE(v16) = 0;
    LOBYTE(__p) = 0;
    v7 = (void **)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
    {
      operator delete(*v7);
      v12 = SHIBYTE(v16);
      v13 = v17;
      *(_QWORD *)(v4 + 48) = v18;
      *(_OWORD *)v7 = v13;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      v14 = (void **)off_1EA922DE8;
      if (v12 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v8 = v17;
      *(_QWORD *)(v4 + 48) = v18;
      *(_OWORD *)v7 = v8;
    }
  }
  else
  {
    v9 = v3;
    v10 = operator new();
    Agglomerate::ItemHolder<TokenMeCabItem>::ItemHolder(v10, a2);
    v11 = v9[5];
    v9[5] = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

void sub_1DE9EDF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenMeCabItem>::ItemHolder(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1EA922DE8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1DE9EE034(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenMeCabItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922DE8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenMeCabItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922DE8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenOverrideItem>(uint64_t a1, const TokenOverrideItem *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  void **v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 __p;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;

  v20 = &v32;
  v4 = v3[5];
  if (v4)
  {
    v20 = (void **)off_1EA922FA8;
    TokenOverrideItem::TokenOverrideItem((TokenOverrideItem *)&v21, a2);
    *(_DWORD *)(v4 + 8) = v21;
    v5 = (void **)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      operator delete(*v5);
    v6 = v22;
    *(_QWORD *)(v4 + 32) = v23;
    *(_OWORD *)v5 = v6;
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
    v7 = (void **)(v4 + 40);
    if (*(char *)(v4 + 63) < 0)
      operator delete(*v7);
    v8 = v24;
    *(_QWORD *)(v4 + 56) = v25;
    *(_OWORD *)v7 = v8;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    v9 = (void **)(v4 + 64);
    if (*(char *)(v4 + 87) < 0)
      operator delete(*v9);
    v10 = v26;
    *(_QWORD *)(v4 + 80) = v27;
    *(_OWORD *)v9 = v10;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    v11 = (void **)(v4 + 88);
    if (*(char *)(v4 + 111) < 0)
      operator delete(*v11);
    v12 = __p;
    *(_QWORD *)(v4 + 104) = v29;
    *(_OWORD *)v11 = v12;
    HIBYTE(v29) = 0;
    LOBYTE(__p) = 0;
    v13 = (void **)(v4 + 112);
    if (*(char *)(v4 + 135) < 0)
    {
      operator delete(*v13);
      v18 = SHIBYTE(v29);
      v19 = v30;
      *(_QWORD *)(v4 + 128) = v31;
      *(_OWORD *)v13 = v19;
      HIBYTE(v31) = 0;
      LOBYTE(v30) = 0;
      v20 = (void **)off_1EA922FA8;
      if (v18 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v14 = v30;
      *(_QWORD *)(v4 + 128) = v31;
      *(_OWORD *)v13 = v14;
      HIBYTE(v31) = 0;
      LOBYTE(v30) = 0;
      v20 = (void **)off_1EA922FA8;
    }
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
    if (SHIBYTE(v23) < 0)
      operator delete((void *)v22);
  }
  else
  {
    v15 = v3;
    v16 = (_QWORD *)operator new();
    *v16 = off_1EA922FA8;
    TokenOverrideItem::TokenOverrideItem((TokenOverrideItem *)(v16 + 1), a2);
    v17 = v15[5];
    v15[5] = (uint64_t)v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1DE9EE31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C40B1D12501);
  _Unwind_Resume(a1);
}

void TokenOverrideItem::~TokenOverrideItem(void **this)
{
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void TokenOverrideItem::TokenOverrideItem(TokenOverrideItem *this, const TokenOverrideItem *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v7;
  }
  v8 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1DE9EE4D8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[103] < 0)
    operator delete(*v5);
  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenOverrideItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922FA8;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void Agglomerate::ItemHolder<TokenOverrideItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922FA8;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<TokenCountItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenAudioItem>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void **v15;
  std::string v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;

  v15 = &v20;
  v4 = v3[5];
  if (v4)
  {
    v15 = (void **)off_1EA922D48;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v16 = *(std::string *)a2;
    v8 = *(_OWORD *)(a2 + 40);
    v17 = *(_OWORD *)(a2 + 24);
    v18 = v8;
    v19 = *(_OWORD *)(a2 + 56);
    v9 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v9);
    v10 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    *(_QWORD *)(v4 + 24) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v10;
    v11 = v17;
    v12 = v19;
    *(_OWORD *)(v4 + 48) = v18;
    *(_OWORD *)(v4 + 64) = v12;
    *(_OWORD *)(v4 + 32) = v11;
  }
  else
  {
    v5 = v3;
    v6 = operator new();
    *(_QWORD *)v6 = off_1EA922D48;
    v7 = (std::string *)(v6 + 8);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 + 16);
    }
    v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(v6 + 48) = v13;
    *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 56);
    v14 = v5[5];
    v5[5] = v6;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void sub_1DE9EE7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C4080D51F78);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenAudioItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922D48;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenAudioItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922D48;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<unsigned int,0>(unsigned __int8 *a1, const void **a2, unsigned int *a3)
{
  int v5;
  unsigned __int8 *v7;
  nlohmann::detail::exception *exception;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  uint64_t v18;
  unint64_t v19;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = *a1;
    if (v9 > 9)
      v10 = "number";
    else
      v10 = off_1EA94C758[v9];
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17 = v11->__r_.__value_.__r.__words[2];
    v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v16, exception);
  }
  *(_QWORD *)&v16 = a1;
  v17 = 0;
  v18 = 0;
  v19 = 0x8000000000000000;
  *((_QWORD *)&v16 + 1) = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)a1 + 1), a2);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v13.__r_.__value_.__r.__words[2] = 0;
  v14 = 0;
  v15 = 0x8000000000000000;
  v5 = *a1;
  if (v5 == 2)
  {
    v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  }
  else if (v5 == 1)
  {
    v13.__r_.__value_.__l.__size_ = *((_QWORD *)a1 + 1) + 8;
  }
  else
  {
    v15 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v16, (unsigned __int8 **)&v13))
  {
    return *a3;
  }
  v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v16);
  LODWORD(v13.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v7, (unsigned int *)&v13);
  return LODWORD(v13.__r_.__value_.__l.__data_);
}

void sub_1DE9EE9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void Agglomerate::ItemHolder<SentenceBreakItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Agglomerate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Agglomerate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  const void **v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x48uLL);
    v11 = *a3;
    v12 = *((_QWORD *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v10[7] = 0;
    v10[8] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v13 = (uint64_t *)**a1;
    v14 = v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

void Agglomerate::ItemHolder<PhraseBreakItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenPhoneticItem>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  uint64_t v18;
  __int128 __p;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23;

  v16 = &v23;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenPhoneticItem>::ItemHolder((uint64_t)&v16, a2);
    v5 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v5);
    v6 = v17;
    *(_QWORD *)(v4 + 24) = v18;
    *(_OWORD *)v5 = v6;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    v7 = (void **)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
      operator delete(*v7);
    v8 = __p;
    *(_QWORD *)(v4 + 48) = v20;
    *(_OWORD *)v7 = v8;
    HIBYTE(v20) = 0;
    LOBYTE(__p) = 0;
    v9 = (void **)(v4 + 56);
    if (*(char *)(v4 + 79) < 0)
    {
      operator delete(*v9);
      v14 = SHIBYTE(v20);
      v15 = v21;
      *(_QWORD *)(v4 + 72) = v22;
      *(_OWORD *)v9 = v15;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      v16 = (void **)off_1EA922FC8;
      if (v14 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v10 = v21;
      *(_QWORD *)(v4 + 72) = v22;
      *(_OWORD *)v9 = v10;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      v16 = (void **)off_1EA922FC8;
    }
    if (SHIBYTE(v18) < 0)
      operator delete((void *)v17);
  }
  else
  {
    v11 = v3;
    v12 = operator new();
    Agglomerate::ItemHolder<TokenPhoneticItem>::ItemHolder(v12, a2);
    v13 = v11[5];
    v11[5] = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void sub_1DE9EECFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void TokenPhoneticItem::~TokenPhoneticItem(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t Agglomerate::ItemHolder<TokenPhoneticItem>::ItemHolder(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = off_1EA922FC8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (std::string *)(a1 + 56);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1DE9EEE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenPhoneticItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922FC8;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenPhoneticItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922FC8;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenWrittenItem>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  std::string *v7;
  void **v8;
  __int128 v9;
  uint64_t v10;
  void **v11;
  std::string v12;
  void *v13;

  v11 = &v13;
  v4 = v3[5];
  if (v4)
  {
    v11 = (void **)off_1EA922EE8;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v12 = *(std::string *)a2;
    v8 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v8);
    v9 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    *(_QWORD *)(v4 + 24) = *((_QWORD *)&v12.__r_.__value_.__l + 2);
    *(_OWORD *)v8 = v9;
  }
  else
  {
    v5 = v3;
    v6 = (_QWORD *)operator new();
    *v6 = off_1EA922EE8;
    v7 = (std::string *)(v6 + 1);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v6[3] = *(_QWORD *)(a2 + 16);
    }
    v10 = v5[5];
    v5[5] = (uint64_t)v6;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void sub_1DE9EF048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenWrittenItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922EE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenWrittenItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922EE8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenPartOfSpeechItem>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  std::string *v7;
  void **v8;
  __int128 v9;
  uint64_t v10;
  void **v11;
  std::string v12;
  void *v13;

  v11 = &v13;
  v4 = v3[5];
  if (v4)
  {
    v11 = (void **)off_1EA923088;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v12 = *(std::string *)a2;
    v8 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v8);
    v9 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    *(_QWORD *)(v4 + 24) = *((_QWORD *)&v12.__r_.__value_.__l + 2);
    *(_OWORD *)v8 = v9;
  }
  else
  {
    v5 = v3;
    v6 = (_QWORD *)operator new();
    *v6 = off_1EA923088;
    v7 = (std::string *)(v6 + 1);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v6[3] = *(_QWORD *)(a2 + 16);
    }
    v10 = v5[5];
    v5[5] = (uint64_t)v6;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void sub_1DE9EF210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t Agglomerate::ItemHolder<TokenPartOfSpeechItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923088;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenPartOfSpeechItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923088;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::set<TokenNormalizerItem>(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  __int128 v20;
  void *v21;

  v15 = &v21;
  v4 = v3[5];
  if (v4)
  {
    Agglomerate::ItemHolder<TokenNormalizerItem>::ItemHolder((uint64_t)&v15, a2);
    v5 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
      operator delete(*v5);
    v6 = v16;
    *(_QWORD *)(v4 + 24) = v17;
    *(_OWORD *)v5 = v6;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    v7 = (void **)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
      operator delete(*v7);
    v8 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 48) = v19;
    *(_OWORD *)v7 = v8;
    HIBYTE(v19) = 0;
    LOBYTE(__p[0]) = 0;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v4 + 56, &v20);
    v15 = (void **)off_1EA923068;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)v16);
  }
  else
  {
    v12 = v3;
    v13 = operator new();
    Agglomerate::ItemHolder<TokenNormalizerItem>::ItemHolder(v13, a2);
    v14 = v12[5];
    v12[5] = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
}

void sub_1DE9EF430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C4024788DBELL);
  _Unwind_Resume(a1);
}

void TokenNormalizerItem::~TokenNormalizerItem(void **this)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t Agglomerate::ItemHolder<TokenNormalizerItem>::ItemHolder(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a1 = off_1EA923068;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void sub_1DE9EF54C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenNormalizerItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923068;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenNormalizerItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA923068;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<PhraseCountItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<SentenceCountItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void Agglomerate::ItemHolder<SentenceTypeItem>::~ItemHolder()
{
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<VoiceDesc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VoiceDesc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<VoiceDesc>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
}

char *std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  char *v5;
  uint64_t **v6;
  void **v7;
  void **v8;
  const void **v10;
  char *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (void **)(a1 + 1);
  v8 = (void **)(a1 + 1);
  if (!v5)
    goto LABEL_10;
  v7 = (void **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v8 = (void **)v5;
      v10 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = (char *)*v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = (char *)v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = (char *)*v7;
  if (!*v7)
  {
LABEL_10:
    v11 = (char *)operator new(0x80uLL);
    v18[0] = v11;
    v18[1] = v6;
    v19 = 0;
    v12 = (std::string *)(v11 + 32);
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      *((_QWORD *)v11 + 6) = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    *((_QWORD *)v11 + 13) = 0;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *((_DWORD *)v11 + 26) = 2139095040;
    *((_OWORD *)v11 + 7) = xmmword_1DED16BD0;
    v19 = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v7 = v11;
    v15 = (uint64_t *)**a1;
    v16 = (uint64_t *)v11;
    if (v15)
    {
      *a1 = v15;
      v16 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1DE9EF874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1DE9EF934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MetaElement>::__push_back_slow_path<MetaElement const&>(int64x2_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int64x2_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  int64x2_t *v22;

  v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v3;
  v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = v7;
  v20.i64[0] = (uint64_t)&v7[72 * v2];
  v20.i64[1] = v20.i64[0];
  v21 = &v7[72 * v6];
  std::allocator<MetaElement>::construct[abi:ne180100]<MetaElement,MetaElement const&>((std::string *)v20.i64[0], a2);
  v8 = a1->i64[0];
  v9 = a1->u64[1];
  v10 = v20.i64[0];
  v11 = v20.i64[0];
  if (v9 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v9);
  }
  else
  {
    do
    {
      v12 = *(_OWORD *)(v9 - 72);
      *(_QWORD *)(v11 - 56) = *(_QWORD *)(v9 - 56);
      *(_OWORD *)(v11 - 72) = v12;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      v13 = *(_OWORD *)(v9 - 48);
      *(_QWORD *)(v11 - 32) = *(_QWORD *)(v9 - 32);
      *(_OWORD *)(v11 - 48) = v13;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      v14 = *(_OWORD *)(v9 - 24);
      *(_QWORD *)(v11 - 8) = *(_QWORD *)(v9 - 8);
      *(_OWORD *)(v11 - 24) = v14;
      v11 -= 72;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v9 -= 72;
    }
    while (v9 != v8);
    v15 = *a1;
  }
  v16 = v10 + 72;
  a1->i64[0] = v11;
  a1->i64[1] = v10 + 72;
  v20 = v15;
  v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v15.i64[0];
  std::__split_buffer<MetaElement>::~__split_buffer((uint64_t)&v19);
  return v16;
}

void sub_1DE9EFAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MetaElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<MetaElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<MetaElement>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<MetaElement>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,LexiconRef>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<MetaElement>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~pair(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<GlobalTokenAttributes>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;

  v5 = (void **)(a1 + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 160);
    v4 = *(void **)(a1 + 152);
    if (v3 != v2)
    {
      do
      {
        v3 -= 72;
        std::allocator<MetaElement>::destroy[abi:ne180100](v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(*(_QWORD **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,LexiconRef>,std::__map_value_compare<std::string,std::__value_type<std::string,LexiconRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,LexiconRef>>>::destroy(a1[1]);
    std::allocator<MetaElement>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<InjectJSONImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9329E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InjectJSONImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9329E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<InjectJSONImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void BBPEVocab::~BBPEVocab(BBPEVocab *this)
{
  sqlite3_stmt *v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  sqlite3 *v5;

  v2 = (sqlite3_stmt *)*((_QWORD *)this + 5);
  if (v2)
    sqlite3_finalize(v2);
  v3 = (sqlite3_stmt *)*((_QWORD *)this + 6);
  if (v3)
    sqlite3_finalize(v3);
  v4 = (sqlite3_stmt *)*((_QWORD *)this + 7);
  if (v4)
    sqlite3_finalize(v4);
  v5 = (sqlite3 *)*((_QWORD *)this + 4);
  if (v5)
    sqlite3_close(v5);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t BBPEVocab::report_error(BBPEVocab *this, uint64_t a2, const char *a3)
{
  NSObject *v6;
  sqlite3 *v7;
  const char *v8;
  sqlite3 *v9;
  const char *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 && (_DWORD)a2 != 101)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v7 = (sqlite3 *)*((_QWORD *)this + 4);
      if (v7)
        v8 = sqlite3_errmsg(v7);
      else
        v8 = sqlite3_errstr(a2);
      *(_DWORD *)buf = 136315394;
      v14 = a3;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "BBPEVocab: Failed to %s: %s", buf, 0x16u);
    }
    v9 = (sqlite3 *)*((_QWORD *)this + 4);
    if (v9)
      v10 = sqlite3_errmsg(v9);
    else
      v10 = sqlite3_errstr(a2);
    Diagnostics::log(3, "BBPEVocab: Failed to %s: %s", v11, a3, v10);
  }
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t BBPEVocab::lookup(sqlite3_stmt **a1, uint64_t a2)
{
  sqlite3_stmt *v3;
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  int v8;
  sqlite3_int64 v9;

  v3 = a1[5];
  if (!v3)
    return -1;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? (const char *)a2 : *(const char **)a2;
  v6 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_DWORD *)(a2 + 8);
  v7 = sqlite3_bind_text(v3, 1, v5, v6, 0);
  v8 = v7;
  BBPEVocab::report_error((BBPEVocab *)a1, v7, "bind lookup subword");
  if (v8)
    return -1;
  if (sqlite3_step(a1[5]) == 100)
    v9 = sqlite3_column_int64(a1[5], 0);
  else
    v9 = -1;
  sqlite3_reset(a1[5]);
  return v9;
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::unordered_map(uint64_t a1, char a2, char a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = a3;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>(a1, 0);
  return a1;
}

void sub_1DE9F0334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void BBPE::init_codes(BBPE *this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t *v4;
  float *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  char *v14;
  std::string *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int8x8_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38[2];
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  char v42;

  v3 = 0;
  v4 = (unint64_t *)((char *)this + 24);
  v5 = (float *)((char *)this + 32);
  v37 = (_QWORD *)((char *)this + 16);
  do
  {
    std::string::basic_string[abi:ne180100]<0>(v38, BBPE_TOBYTES[v3]);
    *(_OWORD *)__p = *(_OWORD *)v38;
    v41 = v39;
    v38[1] = 0;
    v39 = 0;
    v38[0] = 0;
    v42 = v3;
    v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v4, (uint64_t)__p);
    v7 = v6;
    v8 = *((_QWORD *)this + 1);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        v1 = v6;
        if (v6 >= v8)
          v1 = v6 % v8;
      }
      else
      {
        v1 = (v8 - 1) & v6;
      }
      v11 = *(unsigned __int8 ***)(*(_QWORD *)this + 8 * v1);
      if (v11)
      {
        for (i = *v11; i; i = *(unsigned __int8 **)i)
        {
          v13 = *((_QWORD *)i + 1);
          if (v13 == v7)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v5, i + 16, (unsigned __int8 *)__p) & 1) != 0)
              goto LABEL_77;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8)
                v13 %= v8;
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v1)
              break;
          }
        }
      }
    }
    v14 = (char *)operator new(0x30uLL);
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = v7;
    v15 = (std::string *)(v14 + 16);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *((_QWORD *)v14 + 4) = v41;
    }
    v14[40] = v42;
    v16 = (float)(*v4 + 1);
    v17 = *v5;
    if (!v8 || (float)(v17 * (float)v8) < v16)
    {
      v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v18 = 1;
      v19 = v18 | (2 * v8);
      v20 = vcvtps_u32_f32(v16 / v17);
      if (v19 <= v20)
        prime = (int8x8_t)v20;
      else
        prime = (int8x8_t)v19;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v8 = *((_QWORD *)this + 1);
      if (*(_QWORD *)&prime > v8)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v8)
      {
        v28 = vcvtps_u32_f32((float)*v4 / *v5);
        if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          v28 = std::__next_prime(v28);
        }
        else
        {
          v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2)
            v28 = v30;
        }
        if (*(_QWORD *)&prime <= v28)
          prime = (int8x8_t)v28;
        if (*(_QWORD *)&prime >= v8)
        {
          v8 = *((_QWORD *)this + 1);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v22 = operator new(8 * *(_QWORD *)&prime);
            v23 = *(void **)this;
            *(_QWORD *)this = v22;
            if (v23)
              operator delete(v23);
            v24 = 0;
            *((int8x8_t *)this + 1) = prime;
            do
              *(_QWORD *)(*(_QWORD *)this + 8 * v24++) = 0;
            while (*(_QWORD *)&prime != v24);
            v25 = (_QWORD *)*v37;
            if (*v37)
            {
              v26 = v25[1];
              v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(_QWORD *)&prime)
                  v26 %= *(_QWORD *)&prime;
              }
              else
              {
                v26 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)this + 8 * v26) = v37;
              v31 = (_QWORD *)*v25;
              if (*v25)
              {
                do
                {
                  v32 = v31[1];
                  if (v27.u32[0] > 1uLL)
                  {
                    if (v32 >= *(_QWORD *)&prime)
                      v32 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v32 &= *(_QWORD *)&prime - 1;
                  }
                  if (v32 != v26)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)this + 8 * v32))
                    {
                      *(_QWORD *)(*(_QWORD *)this + 8 * v32) = v25;
                      goto LABEL_58;
                    }
                    *v25 = *v31;
                    *v31 = **(_QWORD **)(*(_QWORD *)this + 8 * v32);
                    **(_QWORD **)(*(_QWORD *)this + 8 * v32) = v31;
                    v31 = v25;
                  }
                  v32 = v26;
LABEL_58:
                  v25 = v31;
                  v31 = (_QWORD *)*v31;
                  v26 = v32;
                }
                while (v31);
              }
            }
            v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          v36 = *(void **)this;
          *(_QWORD *)this = 0;
          if (v36)
            operator delete(v36);
          v8 = 0;
          *((_QWORD *)this + 1) = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8)
          v1 = v7 % v8;
        else
          v1 = v7;
      }
      else
      {
        v1 = (v8 - 1) & v7;
      }
    }
    v33 = *(int8x8_t *)this;
    v34 = *(_QWORD **)(*(_QWORD *)this + 8 * v1);
    if (v34)
    {
      *(_QWORD *)v14 = *v34;
LABEL_75:
      *v34 = v14;
      goto LABEL_76;
    }
    *(_QWORD *)v14 = *v37;
    *v37 = v14;
    *(_QWORD *)(*(_QWORD *)&v33 + 8 * v1) = v37;
    if (*(_QWORD *)v14)
    {
      v35 = *(_QWORD *)(*(_QWORD *)v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8)
          v35 %= v8;
      }
      else
      {
        v35 &= v8 - 1;
      }
      v34 = (_QWORD *)(*(_QWORD *)this + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    ++*v4;
LABEL_77:
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
    ++v3;
  }
  while (v3 != 256);
}

void sub_1DE9F07D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,FRCode::BndType>,void *>>>::operator()[abi:ne180100](1, v21);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t BBPE::setup_pre_tokenization_regex(BBPE *this)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v4 = *((_QWORD *)this + 28);
    *(_DWORD *)buf = 136315138;
    v10 = v4;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEBUG, "Pretokenization Regex: %s", buf, 0xCu);
  }
  Diagnostics::log(7, "Pretokenization Regex: %s", v3, *((_QWORD *)this + 28));
  result = pcre2_compile_8();
  *((_QWORD *)this + 27) = result;
  if (!result)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_QWORD *)this + 28);
      *(_DWORD *)buf = 136315394;
      v10 = v8;
      v11 = 1024;
      v12 = 0;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "Compiled RE failed(%s), Code: %d", buf, 0x12u);
    }
    return Diagnostics::log(7, "Compiled RE failed(%s), Code: %d", v7, *((_QWORD *)this + 28), 0, 0);
  }
  return result;
}

void std::__list_imp<std::pair<std::string,std::string>>::clear(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
          operator delete(*((void **)v3 + 5));
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void BBPE::load_data(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  std::string::size_type v9;
  BOOL v10;
  NSObject *v11;
  const char *v12;
  sqlite3 **v14;
  uint64_t v15;
  BBPEVocab *v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sqlite3 *v27;
  sqlite3_stmt **v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v31;
  NSObject *v32;
  const char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 *j;
  unint64_t v72;
  _QWORD *v73;
  std::string *v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  __int128 v85;
  void **v86;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t *v90;
  sqlite3_int64 v91;
  int v92;
  const char *v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  void **v100;
  void *v101;
  nlohmann::detail::exception *exception;
  char *v103;
  std::string *v104;
  __int128 v105;
  nlohmann::detail::exception *v106;
  unint64_t v107;
  char *v108;
  std::string *v109;
  __int128 v110;
  nlohmann::detail::exception *v111;
  unint64_t v112;
  char *v113;
  std::string *v114;
  __int128 v115;
  _QWORD *v116;
  unsigned __int8 v117[8];
  uint64_t *v118;
  std::string v119;
  __int128 v120;
  void *v121[2];
  int v122;
  void *__p[2];
  char v124;
  void *v125[2];
  __int128 v126;
  int v127;
  _BYTE v128[8];
  uint64_t *v129;
  __int128 v130;
  int64_t v131;
  std::string v132;
  uint64_t v133;
  unint64_t v134;
  std::string v135;
  uint64_t v136;
  std::string v137;
  __int128 v138;
  std::string::size_type v139;
  _BYTE buf[128];
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[32];
  _QWORD v144[4];

  v144[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 136))
  {
    v5 = *(_QWORD **)(a1 + 128);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(a1 + 128) = 0;
    v7 = *(_QWORD *)(a1 + 120);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 136) = 0;
  }
  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(a1 + 160));
  v9 = std::string::rfind((const std::string *)a2, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v9 != -1)
  {
    std::string::basic_string(&v119, (const std::string *)a2, v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
    if ((*((_BYTE *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v119.__r_.__value_.__l.__size_ != 4)
      {
        if (v119.__r_.__value_.__l.__size_ != 5)
          goto LABEL_45;
        if (*(_DWORD *)v119.__r_.__value_.__l.__data_ != 1869834798
          || *(_BYTE *)(v119.__r_.__value_.__r.__words[0] + 4) != 110)
        {
          goto LABEL_45;
        }
        goto LABEL_30;
      }
      v31 = (std::string *)v119.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v119.__r_.__value_.__r.__words[2]) != 4)
      {
        if (HIBYTE(v119.__r_.__value_.__r.__words[2]) != 5
          || (LODWORD(v119.__r_.__value_.__l.__data_) == 1869834798
            ? (v10 = v119.__r_.__value_.__s.__data_[4] == 110)
            : (v10 = 0),
              !v10))
        {
LABEL_45:
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v32 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1DE3F6000, v32, OS_LOG_TYPE_ERROR, "Failed to load BBPEVocab, only .json and .dat are supported!", buf, 2u);
          }
          Diagnostics::log(3, "Failed to load BBPEVocab, only .json and .dat are supported!", v33);
          goto LABEL_50;
        }
LABEL_30:
        v117[0] = 0;
        v118 = 0;
        std::ifstream::basic_ifstream(buf);
        if (v141)
        {
          nlohmann::operator>>(buf, (uint64_t)v117);
          if (v117[0])
          {
            v14 = (sqlite3 **)(a1 + 72);
            v15 = sqlite3_open_v2(":memory:", (sqlite3 **)(a1 + 72), 262278, 0);
            v16 = (BBPEVocab *)(a1 + 40);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v15, "open compiled vocab");
            v17 = sqlite3_exec(*(sqlite3 **)(a1 + 72), "CREATE TABLE Metadata (name TEXT, value TEXT);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v17, "create metadata table");
            std::operator+<char>();
            v18 = std::string::append((std::string *)v143, "');");
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v131 = v18->__r_.__value_.__r.__words[2];
            v130 = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if ((v143[23] & 0x80000000) != 0)
              operator delete(*(void **)v143);
            if (v131 >= 0)
              v20 = (const char *)&v130;
            else
              v20 = (const char *)v130;
            v21 = sqlite3_exec(*v14, v20, 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v21, "set version");
            v22 = sqlite3_exec(*v14, "CREATE TABLE vocab (subword TEXT, rank INT64);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v22, "create vocab");
            v23 = sqlite3_exec(*v14, "CREATE unique INDEX lookup_index on vocab (subword);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v23, "create lookup_index");
            v24 = sqlite3_exec(*v14, "CREATE unique INDEX id_lookup_index on vocab (rank);", 0, 0, 0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v24, "create id_lookup_index");
            v25 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT rank FROM vocab WHERE subword=?;",
                    -1,
                    (sqlite3_stmt **)(a1 + 80),
                    0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v25, "compile lookup query");
            v26 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT subword FROM vocab WHERE rank=?;",
                    -1,
                    (sqlite3_stmt **)(a1 + 88),
                    0);
            BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v26, "compile id lookup query");
            v27 = *(sqlite3 **)(a1 + 72);
            v28 = (sqlite3_stmt **)(a1 + 96);
            v29 = sqlite3_prepare_v2(v27, "INSERT INTO vocab VALUES(?, ?);", -1, v28, 0);
            BBPEVocab::report_error(v16, v29, "compile entry creation query");
            v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v117, "model");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v128, (uint64_t)v30);
            if (!v128[0])
            {
              if (Diagnostics_GetLogObject(void)::onceToken != -1)
                dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
              v57 = Diagnostics_GetLogObject(void)::__profile_log_default;
              if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v143 = 0;
                _os_log_impl(&dword_1DE3F6000, v57, OS_LOG_TYPE_ERROR, "we cannot read model content from json file!", v143, 2u);
              }
              Diagnostics::log(3, "we cannot read model content from json file!", v58);
              goto LABEL_202;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "vocab");
            v120 = 0u;
            *(_OWORD *)v121 = 0u;
            v122 = 1065353216;
            if (v128[0] != 1)
            {
              exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              if (v128[0] > 9uLL)
                v103 = "number";
              else
                v103 = off_1EA94C758[v128[0]];
              std::string::basic_string[abi:ne180100]<0>(&v132, v103);
              v104 = std::string::insert(&v132, 0, "cannot use value() with ");
              v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              *(_QWORD *)&v143[16] = *((_QWORD *)&v104->__r_.__value_.__l + 2);
              *(_OWORD *)v143 = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              nlohmann::detail::type_error::create(306, (uint64_t)v143, exception);
            }
            v132.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
            v132.__r_.__value_.__r.__words[2] = 0;
            v133 = 0;
            v134 = 0x8000000000000000;
            v132.__r_.__value_.__l.__size_ = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v129, (const void **)__p);
            *(_QWORD *)v143 = v128;
            memset(&v143[8], 0, 24);
            v144[0] = 0x8000000000000000;
            if (v128[0] == 2)
            {
              *(_QWORD *)&v143[16] = v129[1];
            }
            else if (v128[0] == 1)
            {
              *(_QWORD *)&v143[8] = v129 + 1;
            }
            else
            {
              v144[0] = 1;
            }
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v132, (unsigned __int8 **)v143))
            {
              *(_OWORD *)v125 = 0u;
              v126 = 0u;
              v127 = 1065353216;
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>((uint64_t)v125, 0);
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(0);
LABEL_185:
              if (v124 < 0)
                operator delete(__p[0]);
              v90 = (uint64_t *)v126;
              if ((_QWORD)v126)
              {
                do
                {
                  v91 = v90[5];
                  sqlite3_clear_bindings(*v28);
                  v92 = *((char *)v90 + 39);
                  if (v92 >= 0)
                    v93 = (const char *)(v90 + 2);
                  else
                    v93 = (const char *)v90[2];
                  if (v92 >= 0)
                    v94 = *((unsigned __int8 *)v90 + 39);
                  else
                    v94 = *((_DWORD *)v90 + 6);
                  v95 = sqlite3_bind_text(*v28, 1, v93, v94, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
                  v96 = v95;
                  BBPEVocab::report_error(v16, v95, "bind subword");
                  if (!v96)
                  {
                    v97 = sqlite3_bind_int64(*v28, 2, v91);
                    v98 = v97;
                    BBPEVocab::report_error(v16, v97, "bind rank");
                    if (!v98)
                    {
                      v99 = sqlite3_step(*v28);
                      BBPEVocab::report_error(v16, v99, "add entry");
                      sqlite3_reset(*v28);
                    }
                  }
                  v90 = (uint64_t *)*v90;
                }
                while (v90);
                v100 = (void **)v126;
              }
              else
              {
                v100 = 0;
              }
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(v100);
              v101 = v125[0];
              v125[0] = 0;
              if (v101)
                operator delete(v101);
LABEL_202:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);
              if (SHIBYTE(v131) < 0)
                operator delete((void *)v130);
              goto LABEL_204;
            }
            v59 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v132);
            v60 = v59;
            *(_OWORD *)v125 = 0u;
            v126 = 0u;
            v127 = 1065353216;
            if (*v59 != 1)
            {
              v106 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
              v107 = *v60;
              if (v107 > 9)
                v108 = "number";
              else
                v108 = off_1EA94C758[v107];
              std::string::basic_string[abi:ne180100]<0>(&v135, v108);
              v109 = std::string::insert(&v135, 0, "type must be object, but is ");
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              *(_QWORD *)&v143[16] = *((_QWORD *)&v109->__r_.__value_.__l + 2);
              *(_OWORD *)v143 = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              nlohmann::detail::type_error::create(302, (uint64_t)v143, v106);
            }
            memset(v143, 0, sizeof(v143));
            LODWORD(v144[0]) = 1065353216;
            v61 = (_QWORD *)*((_QWORD *)v59 + 1);
            v62 = (_QWORD *)*v61;
            v116 = v61 + 1;
            if ((_QWORD *)*v61 == v61 + 1)
            {
LABEL_175:
              v85 = *(_OWORD *)v143;
              *(_OWORD *)v143 = 0uLL;
              v86 = *(void ***)&v143[16];
              *(_OWORD *)v125 = v85;
              v127 = v144[0];
              v126 = *(_OWORD *)&v143[16];
              if (*(_QWORD *)&v143[24])
              {
                v87 = *(_QWORD *)(*(_QWORD *)&v143[16] + 8);
                if ((*((_QWORD *)&v85 + 1) & (*((_QWORD *)&v85 + 1) - 1)) != 0)
                {
                  if (v87 >= *((_QWORD *)&v85 + 1))
                    v87 %= *((_QWORD *)&v85 + 1);
                }
                else
                {
                  v87 &= *((_QWORD *)&v85 + 1) - 1;
                }
                v86 = 0;
                *(_QWORD *)(v85 + 8 * v87) = &v126;
                *(_QWORD *)&v143[16] = 0;
                *(_QWORD *)&v143[24] = 0;
              }
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node(v86);
              v88 = *(void **)v143;
              *(_QWORD *)v143 = 0;
              if (v88)
                operator delete(v88);
              v89 = (void *)v120;
              std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__deallocate_node((void **)v121[0]);
              if (v89)
                operator delete(v89);
              goto LABEL_185;
            }
            while (1)
            {
              v63 = *((unsigned __int8 *)v62 + 56);
              if (v63 != 5)
              {
                if (v63 == 7)
                {
                  v64 = (uint64_t)*((double *)v62 + 8);
                  goto LABEL_123;
                }
                if (v63 != 6)
                {
                  v111 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
                  v112 = *((unsigned __int8 *)v62 + 56);
                  if (v112 > 9)
                    v113 = "number";
                  else
                    v113 = off_1EA94C758[v112];
                  std::string::basic_string[abi:ne180100]<0>(&v137, v113);
                  v114 = std::string::insert(&v137, 0, "type must be number, but is ");
                  v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
                  v139 = v114->__r_.__value_.__r.__words[2];
                  v138 = v115;
                  v114->__r_.__value_.__l.__size_ = 0;
                  v114->__r_.__value_.__r.__words[2] = 0;
                  v114->__r_.__value_.__r.__words[0] = 0;
                  nlohmann::detail::type_error::create(302, (uint64_t)&v138, v111);
                }
              }
              v64 = v62[8];
LABEL_123:
              if (*((char *)v62 + 55) < 0)
                std::string::__init_copy_ctor_external(&v135, (const std::string::value_type *)v62[4], v62[5]);
              else
                v135 = *(std::string *)(v62 + 4);
              v136 = v64;
              v65 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v143[24], (uint64_t)&v135);
              v66 = v65;
              v67 = *(_QWORD *)&v143[8];
              if (*(_QWORD *)&v143[8])
              {
                v68 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v143[8]);
                v68.i16[0] = vaddlv_u8(v68);
                v69 = v68.u32[0];
                if (v68.u32[0] > 1uLL)
                {
                  v2 = v65;
                  if (v65 >= *(_QWORD *)&v143[8])
                    v2 = v65 % *(_QWORD *)&v143[8];
                }
                else
                {
                  v2 = (*(_QWORD *)&v143[8] - 1) & v65;
                }
                v70 = *(unsigned __int8 ***)(*(_QWORD *)v143 + 8 * v2);
                if (v70)
                {
                  for (j = *v70; j; j = *(unsigned __int8 **)j)
                  {
                    v72 = *((_QWORD *)j + 1);
                    if (v72 == v66)
                    {
                      if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v144, j + 16, (unsigned __int8 *)&v135) & 1) != 0)goto LABEL_167;
                    }
                    else
                    {
                      if (v69 > 1)
                      {
                        if (v72 >= v67)
                          v72 %= v67;
                      }
                      else
                      {
                        v72 &= v67 - 1;
                      }
                      if (v72 != v2)
                        break;
                    }
                  }
                }
              }
              v73 = operator new(0x30uLL);
              *v73 = 0;
              v73[1] = v66;
              v74 = (std::string *)(v73 + 2);
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v74, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v74->__r_.__value_.__l.__data_ = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
                v73[4] = *((_QWORD *)&v135.__r_.__value_.__l + 2);
              }
              v73[5] = v136;
              v75 = (float)(unint64_t)(*(_QWORD *)&v143[24] + 1);
              if (!v67 || (float)(*(float *)v144 * (float)v67) < v75)
              {
                v76 = (v67 & (v67 - 1)) != 0;
                if (v67 < 3)
                  v76 = 1;
                v77 = v76 | (2 * v67);
                v78 = vcvtps_u32_f32(v75 / *(float *)v144);
                if (v77 <= v78)
                  v79 = v78;
                else
                  v79 = v77;
                std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__rehash<true>((uint64_t)v143, v79);
                v67 = *(_QWORD *)&v143[8];
                if ((v67 & (v67 - 1)) != 0)
                {
                  if (v66 >= *(_QWORD *)&v143[8])
                    v2 = v66 % *(_QWORD *)&v143[8];
                  else
                    v2 = v66;
                }
                else
                {
                  v2 = (*(_QWORD *)&v143[8] - 1) & v66;
                }
              }
              v80 = *(_QWORD *)v143;
              v81 = *(_QWORD **)(*(_QWORD *)v143 + 8 * v2);
              if (v81)
              {
                *v73 = *v81;
              }
              else
              {
                *v73 = *(_QWORD *)&v143[16];
                *(_QWORD *)&v143[16] = v73;
                *(_QWORD *)(v80 + 8 * v2) = &v143[16];
                if (!*v73)
                  goto LABEL_166;
                v82 = *(_QWORD *)(*v73 + 8);
                if ((v67 & (v67 - 1)) != 0)
                {
                  if (v82 >= v67)
                    v82 %= v67;
                }
                else
                {
                  v82 &= v67 - 1;
                }
                v81 = (_QWORD *)(*(_QWORD *)v143 + 8 * v82);
              }
              *v81 = v73;
LABEL_166:
              ++*(_QWORD *)&v143[24];
LABEL_167:
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v135.__r_.__value_.__l.__data_);
              v83 = (_QWORD *)v62[1];
              if (v83)
              {
                do
                {
                  v84 = v83;
                  v83 = (_QWORD *)*v83;
                }
                while (v83);
              }
              else
              {
                do
                {
                  v84 = (_QWORD *)v62[2];
                  v10 = *v84 == (_QWORD)v62;
                  v62 = v84;
                }
                while (!v10);
              }
              v62 = v84;
              if (v84 == v116)
                goto LABEL_175;
            }
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v54 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a2 + 23) >= 0)
              v55 = a2;
            else
              v55 = *(_QWORD *)a2;
            *(_DWORD *)v143 = 136315138;
            *(_QWORD *)&v143[4] = v55;
            _os_log_impl(&dword_1DE3F6000, v54, OS_LOG_TYPE_ERROR, "%s was open, but we cannot read anything from it!", v143, 0xCu);
          }
          v53 = "%s was open, but we cannot read anything from it!";
        }
        else
        {
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v50 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a2 + 23) >= 0)
              v52 = a2;
            else
              v52 = *(_QWORD *)a2;
            *(_DWORD *)v143 = 136315138;
            *(_QWORD *)&v143[4] = v52;
            _os_log_impl(&dword_1DE3F6000, v50, OS_LOG_TYPE_ERROR, "Unable to open vocab json file: %s", v143, 0xCu);
          }
          v53 = "Unable to open vocab json file: %s";
        }
        if (*(char *)(a2 + 23) >= 0)
          v56 = a2;
        else
          v56 = *(_QWORD *)a2;
        Diagnostics::log(3, v53, v51, v56);
LABEL_204:
        *(_QWORD *)buf = *MEMORY[0x1E0DE4F40];
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
        MEMORY[0x1DF0ECB94](&buf[16]);
        std::istream::~istream();
        MEMORY[0x1DF0ECF6C](&v142);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v118, v117[0]);
LABEL_50:
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        return;
      }
      v31 = &v119;
    }
    if (LODWORD(v31->__r_.__value_.__l.__data_) == 1952539694)
    {
      memset(v143, 0, 24);
      MemoryMap::MemoryMap(buf, a2);
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)&buf[16];
      v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v37 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0)
            v39 = a2;
          else
            v39 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v39;
          _os_log_impl(&dword_1DE3F6000, v37, OS_LOG_TYPE_DEFAULT, "Loaded BBPE Vocab: %s", buf, 0xCu);
        }
        if (*(char *)(a2 + 23) >= 0)
          v40 = a2;
        else
          v40 = *(_QWORD *)a2;
        Diagnostics::log(5, "Loaded BBPE Vocab: %s", v38, v40);
        v41 = sqlite3_open_MemoryMap((const void **)(a1 + 40), (sqlite3 **)(a1 + 72));
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v41, "Open memory mapped BBPE Vocab");
        v42 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT rank FROM vocab WHERE subword=?;",
                -1,
                (sqlite3_stmt **)(a1 + 80),
                0);
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v42, "compile lookup query");
        v43 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 72), "SELECT subword FROM vocab WHERE rank=?;",
                -1,
                (sqlite3_stmt **)(a1 + 88),
                0);
        BBPEVocab::report_error((BBPEVocab *)(a1 + 40), v43, "compile id lookup query");
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v44 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a2 + 23) >= 0)
            v46 = a2;
          else
            v46 = *(_QWORD *)a2;
          v47 = v143;
          if (v143[23] < 0)
            v47 = *(_BYTE **)v143;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v46;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v47;
          _os_log_impl(&dword_1DE3F6000, v44, OS_LOG_TYPE_ERROR, "BBPEVocab(%s) memory mapping failed: %s", buf, 0x16u);
        }
        if (*(char *)(a2 + 23) >= 0)
          v48 = a2;
        else
          v48 = *(_QWORD *)a2;
        v49 = v143;
        if (v143[23] < 0)
          v49 = *(_BYTE **)v143;
        Diagnostics::log(3, "BBPEVocab(%s) memory mapping failed: %s", v45, v48, v49);
      }
      if ((v143[23] & 0x80000000) != 0)
        operator delete(*(void **)v143);
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v11 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v11, OS_LOG_TYPE_ERROR, "Failed to load BBPEVocab, only file with .json or .dat suffix is supported!", buf, 2u);
  }
  Diagnostics::log(3, "Failed to load BBPEVocab, only file with .json or .dat suffix is supported!", v12);
}

void sub_1DE9F1D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t *a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t **v66;

  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&a24);
  if (a34 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a42, a41);
  if (a48 < 0)
    operator delete(a43);
  std::ifstream::~ifstream(&a66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v66, a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void UTFString::join<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::value_type *v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _BYTE __p[40];
  std::string v17;
  std::string v18;
  std::string v19;

  memset(&__p[32], 0, 7);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    *(std::string *)__p = *(std::string *)a4;
  if (a2 == a3)
  {
    v7 = 0;
    size = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    v7 = 0;
    size = 0;
    v9 = 0;
    do
    {
      if ((v9 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(&v17, v7, size);
        v10 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
      }
      else
      {
        v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        v17.__r_.__value_.__l.__size_ = size;
        LODWORD(v17.__r_.__value_.__r.__words[2]) = *(_DWORD *)&__p[32];
        *(_DWORD *)((char *)&v17.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&__p[35];
        *((_BYTE *)&v17.__r_.__value_.__s + 23) = v9;
        v10 = v9;
      }
      if ((v10 & 0x80u) != 0)
        v10 = size;
      if (v10)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v17.__r_.__value_.__l.__data_, (const void **)__p, (uint64_t)&v19);
        v11 = *(char *)(a2 + 23);
        if (v11 >= 0)
          v12 = (const std::string::value_type *)a2;
        else
          v12 = *(const std::string::value_type **)a2;
        if (v11 >= 0)
          v13 = *(unsigned __int8 *)(a2 + 23);
        else
          v13 = *(_QWORD *)(a2 + 8);
        v14 = std::string::append(&v19, v12, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v18 = *(std::string *)a2;
      }
      if ((char)v9 < 0)
        operator delete(v7);
      size = v18.__r_.__value_.__l.__size_;
      v7 = (std::string::value_type *)v18.__r_.__value_.__r.__words[0];
      *(_DWORD *)&__p[32] = v18.__r_.__value_.__r.__words[2];
      *(_DWORD *)&__p[35] = *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[2] + 3);
      v9 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
      v18.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      a2 += 24;
    }
    while (a2 != a3);
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = size;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)&__p[32];
  *(_DWORD *)(a1 + 19) = *(_DWORD *)&__p[35];
  *(_BYTE *)(a1 + 23) = v9;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_1DE9F2244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  char v32;

  if (a14 < 0)
    operator delete(__p);
  if (v32 < 0)
    operator delete(v31);
  _Unwind_Resume(exception_object);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(std::string *this, uint64_t a2, int *a3, int *a4, int *a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v9;
    HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v10;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
    if (v12 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *this = __p;
    LODWORD(this[1].__r_.__value_.__l.__data_) = v9;
    HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v10;
    LODWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
  }
}

void sub_1DE9F2354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)a1 + 44;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        v14 = (unsigned __int8 *)v11[2];
        if (v14 == (unsigned __int8 *)*a2
          || (std::equal_to<std::string>::operator()[abi:ne180100](v12, v14, (unsigned __int8 *)*a2) & 1) != 0)
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(_QWORD *a1, _QWORD *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = __p[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v3);
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2)
    goto LABEL_18;
  v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v2)
      v7 %= *(_QWORD *)&v2;
  }
  else
  {
    v7 &= *(_QWORD *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p)
      goto LABEL_19;
    v8 = *(_QWORD *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 != v3)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v3) = 0;
  }
  v9 = *__p;
  if (*__p)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(_QWORD *)(*a1 + 8 * v10) = v6;
      v9 = *__p;
    }
  }
  *v6 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

uint64_t *std::vector<ByteToken>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      v6 = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v6;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v7 = *(_QWORD *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(_QWORD *)(v4 - 16) = v7;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<std::vector<ByteToken>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0)
          operator delete(*(void **)(v3 - 40));
        v3 -= 40;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::allocator<ByteChunk>::construct[abi:ne180100]<ByteChunk,std::shared_ptr<std::vector<std::string>> &,unsigned long &,unsigned long>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *a4;
    v9 = *a5;
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_DWORD *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 20) = v9;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v12 = *a4;
    v13 = *a5;
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 20) = v13;
  }
}

void std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<ByteChunk>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void BBPE::encode_and_return_vector(uint64_t **a1, uint64_t a2, std::string *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  std::string::size_type size;
  uint64_t *v9;
  NSObject *v10;
  const char *v11;
  std::string *v12;
  uint64_t *v13;
  std::string::size_type v14;
  uint64_t v15;
  _QWORD *v16;
  int matched;
  std::string::size_type *ovector_pointer_8;
  std::string::size_type *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  char v22;
  std::string::size_type v23;
  char *v24;
  std::string::size_type v25;
  std::vector<std::string> *v26;
  std::string::const_reference v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string::size_type v40;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::__split_buffer<std::string>::pointer begin;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  int64x2_t v49;
  std::string *v50;
  NSObject *v51;
  const char *v52;
  std::string *v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  const char *v78;
  std::string *v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  int v90;
  int data;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  std::string *v102;
  uint64_t v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  const char *v109;
  std::string *v110;
  std::string *v111;
  _QWORD *v112;
  uint64_t *v113;
  std::vector<std::string> *v114;
  std::vector<std::string> *v115;
  unint64_t *p_end;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  std::vector<std::string>::pointer v121;
  __int128 *v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  float v128;
  int v129;
  __int128 *v130;
  __int128 v131;
  uint64_t v132;
  float v133;
  unint64_t v134;
  size_t v135;
  std::__split_buffer<std::string>::pointer p_buf;
  std::string *v137;
  uint64_t v138;
  int v139;
  const std::string::value_type *v140;
  std::string::size_type v141;
  std::string *v142;
  void *v143;
  char v144;
  unint64_t v145;
  std::vector<std::string>::pointer v146;
  std::string *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v153;
  unint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  std::string *v164;
  std::string *v165;
  __int128 v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned __int8 *v177;
  BOOL v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  std::string::size_type v193;
  size_t v194;
  std::string *v195;
  unsigned __int8 *v196;
  std::string *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  std::__split_buffer<std::string>::pointer first;
  std::string::size_type end_high;
  _QWORD *v203;
  std::string *v204;
  std::__split_buffer<std::string> *v205;
  std::string::size_type v206;
  std::__split_buffer<std::string>::pointer v207;
  unint64_t v208;
  std::string *v209;
  std::__split_buffer<std::string> *v210;
  std::string::size_type v211;
  std::__split_buffer<std::string>::pointer v212;
  _QWORD *v213;
  char *v214;
  std::string::size_type v215;
  uint64_t v216;
  std::__split_buffer<std::string>::pointer v217;
  std::__split_buffer<std::string>::pointer v218;
  unsigned __int8 *v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint8x8_t v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  unsigned __int8 *v228;
  _QWORD *v229;
  float v230;
  float v231;
  _BOOL8 v232;
  unint64_t v233;
  unint64_t v234;
  size_t v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  std::__split_buffer<std::string>::pointer *v239;
  std::__split_buffer<std::string>::pointer *v240;
  std::string::size_type v241;
  std::string::size_type v242;
  unint64_t *v243;
  int *v244;
  int *v245;
  uint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  std::vector<std::string> **v267;
  int v268[2];
  uint64_t *v269;
  uint64_t **v270;
  uint64_t *v271;
  std::vector<std::string> **v272;
  void *__p;
  uint64_t v274;
  std::string::size_type v275;
  sqlite3_stmt **v276;
  _QWORD *v277;
  std::__shared_weak_count *v278;
  int64x2_t v279;
  std::string *value;
  unsigned int v281;
  uint64_t *v282;
  std::__shared_weak_count *v283;
  std::vector<std::string> *v284;
  std::__shared_weak_count *v285;
  uint64_t *v286;
  std::__shared_weak_count *v287;
  std::string v288;
  std::string v289;
  int v290;
  std::string __str;
  std::string v292;
  std::string v293;
  std::__split_buffer<std::string> buf;
  uint64_t v295;

  v295 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)operator new(0x30uLL);
  v6[3] = 0;
  v7 = v6 + 3;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = (uint64_t)&off_1EA936648;
  v6[4] = 0;
  v6[5] = 0;
  *a1 = v6 + 3;
  a1[1] = v6;
  v270 = a1;
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = v6;
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    *(_QWORD *)v268 = v9;
    v271 = v7;
    v274 = a2;
    v10 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = a3;
      else
        v12 = (std::string *)a3->__r_.__value_.__r.__words[0];
      LODWORD(buf.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v12;
      _os_log_impl(&dword_1DE3F6000, v10, OS_LOG_TYPE_DEBUG, "Pretokenization Input: %s", (uint8_t *)&buf, 0xCu);
    }
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = (uint64_t *)a3;
    else
      v13 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
    Diagnostics::log(7, "Pretokenization Input: %s", v11, v13);
    v14 = 0;
    v279 = 0uLL;
    value = 0;
    do
    {
      while (1)
      {
        v288.__r_.__value_.__r.__words[0] = v14;
        v15 = *(_QWORD *)(v274 + 216);
        if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
        else
          __str = *a3;
        v16 = pcre2_match_data_create_from_pattern_8(v15, 0);
        matched = pcre2_match_8();
        memset(&v292, 0, sizeof(v292));
        if (matched < 0)
        {
          pcre2_match_data_free_8((uint64_t)v16);
        }
        else
        {
          ovector_pointer_8 = (std::string::size_type *)pcre2_get_ovector_pointer_8((uint64_t)v16);
          v19 = ovector_pointer_8;
          v20 = *ovector_pointer_8;
          v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v21 = __str.__r_.__value_.__l.__size_;
          if (v20 < v21)
          {
            std::string::basic_string((std::string *)&buf, &__str, v20, ovector_pointer_8[1] - v20, (std::allocator<char> *)&v289);
            *(_OWORD *)&v292.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__first_;
            v292.__r_.__value_.__r.__words[2] = (std::string::size_type)buf.__end_;
          }
          v14 = v19[1];
          pcre2_match_data_free_8((uint64_t)v16);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v22 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
        if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
        else
          v23 = v292.__r_.__value_.__l.__size_;
        if (v23)
        {
          v275 = v23;
          v24 = (char *)operator new(0x30uLL);
          v25 = 0;
          *((_QWORD *)v24 + 1) = 0;
          *((_QWORD *)v24 + 2) = 0;
          *(_QWORD *)v24 = &off_1EA936808;
          *((_QWORD *)v24 + 3) = 0;
          v26 = (std::vector<std::string> *)(v24 + 24);
          *((_QWORD *)v24 + 4) = 0;
          *((_QWORD *)v24 + 5) = 0;
          v289.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
          v289.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          do
          {
            v27 = std::string::at(&v292, v25);
            std::string::basic_string[abi:ne180100]<0>(&v293, BBPE_TOBYTES[*(unsigned __int8 *)v27]);
            v29 = *((_QWORD *)v24 + 4);
            v28 = *((_QWORD *)v24 + 5);
            if (v29 >= v28)
            {
              v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (unint64_t)v26->__begin_) >> 3);
              v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (unint64_t)v26->__begin_) >> 3);
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0x555555555555555)
                v34 = 0xAAAAAAAAAAAAAAALL;
              else
                v34 = v32;
              buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v24 + 40);
              if (v34)
                v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v24 + 40), v34);
              else
                v35 = 0;
              v36 = v35 + v31;
              buf.__first_ = v35;
              buf.__begin_ = v36;
              buf.__end_cap_.__value_ = &v35[v34];
              v37 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
              v36->__r_.__value_.__r.__words[2] = v293.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
              memset(&v293, 0, sizeof(v293));
              buf.__end_ = v36 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(v26, &buf);
              v38 = *((_QWORD *)v24 + 4);
              std::__split_buffer<std::string>::~__split_buffer(&buf);
              v39 = SHIBYTE(v293.__r_.__value_.__r.__words[2]);
              *((_QWORD *)v24 + 4) = v38;
              if (v39 < 0)
                operator delete(v293.__r_.__value_.__l.__data_);
            }
            else
            {
              v30 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
              *(_QWORD *)(v29 + 16) = *((_QWORD *)&v293.__r_.__value_.__l + 2);
              *(_OWORD *)v29 = v30;
              *((_QWORD *)v24 + 4) = v29 + 24;
            }
            ++v25;
            v40 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v40 = v292.__r_.__value_.__l.__size_;
          }
          while (v40 > v25);
          v293.__r_.__value_.__r.__words[0] = v40;
          if (v279.i64[1] >= (unint64_t)value)
          {
            v42 = 0xAAAAAAAAAAAAAAABLL * ((v279.i64[1] - v279.i64[0]) >> 3) + 1;
            if (v42 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((uint64_t)value - v279.i64[0]) >> 3) > v42)
              v42 = 0x5555555555555556 * (((uint64_t)value - v279.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)value - v279.i64[0]) >> 3) >= 0x555555555555555)
              v43 = 0xAAAAAAAAAAAAAAALL;
            else
              v43 = v42;
            buf.__end_cap_.__value_ = (std::allocator<std::string> *)&value;
            if (v43)
            {
              if (v43 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v44 = (std::string *)operator new(24 * v43);
            }
            else
            {
              v44 = 0;
            }
            buf.__first_ = v44;
            buf.__begin_ = (std::string *)((char *)v44 + 8 * ((v279.i64[1] - v279.i64[0]) >> 3));
            buf.__end_ = buf.__begin_;
            buf.__end_cap_.__value_ = &v44[v43];
            std::allocator<ByteChunk>::construct[abi:ne180100]<ByteChunk,std::shared_ptr<std::vector<std::string>> &,unsigned long &,unsigned long>((uint64_t)buf.__begin_, (uint64_t)v289.__r_.__value_.__l.__data_, (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_, (uint64_t *)&v288, (uint64_t *)&v293);
            begin = buf.__begin_;
            end = ++buf.__end_;
            v46 = (_QWORD *)v279.i64[1];
            v47 = (_QWORD *)v279.i64[0];
            if (v279.i64[1] == v279.i64[0])
            {
              v49 = vdupq_n_s64(v279.u64[1]);
            }
            else
            {
              do
              {
                v48 = *(_OWORD *)(v46 - 3);
                v46 -= 3;
                *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v48;
                --begin;
                *v46 = 0;
                v46[1] = 0;
                begin->__r_.__value_.__r.__words[2] = v46[2];
              }
              while (v46 != v47);
              v49 = v279;
              end = buf.__end_;
            }
            v279.i64[0] = (uint64_t)begin;
            v279.i64[1] = (uint64_t)end;
            *(int64x2_t *)&buf.__begin_ = v49;
            v50 = value;
            value = buf.__end_cap_.__value_;
            buf.__end_cap_.__value_ = v50;
            buf.__first_ = (std::__split_buffer<std::string>::pointer)v49.i64[0];
            std::__split_buffer<ByteChunk>::~__split_buffer((uint64_t)&buf);
          }
          else
          {
            std::allocator<ByteChunk>::construct[abi:ne180100]<ByteChunk,std::shared_ptr<std::vector<std::string>> &,unsigned long &,unsigned long>(v279.i64[1], (uint64_t)v289.__r_.__value_.__l.__data_, (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_, (uint64_t *)&v288, (uint64_t *)&v293);
            end = (std::__split_buffer<std::string>::pointer)(v279.i64[1] + 24);
          }
          v279.i64[1] = (uint64_t)end;
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v51 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v53 = &v292;
            if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v53 = (std::string *)v292.__r_.__value_.__r.__words[0];
            LODWORD(buf.__first_) = 136315138;
            *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v53;
            _os_log_impl(&dword_1DE3F6000, v51, OS_LOG_TYPE_DEBUG, "Pretokenization Chunk: %s", (uint8_t *)&buf, 0xCu);
          }
          v54 = &v292;
          if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v54 = (std::string *)v292.__r_.__value_.__r.__words[0];
          Diagnostics::log(7, "Pretokenization Chunk: %s", v52, v54);
          v55 = (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_;
          if (v289.__r_.__value_.__l.__size_)
          {
            v56 = (unint64_t *)(v289.__r_.__value_.__l.__size_ + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v22 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
          v23 = v275;
        }
        if (v22 < 0)
          break;
        if (!v23)
          goto LABEL_83;
      }
      operator delete(v292.__r_.__value_.__l.__data_);
    }
    while (v23);
LABEL_83:
    if (v279.i64[0] != v279.i64[1])
    {
      v58 = 0x666666666666666;
      LODWORD(v293.__r_.__value_.__l.__data_) = 1;
      LODWORD(v292.__r_.__value_.__l.__data_) = 0;
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      v59 = *(_QWORD *)(*(_QWORD *)v268 + 40);
      v60 = *(_QWORD *)(*(_QWORD *)v268 + 32);
      if (v60 >= v59)
      {
        v62 = v271;
        v64 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - *v271) >> 3);
        v61 = v274;
        if (v64 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - *v271) >> 3);
        v66 = 2 * v65;
        if (2 * v65 <= v64 + 1)
          v66 = v64 + 1;
        if (v65 >= 0x333333333333333)
          v67 = 0x666666666666666;
        else
          v67 = v66;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)(*(_QWORD *)v268 + 40);
        if (v67)
          v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v67);
        else
          v68 = 0;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v67;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v67 + 40 * v64);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v67 + 40 * v68);
        std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>((uint64_t)buf.__begin_, (int *)&v293, (int *)&v292, (int *)&__str);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
        std::vector<ByteToken>::__swap_out_circular_buffer(v271, &buf);
        v63 = *(_QWORD *)(*(_QWORD *)v268 + 32);
        std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>(*(_QWORD *)(*(_QWORD *)v268 + 32), (int *)&v293, (int *)&v292, (int *)&__str);
        v61 = v274;
        v62 = v271;
        v63 = v60 + 40;
        *(_QWORD *)(*(_QWORD *)v268 + 32) = v63;
      }
      *(_QWORD *)(*(_QWORD *)v268 + 32) = v63;
      v267 = (std::vector<std::string> **)v279.i64[1];
      v272 = (std::vector<std::string> **)v279.i64[0];
      if (v279.i64[0] != v279.i64[1])
      {
        v269 = (uint64_t *)(v61 + 112);
        v276 = (sqlite3_stmt **)(v61 + 40);
        v265 = v61 + 144;
        v266 = v61 + 156;
        v264 = (_QWORD *)(v61 + 128);
        while (1)
        {
          v69 = (std::__shared_weak_count *)operator new(0x30uLL);
          v69->__shared_owners_ = 0;
          v69->__shared_weak_owners_ = 0;
          v69->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936648;
          v69[1].__shared_owners_ = 0;
          v69[1].__shared_weak_owners_ = 0;
          v69[1].__vftable = 0;
          v277 = &v69[1].__vftable;
          v278 = v69;
          v290 = *((_DWORD *)v272 + 4);
          memset(&v289, 0, sizeof(v289));
          v70 = (uint64_t *)*v272;
          std::string::basic_string[abi:ne180100]<0>(&buf, &byte_1DEBD87CE);
          UTFString::join<std::string,std::string>((uint64_t)&v288, *v70, v70[1], (uint64_t)&buf);
          if (SHIBYTE(buf.__end_) < 0)
            operator delete(buf.__first_);
          buf.__first_ = &v288;
          v71 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v269, (uint64_t *)&buf);
          if (v71)
          {
            v72 = (uint64_t *)v71[3];
            v73 = *(uint64_t **)(v274 + 168);
            if (v73 != v72)
            {
              v74 = (uint64_t *)v72[1];
              if (v74 != v73)
              {
                v75 = *v72;
                *(_QWORD *)(v75 + 8) = v74;
                *(_QWORD *)v72[1] = v75;
                v76 = *v73;
                *(_QWORD *)(v76 + 8) = v72;
                *v72 = v76;
                *v73 = (uint64_t)v72;
                v72[1] = (uint64_t)v73;
              }
            }
            std::string::operator=(&v289, (const std::string *)(v72 + 5));
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v77 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
            {
              v79 = &v288;
              if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v79 = (std::string *)v288.__r_.__value_.__r.__words[0];
              LODWORD(buf.__first_) = 136315138;
              *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v79;
              _os_log_impl(&dword_1DE3F6000, v77, OS_LOG_TYPE_DEBUG, "Found BBPE Cached entry: %s", (uint8_t *)&buf, 0xCu);
            }
            v80 = &v288;
            if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v80 = (std::string *)v288.__r_.__value_.__r.__words[0];
            Diagnostics::log(7, "Found BBPE Cached entry: %s", v78, v80);
            UTFString::split(&v293, &v289, 0x20u, 1);
            v81 = *(_QWORD *)v293.__r_.__value_.__l.__data_;
            v82 = *(_QWORD *)(v293.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v293.__r_.__value_.__l.__data_;
            if (v82)
            {
              LODWORD(v292.__r_.__value_.__l.__data_) = 0;
              if (0xAAAAAAAAAAAAAAABLL * (v82 >> 3) < 2)
LABEL_440:
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              v83 = 0;
              v58 = (uint64_t)(v277 + 2);
              v84 = 1;
              while (1)
              {
                LODWORD(v292.__r_.__value_.__l.__data_) = std::stoi((const std::string *)(v81 + 24 * v84), 0, 10);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(*(_QWORD *)(v293.__r_.__value_.__r.__words[0] + 8)
                              - *(_QWORD *)v293.__r_.__value_.__l.__data_) >> 3) <= v83)
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v85 = *(_QWORD *)v293.__r_.__value_.__l.__data_ + 24 * v83;
                v86 = *(char *)(v85 + 23);
                v87 = *(_QWORD *)v85;
                v88 = v86 < 0;
                if (v86 >= 0)
                  v87 = *(_QWORD *)v293.__r_.__value_.__l.__data_ + 24 * v83;
                v89 = *(unsigned __int8 *)(v85 + 23);
                if (v88)
                  v89 = *(_DWORD *)(v85 + 8);
                if (v89)
                {
                  v90 = 0;
                  data = 0;
                  do
                  {
                    ++data;
                    v92 = *(unsigned __int8 *)(v87 + v90);
                    v93 = (v92 + 62);
                    if (v92 <= 0xEF)
                      v94 = 2;
                    else
                      v94 = 3;
                    if (v92 <= 0xDF)
                      v95 = v94;
                    else
                      v95 = v94 + 1;
                    if (v93 >= 0x33)
                      v95 = 1;
                    v90 += v95;
                  }
                  while (v90 != v89);
                }
                else
                {
                  data = 0;
                }
                LODWORD(__str.__r_.__value_.__l.__data_) = data;
                v97 = v277[1];
                v96 = v277[2];
                if (v97 >= v96)
                {
                  v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v97 - *v277) >> 3);
                  v100 = v99 + 1;
                  if (v99 + 1 > 0x666666666666666)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v101 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v96 - *v277) >> 3);
                  if (2 * v101 > v100)
                    v100 = 2 * v101;
                  v102 = (std::string *)(v101 >= 0x333333333333333 ? 0x666666666666666 : v100);
                  buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v277 + 2);
                  if (v102)
                    v102 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>((unint64_t)v102);
                  else
                    v103 = 0;
                  buf.__first_ = v102;
                  buf.__begin_ = (std::string *)((char *)v102 + 40 * v99);
                  buf.__end_ = buf.__begin_;
                  buf.__end_cap_.__value_ = (std::string *)((char *)v102 + 40 * v103);
                  std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, v85, (int *)&v292, &v290, (int *)&__str);
                  buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
                  std::vector<ByteToken>::__swap_out_circular_buffer(v277, &buf);
                  v98 = v277[1];
                  std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
                  data = (int)__str.__r_.__value_.__l.__data_;
                }
                else
                {
                  std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)v277[1], v85, (int *)&v292, &v290, (int *)&__str);
                  v98 = v97 + 40;
                  v277[1] = v98;
                }
                v277[1] = v98;
                v290 += data;
                v83 += 2;
                v81 = *(_QWORD *)v293.__r_.__value_.__l.__data_;
                v104 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(*(_QWORD *)(v293.__r_.__value_.__r.__words[0] + 8)
                                - *(_QWORD *)v293.__r_.__value_.__l.__data_) >> 3);
                if (v104 <= v83)
                  break;
                LODWORD(v292.__r_.__value_.__l.__data_) = 0;
                v84 = v83 | 1;
                if (v104 <= (v83 | 1))
                  goto LABEL_440;
              }
            }
            v105 = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
            if (v293.__r_.__value_.__l.__size_)
            {
              v106 = (unint64_t *)(v293.__r_.__value_.__l.__size_ + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
LABEL_393:
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            goto LABEL_395;
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v108 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
          {
            v110 = &v288;
            if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)v288.__r_.__value_.__r.__words[0];
            LODWORD(buf.__first_) = 136315138;
            *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v110;
            _os_log_impl(&dword_1DE3F6000, v108, OS_LOG_TYPE_DEBUG, "Checked BBPE Cache: %s", (uint8_t *)&buf, 0xCu);
          }
          v111 = &v288;
          if ((v288.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v111 = (std::string *)v288.__r_.__value_.__r.__words[0];
          Diagnostics::log(7, "Checked BBPE Cache: %s", v109, v111);
          v112 = operator new(0x30uLL);
          v112[1] = 0;
          v112[2] = 0;
          *v112 = &off_1EA936808;
          v112[3] = 0;
          v113 = v112 + 3;
          v112[4] = 0;
          v112[5] = 0;
          v286 = v112 + 3;
          v287 = (std::__shared_weak_count *)v112;
          while (1)
          {
            v115 = *v272;
            v114 = v272[1];
            v284 = *v272;
            v285 = (std::__shared_weak_count *)v114;
            if (v114)
            {
              p_end = (unint64_t *)&v114->__end_;
              do
                v117 = __ldxr(p_end);
              while (__stxr(v117 + 1, p_end));
            }
            v118 = v287;
            v282 = v113;
            v283 = v287;
            if (v287)
            {
              p_shared_owners = (unint64_t *)&v287->__shared_owners_;
              do
                v120 = __ldxr(p_shared_owners);
              while (__stxr(v120 + 1, p_shared_owners));
            }
            v121 = v115->__begin_;
            v122 = (__int128 *)v115->__end_;
            v123 = (char *)v122 - (char *)v115->__begin_;
            v124 = 0xAAAAAAAAAAAAAAABLL * (v123 >> 3);
            if (v124 <= 1)
            {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)v113, v121, v122, v124);
LABEL_250:
              if (!v118)
                goto LABEL_256;
              goto LABEL_251;
            }
            if (v122 == (__int128 *)v121)
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            if (SHIBYTE(v121->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v293, v121->__r_.__value_.__l.__data_, v121->__r_.__value_.__l.__size_);
              v121 = v115->__begin_;
              v122 = (__int128 *)v115->__end_;
              v123 = (char *)v122 - (char *)v115->__begin_;
              v124 = 0xAAAAAAAAAAAAAAABLL * (v123 >> 3);
            }
            else
            {
              v125 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              v293.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v125;
            }
            if (v123 == 24)
            {
              v126 = 0;
              __p = 0;
LABEL_246:
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)v113, v121, v122, v124);
              goto LABEL_247;
            }
            if (v124 < 2)
LABEL_446:
              std::vector<int>::__throw_out_of_range[abi:ne180100]();
            v127 = 0;
            __p = 0;
            v126 = 0;
            v128 = *(float *)(v274 + 188);
            v129 = -1;
            v58 = 24;
            while (1)
            {
              v130 = (__int128 *)((char *)v121 + v58);
              if (*((char *)&v121->__r_.__value_.__r.__words[2] + v58 + 7) < 0)
              {
                std::string::__init_copy_ctor_external(&v292, *(const std::string::value_type **)v130, *((_QWORD *)v130 + 1));
              }
              else
              {
                v131 = *v130;
                v292.__r_.__value_.__r.__words[2] = *((_QWORD *)v130 + 2);
                *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v131;
              }
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v293.__r_.__value_.__l.__data_, (const void **)&v292.__r_.__value_.__l.__data_, (uint64_t)&buf);
              v132 = BBPEVocab::lookup(v276, (uint64_t)&buf);
              if (SHIBYTE(buf.__end_) < 0)
                operator delete(buf.__first_);
              if (v132 == -1)
                v133 = *(float *)(v274 + 188);
              else
                v133 = (float)v132;
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v292.__r_.__value_.__l.__data_);
              v134 = v127 + 1;
              if (v133 < v128 && v133 != *(float *)(v274 + 188))
              {
                if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v135 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
                else
                  v135 = v293.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&buf, v135 + 1);
                if (SHIBYTE(buf.__end_) >= 0)
                  p_buf = (std::__split_buffer<std::string>::pointer)&buf;
                else
                  p_buf = buf.__first_;
                if (v135)
                {
                  if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v137 = &v293;
                  else
                    v137 = (std::string *)v293.__r_.__value_.__r.__words[0];
                  memmove(p_buf, v137, v135);
                }
                *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v135) = 32;
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v115->__end_ - (char *)v115->__begin_) >> 3) <= v134)
                  std::vector<int>::__throw_out_of_range[abi:ne180100]();
                v138 = (uint64_t)v115->__begin_ + v58;
                v139 = *(char *)(v138 + 23);
                if (v139 >= 0)
                  v140 = (char *)v115->__begin_ + v58;
                else
                  v140 = *(const std::string::value_type **)v138;
                if (v139 >= 0)
                  v141 = *(unsigned __int8 *)(v138 + 23);
                else
                  v141 = *(_QWORD *)(v138 + 8);
                v142 = std::string::append((std::string *)&buf, v140, v141);
                v143 = (void *)v142->__r_.__value_.__r.__words[0];
                v144 = HIBYTE(v142->__r_.__value_.__r.__words[2]);
                v142->__r_.__value_.__r.__words[0] = 0;
                v142->__r_.__value_.__l.__size_ = 0;
                v142->__r_.__value_.__r.__words[2] = 0;
                if (v126 < 0)
                  operator delete(__p);
                if (SHIBYTE(buf.__end_) < 0)
                  operator delete(buf.__first_);
                v115 = v284;
                __p = v143;
                v126 = v144;
                v128 = v133;
                v129 = v127;
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v115->__end_ - (char *)v115->__begin_) >> 3) <= v134)
                std::vector<int>::__throw_out_of_range[abi:ne180100]();
              std::string::operator=(&v293, (const std::string *)((char *)v115->__begin_ + v58));
              v124 = v127 + 2;
              v121 = v115->__begin_;
              v122 = (__int128 *)v115->__end_;
              v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v115->__begin_) >> 3);
              if (v127 + 2 == v145)
                break;
              ++v127;
              v58 += 24;
              if (v145 <= v124)
                goto LABEL_446;
            }
            v113 = v282;
            if (v129 == -1)
              goto LABEL_246;
            std::vector<std::string>::__clear[abi:ne180100](v282);
            v146 = v115->__begin_;
            v147 = v115->__end_;
            if (v147 != v115->__begin_)
            {
              v148 = 0;
              LODWORD(v58) = 0;
              v149 = v129 + 1;
              do
              {
                v150 = v282;
                if ((_DWORD)v58 == v129)
                {
                  v151 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147 - (char *)v146) >> 3);
                  if (v151 <= v148 || v151 <= v149)
                    std::vector<int>::__throw_out_of_range[abi:ne180100]();
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v146[v148].__r_.__value_.__l.__data_, (const void **)&v146[(int)v149].__r_.__value_.__l.__data_, (uint64_t)&__str);
                  v153 = v150[2];
                  v154 = v150[1];
                  if (v154 >= v153)
                  {
                    v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - *v150) >> 3);
                    v161 = v160 + 1;
                    if (v160 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - *v150) >> 3);
                    if (2 * v162 > v161)
                      v161 = 2 * v162;
                    if (v162 >= 0x555555555555555)
                      v163 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v163 = v161;
                    buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v150 + 2);
                    if (v163)
                      v164 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v150 + 2), v163);
                    else
                      v164 = 0;
                    v165 = v164 + v160;
                    buf.__first_ = v164;
                    buf.__begin_ = v165;
                    buf.__end_cap_.__value_ = &v164[v163];
                    v166 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    v165->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v165->__r_.__value_.__l.__data_ = v166;
                    memset(&__str, 0, sizeof(__str));
                    buf.__end_ = v165 + 1;
                    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v150, &buf);
                    v156 = v150[1];
                    std::__split_buffer<std::string>::~__split_buffer(&buf);
                  }
                  else
                  {
                    v155 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v154 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                    *(_OWORD *)v154 = v155;
                    memset(&__str, 0, sizeof(__str));
                    v156 = v154 + 24;
                    v150[1] = v154 + 24;
                  }
                  v150[1] = v156;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  LODWORD(v58) = v129 + 1;
                }
                else
                {
                  v157 = (__int128 *)&v146[v148];
                  v158 = v282[1];
                  if (v158 >= v282[2])
                  {
                    v159 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v282, v157);
                  }
                  else
                  {
                    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v282, v157);
                    v159 = v158 + 24;
                  }
                  v150[1] = v159;
                }
                v58 = (v58 + 1);
                v148 = (int)v58;
                v146 = v284->__begin_;
                v147 = v284->__end_;
              }
              while (0xAAAAAAAAAAAAAAABLL * (((char *)v147 - (char *)v284->__begin_) >> 3) > (int)v58);
            }
LABEL_247:
            if (v126 < 0)
              operator delete(__p);
            if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_250;
            operator delete(v293.__r_.__value_.__l.__data_);
            if (!v118)
              goto LABEL_256;
LABEL_251:
            v167 = (unint64_t *)&v118->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
LABEL_256:
            v169 = v285;
            if (v285)
            {
              v170 = (unint64_t *)&v285->__shared_owners_;
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            v113 = v286;
            v172 = (__int128 *)v286[1];
            v173 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v172 - *v286) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)(*v272)->__end_ - (char *)(*v272)->__begin_) >> 3) == v173)
              break;
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(*v272, (std::string *)*v286, v172, v173);
          }
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          {
            *v289.__r_.__value_.__l.__data_ = 0;
            v289.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v289.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v289.__r_.__value_.__s + 23) = 0;
          }
          v175 = *v113;
          v174 = v113[1];
          if (*v113 != v174)
          {
            do
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = BBPEVocab::lookup(v276, v175);
              v176 = *(char *)(v175 + 23);
              v177 = *(unsigned __int8 **)v175;
              v178 = v176 < 0;
              if (v176 >= 0)
                v177 = (unsigned __int8 *)v175;
              v179 = *(unsigned __int8 *)(v175 + 23);
              if (v178)
                v179 = *(_DWORD *)(v175 + 8);
              if (v179)
              {
                v180 = 0;
                LODWORD(v58) = 0;
                do
                {
                  v58 = (v58 + 1);
                  v181 = v177[v180];
                  v182 = (v181 + 62);
                  if (v181 <= 0xEF)
                    v183 = 2;
                  else
                    v183 = 3;
                  if (v181 <= 0xDF)
                    v184 = v183;
                  else
                    v184 = v183 + 1;
                  if (v182 >= 0x33)
                    v184 = 1;
                  v180 += v184;
                }
                while (v180 != v179);
              }
              else
              {
                v58 = 0;
              }
              v281 = v58;
              v186 = v277[1];
              v185 = v277[2];
              if (v186 >= v185)
              {
                v188 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v186 - *v277) >> 3);
                v189 = v188 + 1;
                if (v188 + 1 > 0x666666666666666)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v190 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v185 - *v277) >> 3);
                if (2 * v190 > v189)
                  v189 = 2 * v190;
                if (v190 >= 0x333333333333333)
                  v191 = 0x666666666666666;
                else
                  v191 = v189;
                buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v277 + 2);
                if (v191)
                  v191 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v191);
                else
                  v192 = 0;
                buf.__first_ = (std::__split_buffer<std::string>::pointer)v191;
                buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v191 + 40 * v188);
                buf.__end_ = buf.__begin_;
                buf.__end_cap_.__value_ = (std::string *)(v191 + 40 * v192);
                std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, v175, (int *)&__str, &v290, (int *)&v281);
                buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
                std::vector<ByteToken>::__swap_out_circular_buffer(v277, &buf);
                v187 = v277[1];
                std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
                v58 = v281;
              }
              else
              {
                std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)v277[1], v175, (int *)&__str, &v290, (int *)&v281);
                v187 = v186 + 40;
                v277[1] = v187;
              }
              v277[1] = v187;
              v290 += v58;
              v193 = HIBYTE(v289.__r_.__value_.__r.__words[2]);
              if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v193 = v289.__r_.__value_.__l.__size_;
              if (v193)
                std::string::append(&v289, " ");
              if (*(char *)(v175 + 23) >= 0)
                v194 = *(unsigned __int8 *)(v175 + 23);
              else
                v194 = *(_QWORD *)(v175 + 8);
              std::string::basic_string[abi:ne180100]((uint64_t)&v293, v194 + 1);
              if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v195 = &v293;
              else
                v195 = (std::string *)v293.__r_.__value_.__r.__words[0];
              if (v194)
              {
                if (*(char *)(v175 + 23) >= 0)
                  v196 = (unsigned __int8 *)v175;
                else
                  v196 = *(unsigned __int8 **)v175;
                memmove(v195, v196, v194);
              }
              *(_WORD *)((char *)&v195->__r_.__value_.__l.__data_ + v194) = 32;
              std::to_string(&v292, (int)__str.__r_.__value_.__l.__data_);
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v197 = &v292;
              else
                v197 = (std::string *)v292.__r_.__value_.__r.__words[0];
              if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v198 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
              else
                v198 = v292.__r_.__value_.__l.__size_;
              v199 = std::string::append(&v293, (const std::string::value_type *)v197, v198);
              v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
              buf.__end_ = (std::__split_buffer<std::string>::pointer)v199->__r_.__value_.__r.__words[2];
              *(_OWORD *)&buf.__first_ = v200;
              v199->__r_.__value_.__l.__size_ = 0;
              v199->__r_.__value_.__r.__words[2] = 0;
              v199->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(buf.__end_) >= 0)
                first = (std::__split_buffer<std::string>::pointer)&buf;
              else
                first = buf.__first_;
              if (SHIBYTE(buf.__end_) >= 0)
                end_high = HIBYTE(buf.__end_);
              else
                end_high = (std::string::size_type)buf.__begin_;
              std::string::append(&v289, (const std::string::value_type *)first, end_high);
              if (SHIBYTE(buf.__end_) < 0)
                operator delete(buf.__first_);
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v292.__r_.__value_.__l.__data_);
              if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v293.__r_.__value_.__l.__data_);
              v175 += 24;
            }
            while (v175 != v174);
          }
          if (*(_QWORD *)(v274 + 104))
          {
            buf.__first_ = (std::__split_buffer<std::string>::pointer)&buf;
            buf.__begin_ = (std::__split_buffer<std::string>::pointer)&buf;
            buf.__end_ = 0;
            v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
            v203 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v269, (uint64_t *)&v293);
            if (v203)
            {
              v204 = (std::string *)v203[3];
              if (&buf != (std::__split_buffer<std::string> *)v204)
              {
                v205 = (std::__split_buffer<std::string> *)v204->__r_.__value_.__l.__size_;
                if (v205 != &buf)
                {
                  v206 = v204->__r_.__value_.__r.__words[0];
                  *(_QWORD *)(v206 + 8) = v205;
                  *(_QWORD *)v204->__r_.__value_.__l.__size_ = v206;
                  v207 = buf.__first_;
                  buf.__first_->__r_.__value_.__l.__size_ = (std::string::size_type)v204;
                  v204->__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
                  v204->__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
                  --*(_QWORD *)(v274 + 176);
                  buf.__first_ = v204;
                  ++buf.__end_;
                }
              }
              std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(v269, v203);
            }
            else
            {
              v208 = *(_QWORD *)(v274 + 176);
              if (v208 >= *(_QWORD *)(v274 + 104))
              {
                v209 = *(std::string **)(v274 + 160);
                if (&buf != (std::__split_buffer<std::string> *)v209)
                {
                  v210 = (std::__split_buffer<std::string> *)v209->__r_.__value_.__l.__size_;
                  if (v210 != &buf)
                  {
                    v211 = v209->__r_.__value_.__r.__words[0];
                    *(_QWORD *)(v211 + 8) = v210;
                    *(_QWORD *)v209->__r_.__value_.__l.__size_ = v211;
                    v212 = buf.__first_;
                    buf.__first_->__r_.__value_.__l.__size_ = (std::string::size_type)v209;
                    v209->__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
                    v209->__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
                    *(_QWORD *)(v274 + 176) = v208 - 1;
                    buf.__first_ = v209;
                    ++buf.__end_;
                  }
                }
                v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__begin_->__r_.__value_.__r.__words[2];
                v213 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::find<std::string const*>(v269, (uint64_t *)&v293);
                if (v213)
                  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::erase(v269, v213);
                std::string::operator=((std::string *)&buf.__begin_->__r_.__value_.__r.__words[2], &v288);
              }
              else
              {
                if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v293, v288.__r_.__value_.__l.__data_, v288.__r_.__value_.__l.__size_);
                else
                  v293 = v288;
                v214 = (char *)operator new(0x40uLL);
                v215 = v293.__r_.__value_.__l.__size_;
                v216 = *(std::string::size_type *)((char *)&v293.__r_.__value_.__r.__words[1] + 7);
                *((_QWORD *)v214 + 2) = v293.__r_.__value_.__r.__words[0];
                *((_QWORD *)v214 + 3) = v215;
                *(_QWORD *)(v214 + 31) = v216;
                v214[39] = HIBYTE(v293.__r_.__value_.__r.__words[2]);
                *((_QWORD *)v214 + 6) = 0;
                *((_QWORD *)v214 + 7) = 0;
                *((_QWORD *)v214 + 5) = 0;
                v217 = buf.__first_;
                *(_QWORD *)v214 = buf.__first_;
                *((_QWORD *)v214 + 1) = &buf;
                v217->__r_.__value_.__l.__size_ = (std::string::size_type)v214;
                buf.__first_ = (std::__split_buffer<std::string>::pointer)v214;
                ++buf.__end_;
              }
            }
            v218 = buf.__begin_;
            std::string::operator=((std::string *)((char *)buf.__begin_ + 40), &v289);
            v219 = (unsigned __int8 *)&v218->__r_.__value_.__s.__data_[16];
            v220 = std::__string_hash<char>::operator()[abi:ne180100](v265, (uint64_t)&v218->__r_.__value_.__r.__words[2]);
            v221 = v220;
            v222 = *(_QWORD *)(v274 + 120);
            if (v222)
            {
              v223 = (uint8x8_t)vcnt_s8((int8x8_t)v222);
              v223.i16[0] = vaddlv_u8(v223);
              v224 = v223.u32[0];
              if (v223.u32[0] > 1uLL)
              {
                v58 = v220;
                if (v220 >= v222)
                  v58 = v220 % v222;
              }
              else
              {
                v58 = (v222 - 1) & v220;
              }
              v225 = *(_QWORD **)(*v269 + 8 * v58);
              if (v225)
              {
                v226 = (_QWORD *)*v225;
                if (*v225)
                {
                  do
                  {
                    v227 = v226[1];
                    if (v227 == v221)
                    {
                      v228 = (unsigned __int8 *)v226[2];
                      if (v228 == v219
                        || (std::equal_to<std::string>::operator()[abi:ne180100](v266, v228, (unsigned __int8 *)&v218->__r_.__value_.__s.__data_[16]) & 1) != 0)
                      {
                        goto LABEL_386;
                      }
                    }
                    else
                    {
                      if (v224 > 1)
                      {
                        if (v227 >= v222)
                          v227 %= v222;
                      }
                      else
                      {
                        v227 &= v222 - 1;
                      }
                      if (v227 != v58)
                        break;
                    }
                    v226 = (_QWORD *)*v226;
                  }
                  while (v226);
                }
              }
            }
            v229 = operator new(0x20uLL);
            *v229 = 0;
            v229[1] = v221;
            v229[2] = v219;
            v229[3] = v218;
            v230 = (float)(unint64_t)(*(_QWORD *)(v274 + 136) + 1);
            v231 = *(float *)(v274 + 152);
            if (!v222 || (float)(v231 * (float)v222) < v230)
            {
              v232 = (v222 & (v222 - 1)) != 0;
              if (v222 < 3)
                v232 = 1;
              v233 = v232 | (2 * v222);
              v234 = vcvtps_u32_f32(v230 / v231);
              if (v233 <= v234)
                v235 = v234;
              else
                v235 = v233;
              std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,std::string>,void *>>>>::__rehash<true>((uint64_t)v269, v235);
              v222 = *(_QWORD *)(v274 + 120);
              if ((v222 & (v222 - 1)) != 0)
              {
                if (v221 >= v222)
                  v58 = v221 % v222;
                else
                  v58 = v221;
              }
              else
              {
                v58 = (v222 - 1) & v221;
              }
            }
            v236 = *v269;
            v237 = *(_QWORD **)(*v269 + 8 * v58);
            if (v237)
            {
              *v229 = *v237;
              goto LABEL_384;
            }
            *v229 = *v264;
            *v264 = v229;
            *(_QWORD *)(v236 + 8 * v58) = v264;
            if (*v229)
            {
              v238 = *(_QWORD *)(*v229 + 8);
              if ((v222 & (v222 - 1)) != 0)
              {
                if (v238 >= v222)
                  v238 %= v222;
              }
              else
              {
                v238 &= v222 - 1;
              }
              v237 = (_QWORD *)(*v269 + 8 * v238);
LABEL_384:
              *v237 = v229;
            }
            ++*(_QWORD *)(v274 + 136);
LABEL_386:
            v239 = *(std::__split_buffer<std::string>::pointer **)(v274 + 168);
            if (v239 != (std::__split_buffer<std::string>::pointer *)v218)
            {
              v240 = (std::__split_buffer<std::string>::pointer *)v218->__r_.__value_.__l.__size_;
              if (v240 != v239)
              {
                v241 = v218->__r_.__value_.__r.__words[0];
                *(_QWORD *)(v241 + 8) = v240;
                *(_QWORD *)v218->__r_.__value_.__l.__size_ = v241;
                v242 = (std::string::size_type)*v239;
                *(_QWORD *)(v242 + 8) = v218;
                v218->__r_.__value_.__r.__words[0] = v242;
                *v239 = v218;
                v218->__r_.__value_.__l.__size_ = (std::string::size_type)v239;
                --buf.__end_;
                ++*(_QWORD *)(v274 + 176);
              }
            }
            std::__list_imp<std::pair<std::string,std::string>>::clear((char *)&buf);
          }
          v105 = v287;
          if (v287)
          {
            v243 = (unint64_t *)&v287->__shared_owners_;
            do
              v107 = __ldaxr(v243);
            while (__stlxr(v107 - 1, v243));
            goto LABEL_393;
          }
LABEL_395:
          if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v288.__r_.__value_.__l.__data_);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v289.__r_.__value_.__l.__data_);
          v245 = (int *)*v277;
          v244 = (int *)v277[1];
          while (v245 != v244)
          {
            v246 = *v270;
            v247 = (*v270)[1];
            v248 = (*v270)[2];
            if (v247 >= v248)
            {
              v250 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v247 - *v246) >> 3);
              v251 = v250 + 1;
              if (v250 + 1 > 0x666666666666666)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v252 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v248 - *v246) >> 3);
              if (2 * v252 > v251)
                v251 = 2 * v252;
              if (v252 >= 0x333333333333333)
                v253 = 0x666666666666666;
              else
                v253 = v251;
              buf.__end_cap_.__value_ = (std::allocator<std::string> *)(*v270 + 2);
              if (v253)
                v253 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v253);
              else
                v254 = 0;
              buf.__first_ = (std::__split_buffer<std::string>::pointer)v253;
              buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v253 + 40 * v250);
              buf.__end_ = buf.__begin_;
              buf.__end_cap_.__value_ = (std::string *)(v253 + 40 * v254);
              std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>(buf.__begin_, (uint64_t)v245, v245 + 6, v245 + 7, v245 + 8);
              buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
              std::vector<ByteToken>::__swap_out_circular_buffer(v246, &buf);
              v249 = v246[1];
              std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
            }
            else
            {
              std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,std::string &,int &,int &,int &>((std::string *)(*v270)[1], (uint64_t)v245, v245 + 6, v245 + 7, v245 + 8);
              v249 = v247 + 40;
              v246[1] = v249;
            }
            v246[1] = v249;
            v245 += 10;
          }
          if (v278)
          {
            v255 = (unint64_t *)&v278->__shared_owners_;
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (!v256)
            {
              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
              std::__shared_weak_count::__release_weak(v278);
            }
          }
          v272 += 3;
          if (v272 == v267)
          {
            v62 = *v270;
            v63 = (*v270)[1];
            break;
          }
        }
      }
      LODWORD(v293.__r_.__value_.__l.__data_) = 0;
      LODWORD(v293.__r_.__value_.__l.__data_) = *(_DWORD *)(v63 - 8) + *(_DWORD *)(v63 - 12);
      LODWORD(v292.__r_.__value_.__l.__data_) = 2;
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      v257 = v62[2];
      if (v63 >= v257)
      {
        v259 = 0xCCCCCCCCCCCCCCCDLL * ((v62[1] - *v62) >> 3);
        if (v259 + 1 > 0x666666666666666)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v260 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v257 - *v62) >> 3);
        v261 = 2 * v260;
        if (2 * v260 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x333333333333333)
          v262 = 0x666666666666666;
        else
          v262 = v261;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v62 + 2);
        if (v262)
          v262 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned long,unsigned long>>>(v262);
        else
          v263 = 0;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v262;
        buf.__begin_ = (std::__split_buffer<std::string>::pointer)(v262 + 40 * v259);
        buf.__end_ = buf.__begin_;
        buf.__end_cap_.__value_ = (std::string *)(v262 + 40 * v263);
        std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>((uint64_t)buf.__begin_, (int *)&v292, (int *)&v293, (int *)&__str);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)((char *)buf.__end_ + 40);
        std::vector<ByteToken>::__swap_out_circular_buffer(v62, &buf);
        v258 = v62[1];
        std::__split_buffer<std::tuple<std::string,unsigned long,unsigned long>>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>(v63, (int *)&v292, (int *)&v293, (int *)&__str);
        v258 = v63 + 40;
        v62[1] = v63 + 40;
      }
      v62[1] = v258;
    }
    buf.__first_ = (std::__split_buffer<std::string>::pointer)&v279;
    std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
}

void sub_1DE9F446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  std::__list_imp<std::pair<std::string,std::string>>::clear((char *)(v47 - 160));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  *(_QWORD *)(v47 - 256) = &a25;
  std::vector<ByteChunk>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 256));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  _Unwind_Resume(a1);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int,int>(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  void *__p[2];
  uint64_t v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "BOS");
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v11 = SHIBYTE(v13);
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v13;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
  }
}

void sub_1DE9F485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator<ByteToken>::construct[abi:ne180100]<ByteToken,char const(&)[4],int,int &,int>(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  void *__p[2];
  uint64_t v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "EOS");
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v11 = SHIBYTE(v13);
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v13;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 28) = v9;
    *(_DWORD *)(a1 + 32) = v10;
  }
}

void sub_1DE9F4914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Tokenize_FallbackImpl::~Tokenize_FallbackImpl(UTFTransliterator **this)
{
  *this = (UTFTransliterator *)&off_1EA9200D0;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](this + 13, 0);
  FrontendModule::~FrontendModule((void **)this);
}

{
  *this = (UTFTransliterator *)&off_1EA9200D0;
  std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](this + 13, 0);
  FrontendModule::~FrontendModule((void **)this);
  JUMPOUT(0x1DF0ED014);
}

void Tokenize_FallbackImpl::generate_tokens(Tokenize_FallbackImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  std::string *p_str;
  uint64_t v11;
  std::string *v12;
  std::string::size_type size;
  const UChar *v14;
  int32_t v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string __str;
  _BYTE v34[32];
  __int128 v35;
  __int128 v36;
  std::basic_string<char16_t> v37;
  std::string v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v2 = (_QWORD *)((char *)this + 32);
  while (!*((_BYTE *)this + 8))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 16))(&v36, *((_QWORD *)this + 2), 0);
    v3 = v36;
    if ((_QWORD)v36)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      v4 = v36;
      if ((_QWORD *)(v4 + 8) != v5)
      {
        v6 = v5[5];
        if ((_QWORD *)(v4 + 8) != v7)
        {
          v8 = v7[5];
          v35 = 0u;
          memset(v34, 0, sizeof(v34));
          std::string::operator=((std::string *)&v34[24], (const std::string *)(v8 + 32));
          if (*(char *)(v8 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
          }
          else
          {
            v9 = *(_OWORD *)(v8 + 8);
            v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
          }
          Tokenize_FallbackImpl::filter_valid_phones(&__str, (uint64_t)this, (uint64_t)&v32);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__str.__r_.__value_.__l.__size_)
              goto LABEL_20;
            if (__str.__r_.__value_.__l.__size_ == 1)
            {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_19:
              if (p_str->__r_.__value_.__s.__data_[0] == 42)
                goto LABEL_20;
            }
LABEL_22:
            std::string::operator=((std::string *)v34, &__str);
          }
          else
          {
            if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 1)
              {
                p_str = &__str;
                goto LABEL_19;
              }
              goto LABEL_22;
            }
LABEL_20:
            if (*(char *)(v6 + 55) < 0)
              std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v6 + 32), *(_QWORD *)(v6 + 40));
            else
              v30 = *(std::string *)(v6 + 32);
            v11 = *((_QWORD *)this + 13);
            if (v11)
            {
              if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v12 = &v30;
              else
                v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
              if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
              else
                size = v30.__r_.__value_.__l.__size_;
              UTFString::to_utf16(&v37, (const char *)v12, size);
              UTFTransliterator::transliterate((std::basic_string<char16_t> *)&v38, v11, (const void **)&v37.__r_.__value_.__l.__data_);
              if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v37.__r_.__value_.__l.__data_);
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = (const UChar *)&v38;
              else
                v14 = (const UChar *)v38.__r_.__value_.__r.__words[0];
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
              else
                v15 = v38.__r_.__value_.__r.__words[1];
              UTFString::to_utf8(&v31, v14, v15);
              if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v38.__r_.__value_.__l.__data_);
            }
            else
            {
              v31 = v30;
              memset(&v30, 0, sizeof(v30));
            }
            if ((v34[23] & 0x80000000) != 0)
              operator delete(*(void **)v34);
            *(std::string *)v34 = v31;
            *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
            v31.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            if ((v34[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v34, *(std::string::size_type *)&v34[8]);
            else
              __p = *(std::string *)v34;
            Tokenize_FallbackImpl::filter_valid_phones(&v38, (uint64_t)this, (uint64_t)&__p);
            if ((v34[23] & 0x80000000) != 0)
              operator delete(*(void **)v34);
            *(std::string *)v34 = v38;
            *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
            v38.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            MEMORY[0x1DF0ECA80](&v34[24], &byte_1DEBD87CE);
          }
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
          v17 = v16[5];
          if (v17)
          {
            Agglomerate::ItemHolder<TokenFallbackItem>::ItemHolder((uint64_t)&v38, (__int128 *)v34);
            v18 = (void **)(v17 + 8);
            if (*(char *)(v17 + 31) < 0)
              operator delete(*v18);
            v19 = *(_OWORD *)&v38.__r_.__value_.__r.__words[1];
            *(_QWORD *)(v17 + 24) = v39;
            *(_OWORD *)v18 = v19;
            HIBYTE(v39) = 0;
            v38.__r_.__value_.__s.__data_[8] = 0;
            v20 = (void **)(v17 + 32);
            if (*(char *)(v17 + 55) < 0)
            {
              operator delete(*v20);
              v24 = SHIBYTE(v39);
              v25 = v41;
              *(_OWORD *)v20 = v40;
              *(_QWORD *)(v17 + 48) = v25;
              HIBYTE(v41) = 0;
              LOBYTE(v40) = 0;
              v38.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1EA922F88;
              if (v24 < 0)
                operator delete((void *)v38.__r_.__value_.__l.__size_);
            }
            else
            {
              v21 = v40;
              *(_QWORD *)(v17 + 48) = v41;
              *(_OWORD *)v20 = v21;
            }
          }
          else
          {
            v22 = operator new();
            Agglomerate::ItemHolder<TokenFallbackItem>::ItemHolder(v22, (__int128 *)v34);
            v23 = v16[5];
            v16[5] = v22;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          }
          std::deque<std::shared_ptr<Agglomerate>>::push_back(v2, &v36);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v35) < 0)
            operator delete(*(void **)&v34[24]);
          if ((v34[23] & 0x80000000) != 0)
            operator delete(*(void **)v34);
        }
      }
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_73;
    v27 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v3)
        return;
    }
    else
    {
LABEL_73:
      if (!v3)
        return;
    }
  }
}

void sub_1DE9F4E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  uint64_t v39;

  if (a38 < 0)
    operator delete(__p);
  std::pair<std::string,std::string>::~pair((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 184);
  _Unwind_Resume(a1);
}

void Tokenize_FallbackImpl::filter_valid_phones(std::string *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const char *v6;
  unint64_t v7;
  std::basic_string<char16_t> *v8;
  std::basic_string<char16_t>::size_type size;
  uint64_t v10;
  int32_t v11;
  std::basic_string<char16_t>::size_type v12;
  std::basic_string<char16_t> *p_p;
  int32_t v14;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> v16;

  if (*(_QWORD *)(a2 + 112))
  {
    v5 = *(char *)(a3 + 23);
    if (v5 >= 0)
      v6 = (const char *)a3;
    else
      v6 = *(const char **)a3;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a3 + 23);
    else
      v7 = *(_QWORD *)(a3 + 8);
    v8 = &v16;
    UTFString::to_utf16(&v16, v6, v7);
    memset(&__p, 0, sizeof(__p));
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      size = v16.__r_.__value_.__l.__size_;
      v8 = (std::basic_string<char16_t> *)v16.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      v10 = 2 * size;
      do
      {
        if (MEMORY[0x1DF0EE010](*(_QWORD *)(a2 + 112), (unsigned __int16)v8->__r_.__value_.__s.__data_[0]))std::basic_string<char16_t>::push_back(&__p, v8->__r_.__value_.__s.__data_[0]);
        v8 = (std::basic_string<char16_t> *)((char *)v8 + 2);
        v10 -= 2;
      }
      while (v10);
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v12 = __p.__r_.__value_.__r.__words[0];
      LODWORD(size) = __p.__r_.__value_.__r.__words[1];
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    if ((v11 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (std::basic_string<char16_t> *)v12;
    if ((v11 & 0x80u) == 0)
      v14 = v11;
    else
      v14 = size;
    UTFString::to_utf8(a1, (const UChar *)p_p, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
}

void sub_1DE9F5034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenFallbackItem>::ItemHolder(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1EA922F88;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1DE9F50F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t Agglomerate::ItemHolder<TokenFallbackItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922F88;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void Agglomerate::ItemHolder<TokenFallbackItem>::~ItemHolder(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA922F88;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1DF0ED014);
}

void std::basic_string<char16_t>::push_back(std::basic_string<char16_t> *this, std::basic_string<char16_t>::value_type __c)
{
  std::basic_string<char16_t>::size_type v2;
  std::basic_string<char16_t>::size_type v3;
  std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::value_type *v8;

  v5 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 10)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v6 = 10;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v6)
  {
LABEL_5:
    std::basic_string<char16_t>::__grow_by(this, v6, 1uLL, v6, v6, v2, v3);
    size = v6;
  }
  v5->__r_.__value_.__l.__size_ = size + 1;
  v5 = (std::basic_string<char16_t> *)v5->__r_.__value_.__r.__words[0];
LABEL_8:
  v8 = (std::basic_string<char16_t>::value_type *)((char *)v5 + 2 * size);
  *v8 = __c;
  v8[1] = 0;
}

UTFTransliterator *std::unique_ptr<UTFTransliterator>::reset[abi:ne180100](UTFTransliterator **a1, UTFTransliterator *a2)
{
  UTFTransliterator *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    UTFTransliterator::~UTFTransliterator(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char [18]>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;

  v1 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return v1;
  v3 = a1 + 8;
  do
  {
    v4 = std::string::compare((const std::string *)(v2 + 32), "tokenize_fallback");
    v5 = (uint64_t *)(v2 + 8);
    if (v4 >= 0)
    {
      v5 = (uint64_t *)v2;
      v3 = v2;
    }
    v2 = *v5;
  }
  while (*v5);
  if (v3 == v1 || std::string::compare((const std::string *)(v3 + 32), "tokenize_fallback") >= 1)
    return v1;
  return v3;
}

void std::__shared_ptr_emplace<Tokenize_FallbackImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Tokenize_FallbackImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<Tokenize_FallbackImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SoundStormInference::inference(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  std::chrono::steady_clock::time_point v17;
  std::chrono::steady_clock::time_point v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint8_t buf[8];
  std::__shared_weak_count *v48;
  uint8_t v49[4];
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "SoundStorm inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "SoundStorm inference begin.", v7);
  v8 = (char *)operator new(0x48uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA932CC0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((_WORD *)v8 + 12) = 257;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_DWORD *)v8 + 14) = 0;
  *(_QWORD *)buf = v8 + 24;
  v48 = (std::__shared_weak_count *)v8;
  v9 = (std::__shared_weak_count *)a2[1];
  v45 = *a2;
  v46 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[1])(a1, &v45);
  v12 = v46;
  if (v46)
  {
    v13 = (unint64_t *)&v46->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[1] + 48))(a1[1]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v16 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)v49 = 134217984;
    v50 = (double)((v17.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v16, OS_LOG_TYPE_DEFAULT, "SoundStorm inference time: %.3f s", v49, 0xCu);
  }
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "SoundStorm inference time: %.3f s", v19, (double)((v18.__d_.__rep_ - v15.__d_.__rep_) / 1000000) / 1000.0);
  v43 = *(_QWORD *)buf;
  v44 = v48;
  if (v48)
  {
    v20 = (unint64_t *)&v48->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[3])(a1, &v43);
  v22 = v44;
  if (v44)
  {
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD *))(*a1[1] + 56))(a1[1]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "SoundStorm inference end.", v49, 2u);
  }
  Diagnostics::log(7, "SoundStorm inference end.", v26);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  v28 = os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT);
  v30 = *(_QWORD *)buf;
  if (v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 16) - *(_QWORD *)(*(_QWORD *)buf + 8)) >> 3);
    *(_DWORD *)v49 = 134217984;
    v50 = *(double *)&v31;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_DEFAULT, "SoundStorm generates acoustic tokens of length %zu", v49, 0xCu);
  }
  Diagnostics::log(5, "SoundStorm generates acoustic tokens of length %zu", v29, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 3));
  v41 = v30;
  v42 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(_QWORD *)(a3 + 24);
  if (!v34)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v41);
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v48;
  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1DE9F5864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SoundStormInference::prepare_inputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int *v4;
  int *v5;
  void (***v6)(_QWORD, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *__p;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  void **v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(int **)(*a2 + 8);
  v5 = *(int **)(v3 + 16);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>((char *)&v24, v4, v5, v5 - v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_semantic");
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v27 = (void **)&v17;
  v28 = 0;
  v17 = (uint64_t *)operator new(0x18uLL);
  v18 = v17;
  v19 = v17 + 3;
  v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v19, (uint64_t)&v29, (uint64_t)&v32, v17);
  InferenceEngine::DataTensor::build_from_2d_array<float>(&v17, &v22);
  v27 = (void **)&v17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v21 < 0)
    operator delete(__p);
  v6 = *(void (****)(_QWORD, uint64_t *))(a1 + 8);
  v15 = v22;
  v16 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  (**v6)(v6, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1DE9F5A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SoundStormInference::get_outputs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void **v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  InferenceEngine::DataTensor *v24;
  std::__shared_weak_count *v25;
  void ***v26;

  v4 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_tokens");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 32))(&v24, v4, __p);
  if (v23 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v24, v18);
  v20 = 0;
  v21 = 0;
  v19 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v19, (uint64_t)*v18[0], (uint64_t)v18[0][1], 0xAAAAAAAAAAAAAAABLL * (((char *)v18[0][1] - (char *)*v18[0]) >> 3));
  v26 = v18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v5 = *a2;
  v6 = (uint64_t *)(*a2 + 8);
  if (v6 != &v19)
  {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)v6, v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
    v5 = *a2;
  }
  v7 = (std::__shared_weak_count *)a2[1];
  v16 = v5;
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *, uint64_t *))(*a1 + 32))(a1, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v18[0] = (void **)&v19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v18);
  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1DE9F5CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  a11 = (void **)&a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v14 - 56);
  _Unwind_Resume(a1);
}

void sub_1DE9F5D08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE9F5D00);
}

void SoundStormInference::check_outputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int parameter_value;
  float **v7;
  float **v8;
  uint64_t v9;
  float *i;
  float v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t *v18;
  uint64_t *j;
  uint64_t k;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  void *__p[2];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
  parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v5 + 8), (const void **)__p, 1024);
  v7 = *(float ***)(v4 + 8);
  v8 = *(float ***)(v4 + 16);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      for (i = *v7; i != v7[1]; ++i)
      {
        v11 = *i;
        if (v11 == (float)parameter_value)
          v9 = (v9 + 1);
        else
          v9 = v9;
      }
      v7 += 3;
    }
    while (v7 != v8);
  }
  if (v26 < 0)
    operator delete(__p[0]);
  if ((int)v9 >= 1)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v12 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
      v14 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v13 + 8), (const void **)__p, 1024);
      *(_DWORD *)buf = 67109376;
      v22 = v9;
      v23 = 1024;
      v24 = v14;
      _os_log_impl(&dword_1DE3F6000, v12, OS_LOG_TYPE_ERROR, "Found %d appearances of invalid value %d", buf, 0xEu);
      if (v26 < 0)
        operator delete(__p[0]);
    }
    v15 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "vq_mask_id");
    v16 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v15 + 8), (const void **)__p, 1024);
    Diagnostics::log(3, "Found %d appearances of invalid value %d", v17, v9, v16);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  v18 = *(uint64_t **)(*a2 + 8);
  for (j = *(uint64_t **)(*a2 + 16); v18 != j; v18 += 3)
  {
    for (k = *v18; k != v18[1]; k += 4)
      ;
  }
}

void sub_1DE9F5FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoundStormBaseInference::prepare_inputs(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void (***v8)(_QWORD, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***v15)(_QWORD, uint64_t *);
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v26[0] = *a2;
  v26[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SoundStormInference::prepare_inputs((uint64_t)a1, v26);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = (void (***)(_QWORD, uint64_t *))a1[1];
  v9 = (std::__shared_weak_count *)a1[4];
  v24 = a1[3];
  v25 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (**v8)(v8, &v24);
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (void (***)(_QWORD, uint64_t *))a1[1];
  v16 = (std::__shared_weak_count *)a1[6];
  v22 = a1[5];
  v23 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  (**v15)(v15, &v22);
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DE9F6158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SoundStormModule::~SoundStormModule(SoundStormModule *this)
{
  SoundStormModule::~SoundStormModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91EA20;
  std::mutex::~mutex((std::mutex *)((char *)this + 328));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 39, *((unsigned __int8 *)this + 304));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

void SoundStormModule::prepare(SoundStormModule *this)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  unint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  int v18;
  unsigned int v19;
  void *__p[2];
  char v21;
  uint8_t buf[8];
  void *v23;
  char *v24;
  std::__shared_weak_count *v25;

  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = (char *)operator new(0x80uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1EA933078;
  *((_QWORD *)v4 + 3) = 257;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v24 = v4 + 24;
  v25 = (std::__shared_weak_count *)v4;
  *(_DWORD *)buf = 0;
  std::vector<int>::resize((std::vector<int> *)(v4 + 32), 0x64uLL, (std::vector<int>::const_reference)buf);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_embd");
  v19 = 512;
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 304, (const void **)__p, &v19);
  v18 = 0;
  std::vector<float>::vector(buf, v6, &v18);
  std::vector<std::vector<float>>::resize((uint64_t *)v4 + 10, 0x64uLL, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    v23 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v21 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_embd");
  v19 = 512;
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)this + 304, (const void **)__p, &v19);
  v18 = 0;
  std::vector<float>::vector(buf, v7, &v18);
  std::vector<std::vector<float>>::resize((uint64_t *)v4 + 13, 1uLL, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    v23 = *(void **)buf;
    operator delete(*(void **)buf);
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v8 = *((_QWORD *)this + 34);
  v16 = v4 + 24;
  v17 = (std::__shared_weak_count *)v4;
  do
    v9 = __ldxr(v5);
  while (__stxr(v9 + 1, v5));
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v8 + 8))(v8, &v16);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1DE9F6428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

void SoundStormModule::clean_up(SoundStormModule *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 34) + 16))(*((_QWORD *)this + 34));
  Module::clean_up(this);
}

void SoundStormModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  float v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***v17)(_QWORD, uint64_t *, _BYTE *);
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint8_t buf[4];
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v34 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v35 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_DEFAULT, "SoundStorm module start.", buf, 2u);
  }
  Diagnostics::log(5, "SoundStorm module start.", v9);
  std::mutex::lock((std::mutex *)(a1 + 328));
  *(_BYTE *)(a1 + 320) = 1;
  *(_DWORD *)buf = 0;
  v10 = a2[1];
  v31 = *a2;
  v32 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &v31);
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(float *)buf = v13;
  v17 = *(void (****)(_QWORD, uint64_t *, _BYTE *))(a1 + 272);
  v29 = v34;
  v30 = v35;
  if (v35)
  {
    v18 = (unint64_t *)&v35->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v37 = 0;
  v20 = operator new(0x20uLL);
  *v20 = &off_1EA92F670;
  v20[1] = a1;
  v20[2] = a2;
  v20[3] = buf;
  v37 = v20;
  (**v17)(v17, &v29, v36);
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
    goto LABEL_23;
  }
  if (v37)
  {
    v22 = 5;
LABEL_23:
    (*(void (**)(_QWORD *))(*v21 + 8 * v22))(v21);
  }
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 328));
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1DE9F6768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

float SoundStormModule::get_current_rate(uint64_t a1, uint64_t *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  float j;
  _DWORD *v14;
  _DWORD *i;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _BYTE buf[22];
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(float *)(*(_QWORD *)(a1 + 288) + 4);
  v4 = *a2;
  {
    j = -1.0;
    goto LABEL_34;
  }
  v7 = *(_QWORD **)(*(_QWORD *)v5 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  *(_QWORD *)buf = v7;
  *(_QWORD *)&buf[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  SharedObjectPool::get_if<TTSSynthesizer::VoiceDescription>(&v28, *(_QWORD *)(a1 + 168));
  if (!v28)
  {
    v10 = (_QWORD *)*v7;
    goto LABEL_17;
  }
  v10 = (_QWORD *)*v7;
  if (*(_DWORD *)(v28 + 60) != 3 || 0x84BDA12F684BDA13 * ((uint64_t)(v7[1] - (_QWORD)v10) >> 3) < 2)
  {
LABEL_17:
    j = -1.0;
    if ((_QWORD *)v7[1] != v10)
    {
      v14 = (_DWORD *)v10[9];
      for (i = (_DWORD *)v10[10]; v14 != i; v14 += 14)
      {
        if (*v14 == 1)
        {
          j = -1.0;
        }
        else if (*v14 == 5)
        {
          j = (float)(int)v14[1] / 100.0;
        }
      }
    }
    goto LABEL_24;
  }
  v11 = (_DWORD *)v10[36];
  v12 = (_DWORD *)v10[37];
  for (j = -1.0; v11 != v12; v11 += 14)
  {
    if (*v11 == 1)
    {
      j = -1.0;
    }
    else if (*v11 == 5)
    {
      j = (float)(int)v11[1] / 100.0;
    }
  }
LABEL_24:
  v16 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_34:
  if (j > 0.0)
    v3 = j;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v22 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    v24 = *(float *)(*(_QWORD *)(a1 + 288) + 4);
    v25 = j;
    v26 = v3;
    *(_DWORD *)buf = 134218496;
    *(double *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v25;
    v31 = 2048;
    v32 = v3;
    _os_log_impl(&dword_1DE3F6000, v22, OS_LOG_TYPE_INFO, "Global rate %f, marker rate %f, final rate is set to %f", buf, 0x20u);
  }
  else
  {
    v25 = j;
    v26 = v3;
  }
  Diagnostics::log(6, "Global rate %f, marker rate %f, final rate is set to %f", v23, *(float *)(*(_QWORD *)(a1 + 288) + 4), *(_QWORD *)&v25, *(_QWORD *)&v26);
  return v3;
}

void sub_1DE9F6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA92F670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA92F670;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::operator()(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  _BYTE *v3;
  NSObject *v4;
  const char *v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  float v33;
  float *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  __int128 v44;
  __int128 buf;
  std::__shared_weak_count *v46;
  void *v47;

  v2 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v44 = *a2;
  *((_QWORD *)&v44 + 1) = v2;
  *a2 = 0;
  a2[1] = 0;
  v3 = (_BYTE *)a1[1];
  if (v3[160])
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "SoundStorm inference cancelled.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "SoundStorm inference cancelled.", v5, (_QWORD)v44);
    if (!v2)
      return 1;
LABEL_47:
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    return 1;
  }
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  *(_OWORD *)&v7->__shared_owners_ = 0u;
  v8 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
  *(_OWORD *)&v7[1].__shared_owners_ = 0u;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&v7[1].__shared_owners_;
  v9 = (uint64_t)&v7[1];
  v10 = (uint64_t *)a1[2];
  v11 = *v10;
  {
    v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    v13 = *(std::__shared_weak_count **)(*(_QWORD *)v12 + 16);
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)&buf = &v47;
    v18 = v17[5];
    if (v18)
    {
      *(_QWORD *)&buf = &off_1EA923288;
      *((_QWORD *)&buf + 1) = v14;
      v46 = v13;
      if (v13)
      {
        v19 = (unint64_t *)&v13->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v18 + 8, (__int128 *)((char *)&buf + 8));
      *(_QWORD *)&buf = &off_1EA923288;
      v21 = v46;
      if (v46)
      {
        v22 = (unint64_t *)&v46->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      v24 = (_QWORD *)operator new();
      *v24 = &off_1EA923288;
      v24[1] = v14;
      v24[2] = v13;
      if (v13)
      {
        v25 = (unint64_t *)&v13->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v17[5];
      v17[5] = (uint64_t)v24;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if (v13)
    {
      v28 = (unint64_t *)&v13->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v30 = (float *)a1[3];
  if (*v30 != 1.0)
  {
    v31 = (std::__shared_weak_count *)operator new(0x30uLL);
    v31->__shared_owners_ = 0;
    v32 = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9364F8;
    v31[1].__shared_owners_ = 0;
    v31[1].__shared_weak_owners_ = 0;
    v31[1].__vftable = 0;
    *(_QWORD *)&buf = v31 + 1;
    *((_QWORD *)&buf + 1) = v31;
    v33 = *v30;
    v34 = (float *)operator new(8uLL);
    *v34 = 0.0;
    v34[1] = v33;
    v31[1].__shared_owners_ = (uint64_t)(v34 + 2);
    v31[1].__shared_weak_owners_ = (uint64_t)(v34 + 2);
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)v34;
    Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v9, &buf);
    do
      v35 = __ldaxr(v32);
    while (__stlxr(v35 - 1, v32));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  Agglomerate::set<std::shared_ptr<AcousticFeature>>(v9, &v44);
  *(_QWORD *)&buf = v7 + 1;
  *((_QWORD *)&buf + 1) = v7;
  do
    v36 = __ldxr(v8);
  while (__stxr(v36 + 1, v8));
  (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v3 + 72))(v3, &buf);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  do
    v40 = __ldaxr(v8);
  while (__stlxr(v40 - 1, v8));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
    goto LABEL_47;
  return 1;
}

void sub_1DE9F6F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  do
    v17 = __ldaxr(v14);
  while (__stlxr(v17 - 1, v14));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::target_type()
{
}

void std::__shared_ptr_emplace<SemanticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SemanticFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<SemanticFeature>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 104);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void SoundStormStreamingModule::~SoundStormStreamingModule(SoundStormStreamingModule *this)
{
  *(_QWORD *)this = &off_1EA90A708;
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  SoundStormModule::~SoundStormModule(this);
}

{
  *(_QWORD *)this = &off_1EA90A708;
  std::mutex::~mutex((std::mutex *)((char *)this + 400));
  SoundStormModule::~SoundStormModule(this);
  JUMPOUT(0x1DF0ED014);
}

void SoundStormStreamingModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  float v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  void (***v19)(_QWORD, uint64_t *, _BYTE *);
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  float v35;
  uint8_t buf[4];
  uint64_t v37;
  std::__shared_weak_count *v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v37 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v38 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v8 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v8, OS_LOG_TYPE_DEFAULT, "SoundStorm streaming module start.", buf, 2u);
  }
  Diagnostics::log(5, "SoundStorm streaming module start.", v9);
  std::mutex::lock((std::mutex *)(a1 + 400));
  *(_BYTE *)(a1 + 392) = 1;
  v10 = *(_DWORD *)(a1 + 464);
  v35 = 0.0;
  *(_DWORD *)buf = v10;
  v11 = a2[1];
  v33 = *a2;
  v34 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(a1, &v33);
  v15 = v34;
  if (v34)
  {
    v16 = (unint64_t *)&v34->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v35 = v14;
  if (v14 != 1.0)
  {
    v18 = *(_DWORD *)buf;
    if (*(int *)buf <= 5)
      v18 = 5;
    *(_DWORD *)buf = v18;
  }
  v19 = *(void (****)(_QWORD, uint64_t *, _BYTE *))(a1 + 272);
  v31 = v37;
  v32 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v40 = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_1EA90AE90;
  v22[1] = a1;
  v22[2] = buf;
  v22[3] = a2;
  v22[4] = &v35;
  v40 = v22;
  (**v19)(v19, &v31, v39);
  v23 = v40;
  if (v40 == v39)
  {
    v24 = 4;
    v23 = v39;
    goto LABEL_27;
  }
  if (v40)
  {
    v24 = 5;
LABEL_27:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 400));
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1DE9F7530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  std::mutex *v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::mutex::unlock(v21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1EA90AE90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA90AE90;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  const char *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  float *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  float v38;
  float *v39;
  unint64_t v40;
  char *v41;
  int v42;
  int v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  int *v52;
  int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  int *v59;
  int v60;
  NSObject *v61;
  int *v62;
  int *v63;
  std::string *v64;
  int *v65;
  int *v66;
  const char *v67;
  std::string *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  std::string v78;
  void *__p;
  int *v80;
  int *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  __int128 buf;
  std::__shared_weak_count *v91;
  uint8_t v92[4];
  int v93;
  __int16 v94;
  std::string *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 160))
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v4 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1DE3F6000, v4, OS_LOG_TYPE_DEFAULT, "SoundStorm streaming inference cancelled.", (uint8_t *)&buf, 2u);
    }
    Diagnostics::log(5, "SoundStorm streaming inference cancelled.", v5);
  }
  else
  {
    v74 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v2 + 8))
    {
      v10 = 0;
      v11 = 0;
      v73 = v3;
      v75 = v2;
      do
      {
        v12 = (std::__shared_weak_count *)operator new(0x30uLL);
        *(_OWORD *)&v12->__shared_owners_ = 0u;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
        *(_OWORD *)&v12[1].__shared_owners_ = 0u;
        v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1].__shared_owners_;
        v14 = (uint64_t)&v12[1];
        v15 = *(uint64_t **)(a1 + 24);
        v16 = *v15;
        {
          v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
          v19 = *(std::__shared_weak_count **)(*(_QWORD *)v17 + 16);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          *(_QWORD *)&buf = &v89;
          v23 = v22[5];
          if (v23)
          {
            *(_QWORD *)&buf = &off_1EA923288;
            *((_QWORD *)&buf + 1) = v18;
            v91 = v19;
            if (v19)
            {
              v24 = (unint64_t *)&v19->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v23 + 8, (__int128 *)((char *)&buf + 8));
            *(_QWORD *)&buf = &off_1EA923288;
            v26 = v91;
            if (v91)
            {
              v27 = (unint64_t *)&v91->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
          }
          else
          {
            v29 = (_QWORD *)operator new();
            *v29 = &off_1EA923288;
            v29[1] = v18;
            v29[2] = v19;
            if (v19)
            {
              v30 = (unint64_t *)&v19->__shared_owners_;
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            v32 = v22[5];
            v22[5] = (uint64_t)v29;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          }
          if (v19)
          {
            v33 = (unint64_t *)&v19->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
        v35 = *(float **)(a1 + 32);
        if (*v35 != 1.0)
        {
          v36 = (std::__shared_weak_count *)operator new(0x30uLL);
          v36->__shared_owners_ = 0;
          v37 = (unint64_t *)&v36->__shared_owners_;
          v36->__shared_weak_owners_ = 0;
          v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9364F8;
          v36[1].__shared_owners_ = 0;
          v36[1].__shared_weak_owners_ = 0;
          v36[1].__vftable = 0;
          *(_QWORD *)&buf = v36 + 1;
          *((_QWORD *)&buf + 1) = v36;
          v38 = *v35;
          v39 = (float *)operator new(8uLL);
          *v39 = 0.0;
          v39[1] = v38;
          v36[1].__shared_owners_ = (uint64_t)(v39 + 2);
          v36[1].__shared_weak_owners_ = (uint64_t)(v39 + 2);
          v36[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
          Agglomerate::set<std::shared_ptr<std::vector<RateMarker>>>(v14, &buf);
          do
            v40 = __ldaxr(v37);
          while (__stlxr(v40 - 1, v37));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v86 = 0;
        v87 = 0;
        v85 = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v85, *(_QWORD *)(v75 + 8), *(_QWORD *)(v75 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 3));
        v41 = (char *)operator new(0x48uLL);
        *((_QWORD *)v41 + 1) = 0;
        *((_QWORD *)v41 + 2) = 0;
        *(_QWORD *)v41 = &off_1EA932CC0;
        *(_OWORD *)(v41 + 40) = 0u;
        *(_OWORD *)(v41 + 56) = 0u;
        *(_OWORD *)(v41 + 24) = 0u;
        *((_QWORD *)v41 + 4) = 0;
        *((_WORD *)v41 + 12) = 257;
        *((_QWORD *)v41 + 5) = 0;
        *((_QWORD *)v41 + 6) = 0;
        *((_DWORD *)v41 + 14) = 0;
        *(_QWORD *)&v84 = v41 + 24;
        *((_QWORD *)&v84 + 1) = v41;
        v42 = -1431655765 * ((unint64_t)(v86 - v85) >> 3);
        if (**(_DWORD **)(a1 + 16) + (int)v11 + 1 < v42)
          v42 = **(_DWORD **)(a1 + 16) + v11 + 1;
        v91 = 0;
        buf = 0uLL;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(&buf, v85 + 24 * v10, v85 + 24 * v42, v42 - v10);
        std::vector<std::vector<int>>::__vdeallocate((uint64_t *)v41 + 4);
        *((_OWORD *)v41 + 2) = buf;
        *((_QWORD *)v41 + 6) = v91;
        v91 = 0;
        buf = 0uLL;
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
        *((_DWORD *)v41 + 14) = v11;
        v43 = **(_DWORD **)(a1 + 16);
        v41[60] = (int)v11 < v43;
        v41[61] = 0xAAAAAAAAAAAAAAABLL * ((v86 - v85) >> 3) <= v43 + (int)v11 + 1;
        *((_DWORD *)v41 + 16) = -1431655765 * ((*((_QWORD *)v41 + 5) - *((_QWORD *)v41 + 4)) >> 3);
        Agglomerate::set<std::shared_ptr<AcousticFeature>>(v14, &v84);
        v82 = v12 + 1;
        v83 = v12;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        (*(void (**)(uint64_t, std::__shared_weak_count **))(*(_QWORD *)v74 + 72))(v74, &v82);
        v45 = v83;
        if (v83)
        {
          v46 = (unint64_t *)&v83->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if ((_DWORD)v11 == **(_DWORD **)(a1 + 16)
                          * (0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 3)
                                         / (2
                                          * **(int **)(a1 + 16))))
        {
          __p = 0;
          v80 = 0;
          v81 = 0;
          v48 = v84;
          if (*(int *)(v84 + 40) >= 1)
          {
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = (int)**(float **)(*(_QWORD *)(v48 + 8) + 24 * v50);
              if (v49 >= v81)
              {
                v53 = (int *)__p;
                v54 = ((char *)v49 - (_BYTE *)__p) >> 2;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v56 = (char *)v81 - (_BYTE *)__p;
                if (((char *)v81 - (_BYTE *)__p) >> 1 > v55)
                  v55 = v56 >> 1;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                  v57 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v57);
                  v53 = (int *)__p;
                  v49 = v80;
                }
                else
                {
                  v58 = 0;
                }
                v59 = (int *)&v58[4 * v54];
                *v59 = v51;
                v52 = v59 + 1;
                while (v49 != v53)
                {
                  v60 = *--v49;
                  *--v59 = v60;
                }
                __p = v59;
                v80 = v52;
                v81 = (int *)&v58[4 * v57];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *v49 = v51;
                v52 = v49 + 1;
              }
              v80 = v52;
              ++v50;
              v49 = v52;
            }
            while (v50 < *(int *)(v48 + 40));
          }
          if (Diagnostics_GetLogObject(void)::onceToken != -1)
            dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
          v61 = Diagnostics_GetLogObject(void)::__profile_log_default;
          if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
          {
            std::string::basic_string[abi:ne180100]<0>(&v88, " ");
            v62 = (int *)__p;
            v63 = v80;
            v91 = 0;
            buf = 0uLL;
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v89, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
            else
              v89 = v88;
            std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>((uint64_t)v76, v62, v63, (uint64_t)&buf, (const void **)&v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91) < 0)
              operator delete((void *)buf);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            Censor::global_plaintext(&v78, (uint64_t)v76);
            v64 = &v78;
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v64 = (std::string *)v78.__r_.__value_.__r.__words[0];
            *(_DWORD *)v92 = 67109378;
            v93 = v11;
            v94 = 2080;
            v95 = v64;
            _os_log_impl(&dword_1DE3F6000, v61, OS_LOG_TYPE_DEFAULT, "VQ0 tokens at idx %d: %s", v92, 0x12u);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v78.__r_.__value_.__l.__data_);
            if (v77 < 0)
              operator delete(v76[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(&v88, " ");
          v65 = (int *)__p;
          v66 = v80;
          v91 = 0;
          buf = 0uLL;
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v89, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v89 = v88;
          std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>((uint64_t)v76, v65, v66, (uint64_t)&buf, (const void **)&v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v91) < 0)
            operator delete((void *)buf);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          Censor::global_plaintext(&v78, (uint64_t)v76);
          v68 = &v78;
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v68 = (std::string *)v78.__r_.__value_.__r.__words[0];
          Diagnostics::log(5, "VQ0 tokens at idx %d: %s", v67, v11, v68);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          if (v77 < 0)
            operator delete(v76[0]);
          if (__p)
          {
            v80 = (int *)__p;
            operator delete(__p);
          }
        }
        v69 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
        if (*((_QWORD *)&v84 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        *(_QWORD *)&buf = &v85;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        do
          v72 = __ldaxr(p_shared_owners);
        while (__stlxr(v72 - 1, p_shared_owners));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 = **(int **)(a1 + 16) + (uint64_t)(int)v11;
        v11 = v10;
        v3 = v73;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 3) > v10);
    }
  }
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 1;
}

void sub_1DE9F8000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  unint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;

  if (*(char *)(v45 - 153) < 0)
    operator delete(*(void **)(v45 - 176));
  if (a44 < 0)
    operator delete(__p);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  v47 = a35;
  if (a35)
  {
    p_shared_owners = (unint64_t *)&a35->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  a29 = &a36;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  do
    v50 = __ldaxr(v44);
  while (__stlxr(v50 - 1, v44));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a15)
  {
    v51 = (unint64_t *)&a15->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<SoundStormStreamingModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<AcousticFeature>)>::target_type()
{
}

__n128 std::accumulate[abi:ne180100]<std::__wrap_iter<int const*>,std::string,std::string UTFString::join<std::string,int>(std::vector<int> const&,std::string const&)::{lambda(std::string,int)#1}>(uint64_t a1, int *a2, int *a3, uint64_t a4, const void **a5)
{
  int *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  __n128 result;
  std::string __p;
  std::string v17;
  std::string v18;
  std::string v19;

  if (a2 != a3)
  {
    v9 = a2;
    while (1)
    {
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        __p = *(std::string *)a4;
      std::to_string(&v19, *v9);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
        break;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_20:
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        goto LABEL_22;
      }
      v17 = v19;
LABEL_22:
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(std::string *)a4 = v17;
      *((_BYTE *)&v17.__r_.__value_.__s + 23) = 0;
      v17.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (++v9 == a3)
        goto LABEL_27;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, a5, (uint64_t)&v18);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v19;
    else
      v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      v12 = v19.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v18, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
LABEL_27:
  result = *(__n128 *)a4;
  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  return result;
}

void sub_1DE9F83DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SoundStormModule::SoundStormModule(uint64_t a1, char *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  const char *v15;
  std::__shared_weak_count *v16;
  __int128 **v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::string::size_type v23;
  uint64_t v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v33;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  InferenceEngine::DataTensor **v57;
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *size;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int parameter_value;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  std::string::size_type v128;
  int v129;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unsigned __int8 *v152;
  int64x2_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  _OWORD *v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  _QWORD *v177;
  char *v178;
  __int128 v179;
  int64x2_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  _OWORD *v185;
  _OWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  _QWORD *v194;
  _QWORD *v195;
  char *v196;
  __int128 v197;
  int64x2_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  __int128 v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  int64x2_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  __int128 v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  _OWORD *v236;
  _OWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  _QWORD *v245;
  _QWORD *v246;
  char *v247;
  __int128 v248;
  int64x2_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _OWORD *v253;
  _OWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  _QWORD *v262;
  _QWORD *v263;
  char *v264;
  __int128 v265;
  int64x2_t v266;
  uint64_t v267;
  char *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  __int128 v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t *v291;
  unint64_t v292;
  InferenceEngine::DataTensor **v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  __int128 v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  void *exception;
  _QWORD *v329;
  uint64_t *v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  int64x2_t *v334;
  char *v335;
  uint64_t v336;
  int64x2_t *v337;
  int64x2_t *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  __int128 v341;
  std::__shared_weak_count *v342;
  _QWORD *v343;
  std::__shared_weak_count *v344;
  std::string v345;
  char v346[8];
  uint64_t *v347;
  char v348[8];
  uint64_t *v349;
  void *v350[2];
  char v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  uint64_t v354[2];
  uint64_t v355;
  std::__shared_weak_count *v356;
  __int128 v357;
  std::string v358;
  void *__p[2];
  char v360;
  std::string v361;
  __int128 v362;
  std::string v363;
  __int128 v364;
  _QWORD *v365;
  __int128 v366;
  __int128 v367;
  std::string v368;
  uint64_t v369;
  uint64_t v370;

  v4 = a2;
  v5 = a1;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  v354[0] = *(_QWORD *)a3;
  v354[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Module::Module(a1, a2, v354);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)v5 = &off_1EA91EA20;
  v336 = v5 + 288;
  *(_QWORD *)(v5 + 312) = 0;
  *(_BYTE *)(v5 + 320) = 0;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_BYTE *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 328) = 850045863;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_QWORD *)(v5 + 384) = 0;
  v339 = v5;
  SharedObjectPool::get<VoiceConfig>(&v352, *(__int128 ***)a3);
  v11 = v352;
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v12, &v368);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v11 + 40))(v350, v11, 1936946287, &v368, 0);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  InferenceEngine::Utils::read_json_from_file((char *)v350, (uint64_t)v348);
  std::string::basic_string[abi:ne180100]<0>(&v368, "model_parameters");
  LOBYTE(v364) = 0;
  *((_QWORD *)&v364 + 1) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v348, (const void **)&v368.__r_.__value_.__l.__data_, (unsigned __int8 *)&v364, (uint64_t)v346);
  v13 = *(unsigned __int8 *)(v5 + 304);
  *(_BYTE *)(v5 + 304) = v346[0];
  v346[0] = v13;
  v14 = *(uint64_t **)(v5 + 312);
  *(_QWORD *)(v5 + 312) = v347;
  v347 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v347, v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v364 + 1, v364);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v368, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", v4, (const void **)&v368.__r_.__value_.__l.__data_, &v345);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  v15 = (const char *)(v5 + 184);
  v17 = *(__int128 ***)a3;
  v16 = *(std::__shared_weak_count **)(a3 + 8);
  v342 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)v17[3];
  if (v20
    && (v21 = std::__shared_weak_count::lock(v20), (v368.__r_.__value_.__l.__size_ = (std::string::size_type)v21) != 0))
  {
    v22 = v21;
    v23 = (std::string::size_type)v17[2];
    v368.__r_.__value_.__r.__words[0] = v23;
    if (v23
      && (v24 = v23 + 8,
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v23 + 8), (unsigned __int8 *)(v5 + 184))))
    {
      *(_QWORD *)&v364 = v5 + 184;
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)(v5 + 184), (__int128 **)&v364);
      v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
      v343 = (_QWORD *)*((_QWORD *)v25 + 5);
      v344 = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v343 = 0;
      v344 = 0;
    }
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v343 = 0;
    v344 = 0;
  }
  if (v342)
  {
    v31 = (unint64_t *)&v342->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
      std::__shared_weak_count::__release_weak(v342);
    }
  }
  if (!v343)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(v5 + 207) < 0)
      v15 = *(const char **)v15;
    StringFormatter::StringFormatter((StringFormatter *)&v368, "Persitent module '%s' is null", v15);
    MEMORY[0x1DF0EC99C](exception, &v368);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
  {
    switch(v345.__r_.__value_.__l.__size_)
    {
      case 3uLL:
        if (*(_WORD *)v345.__r_.__value_.__l.__data_ == 12912
          && *(_BYTE *)(v345.__r_.__value_.__r.__words[0] + 2) == 97)
        {
LABEL_52:
          v36 = v343[38];
          *(_QWORD *)&v367 = v343[37];
          *((_QWORD *)&v367 + 1) = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v40 = v343[39];
          v39 = (std::__shared_weak_count *)v343[40];
          *(_QWORD *)&v366 = v40;
          *((_QWORD *)&v366 + 1) = v39;
          if (v39)
          {
            v41 = (unint64_t *)&v39->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = (char *)operator new(0x40uLL);
          v44 = v43;
          *(_OWORD *)(v43 + 8) = 0u;
          *(_QWORD *)v43 = &off_1EA9343B8;
          *(_OWORD *)__p = v367;
          v45 = v367;
          v367 = 0u;
          v358.__r_.__value_.__r.__words[0] = v40;
          v358.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (v39)
          {
            v47 = (unint64_t *)&v39->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          if (*((_QWORD *)&v45 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v361.__r_.__value_.__r.__words[0] = v40;
          v361.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
          if (v39)
          {
            v51 = (unint64_t *)&v39->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          SoundStormP2ABaseInference::SoundStormP2ABaseInference((_QWORD *)v43 + 3, v45, *((std::__shared_weak_count **)&v45 + 1), (uint64_t *)&v361);
          if (v39)
          {
            v53 = (unint64_t *)&v39->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          if (v46)
          {
            v55 = (unint64_t *)&v46->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v44[6] = 0;
          v57 = (InferenceEngine::DataTensor **)(v44 + 6);
          v44[3] = off_1EA920648;
          v44[7] = 0;
          v58 = __p[0];
          v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_vq");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v59, &v363);
          (*(void (**)(__int128 *__return_ptr, void *, uint64_t, std::string *, _QWORD))(*(_QWORD *)v58 + 40))(&v364, v58, 1936946287, &v363, 0);
          InferenceEngine::DataUtils::read_vector_from_file<float>(&v368);
          if (SHIBYTE(v365) < 0)
            operator delete((void *)v364);
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v364, "prompt_target");
          InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v368, &v363);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v44 + 6), (__int128 *)&v363);
          size = (std::__shared_weak_count *)v363.__r_.__value_.__l.__size_;
          if (v363.__r_.__value_.__l.__size_)
          {
            v61 = (unint64_t *)(v363.__r_.__value_.__l.__size_ + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          if (SHIBYTE(v365) < 0)
            operator delete((void *)v364);
          InferenceEngine::DataTensor::get_shape(*v57, 0, (char **)&v364);
          v63 = *(_QWORD *)v364;
          v64 = v44[4];
          std::string::basic_string[abi:ne180100]<0>(&v363, "num_vqs");
          parameter_value = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v64 + 8), (const void **)&v363.__r_.__value_.__l.__data_, 8);
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          if ((_QWORD)v364)
          {
            *((_QWORD *)&v364 + 1) = v364;
            operator delete((void *)v364);
          }
          v66 = v44[4];
          std::string::basic_string[abi:ne180100]<0>(&v363, "num_vqs");
          v67 = InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v66 + 8), (const void **)&v363.__r_.__value_.__l.__data_, 8);
          v68 = operator new(0x18uLL);
          *((_QWORD *)&v364 + 1) = v68 + 3;
          v365 = v68 + 3;
          *v68 = 1;
          v68[1] = v63 / parameter_value;
          v68[2] = v67;
          *(_QWORD *)&v364 = v68;
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          InferenceEngine::DataTensor::reshape(*v57, (uint64_t)&v364);
          if ((_QWORD)v364)
          {
            *((_QWORD *)&v364 + 1) = v364;
            operator delete((void *)v364);
          }
          if (v368.__r_.__value_.__r.__words[0])
          {
            v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
            operator delete(v368.__r_.__value_.__l.__data_);
          }
          v69 = (std::__shared_weak_count *)v358.__r_.__value_.__l.__size_;
          if (v358.__r_.__value_.__l.__size_)
          {
            v70 = (unint64_t *)(v358.__r_.__value_.__l.__size_ + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v72 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v73 = (unint64_t *)((char *)__p[1] + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          *(_QWORD *)&v75 = v44 + 3;
          *((_QWORD *)&v75 + 1) = v44;
          v76 = *(std::__shared_weak_count **)(v5 + 280);
          *(_OWORD *)(v5 + 272) = v75;
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
          if (*((_QWORD *)&v366 + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
          if (*((_QWORD *)&v367 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            goto LABEL_447;
          }
        }
        break;
      case 6uLL:
        if (*(_DWORD *)v345.__r_.__value_.__l.__data_ == 1836020336
          && *(_WORD *)(v345.__r_.__value_.__r.__words[0] + 4) == 29808)
        {
LABEL_164:
          v108 = v343[38];
          *(_QWORD *)&v357 = v343[37];
          *((_QWORD *)&v357 + 1) = v108;
          if (v108)
          {
            v109 = (unint64_t *)(v108 + 8);
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          v112 = v343[39];
          v111 = (std::__shared_weak_count *)v343[40];
          v355 = v112;
          v356 = v111;
          if (v111)
          {
            v113 = (unint64_t *)&v111->__shared_owners_;
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v115 = (char *)operator new(0x80uLL);
          *(_OWORD *)(v115 + 8) = 0u;
          v335 = v115;
          *(_QWORD *)v115 = &off_1EA934A80;
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
          v366 = v357;
          v357 = 0u;
          *(_QWORD *)&v362 = v112;
          *((_QWORD *)&v362 + 1) = v111;
          v117 = v116;
          if (v111)
          {
            v118 = (unint64_t *)&v111->__shared_owners_;
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          if (v116)
          {
            v120 = (unint64_t *)&v116->__shared_owners_;
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          if (v111)
          {
            v122 = (unint64_t *)&v111->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
            *((_QWORD *)v115 + 4) = v112;
            *((_QWORD *)v115 + 3) = off_1EA91F890;
            v331 = (uint64_t *)(v115 + 32);
            *((_QWORD *)v115 + 5) = v111;
            v124 = (unint64_t *)&v111->__shared_owners_;
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
            do
              v126 = __ldaxr(v124);
            while (__stlxr(v126 - 1, v124));
            v127 = v115;
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          else
          {
            *((_QWORD *)v115 + 4) = v112;
            v127 = v115;
            *((_QWORD *)v115 + 3) = off_1EA91F890;
            v331 = (uint64_t *)(v115 + 32);
            *((_QWORD *)v115 + 5) = 0;
          }
          if (v117)
          {
            v220 = (unint64_t *)&v117->__shared_owners_;
            do
              v221 = __ldaxr(v220);
            while (__stlxr(v221 - 1, v220));
            if (!v221)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          *((_OWORD *)v127 + 5) = 0u;
          v222 = (int64x2_t *)(v127 + 80);
          *((_QWORD *)v127 + 3) = off_1EA921098;
          v338 = (int64x2_t *)(v127 + 104);
          *((_OWORD *)v127 + 6) = 0u;
          *((_OWORD *)v127 + 7) = 0u;
          v223 = *((_QWORD *)v127 + 4);
          v334 = (int64x2_t *)(v127 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v368, "mha_hidden_state");
          *((_QWORD *)v127 + 6) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v223 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 512);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v224 = *v331;
          std::string::basic_string[abi:ne180100]<0>(&v368, "mha_n_heads");
          *((_QWORD *)v127 + 7) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v224 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 16);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v225 = *v331;
          std::string::basic_string[abi:ne180100]<0>(&v368, "conformer_layers");
          *((_QWORD *)v127 + 8) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v225 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 6);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v226 = *v331;
          std::string::basic_string[abi:ne180100]<0>(&v368, "num_vqs");
          v227 = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v226 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 8);
          *((_QWORD *)v127 + 9) = v227;
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v368.__r_.__value_.__l.__data_);
            v227 = *((_QWORD *)v127 + 9);
          }
          if (v227)
          {
            v228 = 0;
            v332 = (uint64_t)(v127 + 120);
            v333 = (uint64_t)(v127 + 96);
            do
            {
              std::to_string(&v368, v228);
              v229 = std::string::insert(&v368, 0, "prompt_k_");
              v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
              v365 = (_QWORD *)v229->__r_.__value_.__r.__words[2];
              v364 = v230;
              v229->__r_.__value_.__l.__size_ = 0;
              v229->__r_.__value_.__r.__words[2] = 0;
              v229->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v368.__r_.__value_.__l.__data_);
              std::to_string(&v368, v228);
              v231 = std::string::insert(&v368, 0, "prompt_v_");
              v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
              v363.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v232;
              v231->__r_.__value_.__l.__size_ = 0;
              v231->__r_.__value_.__r.__words[2] = 0;
              v231->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v368.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v361, "prompt_k");
              v233 = v366;
              v234 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v4, (const void **)&v364);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v234, &v358);
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v233 + 40))(__p, v233, 1936946287, &v358, 0);
              _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v367, (uint64_t)&v361, (uint64_t)__p);
              v236 = (_OWORD *)*((_QWORD *)v127 + 11);
              v235 = *((_QWORD *)v127 + 12);
              if ((unint64_t)v236 >= v235)
              {
                v238 = ((uint64_t)v236 - v222->i64[0]) >> 4;
                if ((unint64_t)(v238 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v239 = v235 - v222->i64[0];
                v240 = v239 >> 3;
                if (v239 >> 3 <= (unint64_t)(v238 + 1))
                  v240 = v238 + 1;
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF0)
                  v241 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v241 = v240;
                v370 = v333;
                v242 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v333, v241);
                v244 = &v242[16 * v238];
                *(_OWORD *)v244 = v367;
                v367 = 0uLL;
                v246 = (_QWORD *)*((_QWORD *)v127 + 10);
                v245 = (_QWORD *)*((_QWORD *)v127 + 11);
                if (v245 == v246)
                {
                  v249 = vdupq_n_s64((unint64_t)v245);
                  v247 = &v242[16 * v238];
                }
                else
                {
                  v247 = &v242[16 * v238];
                  do
                  {
                    v248 = *((_OWORD *)v245 - 1);
                    v245 -= 2;
                    *((_OWORD *)v247 - 1) = v248;
                    v247 -= 16;
                    *v245 = 0;
                    v245[1] = 0;
                  }
                  while (v245 != v246);
                  v249 = *v222;
                }
                v237 = v244 + 16;
                *((_QWORD *)v127 + 10) = v247;
                *((_QWORD *)v127 + 11) = v244 + 16;
                *(int64x2_t *)&v368.__r_.__value_.__r.__words[1] = v249;
                v250 = *((_QWORD *)v127 + 12);
                *((_QWORD *)v127 + 12) = &v242[16 * v243];
                v369 = v250;
                v368.__r_.__value_.__r.__words[0] = v249.i64[0];
                std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v368);
              }
              else
              {
                *v236 = v367;
                v237 = v236 + 1;
              }
              *((_QWORD *)v127 + 11) = v237;
              if (v360 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v361.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v361, "prompt_v");
              v251 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v4, (const void **)&v363.__r_.__value_.__l.__data_);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v251, &v358);
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v233 + 40))(__p, v233, 1936946287, &v358, 0);
              _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v367, (uint64_t)&v361, (uint64_t)__p);
              v253 = (_OWORD *)*((_QWORD *)v127 + 14);
              v252 = *((_QWORD *)v127 + 15);
              if ((unint64_t)v253 >= v252)
              {
                v255 = ((uint64_t)v253 - v338->i64[0]) >> 4;
                if ((unint64_t)(v255 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v256 = v252 - v338->i64[0];
                v257 = v256 >> 3;
                if (v256 >> 3 <= (unint64_t)(v255 + 1))
                  v257 = v255 + 1;
                if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF0)
                  v258 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v258 = v257;
                v370 = v332;
                v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v332, v258);
                v261 = &v259[16 * v255];
                *(_OWORD *)v261 = v367;
                v367 = 0uLL;
                v263 = (_QWORD *)*((_QWORD *)v127 + 13);
                v262 = (_QWORD *)*((_QWORD *)v127 + 14);
                if (v262 == v263)
                {
                  v266 = vdupq_n_s64((unint64_t)v262);
                  v264 = &v259[16 * v255];
                }
                else
                {
                  v264 = &v259[16 * v255];
                  do
                  {
                    v265 = *((_OWORD *)v262 - 1);
                    v262 -= 2;
                    *((_OWORD *)v264 - 1) = v265;
                    v264 -= 16;
                    *v262 = 0;
                    v262[1] = 0;
                  }
                  while (v262 != v263);
                  v266 = *v338;
                }
                v254 = v261 + 16;
                *((_QWORD *)v127 + 13) = v264;
                *((_QWORD *)v127 + 14) = v261 + 16;
                *(int64x2_t *)&v368.__r_.__value_.__r.__words[1] = v266;
                v267 = *((_QWORD *)v127 + 15);
                *((_QWORD *)v127 + 15) = &v259[16 * v260];
                v369 = v267;
                v368.__r_.__value_.__r.__words[0] = v266.i64[0];
                std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v368);
              }
              else
              {
                *v253 = v367;
                v254 = v253 + 1;
              }
              *((_QWORD *)v127 + 14) = v254;
              if (v360 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v361.__r_.__value_.__l.__data_);
              v268 = v4;
              InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(v222->i64[0] + 16 * v228), 0, &v368.__r_.__value_.__l.__data_);
              v269 = *(_QWORD *)v368.__r_.__value_.__l.__data_;
              v270 = *((_QWORD *)v127 + 7);
              v271 = *((_QWORD *)v127 + 8);
              v272 = *((_QWORD *)v127 + 6);
              v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
              operator delete(v368.__r_.__value_.__l.__data_);
              v274 = *((_QWORD *)v127 + 7);
              v273 = *((_QWORD *)v127 + 8);
              v275 = *((_QWORD *)v127 + 6);
              v276 = operator new(0x20uLL);
              v368.__r_.__value_.__l.__size_ = (std::string::size_type)(v276 + 4);
              v368.__r_.__value_.__r.__words[2] = (std::string::size_type)(v276 + 4);
              *v276 = v273;
              v276[1] = v269 / (v270 * v271 * (v272 / v270));
              v276[2] = v274;
              v276[3] = v275 / v274;
              v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
              v222 = v334;
              InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(v334->i64[0] + 16 * v228), (uint64_t)&v368);
              InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(v338->i64[0] + 16 * v228), (uint64_t)&v368);
              v4 = v268;
              v127 = v335;
              if (v368.__r_.__value_.__r.__words[0])
              {
                v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
                operator delete(v368.__r_.__value_.__l.__data_);
              }
              v5 = v339;
              if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v363.__r_.__value_.__l.__data_);
              if (SHIBYTE(v365) < 0)
                operator delete((void *)v364);
              ++v228;
            }
            while (v228 < *((_QWORD *)v335 + 9));
          }
          v277 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
          if (*((_QWORD *)&v362 + 1))
          {
            v278 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
            do
              v279 = __ldaxr(v278);
            while (__stlxr(v279 - 1, v278));
            if (!v279)
            {
              ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
              std::__shared_weak_count::__release_weak(v277);
            }
          }
          v280 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
          if (*((_QWORD *)&v366 + 1))
          {
            v281 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
            do
              v282 = __ldaxr(v281);
            while (__stlxr(v282 - 1, v281));
            if (!v282)
            {
              ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
              std::__shared_weak_count::__release_weak(v280);
            }
          }
          *(_QWORD *)&v283 = v127 + 24;
          *((_QWORD *)&v283 + 1) = v127;
          v284 = *(std::__shared_weak_count **)(v5 + 280);
          *(_OWORD *)(v5 + 272) = v283;
          if (v284)
          {
            v285 = (unint64_t *)&v284->__shared_owners_;
            do
              v286 = __ldaxr(v285);
            while (__stlxr(v286 - 1, v285));
            if (!v286)
            {
              ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
              std::__shared_weak_count::__release_weak(v284);
            }
          }
          v287 = v356;
          if (v356)
          {
            v288 = (unint64_t *)&v356->__shared_owners_;
            do
              v289 = __ldaxr(v288);
            while (__stlxr(v289 - 1, v288));
            if (!v289)
            {
              ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
              std::__shared_weak_count::__release_weak(v287);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
          if (*((_QWORD *)&v357 + 1))
          {
            v290 = (unint64_t *)(*((_QWORD *)&v357 + 1) + 8);
            do
              v84 = __ldaxr(v290);
            while (__stlxr(v84 - 1, v290));
            goto LABEL_447;
          }
        }
        break;
      case 7uLL:
        if (*(_DWORD *)v345.__r_.__value_.__l.__data_ == 1634100580
          && *(_DWORD *)(v345.__r_.__value_.__r.__words[0] + 3) == 1953264993)
        {
LABEL_139:
          v88 = v343[38];
          *(_QWORD *)&v362 = v343[37];
          *((_QWORD *)&v362 + 1) = v88;
          if (v88)
          {
            v89 = (unint64_t *)(v88 + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          v92 = v343[39];
          v91 = (std::__shared_weak_count *)v343[40];
          *(_QWORD *)&v357 = v92;
          *((_QWORD *)&v357 + 1) = v91;
          if (v91)
          {
            v93 = (unint64_t *)&v91->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          v95 = (char *)operator new(0x50uLL);
          v96 = v95;
          *(_OWORD *)(v95 + 8) = 0u;
          *(_QWORD *)v95 = &off_1EA934578;
          v97 = *((_QWORD *)&v362 + 1);
          v367 = v362;
          v362 = 0u;
          *(_QWORD *)&v366 = v92;
          *((_QWORD *)&v366 + 1) = v91;
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
          if (v91)
          {
            v99 = (unint64_t *)&v91->__shared_owners_;
            do
              v100 = __ldxr(v99);
            while (__stxr(v100 + 1, v99));
          }
          if (v97)
          {
            v101 = (unint64_t *)(v97 + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          if (v91)
          {
            v103 = (unint64_t *)&v91->__shared_owners_;
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
            *((_QWORD *)v95 + 4) = v92;
            *((_QWORD *)v95 + 3) = off_1EA91F890;
            *((_QWORD *)v95 + 5) = v91;
            do
              v105 = __ldxr(v103);
            while (__stxr(v105 + 1, v103));
            do
              v106 = __ldaxr(v103);
            while (__stlxr(v106 - 1, v103));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          else
          {
            *((_QWORD *)v95 + 4) = v92;
            *((_QWORD *)v95 + 3) = off_1EA91F890;
            *((_QWORD *)v95 + 5) = 0;
          }
          if (v98)
          {
            v291 = (unint64_t *)&v98->__shared_owners_;
            do
              v292 = __ldaxr(v291);
            while (__stlxr(v292 - 1, v291));
            if (!v292)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          *((_OWORD *)v96 + 4) = 0u;
          *((_QWORD *)v96 + 3) = off_1EA9208C0;
          *((_OWORD *)v96 + 3) = 0u;
          v293 = (InferenceEngine::DataTensor **)(v96 + 48);
          v294 = v367;
          v295 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_semantic");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v295, &v363);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v294
                                                                                                  + 40))(&v364, v294, 1936946287, &v363, 0);
          InferenceEngine::DataUtils::read_vector_from_file<float>(&v368);
          if (SHIBYTE(v365) < 0)
            operator delete((void *)v364);
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          v296 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)v4, "prompt_vq");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v296, &v361);
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v294 + 40))(&v363, v294, 1936946287, &v361, 0);
          InferenceEngine::DataUtils::read_vector_from_file<float>(&v364);
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v361.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v363, "prompt_semantic");
          InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v368, &v361);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v96 + 48), (__int128 *)&v361);
          v297 = (std::__shared_weak_count *)v361.__r_.__value_.__l.__size_;
          if (v361.__r_.__value_.__l.__size_)
          {
            v298 = (unint64_t *)(v361.__r_.__value_.__l.__size_ + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
            }
          }
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          InferenceEngine::DataTensor::get_shape(*v293, 0, &v363.__r_.__value_.__l.__data_);
          v300 = *(_QWORD *)v363.__r_.__value_.__l.__data_;
          v363.__r_.__value_.__l.__size_ = v363.__r_.__value_.__r.__words[0];
          operator delete(v363.__r_.__value_.__l.__data_);
          v301 = operator new(0x10uLL);
          v363.__r_.__value_.__l.__size_ = (std::string::size_type)(v301 + 2);
          v363.__r_.__value_.__r.__words[2] = (std::string::size_type)(v301 + 2);
          *v301 = 1;
          v301[1] = v300;
          v363.__r_.__value_.__r.__words[0] = (std::string::size_type)v301;
          v302 = operator new(0x18uLL);
          v361.__r_.__value_.__l.__size_ = (std::string::size_type)(v302 + 3);
          v361.__r_.__value_.__r.__words[2] = (std::string::size_type)(v302 + 3);
          *v302 = 1;
          v302[1] = v300;
          v302[2] = 8;
          v361.__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
          InferenceEngine::DataTensor::reshape(*v293, (uint64_t)&v363);
          std::string::basic_string[abi:ne180100]<0>(__p, "prompt_vq");
          InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v364, &v358);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v96 + 64), (__int128 *)&v358);
          v303 = (std::__shared_weak_count *)v358.__r_.__value_.__l.__size_;
          if (v358.__r_.__value_.__l.__size_)
          {
            v304 = (unint64_t *)(v358.__r_.__value_.__l.__size_ + 8);
            do
              v305 = __ldaxr(v304);
            while (__stlxr(v305 - 1, v304));
            if (!v305)
            {
              ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
              std::__shared_weak_count::__release_weak(v303);
            }
          }
          if (v360 < 0)
            operator delete(__p[0]);
          InferenceEngine::DataTensor::reshape(*((InferenceEngine::DataTensor **)v96 + 8), (uint64_t)&v361);
          if (v361.__r_.__value_.__r.__words[0])
          {
            v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
            operator delete(v361.__r_.__value_.__l.__data_);
          }
          if (v363.__r_.__value_.__r.__words[0])
          {
            v363.__r_.__value_.__l.__size_ = v363.__r_.__value_.__r.__words[0];
            operator delete(v363.__r_.__value_.__l.__data_);
          }
          if ((_QWORD)v364)
          {
            *((_QWORD *)&v364 + 1) = v364;
            operator delete((void *)v364);
          }
          if (v368.__r_.__value_.__r.__words[0])
          {
            v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
            operator delete(v368.__r_.__value_.__l.__data_);
          }
          if (v91)
          {
            v306 = (unint64_t *)&v91->__shared_owners_;
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v308 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
          if (*((_QWORD *)&v367 + 1))
          {
            v309 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
              std::__shared_weak_count::__release_weak(v308);
            }
          }
          *(_QWORD *)&v311 = v96 + 24;
          *((_QWORD *)&v311 + 1) = v96;
          v312 = *(std::__shared_weak_count **)(v5 + 280);
          *(_OWORD *)(v5 + 272) = v311;
          if (v312)
          {
            v313 = (unint64_t *)&v312->__shared_owners_;
            do
              v314 = __ldaxr(v313);
            while (__stlxr(v314 - 1, v313));
            if (!v314)
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
          }
          v315 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
          if (*((_QWORD *)&v357 + 1))
          {
            v316 = (unint64_t *)(*((_QWORD *)&v357 + 1) + 8);
            do
              v317 = __ldaxr(v316);
            while (__stlxr(v317 - 1, v316));
            if (!v317)
            {
              ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
              std::__shared_weak_count::__release_weak(v315);
            }
          }
          v82 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
          if (*((_QWORD *)&v362 + 1))
          {
            v318 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
            do
              v84 = __ldaxr(v318);
            while (__stlxr(v84 - 1, v318));
LABEL_447:
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
        }
        break;
      case 0xAuLL:
        v33 = (std::string *)v345.__r_.__value_.__r.__words[0];
LABEL_185:
        v128 = v33->__r_.__value_.__r.__words[0];
        v129 = LOWORD(v33->__r_.__value_.__r.__words[1]);
        if (v128 == 0x6D6F72705F613270 && v129 == 29808)
        {
          v131 = v343[38];
          *(_QWORD *)&v341 = v343[37];
          *((_QWORD *)&v341 + 1) = v131;
          if (v131)
          {
            v132 = (unint64_t *)(v131 + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v135 = v343[39];
          v134 = (std::__shared_weak_count *)v343[40];
          v340 = v134;
          if (v134)
          {
            v136 = (unint64_t *)&v134->__shared_owners_;
            do
              v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }
          v138 = (char *)operator new(0xA0uLL);
          v139 = v138;
          *(_OWORD *)(v138 + 8) = 0u;
          *(_QWORD *)v138 = &off_1EA90B0C8;
          v357 = v341;
          v355 = v135;
          v356 = v134;
          if (v134)
          {
            v140 = (unint64_t *)&v134->__shared_owners_;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
          }
          v329 = v138 + 24;
          if (*((_QWORD *)&v341 + 1))
          {
            v142 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }
          *(_QWORD *)&v367 = v135;
          *((_QWORD *)&v367 + 1) = v134;
          if (v134)
          {
            v144 = (unint64_t *)&v134->__shared_owners_;
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
          }
          SoundStormP2ABaseInference::SoundStormP2ABaseInference(v329, v341, *((std::__shared_weak_count **)&v341 + 1), (uint64_t *)&v367);
          if (v134)
          {
            v146 = (unint64_t *)&v134->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          if (*((_QWORD *)&v341 + 1))
          {
            v148 = (unint64_t *)(*((_QWORD *)&v341 + 1) + 8);
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v341 + 1) + 16))(*((_QWORD *)&v341 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v341 + 1));
            }
          }
          v150 = *((_QWORD *)v139 + 4);
          *((_QWORD *)v139 + 10) = 0;
          v151 = (uint64_t *)(v139 + 80);
          v139[96] = 0;
          v152 = (unsigned __int8 *)(v139 + 96);
          *((_QWORD *)v139 + 3) = off_1EA90A8B0;
          *(_OWORD *)(v139 + 104) = 0u;
          *(_OWORD *)(v139 + 136) = 0u;
          v337 = (int64x2_t *)(v139 + 136);
          *((_QWORD *)v139 + 11) = 0;
          v153 = (int64x2_t *)(v139 + 112);
          *(_OWORD *)(v139 + 120) = 0u;
          v330 = (uint64_t *)(v139 + 32);
          *((_QWORD *)v139 + 19) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v368, "mha_hidden_state");
          *((_QWORD *)v139 + 6) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v150 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 512);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v154 = *v330;
          std::string::basic_string[abi:ne180100]<0>(&v368, "mha_n_heads");
          *((_QWORD *)v139 + 7) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v154 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 16);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v155 = *v330;
          std::string::basic_string[abi:ne180100]<0>(&v368, "conformer_layers");
          *((_QWORD *)v139 + 8) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v155 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 6);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v156 = *v330;
          std::string::basic_string[abi:ne180100]<0>(&v368, "num_vqs");
          *((_QWORD *)v139 + 9) = (int)InferenceEngine::MilInferenceModel::get_parameter_value_if<int>(*(_QWORD *)(v156 + 8), (const void **)&v368.__r_.__value_.__l.__data_, 8);
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v366, (uint64_t)v4);
          v157 = v139[96];
          v139[96] = v366;
          LOBYTE(v366) = v157;
          v158 = *((_QWORD *)v139 + 13);
          *((_QWORD *)v139 + 13) = *((_QWORD *)&v366 + 1);
          *((_QWORD *)&v366 + 1) = v158;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v366 + 1, v157);
          std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)v139 + 10, v357, *((uint64_t *)&v357 + 1));
          if (*((_QWORD *)v139 + 9))
          {
            v159 = 0;
            do
            {
              std::to_string(&v368, v159);
              v160 = std::string::insert(&v368, 0, "prompt_k_");
              v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
              v365 = (_QWORD *)v160->__r_.__value_.__r.__words[2];
              v364 = v161;
              v160->__r_.__value_.__l.__size_ = 0;
              v160->__r_.__value_.__r.__words[2] = 0;
              v160->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v368.__r_.__value_.__l.__data_);
              std::to_string(&v368, v159);
              v162 = std::string::insert(&v368, 0, "prompt_v_");
              v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
              v363.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v163;
              v162->__r_.__value_.__l.__size_ = 0;
              v162->__r_.__value_.__r.__words[2] = 0;
              v162->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v368.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v361, "prompt_k");
              v164 = *v151;
              v165 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v152, (const void **)&v364);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v165, &v358);
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v164 + 40))(__p, v164, 1936946287, &v358, 0);
              _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v362, (uint64_t)&v361, (uint64_t)__p);
              v167 = (_OWORD *)*((_QWORD *)v139 + 15);
              v166 = *((_QWORD *)v139 + 16);
              if ((unint64_t)v167 >= v166)
              {
                v169 = ((uint64_t)v167 - v153->i64[0]) >> 4;
                if ((unint64_t)(v169 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v170 = v166 - v153->i64[0];
                v171 = v170 >> 3;
                if (v170 >> 3 <= (unint64_t)(v169 + 1))
                  v171 = v169 + 1;
                if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
                  v172 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v172 = v171;
                v370 = (uint64_t)(v139 + 128);
                v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v139 + 128), v172);
                v175 = &v173[16 * v169];
                *(_OWORD *)v175 = v362;
                v362 = 0uLL;
                v177 = (_QWORD *)*((_QWORD *)v139 + 14);
                v176 = (_QWORD *)*((_QWORD *)v139 + 15);
                if (v176 == v177)
                {
                  v180 = vdupq_n_s64((unint64_t)v176);
                  v178 = &v173[16 * v169];
                }
                else
                {
                  v178 = &v173[16 * v169];
                  do
                  {
                    v179 = *((_OWORD *)v176 - 1);
                    v176 -= 2;
                    *((_OWORD *)v178 - 1) = v179;
                    v178 -= 16;
                    *v176 = 0;
                    v176[1] = 0;
                  }
                  while (v176 != v177);
                  v180 = *v153;
                }
                v168 = v175 + 16;
                *((_QWORD *)v139 + 14) = v178;
                *((_QWORD *)v139 + 15) = v175 + 16;
                *(int64x2_t *)&v368.__r_.__value_.__r.__words[1] = v180;
                v181 = *((_QWORD *)v139 + 16);
                *((_QWORD *)v139 + 16) = &v173[16 * v174];
                v369 = v181;
                v368.__r_.__value_.__r.__words[0] = v180.i64[0];
                std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v368);
              }
              else
              {
                *v167 = v362;
                v168 = v167 + 1;
              }
              *((_QWORD *)v139 + 15) = v168;
              if (v360 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v361.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v361, "prompt_v");
              v182 = *v151;
              v183 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v152, (const void **)&v363.__r_.__value_.__l.__data_);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v183, &v358);
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v182 + 40))(__p, v182, 1936946287, &v358, 0);
              _ZN15InferenceEngine10DataTensor15build_from_fileIDF16_EENSt3__110shared_ptrIS0_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESC_(&v362, (uint64_t)&v361, (uint64_t)__p);
              v185 = (_OWORD *)*((_QWORD *)v139 + 18);
              v184 = *((_QWORD *)v139 + 19);
              if ((unint64_t)v185 >= v184)
              {
                v187 = ((uint64_t)v185 - v337->i64[0]) >> 4;
                if ((unint64_t)(v187 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v188 = v184 - v337->i64[0];
                v189 = v188 >> 3;
                if (v188 >> 3 <= (unint64_t)(v187 + 1))
                  v189 = v187 + 1;
                if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF0)
                  v190 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v190 = v189;
                v370 = (uint64_t)(v139 + 152);
                v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v139 + 152), v190);
                v193 = &v191[16 * v187];
                *(_OWORD *)v193 = v362;
                v362 = 0uLL;
                v195 = (_QWORD *)*((_QWORD *)v139 + 17);
                v194 = (_QWORD *)*((_QWORD *)v139 + 18);
                if (v194 == v195)
                {
                  v198 = vdupq_n_s64((unint64_t)v194);
                  v196 = &v191[16 * v187];
                }
                else
                {
                  v196 = &v191[16 * v187];
                  do
                  {
                    v197 = *((_OWORD *)v194 - 1);
                    v194 -= 2;
                    *((_OWORD *)v196 - 1) = v197;
                    v196 -= 16;
                    *v194 = 0;
                    v194[1] = 0;
                  }
                  while (v194 != v195);
                  v198 = *v337;
                }
                v186 = v193 + 16;
                *((_QWORD *)v139 + 17) = v196;
                *((_QWORD *)v139 + 18) = v193 + 16;
                *(int64x2_t *)&v368.__r_.__value_.__r.__words[1] = v198;
                v199 = *((_QWORD *)v139 + 19);
                *((_QWORD *)v139 + 19) = &v191[16 * v192];
                v369 = v199;
                v368.__r_.__value_.__r.__words[0] = v198.i64[0];
                std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v368);
              }
              else
              {
                *v185 = v362;
                v186 = v185 + 1;
              }
              *((_QWORD *)v139 + 18) = v186;
              if (v360 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v358.__r_.__value_.__l.__data_);
              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v361.__r_.__value_.__l.__data_);
              InferenceEngine::DataTensor::get_shape(*(InferenceEngine::DataTensor **)(v153->i64[0] + 16 * v159), 0, &v368.__r_.__value_.__l.__data_);
              v200 = *(_QWORD *)v368.__r_.__value_.__l.__data_;
              v201 = *((_QWORD *)v139 + 7);
              v202 = *((_QWORD *)v139 + 8);
              v203 = *((_QWORD *)v139 + 6);
              v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
              operator delete(v368.__r_.__value_.__l.__data_);
              v204 = *((_QWORD *)v139 + 7);
              v205 = *((_QWORD *)v139 + 8);
              v206 = *((_QWORD *)v139 + 6);
              v207 = operator new(0x20uLL);
              v368.__r_.__value_.__l.__size_ = (std::string::size_type)(v207 + 4);
              v368.__r_.__value_.__r.__words[2] = (std::string::size_type)(v207 + 4);
              *v207 = v205;
              v207[1] = v200 / (v201 * v202 * (v203 / v201));
              v207[2] = v204;
              v207[3] = v206 / v204;
              v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
              v153 = (int64x2_t *)(v139 + 112);
              InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(*((_QWORD *)v139 + 14) + 16 * v159), (uint64_t)&v368);
              InferenceEngine::DataTensor::reshape(*(InferenceEngine::DataTensor **)(v337->i64[0] + 16 * v159), (uint64_t)&v368);
              v5 = v339;
              v152 = (unsigned __int8 *)(v139 + 96);
              v151 = (uint64_t *)(v139 + 80);
              if (v368.__r_.__value_.__r.__words[0])
              {
                v368.__r_.__value_.__l.__size_ = v368.__r_.__value_.__r.__words[0];
                operator delete(v368.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v363.__r_.__value_.__l.__data_);
              if (SHIBYTE(v365) < 0)
                operator delete((void *)v364);
              ++v159;
            }
            while (v159 < *((_QWORD *)v139 + 9));
          }
          v208 = v356;
          if (v356)
          {
            v209 = (unint64_t *)&v356->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v211 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
          if (*((_QWORD *)&v357 + 1))
          {
            v212 = (unint64_t *)(*((_QWORD *)&v357 + 1) + 8);
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          *(_QWORD *)&v214 = v329;
          *((_QWORD *)&v214 + 1) = v139;
          v215 = *(std::__shared_weak_count **)(v5 + 280);
          *(_OWORD *)(v5 + 272) = v214;
          if (v215)
          {
            v216 = (unint64_t *)&v215->__shared_owners_;
            do
              v217 = __ldaxr(v216);
            while (__stlxr(v217 - 1, v216));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
          }
          if (v340)
          {
            v218 = (unint64_t *)&v340->__shared_owners_;
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
              std::__shared_weak_count::__release_weak(v340);
            }
          }
        }
        break;
      default:
        break;
    }
  }
  else
  {
    v33 = &v345;
    switch(*((_BYTE *)&v345.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v345.__r_.__value_.__l.__data_) == 12912 && v345.__r_.__value_.__s.__data_[2] == 97)
          goto LABEL_52;
        break;
      case 6:
        if (LODWORD(v345.__r_.__value_.__l.__data_) == 1836020336 && WORD2(v345.__r_.__value_.__r.__words[0]) == 29808)
          goto LABEL_164;
        break;
      case 7:
        if (LODWORD(v345.__r_.__value_.__l.__data_) == 1634100580
          && *(_DWORD *)((char *)v345.__r_.__value_.__r.__words + 3) == 1953264993)
        {
          goto LABEL_139;
        }
        break;
      case 0xA:
        goto LABEL_185;
      default:
        break;
    }
  }
  *(_BYTE *)(v5 + 320) = 0;
  SharedObjectPool::get<SynthesizerConfig>(&v368, *(_QWORD *)(v5 + 168));
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v336, (__int128 *)&v368);
  v319 = (std::__shared_weak_count *)v368.__r_.__value_.__l.__size_;
  if (v368.__r_.__value_.__l.__size_)
  {
    v320 = (unint64_t *)(v368.__r_.__value_.__l.__size_ + 8);
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  if (v344)
  {
    v322 = (unint64_t *)&v344->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v349, v348[0]);
  if (v351 < 0)
    operator delete(v350[0]);
  v324 = v353;
  if (v353)
  {
    v325 = (unint64_t *)&v353->__shared_owners_;
    do
      v326 = __ldaxr(v325);
    while (__stlxr(v326 - 1, v325));
    if (!v326)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
    }
  }
  return v5;
}

void sub_1DE9FA390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  std::__shared_weak_count *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v69;
  void *v70;
  void *v71;
  void *v72;

  if (a62 < 0)
    operator delete(__p);
  operator delete(v66);
  v69 = *(void **)(v67 - 240);
  if (v69)
  {
    *(_QWORD *)(v67 - 232) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(v67 - 208);
  if (v70)
  {
    *(_QWORD *)(v67 - 200) = v70;
    operator delete(v70);
  }
  v71 = *(void **)(v67 - 136);
  if (v71)
  {
    *(_QWORD *)(v67 - 128) = v71;
    operator delete(v71);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v65);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v64);
  v62[1].__vftable = (std::__shared_weak_count_vtbl *)off_1EA91F890;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v63);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v67 - 176);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v67 - 160);
  std::__shared_weak_count::~__shared_weak_count(v62);
  operator delete(v72);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v67 - 256);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a34 < 0)
    operator delete(a29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a38, a37);
  if (a44 < 0)
    operator delete(a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::mutex::~mutex((std::mutex *)(a20 + 328));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a20 + 312), *(unsigned __int8 *)(a20 + 304));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a18);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a20 + 272);
  Module::~Module((Module *)a20);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SoundStormP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormP2APromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormP2APromptInference>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 24) = off_1EA90A8B0;
  v3 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 112);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 104), *(unsigned __int8 *)(a1 + 96));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 80);
  *(_QWORD *)(a1 + 24) = off_1EA91F890;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<SoundStormP2AInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9343B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormP2AInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9343B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormP2AInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA920648;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 48);
  *(_QWORD *)(a1 + 24) = off_1EA91F890;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<SoundStormPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormPromptInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormPromptInference>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 24) = off_1EA921098;
  v3 = (void **)(a1 + 104);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 80);
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)(a1 + 24) = off_1EA91F890;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<SoundStormBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoundStormBaseInference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA934578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<SoundStormBaseInference>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = off_1EA9208C0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 48);
  *(_QWORD *)(a1 + 24) = off_1EA91F890;
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 32);
}

Module *SoundStormPersistentModule::SoundStormPersistentModule(Module *a1, char *a2, __int128 ***a3)
{
  uint64_t v6;
  uint64_t *v7;
  InferenceEngine::MilInferenceModel ***v8;
  unsigned __int8 v9;
  std::mutex *v10;
  uint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v29;
  BOOL v30;
  int v31;
  std::string::size_type v32;
  InferenceEngine::MilInferenceModel **v34;
  InferenceEngine::MilInferenceModel *v35;
  uint64_t *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  InferenceEngine::MilInferenceModel **v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *exception;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  void *__p[2];
  char v56;
  std::string v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  std::string v60;
  void *v61[2];
  char v62;
  std::string v63;
  std::string v64;

  Module::Module(a1);
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 288) = 0;
  *(_QWORD *)v6 = &off_1EA921220;
  v7 = (uint64_t *)(v6 + 296);
  v8 = (InferenceEngine::MilInferenceModel ***)(v6 + 312);
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  {
    v52 = operator new();
    *(_QWORD *)v52 = 850045863;
    *(_OWORD *)(v52 + 8) = 0u;
    *(_OWORD *)(v52 + 24) = 0u;
    *(_OWORD *)(v52 + 40) = 0u;
    *(_QWORD *)(v52 + 56) = 0;
    SoundStormPersistentModule::thread_mutex(void)::mutex = v52;
  }
  v10 = (std::mutex *)SoundStormPersistentModule::thread_mutex(void)::mutex;
  std::mutex::lock((std::mutex *)SoundStormPersistentModule::thread_mutex(void)::mutex);
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "framework_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v11, &v63);
  SharedObjectPool::get<VoiceConfig>(&v64, *a3);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v7, (__int128 *)&v64);
  size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
  if (v64.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v15 = *v7;
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((uint64_t)a2, "model_config");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v16, &v64);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)v15 + 40))(v61, v15, 1936946287, &v64, 0);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v64, "model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("default", a2, (const void **)&v64.__r_.__value_.__l.__data_, &v60);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(&v64, (char *)v61, (uint64_t)&v63);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)&v64);
  v17 = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
  if (v64.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v58 = 0;
  v59 = 0;
  if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    v20 = &v60;
    switch(*((_BYTE *)&v60.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v60.__r_.__value_.__l.__data_) != 12912 || v60.__r_.__value_.__s.__data_[2] != 97)
          goto LABEL_78;
        goto LABEL_40;
      case 6:
        v25 = WORD2(v60.__r_.__value_.__r.__words[0]);
        v26 = LODWORD(v60.__r_.__value_.__l.__data_) == 1836020336;
        v27 = 29808;
        goto LABEL_27;
      case 7:
        v25 = *(_DWORD *)((char *)v60.__r_.__value_.__r.__words + 3);
        v26 = LODWORD(v60.__r_.__value_.__l.__data_) == 1634100580;
        v27 = 1953264993;
LABEL_27:
        if (!v26 || v25 != v27)
          goto LABEL_78;
        goto LABEL_58;
      case 0xA:
        goto LABEL_34;
      default:
        goto LABEL_78;
    }
  }
  switch(v60.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      v22 = *(unsigned __int8 *)(v60.__r_.__value_.__r.__words[0] + 2);
      v23 = *(_WORD *)v60.__r_.__value_.__l.__data_ == 12912;
      v24 = 97;
      goto LABEL_35;
    case 6uLL:
      v29 = *(unsigned __int16 *)(v60.__r_.__value_.__r.__words[0] + 4);
      v30 = *(_DWORD *)v60.__r_.__value_.__l.__data_ == 1836020336;
      v31 = 29808;
      goto LABEL_53;
    case 7uLL:
      v29 = *(_DWORD *)(v60.__r_.__value_.__r.__words[0] + 3);
      v30 = *(_DWORD *)v60.__r_.__value_.__l.__data_ == 1634100580;
      v31 = 1953264993;
LABEL_53:
      if (!v30 || v29 != v31)
        goto LABEL_78;
LABEL_58:
      InferenceEngine::MLInferenceModel::get_model_parameters(*v8, (uint64_t)&v57);
      v38 = (std::__shared_weak_count *)operator new(0x40uLL);
      v38->__shared_owners_ = 0;
      v38->__shared_weak_owners_ = 0;
      v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935FF0;
      v39 = &v38[1].__vftable;
      v64.__r_.__value_.__s.__data_[0] = v57.__r_.__value_.__s.__data_[0];
      v64.__r_.__value_.__l.__size_ = v57.__r_.__value_.__l.__size_;
      v57.__r_.__value_.__s.__data_[0] = 0;
      v57.__r_.__value_.__l.__size_ = 0;
      InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(&v38[1], &v64);
      break;
    case 0xAuLL:
      v20 = (std::string *)v60.__r_.__value_.__r.__words[0];
LABEL_34:
      v32 = v20->__r_.__value_.__r.__words[0];
      v22 = LOWORD(v20->__r_.__value_.__r.__words[1]);
      v23 = v32 == 0x6D6F72705F613270;
      v24 = 29808;
LABEL_35:
      if (!v23 || v22 != v24)
        goto LABEL_78;
LABEL_40:
      v34 = *v8;
      std::string::basic_string[abi:ne180100]<0>(__p, "layer_groups");
      v35 = v34[1];
      memset(&v64, 0, sizeof(v64));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, 0, 0, 0);
      if (*((_BYTE *)v35 + 48) != 1
        || *((_QWORD *)v35 + 7) + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*((_QWORD *)v35 + 7), (const void **)__p))
      {
        v57 = v64;
        memset(&v64, 0, sizeof(v64));
      }
      else
      {
        v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)v35 + 48, (const void **)__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v36, &v57);
        if (v64.__r_.__value_.__r.__words[0])
        {
          v64.__r_.__value_.__l.__size_ = v64.__r_.__value_.__r.__words[0];
          operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
      v37 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
      if (v57.__r_.__value_.__r.__words[0])
      {
        v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
        operator delete((void *)v37);
      }
      if (v56 < 0)
        operator delete(__p[0]);
      InferenceEngine::MLInferenceModel::get_model_parameters(*v8, (uint64_t)&v57);
      v38 = (std::__shared_weak_count *)operator new(0x40uLL);
      v38->__shared_owners_ = 0;
      v38->__shared_weak_owners_ = 0;
      if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
      {
        v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9360D0;
        v39 = &v38[1].__vftable;
        v64.__r_.__value_.__s.__data_[0] = v57.__r_.__value_.__s.__data_[0];
        v64.__r_.__value_.__l.__size_ = v57.__r_.__value_.__l.__size_;
        v57.__r_.__value_.__s.__data_[0] = 0;
        v57.__r_.__value_.__l.__size_ = 0;
        InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(&v38[1], &v64);
      }
      else
      {
        v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B218;
        v39 = &v38[1].__vftable;
        v64.__r_.__value_.__s.__data_[0] = v57.__r_.__value_.__s.__data_[0];
        v64.__r_.__value_.__l.__size_ = v57.__r_.__value_.__l.__size_;
        v57.__r_.__value_.__s.__data_[0] = 0;
        v57.__r_.__value_.__l.__size_ = 0;
        InferenceEngine::P2ASoundStormLayerGroupIOProcessor::P2ASoundStormLayerGroupIOProcessor(&v38[1], &v64);
      }
      break;
    default:
LABEL_78:
      exception = __cxa_allocate_exception(0x10uLL);
      StringFormatter::StringFormatter((StringFormatter *)&v64, "Model type need to be one of the value from [default, prompt, p2a]");
      MEMORY[0x1DF0EC99C](exception, &v64);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v64.__r_.__value_.__l.__size_, v64.__r_.__value_.__s.__data_[0]);
  v58 = v39;
  v59 = v38;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v57.__r_.__value_.__l.__size_, v57.__r_.__value_.__s.__data_[0]);
  v41 = *v8;
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  v53 = v39;
  v54 = v38;
  do
    v43 = __ldxr(p_shared_owners);
  while (__stxr(v43 + 1, p_shared_owners));
  (*((void (**)(InferenceEngine::MilInferenceModel **, _QWORD **))*v41 + 5))(v41, &v53);
  v44 = v54;
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v59;
  if (v59)
  {
    v48 = (unint64_t *)&v59->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  std::mutex::unlock(v10);
  return a1;
}

void sub_1DE9FB4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void **v40;
  uint64_t v41;
  uint64_t v42;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v42);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v41);
  PersistentModule::~PersistentModule(v40);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<InferenceEngine::BaseInferenceController,std::allocator<InferenceEngine::BaseInferenceController>,std::string &,std::string &,void>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = operator new(0x68uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1EA936028;
  InferenceEngine::BaseInferenceController::BaseInferenceController(v6 + 3, a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_1DE9FB6BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9360D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9360D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormIOProcessor>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor((InferenceEngine::SoundStormIOProcessor *)(a1 + 24));
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA90B218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::P2ASoundStormLayerGroupIOProcessor>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::P2ASoundStormLayerGroupIOProcessor::~P2ASoundStormLayerGroupIOProcessor((InferenceEngine::P2ASoundStormLayerGroupIOProcessor *)(a1 + 24));
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA935FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::SoundStormIOProcessor>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor((InferenceEngine::SoundStormIOProcessor *)(a1 + 24));
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA936028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::BaseInferenceController>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::BaseInferenceController::~BaseInferenceController((InferenceEngine::BaseInferenceController *)(a1 + 24));
}

void SoundStormPersistentModule::~SoundStormPersistentModule(void **this)
{
  *this = &off_1EA921220;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921220;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void SoundStormStreamingPersistentModule::~SoundStormStreamingPersistentModule(void **this)
{
  *this = &off_1EA921220;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921220;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void NashvilleAdapterModule::~NashvilleAdapterModule(NashvilleAdapterModule *this)
{
  *(_QWORD *)this = off_1EA9203C0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  std::__tree<std::string>::destroy((uint64_t)this + 320, *((char **)this + 41));
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::string>::destroy((uint64_t)this + 272, *((char **)this + 35));
  Module::~Module(this);
}

{
  *(_QWORD *)this = off_1EA9203C0;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  std::__tree<std::string>::destroy((uint64_t)this + 320, *((char **)this + 41));
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::string>::destroy((uint64_t)this + 272, *((char **)this + 35));
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t NashvilleAdapterModule::clean_up(uint64_t this)
{
  *(_BYTE *)(this + 436) = 1;
  return this;
}

void NashvilleAdapterModule::process_data(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::recursive_mutex *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  unsigned __int16 *v47;
  int v48;
  int v49;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  int v58;
  int v59;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  BOOL v70;
  uint64_t v71;
  int v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v81;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const std::string::value_type *v87;
  int v90;
  int v91;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v100;
  int v101;
  int v102;
  std::string *p_str;
  std::string::size_type size;
  std::string *v105;
  std::string::size_type v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  int v111;
  std::string::const_iterator v112;
  std::string *v113;
  std::string::size_type v114;
  std::string::const_iterator v115;
  std::string *v116;
  std::string::size_type v117;
  int v118;
  uint64_t v119;
  std::string::size_type v120;
  uint64_t v121;
  std::string *v122;
  uint64_t *v123;
  uint64_t v124;
  std::string::size_type v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int *v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  int v135;
  int *v136;
  int v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  std::string::size_type v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  std::string *v155;
  uint64_t v156;
  int v157;
  const std::string::value_type *v158;
  std::string::size_type v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  int v165;
  _QWORD *v166;
  _QWORD *v167;
  int v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  int v181;
  std::vector<int>::pointer begin;
  int v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  int v193;
  int v194;
  int v195;
  int v196;
  const char *v197;
  int v198;
  int v199;
  const char *v200;
  std::string::size_type v201;
  uint64_t v202;
  std::string::size_type v203;
  std::string::size_type v204;
  std::string *v205;
  uint64_t v206;
  void *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const std::string *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  unsigned __int8 *v217;
  int valid;
  uint64_t v219;
  const char *v220;
  int32_t v221;
  NSObject *v222;
  const char *v223;
  std::string::size_type v224;
  std::string::size_type v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  std::string::size_type v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  std::string::size_type v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  int v243;
  std::string::size_type v244;
  std::string::pointer data;
  unint64_t v246;
  int64_t v247;
  uint64_t v248;
  uint64_t v249;
  BOOL v250;
  uint64_t v251;
  _DWORD *v252;
  unint64_t v253;
  int v254;
  int v255;
  _BOOL4 v256;
  int v257;
  char *v258;
  _DWORD *v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  std::string::size_type v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  BOOL v269;
  NSObject *v270;
  const char *v271;
  const void *v272;
  const void *v273;
  uint64_t v274;
  std::string::size_type v275;
  int v276;
  int v277;
  uint64_t v278;
  const std::string::value_type *v279;
  int v280;
  const std::string::value_type *v281;
  std::string::size_type v282;
  uint64_t v283;
  NSObject *v284;
  std::string *v285;
  const char *v286;
  std::string *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *exception;
  uint64_t i;
  void *v304;
  _QWORD *v305;
  _QWORD **v306;
  uint64_t v307;
  uint64_t *v308;
  std::string *v309;
  std::string *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  std::__shared_weak_count *v315;
  std::string v316;
  std::vector<int> v317;
  _QWORD *v318;
  std::__shared_weak_count *v319;
  std::string *v320;
  std::__shared_weak_count *v321;
  char *v322;
  std::__shared_weak_count *v323;
  _QWORD *v324;
  std::__shared_weak_count *v325;
  unsigned __int16 v326;
  _WORD v327[2];
  unsigned __int16 v328;
  __int16 v329;
  unsigned __int16 v330;
  char v331;
  std::string v332;
  _BYTE v333[136];
  uint64_t v334;
  _BYTE v335[32];
  _BYTE v336[36];
  uint64_t v337[6];
  uint64_t v338[6];
  uint64_t v339[6];
  uint64_t v340[6];
  uint64_t v341[6];
  uint64_t v342[6];
  uint64_t v343[6];
  uint64_t v344[6];
  uint64_t v345[6];
  uint64_t v346[6];
  uint64_t v347[6];
  uint64_t v348[6];
  uint64_t v349[6];
  uint64_t v350[6];
  uint64_t v351[6];
  uint64_t v352[6];
  uint64_t v353[6];
  uint64_t v354[6];
  uint64_t v355[6];
  uint64_t v356[6];
  uint64_t v357[6];
  uint64_t v358[6];
  uint64_t v359[6];
  uint64_t v360[6];
  uint64_t v361[6];
  uint64_t v362[6];
  uint64_t v363[6];
  uint64_t v364[6];
  uint64_t v365[6];
  uint64_t v366[6];
  uint64_t v367[6];
  uint64_t v368[6];
  uint64_t v369[6];
  uint64_t v370[6];
  uint64_t v371[6];
  uint64_t v372[6];
  uint64_t v373[6];
  uint64_t v374[6];
  uint64_t v375[6];
  uint64_t v376[6];
  uint64_t v377[6];
  uint64_t v378[6];
  uint64_t v379[6];
  uint64_t v380[6];
  uint64_t v381[6];
  uint64_t v382[6];
  uint64_t v383[6];
  uint64_t v384[6];
  uint64_t v385[6];
  uint64_t v386[6];
  uint64_t v387[6];
  uint64_t v388[6];
  uint64_t v389[6];
  uint64_t v390[6];
  uint64_t v391[6];
  uint64_t v392[6];
  uint64_t v393[6];
  uint64_t v394[6];
  uint64_t v395[6];
  uint64_t v396[6];
  uint64_t v397[6];
  uint64_t v398[6];
  uint64_t v399[6];
  uint64_t v400[6];
  uint64_t v401[6];
  uint64_t v402[6];
  uint64_t v403[6];
  uint64_t v404[6];
  uint64_t v405[6];
  uint64_t v406[6];
  uint64_t v407[6];
  uint64_t v408[6];
  uint64_t v409[6];
  uint64_t v410[6];
  uint64_t v411[6];
  uint64_t v412[6];
  uint64_t v413[6];
  uint64_t v414[6];
  uint64_t v415[6];
  uint64_t v416[6];
  uint64_t v417[6];
  uint64_t v418[6];
  uint64_t v419[6];
  uint64_t v420[6];
  uint64_t v421[6];
  uint64_t v422[6];
  uint64_t v423[6];
  uint64_t v424[6];
  uint64_t v425[6];
  uint64_t v426[6];
  uint64_t v427[6];
  uint64_t v428[6];
  uint64_t v429[6];
  uint64_t v430[6];
  uint64_t v431[6];
  uint64_t v432[6];
  uint64_t v433[6];
  uint64_t v434[6];
  uint64_t v435[6];
  uint64_t v436[6];
  uint64_t v437[6];
  uint64_t v438[6];
  uint64_t v439[6];
  uint64_t v440[6];
  uint64_t v441[6];
  uint64_t v442[6];
  uint64_t v443[6];
  uint64_t v444[6];
  uint64_t v445[6];
  uint64_t v446[6];
  uint64_t v447[6];
  uint64_t v448[6];
  uint64_t v449[6];
  uint64_t v450[6];
  uint64_t v451[6];
  uint64_t v452[6];
  uint64_t v453[6];
  uint64_t v454[6];
  uint64_t v455[6];
  uint64_t v456[6];
  uint64_t v457[6];
  uint64_t v458[6];
  uint64_t v459[6];
  uint64_t v460[6];
  uint64_t v461[6];
  uint64_t v462[6];
  uint64_t v463[6];
  uint64_t v464[6];
  uint64_t v465[6];
  uint64_t v466[6];
  uint64_t v467[6];
  uint64_t v468[6];
  uint64_t v469[6];
  uint64_t v470[6];
  uint64_t v471[6];
  uint64_t v472[6];
  uint64_t v473[6];
  uint64_t v474[6];
  uint64_t v475[6];
  uint64_t v476[6];
  uint64_t v477[6];
  uint64_t v478[6];
  uint64_t v479[6];
  uint64_t v480[6];
  uint64_t v481[6];
  uint64_t v482[6];
  uint64_t v483[6];
  uint64_t v484[6];
  uint64_t v485[6];
  uint64_t v486[6];
  uint64_t v487[6];
  uint64_t v488[6];
  uint64_t v489[6];
  uint64_t v490[6];
  uint64_t v491[6];
  uint64_t v492[6];
  uint64_t v493[6];
  uint64_t v494[6];
  uint64_t v495[6];
  uint64_t v496[6];
  uint64_t v497[6];
  uint64_t v498[6];
  uint64_t v499[6];
  uint64_t v500[6];
  uint64_t v501[6];
  uint64_t v502[6];
  uint64_t v503[6];
  uint64_t v504[6];
  uint64_t v505[6];
  uint64_t v506[6];
  uint64_t v507[6];
  uint64_t v508[6];
  uint64_t v509[6];
  uint64_t v510[6];
  uint64_t v511[6];
  uint64_t v512[6];
  uint64_t v513[6];
  uint64_t v514[6];
  uint64_t v515[6];
  uint64_t v516[6];
  uint64_t v517[6];
  uint64_t v518[6];
  uint64_t v519[6];
  uint64_t v520[6];
  uint64_t v521[6];
  uint64_t v522[6];
  uint64_t v523[6];
  uint64_t v524[6];
  uint64_t v525[6];
  uint64_t v526[6];
  uint64_t v527[6];
  uint64_t v528[6];
  uint64_t v529[6];
  uint64_t v530[6];
  uint64_t v531[6];
  uint64_t v532[6];
  uint64_t v533[6];
  uint64_t v534[6];
  uint64_t v535[6];
  uint64_t v536[6];
  uint64_t v537[6];
  uint64_t v538[6];
  uint64_t v539[6];
  uint64_t v540[6];
  uint64_t v541[6];
  uint64_t v542[6];
  uint64_t v543[6];
  uint64_t v544[6];
  uint64_t v545[6];
  uint64_t v546[6];
  uint64_t v547[6];
  uint64_t v548[6];
  uint64_t v549[6];
  uint64_t v550[6];
  uint64_t v551[6];
  uint64_t v552[6];
  uint64_t v553[6];
  uint64_t v554[6];
  uint64_t v555[6];
  uint64_t v556[6];
  uint64_t v557[6];
  uint64_t v558[6];
  uint64_t v559[6];
  uint64_t v560[6];
  uint64_t v561[6];
  uint64_t v562[6];
  uint64_t v563[6];
  uint64_t v564[6];
  uint64_t v565[6];
  uint64_t v566[6];
  uint64_t v567[6];
  uint64_t v568[6];
  uint64_t v569[6];
  uint64_t v570[6];
  uint64_t v571[6];
  uint64_t v572[6];
  uint64_t v573[6];
  uint64_t v574[6];
  uint64_t v575[6];
  uint64_t v576[6];
  uint64_t v577[6];
  uint64_t v578[6];
  uint64_t v579[6];
  uint64_t v580[6];
  uint64_t v581[6];
  uint64_t v582[6];
  uint64_t v583[6];
  _QWORD v584[6];
  std::string __str;
  unint64_t v586;
  std::string::value_type *v587;
  uint64_t v588;

  v311 = MEMORY[0x1E0C80A78](a1);
  v588 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(*(_QWORD *)v2 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)v2 + 16);
  v324 = v4;
  v325 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v312 = *v4;
  v7 = operator new(0x30uLL);
  *(_OWORD *)((char *)v7 + 8) = 0u;
  v7[2] = 0u;
  *(_QWORD *)v7 = &off_1EA932198;
  *((_QWORD *)v7 + 3) = v7 + 2;
  v8 = (uint64_t)v7 + 24;
  v322 = (char *)v7 + 24;
  v323 = (std::__shared_weak_count *)v7;
  v9 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v9 + 1) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1EA932E10;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *((_QWORD *)v9 + 21) = 0;
  v320 = (std::string *)(v9 + 24);
  v321 = (std::__shared_weak_count *)v9;
  *(_QWORD *)v333 = &__str;
  v12 = v11[5];
  if (v12)
  {
    *(_QWORD *)v333 = &off_1EA923288;
    *(_QWORD *)&v333[8] = v9 + 24;
    *(_QWORD *)&v333[16] = v9;
    do
      v13 = __ldxr(v10);
    while (__stxr(v13 + 1, v10));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v12 + 8, (__int128 *)&v333[8]);
    *(_QWORD *)v333 = &off_1EA923288;
    v14 = *(std::__shared_weak_count **)&v333[16];
    if (*(_QWORD *)&v333[16])
    {
      v15 = (unint64_t *)(*(_QWORD *)&v333[16] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v17 = (_QWORD *)operator new();
    *v17 = &off_1EA923288;
    v17[1] = v9 + 24;
    v17[2] = v9;
    do
      v18 = __ldxr(v10);
    while (__stxr(v18 + 1, v10));
    v19 = v11[5];
    v11[5] = (uint64_t)v17;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = *(_QWORD *)(v311 + 168);
  if (v20)
  {
    v318 = v4;
    v319 = v3;
    if (v3)
    {
      v21 = (unint64_t *)&v3->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (std::recursive_mutex *)(v20 + 56);
    std::recursive_mutex::lock((std::recursive_mutex *)(v20 + 56));
    Agglomerate::set<std::shared_ptr<NashvilleAdapterModuleInput>>(v20 + 32, (uint64_t *)&v318);
    v24 = v319;
    v318 = 0;
    v319 = 0;
    std::recursive_mutex::unlock(v23);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v319;
    if (v319)
    {
      v28 = (unint64_t *)&v319->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v30 = v324;
  v31 = v320;
  std::string::operator=(v320 + 4, (const std::string *)(v324 + 4));
  std::string::operator=(v31 + 5, (const std::string *)(v30 + 7));
  v310 = v31;
  v32 = v312;
  std::vector<int>::vector(&v317, *(__int16 *)(v312 + 10));
  if (*(__int16 *)(v312 + 10) >= 1)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = (uint64_t *)(v311 + 392);
    v309 = (std::string *)(v311 + 320);
    v307 = v311 + 328;
    v305 = (_QWORD *)(v311 + 280);
    v306 = (_QWORD **)(v311 + 272);
    do
    {
      memset(v333, 0, 25);
      *(_QWORD *)&v40 = 0x8000000080000000;
      *((_QWORD *)&v40 + 1) = 0x8000000080000000;
      *(_OWORD *)&v333[28] = v40;
      *(_OWORD *)&v333[44] = v40;
      *(_QWORD *)&v333[60] = 0x8000000080000000;
      memset(&v333[72], 0, 64);
      v334 = 0;
      *(_OWORD *)v335 = v40;
      *(_OWORD *)&v335[16] = v40;
      *(_OWORD *)v336 = v40;
      *(_OWORD *)&v336[16] = v40;
      *(_DWORD *)&v336[32] = 0x7FFFFFFF;
      PhoneConversion::get_string_phone(&__str, *(unsigned __int8 *)(*(_QWORD *)(v32 + 32) + v33), v39);
      std::string::operator=((std::string *)v333, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((v333[23] & 0x80) != 0)
      {
        if (*(_QWORD *)&v333[8] != 3)
        {
          v45 = 0;
          v333[24] = 0;
          v51 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 232) + v33);
          goto LABEL_58;
        }
        v41 = *(unsigned __int16 **)v333;
      }
      else
      {
        if (v333[23] != 3)
        {
          v45 = 0;
          v333[24] = 0;
          v46 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 232) + v33);
          *(_DWORD *)&v333[28] = v46;
          goto LABEL_49;
        }
        v41 = (unsigned __int16 *)v333;
      }
      v42 = *v41;
      v43 = *((unsigned __int8 *)v41 + 2);
      v44 = v42 == 26995 && v43 == 108;
      v45 = v44;
      v333[24] = v45;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 232) + v33);
      *(_DWORD *)&v333[28] = v46;
      if ((v333[23] & 0x80) != 0)
      {
        if (*(_QWORD *)&v333[8] != 3)
          goto LABEL_59;
        v47 = *(unsigned __int16 **)v333;
        goto LABEL_51;
      }
LABEL_49:
      if (v333[23] != 3)
        goto LABEL_59;
      v47 = (unsigned __int16 *)v333;
LABEL_51:
      v48 = *v47;
      v49 = *((unsigned __int8 *)v47 + 2);
      if (v48 == 26995 && v49 == 108)
      {
        v51 = (int)(float)(*(float *)(v311 + 432) * (float)v46);
LABEL_58:
        *(_DWORD *)&v333[28] = v51;
      }
LABEL_59:
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 216) + v33);
      if (*(_BYTE *)(*(_QWORD *)(v312 + 216) + v33))
        v52 = ScaledLogToHz[3 * *(unsigned __int8 *)(*(_QWORD *)(v312 + 216) + v33) - 270];
      *(_DWORD *)&v333[32] = v52;
      v53 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 160) + v33);
      *(_DWORD *)&v333[36] = v53;
      v54 = *(unsigned __int8 *)(v311 + 415);
      if ((v54 & 0x80) != 0)
      {
        if (*(_QWORD *)(v311 + 400) == 5)
        {
          v56 = *v39;
          if (*(_DWORD *)*v39 == 1311597166 && *(_BYTE *)(*v39 + 4) == 79)
            goto LABEL_79;
          goto LABEL_74;
        }
      }
      else if (v54 == 5)
      {
        v55 = *(_DWORD *)v39 == 1311597166 && *(_BYTE *)(v311 + 396) == 79;
        v56 = v311 + 392;
        if (v55)
          goto LABEL_79;
LABEL_74:
        v58 = *(_DWORD *)v56;
        v59 = *(unsigned __int8 *)(v56 + 4);
        if (v58 == 1395488371 && v59 == 69)
          goto LABEL_79;
      }
      v53 = v53 != 0;
LABEL_79:
      *(_DWORD *)&v335[8] = v53;
      v61 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 184) + v33);
      if (v61 != 4)
        v45 = 0;
      if (!*(_BYTE *)(*(_QWORD *)(v312 + 184) + v33))
        v45 = 1;
      v34 += v45;
      if (v61 == 1)
        v62 = v35 + 1;
      else
        v62 = v35;
      v35 = v62 + v45;
      *(_DWORD *)&v333[40] = *(unsigned __int8 *)(*(_QWORD *)(v312 + 184) + v33);
      *(_DWORD *)v335 = v62 + v45;
      *(_DWORD *)&v335[4] = v34;
      *(_DWORD *)&v333[44] = *(unsigned __int8 *)(*(_QWORD *)(v312 + 152) + v33);
      v63 = *(_QWORD *)(v312 + 536);
      if (!v63)
        v63 = *(_QWORD *)(v312 + 88);
      *(_DWORD *)&v333[48] = *(unsigned __int8 *)(v63 + v33);
      *(_DWORD *)&v333[52] = *(unsigned __int8 *)(*(_QWORD *)(v312 + 248) + v33);
      v64 = *(_QWORD *)(v312 + 272);
      if (v64)
        *(_DWORD *)&v333[56] = *(unsigned __int8 *)(v64 + v33);
      v65 = *(_QWORD *)(v312 + 264);
      if (v65)
      {
        if ((v54 & 0x80) != 0)
        {
          if (*(_QWORD *)(v311 + 400) != 5)
            goto LABEL_120;
          v66 = *v39;
        }
        else
        {
          v66 = v311 + 392;
          if (v54 != 5)
            goto LABEL_120;
        }
        v67 = *(_DWORD *)v66;
        v68 = *(unsigned __int8 *)(v66 + 4);
        if (v67 != 1311597166 || v68 != 79)
          goto LABEL_120;
      }
      if ((v54 & 0x80) != 0)
      {
        if (*(_QWORD *)(v311 + 400) != 5)
          goto LABEL_121;
        v71 = *v39;
        if (*(_DWORD *)*v39 == 1311597166 && *(_BYTE *)(*v39 + 4) == 79)
        {
LABEL_119:
          v65 = *(_QWORD *)(v312 + 280);
LABEL_120:
          *(_DWORD *)&v333[60] = *(unsigned __int8 *)(v65 + v33);
          goto LABEL_121;
        }
      }
      else
      {
        if (v54 != 5)
          goto LABEL_121;
        v70 = *(_DWORD *)v39 == 1311597166 && *(_BYTE *)(v311 + 396) == 79;
        v71 = v311 + 392;
        if (v70)
          goto LABEL_119;
      }
      v73 = *(_DWORD *)v71;
      v74 = *(unsigned __int8 *)(v71 + 4);
      if (v73 == 1395488371 && v74 == 69)
        goto LABEL_119;
LABEL_121:
      v76 = *(_QWORD *)(v312 + 616);
      if (v76)
        *(_DWORD *)&v333[64] = *(unsigned __int8 *)(v76 + v33);
      if ((v54 & 0x80) != 0)
      {
        if (*(_QWORD *)(v311 + 400) != 5)
          goto LABEL_132;
        v77 = *v39;
      }
      else
      {
        v77 = v311 + 392;
        if (v54 != 5)
          goto LABEL_132;
      }
      v78 = *(_DWORD *)v77;
      v79 = *(unsigned __int8 *)(v77 + 4);
      if (v78 == 1244488042 && v79 == 80)
      {
        v85 = v38;
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_1");
        v86 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v309, (const void **)&__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v44 = v307 == v86;
        v38 = v85;
        if (!v44
          && v305 != (_QWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v306, (const void **)v333))
        {
          if (*(_BYTE *)(*(_QWORD *)(v312 + 88) + v33))
            v87 = "_1";
          else
            v87 = "_0";
          std::string::append((std::string *)v333, v87);
        }
      }
LABEL_132:
      std::string::operator=((std::string *)&v333[96], (const std::string *)v333);
      if (!*(_QWORD *)(v311 + 336))
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)v309, *v306, v305);
      if (*(_DWORD *)&v335[8]
        && v307 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v309, (const void **)&v333[96]))
      {
        std::string::push_back((std::string *)&v333[96], 58);
      }
      if (*(_DWORD *)&v333[60] == 0x7FFFFFFF)
        goto LABEL_258;
      v81 = *(char *)(v311 + 415);
      if (v81 < 0)
      {
        if (*(_QWORD *)(v311 + 400) != 5)
          goto LABEL_173;
        v84 = *v39;
        if ((*(_DWORD *)*v39 != 1127049338 || *(_BYTE *)(*v39 + 4) != 78)
          && (*(_DWORD *)v84 != 1412262010 || *(_BYTE *)(v84 + 4) != 87))
        {
LABEL_167:
          v90 = *(_DWORD *)v84;
          v91 = *(unsigned __int8 *)(v84 + 4);
          if (v90 != 1210935418 || v91 != 75)
            goto LABEL_173;
        }
      }
      else
      {
        if (v81 != 5)
          goto LABEL_173;
        if (*(_DWORD *)v39 != 1127049338 || *(_BYTE *)(v311 + 396) != 78)
        {
          v83 = *(_DWORD *)v39 == 1412262010 && *(_BYTE *)(v311 + 396) == 87;
          v84 = v311 + 392;
          if (!v83)
            goto LABEL_167;
        }
      }
      if (!*(_QWORD *)(v311 + 312))
      {
        v101 = *(_DWORD *)&v333[56];
        v102 = *(_DWORD *)&v333[64];
        if (*(_DWORD *)&v333[56] == 8)
          v101 = 0;
        if (*(_DWORD *)&v333[64] == 8)
          v102 = 0;
        *(_DWORD *)&v333[56] = v101;
        *(_DWORD *)&v333[64] = v102;
        if (v305 != (_QWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)v306, (const void **)v333)&& *(_DWORD *)&v333[60])
        {
          std::to_string(&__str, *(int *)&v333[60]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          std::string::append((std::string *)&v333[96], (const std::string::value_type *)p_str, size);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          std::to_string(&__str, *(int *)&v333[60]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v105 = &__str;
          else
            v105 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v106 = __str.__r_.__value_.__l.__size_;
          std::string::append((std::string *)v333, (const std::string::value_type *)v105, v106);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_258;
      }
LABEL_173:
      if (v311 + 304 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v311 + 296, (const void **)&v333[96]))goto LABEL_258;
      v93 = *(_DWORD *)&v333[56];
      v94 = *(_DWORD *)&v333[64];
      if (*(_DWORD *)&v333[56] == 8)
        v93 = 0;
      if (*(_DWORD *)&v333[64] == 8)
        v94 = 0;
      *(_DWORD *)&v333[56] = v93;
      *(_DWORD *)&v333[64] = v94;
      v95 = *(unsigned __int8 *)(v311 + 415);
      if ((v95 & 0x80) != 0)
      {
        if (*(_QWORD *)(v311 + 400) != 5)
          goto LABEL_230;
        v96 = *v39;
      }
      else
      {
        v96 = v311 + 392;
        if (v95 != 5)
          goto LABEL_230;
      }
      v97 = *(_DWORD *)v96;
      v98 = *(unsigned __int8 *)(v96 + 4);
      if (v97 == 1311597166 && v98 == 79)
      {
        if ((*(_DWORD *)&v335[8] - 1) < 6)
          v107 = *(_DWORD *)&v333[60] + 1;
        else
          v107 = 0;
        *(_DWORD *)&v333[60] = v107;
        if ((v95 & 0x80) != 0)
        {
LABEL_217:
          if (*(_QWORD *)(v311 + 400) != 5)
            goto LABEL_230;
          v100 = *v39;
          goto LABEL_219;
        }
      }
      else if ((v95 & 0x80) != 0)
      {
        goto LABEL_217;
      }
      v100 = v311 + 392;
      if (v95 != 5)
        goto LABEL_230;
LABEL_219:
      v108 = *(_DWORD *)v100;
      v109 = *(unsigned __int8 *)(v100 + 4);
      v110 = v108 == 1395488371 && v109 == 69;
      if (!v110 || *(int *)&v335[8] < 1)
      {
LABEL_230:
        v111 = *(_DWORD *)&v333[60];
        if (*(_DWORD *)&v333[60])
          goto LABEL_231;
        goto LABEL_258;
      }
      if (*(_DWORD *)&v335[8] <= 6u)
      {
        if (*(_DWORD *)&v333[60] <= 1u)
          v111 = 1;
        else
          v111 = *(_DWORD *)&v333[60];
        *(_DWORD *)&v333[60] = v111;
LABEL_231:
        std::to_string(&v332, v111);
        if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v332;
        else
          v112.__i_ = (std::__wrap_iter<const char *>::iterator_type)v332.__r_.__value_.__r.__words[0];
        std::string::insert(&v332, v112, 95);
        __str = v332;
        memset(&v332, 0, sizeof(v332));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &__str;
        else
          v113 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v114 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)&v333[96], (const std::string::value_type *)v113, v114);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v332.__r_.__value_.__l.__data_);
        std::to_string(&v332, *(int *)&v333[60]);
        if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v332;
        else
          v115.__i_ = (std::__wrap_iter<const char *>::iterator_type)v332.__r_.__value_.__r.__words[0];
        std::string::insert(&v332, v115, 95);
        __str = v332;
        memset(&v332, 0, sizeof(v332));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &__str;
        else
          v116 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v117 = __str.__r_.__value_.__l.__size_;
        std::string::append((std::string *)v333, (const std::string::value_type *)v116, v117);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v332.__r_.__value_.__l.__data_);
        goto LABEL_258;
      }
      *(_DWORD *)&v333[60] = 0;
LABEL_258:
      if (v333[24])
      {
        *(_QWORD *)&v335[12] = 0;
        *(_QWORD *)&v336[28] = 0;
        *(_QWORD *)&v336[4] = 0;
        *(_QWORD *)&v336[12] = 0;
      }
      else
      {
        if (*(_DWORD *)&v333[40])
          v118 = v38 & (v37 != 0);
        else
          v118 = 1;
        *(_DWORD *)&v335[12] = v118;
        *(_DWORD *)&v335[16] = *(_DWORD *)&v333[40] == 4;
        if ((v38 & (v37 != 0)) == 1)
          *(_DWORD *)&v333[40] = 0;
        v37 = 0;
        *(_DWORD *)&v336[32] = 0;
        *(_DWORD *)&v336[28] = 0;
        *(_QWORD *)&v336[4] = 0;
        *(_QWORD *)&v336[12] = 0;
        v38 = 0;
        switch(*(_DWORD *)&v333[44])
        {
          case 0:
            *(_DWORD *)&v336[12] = 1;
            *(_DWORD *)&v336[28] = 1;
            goto LABEL_282;
          case 1:
            v37 = 0;
            v38 = 0;
            *(_DWORD *)&v336[16] = 1;
            goto LABEL_287;
          case 2:
            *(_QWORD *)&v336[12] = 0x100000001;
            *(_QWORD *)&v336[28] = 0x100000001;
LABEL_282:
            v37 = 0;
            v38 = 0;
            if (*(_DWORD *)&v335[4] == 2)
              *(_DWORD *)&v336[4] = 1;
            break;
          case 3:
            v37 = 0;
            v38 = 0;
            *(_DWORD *)&v336[8] = 1;
            *(_DWORD *)&v336[16] = 1;
            *(_QWORD *)&v336[28] = 0x100000001;
            break;
          case 4:
            v37 = 0;
            v38 = 0;
            *(_DWORD *)&v336[28] = 1;
            break;
          case 5:
            break;
          case 6:
            v37 = 0;
            v38 = 0;
LABEL_287:
            *(_DWORD *)&v336[32] = 1;
            break;
          default:
            v38 = 0;
            break;
        }
      }
      *(_DWORD *)v336 = 1;
      *(_DWORD *)&v336[20] = *(unsigned __int8 *)(*(_QWORD *)(v312 + 104) + v33);
      v317.__begin_[v33 - v36] += *(unsigned __int16 *)(*(_QWORD *)(v312 + 1800) + 2 * v33);
      if (v311 + 352 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v311 + 344, (const void **)v333))
      {
        v119 = v38;
        v120 = v310->__r_.__value_.__l.__size_;
        if (v120 >= v310->__r_.__value_.__r.__words[2])
        {
          v121 = std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>((uint64_t *)v310, (const PhoneFeature *)v333);
          v38 = v119;
          v122 = v310;
        }
        else
        {
          PhoneFeature::PhoneFeature((std::string *)v310->__r_.__value_.__l.__size_, (const PhoneFeature *)v333);
          v121 = v120 + 216;
          v122 = v310;
          v310->__r_.__value_.__l.__size_ = v120 + 216;
          v38 = v119;
        }
        v122->__r_.__value_.__l.__size_ = v121;
      }
      else
      {
        ++v36;
        v38 = 1;
        v37 = *(_DWORD *)&v335[12];
      }
      if (SHIBYTE(v334) < 0)
        operator delete(*(void **)&v333[120]);
      if ((v333[119] & 0x80000000) != 0)
        operator delete(*(void **)&v333[96]);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v333[72];
      std::vector<MarkerRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if ((v333[23] & 0x80000000) != 0)
        operator delete(*(void **)v333);
      ++v33;
      v32 = v312;
    }
    while (v33 < *(__int16 *)(v312 + 10));
  }
  if (*(char *)(v311 + 415) < 0)
    std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(v311 + 392), *(_QWORD *)(v311 + 400));
  else
    v316 = *(std::string *)(v311 + 392);
  v123 = (uint64_t *)v310;
  v124 = v310->__r_.__value_.__r.__words[0];
  v125 = v310->__r_.__value_.__l.__size_;
  if (v125 != v310->__r_.__value_.__r.__words[0])
  {
    v126 = 0;
    v127 = 0x84BDA12F684BDA13 * ((uint64_t)(v125 - v310->__r_.__value_.__r.__words[0]) >> 3);
    v128 = 256;
    while (1)
    {
      v129 = (int *)(v124 + v128);
      if (++v126 >= v127)
      {
        v130 = 0x7FFFFFFF;
        v131 = 0x7FFFFFFF;
      }
      else
      {
        v130 = *v129;
        v131 = v129[27];
      }
      v132 = *(v129 - 54);
      v133 = *(v129 - 27);
      *(_QWORD *)(v129 - 25) = 0;
      *(_QWORD *)(v129 - 23) = 0;
      *(v129 - 21) = 0;
      if (*((_BYTE *)v129 - 232))
        goto LABEL_313;
      *(v129 - 25) = v132 == 0;
      if (v132 == 4 || !(v132 | v130) || v133 != v131)
        *(v129 - 24) = 1;
      *(v129 - 23) = v132 < 2;
      *(v129 - 22) = v132 == 2;
      if (v132)
      {
        if (v132 != 3)
        {
          if (v132 != 1)
          {
            if (v132 != 4)
              goto LABEL_313;
            goto LABEL_312;
          }
LABEL_310:
          if (v130 != 1
            || v311 + 280 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v311 + 272, (const void **)v129 - 32))
          {
            goto LABEL_313;
          }
        }
      }
      else if (v130)
      {
        goto LABEL_310;
      }
LABEL_312:
      *(v129 - 21) = 1;
LABEL_313:
      v124 = v310->__r_.__value_.__r.__words[0];
      v125 = v310->__r_.__value_.__l.__size_;
      v127 = 0x84BDA12F684BDA13 * ((uint64_t)(v125 - v310->__r_.__value_.__r.__words[0]) >> 3);
      v128 += 216;
      if (v126 >= v127)
      {
        v123 = (uint64_t *)v310;
        goto LABEL_316;
      }
    }
  }
  v124 = v310->__r_.__value_.__l.__size_;
LABEL_316:
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v316.__r_.__value_.__l.__data_);
    v124 = *v123;
    v125 = v123[1];
  }
  if (v124 != v125)
  {
    v134 = (uint64_t)(v125 - v124) / 216;
    v135 = *(_DWORD *)(v125 - 68) - 1;
    if (v134 <= 1)
      v134 = 1;
    v136 = (int *)(v124 + 200);
    while (1)
    {
      *v136 = 0;
      v137 = *(v136 - 13);
      if (v137 < 3)
        break;
      if (v137 >= v135)
      {
        v138 = 2;
        goto LABEL_326;
      }
LABEL_327:
      v136 += 54;
      if (!--v134)
        goto LABEL_328;
    }
    v138 = 1;
LABEL_326:
    *v136 = v138;
    goto LABEL_327;
  }
LABEL_328:
  std::string::basic_string[abi:ne180100]<0>(v333, "cw");
  v139 = (_QWORD *)(v311 + 368);
  v140 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v311 + 368, (const void **)v333);
  v141 = (_QWORD *)(v311 + 376);
  if ((v333[23] & 0x80000000) != 0)
    operator delete(*(void **)v333);
  v143 = *v123;
  v142 = v123[1];
  if (v141 != (_QWORD *)v140)
  {
    v144 = *v123;
    goto LABEL_361;
  }
  v144 = v123[1];
  if (v143 != v142)
  {
    if (*(char *)(v143 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)v143, *(_QWORD *)(v143 + 8));
    }
    else
    {
      v145 = *(_OWORD *)v143;
      v332.__r_.__value_.__r.__words[2] = *(_QWORD *)(v143 + 16);
      *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v145;
    }
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[2],0>(v333);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(&v333[48], "@ b O r d", "aboard");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(&v333[96], "@ b aU t", "about");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v335, "@ b V v", "above");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(&v336[16], "{ b s @ n t", "absent");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v337, "@ k O r d I ng", "according");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v338);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v339, "@ k r A s", "across");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v340, "{ f t @r", "after");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v341, "@ g E n s t", "against");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v342, "@ h E d", "ahead");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v343, "O l b i I t", "albeit");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v344, "O l", "all");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v345, "@ l O ng", "along");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v346, "@ l O ng s aI d", "alongside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v347);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v348, "@ m I d", "amid");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v349, "@ m I d s t", "amidst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v350, "@ m V ng", "among");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v351, "@ m V ng s t", "amongst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v352, "@ n", "an");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v353, "{ n d", "and");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v354, "@ n V D @r", "another");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v355);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v356, "E n i", "any");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v357, "E n i b A 4 i", "anybody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v358, "E n i w V n", "anyone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v359, "E n i T I ng", "anything");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v360, "@ r aU n d", "around");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v361, "{ z", "as");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v362, "@ s aI d", "aside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v363, "@ s t r { 4 l=", "astraddle");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v364, "@ s t r aI d", "astride");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v365, "{ t", "at");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v366, "@ w e", "away");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v367, "b A r", "bar");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v368, "b A r I ng", "barring");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v369, "b i", "be");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v370, "b i k V z", "because");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v371, "b i f O r", "before");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v372, "b i h aI n d", "behind");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v373, "b @ l o", "below");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v374, "b I n i T", "beneath");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v375, "b I s aI d", "beside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v376, "b @ s aI d z", "besides");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v377, "b i t w i n", "between");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v378, "b i j A n d", "beyond");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v379, "b o T", "both");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v380, "b V t", "but");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v381, "b aI", "by");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v382, "k { n", "can");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v383, "s @r t n=", "certain");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v384, "s @r k @", "circa");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v385, "k l o s", "close");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[11],0>(v386, "k @ n s @r n I ng", "concerning");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v387);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[12],0>(v388);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v389, "k U d", "could");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v390, "d E r", "dare");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v391, "d I s p aI t", "despite");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v392, "d aU n", "down");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v393, "d u", "due");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v394, "d U r I ng", "during");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v395, "i tS", "each");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v396, "e t", "eight");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "i D @r", "either");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v398, "I n V f", "enough");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v399, "E v r i", "every");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v400, "E v r i b A 4 i", "everybody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v401, "E v r i w V n", "everyone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v402, "E v r i T I ng", "everything");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v403, "I k s E p t", "except");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(v404, "I k s E p t I ng", "excepting");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[10],0>(v405);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v406, "f e l I ng", "failing");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v407, "f j u", "few");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v408, "f j u @r", "fewer");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v409, "f aI v", "five");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v410, "f A l o I ng", "following");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v411, "f O r", "for");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v412, "f O r", "four");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v413, "f r A m", "from");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v414, "g I v @ n", "given");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v415, "h { d", "had");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v416, "h { v", "have");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v417, "h i", "he");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v418, "h i p s", "heaps");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v419, "h E n s", "hence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v420, "h @r", "her");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v421, "h @r z", "hers");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v422, "h @r s E l f", "herself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v423, "h I m", "him");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v424, "h I m s E l f", "himself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v425, "h I z", "his");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v426, "h aU E v @r", "however");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v427);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v428, "I f", "if");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v429, "I n", "in");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v430);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v431, "I n s aI d", "inside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v432, "I n s t E d", "instead");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v433, "I n t U", "into");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v434, "I t", "it");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v435, "I t s", "its");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v436, "I t s E l f", "itself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v437, "l E s", "less");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v438, "l aI k", "like");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v439);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v440, "l o d z", "loads");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v441, "l A t s", "lots");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v442, "m E n i", "many");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v443, "m { s I z", "masses");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v444, "m e", "may");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v445, "m i", "me");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v446, "m aI t", "might");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v447, "m aI n", "mine");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[6],0>(v448);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v449, "m O r", "more");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v450, "m o s t", "most");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v451, "m V tS", "much");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v452, "m V s t", "must");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v453, "m aI", "my");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v454, "m aI s E l f", "myself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v455, "n i r", "near");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v456, "n i d", "need");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v457, "n i D @r", "neither");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(v458);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v459, "n E k s t", "next");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v460, "n aI n", "nine");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v461, "n o", "no");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v462, "n o b @ 4 i", "nobody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v463, "n V n", "none");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v464, "n o w V n", "no_one");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v465, "n O r", "nor");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v466, "n V T I ng", "nothing");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v467);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v468, "n V m b @r z", "numbers");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v469, "V v", "of");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v470, "@ v", "of");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v471, "O f", "off");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v472, "A n", "on");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v473, "w V n s", "once");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v474, "w V n", "one");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v475, "A n t u", "onto");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v476);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v477, "O r", "or");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v478, "V D @r", "other");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v479, "O t", "ought");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v480, "A r", "our");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v481, "A r z", "ours");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v482, "aU r s E l v z", "ourselves");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v483, "aU t", "out");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v484, "aU t s aI d", "outside");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v485, "o v @r", "over");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v486, "p A r t", "part");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v487, "p { s t", "past");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v488, "p E n d I ng", "pending");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v489, "p @r", "per");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v490, "p @r t e n I ng", "pertaining");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v491, "p l E n 4 i", "plenty");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v492, "p l V s", "plus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[11],0>(v493, "k w A n t @ 4 i z", "quantities");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[10],0>(v494, "r I g A r d I ng", "regarding");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v495);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v496, "r aU n d", "round");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v497, "s e v", "save");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v498, "s e v I ng", "saving");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v499, "s E v @ n", "seven");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v500, "s E v r l=", "several");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v501, "S { l", "shall");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v502, "S i", "she");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v503, "S U d", "should");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v504, "s I m @ l @r", "similar");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v505, "s I n s", "since");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[4],0>(v506);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v507, "s o", "so");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v508, "s V m", "some");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v509, "s V m b V 4 i", "somebody");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v510, "s V m w V n", "someone");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v511, "s V m T I ng", "something");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v512, "s V tS", "such");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v513, "t E n", "ten");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v514, "D { n", "than");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v515, "T { ng k s", "thanks");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v516, "D { t", "that");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v517, "D @", "the");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v518, "D E r", "their");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v519, "D E r z", "theirs");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v520, "D E m", "them");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v521, "D @ m s E l v z", "themselves");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v522, "D E n", "then");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v523, "D E n s", "thence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v524);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v525, "D i z", "these");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v526);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v527, "D I s", "this");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v528, "D o z", "those");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v529);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v530, "T r i", "three");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v531);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v532);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v533, "T r u", "thru");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v534, "D V s", "thus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v535, "t I l", "till");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v536, "t u", "to");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v537, "t V n z", "tons");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v538, "t w O r d", "toward");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v539, "t w O r d z", "towards");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v540, "t u", "two");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v541, "V n d @r", "under");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v542, "V n d @r n i T", "underneath");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v543, "@ n l E s", "unless");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v544, "V n l aI k", "unlike");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v545, "@ n t I l", "until");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v546, "V n t u", "unto");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v547, "V p", "up");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v548, "@ p A n", "upon");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v549, "V s", "us");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v550, "j u z d", "used");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v551, "v E r i @ s", "various");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v552, "v @r s @ s", "versus");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v553, "v i @", "via");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v554, "w A n t I ng", "wanting");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v555, "w i", "we");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v556, "w A t", "what");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v557, "w A 4 E v @r", "whatever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v558, "w E n", "when");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v559, "w E n s", "whence");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v560, "w E n E v @r", "whenever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v561, "w E r", "where");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v562, "w E r { z", "whereas");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v563, "w E r E v @r", "wherever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v564, "w E D @r", "whether");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v565, "w I tS", "which");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v566);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v567, "w aI l", "while");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[7],0>(v568, "w aI l s t", "whilst");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v569, "h u", "who");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v570, "h u E v @r", "whoever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v571, "h u m", "whom");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v572, "h u m E v @r", "whomever");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v573, "h u z", "whose");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v574, "w I l", "will");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v575, "w I D", "with");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v576, "w I D I n", "within");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v577, "w I D aU t", "without");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v578, "w U d", "would");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v579, "j E t", "yet");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v580, "j u", "you");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v581, "j @r", "your");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v582, "j O r z", "yours");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v583, "j @r s E l f", "yourself");
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v584, "j O r s E l v z", "yourselves");
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__str, (const void **)v333, 253);
      NeverDestructed<std::map<std::string,std::string>>::NeverDestructed<>((uint64_t **)&get_word_trans_dict(void)::WORD_TRANS_DICT, (const void ***)&__str);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__str, (_QWORD *)__str.__r_.__value_.__l.__size_);
      for (i = 0; i != -1518; i -= 6)
        std::pair<std::string,std::string>::~pair((uint64_t)&v584[i]);
      v123 = (uint64_t *)v310;
    }
    v147 = get_word_trans_dict(void)::WORD_TRANS_DICT;
    v148 = *v123;
    if (v123[1] - *v123 == 216)
    {
      v149 = 0;
    }
    else
    {
      v150 = 0;
      v151 = 0;
      v152 = get_word_trans_dict(void)::WORD_TRANS_DICT + 8;
      v153 = 1;
      do
      {
        v154 = v150 + 1;
        if (*(_DWORD *)(v148 + 216 * v150 + 148) == *(_DWORD *)(v148 + 216 * v150 + 364))
        {
          v155 = std::string::append(&v332, " ");
          v156 = v310->__r_.__value_.__r.__words[0] + 216 * v154;
          v157 = *(char *)(v156 + 23);
          if (v157 >= 0)
            v158 = (const std::string::value_type *)(v310->__r_.__value_.__r.__words[0] + 216 * v154);
          else
            v158 = *(const std::string::value_type **)v156;
          if (v157 >= 0)
            v159 = *(unsigned __int8 *)(v156 + 23);
          else
            v159 = *(_QWORD *)(v156 + 8);
          std::string::append(v155, v158, v159);
        }
        else
        {
          v160 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v147, (const void **)&v332.__r_.__value_.__l.__data_);
          v161 = v310->__r_.__value_.__r.__words[0];
          if (v150 >= v151)
          {
            v162 = v151;
            v163 = (_DWORD *)(v161 + 216 * v151 + 176);
            do
            {
              *v163 = v152 == v160;
              v163 += 54;
              ++v162;
            }
            while (v153 != v162);
          }
          std::string::operator=(&v332, (const std::string *)(v161 + 216 * v154));
          v151 = v150 + 1;
        }
        v148 = v310->__r_.__value_.__r.__words[0];
        v164 = 0x84BDA12F684BDA13
             * ((uint64_t)(v310->__r_.__value_.__l.__size_ - v310->__r_.__value_.__r.__words[0]) >> 3);
        ++v153;
        ++v150;
      }
      while (v154 < v164 - 1);
      v149 = v164 - 1;
      if ((_DWORD)v164 == 1)
      {
        v139 = (_QWORD *)(v311 + 368);
        v123 = (uint64_t *)v310;
      }
      else
      {
        v165 = v164 - 2;
        v139 = (_QWORD *)(v311 + 368);
        v123 = (uint64_t *)v310;
        if (*(_DWORD *)(v148 + 216 * v149 + 148) == *(_DWORD *)(v148 + 216 * v165 + 148))
        {
          *(_DWORD *)(v148 + 216 * v149 + 176) = *(_DWORD *)(v148 + 216 * v165 + 176);
LABEL_358:
          if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v332.__r_.__value_.__l.__data_);
          v144 = *v123;
          v142 = v123[1];
          goto LABEL_361;
        }
      }
    }
    *(_DWORD *)(*v123 + 216 * v149 + 176) = v147 + 8 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v147, (const void **)&v332.__r_.__value_.__l.__data_);
    goto LABEL_358;
  }
LABEL_361:
  v166 = (_QWORD *)*v139;
  if ((_QWORD *)*v139 != v141)
  {
    do
    {
      v167 = v166 + 4;
      if (*((char *)v166 + 55) < 0)
      {
        v169 = v166[5];
        switch(v169)
        {
          case 2:
            v167 = (_QWORD *)*v167;
LABEL_387:
            if (*(_WORD *)v167 == 30563)
            {
              if (v144 != v142)
              {
                v176 = v144;
                do
                {
                  *(_DWORD *)(v176 + 176) = 0;
                  v176 += 216;
                }
                while (v176 != v142);
              }
            }
            else if (*(_WORD *)v167 == 26995)
            {
              if (v144 != v142)
              {
                v177 = v144;
                do
                {
                  *(_DWORD *)(v177 + 164) = 0;
                  v177 += 216;
                }
                while (v177 != v142);
              }
            }
            else if (*(_WORD *)v167 == 26227 && v144 != v142)
            {
              v175 = v144;
              do
              {
                *(_DWORD *)(v175 + 172) = 0;
                v175 += 216;
              }
              while (v175 != v142);
            }
            break;
          case 4:
            v167 = (_QWORD *)*v167;
LABEL_379:
            if (*(_DWORD *)v167 == 1836020336 && v144 != v142)
            {
              v173 = v144;
              do
              {
                *(_DWORD *)(v173 + 48) = 0;
                v173 += 216;
              }
              while (v173 != v142);
            }
            break;
          case 6:
            v167 = (_QWORD *)*v167;
LABEL_371:
            if (*(_DWORD *)v167 ^ 0x65727473 | *((unsigned __int16 *)v167 + 2) ^ 0x7373)
              v170 = 1;
            else
              v170 = v144 == v142;
            if (!v170)
            {
              v171 = v144;
              do
              {
                *(_DWORD *)(v171 + 152) = 0;
                v171 += 216;
              }
              while (v171 != v142);
            }
            break;
        }
      }
      else
      {
        v168 = *((unsigned __int8 *)v166 + 55);
        switch(v168)
        {
          case 2:
            goto LABEL_387;
          case 4:
            goto LABEL_379;
          case 6:
            goto LABEL_371;
        }
      }
      v178 = (_QWORD *)v166[1];
      if (v178)
      {
        do
        {
          v179 = v178;
          v178 = (_QWORD *)*v178;
        }
        while (v178);
      }
      else
      {
        do
        {
          v179 = (_QWORD *)v166[2];
          v44 = *v179 == (_QWORD)v166;
          v166 = v179;
        }
        while (!v44);
      }
      v166 = v179;
    }
    while (v179 != v141);
  }
  if (v142 != v144)
  {
    v180 = 0;
    v181 = 0;
    begin = v317.__begin_;
    while (1)
    {
      if (begin[v180] < 1)
        goto LABEL_487;
      v183 = begin[v180];
      if (v183 >= 1)
        break;
      v181 += v183;
LABEL_487:
      if (++v180 >= 0x84BDA12F684BDA13 * ((uint64_t)(v142 - v144) >> 3))
        goto LABEL_488;
    }
    v184 = (uint64_t *)(v144 + 216 * v180);
    v185 = v184 + 9;
    v186 = v184 + 10;
    v187 = v184 + 11;
    v188 = v181;
    while (1)
    {
      v189 = *(_QWORD *)(v312 + 3512);
      v190 = v189 + 32 * v188;
      *(_DWORD *)&v333[4] = 0x7FFFFFFF;
      memset(&v333[8], 0, 42);
      v191 = *(_QWORD *)(v190 + 4);
      *(_QWORD *)&v192 = v191;
      *((_QWORD *)&v192 + 1) = HIDWORD(v191);
      *(_OWORD *)&v333[32] = v192;
      v193 = *(_DWORD *)v190;
      if (v193 > 15)
        break;
      if (v193 == 1)
      {
        v198 = 3;
LABEL_442:
        *(_DWORD *)v333 = v198;
        goto LABEL_448;
      }
      if (v193 == 8)
      {
        v195 = 7;
LABEL_434:
        *(_DWORD *)v333 = v195;
LABEL_435:
        *(_DWORD *)&v333[4] = *(_DWORD *)(v189 + 32 * v188 + 24);
        goto LABEL_448;
      }
LABEL_484:
      ++v188;
      begin = v317.__begin_;
      if (v188 >= v317.__begin_[v180] + (uint64_t)v181)
      {
        v144 = v310->__r_.__value_.__r.__words[0];
        v142 = v310->__r_.__value_.__l.__size_;
        v181 += v317.__begin_[v180];
        goto LABEL_487;
      }
    }
    switch(v193)
    {
      case 16:
        v194 = 4;
        goto LABEL_430;
      case 17:
      case 19:
      case 20:
      case 22:
      case 23:
      case 25:
      case 27:
      case 28:
        goto LABEL_484;
      case 18:
        v194 = 5;
LABEL_430:
        *(_DWORD *)v333 = v194;
        goto LABEL_435;
      case 21:
        v196 = 11;
        goto LABEL_438;
      case 24:
        v195 = 6;
        goto LABEL_434;
      case 26:
        *(_DWORD *)v333 = 9;
        v197 = *(const char **)(v189 + 32 * v188 + 24);
        if (!strncmp(v197, "play ", 5uLL))
          goto LABEL_446;
        goto LABEL_439;
      case 29:
        v197 = *(const char **)(v189 + 32 * v188 + 24);
        if (!strncmp(v197, "ctx=", 4uLL))
        {
          v199 = 12;
LABEL_444:
          *(_DWORD *)v333 = v199;
          v200 = v197 + 4;
          goto LABEL_447;
        }
        if (!strncmp(v197, "emo=", 4uLL))
        {
          v199 = 8;
          goto LABEL_444;
        }
        if (strncmp(v197, "play=", 5uLL))
        {
          *(_DWORD *)v333 = 10;
          goto LABEL_439;
        }
        *(_DWORD *)v333 = 9;
LABEL_446:
        v200 = v197 + 5;
LABEL_447:
        MEMORY[0x1DF0ECA80](&v333[8], v200);
        break;
      default:
        if (v193 == 36)
        {
          v196 = 13;
LABEL_438:
          *(_DWORD *)v333 = v196;
          v197 = *(const char **)(v189 + 32 * v188 + 24);
LABEL_439:
          MEMORY[0x1DF0ECA80](&v333[8], v197);
          break;
        }
        if (v193 != 0x4000)
          goto LABEL_484;
        if (*(_BYTE *)(v311 + 436))
        {
          *(_DWORD *)v333 = 1;
          *(_BYTE *)(v311 + 436) = 0;
          break;
        }
        v198 = 2;
        goto LABEL_442;
    }
LABEL_448:
    std::string::basic_string[abi:ne180100]<0>(&__str, "&overlap");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v201 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v201 = __str.__r_.__value_.__l.__size_;
    if (*(_DWORD *)v333 == 9)
    {
      if ((v333[31] & 0x80000000) != 0)
      {
        v202 = *(_QWORD *)&v333[16];
        if (*(_QWORD *)&v333[16] <= v201)
          goto LABEL_477;
      }
      else
      {
        v202 = v333[31];
        if (v201 >= v333[31])
          goto LABEL_477;
      }
      std::string::basic_string(&v332, (const std::string *)&v333[8], v202 - v201, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v330);
      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v203 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
      else
        v203 = v332.__r_.__value_.__l.__size_;
      v204 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v204 = __str.__r_.__value_.__l.__size_;
      if (v203 != v204)
      {
LABEL_471:
        if ((*((_BYTE *)&v332.__r_.__value_.__s + 23) & 0x80) != 0)
          operator delete(v332.__r_.__value_.__l.__data_);
        goto LABEL_477;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v205 = &__str;
      else
        v205 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v332.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)&v332.__r_.__value_.__s + 23))
        {
          v206 = 0;
          while (v332.__r_.__value_.__s.__data_[v206] == v205->__r_.__value_.__s.__data_[v206])
          {
            if (HIBYTE(v332.__r_.__value_.__r.__words[2]) == ++v206)
              goto LABEL_474;
          }
          goto LABEL_471;
        }
LABEL_474:
        v333[48] = 1;
        v209 = v333[31];
        if (v333[31] < 0)
          v209 = *(_QWORD *)&v333[16];
        std::string::erase((std::string *)&v333[8], v209 - v201, 0xFFFFFFFFFFFFFFFFLL);
        goto LABEL_477;
      }
      v207 = (void *)v332.__r_.__value_.__r.__words[0];
      v208 = memcmp(v332.__r_.__value_.__l.__data_, v205, v332.__r_.__value_.__l.__size_);
      operator delete(v207);
      if (!v208)
        goto LABEL_474;
    }
LABEL_477:
    v210 = *v186;
    if ((unint64_t)*v186 >= *v187)
    {
      v211 = std::vector<MarkerRecord>::__push_back_slow_path<MarkerRecord const&>(v185, (uint64_t)v333);
    }
    else
    {
      std::vector<MarkerRecord>::__construct_one_at_end[abi:ne180100]<MarkerRecord const&>((uint64_t)v185, (uint64_t)v333);
      v211 = v210 + 56;
    }
    *v186 = v211;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((v333[31] & 0x80000000) != 0)
      operator delete(*(void **)&v333[8]);
    goto LABEL_484;
  }
LABEL_488:
  v212 = v324[1];
  if (v212)
  {
    v213 = v320;
    v214 = v324[2];
    v215 = v324[3];
    v313 = *(_QWORD *)*v324;
    v330 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v212 + 104))(v214, v215, 1, 0, &v330) & 0x80000000) == 0)
    {
      v329 = 0;
      query_string_field(v214, v215, v212, v330, 0, (uint64_t)&v213[3]);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int16 *))(v212 + 152))(v214, v215, 2, v330, &v329) & 0x80000000) == 0)
      {
        if (v329)
        {
          v328 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v212 + 104))(v214, v215, 2, v330, &v328) & 0x80000000) == 0)
          {
            v308 = (uint64_t *)&v213[1];
            while (v328)
            {
              LODWORD(v332.__r_.__value_.__l.__data_) = 4;
              v327[1] = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(v212 + 168))(v214, v215) & 0x80000000) != 0)
                goto LABEL_569;
              *(_QWORD *)&v216 = 0x8000000080000000;
              *((_QWORD *)&v216 + 1) = 0x8000000080000000;
              *(_OWORD *)v333 = v216;
              BYTE3(v216) = 0;
              BYTE7(v216) = 0;
              BYTE11(v216) = 0;
              HIBYTE(v216) = 0;
              *(_OWORD *)&v333[16] = v216;
              *(_OWORD *)&v333[32] = v216;
              *(_OWORD *)&v333[48] = v216;
              *(_OWORD *)&v333[64] = v216;
              *(_OWORD *)&v333[80] = v216;
              *(_OWORD *)&v333[96] = v216;
              *(_OWORD *)&v333[112] = v216;
              *(_QWORD *)&v333[128] = 0;
              if ((LODWORD(v332.__r_.__value_.__l.__data_) - 9) < 6
                || (v217 = &v333[16], LODWORD(v332.__r_.__value_.__l.__data_) == 4))
              {
                query_string_field(v214, v215, v212, v328, 3, (uint64_t)&v333[16]);
                if (v333[39] >= 0)
                  v217 = &v333[16];
                else
                  v217 = *(unsigned __int8 **)&v333[16];
              }
              valid = usextract_nrOfValidPhonemes(v313, v217);
              v219 = v333[39];
              if (v333[39] < 0)
                v219 = *(_QWORD *)&v333[24];
              if (v219 && valid)
              {
                query_string_field(v214, v215, v212, v328, 5, (uint64_t)&v333[64]);
                query_string_field(v214, v215, v212, v328, 14, (uint64_t)&v333[88]);
                v327[0] = 0;
                query_uint16_field(v214, v215, v212, v328, 1, (uint64_t)v327);
                *(_DWORD *)&v333[8] = v327[0];
                v326 = 0;
                query_uint16_field(v214, v215, v212, v328, 2, (uint64_t)&v326);
                *(_DWORD *)&v333[12] = v326 - *(_DWORD *)&v333[8];
                std::string::basic_string(&__str, v213 + 3, *(int *)&v333[8], v326 - (uint64_t)*(int *)&v333[8], (std::allocator<char> *)&v331);
                if ((v333[63] & 0x80000000) != 0)
                  operator delete(*(void **)&v333[40]);
                *(std::string *)&v333[40] = __str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v220 = &v333[40];
                else
                  v220 = *(const char **)&v333[40];
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v221 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v221 = __str.__r_.__value_.__r.__words[1];
                LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                u_strFromUTF8(0, 0, 0, v220, v221, (UErrorCode *)&__str);
                if (LODWORD(__str.__r_.__value_.__l.__data_) == 10)
                {
                  if (Diagnostics_GetLogObject(void)::onceToken != -1)
                    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
                  v222 = Diagnostics_GetLogObject(void)::__profile_log_default;
                  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
                    HIDWORD(__str.__r_.__value_.__r.__words[0]) = *(_DWORD *)&v333[8];
                    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = *(_DWORD *)&v333[12]
                                                                                 + *(_DWORD *)&v333[8];
                    _os_log_impl(&dword_1DE3F6000, v222, OS_LOG_TYPE_ERROR, "Word range [%d, %d) from Legacy FE results in invalid UTF8. Ignore word.", (uint8_t *)&__str, 0xEu);
                  }
                  Diagnostics::log(3, "Word range [%d, %d) from Legacy FE results in invalid UTF8. Ignore word.", v223, *(unsigned int *)&v333[8], (*(_DWORD *)&v333[12] + *(_DWORD *)&v333[8]));
                  MEMORY[0x1DF0ECA80](&v333[40], &byte_1DEBD87CE);
                }
                v224 = v213[1].__r_.__value_.__l.__size_;
                v225 = v213[1].__r_.__value_.__r.__words[2];
                if (v224 >= v225)
                {
                  v232 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v224 - *v308) >> 3);
                  v233 = v232 + 1;
                  if (v232 + 1 > 0x1E1E1E1E1E1E1E1)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v234 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v225 - *v308) >> 3);
                  if (2 * v234 > v233)
                    v233 = 2 * v234;
                  if (v234 >= 0xF0F0F0F0F0F0F0)
                    v235 = 0x1E1E1E1E1E1E1E1;
                  else
                    v235 = v233;
                  v587 = &v213[1].__r_.__value_.__s.__data_[16];
                  if (v235)
                    v235 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<WordFeature>>(v235);
                  else
                    v236 = 0;
                  v237 = v235 + 136 * v232;
                  __str.__r_.__value_.__r.__words[0] = v235;
                  __str.__r_.__value_.__l.__size_ = v237;
                  v586 = v235 + 136 * v236;
                  *(_OWORD *)v237 = *(_OWORD *)v333;
                  v238 = *(_OWORD *)&v333[16];
                  *(_QWORD *)(v237 + 32) = *(_QWORD *)&v333[32];
                  *(_OWORD *)(v237 + 16) = v238;
                  memset(&v333[16], 0, 24);
                  v239 = *(_OWORD *)&v333[40];
                  *(_QWORD *)(v237 + 56) = *(_QWORD *)&v333[56];
                  *(_OWORD *)(v237 + 40) = v239;
                  memset(&v333[40], 0, 24);
                  v240 = *(_OWORD *)&v333[64];
                  *(_QWORD *)(v237 + 80) = *(_QWORD *)&v333[80];
                  *(_OWORD *)(v237 + 64) = v240;
                  memset(&v333[64], 0, 24);
                  v241 = *(_OWORD *)&v333[88];
                  *(_QWORD *)(v237 + 104) = *(_QWORD *)&v333[104];
                  *(_OWORD *)(v237 + 88) = v241;
                  memset(&v333[88], 0, 24);
                  v242 = *(_OWORD *)&v333[112];
                  *(_QWORD *)(v237 + 128) = *(_QWORD *)&v333[128];
                  *(_OWORD *)(v237 + 112) = v242;
                  memset(&v333[112], 0, 24);
                  __str.__r_.__value_.__r.__words[2] = v237 + 136;
                  std::vector<WordFeature>::__swap_out_circular_buffer(v308, &__str);
                  v231 = v213[1].__r_.__value_.__l.__size_;
                  std::__split_buffer<WordFeature>::~__split_buffer((uint64_t)&__str);
                }
                else
                {
                  *(_OWORD *)v224 = *(_OWORD *)v333;
                  v226 = *(_OWORD *)&v333[16];
                  *(_QWORD *)(v224 + 32) = *(_QWORD *)&v333[32];
                  *(_OWORD *)(v224 + 16) = v226;
                  memset(&v333[16], 0, 24);
                  v227 = *(_QWORD *)&v333[56];
                  *(_OWORD *)(v224 + 40) = *(_OWORD *)&v333[40];
                  *(_QWORD *)(v224 + 56) = v227;
                  memset(&v333[40], 0, 24);
                  v228 = *(_OWORD *)&v333[64];
                  *(_QWORD *)(v224 + 80) = *(_QWORD *)&v333[80];
                  *(_OWORD *)(v224 + 64) = v228;
                  memset(&v333[64], 0, 24);
                  v229 = *(_OWORD *)&v333[88];
                  *(_QWORD *)(v224 + 104) = *(_QWORD *)&v333[104];
                  *(_OWORD *)(v224 + 88) = v229;
                  memset(&v333[88], 0, 24);
                  v230 = *(_OWORD *)&v333[112];
                  *(_QWORD *)(v224 + 128) = *(_QWORD *)&v333[128];
                  *(_OWORD *)(v224 + 112) = v230;
                  memset(&v333[112], 0, 24);
                  v231 = v224 + 136;
                }
                v213[1].__r_.__value_.__l.__size_ = v231;
              }
              v243 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned __int16 *))(v212 + 120))(v214, v215, v328, &v328);
              if ((v333[135] & 0x80000000) != 0)
                operator delete(*(void **)&v333[112]);
              if ((v333[111] & 0x80000000) != 0)
                operator delete(*(void **)&v333[88]);
              if ((v333[87] & 0x80000000) != 0)
                operator delete(*(void **)&v333[64]);
              if ((v333[63] & 0x80000000) != 0)
                operator delete(*(void **)&v333[40]);
              if ((v333[39] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v333[16]);
                if (v243 < 0)
                  goto LABEL_569;
              }
              else if (v243 < 0)
              {
                goto LABEL_569;
              }
            }
            v244 = v213->__r_.__value_.__l.__size_;
            data = v213[1].__r_.__value_.__l.__data_;
            v246 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v213[1].__r_.__value_.__l.__size_ - (_QWORD)data) >> 3);
            v247 = v244 - v213->__r_.__value_.__r.__words[0];
            if (v244 == v213->__r_.__value_.__r.__words[0])
            {
              LODWORD(v253) = -1;
            }
            else
            {
              v248 = 0;
              v249 = v247 / 216;
              v250 = v247 / 216 != 0;
              v251 = v247 / 216 - 1;
              if (v251 == 0 || !v250)
                v249 = 1;
              v252 = (_DWORD *)(v213->__r_.__value_.__r.__words[0] + 148);
              LODWORD(v253) = -1;
              v254 = -1;
              do
              {
                v255 = *((unsigned __int8 *)v252 - 124);
                if (*((_BYTE *)v252 - 124))
                {
                  v256 = 0;
                  v257 = 1;
                }
                else
                {
                  v256 = *v252 != v254;
                  v257 = v251 == v248 || v256;
                }
                if ((_DWORD)v253 != -1)
                {
                  v258 = &data[136 * (int)v253];
                  v260 = *((_DWORD *)v258 + 1);
                  v259 = v258 + 4;
                  if (v260 != 0x7FFFFFFF)
                    v257 = 0;
                  if (v257 == 1)
                  {
                    v261 = *(_DWORD *)&data[136 * (int)v253];
                    *v259 = v248 - v261;
                    if (v251 == v248 && !v255)
                      *v259 = v248 - v261 + 1;
                  }
                }
                if (v256)
                {
                  v253 = (int)v253 + 1;
                  if (v246 <= v253)
                  {
                    exception = __cxa_allocate_exception(0x10uLL);
                    StringFormatter::StringFormatter((StringFormatter *)v333, "Running out of word features. index: %d, words size: %d", v253, -252645135* ((uint64_t)(v213[1].__r_.__value_.__l.__size_ - v213[1].__r_.__value_.__r.__words[0]) >> 3));
                    MEMORY[0x1DF0EC99C](exception, v333);
                    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
                  }
                  *(_DWORD *)&data[136 * v253] = v248;
                }
                v262 = *v252;
                v252 += 54;
                v254 = v262;
                ++v248;
              }
              while (v249 != v248);
            }
            if (v246 != (_DWORD)v253 + 1)
            {
              v304 = __cxa_allocate_exception(0x10uLL);
              StringFormatter::StringFormatter((StringFormatter *)v333, "Not using all word features. used: %d, words size: %d", v253, -252645135 * ((uint64_t)(v213[1].__r_.__value_.__l.__size_ - v213[1].__r_.__value_.__r.__words[0]) >> 3));
              MEMORY[0x1DF0EC99C](v304, v333);
              __cxa_throw(v304, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
            }
          }
        }
      }
    }
  }
LABEL_569:
  v263 = *(_QWORD *)(v311 + 416);
  if (v263)
  {
    v265 = v310->__r_.__value_.__r.__words[0];
    v264 = v310->__r_.__value_.__l.__size_;
    if (v310->__r_.__value_.__r.__words[0] != v264)
    {
      v266 = v263 + 24;
      v267 = v263 + 32;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(v333, "name");
        if (v267 == std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v266, (const void **)v333))
        {
          v269 = 0;
        }
        else
        {
          v268 = std::map<std::string,std::string>::at(v266, (const void **)v333);
          v269 = v268 + 8 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(v268, (const void **)v265);
        }
        if ((v333[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v333);
          if (!v269)
          {
LABEL_579:
            if (Diagnostics_GetLogObject(void)::onceToken != -1)
              dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
            v270 = Diagnostics_GetLogObject(void)::__profile_log_default;
            if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
            {
              v272 = (const void *)v265;
              if (*(char *)(v265 + 23) < 0)
                v272 = *(const void **)v265;
              *(_DWORD *)v333 = 136315138;
              *(_QWORD *)&v333[4] = v272;
              _os_log_impl(&dword_1DE3F6000, v270, OS_LOG_TYPE_ERROR, "Unknown phoneme '%s', replacing with sil", v333, 0xCu);
            }
            v273 = (const void *)v265;
            if (*(char *)(v265 + 23) < 0)
              v273 = *(const void **)v265;
            Diagnostics::log(3, "Unknown phoneme '%s', replacing with sil", v271, v273);
            *(_BYTE *)(v265 + 24) = 1;
            MEMORY[0x1DF0ECA80](v265, "sil");
          }
        }
        else if (!v269)
        {
          goto LABEL_579;
        }
        v265 += 216;
      }
      while (v265 != v264);
    }
  }
  memset(v333, 0, 24);
  v274 = v310->__r_.__value_.__r.__words[0];
  v275 = v310->__r_.__value_.__l.__size_;
  if (v310->__r_.__value_.__r.__words[0] != v275)
  {
    v277 = *(_DWORD *)(v274 + 144);
    v276 = *(_DWORD *)(v274 + 148);
    v278 = v274 + 96;
    do
    {
      if (*(_DWORD *)(v278 + 48) != v277)
      {
        if (*(_DWORD *)(v278 + 52) == v276)
          v279 = ". ";
        else
          v279 = "_ ";
        std::string::append((std::string *)v333, v279);
        v277 = *(_DWORD *)(v278 + 48);
        v276 = *(_DWORD *)(v278 + 52);
      }
      v280 = *(char *)(v278 + 23);
      if (v280 >= 0)
        v281 = (const std::string::value_type *)v278;
      else
        v281 = *(const std::string::value_type **)v278;
      if (v280 >= 0)
        v282 = *(unsigned __int8 *)(v278 + 23);
      else
        v282 = *(_QWORD *)(v278 + 8);
      std::string::append((std::string *)v333, v281, v282);
      std::string::push_back((std::string *)v333, 32);
      v283 = v278 + 120;
      v278 += 216;
    }
    while (v283 != v275);
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v284 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
  {
    Censor::global_plaintext(&__str, (uint64_t)v333);
    v285 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
    LODWORD(v332.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v332.__r_.__value_.__r.__words + 4) = (std::string::size_type)v285;
    _os_log_impl(&dword_1DE3F6000, v284, OS_LOG_TYPE_INFO, "Phonemes : %s ", (uint8_t *)&v332, 0xCu);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  Censor::global_plaintext(&__str, (uint64_t)v333);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v287 = &__str;
  else
    v287 = (std::string *)__str.__r_.__value_.__r.__words[0];
  Diagnostics::log(6, "Phonemes : %s ", v286, v287);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v314 = v322;
  v315 = v323;
  if (v323)
  {
    v288 = (unint64_t *)&v323->__shared_owners_;
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v311 + 72))(v311, &v314);
  v290 = v315;
  if (v315)
  {
    v291 = (unint64_t *)&v315->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  if ((v333[23] & 0x80000000) != 0)
    operator delete(*(void **)v333);
  if (v317.__begin_)
  {
    v317.__end_ = v317.__begin_;
    operator delete(v317.__begin_);
  }
  v293 = v321;
  if (v321)
  {
    v294 = (unint64_t *)&v321->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  v296 = v323;
  if (v323)
  {
    v297 = (unint64_t *)&v323->__shared_owners_;
    do
      v298 = __ldaxr(v297);
    while (__stlxr(v298 - 1, v297));
    if (!v298)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }
  v299 = v325;
  if (v325)
  {
    v300 = (unint64_t *)&v325->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
}

void sub_1DE9FFDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v62 - 160, *(_QWORD **)(v62 - 152));
  v64 = -12144;
  do
  {
    std::pair<std::string,std::string>::~pair(v61);
    v61 -= 48;
    v64 += 48;
  }
  while (v64);
  if (a50 < 0)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PhoneFeature>::__push_back_slow_path<PhoneFeature const&>(uint64_t *a1, const PhoneFeature *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;

  v2 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = (uint64_t)(a1 + 2);
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v7 = 0x12F684BDA12F684;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PhoneFeature>>(v7);
  else
    v8 = 0;
  v14 = v7;
  *(_QWORD *)&v15 = v7 + 216 * v2;
  *((_QWORD *)&v15 + 1) = v15;
  v16 = v7 + 216 * v8;
  PhoneFeature::PhoneFeature((std::string *)v15, a2);
  v9 = v15 + 216;
  v10 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PhoneFeature>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>,std::reverse_iterator<PhoneFeature*>>(v6, a1[1], a1[1], *a1, *a1, v15, v15);
  v11 = *(_OWORD *)a1;
  *a1 = v10;
  a1[1] = v9;
  v15 = v11;
  v12 = a1[2];
  a1[2] = v16;
  v16 = v12;
  v14 = v11;
  std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)&v14);
  return v9;
}

void sub_1DEA001A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PhoneFeature>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t query_string_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  __int16 v14;

  v14 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 184))(a1, a2, a4, a5, &v14);
  if ((result & 0x80000000) == 0 && v14)
  {
    v13 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __int16 *))(a3 + 176))(a1, a2, a4, a5, &v13, &v14);
    if ((result & 0x80000000) == 0)
      return MEMORY[0x1DF0ECA80](a6, v13);
  }
  return result;
}

uint64_t query_uint16_field(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  __int16 v13;

  v13 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 184))(a1, a2, a4, a5, &v13);
  if ((result & 0x80000000) == 0)
  {
    if (v13)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 168))(a1, a2, a4, a5, 1, a6, &v13);
  }
  return result;
}

void WordFeature::~WordFeature(void **this)
{
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t std::vector<WordFeature>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<WordFeature>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>,std::reverse_iterator<WordFeature*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void VoiceConfig::get_param<std::set<std::string>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(&v6, a2, a3, a4);
  if ((_BYTE)v6)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::set<std::string>,std::set<std::string>,0>((uint64_t)a1, (unsigned __int8 *)&v6);
    v5 = v6;
  }
  else
  {
    v5 = 0;
    a1[2] = 0;
    a1[1] = 0;
    *a1 = a1 + 1;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v5);
}

void sub_1DEA00448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

void TranslatePhonemes::~TranslatePhonemes(TranslatePhonemes *this)
{
  TranslatePhonemes::~TranslatePhonemes(this);
  JUMPOUT(0x1DF0ED014);
}

{
  sqlite3 *v2;

  *(_QWORD *)this = &off_1EA91EF70;
  v2 = (sqlite3 *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      sqlite3_finalize(*((sqlite3_stmt **)this + 2));
      v2 = (sqlite3 *)*((_QWORD *)this + 1);
    }
    sqlite3_close(v2);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  UTFRegex::~UTFRegex((TranslatePhonemes *)((char *)this + 24));
}

void TranslatePhonemes::pronounce(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t *v4;
  sqlite3_stmt *v6;
  sqlite3_stmt **v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  std::string::size_type size;
  std::string *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  unsigned int v44;
  std::string *p_p;
  std::string::size_type v46;
  std::string *v47;
  int v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  std::string::size_type v53;
  size_t v54;
  float v55;
  __int128 v56;
  __int128 *v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  char *v62;
  char v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  size_t v68;
  std::string *v69;
  const unsigned __int8 *v70;
  const std::string::value_type *v71;
  const char *v72;
  int v73;
  double v74;
  BOOL v75;
  double v76;
  int v77;
  float v78;
  size_t v79;
  std::string *v80;
  char *v81;
  std::string *v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type v90;
  NSObject *v91;
  std::string *v92;
  std::string::size_type v93;
  uint64_t v94;
  const char *v95;
  std::string *p_buf;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  __int128 *__src;
  int v103;
  sqlite3 **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string v108;
  std::string __p;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string buf;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v4 = a3;
  v117 = *MEMORY[0x1E0C80C00];
  v7 = (sqlite3_stmt **)(a1 + 16);
  v6 = *(sqlite3_stmt **)(a1 + 16);
  if (!v6)
  {
    if (!*(_QWORD *)(a1 + 72)
      || (v17 = sqlite3_open_MemoryMap((const void **)(a1 + 72), (sqlite3 **)(a1 + 8)),
          v18 = v17,
          TranslatePhonemes::report_error((sqlite3 **)a1, v17, "open dictionary"),
          v18)
      || (v19 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 8), "SELECT in_phon,out_phon,out_stress,quality FROM Phonemes WHERE in_phon GLOB ? AND in_stress=? AND alphabet=?;",
                  -1,
                  v7,
                  0),
          v20 = v19,
          TranslatePhonemes::report_error((sqlite3 **)a1, v19, "compile query"),
          v20))
    {
LABEL_16:
      std::string::basic_string[abi:ne180100]<0>(a4, &byte_1DEBD87CE);
      return;
    }
    v6 = *v7;
    v4 = a3;
  }
  v8 = *((char *)v4 + 23);
  if (v8 >= 0)
    v9 = (const char *)v4;
  else
    v9 = (const char *)*v4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)v4 + 23);
  else
    v10 = *((_DWORD *)v4 + 2);
  v11 = sqlite3_bind_text(v6, 3, v9, v10, 0);
  v12 = v4;
  v13 = v11;
  TranslatePhonemes::report_error((sqlite3 **)a1, v11, "bind alphabet argument");
  if (v13)
    goto LABEL_16;
  v99 = v12;
  v104 = (sqlite3 **)a1;
  UTFString::replace<std::string>(&v108, a2, (UTFRegex *)(a1 + 24), a1 + 48);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  v15 = (std::string *)v108.__r_.__value_.__r.__words[0];
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v108.__r_.__value_.__l.__size_;
  else
    v15 = &v108;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  buf.__r_.__value_.__l.__size_ = size << 32;
  buf.__r_.__value_.__s.__data_[16] = 0;
  HIDWORD(buf.__r_.__value_.__r.__words[2]) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v115, &byte_1DEBD87CE);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v106 - v105) >> 4) + 1;
  if (v21 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((v107 - v105) >> 4) > v21)
    v21 = 0x5555555555555556 * ((v107 - v105) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((v107 - v105) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v22 = 0x555555555555555;
  else
    v22 = v21;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)&v107;
  if (v22)
    v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v22);
  else
    v23 = 0;
  v24 = v22 + 16 * ((v106 - v105) >> 4);
  __p.__r_.__value_.__r.__words[0] = v22;
  __p.__r_.__value_.__l.__size_ = v24;
  v110.__r_.__value_.__r.__words[0] = v22 + 48 * v23;
  v25 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(_QWORD *)(v24 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *(_OWORD *)v24 = v25;
  v26 = v115;
  *(_QWORD *)(v24 + 40) = v116;
  *(_OWORD *)(v24 + 24) = v26;
  v116 = 0;
  v115 = 0uLL;
  __p.__r_.__value_.__r.__words[2] = v24 + 48;
  std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(&v105, &__p);
  v27 = v106;
  std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)&__p);
  v106 = v27;
  if (SHIBYTE(v116) < 0)
    operator delete((void *)v115);
  do
  {
    while (1)
    {
      v28 = v105;
      v29 = v106 - v105;
      if (v106 - v105 == 48)
      {
        v30 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = v108.__r_.__value_.__r.__words[1];
        if (*(_DWORD *)(v105 + 8) == v30)
          goto LABEL_137;
LABEL_39:
        v32 = 0;
        goto LABEL_40;
      }
      v31 = v29 / 48;
      if ((unint64_t)(v29 / 48) < 2)
        goto LABEL_39;
      v32 = 0;
      v33 = *(_DWORD *)(v105 + 8);
      v34 = (int *)(v105 + 56);
      v35 = 1;
      do
      {
        v37 = *v34;
        v34 += 12;
        v36 = v37;
        if (v37 < v33)
        {
          v33 = v36;
          v32 = v35;
        }
        ++v35;
      }
      while (v31 != v35);
LABEL_40:
      v38 = v105 + 48 * v32;
      buf = *(std::string *)v38;
      v115 = *(_OWORD *)(v38 + 24);
      v116 = *(_QWORD *)(v38 + 40);
      *(_QWORD *)(v38 + 32) = 0;
      *(_QWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 24) = 0;
      v39 = v106;
      if (v32 < -1 - 0x5555555555555555 * ((v106 - v105) >> 4))
      {
        v40 = v105 + 48 * v32;
        v41 = *(_OWORD *)(v106 - 48);
        *(_QWORD *)(v40 + 16) = *(_QWORD *)(v106 - 32);
        *(_OWORD *)v40 = v41;
        v42 = v40 + 24;
        if (*(char *)(v40 + 47) < 0)
          operator delete(*(void **)v42);
        v43 = *(_OWORD *)(v39 - 24);
        *(_QWORD *)(v42 + 16) = *(_QWORD *)(v39 - 8);
        *(_OWORD *)v42 = v43;
        *(_BYTE *)(v39 - 1) = 0;
        *(_BYTE *)(v39 - 24) = 0;
        v39 = v106;
      }
      if (*(char *)(v39 - 1) < 0)
        operator delete(*(void **)(v39 - 24));
      v106 = v39 - 48;
      memset(&v113, 0, sizeof(v113));
      v44 = UTFString::codepoint_iterator<std::string>::operator*((uint64_t *)&buf);
      if (v44 - 42 <= 0x31 && ((1 << (v44 - 42)) & 0x2000000200001) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v111, "[");
        std::string::push_back(&v111, v44);
        v112 = v111;
        memset(&v111, 0, sizeof(v111));
        std::string::push_back(&v112, 93);
        __p = v112;
        memset(&v112, 0, sizeof(v112));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v46 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v113, (const std::string::value_type *)p_p, v46);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
      }
      else
      {
        UTFString::push_back_codepoint<std::string>(&v113, v44);
      }
      std::string::push_back(&v113, 42);
      v47 = (v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v113
          : (std::string *)v113.__r_.__value_.__r.__words[0];
      v48 = (v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v113.__r_.__value_.__r.__words[2])
          : LODWORD(v113.__r_.__value_.__r.__words[1]);
      v49 = sqlite3_bind_text(*v7, 1, (const char *)v47, v48, 0);
      v50 = v49;
      TranslatePhonemes::report_error(v104, v49, "bind input argument");
      if (v50)
      {
        v51 = 0;
      }
      else
      {
        v103 = buf.__r_.__value_.__s.__data_[16];
        v52 = buf.__r_.__value_.__s.__data_[16] != 0;
        v53 = SLODWORD(buf.__r_.__value_.__r.__words[1]);
        if (v116 >= 0)
          v54 = HIBYTE(v116);
        else
          v54 = *((_QWORD *)&v115 + 1);
        v55 = *((float *)&buf.__r_.__value_.__r.__words[2] + 1);
        v56 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        v57 = &v115;
        if (v116 < 0)
          v57 = (__int128 *)v115;
        __src = v57;
        do
        {
          v58 = sqlite3_bind_int(*v7, 2, v52 & 1);
          v59 = v58;
          TranslatePhonemes::report_error(v104, v58, "bind stress argument");
          if (v59)
          {
            v51 = 0;
            goto LABEL_130;
          }
          v60 = 0;
          while (1)
          {
            v61 = sqlite3_step(*v7);
            if ((v61 & 0xFFFFFFFE) != 0x64)
              TranslatePhonemes::report_error(v104, v61, "execute query");
            if ((_DWORD)v61 != 100)
              break;
            v62 = (char *)sqlite3_column_text(*v7, 0);
            std::string::basic_string[abi:ne180100]<0>(&v112, v62);
            v63 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            else
              v64 = v112.__r_.__value_.__l.__size_;
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            {
              v65 = v108.__r_.__value_.__l.__size_;
              if (v108.__r_.__value_.__l.__size_ < v53 || v64 == -1)
LABEL_172:
                std::string::__throw_out_of_range[abi:ne180100]();
              v66 = (std::string *)v108.__r_.__value_.__r.__words[0];
            }
            else
            {
              v65 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              if (HIBYTE(v108.__r_.__value_.__r.__words[2]) < v53 || v64 == -1)
                goto LABEL_172;
              v66 = &v108;
            }
            v67 = v65 - v53;
            if (v65 - v53 >= v64)
              v68 = v64;
            else
              v68 = v65 - v53;
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v69 = &v112;
            else
              v69 = (std::string *)v112.__r_.__value_.__r.__words[0];
            if (!memcmp((char *)v66 + v53, v69, v68) && v64 <= v67)
            {
              v70 = sqlite3_column_text(*v7, 1);
              v71 = (const std::string::value_type *)v70;
              if (!v54 || (v72 = " ", !*v70))
                v72 = &byte_1DEBD87CE;
              v73 = sqlite3_column_int(*v7, 2);
              v74 = sqlite3_column_double(*v7, 3);
              v75 = v103 != 0;
              if (v52 & 1 | (v73 != 0))
                v75 = v73 != 0;
              v76 = v74 * v55 * 0.999000013;
              v77 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v77 = v112.__r_.__value_.__r.__words[1];
              __p.__r_.__value_.__r.__words[0] = v56;
              __p.__r_.__value_.__l.__size_ = (DWORD2(v56) + v77) | *((_QWORD *)&v56 + 1) & 0xFFFFFFFF00000000;
              v78 = v76;
              __p.__r_.__value_.__s.__data_[16] = v75;
              *((float *)&__p.__r_.__value_.__r.__words[2] + 1) = v78;
              v79 = strlen(v72);
              std::string::basic_string[abi:ne180100]((uint64_t)&v111, v54 + v79);
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v80 = &v111;
              else
                v80 = (std::string *)v111.__r_.__value_.__r.__words[0];
              if (v54)
                memmove(v80, __src, v54);
              v81 = (char *)v80 + v54;
              if (v79)
                memcpy(v81, v72, v79);
              v81[v79] = 0;
              v82 = std::string::append(&v111, v71);
              v110 = *v82;
              v82->__r_.__value_.__l.__size_ = 0;
              v82->__r_.__value_.__r.__words[2] = 0;
              v82->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
              TranslatePhonemes::add_hypothesis(&v105, (__int128 *)&__p);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v110.__r_.__value_.__l.__data_);
              v60 = 1;
              v63 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            }
            if (v63 < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
          }
          sqlite3_reset(*v7);
          v83 = v60 | ~v52;
          v52 = 0;
        }
        while ((v83 & 1) == 0);
        v84 = *(unsigned __int8 *)(v56 + SDWORD2(v56));
        v85 = (v84 + 62);
        if (v84 <= 0xEF)
          v86 = 2;
        else
          v86 = 3;
        if (v84 <= 0xDF)
          v87 = v86;
        else
          v87 = v86 + 1;
        if (v85 >= 0x33)
          v87 = 1;
        LODWORD(buf.__r_.__value_.__r.__words[1]) = v87 + DWORD2(v56);
        *((float *)&buf.__r_.__value_.__r.__words[2] + 1) = v55 * 0.2;
        TranslatePhonemes::add_hypothesis(&v105, (__int128 *)&buf);
        v51 = 1;
      }
LABEL_130:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (SHIBYTE(v116) < 0)
        break;
      if ((v51 & 1) == 0)
        goto LABEL_136;
    }
    operator delete((void *)v115);
  }
  while ((v51 & 1) != 0);
LABEL_136:
  v28 = v105;
LABEL_137:
  if (*(char *)(v28 + 47) < 0)
  {
    v89 = a4;
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)(v28 + 24), *(_QWORD *)(v28 + 32));
  }
  else
  {
    v88 = *(_OWORD *)(v28 + 24);
    v89 = a4;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 40);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v88;
  }
  v90 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
  if ((v90 & 0x80u) != 0)
    v90 = v89->__r_.__value_.__l.__size_;
  if (v90)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v91 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_INFO))
    {
      Censor::global_plaintext(&__p, (uint64_t)a2);
      v92 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v93 = *((char *)v99 + 23) >= 0 ? (std::string::size_type)v99 : *v99;
      v94 = (a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (uint64_t)a4
          : a4->__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v92;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      *(_QWORD *)&v115 = v94;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Censor::global_plaintext(&buf, (uint64_t)a2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (*((char *)v99 + 23) >= 0)
      v97 = v99;
    else
      v97 = (uint64_t *)*v99;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = (uint64_t *)a4;
    else
      v98 = (uint64_t *)a4->__r_.__value_.__r.__words[0];
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  sqlite3_clear_bindings(*v7);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
}

void sub_1DEA00FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (*(char *)(a16 + 23) < 0)
    operator delete(*(void **)a16);
  *(_QWORD *)(v56 - 192) = &a23;
  std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 192));
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t TranslatePhonemes::report_error(sqlite3 **this, uint64_t a2, const char *a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_ERROR))
    {
      v7 = sqlite3_errmsg(this[1]);
      *(_DWORD *)buf = 136315394;
      v12 = a3;
      v13 = 2080;
      v14 = v7;
      _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_ERROR, "TranslatePhonemes: Failed to %s: %s", buf, 0x16u);
    }
    v8 = sqlite3_errmsg(this[1]);
    Diagnostics::log(3, "TranslatePhonemes: Failed to %s: %s", v9, a3, v8);
  }
  return a2;
}

UText *UTFString::replace<std::string>(std::string *a1, const char *a2, UTFRegex *a3, uint64_t a4)
{
  int64_t v7;
  int64_t v8;
  UText *v9;
  UText *v10;
  int v11;
  const char *v12;
  int64_t v13;
  UText *v14;
  UText *v15;
  UText *v16;
  int64_t v17;
  std::basic_string<char16_t> *p_status;
  int32_t v19;
  int32_t v20;
  std::basic_string<char16_t>::value_type v21;
  std::basic_string<char16_t>::size_type v22;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t> *v24;
  int32_t v25;
  std::basic_string<char16_t> *v26;
  int32_t v27;
  UErrorCode v29;
  std::basic_string<char16_t> status;
  UErrorCode v31;

  v29 = U_ZERO_ERROR;
  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  v7 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v8 = v7;
  }
  v9 = utext_openUTF8(0, a2, v8, (UErrorCode *)&status);
  if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0)
    v10 = v9;
  else
    v10 = 0;
  UTFRegex::set_text(a3, v10, 1);
  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  v11 = *(char *)(a4 + 23);
  if (v11 >= 0)
    v12 = (const char *)a4;
  else
    v12 = *(const char **)a4;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a4 + 23);
  else
    v13 = *(_QWORD *)(a4 + 8);
  v14 = utext_openUTF8(0, v12, v13, (UErrorCode *)&status);
  if (SLODWORD(status.__r_.__value_.__l.__data_) <= 0)
    v15 = v14;
  else
    v15 = 0;
  v16 = uregex_replaceAllUText(*(URegularExpression **)a3, v15, 0, &v29);
  v17 = utext_nativeLength(v16);
  std::basic_string<char16_t>::basic_string[abi:ne180100](&status, v17);
  v31 = U_ZERO_ERROR;
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_status = &status;
  else
    p_status = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(status.__r_.__value_.__r.__words[2]);
  else
    v19 = status.__r_.__value_.__r.__words[1];
  v20 = utext_extract(v16, 0, 1000000, (UChar *)p_status, v19, &v31);
  v22 = v20;
  size = HIBYTE(status.__r_.__value_.__r.__words[2]);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = status.__r_.__value_.__l.__size_;
  if (size < v20)
  {
    v31 = U_ZERO_ERROR;
    std::basic_string<char16_t>::resize(&status, v20, v21);
    if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &status;
    else
      v24 = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
    if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(status.__r_.__value_.__r.__words[2]);
    else
      v25 = status.__r_.__value_.__r.__words[1];
    v22 = utext_extract(v16, 0, 1000000, (UChar *)v24, v25, &v31);
  }
  std::basic_string<char16_t>::resize(&status, v22, v21);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &status;
  else
    v26 = (std::basic_string<char16_t> *)status.__r_.__value_.__r.__words[0];
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(status.__r_.__value_.__r.__words[2]);
  else
    v27 = status.__r_.__value_.__r.__words[1];
  UTFString::to_utf8(a1, (const UChar *)v26, v27);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
    operator delete(status.__r_.__value_.__l.__data_);
  utext_close(v15);
  return utext_close(v16);
}

void sub_1DEA013EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<TranslatePhonemes::Hypothesis>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 6;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void TranslatePhonemes::add_hypothesis(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  _QWORD v24[2];
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_5:
    v7 = a1[2];
    if (v5 >= v7)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v4) >> 4);
      if (v11 + 1 > 0x555555555555555)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v4) >> 4);
      v13 = 2 * v12;
      if (2 * v12 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x2AAAAAAAAAAAAAALL)
        v14 = 0x555555555555555;
      else
        v14 = v13;
      v27 = a1 + 2;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::shared_ptr<Agglomerate>>>>>(v14);
      else
        v15 = 0;
      v20 = v14 + 48 * v11;
      v24[0] = v14;
      v24[1] = v20;
      v25 = v20;
      v26 = v14 + 48 * v15;
      v21 = *a2;
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v20 = v21;
      v22 = (std::string *)(v20 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
        v20 = v25;
      }
      else
      {
        v23 = *(__int128 *)((char *)a2 + 24);
        *(_QWORD *)(v20 + 40) = *((_QWORD *)a2 + 5);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      }
      v25 = v20 + 48;
      std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(a1, v24);
      v19 = a1[1];
      std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)v24);
    }
    else
    {
      v8 = *a2;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v8;
      v9 = (std::string *)(v5 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
      }
      else
      {
        v10 = *(__int128 *)((char *)a2 + 24);
        *(_QWORD *)(v5 + 40) = *((_QWORD *)a2 + 5);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v19 = v5 + 48;
      a1[1] = v5 + 48;
    }
    a1[1] = v19;
  }
  else
  {
    v6 = *a1;
    while (*(_DWORD *)(v6 + 8) != *((_DWORD *)a2 + 2))
    {
      v6 += 48;
      if (v6 == v5)
        goto LABEL_5;
    }
    if (*((float *)a2 + 5) > *(float *)(v6 + 20))
    {
      v16 = *a2;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v6 = v16;
      v17 = v6 + 24;
      if (*(char *)(v6 + 47) < 0)
        operator delete(*(void **)v17);
      v18 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v17 + 16) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v17 = v18;
      *((_BYTE *)a2 + 47) = 0;
      *((_BYTE *)a2 + 24) = 0;
    }
  }
}

void sub_1DEA0167C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TranslatePhonemes::Hypothesis>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      v7 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TranslatePhonemes::Hypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void NativePhonemePassThrough::~NativePhonemePassThrough(void **this)
{
  *this = off_1EA920B50;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1EA920B50;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1DF0ED014);
}

void NativePhonemePassThrough::pronounce(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v11;
  _QWORD *v12;
  _QWORD v13[3];
  void **v14;

  v5 = a3[23];
  if ((v5 & 0x80u) == 0)
    v6 = a3[23];
  else
    v6 = *((_QWORD *)a3 + 1);
  v7 = *(unsigned __int8 *)(a1 + 31);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 16);
  if (v6 != v7)
    goto LABEL_16;
  if (v8 >= 0)
    v11 = (unsigned __int8 *)(a1 + 8);
  else
    v11 = *(unsigned __int8 **)(a1 + 8);
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v11, *((_QWORD *)a3 + 1)))
      goto LABEL_17;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(a4, &byte_1DEBD87CE);
    return;
  }
  if (a3[23])
  {
    while (*a3 == *v11)
    {
      ++a3;
      ++v11;
      if (!--v5)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  v12 = *(_QWORD **)(a1 + 32);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v12 + 16))(v13, *v12, a2);
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, v13);
  v14 = (void **)v13;
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_1DEA0199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<PhonemeRepresentation::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void GryphonFEAdapterModule::~GryphonFEAdapterModule(GryphonFEAdapterModule *this)
{
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void GryphonFEAdapterModule::process_data(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DEA01A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TextSourceImpl::~TextSourceImpl(void **this)
{
  *this = off_1EA91DC18;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  FrontendModule::~FrontendModule(this);
}

{
  *this = off_1EA91DC18;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  FrontendModule::~FrontendModule(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t TextSourceImpl::clear(TextSourceImpl *this)
{
  uint64_t result;

  *((_BYTE *)this + 176) = 0;
  FrontendModule::delete_tokens(this);
  *((_BYTE *)this + 8) = 0;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void TextSourceImpl::generate_tokens(TextSourceImpl *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  const char *v7;
  std::string *p_p;
  unsigned int (***v9)(_QWORD, uint64_t);
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  const char *v28;
  unint64_t *v29;
  std::string __p;
  void *v31[2];
  __int128 v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 16);
  if (!v2)
  {
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v3 = (char *)this + 176;
  if (*((_BYTE *)this + 176))
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 20) + 16))(&__p, *((_QWORD *)this + 20), 0);
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)&__p);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20));
    }
    else
    {
      *((_BYTE *)this + 8) = 1;
      *((_BYTE *)this + 176) = 0;
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_37:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (Diagnostics_GetLogObject(void)::onceToken != -1)
      dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
    v5 = Diagnostics_GetLogObject(void)::__profile_log_default;
    if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
    {
      Censor::global_plaintext(&__p, v4);
      v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl(&dword_1DE3F6000, v5, OS_LOG_TYPE_DEBUG, "Text Source: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    Censor::global_plaintext(&__p, v4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    Diagnostics::log(7, "Text Source: %s", v7, p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = (unsigned int (***)(_QWORD, uint64_t))*((_QWORD *)this + 18);
    if (v9 && (**v9)(v9, v4))
    {
      v10 = *((_QWORD *)this + 20);
      v11 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v34 = *((_QWORD *)this + 16);
      v35 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 56))(v10, v4, &v34);
      v14 = v35;
      if (v35)
      {
        v15 = (unint64_t *)&v35->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 20) + 16))(&__p, *((_QWORD *)this + 20), 0);
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)&__p);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20));
      }
      else
      {
        if (Diagnostics_GetLogObject(void)::onceToken != -1)
          dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
        v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
        if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_DEBUG, "No valid input from ssml input", buf, 2u);
        }
        Diagnostics::log(7, "No valid input from ssml input", v28);
        v3 = (char *)this + 8;
      }
      *v3 = 1;
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v20 = __ldaxr(v29);
        while (__stlxr(v20 - 1, v29));
        goto LABEL_37;
      }
    }
    else
    {
      v33 = 0;
      v32 = 0u;
      *(_OWORD *)v31 = 0u;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1952807028;
      __p.__r_.__value_.__l.__size_ = 0;
      if (*(char *)(v4 + 23) < 0)
        v17 = *(_QWORD *)(v4 + 8);
      else
        v17 = *(unsigned __int8 *)(v4 + 23);
      __p.__r_.__value_.__r.__words[2] = v17;
      std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)&v32 + 1, *((_QWORD *)this + 16), *((_QWORD *)this + 17));
      std::string::operator=((std::string *)v31, (const std::string *)v4);
      v21 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v21->__shared_owners_ = 0u;
      v22 = (unint64_t *)&v21->__shared_owners_;
      *(_OWORD *)&v21[1].__shared_owners_ = 0u;
      v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932198;
      v21[1].__vftable = (std::__shared_weak_count_vtbl *)&v21[1].__shared_owners_;
      *(_QWORD *)buf = v21 + 1;
      *(_QWORD *)&buf[8] = v21;
      Agglomerate::set<TokenBasicItem>((uint64_t)&v21[1], (__int128 *)&__p);
      std::deque<std::shared_ptr<Agglomerate>>::push_back((_QWORD *)this + 4, (__int128 *)buf);
      *((_BYTE *)this + 8) = 1;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      v24 = v33;
      if (v33)
      {
        v25 = (unint64_t *)&v33->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (SBYTE7(v32) < 0)
        operator delete(v31[0]);
    }
  }
}

void sub_1DEA01FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void TextSourceImpl::set_text(uint64_t a1, const std::string *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933FC8;
  v4[5].std::__shared_count = 0u;
  *(_OWORD *)&v4[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[2].__shared_owners_ = 0u;
  v4[3].std::__shared_count = 0u;
  *(_OWORD *)&v4[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v4[4].__shared_owners_ = 0u;
  *(_OWORD *)&v4[5].__shared_weak_owners_ = 0u;
  v4[5].__shared_owners_ = (uint64_t)&v4[5].__shared_weak_owners_;
  *(_OWORD *)&v4[6].__shared_owners_ = 0u;
  v4[7].std::__shared_count = 0u;
  *(_OWORD *)&v4[7].__shared_weak_owners_ = 0u;
  v21 = v4;
  v4[1].std::__shared_count = 0u;
  v20 = v4 + 1;
  std::string::operator=((std::string *)&v4[1], a2);
  *(_BYTE *)(a1 + 176) = 0;
  v5 = (std::__shared_weak_count *)operator new(0x158uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA933158;
  *(_OWORD *)&v5[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[2].__shared_owners_ = 0u;
  v5[3].std::__shared_count = 0u;
  *(_OWORD *)&v5[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  *(_OWORD *)&v5[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[6].__shared_owners_ = 0u;
  v5[7].std::__shared_count = 0u;
  *(_OWORD *)&v5[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[8].__shared_owners_ = 0u;
  v5[9].std::__shared_count = 0u;
  *(_OWORD *)&v5[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[10].__shared_owners_ = 0u;
  v5[1].std::__shared_count = 0u;
  v5[11].std::__shared_count = 0u;
  *(_OWORD *)&v5[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[12].__shared_owners_ = 0u;
  v5[13].std::__shared_count = 0u;
  *(_OWORD *)&v5[13].__shared_weak_owners_ = 0u;
  v18 = v5 + 1;
  v19 = v5;
  v17 = 0uLL;
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)&v5[1], &v17);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (uint64_t)v18;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](&v18->__shared_weak_owners_, (uint64_t)v20, (uint64_t)v21);
  *(_DWORD *)(v9 + 32) = 0;
  std::string::operator=((std::string *)(v9 + 40), (const std::string *)(a1 + 104));
  *(_DWORD *)(v9 + 64) = 3;
  *(_DWORD *)(v9 + 272) = 0;
  *(_DWORD *)(v9 + 216) = 1;
  *(_DWORD *)(v9 + 224) = 1;
  *(_DWORD *)(v9 + 232) = 1;
  *(_DWORD *)(v9 + 240) = 1;
  *(float *)(v9 + 272) = nanf(&byte_1DEBD87CE);
  *(_DWORD *)(v9 + 276) = 1;
  v10 = (_QWORD *)(a1 + 128);
  v11 = v19;
  std::shared_ptr<VoiceConfig>::operator=[abi:ne180100](v10, v9, (uint64_t)v19);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1DEA02278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 TextSource::create(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __n128 result;
  std::__shared_weak_count *v50;
  unint64_t v51;
  void *__p[2];
  char v53;
  void **v54;

  v8 = (char *)operator new(0xD0uLL);
  v9 = (unint64_t)v8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1EA932C18;
  v10 = v8 + 24;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *((_QWORD *)v8 + 3) = off_1EA91D8E0;
    v8[32] = 0;
    *((_QWORD *)v8 + 5) = a2;
    *((_QWORD *)v8 + 6) = a3;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *((_QWORD *)v8 + 15) = 0;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
    *v10 = off_1EA91C538;
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v8[32] = 0;
    *((_QWORD *)v8 + 5) = a2;
    *((_QWORD *)v8 + 6) = 0;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *((_QWORD *)v8 + 15) = 0;
    *((_QWORD *)v8 + 3) = off_1EA91C538;
  }
  *(_QWORD *)(v9 + 24) = off_1EA91DC18;
  v51 = (unint64_t)v10;
  v19 = a1;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 128), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)(v9 + 128) = *(_OWORD *)a4;
    *(_QWORD *)(v9 + 144) = *(_QWORD *)(a4 + 16);
  }
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_BYTE *)(v9 + 200) = 0;
  v20 = *(_QWORD *)(a4 + 128);
  v21 = *(std::__shared_weak_count **)(v20 + 24);
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v21);
    if (v22)
    {
      v23 = v22;
      if (!*(_QWORD *)(v20 + 16))
        goto LABEL_59;
      std::string::basic_string[abi:ne180100]<0>(__p, "source");
      v24 = *(_QWORD *)(a4 + 128);
      v25 = *(std::__shared_weak_count **)(a4 + 136);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(std::__shared_weak_count **)(v24 + 24);
      if (!v28 || (v29 = std::__shared_weak_count::lock(v28)) == 0)
      {
        v33 = 0;
        v34 = 0;
        goto LABEL_42;
      }
      v30 = *(_QWORD *)(v24 + 16);
      if (v30)
      {
        v50 = v29;
        v31 = v30 + 8;
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(v30 + 8), (unsigned __int8 *)__p))
        {
          v54 = __p;
          v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<PersistentModule>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (unsigned __int8 *)__p, (__int128 **)&v54);
          v34 = (uint64_t *)*((_QWORD *)v32 + 5);
          v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 6);
          if (v33)
          {
            v35 = (unint64_t *)&v33->__shared_owners_;
            v29 = v50;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
LABEL_38:
            v37 = (unint64_t *)&v29->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              v39 = v29;
              ((void (*)(void))v29->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v39);
            }
LABEL_42:
            if (v25)
            {
              v40 = (unint64_t *)&v25->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            if (v53 < 0)
            {
              operator delete(__p[0]);
              if (v34)
              {
LABEL_49:
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 168), v34[37], v34[38]);
                std::shared_ptr<VoiceConfig>::operator=[abi:ne180100]((_QWORD *)(v9 + 184), v34[39], v34[40]);
                if (v33)
                {
                  v42 = (unint64_t *)&v33->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  goto LABEL_57;
                }
                goto LABEL_59;
              }
            }
            else if (v34)
            {
              goto LABEL_49;
            }
            if (v33)
            {
              v44 = (unint64_t *)&v33->__shared_owners_;
              do
                v43 = __ldaxr(v44);
              while (__stlxr(v43 - 1, v44));
LABEL_57:
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
LABEL_59:
            v45 = (unint64_t *)&v23->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            goto LABEL_63;
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
        }
        v29 = v50;
        goto LABEL_38;
      }
      v33 = 0;
      v34 = 0;
      goto LABEL_38;
    }
  }
LABEL_63:
  if (a3)
  {
    v47 = (unint64_t *)&a3->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  result.n128_u64[0] = v51;
  result.n128_u64[1] = v9;
  *v19 = result;
  return result;
}

void sub_1DEA026B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;

  p_shared_owners = (unint64_t *)&a9->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  v29 = (unint64_t *)&v18->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v23);
  if (*(char *)(v16 + 151) < 0)
    operator delete(*v21);
  FrontendModule::~FrontendModule(a10);
  if (v17)
  {
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v16);
  operator delete(v33);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TextSourceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TextSourceImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA932C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<TextSourceImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TextSourcePersistentModule::~TextSourcePersistentModule(void **this)
{
  *this = &off_1EA921290;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921290;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void ClickDetectorModule::~ClickDetectorModule(ClickDetectorModule *this)
{
  *(_QWORD *)this = &off_1EA91F588;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
}

{
  *(_QWORD *)this = &off_1EA91F588;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  Module::~Module(this);
  JUMPOUT(0x1DF0ED014);
}

void ClickDetectorModule::process_data(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  float **v22;
  float *v23;
  float *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  void **v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  float *v52;
  void **v53;
  _QWORD *v54;
  double *v55;
  float64x2_t v56;
  int8x16_t v57;
  double v58;
  double *v59;
  double *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  double v77;
  uint64_t v78;
  double *v79;
  double *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  const DSPDoubleComplex *v94;
  int v95;
  int v96;
  int v97;
  double *v98;
  uint64_t v99;
  char *v100;
  double v101;
  double *v102;
  float v103;
  double *v104;
  double *v105;
  float v106;
  double v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  double *v113;
  double *v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double *v124;
  double *v125;
  double v126;
  double v127;
  double *v128;
  uint64_t v129;
  long double v130;
  double v131;
  double v132;
  BOOL v133;
  uint64_t v134;
  double *v135;
  double v136;
  double v137;
  double v138;
  BOOL v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t *v153;
  _BYTE *v154;
  unint64_t v155;
  _QWORD *v156;
  int8x16_t v157;
  BOOL v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  _BYTE *v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void *__src;
  std::__shared_weak_count *v168;
  char *v169;
  char *v170;
  _QWORD *v171;
  void *__p[3];
  void *v173[3];
  double *__B[3];
  void *v175[3];
  char *v176;
  char *v177;
  uint64_t v178;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v165 = v6;
  v166 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v12 = *(_BYTE **)(*(_QWORD *)v9 + 8);
  v11 = *(std::__shared_weak_count **)(*(_QWORD *)v9 + 16);
  v163 = v12;
  v164 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(v6 + 32);
  v16 = *(_QWORD *)(v6 + 40);
  if (v15 == v16)
  {
    v68 = a2[1];
    v161 = *a2;
    v162 = (std::__shared_weak_count *)v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*a1 + 72))(a1, &v161);
    v71 = v162;
    if (v162)
    {
      v72 = (unint64_t *)&v162->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
LABEL_151:
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else
  {
    v153 = a2;
    v154 = v12;
    v156 = a1;
    if (*v12)
    {
      v17 = (_QWORD *)a1[34];
      v17[5] = v17[4];
      v17[8] = v17[7];
      v17[11] = v17[10];
      std::vector<std::vector<int>>::__clear[abi:ne180100](v17 + 16);
      v15 = *(_QWORD *)(v6 + 32);
      v16 = *(_QWORD *)(v6 + 40);
    }
    if (v16 != v15)
    {
      v18 = 0;
      v19 = 0;
      v20 = (_QWORD *)a1[34];
      v21 = v20 + 16;
      do
      {
        v22 = (float **)(v15 + v18);
        v23 = *v22;
        v24 = v22[1];
        v25 = v24 - *v22;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)&v176, v23, v24, v25);
        v27 = (_QWORD *)v20[17];
        v26 = v20[18];
        if ((unint64_t)v27 >= v26)
        {
          v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *v21) >> 3);
          v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v21) >> 3);
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0x555555555555555)
            v32 = 0xAAAAAAAAAAAAAAALL;
          else
            v32 = v30;
          v171 = v20 + 18;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v20 + 18), v32);
          else
            v33 = 0;
          v34 = &v33[24 * v29];
          __src = v33;
          v168 = (std::__shared_weak_count *)v34;
          v169 = v34;
          v170 = &v33[24 * v32];
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v34, v176, (uint64_t)v177, (v177 - v176) >> 3);
          v169 += 24;
          std::vector<std::vector<double>>::__swap_out_circular_buffer(v20 + 16, &__src);
          v28 = (_QWORD *)v20[17];
          std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)&__src);
        }
        else
        {
          *v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
          std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v27, v176, (uint64_t)v177, (v177 - v176) >> 3);
          v28 = v27 + 3;
          v20[17] = v28;
        }
        v20[17] = v28;
        if (v176)
        {
          v177 = v176;
          operator delete(v176);
        }
        ++v19;
        v15 = *(_QWORD *)(v6 + 32);
        v18 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 40) - v15) >> 3) > v19);
    }
    v35 = *((_QWORD *)v154 + 7);
    v36 = a1;
    if (*((_QWORD *)v154 + 8) != v35)
    {
      v37 = 0;
      v38 = (_QWORD *)v156[34];
      v39 = (void **)(v38 + 7);
      v40 = v38 + 9;
      v41 = (char *)v38[8];
      do
      {
        if ((unint64_t)v41 >= *v40)
        {
          v43 = (char *)*v39;
          v44 = (v41 - (_BYTE *)*v39) >> 2;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v46 = *v40 - (_QWORD)v43;
          if (v46 >> 1 > v45)
            v45 = v46 >> 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v38 + 9), v47);
            v43 = (char *)v38[7];
            v41 = (char *)v38[8];
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[4 * v44];
          *(_DWORD *)v49 = *(_DWORD *)(v35 + 4 * v37);
          v42 = v49 + 4;
          while (v41 != v43)
          {
            v50 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v49 - 1) = v50;
            v49 -= 4;
          }
          v38[7] = v49;
          v38[8] = v42;
          v38[9] = &v48[4 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_DWORD *)v41 = *(_DWORD *)(v35 + 4 * v37);
          v42 = v41 + 4;
        }
        v38[8] = v42;
        ++v37;
        v35 = *((_QWORD *)v154 + 7);
        v41 = v42;
      }
      while (v37 < (*((_QWORD *)v154 + 8) - v35) >> 2);
    }
    if (v154[1])
    {
      v51 = v156[34];
      v52 = *(float **)(v51 + 56);
      if (v52 == *(float **)(v51 + 64))
      {
        v59 = *(double **)(v51 + 88);
      }
      else
      {
        v53 = (void **)(v51 + 80);
        v54 = (_QWORD *)(v51 + 96);
        v55 = *(double **)(v51 + 88);
        v56.f64[0] = NAN;
        v56.f64[1] = NAN;
        v57 = (int8x16_t)vnegq_f64(v56);
        v157 = v57;
        do
        {
          *(double *)v57.i64 = (float)((float)(*v52 + -32768.0) * 0.000030518);
          v10.i64[0] = 1.0;
          v10 = vbslq_s8(v157, v10, v57);
          v58 = *(double *)v57.i64 - (double)(int)*(double *)v10.i64;
          if ((unint64_t)v55 >= *v54)
          {
            v60 = (double *)*v53;
            v61 = ((char *)v55 - (_BYTE *)*v53) >> 3;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v63 = *v54 - (_QWORD)v60;
            if (v63 >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v51 + 96, v64);
              v60 = *(double **)(v51 + 80);
              v55 = *(double **)(v51 + 88);
            }
            else
            {
              v65 = 0;
            }
            v66 = (double *)&v65[8 * v61];
            *v66 = v58;
            v59 = v66 + 1;
            while (v55 != v60)
            {
              v67 = *((_QWORD *)v55-- - 1);
              *((_QWORD *)v66-- - 1) = v67;
            }
            *(_QWORD *)(v51 + 80) = v66;
            *(_QWORD *)(v51 + 88) = v59;
            *(_QWORD *)(v51 + 96) = &v65[8 * v64];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *v55 = v58;
            v59 = v55 + 1;
          }
          *(_QWORD *)(v51 + 88) = v59;
          ++v52;
          v55 = v59;
        }
        while (v52 != *(float **)(v51 + 64));
      }
      __src = 0;
      v168 = 0;
      v169 = 0;
      v74 = (uint64_t)v59 - *(_QWORD *)(v51 + 80);
      std::vector<double>::resize((uint64_t)&__src, (int)(v74 >> 3));
      v75 = *(_QWORD **)(v51 + 80);
      v76 = (char *)__src;
      *(_QWORD *)__src = *v75;
      if ((int)((unint64_t)v74 >> 3) >= 2)
      {
        v77 = -*(float *)(v51 + 8);
        v78 = ((unint64_t)v74 >> 3) - 1;
        v79 = (double *)(v76 + 8);
        v80 = (double *)(v75 + 1);
        do
        {
          *v79++ = *v80 + v77 * *(v80 - 1);
          ++v80;
          --v78;
        }
        while (v78);
      }
      std::vector<double>::vector(&v176, *(int *)(v51 + 20) + (((char *)v168 - v76) >> 3));
      v81 = (char *)__src;
      v82 = (uint64_t)(*(_DWORD *)(v51 + 20) + (*(int *)(v51 + 20) < 0)) >> 1;
      v83 = v176;
      if ((char *)__src + 8 * (*(_DWORD *)(v51 + 20) / 2) + 8 != __src)
      {
        v84 = 8 * v82;
        v85 = v176;
        do
        {
          *v85++ = *(_QWORD *)&v81[v84];
          v84 -= 8;
        }
        while (v84 != -8);
      }
      if (v168 != (std::__shared_weak_count *)v81)
      {
        memmove(&v83[8 * v82], v81, (char *)v168 - v81);
        v81 = (char *)v168;
      }
      if (v81 != &v81[-8 * v82 - 8])
      {
        v86 = v177;
        v87 = 8 * ~v82;
        v88 = v81 - 8;
        do
        {
          v89 = *(_QWORD *)v88;
          v88 -= 8;
          *(_QWORD *)&v86[v87] = v89;
          v87 += 8;
        }
        while (v87);
      }
      v90 = *(int *)(v51 + 20);
      __B[0] = 0;
      std::vector<double>::vector(v175, v90, __B);
      std::vector<double>::vector(__B, *(_DWORD *)(v51 + 20) / 2 + 1);
      std::vector<double>::vector(v173, *(int *)(v51 + 24));
      std::vector<double>::vector(__p, *(int *)(v51 + 24));
      v91 = (((v177 - v176) >> 3) - *(int *)(v51 + 20)) / (unint64_t)*(int *)(v51 + 16);
      if ((v91 & 0x80000000) != 0)
      {
        v158 = 0;
      }
      else
      {
        v92 = 0;
        v158 = 1;
        v155 = (((v177 - v176) >> 3) - *(int *)(v51 + 20)) / (unint64_t)*(int *)(v51 + 16);
        do
        {
          v93 = *(_DWORD *)(v51 + 12);
          v94 = (const DSPDoubleComplex *)v175[0];
          v95 = *(_DWORD *)(v51 + 20);
          if (v93 >= 1)
          {
            v96 = v95 - v93;
            if (v95 < v93)
              ++v96;
            v97 = v93 + (v96 >> 1);
            v98 = *(double **)(v51 + 32);
            v99 = (uint64_t)v96 >> 1;
            v100 = &v176[8 * *(_DWORD *)(v51 + 16) * v92];
            do
            {
              v101 = *v98++;
              *(&v94->real + v99) = v101 * *(double *)&v100[8 * v99];
              ++v99;
            }
            while (v99 < v97);
          }
          vDSP_ctozD(v94, 2, (const DSPDoubleSplitComplex *)(v51 + 200), 1, (uint64_t)(v95 + (v95 < 0)) >> 1);
          vDSP_fft_zripD(*(FFTSetupD *)(v51 + 192), (const DSPDoubleSplitComplex *)(v51 + 200), 1, *(int *)(v51 + 184), 1);
          v102 = *(double **)(v51 + 200);
          v103 = *v102 * 0.5;
          v104 = __B[0];
          *__B[0] = fabsf(v103);
          v105 = *(double **)(v51 + 208);
          v106 = *v105 * 0.5;
          v107 = fabsf(v106);
          v108 = *(_DWORD *)(v51 + 20);
          if (v108 >= 0)
            v109 = *(_DWORD *)(v51 + 20);
          else
            v109 = v108 + 1;
          LODWORD(v110) = v109 >> 1;
          v104[(int)v110] = v107;
          if (v108 >= 4)
          {
            if ((int)v110 <= 2)
              v110 = 2;
            else
              v110 = v110;
            v111 = v110 - 1;
            v112 = v104 + 1;
            v113 = v105 + 1;
            v114 = v102 + 1;
            do
            {
              v115 = *v114++;
              v116 = v115 * 0.5 * (v115 * 0.5);
              v117 = *v113++;
              *v112++ = sqrt(v116 + v117 * 0.5 * (v117 * 0.5));
              --v111;
            }
            while (v111);
          }
          LODWORD(v118) = *(_DWORD *)(v51 + 24);
          v119 = 0.0;
          if ((int)v118 >= 1)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              vDSP_dotprD(*(const double **)(*(_QWORD *)(v51 + 104) + v120), 1, __B[0], 1, (double *)((char *)v173[0] + v121), *(_DWORD *)(v51 + 20) / 2 + 1);
              ++v122;
              v118 = *(int *)(v51 + 24);
              v121 += 8;
              v120 += 24;
            }
            while (v122 < v118);
            if ((int)v118 >= 1)
            {
              v123 = *(unsigned int *)(v51 + 24);
              v124 = (double *)v173[0];
              v125 = (double *)__p[0];
              v126 = *(float *)v51;
              v127 = (float)-*(float *)v51;
              v128 = (double *)__p[0];
              v129 = v123;
              do
              {
                v130 = *v124;
                if (*v124 < 0.00001)
                {
                  *v124 = 0.00001;
                  v130 = 0.00001;
                }
                v131 = (log10(v130) * 20.0 - v126) / v127;
                *v128 = v131;
                v132 = 0.0;
                if (v131 < 0.0 || (v132 = 1.0, v131 > 1.0))
                  *v128 = v132;
                ++v128;
                ++v124;
                --v129;
              }
              while (v129);
              if (*(_BYTE *)(v51 + 28))
                v133 = v92 >= 2;
              else
                v133 = 1;
              v134 = v92 - *(unsigned __int8 *)(v51 + 28);
              if (!v133)
                v134 = 0;
              v135 = *(double **)(*(_QWORD *)(v51 + 128) + 24 * v134);
              v119 = 0.0;
              do
              {
                v136 = *v125++;
                v137 = v136;
                v138 = *v135++;
                v119 = v119 + v137 - v138;
                --v123;
              }
              while (v123);
              LODWORD(v91) = v155;
            }
          }
          if (v119 / (double)(int)v118 > *(float *)(v51 + 4))
            break;
          v139 = v92 == (_DWORD)v91;
          v158 = v92++ < (int)v91;
        }
        while (!v139);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v36 = v156;
      if (v173[0])
      {
        v173[1] = v173[0];
        operator delete(v173[0]);
      }
      if (__B[0])
      {
        __B[1] = __B[0];
        operator delete(__B[0]);
      }
      if (v175[0])
      {
        v175[1] = v175[0];
        operator delete(v175[0]);
      }
      if (v176)
      {
        v177 = v176;
        operator delete(v176);
      }
      if (__src)
      {
        v168 = (std::__shared_weak_count *)__src;
        operator delete(__src);
      }
      v154[112] = v158;
      SharedObjectPool::get_if<TTSSynthesizerEventBusInternal>(&__src, v156[21]);
      if (__src)
        Observable::emit((uint64_t **)__src, "tts.metrics.audio_has_click", v154 + 112);
      v140 = v168;
      if (v168)
      {
        v141 = (unint64_t *)&v168->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
    }
    v143 = (std::__shared_weak_count *)v153[1];
    v159 = *v153;
    v160 = v143;
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    (*(void (**)(_QWORD *, uint64_t *))(*v36 + 72))(v36, &v159);
    v71 = v160;
    if (v160)
    {
      v146 = (unint64_t *)&v160->__shared_owners_;
      do
        v73 = __ldaxr(v146);
      while (__stlxr(v73 - 1, v146));
      goto LABEL_151;
    }
  }
  v147 = v164;
  if (v164)
  {
    v148 = (unint64_t *)&v164->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v166;
  if (v166)
  {
    v151 = (unint64_t *)&v166->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
}

void sub_1DEA03434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DEA035B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<double>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void MelBanks::linspace(MelBanks *this, double a2, double a3, int a4)
{
  int v6;
  double *v7;
  uint64_t *v9;
  double *v10;
  int v11;
  double v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  char *v31;
  uint64_t v32;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a4)
  {
    v6 = a4 - 1;
    if (a4 == 1)
    {
      v7 = (double *)operator new(8uLL);
      *v7 = a2;
      *(_QWORD *)this = v7;
      *((_QWORD *)this + 1) = v7 + 1;
      *((_QWORD *)this + 2) = v7 + 1;
      return;
    }
    v9 = (uint64_t *)((char *)this + 16);
    if (a4 < 2)
    {
      v24 = 0;
      v10 = 0;
      v22 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = a2 + (a3 - a2) / (double)v6 * (double)v11;
        if ((unint64_t)v10 >= *v9)
        {
          v13 = *(double **)this;
          v14 = ((uint64_t)v10 - *(_QWORD *)this) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = *v9 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v17);
            v13 = *(double **)this;
            v10 = (double *)*((_QWORD *)this + 1);
          }
          else
          {
            v18 = 0;
          }
          v19 = (double *)&v18[8 * v14];
          *v19 = v12;
          v20 = v19 + 1;
          while (v10 != v13)
          {
            v21 = *((_QWORD *)v10-- - 1);
            *((_QWORD *)v19-- - 1) = v21;
          }
          *(_QWORD *)this = v19;
          *((_QWORD *)this + 1) = v20;
          *((_QWORD *)this + 2) = &v18[8 * v17];
          if (v13)
            operator delete(v13);
          v10 = v20;
        }
        else
        {
          *v10++ = v12;
        }
        *((_QWORD *)this + 1) = v10;
        ++v11;
      }
      while (v11 != v6);
      v22 = *v9;
      if ((unint64_t)v10 < *v9)
      {
        *v10 = a3;
        v23 = v10 + 1;
LABEL_42:
        *((_QWORD *)this + 1) = v23;
        return;
      }
      v24 = *(double **)this;
    }
    v25 = v10 - v24;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v28);
      v24 = *(double **)this;
      v10 = (double *)*((_QWORD *)this + 1);
    }
    else
    {
      v29 = 0;
    }
    v30 = (double *)&v29[8 * v25];
    v31 = &v29[8 * v28];
    *v30 = a3;
    v23 = v30 + 1;
    while (v10 != v24)
    {
      v32 = *((_QWORD *)v10-- - 1);
      *((_QWORD *)v30-- - 1) = v32;
    }
    *(_QWORD *)this = v30;
    *((_QWORD *)this + 1) = v23;
    *((_QWORD *)this + 2) = v31;
    if (v24)
      operator delete(v24);
    goto LABEL_42;
  }
}

void sub_1DEA038C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

char **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<double> *,std::vector<double> *,std::vector<double> *>(char **a1, char **a2, uint64_t a3)
{
  uint64_t v3;
  char **v4;
  char **v5;
  char **v6;
  char *v7;
  char *v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char **v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a2;
    v5 = a1;
    v6 = (char **)(a3 + 8);
    while (v5 == v6 - 1)
    {
LABEL_26:
      v5 += 3;
      v3 += 24;
      v6 += 3;
      if (v5 == v4)
        return v6 - 1;
    }
    v7 = *v5;
    v8 = v5[1];
    v9 = v8 - *v5;
    v10 = v9 >> 3;
    v11 = (uint64_t)v6[1];
    v12 = *(v6 - 1);
    if (v9 >> 3 > (unint64_t)((v11 - (uint64_t)v12) >> 3))
    {
      if (v12)
      {
        *v6 = v12;
        operator delete(v12);
        v11 = 0;
        *(v6 - 1) = 0;
        *v6 = 0;
        v6[1] = 0;
      }
      if (v9 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v11 >> 2;
      if (v11 >> 2 <= v10)
        v13 = v9 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      std::vector<double>::__vallocate[abi:ne180100](v6 - 1, v14);
      v12 = *v6;
      if (v8 != v7)
        memmove(*v6, v7, v9);
      v15 = v6;
      goto LABEL_25;
    }
    v15 = (char **)(v3 + 8);
    v16 = *v6 - v12;
    v17 = v16 >> 3;
    if (v16 >> 3 >= v10)
    {
      if (v8 == v7)
      {
LABEL_24:
        v4 = a2;
LABEL_25:
        *v15 = &v12[v9];
        goto LABEL_26;
      }
      v19 = *(v6 - 1);
      v18 = *v5;
    }
    else
    {
      if (*v6 != v12)
      {
        memmove(*(v6 - 1), *v5, v16);
        v12 = *v6;
      }
      v18 = &v7[8 * v17];
      v9 = v8 - v18;
      if (v8 == v18)
        goto LABEL_24;
      v19 = v12;
    }
    memmove(v19, v18, v9);
    goto LABEL_24;
  }
  return (char **)v3;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double>*,std::vector<double>*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DEA03B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ClickDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9324E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ClickDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA9324E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<ClickDetector>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  free(*(void **)(a1 + 224));
  free(*(void **)(a1 + 232));
  v5 = (void **)(a1 + 176);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 152);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
}

void S1NARDecoderBaseInference::~S1NARDecoderBaseInference(void **this)
{
  *this = &off_1EA921010;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
}

{
  *this = &off_1EA921010;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  PersistentModule::~PersistentModule(this);
  JUMPOUT(0x1DF0ED014);
}

void S1NARDecoderBaseInference::inference(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  NSObject *v15;
  std::chrono::steady_clock::time_point v16;
  std::chrono::steady_clock::time_point v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint8_t buf[4];
  double v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v6 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v6, OS_LOG_TYPE_DEBUG, "S1NARDecoder inference begin.", buf, 2u);
  }
  Diagnostics::log(7, "S1NARDecoder inference begin.", v7);
  v8 = (std::__shared_weak_count *)a2[1];
  v41 = *a2;
  v42 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[13])(a1, &v41);
  v11 = v42;
  if (v42)
  {
    v12 = (unint64_t *)&v42->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(_QWORD *))(*a1[37] + 48))(a1[37]);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v15 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_DWORD *)buf = 134217984;
    v44 = (double)((v16.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v15, OS_LOG_TYPE_DEFAULT, "S1NARDecoder inference time: %.3f s", buf, 0xCu);
  }
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Diagnostics::log(5, "S1NARDecoder inference time: %.3f s", v18, (double)((v17.__d_.__rep_ - v14.__d_.__rep_) / 1000000) / 1000.0);
  v19 = (std::__shared_weak_count *)a2[1];
  v39 = *a2;
  v40 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(_QWORD **, uint64_t *))(*a1)[14])(a1, &v39);
  v22 = v40;
  if (v40)
  {
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD *))(*a1[37] + 56))(a1[37]);
  kdebug_trace();
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v25 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v25, OS_LOG_TYPE_DEBUG, "S1NARDecoder inference end.", buf, 2u);
  }
  Diagnostics::log(7, "S1NARDecoder inference end.", v26);
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v27 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEBUG))
  {
    v29 = (uint64_t)(*(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8)) >> 2;
    *(_DWORD *)buf = 134217984;
    v44 = *(double *)&v29;
    _os_log_impl(&dword_1DE3F6000, v27, OS_LOG_TYPE_DEBUG, "S1NARDecoder generates semantic tokens of length %zu", buf, 0xCu);
  }
  Diagnostics::log(7, "S1NARDecoder generates semantic tokens of length %zu", v28, (uint64_t)(*(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8)) >> 2);
  v30 = (std::__shared_weak_count *)a2[1];
  v37 = *a2;
  v38 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a3 + 24);
  if (!v33)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v37);
  v34 = v38;
  if (v38)
  {
    v35 = (unint64_t *)&v38->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1DEA04144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (a2)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    __cxa_begin_catch(exception_object);
    (*(void (**)(_QWORD))(**(_QWORD **)(v15 + 296) + 56))(*(_QWORD *)(v15 + 296));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1DEA041A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DEA041B0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DEA041B8);
  __clang_call_terminate(a1);
}

void S1NARDecoderBaseInference::prepare_inputs(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD, InferenceEngine::DataTensor **);
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  InferenceEngine::DataTensor *v13;
  std::__shared_weak_count *v14;
  void *__p;
  char v16;
  InferenceEngine::DataTensor *v17;
  std::__shared_weak_count *v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "enc_output");
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)(*(_QWORD *)a2 + 32), &v17);
  if (v16 < 0)
    operator delete(__p);
  InferenceEngine::DataTensor::unsqueeze(v17, 0);
  v4 = *(void (****)(_QWORD, InferenceEngine::DataTensor **))(a1 + 296);
  v13 = v17;
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (**v4)(v4, &v13);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1DEA042D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17 - 32);
  _Unwind_Resume(a1);
}

void S1NARDecoderBaseInference::get_outputs(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  float *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  InferenceEngine::DataTensor *v17;
  std::__shared_weak_count *v18;
  void **v19;

  v3 = *(_QWORD *)(a1 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "semantic");
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, uint64_t, void **))(*(_QWORD *)v3 + 32))(&v17, v3, __p);
  if (v16 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_2d_array<float>(v17, &v10);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v12, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 2);
  v19 = (void **)&v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  v11 = 0;
  v10 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)&v10, v12, v13, v13 - v12);
  v4 = (_QWORD *)*a2;
  v5 = (void *)v4[1];
  if (v5)
  {
    v4[2] = v5;
    operator delete(v5);
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
  }
  *(_OWORD *)(v4 + 1) = v10;
  v6 = v12;
  v4[3] = v11;
  if (v6)
  {
    v13 = v6;
    operator delete(v6);
  }
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DEA0443C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v13 - 40);
  _Unwind_Resume(a1);
}

void sub_1DEA04480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1DEA04478);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DEA044F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void S1NARDecoderModule::~S1NARDecoderModule(S1NARDecoderModule *this)
{
  S1NARDecoderModule::~S1NARDecoderModule(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA91F390;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 46, *((unsigned __int8 *)this + 360));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  Module::~Module(this);
}

void S1NARDecoderModule::prepare(S1NARDecoderModule *this)
{
  NSObject *v2;
  const char *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  char *v7;
  unint64_t *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  char *v35;
  std::__shared_weak_count *v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  uint8_t buf[8];
  __int128 v41;
  void *v42;

  if (*((_BYTE *)this + 272))
    return;
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v2 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v2, OS_LOG_TYPE_DEFAULT, "Prepare inference.", buf, 2u);
  }
  Diagnostics::log(5, "Prepare inference.", v3);
  v4 = operator new(0x80uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1EA933078;
  v4[3] = 257;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_QWORD *)&v39 = v4 + 3;
  *((_QWORD *)&v39 + 1) = v4;
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)this + 360, "n_embd");
  LODWORD(v37) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v5, (int *)&v37);
  v6 = (int)v37;
  LODWORD(v37) = 0;
  std::vector<float>::vector(buf, v6, &v37);
  std::vector<std::vector<float>>::resize(v4 + 7, 0x64uLL, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&v41 = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v7 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *(_QWORD *)v7 = &off_1EA932E10;
  *(_OWORD *)(v7 + 24) = 0u;
  *((_QWORD *)v7 + 2) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *((_QWORD *)v7 + 21) = 0;
  v37 = v7 + 24;
  v38 = (std::__shared_weak_count *)v7;
  v9 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_QWORD *)v9 = &off_1EA932198;
  *((_QWORD *)v9 + 3) = v9 + 32;
  v35 = v9 + 24;
  v36 = (std::__shared_weak_count *)v9;
  Agglomerate::set<std::shared_ptr<SemanticFeature>>((uint64_t)(v9 + 24), &v39);
  *(_QWORD *)buf = &v42;
  v11 = v10[5];
  if (v11)
  {
    *(_QWORD *)buf = &off_1EA923288;
    *(_QWORD *)&v41 = v7 + 24;
    *((_QWORD *)&v41 + 1) = v7;
    do
      v12 = __ldxr(v8);
    while (__stxr(v12 + 1, v8));
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v11 + 8, &v41);
    *(_QWORD *)buf = &off_1EA923288;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v9 = (char *)v36;
    v33 = v35;
    v34 = v36;
    if (!v36)
      goto LABEL_26;
  }
  else
  {
    v16 = (_QWORD *)operator new();
    *v16 = &off_1EA923288;
    v16[1] = v7 + 24;
    v16[2] = v7;
    do
      v17 = __ldxr(v8);
    while (__stxr(v17 + 1, v8));
    v18 = v10[5];
    v10[5] = (uint64_t)v16;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v33 = v9 + 24;
    v34 = (std::__shared_weak_count *)v9;
  }
  v19 = (unint64_t *)(v9 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_26:
  (*(void (**)(S1NARDecoderModule *, char **))(*(_QWORD *)this + 80))(this, &v33);
  v21 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1DEA04920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void S1NARDecoderModule::process_data(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v5 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 16);
  v25 = v6;
  v26 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global_6850);
  v9 = Diagnostics_GetLogObject(void)::__profile_log_default;
  if (os_log_type_enabled((os_log_t)Diagnostics_GetLogObject(void)::__profile_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v9, OS_LOG_TYPE_DEFAULT, "S1NARDecoder module start.", buf, 2u);
  }
  Diagnostics::log(5, "S1NARDecoder module start.", v10);
  std::mutex::lock((std::mutex *)(a1 + 280));
  *(_BYTE *)(a1 + 272) = 1;
  v11 = *(_QWORD *)(a1 + 344);
  v22 = v6;
  v23 = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v27[0] = &off_1EA92F8D8;
  v27[1] = a1;
  v27[2] = a2;
  v28 = v27;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v11 + 96))(v11, &v22, v27);
  v14 = v28;
  if (v28 == v27)
  {
    v15 = 4;
    v14 = v27;
    goto LABEL_15;
  }
  if (v28)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 280));
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1DEA04B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::~__func()
{
  JUMPOUT(0x1DF0ED014);
}

__n128 std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA92F8D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0,std::allocator<S1NARDecoderModule::process_data(std::shared_ptr<Agglomerate>)::$_0>,int ()(std::shared_ptr<SemanticFeature>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA92F8D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

