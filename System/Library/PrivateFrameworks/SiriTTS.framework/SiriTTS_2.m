void sub_1DE4F68C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v4);
  v3 = 0;
  while (1)
  {
    while (!v4)
    {
      if (v6 >= v5)
        return v3;
      v3 = (v3 + 1);
LABEL_10:
      ++v6;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
      break;
    v3 = (v3 + 1);
    if (!v4)
      goto LABEL_10;
    (*(void (**)(void))(*(_QWORD *)v4 + 32))();
  }
  if (v4)
    (*(void (**)(void))(*(_QWORD *)v4 + 8))();
  return v3;
}

void sub_1DE4F6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (char *)operator new(0x30uLL);
  v3 = a1[10];
  *(_DWORD *)v2 = 2139095040;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[8];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v15 = (char *)a1[8];
    v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  if (!*a2)
    ++a1[1];
  if (!a2[1])
    ++a1[2];
  v4 = (uint64_t)(a1 + 5);
  v5 = a1[5];
  v6 = (_OWORD *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[3];
    v9 = ((uint64_t)v6 - v8) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v7 = v14 + 16;
    v17 = (char *)a1[3];
    v16 = (char *)a1[4];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)a1[3];
    }
    a1[3] = v14;
    a1[4] = v7;
    a1[5] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = *(_OWORD *)a2;
    v7 = v6 + 1;
  }
  a1[4] = v7;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReadHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t result;
  fst *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const void **v38;
  unsigned __int8 *v39;
  fst *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const void **v56;
  unsigned __int8 *v57;
  fst *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  fst *v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *__p[2];
  char v82;
  char v83;

  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    *(_DWORD *)a5 = *(_DWORD *)v10;
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v10 + 8));
    std::string::operator=((std::string *)(a5 + 32), (const std::string *)(v10 + 32));
    v11 = *(_QWORD *)(v10 + 88);
    v12 = *(_OWORD *)(v10 + 72);
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(a5 + 72) = v12;
    *(_QWORD *)(a5 + 88) = v11;
  }
  else
  {
    v13 = fst::FstHeader::Read(a5, (uint64_t)a2, a3, 0);
    result = 0;
    if (!v13)
      return result;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v15 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    v16 = (_QWORD *)fst::cerr(v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"FstImpl::ReadHeader: source: ", 29);
    v18 = *(char *)(a3 + 23);
    v19 = v18 >= 0 ? a3 : *(_QWORD *)a3;
    v20 = v18 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", fst_type: ", 12);
    v23 = *(char *)(a5 + 31);
    v24 = v23 >= 0 ? a5 + 8 : *(_QWORD *)(a5 + 8);
    v25 = v23 >= 0 ? *(unsigned __int8 *)(a5 + 31) : *(_QWORD *)(a5 + 16);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", arc_type: ", 12);
    v28 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    v29 = *(char *)(v28 + 23);
    v30 = v29 >= 0 ? v28 : *(_QWORD *)v28;
    v31 = v29 >= 0 ? *(unsigned __int8 *)(v28 + 23) : *(_QWORD *)(v28 + 8);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", version: ", 11);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", flags: ", 9);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0)
      operator delete(__p[0]);
  }
  v34 = *(unsigned __int8 *)(a5 + 31);
  if ((v34 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(a5 + 31);
  else
    v35 = *(_QWORD *)(a5 + 16);
  v36 = *(unsigned __int8 *)(a1 + 39);
  v37 = (char)v36;
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a1 + 24);
  if (v35 != v36)
    goto LABEL_40;
  v38 = (const void **)(a5 + 8);
  if (v37 >= 0)
    v39 = (unsigned __int8 *)(a1 + 16);
  else
    v39 = *(unsigned __int8 **)(a1 + 16);
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(_QWORD *)(a5 + 16)))
    {
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v40 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      v41 = (_QWORD *)fst::cerr(v40);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"FstImpl::ReadHeader: Fst not of type \"", 38);
      v43 = *(char *)(a1 + 39);
      if (v43 >= 0)
        v44 = a1 + 16;
      else
        v44 = *(_QWORD *)(a1 + 16);
      if (v43 >= 0)
        v45 = *(unsigned __int8 *)(a1 + 39);
      else
        v45 = *(_QWORD *)(a1 + 24);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\": ", 3);
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      goto LABEL_79;
    }
  }
  else if (*(_BYTE *)(a5 + 31))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34)
        goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_52:
  v51 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
  v52 = *(unsigned __int8 *)(a5 + 55);
  if ((v52 & 0x80u) == 0)
    v53 = *(unsigned __int8 *)(a5 + 55);
  else
    v53 = *(_QWORD *)(a5 + 40);
  v54 = *(unsigned __int8 *)(v51 + 23);
  v55 = (char)v54;
  if ((v54 & 0x80u) != 0)
    v54 = *(_QWORD *)(v51 + 8);
  if (v53 != v54)
    goto LABEL_67;
  v56 = (const void **)(a5 + 32);
  if (v55 >= 0)
    v57 = (unsigned __int8 *)v51;
  else
    v57 = *(unsigned __int8 **)v51;
  if ((v52 & 0x80) != 0)
  {
    if (memcmp(*v56, v57, *(_QWORD *)(a5 + 40)))
    {
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v58 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
      v59 = (_QWORD *)fst::cerr(v58);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"FstImpl::ReadHeader: Arc not of type \"", 38);
      v61 = fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
      v62 = *(char *)(v61 + 23);
      if (v62 >= 0)
        v63 = v61;
      else
        v63 = *(_QWORD *)v61;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v61 + 23);
      else
        v64 = *(_QWORD *)(v61 + 8);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\": ", 3);
      v66 = *(char *)(a3 + 23);
      if (v66 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      if (v66 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      goto LABEL_79;
    }
  }
  else if (*(_BYTE *)(a5 + 55))
  {
    while (*(unsigned __int8 *)v56 == *v57)
    {
      v56 = (const void **)((char *)v56 + 1);
      ++v57;
      if (!--v52)
        goto LABEL_83;
    }
    goto LABEL_67;
  }
LABEL_83:
  if (*(_DWORD *)(a5 + 56) < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v67 = fst::LogMessage::LogMessage((fst *)&v83, (uint64_t)__p);
    v68 = (_QWORD *)fst::cerr(v67);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
    v70 = *(char *)(a1 + 39);
    if (v70 >= 0)
      v71 = a1 + 16;
    else
      v71 = *(_QWORD *)(a1 + 16);
    if (v70 >= 0)
      v72 = *(unsigned __int8 *)(a1 + 39);
    else
      v72 = *(_QWORD *)(a1 + 24);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" Fst version: ", 14);
    v74 = *(char *)(a3 + 23);
    if (v74 >= 0)
      v49 = a3;
    else
      v49 = *(_QWORD *)a3;
    if (v74 >= 0)
      v50 = *(unsigned __int8 *)(a3 + 23);
    else
      v50 = *(_QWORD *)(a3 + 8);
LABEL_79:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v83);
    if (v82 < 0)
      operator delete(__p[0]);
    return 0;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a5 + 64);
  if ((*(_BYTE *)(a5 + 60) & 1) != 0)
    *(_QWORD *)(a1 + 40) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  if (!*(_BYTE *)(a3 + 52))
  {
    v75 = *(_QWORD *)(a1 + 40);
    if (v75)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v75 + 8))(v75, v57);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  if ((*(_BYTE *)(a5 + 60) & 2) != 0)
    *(_QWORD *)(a1 + 48) = fst::SymbolTable::Read(a2, (const std::string *)a3);
  if (!*(_BYTE *)(a3 + 53))
  {
    v76 = *(_QWORD *)(a1 + 48);
    if (v76)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v76 + 8))(v76, v57);
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  v77 = *(_QWORD *)(a3 + 32);
  if (v77)
  {
    v78 = *(_QWORD *)(a1 + 40);
    if (v78)
    {
      (*(void (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v78 + 8))(*(_QWORD *)(a1 + 40), v57);
      v77 = *(_QWORD *)(a3 + 32);
    }
    *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77, v57);
  }
  v79 = *(_QWORD *)(a3 + 40);
  if (v79)
  {
    v80 = *(_QWORD *)(a1 + 48);
    if (v80)
    {
      (*(void (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v80 + 8))(*(_QWORD *)(a1 + 48), v57);
      v79 = *(_QWORD *)(a3 + 40);
    }
    *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v79 + 16))(v79, v57);
  }
  return 1;
}

void sub_1DE4F71D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::FstHeader::~FstHeader(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::TropicalWeightTpl<float>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::TropicalWeightTpl<float>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type(void)::type;
}

void sub_1DE4F7320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string v5;

  {
    v2 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v5, &byte_1DEBD87CE);
    v3 = std::string::insert(&v5, 0, "tropical");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    fst::TropicalWeightTpl<float>::Type(void)::type = v2;
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_1DE4F7420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1DF0ECC6C](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1DF0ECC78](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1DF0ECC6C](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1DF0ECC78](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1DE4F78D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1DF0ECC78](&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1DF0ECB88](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1DF0ECB88](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1DF0ECB88](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1DE4F7A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0ECB94](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](a1 + 52);
  return a1;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1DE4F7CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  int v25;
  std::vector<int>::pointer end;
  int *v27;
  std::vector<int>::pointer begin;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  int v35;
  std::vector<int>::pointer v36;
  int *v37;
  std::vector<int>::pointer v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int v45;
  unint64_t v46;
  std::vector<int>::pointer v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  std::vector<int>::pointer v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  float v58;
  int v59;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  std::vector<int> v66;
  std::vector<int> v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v73 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = &v73;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a1, &v68, 0);
      v8 = v73;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v61 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      v65 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v63);
      v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63))
        {
          if (v63)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11)
              std::vector<int>::reserve(&v67, v18);
            if (v14)
              std::vector<int>::reserve(&v66, v18);
            v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v68);
            v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(_QWORD *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71)
                      --*(_DWORD *)v71;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<int>::pointer)5))
                  {
                    v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2)
                      v46 = 2;
                    v47 = v67.__begin_ + 1;
                    v48 = *v67.__begin_;
                    v49 = v46 - 1;
                    while (1)
                    {
                      v51 = *v47++;
                      v50 = v51;
                      if (v51 == v48)
                        break;
                      v48 = v50;
                      if (!--v49)
                        goto LABEL_101;
                    }
                    v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1)
                        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      v58 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                      *(float *)&v68 = v58;
                      v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v58) != 1)v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        *(float *)&v68 = v58;
                        v75 = 0;
                        if (v58 != 0.0)
                          v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v63)
                        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
                      else
                        ++v65;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14)
                      goto LABEL_112;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<int>::pointer)5)
                  {
                    v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2)
                      v52 = 2;
                    v53 = v66.__begin_ + 1;
                    v54 = *v66.__begin_;
                    v55 = v52 - 1;
                    while (1)
                    {
                      v57 = *v53++;
                      v56 = v57;
                      if (v57 == v54)
                        break;
                      v54 = v56;
                      if (!--v55)
                        goto LABEL_112;
                    }
                    v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              v20 = v69 + 16 * v72;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v73;
              }
              else
              {
                v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v8)
                v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < (int)a2)
                v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v75 = 0;
              v24 = *(float *)(v20 + 8);
              v75 = LODWORD(v24);
              v74 = 0;
              if (v24 != 0.0)
              {
                v75 = LODWORD(v24);
                v74 = 2139095040;
                if (v24 != INFINITY)
                  v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17)
                v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v25 != (_DWORD)v17 + 1)
                v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  begin = v67.__begin_;
                  v29 = v67.__end_ - v67.__begin_;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_135;
                  v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    begin = v67.__begin_;
                    end = v67.__end_;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (int *)&v33[4 * v29];
                  *v34 = *(_DWORD *)v20;
                  v27 = v34 + 1;
                  while (end != begin)
                  {
                    v35 = *--end;
                    *--v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (int *)&v33[4 * v32];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v67.__end_ = v8;
                  v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  v38 = v66.__begin_;
                  v39 = v66.__end_ - v66.__begin_;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62)
LABEL_135:
                    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
                  v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40)
                    v40 = v41 >> 1;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                    v42 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    v38 = v66.__begin_;
                    v36 = v66.__end_;
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (int *)&v43[4 * v39];
                  *v44 = *(_DWORD *)(v20 + 4);
                  v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    v45 = *--v36;
                    *--v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (int *)&v43[4 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          v17 = v65;
          goto LABEL_18;
        }
        if (v63)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      v8 = v73;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1DE4F84D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

BOOL fst::CompatProperties(unint64_t this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  char v22;

  v2 = (((2 * a2) & 0x2AAAAAAA0000 | a2 & 0x3FFFFFFF0000 | (a2 >> 1) & 0x155555550000) & ((this >> 1) & 0x155555550000 | (2 * this) & 0x2AAAAAAA0000 | this) | 7) & (a2 ^ this);
  if (v2)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      if ((v6 & v2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v7 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
        v8 = (_QWORD *)fst::cerr(v7);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"CompatProperties: mismatch: ", 28);
        v10 = strlen(fst::PropertyNames[v5]);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)fst::PropertyNames[v5], v10);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": props1 = ", 11);
        if ((v6 & this) != 0)
          v13 = "true";
        else
          v13 = "false";
        if ((v6 & this) != 0)
          v14 = 4;
        else
          v14 = 5;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", props2 = ", 11);
        if ((v6 & a2) != 0)
          v17 = "true";
        else
          v17 = "false";
        if ((v6 & a2) != 0)
          v18 = 4;
        else
          v18 = 5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      v6 *= 2;
      ++v5;
    }
    while (v5 != 64);
  }
  return v2 == 0;
}

void sub_1DE4F86EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>();
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_98;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, v7, v7);
LABEL_17:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_34;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_34;
        v15 = v11[1];
        if (!v15)
          goto LABEL_30;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_31:
        v17 = *(int *)(v16 + 12);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 12);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_51;
LABEL_52:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(a2, *(_DWORD *)(v16 + 12), v7);
            goto LABEL_17;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_52;
LABEL_51:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_30:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_31;
        }
LABEL_34:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<char *>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_51;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_68:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_74;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_74:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_68;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      a3 = v44;
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_98:
  fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(v52);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
  std::deque<char *>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1DE4F8E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena((uint64_t *)va1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase((void **)va);
  std::deque<char *>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;

  if (*(_QWORD *)a1)
    *(_QWORD *)(*(_QWORD *)a1 + 8) = **(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = 0;
    *(_QWORD *)(v5 + 8) = 0;
  }
  else
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v6 = 1;
  }
  *(_BYTE *)(a1 + 52) = v6;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(a1 + 32) = a2;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = v8;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(a1 + 72) = v11;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishVisit(uint64_t result)
{
  _QWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = **(_DWORD ***)result;
    v3 = *(_QWORD *)(*(_QWORD *)result + 8) - (_QWORD)v2;
    if (v3)
    {
      v4 = v3 >> 2;
      if (v4 <= 1)
        v4 = 1;
      do
      {
        *v2 = *(_DWORD *)(result + 48) + ~*v2;
        ++v2;
        --v4;
      }
      while (v4);
    }
  }
  if (*(_BYTE *)(result + 52))
  {
    v5 = *(void ***)(result + 16);
    if (v5)
    {
      if (*v5)
        operator delete(*v5);
      result = MEMORY[0x1DF0ED014](v5, 0x1010C40113C0ABBLL);
    }
  }
  v6 = v1[7];
  if (v6)
  {
    v7 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(v6 + 8) = v7;
      operator delete(v7);
    }
    result = MEMORY[0x1DF0ED014](v6, 0x10C402FEFCB83);
  }
  v8 = v1[8];
  if (v8)
  {
    v9 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(v8 + 8) = v9;
      operator delete(v9);
    }
    result = MEMORY[0x1DF0ED014](v8, 0x10C402FEFCB83);
  }
  v10 = (void **)v1[9];
  if (v10)
  {
    if (*v10)
      operator delete(*v10);
    result = MEMORY[0x1DF0ED014](v10, 0x1010C40113C0ABBLL);
  }
  v11 = v1[10];
  if (v11)
  {
    v12 = *(void **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)(v11 + 8) = v12;
      operator delete(v12);
    }
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitState(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v65;
  char v66;
  char v67;

  v6 = a1[10];
  v7 = *(_DWORD **)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if ((unint64_t)v7 >= v8)
  {
    v10 = *(_DWORD **)v6;
    v11 = ((uint64_t)v7 - *(_QWORD *)v6) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v14);
      v10 = *(_DWORD **)v6;
      v7 = *(_DWORD **)(v6 + 8);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a2;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *--v7;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)v6 = v16;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v7 = a2;
    v9 = v7 + 1;
  }
  *(_QWORD *)(v6 + 8) = v9;
  v19 = a2;
  v20 = *(_QWORD *)a1[7];
  if (a2 >= (unint64_t)((*(_QWORD *)(a1[7] + 8) - v20) >> 2))
  {
    do
    {
      v21 = *a1;
      if (*a1)
      {
        v22 = *(_QWORD *)(v21 + 16);
        v23 = *(_DWORD **)(v21 + 8);
        if ((unint64_t)v23 >= v22)
        {
          v25 = *(_DWORD **)v21;
          v26 = ((uint64_t)v23 - *(_QWORD *)v21) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            goto LABEL_78;
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v21 + 16, v29);
            v25 = *(_DWORD **)v21;
            v23 = *(_DWORD **)(v21 + 8);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = -1;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *--v23;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *(_QWORD *)v21 = v31;
          *(_QWORD *)(v21 + 8) = v24;
          *(_QWORD *)(v21 + 16) = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v23 = -1;
          v24 = v23 + 1;
        }
        *(_QWORD *)(v21 + 8) = v24;
      }
      v33 = a1[1];
      if (v33)
      {
        v67 = 0;
        std::vector<BOOL>::push_back(v33, &v67);
      }
      v34 = a1[2];
      v66 = 0;
      std::vector<BOOL>::push_back(v34, &v66);
      v35 = a1[7];
      v36 = *(_DWORD **)(v35 + 8);
      v37 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v37)
      {
        v39 = *(_DWORD **)v35;
        v40 = ((uint64_t)v36 - *(_QWORD *)v35) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_78;
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v35 + 16, v43);
          v39 = *(_DWORD **)v35;
          v36 = *(_DWORD **)(v35 + 8);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = -1;
        v38 = v45 + 4;
        while (v36 != v39)
        {
          v46 = *--v36;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)v35 = v45;
        *(_QWORD *)(v35 + 8) = v38;
        *(_QWORD *)(v35 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v36 = -1;
        v38 = v36 + 1;
      }
      *(_QWORD *)(v35 + 8) = v38;
      v47 = a1[8];
      v48 = *(_DWORD **)(v47 + 8);
      v49 = *(_QWORD *)(v47 + 16);
      if ((unint64_t)v48 >= v49)
      {
        v51 = *(_DWORD **)v47;
        v52 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
LABEL_78:
          std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
        v54 = v49 - (_QWORD)v51;
        if (v54 >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47 + 16, v55);
          v51 = *(_DWORD **)v47;
          v48 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v52];
        *(_DWORD *)v57 = -1;
        v50 = v57 + 4;
        while (v48 != v51)
        {
          v58 = *--v48;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        *(_QWORD *)v47 = v57;
        *(_QWORD *)(v47 + 8) = v50;
        *(_QWORD *)(v47 + 16) = &v56[4 * v55];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v48 = -1;
        v50 = v48 + 1;
      }
      *(_QWORD *)(v47 + 8) = v50;
      v59 = a1[9];
      v65 = 0;
      std::vector<BOOL>::push_back(v59, &v65);
      v20 = *(_QWORD *)a1[7];
    }
    while (v19 >= (*(_QWORD *)(a1[7] + 8) - v20) >> 2);
  }
  *(_DWORD *)(v20 + 4 * v19) = *((_DWORD *)a1 + 11);
  v60 = (_QWORD *)a1[9];
  *(_DWORD *)(*(_QWORD *)a1[8] + 4 * v19) = *((_DWORD *)a1 + 11);
  v61 = v19 >> 6;
  v62 = 1 << v19;
  *(_QWORD *)(*v60 + 8 * (v19 >> 6)) |= 1 << v19;
  v63 = (_QWORD *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) |= v62;
  }
  else
  {
    if (v63)
      *(_QWORD *)(*v63 + 8 * v61) &= ~v62;
    *(_QWORD *)a1[3] = *(_QWORD *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
  return 1;
}

void fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::FinishState(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if ((*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32)) == INFINITY)
  {
    v6 = a2;
  }
  else
  {
    v6 = a2;
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v6) != *(_DWORD *)(v7 + 4 * v6))
    goto LABEL_17;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_16;
    }
LABEL_14:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_14;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_16:
  ++*(_DWORD *)(a1 + 48);
LABEL_17:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * v6);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 12);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 12) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 12);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

double fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool(_QWORD *a1)
{
  double result;

  *a1 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1 + 1);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1DE4F9958(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~MemoryPool(_QWORD *a1)
{
  *a1 = &unk_1EA924000;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1 + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1EA924628;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1DE4F9A40(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Size()
{
  return 56;
}

_QWORD *std::__list_imp<char *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

double fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  double result;

  *a1 = &unk_1EA924628;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0ECFFC](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(a1).n128_u64[0];
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RateMarker>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DE4F9FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 56 * a2;
  v4 = a1[1];
  if (224 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

void sub_1DE4FA24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
    v12 = a5;
    if (!a4)
      v12 = 0;
    v13 = v11 + v12;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(_QWORD *)a1)
        free(*(void **)a1);
      v23 = 0x4000;
      if (v13 > 0x4000)
        v23 = v13;
      *(_QWORD *)(a1 + 8) = v23;
      v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 16) = v15;
      v14 = v15;
    }
    else
    {
      v14 = *(_OWORD **)(a1 + 16);
      v15 = *(_OWORD **)a1;
    }
    *(_QWORD *)(a1 + 24) = &v14[v13];
    v16 = v24;
    v17 = v25;
    v19 = v26;
    v18 = v27;
    if (v27)
      ++*v27;
    v20 = 0;
    if (!v16)
      goto LABEL_15;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      v22 = *v16;
      if (v21)
        break;
      *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16)
          break;
LABEL_15:
        if (v20 >= v19)
        {
          if (v18)
            --*v18;
          return;
        }
        *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    v10 = v25 + 16 * v26;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1DE4FA45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(unint64_t a1, float a2, float a3)
{
  if (a2 != INFINITY && a2 != 0.0)
    a1 &= ~0x100000000uLL;
  if (a3 != INFINITY && a3 != 0.0)
    a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  return a1 & 0x3FFFFFF0007;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 24))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 16);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(v8, a2, a3, v7);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a3;
  v5 = *((_DWORD *)a3 + 1);
  v6 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v5)
    v6 = a1;
  v7 = v6 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v5)
    v7 = v6 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v4 == 0.0)
    v6 = v7;
  if (!v5)
    v6 = v6 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 > SLODWORD(v4))
      v6 = v6 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v5)
      v6 = v6 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  if (a3[2] != INFINITY && a3[2] != 0.0)
    v6 = v6 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (*((_DWORD *)a3 + 3) <= a2)
    v6 = v6 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v6 & 0x4000000000) != 0)
    return v6 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v6 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  std::vector<int>::value_type __x;
  std::vector<int> v32;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v32.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v30 = *(int64x2_t *)(v16 + 8);
        v26 = 0;
        v27 = v20 >> 4;
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v22 = *(_QWORD *)(v16 + 24);
        do
        {
          v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(_QWORD *)v22;
            v24.i64[1] = HIDWORD(*(_QWORD *)v22);
            v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              v14 = *v4;
            }
            ++v26;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v21;
          v25 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        v30 = v19;
        v27 = v25 >> 4;
      }
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs((_QWORD *)v16, v27 - v26);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v32.__begin_;
    if (!v32.__begin_)
      return;
  }
  else
  {
    v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1DE4FA89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v2);
  }
}

_QWORD *fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result[4];
    v3 = -16 * a2;
    v4 = (_DWORD *)(v2 - 16);
    v5 = (_DWORD *)(v2 - 16);
    do
    {
      v6 = *v5;
      v5 -= 4;
      if (!v6)
        --result[1];
      if (!v4[1])
        --result[2];
      v4 = v5;
      --a2;
    }
    while (a2);
    result[4] = v2 + v3;
  }
  return result;
}

void sub_1DE4FA9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 64);
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 64);
    }
    while (v3 < (*(_QWORD *)(a1 + 72) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MappedFile::~MappedFile(fst::MappedFile *this)
{
  size_t v2;
  void *v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  char *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  char v14;

  *(_QWORD *)this = &off_1EA923A40;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_9;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    if (!munmap(v3, v2))
      goto LABEL_9;
    std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)v12);
    v5 = (_QWORD *)fst::cerr(v4);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"failed to unmap region: ", 24);
    v7 = __error();
    v8 = strerror(*v7);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
    v10 = (void *)v12[0];
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    if (!v11)
      goto LABEL_9;
    v10 = (void *)(v11 - *((int *)this + 8));
  }
  operator delete(v10);
LABEL_9:
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

{
  fst::MappedFile::~MappedFile(this);
  JUMPOUT(0x1DF0ED014);
}

void fst::MappedFile::SetLocked(fst::MappedFile *this, int a2, char a3)
{
  float v3;
  size_t v6;
  float v7;
  const void *v8;
  fst *v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  size_t v14;
  fst *v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  char *v19;
  size_t v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  char *v25;
  size_t v26;
  void *__p[2];
  char v28;
  char v29;

  v3 = *((float *)this + 16);
  if (v3 > 0.0 && *((unsigned __int8 *)this + 68) != a2)
  {
    v6 = *((_QWORD *)this + 3);
    if (v3 < 1.0)
    {
      v7 = v3 * (float)v6;
      if ((unint64_t)v7 < v6)
        v6 = (unint64_t)v7;
    }
    v8 = (const void *)*((_QWORD *)this + 2);
    if (a2)
    {
      if (!mlock(v8, v6))
      {
        *((_BYTE *)this + 68) = 1;
        return;
      }
      if ((a3 & 1) != 0 || getenv("QSR_ALLOW_MEMLOCK_FAIL"))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v9 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v10 = (_QWORD *)fst::cerr(v9);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Memory lock of file failed: ", 28);
        v12 = __error();
        v13 = strerror(*v12);
        v14 = strlen(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v22 = (_QWORD *)fst::cerr(v21);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Memory locking of file failed. If you are debugging try setting environment variable QSR_ALLOW_MEMLOCK_FAIL ", 108);
        v24 = __error();
        v25 = strerror(*v24);
        v26 = strlen(v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
      }
    }
    else
    {
      if (!munlock(v8, v6))
      {
        *((_BYTE *)this + 68) = 0;
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
      v15 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
      v16 = (_QWORD *)fst::cerr(v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Memory unlock of file failed: ", 30);
      v18 = __error();
      v19 = strerror(*v18);
      v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    }
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
    if (v28 < 0)
      operator delete(__p[0]);
  }
}

void sub_1DE4FAE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::MappedFile::Allocate(fst::MappedFile *this, int a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  void *__p[2];
  uint64_t v13;

  if (this)
  {
    v4 = a2;
    v5 = (unint64_t)operator new((size_t)this + a2);
    v6 = v5 / v4 * a2 - v5 + 16;
    v7 = (char *)(v5 + v6);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  *(_QWORD *)v8 = &off_1EA923A40;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = this;
  *(_DWORD *)(v8 + 32) = v6;
  v9 = (std::string *)(v8 + 40);
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v10 = SHIBYTE(v13);
    *(_DWORD *)(v8 + 64) = 1065353216;
    *(_BYTE *)(v8 + 68) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 56) = v13;
    *(_DWORD *)(v8 + 64) = 1065353216;
    *(_BYTE *)(v8 + 68) = 0;
  }
  return v8;
}

void sub_1DE4FAF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v15, 0x1093C40E6D40A01);
  _Unwind_Resume(a1);
}

fst::MappedFile *fst::MappedFile::Map(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  std::string *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  char *v17;
  size_t v18;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  fst *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  fst *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  fst *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  const std::string::value_type *v50;
  uint64_t v51;
  _QWORD *v52;
  fst::MappedFile *v54;
  void *v56[2];
  char v57;
  char v58;
  void *__p[2];
  char v60;
  unint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  std::istream::tellg();
  v5 = a2;
  if ((*(_DWORD *)(a2 + 48) - 1) <= 1 && (v61 & 0xF) == 0)
  {
    v7 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v8 = open(v7, 0);
    v5 = a2;
    if (v8 != -1)
    {
      v9 = sysconf(29);
      v10 = v61 % v9;
      v11 = (char *)mmap(0, v10 + a3, 1, 1, v8, v61 / v9 * v9);
      if (close(v8) || v11 == (char *)-1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v13 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__p);
        v14 = (_QWORD *)fst::cerr(v13);
        v5 = a2;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Mapping of file failed: ", 24);
        v16 = __error();
        v17 = strerror(*v16);
        v18 = strlen(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
        if (v60 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v54 = (fst::MappedFile *)operator new();
        *(_QWORD *)v54 = &off_1EA923A40;
        *((_QWORD *)v54 + 1) = &v11[v10];
        *((_QWORD *)v54 + 2) = v11;
        *((_QWORD *)v54 + 3) = v10 + a3;
        *((_DWORD *)v54 + 8) = v10;
        v12 = (std::string *)((char *)v54 + 40);
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          *((_QWORD *)v54 + 7) = *(_QWORD *)(a2 + 16);
        }
        *((_DWORD *)v54 + 16) = 1065353216;
        *((_BYTE *)v54 + 68) = 0;
        std::istream::seekg();
        if (a1)
        {
          if (*(_DWORD *)(a2 + 48) == 2)
            fst::MappedFile::SetLocked(v54, 1, 0);
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v19 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__p);
            v20 = (_QWORD *)fst::cerr(v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"mmap'ed region of ", 18);
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" at offset ", 11);
            v22 = (_QWORD *)std::ostream::operator<<();
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" from ", 6);
            v24 = *(char *)(a2 + 23);
            v25 = v24 >= 0 ? a2 : *(_QWORD *)a2;
            v26 = v24 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" to addr ", 9);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
            if (v60 < 0)
              operator delete(__p[0]);
          }
          return v54;
        }
        (*(void (**)(fst::MappedFile *))(*(_QWORD *)v54 + 8))(v54);
        v5 = a2;
      }
    }
  }
  if (*(_DWORD *)(v5 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
    v28 = fst::LogMessage::LogMessage((fst *)v56, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"File mapping at offset ", 23);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" of size ", 9);
    v31 = (_QWORD *)std::ostream::operator<<();
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" of file ", 9);
    v33 = *(char *)(a2 + 23);
    v34 = v33 >= 0 ? a2 : *(_QWORD *)a2;
    v35 = v33 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" could not be honored, reading instead.", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v56);
    if (v60 < 0)
      operator delete(__p[0]);
  }
  v54 = (fst::MappedFile *)fst::MappedFile::Allocate((fst::MappedFile *)a3, 16);
  if (a3)
  {
    v37 = *((_QWORD *)v54 + 1);
    while (1)
    {
      v38 = a3 >= 0x10000000 ? 0x10000000 : a3;
      std::istream::tellg();
      v39 = (_QWORD *)std::istream::read();
      if ((*((_BYTE *)v39 + *(_QWORD *)(*v39 - 24) + 32) & 5) != 0)
        break;
      a3 -= v38;
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "INFO");
        v40 = fst::LogMessage::LogMessage((fst *)&v58, (uint64_t)v56);
        v41 = (_QWORD *)fst::cerr(v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Read ", 5);
        v42 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" bytes. ", 8);
        v43 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" remaining.", 11);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v58);
        if (v57 < 0)
          operator delete(v56[0]);
      }
      v37 += v38;
      if (!a3)
        return v54;
    }
    std::string::basic_string[abi:ne180100]<0>(v56, "ERROR");
    v44 = fst::LogMessage::LogMessage((fst *)&v58, (uint64_t)v56);
    v45 = (_QWORD *)fst::cerr(v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Failed to read ", 15);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" bytes at offset ", 17);
    v47 = (_QWORD *)std::ostream::operator<<();
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"from \"", 6);
    v49 = *(char *)(a2 + 23);
    if (v49 >= 0)
      v50 = (const std::string::value_type *)a2;
    else
      v50 = *(const std::string::value_type **)a2;
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(a2 + 23);
    else
      v51 = *(_QWORD *)(a2 + 8);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\".", 2);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v58);
    if (v57 < 0)
      operator delete(v56[0]);
    (*(void (**)(fst::MappedFile *))(*(_QWORD *)v54 + 8))(v54);
    return 0;
  }
  return v54;
}

void sub_1DE4FB544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (a2 | this) & 4;
  v3 = a2 & this;
  v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0)
    v4 |= a2 & this & 0x40000;
  v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0)
    v5 |= v3 & 0x140000;
  if ((v3 & 0x10000) != 0)
    return v5;
  else
    return v4;
}

unint64_t fst::DeterminizeProperties(unint64_t this, int a2, int a3)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((this & 0x10000) != 0
    || ((this & 0x2000000) == 0 ? (v3 = a2 ^ 1) : (v3 = 0), (v4 = 0x10000000000, (v3 & 1) == 0) && a3))
  {
    v4 = 0x10000040000;
  }
  v5 = (this >> 25) & 1;
  v6 = this & 0x800000;
  if ((v5 & a3) == 0)
    v6 = 0;
  v7 = this & ((uint64_t)(this << 23) >> 63) & 0x405000000 | this & 0x142800010004 | this & ((int)((_DWORD)this << 15) >> 31) & 0xA000000 | v6 | v4;
  if ((v5 & a2) != 0)
    return v7 | 0x2000000;
  else
    return v7;
}

unint64_t fst::ProjectProperties(unint64_t this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = this & 0x3FFF00000007 | 0x10000;
  v3 = (this >> 2) & 0xC0000 | this & 0xCC300000 | v2;
  if ((this & 0x4000000) != 0)
    v3 |= 0x1400000uLL;
  if ((this & 0x8000000) != 0)
    v3 |= 0x2800000uLL;
  v4 = (this >> 2) & 0x30000000 | v3;
  v5 = this & 0x330C0000 | (((this >> 18) & 3) << 20) | v2;
  if ((this & 0x1000000) != 0)
    v5 |= 0x4400000uLL;
  if ((this & 0x2000000) != 0)
    v5 |= 0x8800000uLL;
  v6 = (4 * (_DWORD)this) & 0xC0000000 | v5;
  if (a2)
    return v6;
  else
    return v4;
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0xE05430007;
  if (a2)
    v2 = 0xF05430007;
  return v2 & this;
}

unint64_t fst::RmEpsilonProperties(unint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 176160768;
  if ((this & 0x10000) == 0)
    v2 = 0x800000;
  v3 = v2 | this & 0x2800010004;
  if (!a2)
    v3 |= this & 0x4000000000 | 3;
  if ((a2 & ((this & 0x10000000000) == 0)) != 0)
    v4 = 0;
  else
    v4 = this & 0x20000;
  return v3 | v4;
}

unint64_t fst::ShortestPathProperties(unint64_t this, int a2)
{
  uint64_t v2;

  v2 = 0x52800000000;
  if (a2)
    v2 = 0x12800000000;
  return v2 | this;
}

fst::SymbolTableTextOptions *fst::SymbolTableTextOptions::SymbolTableTextOptions(fst::SymbolTableTextOptions *this)
{
  *(_BYTE *)this = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, FLAGS_fst_field_separator);
  return this;
}

uint64_t fst::SymbolTableImpl::ReadText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  const std::locale::facet *v9;
  _QWORD *v10;
  size_t v11;
  void **v12;
  const void *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  size_t v32;
  _QWORD *v33;
  char **p_endptr;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  char v48;
  char *__endptr;
  void *__p[2];
  char v51;
  void *v52[2];
  char v53;
  std::locale v54;
  std::locale::__imp *locale;
  uint64_t v56;
  char __s[8096];
  uint64_t v58;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = (_QWORD *)v1;
  v58 = *MEMORY[0x1E0C80C00];
  v7 = operator new();
  fst::SymbolTableImpl::SymbolTableImpl((std::string *)v7, v5);
  for (i = 1; ; ++i)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v9 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v54);
    v10 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    v54.__locale_ = 0;
    locale = 0;
    v56 = 0;
    if (*(char *)(v3 + 31) >= 0)
      v11 = *(unsigned __int8 *)(v3 + 31);
    else
      v11 = *(_QWORD *)(v3 + 16);
    std::string::basic_string[abi:ne180100]((uint64_t)v52, v11 + 1);
    if (v53 >= 0)
      v12 = v52;
    else
      v12 = (void **)v52[0];
    if (v11)
    {
      if (*(char *)(v3 + 31) >= 0)
        v13 = (const void *)(v3 + 8);
      else
        v13 = *(const void **)(v3 + 8);
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)v12 + v11) = 10;
    if (v53 >= 0)
      v14 = (char *)v52;
    else
      v14 = (char *)v52[0];
    fst::SplitToVector(__s, v14, (void **)&v54.__locale_, 1);
    v15 = (locale - v54.__locale_) >> 3;
    if (!v15)
    {
      v20 = 2;
      goto LABEL_54;
    }
    if (v15 == 2)
    {
      v16 = *(char **)v54.__locale_;
      v17 = (const char *)*((_QWORD *)v54.__locale_ + 1);
      __endptr = 0;
      v18 = strtoll(v17, &__endptr, 10);
      if (__endptr >= &v17[strlen(v17)])
      {
        v19 = v18 < 0 && *(_BYTE *)v3 == 0;
        if (!v19 && v18 != -1)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v16);
          fst::SymbolTableImpl::AddSymbol(v7, (uint64_t)__p, v18);
          if (v51 < 0)
            operator delete(__p[0]);
          v20 = 0;
          goto LABEL_54;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v35 = fst::LogMessage::LogMessage((fst *)&v48, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"SymbolTable::ReadText: Bad non-negative integer \"", 49);
      v38 = strlen(v17);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v17, v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\", ", 3);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"file = ", 7);
      v42 = *((char *)v5 + 23);
      if (v42 >= 0)
        v43 = (uint64_t)v5;
      else
        v43 = *(_QWORD *)v5;
      if (v42 >= 0)
        v44 = *((unsigned __int8 *)v5 + 23);
      else
        v44 = *((_QWORD *)v5 + 1);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", line = ", 9);
      std::ostream::operator<<();
      p_endptr = (char **)&v48;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v21 = fst::LogMessage::LogMessage((fst *)&__endptr, (uint64_t)__p);
      v22 = (_QWORD *)fst::cerr(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SymbolTable::ReadText: Bad number of columns (", 46);
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"), ", 3);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"file = ", 7);
      v26 = *((char *)v5 + 23);
      if (v26 >= 0)
        v27 = (uint64_t)v5;
      else
        v27 = *(_QWORD *)v5;
      if (v26 >= 0)
        v28 = *((unsigned __int8 *)v5 + 23);
      else
        v28 = *((_QWORD *)v5 + 1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", line = ", 9);
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":<", 2);
      v32 = strlen(__s);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)__s, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)">", 1);
      p_endptr = &__endptr;
    }
    fst::LogMessage::~LogMessage((fst::LogMessage *)p_endptr);
    if (v51 < 0)
      operator delete(__p[0]);
    if (*(char *)(v7 + 223) < 0)
      operator delete(*(void **)(v7 + 200));
    if (*(char *)(v7 + 199) < 0)
      operator delete(*(void **)(v7 + 176));
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v7 + 144, *(_QWORD **)(v7 + 152));
    v46 = *(void **)(v7 + 120);
    if (v46)
    {
      *(_QWORD *)(v7 + 128) = v46;
      operator delete(v46);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v7 + 40));
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1DF0ED014](v7, 0x10B2C404FCE5648);
    v20 = 1;
LABEL_54:
    if (v53 < 0)
      operator delete(v52[0]);
    if (v54.__locale_)
    {
      locale = v54.__locale_;
      operator delete(v54.__locale_);
    }
    if ((v20 | 2) != 2)
      return 0;
  }
  return v7;
}

void sub_1DE4FBD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30)
{
  uint64_t v30;

  MEMORY[0x1DF0ED014](v30, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t NthKey;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  char v34;
  uint64_t v35;
  char v36;

  v35 = a3;
  if (a3 == -1)
    return -1;
  v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), a2);
  if ((v7 & 1) != 0)
  {
    if (((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1 == a3 && *(_QWORD *)(a1 + 32) == a3)
    {
      *(_QWORD *)(a1 + 32) = a3 + 1;
      v9 = a3;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 136);
      v11 = *(uint64_t **)(a1 + 128);
      if ((unint64_t)v11 >= v10)
      {
        v22 = *(uint64_t **)(a1 + 120);
        v23 = v11 - v22;
        if ((unint64_t)(v23 + 1) >> 61)
          std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
        v24 = v10 - (_QWORD)v22;
        v25 = (uint64_t)(v10 - (_QWORD)v22) >> 2;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 136, v26);
          v22 = *(uint64_t **)(a1 + 120);
          v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          v27 = 0;
        }
        v28 = (uint64_t *)&v27[8 * v23];
        v29 = &v27[8 * v26];
        *v28 = a3;
        v12 = v28 + 1;
        while (v11 != v22)
        {
          v30 = *--v11;
          *--v28 = v30;
        }
        *(_QWORD *)(a1 + 120) = v28;
        *(_QWORD *)(a1 + 128) = v12;
        *(_QWORD *)(a1 + 136) = v29;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v11 = a3;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a1 + 128) = v12;
      v31 = ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1;
      __p[0] = &v35;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 144), &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v31;
      v9 = v35;
    }
    if (v9 >= *(_QWORD *)(a1 + 24))
      *(_QWORD *)(a1 + 24) = v9 + 1;
    *(_BYTE *)(a1 + 172) = 0;
  }
  else
  {
    NthKey = fst::SymbolTableImpl::GetNthKey((fst::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v13 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)__p);
        v14 = (_QWORD *)fst::cerr(v13);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        v16 = *(char *)(a2 + 23);
        if (v16 >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        if (v16 >= 0)
          v18 = *(unsigned __int8 *)(a2 + 23);
        else
          v18 = *(_QWORD *)(a2 + 8);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" already in symbol_map_ with key = ", 35);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but supplied new key = ", 24);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (ignoring new key)", 19);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
        if (v34 < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v9;
}

void sub_1DE4FC074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTableImpl::MaybeRecomputeCheckSum(fst::SymbolTableImpl *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  size_t v5;
  int v6;
  char v7;
  std::string *v8;
  uint64_t v9;
  std::string::value_type v10;
  std::string::value_type v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  std::string *v16;
  void **v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  size_t v22;
  void *p_dst;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  int v33;
  int v34;
  std::string *v35;
  fst::SymbolTableImpl *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  int v51;
  int v52;
  std::string *v53;
  fst::SymbolTableImpl *v54;
  fst::SymbolTableImpl *v55;
  BOOL v56;
  void **v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  void *__dst;
  uint64_t v62;
  unsigned __int8 v63;
  std::string __p[3];
  void *v65;
  char v66;
  _BYTE v67[152];
  int v68;
  std::string v69;
  int v70;
  std::string v71;

  if (!*((_BYTE *)this + 172))
  {
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v70);
    v2 = *((_QWORD *)this + 6);
    if (*((_QWORD *)this + 7) != v2)
    {
      v3 = 0;
      do
      {
        v4 = *(char **)(v2 + 8 * v3);
        v5 = strlen(v4);
        std::string::basic_string[abi:ne180100](__p, v4, v5);
        v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = __p[0].__r_.__value_.__r.__words[1];
        else
          v8 = __p;
        if (v6 >= 1)
        {
          v9 = v6;
          do
          {
            v11 = v8->__r_.__value_.__s.__data_[0];
            v8 = (std::string *)((char *)v8 + 1);
            v10 = v11;
            v12 = v70++;
            v13 = -v12 < 0;
            v14 = -v12 & 0x1F;
            v15 = v12 & 0x1F;
            if (!v13)
              v15 = -v14;
            if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = &v71;
            else
              v16 = (std::string *)v71.__r_.__value_.__r.__words[0];
            v16->__r_.__value_.__s.__data_[v15] ^= v10;
            --v9;
          }
          while (v9);
          v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        ++v70;
        if (v7 < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        ++v3;
        v2 = *((_QWORD *)this + 6);
      }
      while (v3 < (*((_QWORD *)this + 7) - v2) >> 3);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      __p[0] = v71;
    v17 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0)
      operator delete(*v17);
    *(_OWORD *)v17 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_QWORD *)this + 24) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v68);
    if (*((uint64_t *)this + 4) >= 1)
    {
      v18 = 0;
      v19 = *MEMORY[0x1E0DE4F60];
      v20 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v21 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        v22 = strlen(*(const char **)(*((_QWORD *)this + 6) + 8 * v18));
        std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((_QWORD *)this + 6) + 8 * v18), v22);
        if ((v63 & 0x80u) == 0)
          p_dst = &__dst;
        else
          p_dst = __dst;
        if ((v63 & 0x80u) == 0)
          v24 = v63;
        else
          v24 = v62;
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)p_dst, v24);
        LOBYTE(v58) = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)&v58, 1);
        std::ostream::operator<<();
        if ((char)v63 < 0)
          operator delete(__dst);
        std::stringbuf::str();
        if ((v63 & 0x80u) == 0)
          v26 = (char *)&__dst;
        else
          v26 = (char *)__dst;
        std::stringbuf::str();
        v27 = v60;
        v28 = v60;
        if ((v60 & 0x80u) != 0)
          v27 = v59;
        if (v27 >= 1)
        {
          v29 = v27;
          do
          {
            v31 = *v26++;
            v30 = v31;
            v32 = v68++;
            v13 = -v32 < 0;
            v33 = -v32 & 0x1F;
            v34 = v32 & 0x1F;
            if (!v13)
              v34 = -v33;
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v69;
            else
              v35 = (std::string *)v69.__r_.__value_.__r.__words[0];
            v35->__r_.__value_.__s.__data_[v34] ^= v30;
            --v29;
          }
          while (v29);
          v28 = v60;
        }
        if ((v28 & 0x80) != 0)
          operator delete(v58);
        if ((char)v63 < 0)
          operator delete(__dst);
        __p[0].__r_.__value_.__r.__words[0] = v19;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v19 - 24)) = v20;
        __p[0].__r_.__value_.__l.__size_ = v21;
        if (v66 < 0)
          operator delete(v65);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1DF0ECF6C](v67);
        ++v18;
      }
      while (v18 < *((_QWORD *)this + 4));
    }
    v36 = (fst::SymbolTableImpl *)*((_QWORD *)this + 18);
    if (v36 != (fst::SymbolTableImpl *)((char *)this + 152))
    {
      v37 = *MEMORY[0x1E0DE4F60];
      v38 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v39 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        if (*((_QWORD *)v36 + 4) >= *((_QWORD *)this + 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          v40 = strlen(*(const char **)(*((_QWORD *)this + 6) + 8 * *((_QWORD *)v36 + 5)));
          std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((_QWORD *)this + 6) + 8 * *((_QWORD *)v36 + 5)), v40);
          if ((v63 & 0x80u) == 0)
            v41 = &__dst;
          else
            v41 = __dst;
          if ((v63 & 0x80u) == 0)
            v42 = v63;
          else
            v42 = v62;
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v41, v42);
          LOBYTE(v58) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v58, 1);
          std::ostream::operator<<();
          if ((char)v63 < 0)
            operator delete(__dst);
          std::stringbuf::str();
          if ((v63 & 0x80u) == 0)
            v44 = (char *)&__dst;
          else
            v44 = (char *)__dst;
          std::stringbuf::str();
          v45 = v60;
          v46 = v60;
          if ((v60 & 0x80u) != 0)
            v45 = v59;
          if (v45 >= 1)
          {
            v47 = v45;
            do
            {
              v49 = *v44++;
              v48 = v49;
              v50 = v68++;
              v13 = -v50 < 0;
              v51 = -v50 & 0x1F;
              v52 = v50 & 0x1F;
              if (!v13)
                v52 = -v51;
              if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v69;
              else
                v53 = (std::string *)v69.__r_.__value_.__r.__words[0];
              v53->__r_.__value_.__s.__data_[v52] ^= v48;
              --v47;
            }
            while (v47);
            v46 = v60;
          }
          if ((v46 & 0x80) != 0)
            operator delete(v58);
          if ((char)v63 < 0)
            operator delete(__dst);
          __p[0].__r_.__value_.__r.__words[0] = v37;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v37 - 24)) = v38;
          __p[0].__r_.__value_.__l.__size_ = v39;
          if (v66 < 0)
            operator delete(v65);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1DF0ECF6C](v67);
        }
        v54 = (fst::SymbolTableImpl *)*((_QWORD *)v36 + 1);
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = *(fst::SymbolTableImpl **)v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (fst::SymbolTableImpl *)*((_QWORD *)v36 + 2);
            v56 = *(_QWORD *)v55 == (_QWORD)v36;
            v36 = v55;
          }
          while (!v56);
        }
        v36 = v55;
      }
      while (v55 != (fst::SymbolTableImpl *)((char *)this + 152));
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    else
      __p[0] = v69;
    v57 = (void **)((char *)this + 200);
    if (*((char *)this + 223) < 0)
      operator delete(*v57);
    *(_OWORD *)v57 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((_QWORD *)this + 27) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
    *((_BYTE *)this + 172) = 1;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_1DE4FC64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 121) < 0)
    operator delete(*(void **)(v18 - 144));
  if (*(char *)(v18 - 89) < 0)
    operator delete(*(void **)(v18 - 112));
  _Unwind_Resume(exception_object);
}

void sub_1DE4FC794(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  const char *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = (char **)((char *)this + 8);
  if ((float)((float)(unint64_t)((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3) * 0.75) <= (float)(unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3))
    fst::internal::DenseSymbolMap::Rehash(this);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, a2);
  v6 = *((_QWORD *)this + 8);
  v7 = *((_QWORD *)this + 5);
  v8 = v5 & v6;
  v9 = *(_QWORD *)(v7 + 8 * (v5 & v6));
  v11 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 1);
  if (v9 == *(_QWORD *)this)
  {
LABEL_9:
    v9 = (*((_QWORD *)this + 2) - v10) >> 3;
    *(_QWORD *)(v7 + 8 * v8) = v9;
    v13 = *(unsigned __int8 *)(a2 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a2 + 8);
    v14 = v13 + 1;
    v15 = (void *)operator new[]();
    v16 = v15;
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const char *)a2;
    else
      v17 = *(const char **)a2;
    memcpy(v15, v17, v14);
    v18 = (_QWORD *)*((_QWORD *)this + 2);
    v19 = *((_QWORD *)this + 3);
    if ((unint64_t)v18 >= v19)
    {
      v21 = ((char *)v18 - *v4) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
      v22 = v19 - (_QWORD)*v4;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v24);
      else
        v25 = 0;
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *(_QWORD *)v26 = v16;
      v20 = v26 + 8;
      v29 = (char *)*((_QWORD *)this + 1);
      v28 = (char *)*((_QWORD *)this + 2);
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v26 - 1) = v30;
          v26 -= 8;
        }
        while (v28 != v29);
        v28 = *v4;
      }
      *((_QWORD *)this + 1) = v26;
      *((_QWORD *)this + 2) = v20;
      *((_QWORD *)this + 3) = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v18 = v16;
      v20 = v18 + 1;
    }
    *((_QWORD *)this + 2) = v20;
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const char *)a2;
    else
      v12 = *(const char **)a2;
    while (strcmp(*(const char **)(v10 + 8 * v9), v12))
    {
      v8 = (v8 + 1) & v6;
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9 == v11)
        goto LABEL_9;
    }
  }
  return v9;
}

unint64_t fst::SymbolTableImpl::GetNthKey(fst::SymbolTableImpl *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  void *__p[2];
  char v13;

  if ((a2 & 0x8000000000000000) != 0)
    return -1;
  v2 = a2;
  v4 = *((_QWORD *)this + 6);
  if (a2 >= (*((_QWORD *)this + 7) - v4) >> 3)
    return -1;
  if (*((_QWORD *)this + 4) <= (int64_t)a2)
  {
    v5 = *(char **)(v4 + 8 * a2);
    v6 = strlen(v5);
    std::string::basic_string[abi:ne180100](__p, v5, v6);
    v7 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
    v2 = v7;
    if (v7 != -1)
    {
      v8 = *((_QWORD *)this + 4);
      v9 = __OFSUB__(v7, v8);
      v10 = v7 - v8;
      if (v10 < 0 == v9)
        v2 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v10);
    }
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v2;
}

uint64_t fst::SymbolTableImpl::Read(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  uint64_t v4;
  fst *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  fst *v9;
  _QWORD *v10;
  void *v11;
  std::string::value_type __c[8];
  char v14;
  uint64_t v15;
  std::string v16;
  unint64_t v17;
  __int128 __p;
  uint64_t v19;
  int v20;
  char v21;

  v20 = 0;
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: read failed", 30);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
    return 0;
  }
  else
  {
    __p = 0uLL;
    v19 = 0;
    LODWORD(v16.__r_.__value_.__l.__data_) = 0;
    std::istream::read();
    v4 = operator new();
    fst::SymbolTableImpl::SymbolTableImpl((std::string *)v4, &__p);
    std::istream::read();
    v17 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "ERROR");
      v5 = fst::LogMessage::LogMessage((fst *)__c, (uint64_t)&v16);
      v6 = (_QWORD *)fst::cerr(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SymbolTable::Read: read failed", 30);
      fst::LogMessage::~LogMessage((fst::LogMessage *)__c);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (*(char *)(v4 + 223) < 0)
        operator delete(*(void **)(v4 + 200));
      if (*(char *)(v4 + 199) < 0)
        operator delete(*(void **)(v4 + 176));
      std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v4 + 144, *(_QWORD **)(v4 + 152));
      v7 = *(void **)(v4 + 120);
      if (v7)
      {
        *(_QWORD *)(v4 + 128) = v7;
        operator delete(v7);
      }
      fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v4 + 40));
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      MEMORY[0x1DF0ED014](v4, 0x10B2C404FCE5648);
      v4 = 0;
    }
    else
    {
      memset(&v16, 0, sizeof(v16));
      v15 = 0;
      *(_BYTE *)(v4 + 172) = 0;
      if (v17)
      {
        v8 = 0;
        while (1)
        {
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          {
            *v16.__r_.__value_.__l.__data_ = 0;
            v16.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v16.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
          }
          *(_DWORD *)__c = 0;
          std::istream::read();
          std::istream::read();
          if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
            break;
          fst::SymbolTableImpl::AddSymbol(v4, (uint64_t)&v16, v15);
          if (++v8 >= v17)
            goto LABEL_36;
        }
        std::string::basic_string[abi:ne180100]<0>(__c, "ERROR");
        v9 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__c);
        v10 = (_QWORD *)fst::cerr(v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"SymbolTable::Read: read failed", 30);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
        if (v14 < 0)
          operator delete(*(void **)__c);
        if (*(char *)(v4 + 223) < 0)
          operator delete(*(void **)(v4 + 200));
        if (*(char *)(v4 + 199) < 0)
          operator delete(*(void **)(v4 + 176));
        std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v4 + 144, *(_QWORD **)(v4 + 152));
        v11 = *(void **)(v4 + 120);
        if (v11)
        {
          *(_QWORD *)(v4 + 128) = v11;
          operator delete(v11);
        }
        fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v4 + 40));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x1DF0ED014](v4, 0x10B2C404FCE5648);
        v4 = 0;
      }
LABEL_36:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
  }
  return v4;
}

void sub_1DE4FCE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL fst::SymbolTableImpl::Write(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  void *v8;
  char *v9;
  size_t v10;
  int v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;

  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  __p = *(void **)(a1 + 24);
  std::ostream::write();
  __p = (void *)((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
  std::ostream::write();
  v5 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = (void *)v6;
      if ((uint64_t)v6 >= v7)
        v8 = *(void **)(*(_QWORD *)(a1 + 120) - 8 * v7 + 8 * v6);
      v9 = *(char **)(v5 + 8 * v6);
      v10 = strlen(v9);
      std::string::basic_string[abi:ne180100](&__p, v9, v10);
      v11 = v18;
      if ((v18 & 0x80u) != 0)
        v11 = v17;
      v19 = v11;
      std::ostream::write();
      std::ostream::write();
      if ((char)v18 < 0)
        operator delete(__p);
      __p = v8;
      std::ostream::write();
      ++v6;
      v5 = *(_QWORD *)(a1 + 48);
    }
    while (v6 < (*(_QWORD *)(a1 + 56) - v5) >> 3);
  }
  std::ostream::flush();
  v12 = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::Write: write failed", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  return v12 == 0;
}

void sub_1DE4FD118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::AddTable(std::string *this, const fst::SymbolTable *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t size;
  void *__p[2];
  char v10;

  fst::SymbolTable::MutateCheck(this);
  v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v5 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v4)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      size = this->__r_.__value_.__l.__size_;
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
      fst::SymbolTableImpl::AddSymbol(size, (uint64_t)__p, *(_QWORD *)(size + 24));
      if (v10 < 0)
        operator delete(__p[0]);
      if (++v7 < v4)
        v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 128))(a2, v7);
    }
    while (v4 != v7);
  }
}

void sub_1DE4FD220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *fst::SymbolTable::MutateCheck(std::string *this)
{
  std::string::size_type size;
  int v2;
  uint64_t v3;
  std::string *v4;

  size = this->__r_.__value_.__l.__size_;
  v2 = *(_DWORD *)(size + 168);
  if (v2 >= 2)
  {
    v3 = (uint64_t)this;
    *(_DWORD *)(size + 168) = v2 - 1;
    v4 = (std::string *)operator new();
    this = fst::SymbolTableImpl::SymbolTableImpl(v4, *(const fst::SymbolTableImpl **)(v3 + 8));
    *(_QWORD *)(v3 + 8) = v4;
  }
  return this;
}

void sub_1DE4FD298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v13;
  fst *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  fst *v21;
  _QWORD *v22;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  void *__p[2];
  unsigned __int8 v30;
  void *v31[2];
  char v32;
  void *v33;
  char v34;
  uint64_t v35;

  v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a3 + 16);
  v24 = v3;
  if (v3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
    if (v6)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      v11 = (void *)*MEMORY[0x1E0DE4F60];
      v26 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v25 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
        v13 = v8 >= 0 || *(_BYTE *)a3 != 0;
        if (((v13 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          v14 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)__p);
          v15 = (_QWORD *)fst::cerr(v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Negative symbol table entry when not allowed", 44);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
          if ((char)v30 < 0)
            operator delete(__p[0]);
          v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(__p, a1, v8);
        if ((v30 & 0x80u) == 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        if ((v30 & 0x80u) == 0)
          v17 = v30;
        else
          v17 = (uint64_t)__p[1];
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v16, v17);
        v19 = (_BYTE *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          v19 = *(_BYTE **)(a3 + 8);
        LOBYTE(v27) = *v19;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v27, 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(v27) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1);
        if ((char)v30 < 0)
          operator delete(__p[0]);
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v28 < 0)
          operator delete(v27);
        if ((char)v30 < 0)
          operator delete(__p[0]);
        v31[0] = v11;
        *(void **)((char *)v31 + *((_QWORD *)v11 - 3)) = v26;
        v31[1] = v25;
        if (v34 < 0)
          operator delete(v33);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1DF0ECF6C](&v35);
        if (++v10 < v6)
          v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v31);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Missing required field separator", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (v32 < 0)
      operator delete(v31[0]);
  }
  return v24 != 0;
}

void sub_1DE4FD5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<long long>::vector((_QWORD *)this + 5, 0x10uLL);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  for (*((_QWORD *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    *v3 = *(_QWORD *)this;
  return this;
}

void sub_1DE4FD6CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  unint64_t v4;
  size_t v5;
  void *v6;

  *(_QWORD *)this = -1;
  std::vector<char const*>::vector((_QWORD *)this + 1, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 1))
  {
    v4 = 0;
    do
    {
      v5 = strlen(*(const char **)(*((_QWORD *)a2 + 1) + 8 * v4)) + 1;
      v6 = (void *)operator new[]();
      memcpy(v6, *(const void **)(*((_QWORD *)a2 + 1) + 8 * v4), v5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4++) = v6;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  }
  return this;
}

void sub_1DE4FD7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  void *v6;

  v4 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x1DF0ECFFC](v2[v5], 0x1000C8077774924);
        v2 = (_QWORD *)*((_QWORD *)this + 1);
        v3 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v2 = (char *)this + 40;
  std::vector<long long>::resize((uint64_t)this + 40, (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  v4 = *(_QWORD **)v2;
  v3 = (_QWORD *)*((_QWORD *)v2 + 1);
  for (*((_QWORD *)v2 + 3) = (((uint64_t)v3 - *(_QWORD *)v2) >> 3) - 1; v4 != v3; ++v4)
    *v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v5)
  {
    v6 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(v5 + 8 * v6));
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)__p);
      v8 = *((_QWORD *)this + 8);
      if (v12 < 0)
        operator delete(__p[0]);
      v9 = v8 & v7;
      v10 = *((_QWORD *)this + 5);
      if (*(_QWORD *)(v10 + 8 * (v8 & v7)) != *(_QWORD *)this)
      {
        do
          v9 = *((_QWORD *)this + 8) & (v9 + 1);
        while (*(_QWORD *)(v10 + 8 * v9) != *(_QWORD *)this);
      }
      *(_QWORD *)(v10 + 8 * v9) = v6++;
      v5 = *((_QWORD *)this + 1);
    }
    while (v6 < (*((_QWORD *)this + 2) - v5) >> 3);
  }
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  v5 = a1[8];
  v6 = a1[5];
  v7 = *a1;
  v8 = v4 & v5;
  v9 = *(_QWORD *)(v6 + 8 * (v4 & v5));
  if (v9 == *a1)
    return v7;
  v10 = a1[1];
  if (*(char *)(v2 + 23) < 0)
    v2 = *(_QWORD *)v2;
  while (strcmp(*(const char **)(v10 + 8 * v9), (const char *)v2))
  {
    v8 = (v8 + 1) & v5;
    v9 = *(_QWORD *)(v6 + 8 * v8);
    if (v9 == v7)
      return v7;
  }
  return v9;
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x1DF0ED014);
}

{
  uint64_t v1;
  int v2;
  void *v3;

  *(_QWORD *)this = &off_1EA924678;
  v1 = *((_QWORD *)this + 1);
  v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    if (*(char *)(v1 + 223) < 0)
      operator delete(*(void **)(v1 + 200));
    if (*(char *)(v1 + 199) < 0)
      operator delete(*(void **)(v1 + 176));
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v1 + 144, *(_QWORD **)(v1 + 152));
    v3 = *(void **)(v1 + 120);
    if (v3)
    {
      *(_QWORD *)(v1 + 128) = v3;
      operator delete(v3);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x1DF0ED014](v1, 0x10B2C404FCE5648);
  }
}

_QWORD *fst::SymbolTable::Copy(fst::SymbolTable *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *((_QWORD *)this + 1);
  *result = &off_1EA924678;
  result[1] = v3;
  ++*(_DWORD *)(v3 + 168);
  return result;
}

uint64_t fst::SymbolTable::AddSymbol(std::string *a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck(a1);
  return fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(std::string *a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck(a1);
  return fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, *(_QWORD *)(a1->__r_.__value_.__l.__size_ + 24));
}

void fst::SymbolTable::CheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::CheckSum(this[1], a2);
}

void fst::SymbolTable::LabeledCheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::LabeledCheckSum(this[1], a2);
}

BOOL fst::SymbolTable::Write(uint64_t a1, _QWORD *a2)
{
  return fst::SymbolTableImpl::Write(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *fst::SymbolTable::Find@<X0>(fst::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    v4 = v2[4];
    v5 = __OFSUB__(result, v4);
    v6 = result - v4;
    if (v6 < 0 == v5)
      return *(_QWORD *)(v2[15] + 8 * v6);
  }
  return result;
}

uint64_t fst::SymbolTable::Find(fst::SymbolTableImpl **this, char *a2)
{
  return fst::SymbolTableImpl::Find(this[1], a2);
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

uint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 3;
}

unint64_t fst::SymbolTable::GetNthKey(fst::SymbolTableImpl **this, unint64_t a2)
{
  return fst::SymbolTableImpl::GetNthKey(this[1], a2);
}

_QWORD *fst::SymbolTable::GetNthSymbol@<X0>(fst::SymbolTableImpl **this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::SymbolTableImpl::GetNthSymbol(this[1], a2, a3);
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_1DE4FDC78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::SymbolTableImpl *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::SymbolTableImpl *)((char *)a2 + 40));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[6], (uint64_t)a2 + 144);
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1DE4FDDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  fst::internal::DenseSymbolMap *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1DE4FDE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::SymbolTableImpl::CheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
}

void fst::SymbolTableImpl::LabeledCheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

_QWORD *fst::SymbolTableImpl::Find@<X0>(fst::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  int64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  size_t v11;

  if (a2 < 0 || *((_QWORD *)this + 4) <= a2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 19);
    if (!v4)
      return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
    v5 = (_QWORD *)((char *)this + 152);
    do
    {
      v6 = v4[4];
      v7 = v6 < a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (!v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == (_QWORD *)((char *)this + 152))
      return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
    if (v5[4] > a2)
      return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
    a2 = v5[5];
    if (a2 < 0)
      return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
  }
  v9 = *((_QWORD *)this + 6);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 7) - v9) >> 3))
    return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
  v10 = *(char **)(v9 + 8 * a2);
  v11 = strlen(v10);
  return std::string::basic_string[abi:ne180100](a3, v10, v11);
}

uint64_t fst::SymbolTableImpl::Find(fst::SymbolTableImpl *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = __OFSUB__(v3, v5);
    v7 = v3 - v5;
    if (v7 < 0 == v6)
      v4 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v7);
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

_QWORD *fst::SymbolTableImpl::GetNthSymbol@<X0>(fst::SymbolTableImpl *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v6;
  size_t v7;

  if ((a2 & 0x8000000000000000) != 0)
    return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
  v4 = *((_QWORD *)this + 6);
  if (a2 >= (*((_QWORD *)this + 7) - v4) >> 3 || *((_QWORD *)this + 4) > (int64_t)a2)
    return std::string::basic_string[abi:ne180100]<0>(a3, &byte_1DEBD87CE);
  v6 = *(char **)(v4 + 8 * a2);
  v7 = strlen(v6);
  return std::string::basic_string[abi:ne180100](a3, v6, v7);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE4FE470(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1DE4FE5E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<char const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE4FE654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void fst::SplitToVector(char *__s1, char *__s2, void **a3, int a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char **v19;
  char *v20;
  char *v21;
  char *v22;

  if (__s1)
  {
    v7 = __s1;
    v8 = (uint64_t)(a3 + 2);
    do
    {
      v9 = strpbrk(v7, __s2);
      v10 = v9;
      if (v9)
        *v9 = 0;
      if (!a4 || *v7)
      {
        v12 = (char **)a3[1];
        v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = ((char *)v12 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
          v15 = v11 - (_QWORD)*a3;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v17);
          else
            v18 = 0;
          v19 = (char **)&v18[8 * v14];
          *v19 = v7;
          v13 = v19 + 1;
          v21 = (char *)*a3;
          v20 = (char *)a3[1];
          if (v20 != *a3)
          {
            do
            {
              v22 = (char *)*((_QWORD *)v20 - 1);
              v20 -= 8;
              *--v19 = v22;
            }
            while (v20 != v21);
            v20 = (char *)*a3;
          }
          *a3 = v19;
          a3[1] = v13;
          a3[2] = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v12 = v7;
          v13 = v12 + 1;
        }
        a3[1] = v13;
      }
      v7 = v10 + 1;
    }
    while (v10);
  }
}

unint64_t fst::ConvertToLegalCSymbol(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 23);
  v3 = (_BYTE *)result;
  if (*(char *)(result + 23) < 0)
    v3 = *(_BYTE **)result;
  v4 = MEMORY[0x1E0C80978];
  while (1)
  {
    v5 = v1;
    if ((v2 & 0x80) != 0)
    {
      v5 = *(_QWORD *)v1;
      v2 = *(_QWORD *)(v1 + 8);
    }
    if (v3 == (_BYTE *)(v5 + v2))
      return result;
    v6 = (char)*v3;
    if ((v6 & 0x80000000) == 0)
    {
      result = *(_DWORD *)(v4 + 4 * v6 + 60) & 0x500;
      if ((_DWORD)result)
        goto LABEL_10;
LABEL_9:
      *v3 = 95;
      goto LABEL_10;
    }
    result = __maskrune(v6, 0x500uLL);
    if (!(_DWORD)result)
      goto LABEL_9;
LABEL_10:
    ++v3;
    v2 = *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t fst::AlignInput()
{
  int v0;
  _BYTE v2[2];
  void *__p[2];
  char v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2[1] = 0;
  v0 = 16;
  while (1)
  {
    std::istream::tellg();
    if (v5 < 0)
      break;
    if (v5 % 16)
    {
      std::istream::read();
      if (--v0)
        continue;
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)v2, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"AlignInput: can't determine stream position", 43);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DE4FEA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::AlignOutput(_QWORD *a1)
{
  int v2;
  char *v3;
  char v5;
  void *__p[2];
  char v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = 16;
  while (1)
  {
    v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v3[32] & 5) != 0)
      break;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v3 + 5) + 32))(__p, *((_QWORD *)v3 + 5), 0, 1, 16);
    if (v8 < 0)
      break;
    if (v8 % 16)
    {
      std::ostream::write();
      if (--v2)
        continue;
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"AlignOutput: can't determine stream position", 44);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DE4FEBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::FstHeader::Read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string::value_type __c;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    std::istream::tellg();
    v6 = v24;
  }
  else
  {
    v6 = 0;
  }
  std::istream::read();
  std::string::basic_string[abi:ne180100]<0>(v22, "ERROR");
  fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)v22);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"FstHeader::Read: Bad FST header: ", 33);
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = a3;
  else
    v9 = *(_QWORD *)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
  if ((v23 & 0x80000000) == 0)
  {
    if (!a4)
      return 0;
    goto LABEL_14;
  }
  operator delete(v22[0]);
  if (a4)
  {
LABEL_14:
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v21 = v6;
    std::istream::seekg();
  }
  return 0;
}

void sub_1DE4FEF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 185) < 0)
    operator delete(*(void **)(v13 - 208));
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstHeader::Write()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return 1;
}

std::string *fst::FstReadOptions::FstReadOptions(std::string *this, __int128 *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5)
{
  __int128 v9;
  void *__p[2];
  char v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__r.__words[2] = a5;
  WORD2(this[2].__r_.__value_.__r.__words[0]) = 257;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)FLAGS_fst_read_mode);
  LODWORD(this[2].__r_.__value_.__l.__data_) = fst::FstReadOptions::ReadMode((uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1DE4FF19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstReadOptions::ReadMode(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  char v15;

  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)a1 == 1684104562)
        return 0;
      goto LABEL_15;
    }
    v3 = *(_DWORD **)a1;
  }
  else
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    v3 = (_DWORD *)a1;
    if (v2 != 3)
    {
      if (v2 == 4 && *(_DWORD *)a1 == 1684104562)
        return 0;
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unknown file read mode ", 23);
      v9 = *(char *)(a1 + 23);
      if (v9 >= 0)
        v10 = (_DWORD *)a1;
      else
        v10 = *(_DWORD **)a1;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  v5 = *(unsigned __int16 *)v3;
  v6 = *((unsigned __int8 *)v3 + 2);
  if (v5 != 24941 || v6 != 112)
    goto LABEL_15;
  return 1;
}

void sub_1DE4FF2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::cout(fst *this)
{
  return MEMORY[0x1E0DE4A60];
}

uint64_t fst::cerr(fst *this)
{
  return MEMORY[0x1E0DE4A50];
}

uint64_t fst::cin(fst *this)
{
  return MEMORY[0x1E0DE4948];
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
  __assert_rtn("DfsVisit", "dfs-visit.h", 107, "fst.HasSequentialStates() && \"DfsVisit assumes sequential states\"");
}

kaldi::LinearResample *kaldi::LinearResample::LinearResample(kaldi::LinearResample *this, uint64_t a2, int a3, float a4, int a5, const char *a6)
{
  void **v7;
  float v8;
  BOOL v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 11) = 0;
  v7 = (void **)((char *)this + 88);
  *((_DWORD *)this + 3) = a5;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((int)a2 < 1
    || a3 < 1
    || a4 <= 0.0
    || ((v8 = a4 + a4, v8 < (float)(int)a2) ? (v9 = v8 < (float)a3) : (v9 = 0), v9 ? (v10 = a5 <= 0) : (v10 = 1), v10))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearResample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0x2E, "samp_rate_in_hz > 0.0 && samp_rate_out_hz > 0.0 && filter_cutoff_hz > 0.0 && filter_cutoff_hz*2 < samp_rate_in_hz && filter_cutoff_hz*2 < samp_rate_out_hz && num_zeros > 0", a6);
  }
  v11 = kaldi::Gcd<int>(a2, a3);
  v12 = *((_DWORD *)this + 1) / v11;
  *((_DWORD *)this + 4) = *(_DWORD *)this / v11;
  *((_DWORD *)this + 5) = v12;
  kaldi::LinearResample::SetIndexesAndWeights(this);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  kaldi::Vector<float>::Resize(v7, 0, 0, v13, v14);
  return this;
}

void sub_1DE4FF45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v14;

  kaldi::Vector<float>::Destroy(v11);
  a10 = (void **)(v10 + 48);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 32) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::Gcd<int>(uint64_t result, int a2)
{
  _QWORD v2[34];

  if ((_DWORD)result && a2)
  {
    while (1)
    {
      LODWORD(result) = (int)result % a2;
      if (!(_DWORD)result)
        break;
      a2 %= (int)result;
      if (!a2)
        goto LABEL_11;
    }
    LODWORD(result) = a2;
  }
  else
  {
    if (!(a2 | result))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Gcd", "../engine/common/libquasar/libkaldi/src/base/kaldi-math.h", 322);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Undefined GCD since m = 0, n = 0.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
    }
    if (!(_DWORD)result)
      LODWORD(result) = a2;
  }
LABEL_11:
  if ((int)result >= 0)
    return result;
  else
    return -(int)result;
}

void kaldi::LinearResample::SetIndexesAndWeights(kaldi::LinearResample *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;

  std::vector<int>::resize((std::vector<int> *)this + 1, *((int *)this + 5));
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)this + 6, *((int *)this + 5));
  if (*((int *)this + 5) >= 1)
  {
    v4 = 0;
    v5 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    do
    {
      v6 = (double)(int)v4 / (double)*((int *)this + 1);
      v7 = vcvtpd_s64_f64((v6 - v5) * (double)*(int *)this);
      v8 = vcvtmd_s64_f64((v5 + v6) * (double)*(int *)this) - v7;
      v9 = v8 + 1;
      *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v4) = v7;
      kaldi::Vector<float>::Resize((void **)(*((_QWORD *)this + 6) + 24 * v4), v9, 0, v2, v3);
      if ((v8 & 0x80000000) == 0)
      {
        v10 = 0;
        v11 = *((_QWORD *)this + 6) + 24 * v4;
        v12 = *(unsigned int *)(v11 + 8);
        do
        {
          if (v12 == v10)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v3);
          v13 = *(_DWORD *)this;
          v14 = (double)(int)(v7 + v10) / (double)*(int *)this - v6;
          *(float *)(*(_QWORD *)v11 + 4 * v10++) = kaldi::LinearResample::FilterFunc(this, v14) / (float)v13;
        }
        while (v9 != v10);
      }
      ++v4;
    }
    while (v4 < *((int *)this + 5));
  }
}

void kaldi::LinearResample::Reset(kaldi::LinearResample *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  kaldi::Vector<float>::Resize((void **)this + 11, 0, 0, a4, a5);
}

uint64_t kaldi::LinearResample::GetNumOutputSamples(kaldi::LinearResample *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v5;
  int v8;
  uint64_t v9;
  float v10;

  v5 = a3;
  v8 = kaldi::Lcm<int>(*(unsigned int *)this, *((_DWORD *)this + 1), a3, a4, a5);
  v9 = v8 / *(_DWORD *)this * a2;
  if ((v5 & 1) == 0)
  {
    v10 = (double)*((int *)this + 3) / (*((float *)this + 2) + *((float *)this + 2));
    v9 -= (int)vcvtms_s32_f32((float)v8 * v10);
  }
  if (v9 < 1)
    return 0;
  else
    return v9 / (v8 / *((_DWORD *)this + 1))
         - (v9 / (v8 / *((_DWORD *)this + 1)) * (v8 / *((_DWORD *)this + 1)) == v9)
         + 1;
}

uint64_t kaldi::Lcm<int>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6;
  int v7;

  if ((int)a1 < 1 || a2 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"Lcm", "../engine/common/libquasar/libkaldi/src/base/kaldi-math.h", (const char *)0x155, "m > 0 && n > 0", a5);
  v6 = a1;
  v7 = kaldi::Gcd<int>(a1, a2);
  return (v6 / v7 * v7 * (a2 / v7));
}

float kaldi::LinearResample::FilterFunc(kaldi::LinearResample *this, float a2)
{
  double v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;

  v3 = fabsf(a2);
  v4 = (double)*((int *)this + 3);
  v5 = *((float *)this + 2);
  v6 = v5;
  v7 = 0.0;
  if (v4 / (v6 + v6) > v3)
    v7 = (cos(v6 * 6.28318531 / v4 * a2) + 1.0) * 0.5;
  if (a2 == 0.0)
    v8 = v5 + v5;
  else
    v8 = sin(v6 * 6.28318531 * a2) / (a2 * 3.14159265);
  return v7 * v8;
}

void kaldi::LinearResample::Resample(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t NumOutputSamples;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  float *v28;
  float v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a3;
  v9 = *(int *)(a2 + 8);
  v10 = (_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 72) + v9;
  NumOutputSamples = kaldi::LinearResample::GetNumOutputSamples((kaldi::LinearResample *)a1, v11, a3, a4, a5);
  v15 = *(_QWORD *)(a1 + 80);
  if (NumOutputSamples < v15)
    kaldi::KaldiAssertFailure_((kaldi *)"Resample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0x9F, "tot_output_samp >= output_sample_offset_", v14);
  v16 = NumOutputSamples;
  kaldi::Vector<float>::Resize((void **)a4, (NumOutputSamples - v15), 0, v13, v14);
  v20 = *(_QWORD *)(a1 + 80);
  if (v20 < v16)
  {
    for (i = *(_QWORD *)(a1 + 80); i != v16; ++i)
    {
      v22 = *(int *)(a1 + 20);
      v23 = i / v22;
      LODWORD(v22) = i % v22;
      v24 = *(_QWORD *)(a1 + 48) + 24 * (int)v22;
      v25 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * (int)v22)
          + v23 * *(unsigned int *)(a1 + 16)
          - *(_QWORD *)(a1 + 72);
      v26 = *(unsigned int *)(v24 + 8);
      if ((v25 & 0x80000000) != 0 || (int)v26 + (int)v25 > (int)v9)
      {
        if ((int)v26 >= 1)
        {
          v27 = 0;
          v28 = *(float **)v24;
          v29 = 0.0;
          v30 = v25;
          while (v30 < 0)
          {
            v33 = *(_DWORD *)(a1 + 96);
            if ((int)(v30 + v33) >= 0)
            {
              if (v33 <= v30 + v33)
                goto LABEL_30;
              v31 = v33 + v27 + v25;
              v32 = *(_QWORD *)(a1 + 88);
LABEL_15:
              v29 = v29 + (float)(*v28 * *(float *)(v32 + 4 * v31));
              goto LABEL_19;
            }
            if (v30 >= (int)v9)
            {
LABEL_18:
              if ((v6 & 1) == 0)
                kaldi::KaldiAssertFailure_((kaldi *)"Resample", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/feat/resample.cc", (const char *)0xC3, "flush", v19);
            }
LABEL_19:
            ++v27;
            ++v30;
            ++v28;
            if (!--v26)
              goto LABEL_24;
          }
          if (v30 >= (int)v9)
            goto LABEL_18;
          v31 = v30;
          v32 = *(_QWORD *)a2;
          if (*(_DWORD *)(a2 + 8) <= v30)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x61, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v19);
          goto LABEL_15;
        }
        v29 = 0.0;
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        if ((v26 + v25) > *(_DWORD *)(a2 + 8))
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
        v34 = *(_QWORD *)a2 + 4 * v25;
        LODWORD(v35) = v26;
        v29 = kaldi::VecVec<float>((uint64_t)&v34, v24, v17, v18, v19);
        v20 = *(_QWORD *)(a1 + 80);
      }
LABEL_24:
      if (*(_DWORD *)(a4 + 8) <= (i - v20))
LABEL_30:
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v19);
      *(float *)(*(_QWORD *)a4 + 4 * ((int)i - (int)v20)) = v29;
    }
  }
  if ((v6 & 1) != 0)
  {
    *v10 = 0;
    v10[1] = 0;
    kaldi::Vector<float>::Resize((void **)(a1 + 88), 0, 0, v18, v19);
  }
  else
  {
    kaldi::LinearResample::SetRemainder(a1, a2, v17, v18, v19);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v16;
  }
}

void kaldi::LinearResample::SetRemainder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v7 = (void **)(a1 + 88);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  kaldi::Vector<float>::Resize((void **)&v28, *(unsigned int *)(a1 + 96), 1, a4, a5);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v28, (uint64_t)v7, v8, v9, v10);
  LODWORD(v11) = vcvtps_s32_f32((float)(*(_DWORD *)(a1 + 12) * *(_DWORD *)a1) / *(float *)(a1 + 8));
  kaldi::Vector<float>::Resize(v7, v11, 0, v12, v13);
  v15 = *(int *)(a1 + 96);
  if ((int)v15 >= 1)
  {
    v16 = -v15;
    v17 = *(int *)(a2 + 8);
    v18 = (int)v29;
    v19 = v28;
    v20 = *(_DWORD **)a2;
    v21 = 4 * *(unsigned int *)(a1 + 96) - 4 * *(int *)(a1 + 96);
    v22 = v17 - v15;
    v23 = 1 - v15;
    while (v22 < 0)
    {
      if (v18 + v22 >= 0)
      {
        if (v18 <= (int)v18 + (int)v22)
        {
          v27 = 104;
LABEL_13:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)v27, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v14);
        }
        v24 = v16 + v17 + v18;
        v25 = v19;
        goto LABEL_9;
      }
LABEL_10:
      LODWORD(v16) = v16 + 1;
      v21 += 4;
      ++v22;
      if (!(_DWORD)v23++)
        goto LABEL_11;
    }
    v24 = v22;
    v25 = v20;
    if (v17 <= v22)
    {
      v27 = 97;
      goto LABEL_13;
    }
LABEL_9:
    *(_DWORD *)((char *)*v7 + v21) = v25[v24];
    goto LABEL_10;
  }
LABEL_11:
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
}

void sub_1DE4FFC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESTensorData::~ESTensorData(kaldi::quasar::ESTensorData *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA92DBD8;
  v2 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    free(v2);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  kaldi::quasar::ESTensorData::~ESTensorData(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::quasar::ESNetworkConfig::ESNetworkConfig(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1EA92DD40;
  v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_1DE4FFD94(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf *v1;

  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, const char *a5)
{
  uint64_t *v5;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  void **v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void **v22;
  void *v23;
  size_t v24;
  void *v25;
  int v26;
  void *v28;
  uint64_t v29;
  void *v31;
  void *v32;
  int v33;
  BOOL v35;
  std::string *p_str;
  uint64_t *v37;
  void *v38;
  void *v39;
  BOOL v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t **v45;
  __int128 *v46[34];
  void *v47;
  size_t v48;
  uint64_t v49;
  const void *v50[2];
  uint64_t v51;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  v5 = a2 + 4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    v9 = (std::string *)(a1 + 112);
    v10 = (std::string *)(a1 + 88);
    v45 = (uint64_t **)(a1 + 64);
    while (1)
    {
      v47 = 0;
      v48 = 0;
      v49 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v47, a4, a5);
      v11 = *(unsigned __int8 *)(a4 + 23);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a4 + 8);
      v13 = HIBYTE(v49);
      if (!v11 || (v49 >= 0 ? (v14 = HIBYTE(v49)) : (v14 = v48), v14 != v11))
      {
LABEL_21:
        if ((v49 & 0x8000000000000000) == 0)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = &v47;
          switch(HIBYTE(v49))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x10:
              goto LABEL_57;
            case 0x11:
              goto LABEL_42;
            default:
              goto LABEL_72;
          }
        }
        goto LABEL_24;
      }
      v15 = v12 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v49 < 0)
        break;
      if (!HIBYTE(v49))
        goto LABEL_66;
      v16 = &v47;
      v17 = HIBYTE(v49);
      do
      {
        if (*(unsigned __int8 *)v16 != *v15)
          goto LABEL_21;
        v16 = (void **)((char *)v16 + 1);
        ++v15;
        --v17;
      }
      while (v17);
      v18 = 0;
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_64:
        if (!v18)
          goto LABEL_66;
        goto LABEL_65;
      }
LABEL_19:
      operator delete(v47);
      if ((v18 & 1) == 0)
        goto LABEL_66;
LABEL_65:
      if ((*((_BYTE *)v5 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_66;
    }
    v23 = v47;
    if (!memcmp(v47, v15, v48))
    {
      operator delete(v23);
      goto LABEL_66;
    }
LABEL_24:
    v24 = v48;
    if (v48 == 10)
    {
      v19 = 1;
      v22 = (void **)v47;
LABEL_26:
      v25 = *v22;
      v26 = *((unsigned __int16 *)v22 + 4);
      if (v25 == (void *)0x6F6974636E75463CLL && v26 == 15982)
      {
        p_str = &__str;
        goto LABEL_62;
      }
      if (!v19)
        goto LABEL_72;
      v24 = v48;
    }
    if (v24 == 14)
    {
      v20 = 1;
      v22 = (void **)v47;
LABEL_34:
      v28 = *v22;
      v29 = *(uint64_t *)((char *)v22 + 6);
      if (v28 == (void *)0x5474757074754F3CLL && v29 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v50, a4, a5);
        v46[0] = (__int128 *)v50;
        v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, v50, (uint64_t)&std::piecewise_construct, v46);
        std::string::operator=((std::string *)(v37 + 7), &__str);
        goto LABEL_63;
      }
      if (!v20)
        goto LABEL_72;
      v24 = v48;
    }
    if (v24 != 17)
      goto LABEL_51;
    v21 = 1;
    v22 = (void **)v47;
LABEL_42:
    v31 = *v22;
    v32 = v22[1];
    v33 = *((unsigned __int8 *)v22 + 16);
    v35 = v31 == (void *)0x657475706D6F433CLL && v32 == (void *)0x6D726F6674616C50 && v33 == 62;
    p_str = v10;
    if (!v35)
    {
      if (!v21)
      {
        if (v13 != 16)
          goto LABEL_72;
        v22 = &v47;
        goto LABEL_57;
      }
      v24 = v48;
LABEL_51:
      if (v24 != 16)
        goto LABEL_72;
      v22 = (void **)v47;
LABEL_57:
      v39 = *v22;
      v38 = v22[1];
      v40 = v39 == (void *)0x6F706B636568433CLL && v38 == (void *)0x3E656D614E746E69;
      p_str = v9;
      if (!v40)
      {
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 265);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Unknown token ", 14);
        if (v49 >= 0)
          v42 = &v47;
        else
          v42 = (void **)v47;
        if (v49 >= 0)
          v43 = HIBYTE(v49);
        else
          v43 = v48;
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
      }
    }
LABEL_62:
    kaldi::ReadToken(a2, a3, (uint64_t)p_str, a4, a5);
LABEL_63:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    v18 = 1;
    if ((v49 & 0x8000000000000000) == 0)
      goto LABEL_64;
    goto LABEL_19;
  }
LABEL_66:
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DE500174(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkConfig::CreateComputeEngine@<X0>(kaldi::quasar::ESNetworkConfig *this@<X0>, kaldi::quasar::ESNetworkPlan **a2@<X8>)
{
  kaldi::quasar::ESNetworkPlan *v4;
  kaldi::quasar::ESNetworkPlan *result;

  v4 = (kaldi::quasar::ESNetworkPlan *)operator new();
  result = kaldi::quasar::ESNetworkPlan::ESNetworkPlan(v4, this);
  *a2 = v4;
  return result;
}

void sub_1DE500204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40AAD5BB09);
  _Unwind_Resume(a1);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkPlan::ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(_QWORD *)this = &off_1EA92DC90;
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig((kaldi::quasar::ESNetworkPlan *)((char *)this + 8), a2);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 1065353216;
  *((_WORD *)this + 160) = 0;
  kaldi::quasar::ESNetworkPlan::LoadNetwork((uint64_t)this, (uint64_t)this + 48);
  return this;
}

void sub_1DE5002CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v4;
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(_QWORD **)(v1 + 264));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1 + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::LoadNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t context;
  uint64_t *v21;
  uint64_t v22;
  int v27;
  int v28;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t plan_and_load_network;
  void **v35;
  uint64_t v36;
  void **v37;
  BOOL v38;
  char *v39;
  void **v40;
  void **v41;
  BOOL v44;
  uint64_t v45;
  void **v46;
  char *v47;
  void **v48;
  void **v49;
  __int128 *v52;
  __int128 *i;
  int v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD v63[3];
  std::string v64;
  void ***v65;
  void **v66;
  uint64_t v67;
  __int128 *v68;
  void ***v69;

  v4 = a1 + 96;
  v5 = (uint64_t *)(a1 + 96);
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 119);
    switch(*(_BYTE *)(a1 + 119))
    {
      case 0:
        goto LABEL_41;
      case 1:
      case 2:
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_143;
      case 3:
        if (*(_WORD *)v5 == 20557 && *(_BYTE *)(a1 + 98) == 83)
          goto LABEL_78;
        if (*(_WORD *)v5 == 20547 && *(_BYTE *)(a1 + 98) == 85)
          goto LABEL_78;
        if ((v6 & 0x80) == 0)
          goto LABEL_143;
        goto LABEL_70;
      case 5:
        goto LABEL_18;
      case 7:
        goto LABEL_73;
      case 0xB:
        goto LABEL_49;
      default:
        if (v6 != 15)
        {
          if (v6 != 18)
            goto LABEL_143;
LABEL_32:
          v14 = (uint64_t *)*v5;
          v15 = v5[1];
          v16 = *((unsigned __int16 *)v5 + 8);
          if (v14 != (uint64_t *)0x544E55525F454E41 || v15 != 0x455249445F454D49 || v16 != 21571)
            goto LABEL_143;
          goto LABEL_78;
        }
        if (*v5 != 0x504D5F4C4154454DLL || *(_QWORD *)(a1 + 103) != 0x48504152475F5350)
          goto LABEL_143;
        goto LABEL_78;
    }
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (v9 > 10)
  {
    switch(v9)
    {
      case 11:
        v5 = (uint64_t *)*v5;
LABEL_49:
        v21 = (uint64_t *)*v5;
        v22 = *(uint64_t *)((char *)v5 + 3);
        if (v21 == (uint64_t *)0x544E55525F454E41 && v22 == 0x454D49544E55525FLL)
          goto LABEL_78;
LABEL_143:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 295);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Unknown platform: ", 18);
        v56 = *(char *)(a1 + 119);
        if (v56 >= 0)
          v57 = v4;
        else
          v57 = *(_QWORD *)(a1 + 96);
        if (v56 >= 0)
          v58 = *(unsigned __int8 *)(a1 + 119);
        else
          v58 = *(_QWORD *)(a1 + 104);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v59, ", a typo in config file?");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
      case 15:
        if (*(_QWORD *)*v5 == 0x504D5F4C4154454DLL && *(_QWORD *)(*v5 + 7) == 0x48504152475F5350)
          goto LABEL_78;
        break;
      case 18:
        v5 = (uint64_t *)*v5;
        goto LABEL_32;
    }
    goto LABEL_71;
  }
  if (!v9)
  {
LABEL_41:
    context = espresso_create_context();
    goto LABEL_86;
  }
  if (v9 == 3)
  {
    if (*(_WORD *)*v5 == 20557 && *(_BYTE *)(*v5 + 2) == 83)
      goto LABEL_78;
    if (*(_WORD *)*v5 == 20547 && *(_BYTE *)(*v5 + 2) == 85)
      goto LABEL_78;
LABEL_70:
    v9 = *(_QWORD *)(a1 + 104);
    goto LABEL_71;
  }
  if (v9 != 5)
  {
LABEL_71:
    if (v9 == 7)
    {
      v5 = (uint64_t *)*v5;
LABEL_73:
      v27 = *(_DWORD *)v5;
      v28 = *(_DWORD *)((char *)v5 + 3);
      if (v27 == 1599426627 && v28 == 1414283615)
        goto LABEL_78;
    }
    goto LABEL_143;
  }
  v5 = (uint64_t *)*v5;
LABEL_18:
  v10 = *(_DWORD *)v5;
  v11 = *((unsigned __int8 *)v5 + 4);
  if (v10 != 1096041805 || v11 != 76)
    goto LABEL_143;
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 284);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Using The Metal GPU backend (legacy, deprecated) ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
  }
LABEL_78:
  context = espresso_create_context();
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v65, "MakeEspressoContext", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 297, 3);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Set compute platform to ", 24);
    v31 = *(char *)(a1 + 119);
    if (v31 >= 0)
      v32 = v4;
    else
      v32 = *(_QWORD *)(a1 + 96);
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(a1 + 119);
    else
      v33 = *(_QWORD *)(a1 + 104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v65);
  }
LABEL_86:
  if (!context)
    context = espresso_create_context();
  *(_QWORD *)(a1 + 144) = context;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v64 = *(std::string *)a2;
  plan_and_load_network = espresso_create_plan_and_load_network();
  *(_QWORD *)(a1 + 168) = plan_and_load_network;
  if (!plan_and_load_network)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 395);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"plan_ != nullptr", 16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
  }
  memset(v63, 0, sizeof(v63));
  c_network_get_input_names();
  v60 = 0;
  v61 = 0;
  v62 = 0;
  c_network_get_output_names();
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v65, 0, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 176, (uint64_t *)&v65);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v65);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v65, 0, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 216, (uint64_t *)&v65);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v65);
  if (espresso_plan_build())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 412);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"espresso_plan_build(plan_) == ESPRESSO_STATUS_SUCCESS", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
  }
  if (*(_QWORD *)(a1 + 168) != *(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65, "LoadNetwork", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 413);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"plan_ == network_.plan", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
  }
  v65 = 0;
  v66 = 0;
  v67 = 0;
  espresso_get_additional_configuration_names();
  v35 = (void **)v65;
  if (v65 == (void ***)v66)
  {
    v38 = 0;
    *(_BYTE *)(a1 + 320) = 0;
  }
  else
  {
    if (*((char *)v65 + 23) < 0)
    {
      v37 = *v65;
      v36 = (uint64_t)v65[1];
    }
    else
    {
      v36 = *((unsigned __int8 *)v65 + 23);
      v37 = (void **)v65;
    }
    if (v36 >= 13)
    {
      v39 = (char *)v37 + v36;
      v40 = v37;
      do
      {
        v41 = (void **)memchr(v40, 98, v36 - 12);
        if (!v41)
          break;
        if (*v41 == (void *)0x6F635F6863746162 && *(void **)((char *)v41 + 5) == (void *)0x5F6769666E6F635FLL)
          goto LABEL_109;
        v40 = (void **)((char *)v41 + 1);
        v36 = v39 - (char *)v40;
      }
      while (v39 - (char *)v40 > 12);
      v41 = (void **)v39;
LABEL_109:
      v44 = v41 != (void **)v39 && v41 == v37;
      *(_BYTE *)(a1 + 320) = v44;
    }
    else
    {
      *(_BYTE *)(a1 + 320) = 0;
    }
    if (*((char *)v35 + 23) < 0)
    {
      v46 = v35;
      v35 = (void **)*v35;
      v45 = (uint64_t)v46[1];
    }
    else
    {
      v45 = *((unsigned __int8 *)v35 + 23);
    }
    v47 = (char *)v35 + v45;
    if (v45 >= 13)
    {
      v48 = v35;
      do
      {
        v49 = (void **)memchr(v48, 119, v45 - 12);
        if (!v49)
          break;
        if (*v49 == (void *)0x6F635F6874646977 && *(void **)((char *)v49 + 5) == (void *)0x5F6769666E6F635FLL)
          goto LABEL_128;
        v48 = (void **)((char *)v49 + 1);
        v45 = v47 - (char *)v48;
      }
      while (v47 - (char *)v48 > 12);
    }
    v49 = (void **)v47;
LABEL_128:
    v38 = v49 != (void **)v47 && v49 == v35;
  }
  *(_BYTE *)(a1 + 321) = v38;
  v52 = v60;
  for (i = v61; v52 != i; v52 = (__int128 *)((char *)v52 + 24))
  {
    LODWORD(v69) = 0;
    espresso_blob_is_dynamic();
    v54 = (int)v69;
    v68 = v52;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 280, (unsigned __int8 *)v52, (uint64_t)&std::piecewise_construct, &v68)+ 10) = v54;
  }
  v69 = (void ***)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  v65 = (void ***)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v65 = (void ***)v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
}

void kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this)
{
  _QWORD v2[34];

  *(_QWORD *)this = &off_1EA92DC90;
  if (*((_QWORD *)this + 21) && espresso_plan_destroy())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "~ESNetworkPlan", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 339);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  if (espresso_context_destroy())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "~ESNetworkPlan", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 342);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
    goto LABEL_7;
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 280);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)this + 1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

{
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateData@<X0>(int **a1@<X1>, char a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v6);
  *(_QWORD *)v6 = &off_1EA92DBD8;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_QWORD *)(v6 + 208) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_DWORD *)(v6 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>((kaldi::quasar::EspressoNDArray *)(v6 + 32), a1, a2);
  *a3 = v6;
  return result;
}

{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v6);
  *(_QWORD *)v6 = &off_1EA92DBD8;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_QWORD *)(v6 + 208) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_DWORD *)(v6 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>((kaldi::quasar::EspressoNDArray *)(v6 + 32), a1, a2);
  *a3 = v6;
  return result;
}

void sub_1DE500D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1DE500E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateData@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1EA92DBD8;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_DWORD *)(v4 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>((kaldi::quasar::EspressoNDArray *)(v4 + 32), a1);
  *a2 = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1EA92DBD8;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_DWORD *)(v4 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>((kaldi::quasar::EspressoNDArray *)(v4 + 32), a1);
  *a2 = v4;
  return result;
}

void sub_1DE500EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1DE500FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataInt32(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = operator new();
  kaldi::quasar::ESTensorData::ESTensorData((_QWORD *)v5, (uint64_t)__dst);
  *(_DWORD *)(v5 + 192) = 131104;
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1DE501078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1DF0ED014](v11, 0x1093C40B76D1C73);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataFloat(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = (_QWORD *)operator new();
  kaldi::quasar::ESTensorData::ESTensorData(v5, (uint64_t)__dst);
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1DE50113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1DF0ED014](v11, 0x1093C40B76D1C73);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateConcat(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  const void **v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _OWORD v7[22];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(const void ***)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    __p[0] = 0;
    __p[1] = 0;
    v6 = 0;
    if (*v3)
    {
      {
        memset(&v7[17], 0, 80);
        espresso_buffer_unpack_tensor_shape();
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "CreateConcat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 486);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"rank > 0", 8);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "CreateConcat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 482);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"es_data != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1EA92DBD8;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 192) = 65568;
  *a2 = v4;
}

uint64_t kaldi::quasar::ESTensorData::GetDataFloat(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 202);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

void kaldi::quasar::ESNetworkPlan::CreateSplit(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, _QWORD *a2@<X8>)
{
  int v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[17];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a1 + 152))(a1, 0);
  v6 = v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a2, v5);
  if (v5)
  {
    if (!v7)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "CreateSplit", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 548);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"src_buf != nullptr", 18);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v8 = v7;
    memset(v22, 0, 80);
    v21 = 0;
    espresso_buffer_unpack_tensor_shape();
    v19 = 0;
    v20 = 0;
    __p = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v22, (uint64_t)v22, 0);
    v9 = (uint64_t *)__p;
    v10 = 1;
    *(_QWORD *)__p = 1;
    v11 = v21;
    if (v21)
    {
      v10 = 1;
      do
      {
        v12 = *v9++;
        v10 *= (_DWORD)v12;
        --v11;
      }
      while (v11);
    }
    v13 = 0;
    v14 = 0;
    if (v6 <= 1)
      v15 = 1;
    else
      v15 = v6;
    do
    {
      v16 = (_QWORD *)operator new();
      kaldi::quasar::ESTensorData::ESTensorData(v16, (uint64_t)&__p);
      v17 = *(_QWORD *)(*a2 + 8 * v14);
      *(_QWORD *)(*a2 + 8 * v14) = v16;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      (*(void (**)(_QWORD, void *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*a2 + 8 * v14) + 72))(*(_QWORD *)(*a2 + 8 * v14), v8, v13, (v10 + v13), 0);
      ++v14;
      v13 = (v13 + v10);
    }
    while (v15 != v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DE501B0C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE501B2CLL);
}

void kaldi::quasar::ESNetworkPlan::CreateSlice(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, uint64_t *a4@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  void *__p;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD v23[17];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a1 + 144))(a1) <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 571);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "src->GetNumDims() >= 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if (a2 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 572);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "0 <= start");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if ((int)a3 < a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 573);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "start <= end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a1 + 152))(a1, 0);
  if (v9 < a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 575);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "end <= num_split");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if (v9)
  {
    if (a2 || v9 != a3)
    {
      if (!v11)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CreateSlice", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 584);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "src_buf != nullptr");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      v12 = v11;
      memset(v23, 0, 80);
      v22 = 0;
      espresso_buffer_unpack_tensor_shape();
      v20 = 0;
      v21 = 0;
      __p = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v23, (uint64_t)v23, 0);
      v13 = (char *)__p;
      *(_QWORD *)__p = (int)(a3 - a2);
      if (v22 < 2)
      {
        v16 = 1;
      }
      else
      {
        v14 = v22 - 1;
        v15 = (uint64_t *)(v13 + 8);
        v16 = 1;
        do
        {
          v17 = *v15++;
          v16 *= (_DWORD)v17;
          --v14;
        }
        while (v14);
      }
      v18 = (_QWORD *)operator new();
      kaldi::quasar::ESTensorData::ESTensorData(v18, (uint64_t)&__p);
      (*(void (**)(_QWORD *, void *, _QWORD, _QWORD, _QWORD))(*v18 + 72))(v18, v12, (v16 * a2), v16 * a3, 0);
      *a4 = (uint64_t)v18;
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
    }
    else
    {
      (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a1 + 16))(a1);
    }
  }
  else
  {
    v10 = operator new();
    kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v10);
    *(_QWORD *)v10 = &off_1EA92DBD8;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_QWORD *)(v10 + 208) = 0;
    *(_DWORD *)(v10 + 192) = 65568;
    *a4 = v10;
  }
}

void sub_1DE501F3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(uint64_t a1, __int128 **a2, _BYTE *a3, _BYTE *a4)
{
  __int128 *v6;
  __int128 v8;
  _QWORD *v9;
  char *last_error;
  std::string __p[11];

  if (*(_QWORD *)(a1 + 88))
  {
    v6 = *a2;
    if (a2[1] != *a2)
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
      }
      if (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_))
      {
        std::map<std::string,std::string>::at(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
        espresso_network_set_function_name();
        *a3 = 1;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(_QWORD *)(a1 + 128))
      return;
  }
  else if (!*(_BYTE *)(a1 + 143))
  {
    return;
  }
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "SetNetworkFunctionName", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 619);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Set function name for checkpoint failed, error=", 47);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *a4 = 1;
}

void sub_1DE5020C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

uint64_t kaldi::quasar::ESNetworkPlan::RunNitro(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int64x2_t v36;
  char *v37;
  void *v38;
  const char *last_error;
  size_t v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  std::string __p[7];
  std::string v48;
  _OWORD v49[11];
  void *v50;
  uint64_t v51;
  int64x2_t v52;
  char *v53;
  uint64_t v54;

  kdebug_trace();
  v8 = *a2;
  for (i = a2[1]; v8 != i; v8 += 32)
  {
    kaldi::quasar::StripColon(v8, __p);
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 645);
      last_error = (const char *)espresso_get_last_error();
      v41 = strlen(last_error);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)last_error, v41);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 653);
    v44 = (_QWORD *)std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 32;
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)__p, 1);
    v46 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  if (a5)
  {
    v10 = *(char **)a5;
    v11 = *(char **)(a5 + 8);
    while (v11 != v10)
    {
      v13 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      v12 = v13;
      *(_QWORD *)v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    *(_QWORD *)(a5 + 8) = v10;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve((char **)a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    v14 = *a3;
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        kaldi::quasar::StripColon(v14, &v48);
        if (espresso_network_bind_buffer())
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "RunNitro", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 671);
          v42 = (const char *)espresso_get_last_error();
          v43 = strlen(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v42, v43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
        }
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v49, __p, 1);
        v16 = operator new();
        kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v16);
        *(_QWORD *)v16 = &off_1EA92DBD8;
        v17 = v49[9];
        *(_OWORD *)(v16 + 160) = v49[8];
        *(_OWORD *)(v16 + 176) = v17;
        *(_OWORD *)(v16 + 192) = v49[10];
        v18 = v49[5];
        *(_OWORD *)(v16 + 96) = v49[4];
        *(_OWORD *)(v16 + 112) = v18;
        v19 = v49[7];
        *(_OWORD *)(v16 + 128) = v49[6];
        *(_OWORD *)(v16 + 144) = v19;
        v20 = v49[1];
        *(_OWORD *)(v16 + 32) = v49[0];
        *(_OWORD *)(v16 + 48) = v20;
        v21 = v49[3];
        *(_OWORD *)(v16 + 64) = v49[2];
        *(_OWORD *)(v16 + 80) = v21;
        v22 = v50;
        v50 = 0;
        *(_QWORD *)(v16 + 208) = v22;
        v24 = *(uint64_t **)(a5 + 8);
        v23 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v24 >= v23)
        {
          v26 = ((uint64_t)v24 - *(_QWORD *)a5) >> 3;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - *(_QWORD *)a5;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          v54 = a5 + 16;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a5 + 16, v29);
          else
            v30 = 0;
          v31 = (uint64_t *)&v30[8 * v26];
          v32 = &v30[8 * v29];
          v53 = v32;
          *v31 = v16;
          v25 = v31 + 1;
          v52.i64[1] = (uint64_t)(v31 + 1);
          v34 = *(char **)a5;
          v33 = *(char **)(a5 + 8);
          if (v33 == *(char **)a5)
          {
            v36 = vdupq_n_s64((unint64_t)v33);
          }
          else
          {
            do
            {
              v35 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *(_QWORD *)v33 = 0;
              *--v31 = v35;
            }
            while (v33 != v34);
            v36 = *(int64x2_t *)a5;
            v25 = (_QWORD *)v52.i64[1];
            v32 = v53;
          }
          *(_QWORD *)a5 = v31;
          *(_QWORD *)(a5 + 8) = v25;
          v52 = v36;
          v37 = *(char **)(a5 + 16);
          *(_QWORD *)(a5 + 16) = v32;
          v53 = v37;
          v51 = v36.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v51);
        }
        else
        {
          *v24 = v16;
          v25 = v24 + 1;
        }
        *(_QWORD *)(a5 + 8) = v25;
        v38 = v50;
        v50 = 0;
        if (v38)
        {
          free(v38);
          v25 = *(_QWORD **)(a5 + 8);
        }
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(v25 - 1), &v48);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        v14 += 24;
      }
      while (v14 != v15);
    }
  }
  return kdebug_trace();
}

void sub_1DE502554()
{
  void *v0;

  if (v0)
    free(v0);
  JUMPOUT(0x1DE5025ACLL);
}

void sub_1DE50255C()
{
  uint64_t v0;

  MEMORY[0x1DF0ED014](v0, 0x1093C40B76D1C73);
  JUMPOUT(0x1DE502578);
}

void sub_1DE50258C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x1DE5025B8);
  JUMPOUT(0x1DE5025BCLL);
}

void kaldi::quasar::StripColon(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v5;

  v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v5);
  }
}

uint64_t std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t kaldi::quasar::ESNetworkPlan::NeedShapeChange(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  _QWORD *v17;
  const char *last_error;
  size_t v19;
  _QWORD v20[34];
  _OWORD v21[2];
  int v22;
  _OWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (espresso_plan_get_phase() == 1)
  {
    memset(v23, 0, sizeof(v23));
    v24 = 1065353216;
    v6 = *a3;
    v7 = a3[1];
    while (v6 != v7)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v6, (uint64_t)v6);
      v6 += 24;
    }
    if ((std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v23, (_QWORD *)(a1 + 216)) & 1) == 0)
    {
      v10 = 1;
LABEL_24:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v23);
      return v10;
    }
    memset(v21, 0, sizeof(v21));
    v22 = 1065353216;
    v8 = *a2;
    v9 = a2[1];
    while (v8 != v9)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, v8, (uint64_t)v8);
      v8 += 32;
    }
    if (std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v21, (_QWORD *)(a1 + 176)))
    {
      v11 = *a2;
      if (a2[1] == *a2)
      {
LABEL_21:
        v10 = 0;
LABEL_23:
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)v21);
        goto LABEL_24;
      }
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD **)&v11[v12 + 24];
        if (espresso_network_query_blob_dimensions())
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "NeedShapeChange", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 717);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Espresso failed query blob info ", 32);
          v16 = (_QWORD *)std::ostream::operator<<();
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          last_error = (const char *)espresso_get_last_error();
          v19 = strlen(last_error);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error, v19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
        }
        if (v14[14] > 1uLL || v14[10] != v25 || v14[11] != v26 || v14[12] != v27 || v14[13] != v28)
          break;
        ++v13;
        v11 = *a2;
        v12 += 32;
        if (v13 >= (a2[1] - *a2) >> 5)
          goto LABEL_21;
      }
    }
    v10 = 1;
    goto LABEL_23;
  }
  return 1;
}

void sub_1DE502964(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  int v14;
  _QWORD *v15;
  std::vector<int>::value_type *v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const char *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  const char *v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *last_error;
  std::vector<int> v57;
  _QWORD v58[3];
  std::string v59;
  std::vector<int>::value_type __x[2];
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  result = kaldi::quasar::ESNetworkPlan::NeedShapeChange(a1, a2, a3);
  if (!(_DWORD)result)
    return result;
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 741);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to reset plan with ", 35);
    v54 = (_QWORD *)std::ostream::operator<<();
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 176);
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    if (espresso_network_declare_input())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 750);
      v22 = (char)v7[23];
      if (v22 >= 0)
        v23 = (uint64_t)v7;
      else
        v23 = *(_QWORD *)v7;
      if (v22 >= 0)
        v24 = v7[23];
      else
        v24 = *((_QWORD *)v7 + 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' with ", 7);
      v26 = (_QWORD *)std::ostream::operator<<();
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      v28 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, v28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 176, v7, (uint64_t)v7);
    v7 += 32;
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 216);
  v9 = *a3;
  v10 = a3[1];
  while (v9 != v10)
  {
    if (espresso_network_declare_output())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 761);
      v30 = (char)v9[23];
      if (v30 >= 0)
        v31 = (uint64_t)v9;
      else
        v31 = *(_QWORD *)v9;
      if (v30 >= 0)
        v32 = v9[23];
      else
        v32 = *((_QWORD *)v9 + 1);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with ", 7);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      v36 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 216, v9, (uint64_t)v9);
    v9 += 24;
  }
  if (*(_BYTE *)(a1 + 320))
  {
    *(_QWORD *)__x = 0;
    v61 = 0uLL;
    std::to_string(&v59, *(_QWORD *)(*((_QWORD *)*a2 + 3) + 104));
    v11 = std::string::insert(&v59, 0, "batch_config_");
  }
  else
  {
    if (!*(_BYTE *)(a1 + 321))
      goto LABEL_33;
    *(_QWORD *)__x = 0;
    v61 = 0uLL;
    std::to_string(&v59, *(_QWORD *)(*((_QWORD *)*a2 + 3) + 80));
    v11 = std::string::insert(&v59, 0, "width_config_");
  }
  v12 = v11->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v62 = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v62 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(*(void **)__x);
  *(_QWORD *)__x = v12;
  *(_QWORD *)&v61 = v62;
  *(_QWORD *)((char *)&v61 + 7) = *(_QWORD *)((char *)&v62 + 7);
  HIBYTE(v61) = v13;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v14 = espresso_network_select_configuration();
  if (v14 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 782);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"configuration name not supported: ", 34);
    if (v61 >= 0)
      v16 = __x;
    else
      v16 = *(std::vector<int>::value_type **)__x;
    if (v61 >= 0)
      v17 = HIBYTE(v61);
    else
      v17 = v61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(*(void **)__x);
    if (!v14)
      goto LABEL_46;
LABEL_33:
    std::vector<char const*>::vector(&v62, (a2[1] - *a2) >> 5);
    v18 = (a2[1] - *a2) >> 5;
    __x[0] = -1;
    std::vector<int>::vector((std::vector<int> *)&v59, v18, __x);
    std::vector<std::vector<int>>::vector(v58, 5uLL, (uint64_t)&v59);
    if (v59.__r_.__value_.__r.__words[0])
    {
      v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::vector<int>::vector(&v57, (a2[1] - *a2) >> 5);
    if (a2[1] != *a2)
    {
      v19 = 0;
      do
      {
        if (espresso_buffer_unpack_tensor_shape())
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 798);
          v38 = (uint64_t)&(*a2)[32 * v19];
          v39 = *(char *)(v38 + 23);
          if (v39 >= 0)
            v40 = (uint64_t)&(*a2)[32 * v19];
          else
            v40 = *(_QWORD *)v38;
          if (v39 >= 0)
            v41 = *(unsigned __int8 *)(v38 + 23);
          else
            v41 = *(_QWORD *)(v38 + 8);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with ", 7);
          v43 = (_QWORD *)std::ostream::operator<<();
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
          v45 = (const char *)espresso_get_last_error();
          v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
        }
        v57.__begin_[v19] = 0;
        v20 = (uint64_t)&(*a2)[32 * v19];
        if (*(char *)(v20 + 23) < 0)
          v20 = *(_QWORD *)v20;
        *(_QWORD *)(v62 + 8 * v19++) = v20;
      }
      while (v19 < (a2[1] - *a2) >> 5);
    }
    if (espresso_network_change_input_blob_shapes_seq_rank())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 818);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to change input blob shapes with ", 49);
      v50 = (_QWORD *)std::ostream::operator<<();
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      v52 = (const char *)espresso_get_last_error();
      v53 = strlen(v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    if (v57.__begin_)
    {
      v57.__end_ = v57.__begin_;
      operator delete(v57.__begin_);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if ((_QWORD)v62)
    {
      *((_QWORD *)&v62 + 1) = v62;
      operator delete((void *)v62);
    }
    goto LABEL_46;
  }
  if (v14)
    goto LABEL_33;
LABEL_46:
  result = espresso_plan_build();
  if ((_DWORD)result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59, "PrepareInputsAndOutputs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 824);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to build plan with ", 35);
    v47 = (_QWORD *)std::ostream::operator<<();
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  return result;
}

void sub_1DE5031D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DE5031E0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1DE5031E8);
  __clang_call_terminate(a1);
}

void kaldi::quasar::ESNetworkPlan::RunClassic(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string *v21;
  const std::string *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t *v44;
  void *v45;
  _QWORD *v46;
  char *last_error;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  _BYTE v53[168];
  _OWORD __C[9];
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;

  if (!*(_QWORD *)(a1 + 168))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 833);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "plan_ != nullptr");
    goto LABEL_42;
  }
  kdebug_trace();
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      v11 = *(_DWORD *)(*((_QWORD *)v9 + 3) + 160);
      if (v11 == 131104)
      {
        v12 = espresso_network_bind_buffer();
        vDSP_vflt32(**((const int ***)v9 + 3), 1, *(float **)&__C[0], 1, *((vDSP_Length *)&v55 + 1));
      }
      else
      {
        if (v11 != 65568)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 859);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "kv.second->storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
          goto LABEL_42;
        }
        v12 = espresso_network_bind_buffer();
      }
      if (v12)
        break;
      v9 += 32;
      if (v9 == v10)
        goto LABEL_9;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 871);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v46, last_error);
LABEL_42:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C);
  }
LABEL_9:
  if (espresso_plan_execute_sync())
  {
    if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 883);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      v50 = (_QWORD *)std::ostream::operator<<();
      v53[0] = 32;
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v53, 1);
      v52 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, v52);
      goto LABEL_42;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 880);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      v13 = (_QWORD *)std::ostream::operator<<();
      v53[0] = 32;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v53, 1);
      v15 = (const char *)espresso_get_last_error();
      v16 = strlen(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    }
  }
  else
  {
    if (a5)
    {
      v17 = *a5;
      v18 = a5[1];
      while (v18 != v17)
      {
        v20 = *--v18;
        v19 = v20;
        *v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      a5[1] = v17;
      v21 = *(const std::string **)a3;
      v22 = *(const std::string **)(a3 + 8);
      if (*(const std::string **)a3 != v22)
      {
        while (!espresso_network_bind_buffer())
        {
          kaldi::quasar::EspressoNDArray::EspressoNDArray(__C, v53, 1);
          v23 = operator new();
          kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v23);
          *(_QWORD *)v23 = &off_1EA92DBD8;
          v24 = v55;
          *(_OWORD *)(v23 + 160) = __C[8];
          *(_OWORD *)(v23 + 176) = v24;
          *(_OWORD *)(v23 + 192) = v56;
          v25 = __C[5];
          *(_OWORD *)(v23 + 96) = __C[4];
          *(_OWORD *)(v23 + 112) = v25;
          v26 = __C[7];
          *(_OWORD *)(v23 + 128) = __C[6];
          *(_OWORD *)(v23 + 144) = v26;
          v27 = __C[1];
          *(_OWORD *)(v23 + 32) = __C[0];
          *(_OWORD *)(v23 + 48) = v27;
          v28 = __C[3];
          *(_OWORD *)(v23 + 64) = __C[2];
          *(_OWORD *)(v23 + 80) = v28;
          v29 = v57;
          v57 = 0;
          *(_QWORD *)(v23 + 208) = v29;
          v31 = a5[1];
          v30 = (unint64_t)a5[2];
          if ((unint64_t)v31 >= v30)
          {
            v33 = v31 - *a5;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v30 - (_QWORD)*a5;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            v61 = a5 + 2;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v36);
            else
              v37 = 0;
            v38 = (uint64_t *)&v37[8 * v33];
            v39 = &v37[8 * v36];
            v60 = v39;
            *v38 = v23;
            v32 = v38 + 1;
            v59.i64[1] = (uint64_t)(v38 + 1);
            v41 = *a5;
            v40 = a5[1];
            if (v40 == *a5)
            {
              v43 = vdupq_n_s64((unint64_t)v40);
            }
            else
            {
              do
              {
                v42 = *--v40;
                *v40 = 0;
                *--v38 = v42;
              }
              while (v40 != v41);
              v43 = *(int64x2_t *)a5;
              v32 = (uint64_t *)v59.i64[1];
              v39 = v60;
            }
            *a5 = v38;
            a5[1] = v32;
            v59 = v43;
            v44 = a5[2];
            a5[2] = (uint64_t *)v39;
            v60 = (char *)v44;
            v58 = v43.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
          }
          else
          {
            *v31 = v23;
            v32 = v31 + 1;
          }
          a5[1] = v32;
          v45 = v57;
          v57 = 0;
          if (v45)
          {
            free(v45);
            v32 = a5[1];
          }
          kaldi::quasar::ComputeEngineBufferItf::SetName(*(v32 - 1), v21++);
          if (v21 == v22)
            goto LABEL_39;
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C, "RunClassic", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 900);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
        v49 = (char *)espresso_get_last_error();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
        goto LABEL_42;
      }
    }
LABEL_39:
    kdebug_trace();
  }
}

void sub_1DE503744(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a31);
}

uint64_t kaldi::quasar::ESNetworkPlan::RunTraining(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const std::string *v14;
  const std::string *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t *v37;
  void *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *last_error;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  char v54[168];
  _OWORD v55[11];
  void *v56;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD *v60;

  if (!*(_QWORD *)(a1 + 168))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 916);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, "plan_ != nullptr");
    goto LABEL_37;
  }
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  v9 = *a2;
  v8 = a2[1];
  while (v9 != v8)
  {
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 932);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to bind buffer for input=", 32);
      v40 = (char)v9[23];
      if (v40 >= 0)
        v41 = (uint64_t)v9;
      else
        v41 = *(_QWORD *)v9;
      if (v40 >= 0)
        v42 = v9[23];
      else
        v42 = *((_QWORD *)v9 + 1);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", error=", 8);
      last_error = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, last_error);
      goto LABEL_37;
    }
    v9 += 32;
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 938);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to run checkpoint network, error=", 40);
    v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    goto LABEL_37;
  }
  get_main_function_name();
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 943);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to set function to main, error=", 38);
    v51 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v50, v51);
    goto LABEL_37;
  }
  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 948);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to run main network, error=", 34);
    v53 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v52, v53);
    goto LABEL_37;
  }
  if (a5)
  {
    v11 = *a5;
    v12 = a5[1];
    while (v12 != v11)
    {
      v13 = *--v12;
      result = v13;
      *v12 = 0;
      if (v13)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a5[1] = v11;
    v14 = *(const std::string **)a3;
    v15 = *(const std::string **)(a3 + 8);
    if (*(const std::string **)a3 != v15)
    {
      while (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v55, v54, 1);
        v16 = operator new();
        kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v16);
        *(_QWORD *)v16 = &off_1EA92DBD8;
        v17 = v55[9];
        *(_OWORD *)(v16 + 160) = v55[8];
        *(_OWORD *)(v16 + 176) = v17;
        *(_OWORD *)(v16 + 192) = v55[10];
        v18 = v55[5];
        *(_OWORD *)(v16 + 96) = v55[4];
        *(_OWORD *)(v16 + 112) = v18;
        v19 = v55[7];
        *(_OWORD *)(v16 + 128) = v55[6];
        *(_OWORD *)(v16 + 144) = v19;
        v20 = v55[1];
        *(_OWORD *)(v16 + 32) = v55[0];
        *(_OWORD *)(v16 + 48) = v20;
        v21 = v55[3];
        *(_OWORD *)(v16 + 64) = v55[2];
        *(_OWORD *)(v16 + 80) = v21;
        v22 = v56;
        v56 = 0;
        *(_QWORD *)(v16 + 208) = v22;
        v24 = a5[1];
        v23 = (unint64_t)a5[2];
        if ((unint64_t)v24 >= v23)
        {
          v26 = v24 - *a5;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - (_QWORD)*a5;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          v60 = a5 + 2;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a5 + 2), v29);
          else
            v30 = 0;
          v31 = (uint64_t *)&v30[8 * v26];
          v32 = &v30[8 * v29];
          v59 = v32;
          *v31 = v16;
          v25 = v31 + 1;
          v58.i64[1] = (uint64_t)(v31 + 1);
          v34 = *a5;
          v33 = a5[1];
          if (v33 == *a5)
          {
            v36 = vdupq_n_s64((unint64_t)v33);
          }
          else
          {
            do
            {
              v35 = *--v33;
              *v33 = 0;
              *--v31 = v35;
            }
            while (v33 != v34);
            v36 = *(int64x2_t *)a5;
            v25 = (uint64_t *)v58.i64[1];
            v32 = v59;
          }
          *a5 = v31;
          a5[1] = v25;
          v58 = v36;
          v37 = a5[2];
          a5[2] = (uint64_t *)v32;
          v59 = (char *)v37;
          v57 = v36.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v57);
        }
        else
        {
          *v24 = v16;
          v25 = v24 + 1;
        }
        a5[1] = v25;
        v38 = v56;
        v56 = 0;
        if (v38)
        {
          free(v38);
          v25 = a5[1];
        }
        result = (uint64_t)kaldi::quasar::ComputeEngineBufferItf::SetName(*(v25 - 1), v14++);
        if (v14 == v15)
          return result;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "RunTraining", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 964);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
      v47 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v46, v47);
LABEL_37:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55);
    }
  }
  return result;
}

void sub_1DE503C54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a31);
}

void kaldi::quasar::ESNetworkPlan::Run(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  const void *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  std::string v28;
  void **v29[34];
  char *v30;
  char *v31;
  unint64_t v32;
  _WORD v33[5];

  v33[0] = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (_BYTE *)v33 + 1, v33);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v30, ((char *)a2[1] - (char *)*a2) >> 5);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = (const void *)*((_QWORD *)v8 + 3);
      if (!v10
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Run", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 984);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"es_data != nullptr", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
      v12 = v11;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v13 = *v8;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
      }
      v14 = v12 + 32;
      v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        v17 = (v31 - v30) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v32 - (_QWORD)v30;
        if ((uint64_t)(v32 - (_QWORD)v30) >> 4 > v18)
          v18 = v19 >> 4;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v29[4] = (void **)&v32;
        v21 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v32, v20);
        v22 = &v21[4 * v17];
        v29[0] = v21;
        v29[1] = v22;
        v29[3] = &v21[4 * v23];
        v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        v22[2] = (void *)v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = v24;
        memset(&v28, 0, sizeof(v28));
        v22[3] = v14;
        v29[2] = v22 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v30, v29);
        v25 = v31;
        std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)v29);
        v31 = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      else
      {
        v16 = v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)v31 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        *((_QWORD *)v15 + 2) = v16;
        *((_QWORD *)v15 + 3) = v14;
        v31 = v15 + 32;
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (HIBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v30, (uint64_t *)a3, v7, (uint64_t)a5);
  }
  else if (LOBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  v29[0] = (void **)&v30;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](v29);
}

{
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  void **v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  unsigned __int8 **v58;
  int64x2_t v59;
  __int128 v60;
  char v61;
  char *v62;
  char *v63;
  unint64_t v64;
  int64x2_t v65;
  char *v66;
  __int16 v67;
  std::string v68;
  char *v69;
  char **v70;
  _QWORD v71[3];

  v67 = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (_BYTE *)&v67 + 1, &v67);
  v65 = 0uLL;
  v66 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v62, ((char *)a2[1] - (char *)*a2) >> 5);
  v9 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v10 = *((_QWORD *)v9 + 3);
      if (!v10
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 144))(v10);
        if (v12 == 1)
        {
          memset(&v68, 0, sizeof(v68));
          (*(void (**)(_QWORD, std::string *))(**((_QWORD **)v9 + 3) + 56))(*((_QWORD *)v9 + 3), &v68);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(v71, a1, &v68, 0);
          v11 = (char *)v71[0];
          v15 = v65.i64[1];
          if (v65.i64[1] >= (unint64_t)v66)
          {
            v17 = (v65.i64[1] - v65.i64[0]) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v18 = (uint64_t)&v66[-v65.i64[0]] >> 2;
            if (v18 <= v17 + 1)
              v18 = v17 + 1;
            if ((unint64_t)&v66[-v65.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            *((_QWORD *)&v60 + 1) = &v66;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v19);
            else
              v20 = 0;
            v21 = v71[0];
            v27 = &v20[8 * v17];
            v28 = &v20[8 * v19];
            *(_QWORD *)&v60 = v28;
            v71[0] = 0;
            *(_QWORD *)v27 = v21;
            v16 = v27 + 8;
            v59.i64[1] = (uint64_t)(v27 + 8);
            v29 = (_QWORD *)v65.i64[1];
            v30 = (_QWORD *)v65.i64[0];
            if (v65.i64[1] == v65.i64[0])
            {
              v32 = vdupq_n_s64(v65.u64[1]);
            }
            else
            {
              do
              {
                v31 = *--v29;
                *v29 = 0;
                *((_QWORD *)v27 - 1) = v31;
                v27 -= 8;
              }
              while (v29 != v30);
              v32 = v65;
              v16 = (_QWORD *)v59.i64[1];
              v28 = (char *)v60;
            }
            v65.i64[0] = (uint64_t)v27;
            v65.i64[1] = (uint64_t)v16;
            v59 = v32;
            v39 = v66;
            v66 = v28;
            *(_QWORD *)&v60 = v39;
            v58 = (unsigned __int8 **)v32.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
          }
          else
          {
            v71[0] = 0;
            *(_QWORD *)v65.i64[1] = v11;
            v16 = (_QWORD *)(v15 + 8);
          }
          v65.i64[1] = (uint64_t)v16;
          v40 = v71[0];
          v71[0] = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          if (v68.__r_.__value_.__r.__words[0])
          {
            v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
            operator delete(v68.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v12 != 2)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58, "Run", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 1032);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Unsupported input dimensions", 28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
          }
          v59 = 0u;
          v60 = 0u;
          v58 = (unsigned __int8 **)&unk_1EA92DFA8;
          v61 = 0;
          (*(void (**)(_QWORD, unsigned __int8 ***))(**((_QWORD **)v9 + 3) + 32))(*((_QWORD *)v9 + 3), &v58);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, unsigned __int8 ***))(*(_QWORD *)a1 + 32))(v71, a1, &v58);
          v11 = (char *)v71[0];
          v13 = v65.i64[1];
          if (v65.i64[1] >= (unint64_t)v66)
          {
            v22 = (v65.i64[1] - v65.i64[0]) >> 3;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = (uint64_t)&v66[-v65.i64[0]] >> 2;
            if (v23 <= v22 + 1)
              v23 = v22 + 1;
            if ((unint64_t)&v66[-v65.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            v70 = &v66;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v66, v24);
            else
              v25 = 0;
            v26 = v71[0];
            v33 = &v25[8 * v22];
            v34 = &v25[8 * v24];
            v69 = v34;
            v71[0] = 0;
            *(_QWORD *)v33 = v26;
            v14 = v33 + 8;
            v68.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 8);
            v35 = (_QWORD *)v65.i64[1];
            v36 = (_QWORD *)v65.i64[0];
            if (v65.i64[1] == v65.i64[0])
            {
              v38 = vdupq_n_s64(v65.u64[1]);
            }
            else
            {
              do
              {
                v37 = *--v35;
                *v35 = 0;
                *((_QWORD *)v33 - 1) = v37;
                v33 -= 8;
              }
              while (v35 != v36);
              v38 = v65;
              v14 = (_QWORD *)v68.__r_.__value_.__r.__words[2];
              v34 = v69;
            }
            v65.i64[0] = (uint64_t)v33;
            v65.i64[1] = (uint64_t)v14;
            *(int64x2_t *)&v68.__r_.__value_.__r.__words[1] = v38;
            v41 = v66;
            v66 = v34;
            v69 = v41;
            v68.__r_.__value_.__r.__words[0] = v38.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v68);
          }
          else
          {
            v71[0] = 0;
            *(_QWORD *)v65.i64[1] = v11;
            v14 = (_QWORD *)(v13 + 8);
          }
          v65.i64[1] = (uint64_t)v14;
          v42 = v71[0];
          v71[0] = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v58);
        }
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v43 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v43;
      }
      v44 = v11 + 32;
      v45 = v63;
      if ((unint64_t)v63 >= v64)
      {
        v47 = (v63 - v62) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v64 - (_QWORD)v62;
        if ((uint64_t)(v64 - (_QWORD)v62) >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        *((_QWORD *)&v60 + 1) = &v64;
        v51 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v64, v50);
        v52 = &v51[4 * v47];
        v58 = (unsigned __int8 **)v51;
        v59.i64[0] = (uint64_t)v52;
        *(_QWORD *)&v60 = &v51[4 * v53];
        v54 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        v52[2] = (void *)v68.__r_.__value_.__r.__words[2];
        *(_OWORD *)v52 = v54;
        memset(&v68, 0, sizeof(v68));
        v52[3] = v44;
        v59.i64[1] = (uint64_t)(v52 + 4);
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v62, &v58);
        v55 = v63;
        std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)&v58);
        v63 = v55;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      else
      {
        v46 = v68.__r_.__value_.__r.__words[2];
        *(_OWORD *)v63 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        *((_QWORD *)v45 + 2) = v46;
        *((_QWORD *)v45 + 3) = v44;
        v63 = v45 + 32;
      }
      v9 += 2;
    }
    while (v9 != v8);
  }
  if (HIBYTE(v67))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v62, (uint64_t *)a3, v7, (uint64_t)a5);
  }
  else if ((_BYTE)v67)
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v62, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v62, (uint64_t)a3, v7, a5);
  }
  v58 = (unsigned __int8 **)&v62;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58 = (unsigned __int8 **)&v65;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_1DE503F50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE503F80);
}

void sub_1DE503F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 120);
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1DE504014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DE504594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, a4);
  v6 = *(_QWORD *)(v4 - 104);
  *(_QWORD *)(v4 - 104) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  *(_QWORD *)(v4 - 104) = v4 - 200;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 104));
  *(_QWORD *)(v4 - 200) = v4 - 176;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 200));
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::ESTensorData::Copy@<Q0>(kaldi::quasar::ESTensorData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  void *__dst[2];
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (*((_QWORD *)this + 25))
  {
    v4 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 15) * *((_QWORD *)this + 14) * *((_QWORD *)this + 16);
    v30 = 0u;
    v31 = 0u;
    v6 = v5 * v4;
    *(_OWORD *)__dst = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v32 = 0;
    LODWORD(v31) = 65568;
    kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)__dst, v5 * v4);
    v7 = __dst[0];
    v8 = *((_OWORD *)this + 11);
    v29 = *((_OWORD *)this + 10);
    v30 = v8;
    v9 = *((_QWORD *)this + 24);
    v10 = *((_OWORD *)this + 7);
    v25 = *((_OWORD *)this + 6);
    v26 = v10;
    v11 = *((_OWORD *)this + 9);
    v27 = *((_OWORD *)this + 8);
    v28 = v11;
    v12 = *((_OWORD *)this + 3);
    *(_OWORD *)__dst = *((_OWORD *)this + 2);
    v22 = v12;
    v13 = *((__n128 *)this + 5);
    v23 = *((_OWORD *)this + 4);
    v24 = v13;
    __dst[0] = v7;
    v14 = *((_QWORD *)this + 25);
    *(_QWORD *)&v31 = v9;
    *((_QWORD *)&v31 + 1) = v14;
    memcpy(v7, *((const void **)this + 4), 4 * v6);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v32 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)__dst = 0u;
    LODWORD(v31) = 65568;
  }
  v15 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v15);
  *(_QWORD *)v15 = &off_1EA92DBD8;
  v16 = v30;
  *(_OWORD *)(v15 + 160) = v29;
  *(_OWORD *)(v15 + 176) = v16;
  *(_OWORD *)(v15 + 192) = v31;
  v17 = v26;
  *(_OWORD *)(v15 + 96) = v25;
  *(_OWORD *)(v15 + 112) = v17;
  v18 = v28;
  *(_OWORD *)(v15 + 128) = v27;
  *(_OWORD *)(v15 + 144) = v18;
  v19 = v22;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)__dst;
  *(_OWORD *)(v15 + 48) = v19;
  result = v24;
  *(_OWORD *)(v15 + 64) = v23;
  *(__n128 *)(v15 + 80) = result;
  *(_QWORD *)(v15 + 208) = v32;
  *a2 = v15;
  return result;
}

void sub_1DE5047D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a31)
    free(a31);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::CopyToMatrix(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>((int **)(a1 + 32), a2);
}

{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>((uint64_t *)(a1 + 32), a2);
}

float kaldi::quasar::ESTensorData::CopyToVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>((uint64_t *)(a1 + 32), a2, a3, a4, a5);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 112) * *(_QWORD *)(a1 + 128) * *(_QWORD *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(a2, *(float **)(a1 + 32), (float *)(*(_QWORD *)(a1 + 32) + 4 * v2), v2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 112) * *(_QWORD *)(a1 + 128) * *(_QWORD *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) + 4 * v2, v2);
}

void *kaldi::quasar::ESTensorData::CopyFromImpl(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  char *v3;

  if (!v3)
    __cxa_bad_cast();
  return kaldi::quasar::EspressoNDArray::CopyTo((kaldi::quasar::EspressoNDArray *)(v3 + 32), (kaldi::quasar::ESTensorData *)((char *)this + 32));
}

void *kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  _QWORD v11[34];

  v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 128))(a2);
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "GetWritableDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 197);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    goto LABEL_6;
  }
  if (a4 - a3 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 101);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "srcend - srcstart >= 0");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return memcpy((void *)(*((_QWORD *)this + 4) + 4 * a5), (const void *)(v9 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, int *a2, unsigned int a3, int a4)
{
  int v4;
  float result;
  float *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 108);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "length >= 0");
    goto LABEL_10;
  }
  v4 = *((_DWORD *)this + 48);
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      memcpy((void *)(*((_QWORD *)this + 4) + 4 * a4), a2, 4 * a3);
      return result;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 119);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "unsupported storage type.");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  if (a3)
  {
    v6 = (float *)*((_QWORD *)this + 4);
    v7 = a3;
    do
    {
      v8 = *a2++;
      result = (float)v8;
      *v6++ = (float)v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_1DE504AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

_DWORD *kaldi::quasar::ESTensorData::FlatRangeCopy(_DWORD *this, float *a2, unsigned int a3, int a4)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  float v7;
  _QWORD v8[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 124);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "length >= 0");
    goto LABEL_10;
  }
  v4 = this[48];
  if (v4 == 65568)
    return memcpy((void *)(*((_QWORD *)this + 4) + 4 * a4), a2, 4 * a3);
  if (v4 != 131104)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "FlatRangeCopy", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 135);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "unsupported storage type.");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 4);
    v6 = a3;
    do
    {
      v7 = *a2++;
      *v5++ = (int)v7;
      --v6;
    }
    while (v6);
  }
  return this;
}

void sub_1DE504BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::quasar::ESTensorData::AssignScalar(kaldi::quasar::ESTensorData *this, int a2, int a3)
{
  int v3;
  float result;
  _QWORD v5[34];

  v3 = *((_DWORD *)this + 48);
  if (v3 == 65568)
  {
    result = (float)a2;
    *(float *)(*((_QWORD *)this + 4) + 4 * a3) = (float)a2;
  }
  else
  {
    if (v3 != 131104)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "AssignScalar", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 152);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * a3) = a2;
  }
  return result;
}

uint64_t kaldi::quasar::ESTensorData::AssignScalar(uint64_t this, float a2, int a3)
{
  int v3;
  _QWORD v4[34];

  v3 = *(_DWORD *)(this + 192);
  if (v3 == 131104)
  {
    *(_DWORD *)(*(_QWORD *)(this + 32) + 4 * a3) = (int)a2;
  }
  else
  {
    if (v3 != 65568)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "AssignScalar", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 165);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
    }
    *(float *)(*(_QWORD *)(this + 32) + 4 * a3) = a2;
  }
  return this;
}

float kaldi::quasar::ESTensorData::GetFloatScalar(kaldi::quasar::ESTensorData *this, int a2)
{
  _QWORD v3[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "GetDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 202);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return *(float *)(*((_QWORD *)this + 4) + 4 * a2);
}

uint64_t kaldi::quasar::ESTensorData::GetWritableDataFloat(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetWritableDataFloat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 197);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetDataInt32(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 131104)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "GetDataInt32", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 212);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_INT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetNumDims(kaldi::quasar::ESTensorData *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t kaldi::quasar::ESTensorData::GetDimSize(kaldi::quasar::ESTensorData *this, int a2)
{
  _QWORD v4[11];

  v4[10] = *MEMORY[0x1E0C80C00];
  espresso_buffer_unpack_tensor_shape();
  return v4[a2];
}

void kaldi::quasar::ESTensorData::Reshape()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Reshape", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/espresso-bridge/es-model.cc", 140);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

kaldi::quasar::ESNetworkConfig *kaldi::quasar::ESNetworkConfig::ESNetworkConfig(kaldi::quasar::ESNetworkConfig *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)this = off_1EA92DF68;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(_QWORD *)this = &off_1EA92DD40;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v7;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 8, (const void ***)a2 + 8);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v8;
  }
  v9 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1DE505064(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v4);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1DE5050F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DE505278(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1DE505308(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>(int **a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[34];
  unint64_t v26;
  _BYTE v27[8];
  _QWORD v28[10];

  v28[9] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  espresso_buffer_unpack_tensor_shape();
  v4 = (unint64_t)a1[21];
  if (v4 >= 3)
  {
    v5 = 0;
    while (*(_QWORD *)&v27[8 * v5] == 1)
    {
      if (v26 - 1 == ++v5)
      {
        v5 = v26 - 1;
        break;
      }
    }
    if (v26 <= v5 + 1)
      v6 = v5 + 1;
    else
      v6 = v26;
    v7 = v6 - 1;
    v8 = v5;
    while (1)
    {
      v9 = v8 + 1;
      if (v8 + 1 >= v26)
        break;
      v10 = v28[v8++];
      if (v10 != 1)
      {
        v7 = v9 - 1;
        v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v26)
    {
      v11 = v26 - v7 - 2;
      v12 = &v28[v7 + 1];
      while (1)
      {
        v13 = *v12++;
        if (v13 != 1)
          break;
        if (!--v11)
          goto LABEL_17;
      }
      if (v9 < v26)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "ToMatrix", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 254);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v26)
    {
LABEL_25:
      v16 = (uint64_t *)&v27[8 * v5];
      goto LABEL_26;
    }
    v14 = *(_QWORD *)&v27[8 * v6];
    v15 = (uint64_t *)&v27[8 * v5];
LABEL_22:
    v17 = *v15;
    kaldi::Matrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17)
      return;
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    v15 = (uint64_t *)v27;
    v14 = v28[0];
    goto LABEL_22;
  }
  v16 = (uint64_t *)v27;
LABEL_26:
  v14 = *v16;
  kaldi::Matrix<float>::Resize(a2, 1, *v16, 1, 0);
  v17 = 1;
LABEL_27:
  v20 = 0;
  v21 = *a1;
  do
  {
    if (v14)
    {
      v22 = 0;
      v23 = v14;
      do
      {
        v24 = *v21;
        *(_DWORD *)kaldi::MatrixBase<float>::operator()(a2, v20, v22, v18, v19) = v24;
        ++v21;
        ++v22;
        --v23;
      }
      while (v23);
    }
    ++v20;
  }
  while (v20 != v17);
}

void sub_1DE505574(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[34];
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[10];

  v25[9] = *MEMORY[0x1E0C80C00];
  v23 = 0;
  espresso_buffer_unpack_tensor_shape();
  v4 = a1[21];
  if (v4 < 3)
  {
    if (v4 != 1)
    {
      v15 = v24;
      v14 = v25[0];
      goto LABEL_25;
    }
    v14 = v24;
  }
  else
  {
    v5 = 0;
    while (v25[v5 - 1] == 1)
    {
      if (v23 - 1 == ++v5)
      {
        v5 = v23 - 1;
        break;
      }
    }
    if (v23 <= v5 + 1)
      v6 = v5 + 1;
    else
      v6 = v23;
    v7 = v6 - 1;
    v8 = v5;
    while (1)
    {
      v9 = v8 + 1;
      if (v8 + 1 >= v23)
        break;
      v10 = v25[v8++];
      if (v10 != 1)
      {
        v7 = v9 - 1;
        v6 = v9;
        break;
      }
    }
    if (v7 + 2 >= v23)
    {
LABEL_17:
      if (v9 < v23)
      {
        v14 = v25[v6 - 1];
        v15 = v25[v5 - 1];
        goto LABEL_25;
      }
    }
    else
    {
      v11 = v23 - v7 - 2;
      v12 = &v25[v7 + 1];
      while (1)
      {
        v13 = *v12++;
        if (v13 != 1)
          break;
        if (!--v11)
          goto LABEL_17;
      }
      if (v9 < v23)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "ToMatrix", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 254);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
    }
    v14 = v25[v5 - 1];
  }
  v15 = 1;
LABEL_25:
  kaldi::CuMatrix<float>::Resize(a2, v15, v14, 1u, 0);
  if (v15)
  {
    v17 = 0;
    v18 = *a1;
    do
    {
      if (v14)
      {
        if (v17 >= *(unsigned int *)(a2 + 20))
LABEL_35:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        v19 = 0;
        v20 = 4 * *(unsigned int *)(a2 + 16);
        v21 = v14;
        do
        {
          if (v20 == v19)
            goto LABEL_35;
          *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * (int)v17 * *(_DWORD *)(a2 + 24) + v19) = *(_DWORD *)(v18 + v19);
          v19 += 4;
          --v21;
        }
        while (v21);
        v18 += v19;
      }
      ++v17;
    }
    while (v17 != v15);
  }
}

void sub_1DE5057DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  float result;
  uint64_t v10;
  uint64_t v11;

  v6 = a1[11] * a1[10] * a1[12] * a1[13];
  v7 = *a1;
  kaldi::CuVector<float>::Resize(a2, v6, 1u, a4, a5);
  if (v6)
  {
    v10 = 0;
    v11 = *(unsigned int *)(a2 + 16);
    do
    {
      if (v11 == v10)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v8);
      result = *(float *)(v7 + 4 * v10);
      *(float *)(*(_QWORD *)(a2 + 8) + 4 * v10++) = result;
    }
    while (v6 != v10);
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(_QWORD *a1, float *a2, float *a3, unint64_t a4)
{
  float *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  float v16;
  char *v17;
  char *v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  char *v23;
  char *v24;
  float v25;
  char *v26;
  char *v27;
  float v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_DWORD *)v27 = (int)v28;
          v27 += 4;
          v26 += 4;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 4 * v19;
        do
        {
          v22 = *v6++;
          *(_DWORD *)result = (int)v22;
          result += 4;
          v21 -= 4;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_DWORD *)v24 = (int)v25;
          v24 += 4;
          v23 += 4;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_DWORD *)v15 = (int)v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void *kaldi::quasar::EspressoNDArray::CopyTo(kaldi::quasar::EspressoNDArray *this, kaldi::quasar::EspressoNDArray *a2)
{
  uint64_t v2;
  _QWORD v6[55];

  v6[54] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11) * *((_QWORD *)this + 10) * *((_QWORD *)this + 12) * *((_QWORD *)this + 13);
  if (v2 != *((_QWORD *)a2 + 11) * *((_QWORD *)a2 + 10) * *((_QWORD *)a2 + 12) * *((_QWORD *)a2 + 13))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "CopyTo", "../engine/common/libquasar/libkaldi/src/espresso-bridge/espresso-ndarray.h", 96);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "total_elements == dst.Volume()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  espresso_buffer_unpack_tensor_shape();
  espresso_buffer_unpack_tensor_shape();
  return memmove(*(void **)a2, *(const void **)this, 4 * v2);
}

void sub_1DE505B8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE505CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1DE505D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  int *v6;
  float *v7;
  uint64_t v8;
  int v9;

  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = *(float **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1)
      v8 = 1;
    else
      v8 = a2[1] - *a2;
    do
    {
      v9 = *v6++;
      *v7++ = (float)v9;
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) != 0)
    *((_QWORD *)a1 + 21) = 2;
  else
    *((_QWORD *)a1 + 21) = 1;
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  int *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;

  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = *(_DWORD **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1)
      v8 = 1;
    else
      v8 = a2[1] - *a2;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) != 0)
    *((_QWORD *)a1 + 21) = 2;
  else
    *((_QWORD *)a1 + 21) = 1;
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  const char *v7;
  unsigned int v8;
  char *v9;
  size_t v10;

  v4 = *(int *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, (int)v4 * (uint64_t)v5);
  *((_QWORD *)a1 + 21) = 2;
  result = espresso_buffer_pack_tensor_shape();
  if (v5 >= 1)
  {
    v8 = 0;
    v9 = *(char **)a1;
    v10 = 4 * v4;
    do
    {
      if (*(_DWORD *)(a2 + 20) <= v8)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v7);
      result = (uint64_t)memcpy(v9, (const void *)(*(_QWORD *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v8++)), v10);
      v9 += v10;
    }
    while (v5 != v8);
  }
  return result;
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;
  unsigned int v9;
  char *v10;
  size_t v11;
  void *__src[6];

  __src[5] = *(void **)MEMORY[0x1E0C80C00];
  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, v5 * v4);
  *((_QWORD *)a1 + 21) = 2;
  v6 = v5;
  __src[3] = (void *)v4;
  __src[4] = (void *)v5;
  result = espresso_buffer_pack_tensor_shape();
  if (v4 >= 1)
  {
    v9 = 0;
    v10 = *(char **)a1;
    v11 = 4 * v6;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v9, v8, (uint64_t *)__src);
      result = (uint64_t)memcpy(v10, __src[0], v11);
      ++v9;
      v10 += v11;
    }
    while (v4 != v9);
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE5061F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::ESTensorData::ESTensorData(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;

  v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v4 = &off_1EA92DBD8;
  v4[25] = 0;
  v4[26] = 0;
  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = 1;
    do
    {
      v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = 1;
  }
  kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)(v4 + 4), v8);
  espresso_buffer_pack_tensor_shape();
  a1[25] = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  return a1;
}

void sub_1DE5062B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v3)
    free(v3);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE506344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  const void **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = (const void **)(v2 + 2);
    result = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result)
      return result;
    v6 = *((unsigned __int8 *)v2 + 39);
    if ((v6 & 0x80u) == 0)
      v7 = *((unsigned __int8 *)v2 + 39);
    else
      v7 = v2[3];
    v8 = *(unsigned __int8 *)(result + 39);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(result + 24);
    if (v7 != v8)
      return 0;
    v12 = *(unsigned __int8 **)(result + 16);
    v10 = (unsigned __int8 *)(result + 16);
    v11 = v12;
    if (v9 >= 0)
      v13 = v10;
    else
      v13 = v11;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*v4, v13, v2[3]))
        return 0;
    }
    else if (*((_BYTE *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v13)
      {
        v4 = (const void **)((char *)v4 + 1);
        ++v13;
        if (!--v6)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 1;
  }
}

void sub_1DE506504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DE5065B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,espresso_buffer_t const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,espresso_buffer_t const*>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,espresso_buffer_t const*>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *kaldi::quasar::EspressoNDArray::EspressoNDArray(uint64_t *a1, __int128 *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  void *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v4 = 0;
  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v6;
  *(_OWORD *)a1 = v5;
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[6];
  *((_OWORD *)a1 + 5) = a2[5];
  *((_OWORD *)a1 + 6) = v9;
  *((_OWORD *)a1 + 3) = v7;
  *((_OWORD *)a1 + 4) = v8;
  v10 = a2[7];
  v11 = a2[8];
  v12 = a2[9];
  a1[20] = *((_QWORD *)a2 + 20);
  *((_OWORD *)a1 + 8) = v11;
  *((_OWORD *)a1 + 9) = v12;
  *((_OWORD *)a1 + 7) = v10;
  a1[21] = 0;
  if (a3)
    v4 = *a1;
  a1[22] = v4;
  v13 = *((_DWORD *)a1 + 40);
  if (v13 != 65568)
  {
    if (v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v18, *((_DWORD *)a1 + 40));
      v16 = std::string::insert(&v18, 0, "Unsupported storage type ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v20 = v16->__r_.__value_.__r.__words[2];
      v19 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x1DF0EC9E4](exception, &v19);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *((_DWORD *)a1 + 40) = 65568;
  }
  espresso_buffer_unpack_tensor_shape();
  return a1;
}

void sub_1DE5069D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;
  void *v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      v25 = *(void **)(v21 + 176);
      *(_QWORD *)(v21 + 176) = 0;
      if (v25)
        free(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *kaldi::quasar::EspressoNDArray::InitBufferMemory(kaldi::quasar::EspressoNDArray *this, size_t count)
{
  void *result;
  void *v4;

  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 40) = 65568;
  result = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
  v4 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = result;
  if (v4)
  {
    free(v4);
    result = (void *)*((_QWORD *)this + 22);
  }
  *(_QWORD *)this = result;
  return result;
}

_QWORD *kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(_QWORD *this)
{
  *this = off_1EA92DEB0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(void **this)
{
  *this = off_1EA92DEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *kaldi::quasar::ComputeEngineBufferItf::GetShapeString@<X0>(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 144))(this);
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>(a2, "[]");
  v5 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[ ", 2);
  (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)this + 152))(this, 0);
  std::ostream::operator<<();
  if (v5 >= 2)
  {
    v6 = 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)this + 152))(this, v6);
      std::ostream::operator<<();
      v6 = (v6 + 1);
    }
    while (v5 != (_DWORD)v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ]", 2);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v10);
}

void sub_1DE506CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::ComputeEngineBufferItf::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void kaldi::quasar::ComputeEngineItf::CreateConcatMove(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *__p;
  char *v24;
  char *v25;

  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7 == 1)
  {
    v8 = *v6;
    *v6 = 0;
    *a4 = v8;
  }
  else if (v7)
  {
    __p = 0;
    v24 = 0;
    v25 = 0;
    std::vector<kaldi::quasar::ComputeEngineBufferItf *>::reserve(&__p, v7);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      v13 = v24;
      do
      {
        v14 = *v11;
        if (v13 >= v25)
        {
          v15 = (v13 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = (v25 - (_BYTE *)__p) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v25, v17);
          else
            v18 = 0;
          v19 = &v18[8 * v15];
          *(_QWORD *)v19 = v14;
          v13 = v19 + 8;
          v21 = (char *)__p;
          v20 = v24;
          if (v24 != __p)
          {
            do
            {
              v22 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            v20 = (char *)__p;
          }
          __p = v19;
          v24 = v13;
          v25 = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v13 = v14;
          v13 += 8;
        }
        v24 = v13;
        ++v11;
      }
      while (v11 != v12);
    }
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 88))(a1, &__p, a3);
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1DE506E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::ComputeEngineBufferItf *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t kaldi::quasar::ComputeEngineItf::CreateSplitMove@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  _QWORD *v20;

  result = *a2;
  if (!*a2 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result), !(_DWORD)result))
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 152))(*a2, 0);
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, *a2);
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = a3 + 2;
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), 1uLL);
  v9 = &v7[v8];
  v10 = *a2;
  *a2 = 0;
  *v7 = v10;
  v11 = v7 + 1;
  v13 = (_QWORD *)*a3;
  v12 = (_QWORD *)a3[1];
  if (v12 == (_QWORD *)*a3)
  {
    v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      v14 = *--v12;
      *v12 = 0;
      *--v7 = v14;
    }
    while (v12 != v13);
    v15 = *(int64x2_t *)a3;
  }
  *a3 = v7;
  a3[1] = v11;
  v18 = v15;
  v16 = a3[2];
  a3[2] = v9;
  v19 = v16;
  v17 = v15.i64[0];
  result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v17);
  a3[1] = v11;
  return result;
}

void sub_1DE507044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineItf::RunBatch(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  void **p_data;
  unint64_t v13;
  __int128 v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  void **v25;
  void **v26;
  void **v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t *v30;
  uint64_t *i;
  std::string __p;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  unint64_t *v41;
  std::string *p_p;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateConcatMove(a1, (uint64_t **)v9 + 3, 0, &p_p);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      p_data = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      v33 = p_data;
      v13 = v35;
      if (v35 >= v36)
      {
        v17 = (uint64_t)(v35 - v34) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 4 > v18)
          v18 = v19 >> 4;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v41 = &v36;
        v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v36, v20);
        v22 = &v21[4 * v17];
        v37 = v21;
        v38 = v22;
        v40 = &v21[4 * v23];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = v24;
        memset(&__p, 0, sizeof(__p));
        v25 = v33;
        v33 = 0;
        v22[3] = (uint64_t)v25;
        v39 = (char *)(v22 + 4);
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v34, &v37);
        v16 = v35;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v37);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v35 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        memset(&__p, 0, sizeof(__p));
        v15 = v33;
        v33 = 0;
        *(_QWORD *)(v13 + 24) = v15;
        v16 = v13 + 32;
      }
      v35 = v16;
      v26 = v33;
      v33 = 0;
      if (v26)
        (*((void (**)(void **))*v26 + 1))(v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v27 = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      if (v27)
        (*((void (**)(void **))*v27 + 1))(v27);
      v9 += 3;
    }
    while (v9 != v10);
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a1 + 112))(a1, &v34, a3, a4, &v37);
  v28 = *a5;
  v29 = a5[1];
  while (v29 != v28)
  {
    v29 -= 24;
    __p.__r_.__value_.__r.__words[0] = v29;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  a5[1] = v28;
  v30 = v37;
  for (i = v38; v30 != i; ++v30)
  {
    kaldi::quasar::ComputeEngineItf::CreateSplitMove(a1, v30, &__p);
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](a5, (uint64_t)&__p);
    p_p = &__p;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v37 = &v34;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_1DE5072E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  __p = &a20;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1DE5074C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(kaldi::quasar::ComputeEngineConfigItf *this)
{
  *(_QWORD *)this = off_1EA92DF68;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

_QWORD *kaldi::quasar::ComputeEngineConfigItf::CreateComputeEngineAllowingFallback@<X0>(kaldi::quasar::ComputeEngineConfigItf *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)this + 24))(&v4);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t kaldi::quasar::ComputeEngineConfigItf::ComputeEngineUpgradeLikelyExists(kaldi::quasar::ComputeEngineConfigItf *this)
{
  return 0;
}

void kaldi::quasar::ComputeEngineBufferItf::CopyFromImpl(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CopyFromImpl", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 42);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "CopyFromImpl not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineBufferItf::GetWritableDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetWritableDataFloat", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 53);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetWritableDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetDataFloat", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 54);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataInt32(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetDataInt32", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 55);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataInt32 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float non_variance_term_negative_log_likelihood_asm(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t i;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x2_t v104;
  uint64_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float result;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = a5 - 24;
  if (v7 >= 0)
  {
    v8 = *a2;
    a2 += 6;
    v9 = v8;
    v10 = a2[-5];
    v11 = *a1;
    a1 += 6;
    v12 = v11;
    v13 = *a3;
    a3 += 6;
    v14 = vrecpeq_f32(v9);
    v15 = vrecpeq_f32(v10);
    v16 = a2[-4];
    v17 = a2[-3];
    v18 = a2[-2];
    v19 = a2[-1];
    v20 = a1[-2];
    v21 = a1[-1];
    v22 = a3[-2];
    v23 = a3[-1];
    v24 = vsubq_f32(v13, v12);
    v25 = vsubq_f32(a3[-5], a1[-5]);
    v26 = *a4;
    a4 += 6;
    v27 = vrecpeq_f32(v16);
    v28 = vrecpeq_f32(v17);
    v29 = vmulq_f32(v14, vrecpsq_f32(v9, v14));
    v30 = vmulq_f32(v15, vrecpsq_f32(v10, v15));
    v31 = vrecpsq_f32(v16, v27);
    v32 = vrecpsq_f32(v17, v28);
    v33 = vrecpsq_f32(v9, v29);
    v34 = vrecpsq_f32(v10, v30);
    v35 = vsubq_f32(a3[-4], a1[-4]);
    v36 = vsubq_f32(a3[-3], a1[-3]);
    v37 = a4[-4];
    v38 = a4[-3];
    v39 = vmulq_f32(vmulq_f32(v24, v24), v26);
    v40 = vmulq_f32(vmulq_f32(v25, v25), a4[-5]);
    for (v7 -= 24; v7 >= 0; v7 -= 24)
    {
      v41 = *a2;
      a2 += 6;
      v42 = v41;
      v43 = a2[-5];
      v44 = vrecpeq_f32(v18);
      v45 = vrecpeq_f32(v19);
      v46 = *a1;
      a1 += 6;
      v47 = v46;
      v48 = vmulq_f32(v27, v31);
      v49 = vmulq_f32(v28, v32);
      v50 = vsubq_f32(v22, v20);
      v51 = vsubq_f32(v23, v21);
      v52 = a4[-2];
      v53 = a4[-1];
      v54 = vrecpsq_f32(v16, v48);
      v55 = vrecpsq_f32(v17, v49);
      v16 = a2[-4];
      v17 = a2[-3];
      v56 = vmlaq_f32(v5, v39, vmulq_f32(v29, v33));
      v57 = vmlaq_f32(v6, v40, vmulq_f32(v30, v34));
      v58 = *a3;
      a3 += 6;
      v59 = vrecpeq_f32(v42);
      v60 = vrecpeq_f32(v43);
      v61 = vmulq_f32(v44, vrecpsq_f32(v18, v44));
      v62 = vmulq_f32(v45, vrecpsq_f32(v19, v45));
      v63 = vsubq_f32(v58, v47);
      v64 = vsubq_f32(a3[-5], a1[-5]);
      v65 = *a4;
      a4 += 6;
      v66 = vrecpsq_f32(v18, v61);
      v67 = vrecpsq_f32(v19, v62);
      v18 = a2[-2];
      v19 = a2[-1];
      v68 = vmlaq_f32(v56, vmulq_f32(vmulq_f32(v35, v35), v37), vmulq_f32(v48, v54));
      v69 = vmlaq_f32(v57, vmulq_f32(vmulq_f32(v36, v36), v38), vmulq_f32(v49, v55));
      v70 = vmulq_f32(vmulq_f32(v50, v50), v52);
      v71 = vmulq_f32(vmulq_f32(v51, v51), v53);
      v20 = a1[-2];
      v21 = a1[-1];
      v27 = vrecpeq_f32(v16);
      v28 = vrecpeq_f32(v17);
      v29 = vmulq_f32(v59, vrecpsq_f32(v42, v59));
      v30 = vmulq_f32(v60, vrecpsq_f32(v43, v60));
      v35 = vsubq_f32(a3[-4], a1[-4]);
      v36 = vsubq_f32(a3[-3], a1[-3]);
      v37 = a4[-4];
      v38 = a4[-3];
      v31 = vrecpsq_f32(v16, v27);
      v32 = vrecpsq_f32(v17, v28);
      v33 = vrecpsq_f32(v42, v29);
      v34 = vrecpsq_f32(v43, v30);
      v5 = vmlaq_f32(v68, v70, vmulq_f32(v61, v66));
      v6 = vmlaq_f32(v69, v71, vmulq_f32(v62, v67));
      v22 = a3[-2];
      v23 = a3[-1];
      v39 = vmulq_f32(vmulq_f32(v63, v63), v65);
      v40 = vmulq_f32(vmulq_f32(v64, v64), a4[-5]);
    }
    v72 = vrecpeq_f32(v18);
    v73 = vrecpeq_f32(v19);
    v74 = vmulq_f32(v27, v31);
    v75 = vmulq_f32(v28, v32);
    v76 = vsubq_f32(v22, v20);
    v77 = vsubq_f32(v23, v21);
    v78 = vmulq_f32(v72, vrecpsq_f32(v18, v72));
    v79 = vmulq_f32(v73, vrecpsq_f32(v19, v73));
    v5 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v5, v39, vmulq_f32(v29, v33)), vmulq_f32(vmulq_f32(v35, v35), v37), vmulq_f32(v74, vrecpsq_f32(v16, v74))), vmulq_f32(vmulq_f32(v76, v76), a4[-2]), vmulq_f32(v78, vrecpsq_f32(v18, v78)));
    v6 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v6, v40, vmulq_f32(v30, v34)), vmulq_f32(vmulq_f32(v36, v36), v38), vmulq_f32(v75, vrecpsq_f32(v17, v75))), vmulq_f32(vmulq_f32(v77, v77), a4[-1]), vmulq_f32(v79, vrecpsq_f32(v19, v79)));
  }
  for (i = v7 + 16; i >= 0; i -= 8)
  {
    v81 = *a2;
    a2 += 2;
    v82 = v81;
    v83 = a2[-1];
    v84 = *a1;
    a1 += 2;
    v85 = v84;
    v86 = *a3;
    a3 += 2;
    v87 = vrecpeq_f32(v82);
    v88 = vrecpeq_f32(v83);
    v89 = vsubq_f32(v86, v85);
    v90 = vsubq_f32(a3[-1], a1[-1]);
    v91 = *a4;
    a4 += 2;
    v92 = vmulq_f32(v87, vrecpsq_f32(v82, v87));
    v93 = vmulq_f32(v88, vrecpsq_f32(v83, v88));
    v5 = vmlaq_f32(v5, vmulq_f32(vmulq_f32(v89, v89), v91), vmulq_f32(v92, vrecpsq_f32(v82, v92)));
    v6 = vmlaq_f32(v6, vmulq_f32(vmulq_f32(v90, v90), a4[-1]), vmulq_f32(v93, vrecpsq_f32(v83, v93)));
  }
  v94 = vaddq_f32(v5, v6);
  v95 = i + 4;
  if (v95 >= 0)
  {
    v96 = *a4++;
    v97 = v96;
    v98 = *a2++;
    v99 = v98;
    v100 = *a1++;
    v101 = v100;
    v102 = *a3++;
    v95 -= 4;
    v103 = vsubq_f32(v102, v101);
    v94 = vmlaq_f32(v94, vmulq_f32(v103, v103), vdivq_f32(v97, v99));
  }
  v104 = (float32x2_t)vpaddq_f32(v94, v94).u64[0];
  v105 = v95 + 2;
  if (v105 >= 0)
  {
    v106 = *(float32x2_t *)a4->f32;
    a4 = (float32x4_t *)((char *)a4 + 8);
    v107 = v106;
    v108 = *(float32x2_t *)a2->f32;
    a2 = (float32x4_t *)((char *)a2 + 8);
    v109 = v108;
    v110 = *(float32x2_t *)a1->f32;
    a1 = (float32x4_t *)((char *)a1 + 8);
    v111 = v110;
    v112 = *(float32x2_t *)a3->f32;
    a3 = (float32x4_t *)((char *)a3 + 8);
    v105 -= 2;
    v113 = vsub_f32(v112, v111);
    v104 = vmla_f32(v104, vmul_f32(v113, v113), vdiv_f32(v107, v109));
  }
  result = vaddv_f32(v104);
  if (v105 + 1 >= 0)
    return vmlas_n_f32(result, (float)(a3->f32[0] - a1->f32[0]) * (float)(a3->f32[0] - a1->f32[0]), a4->f32[0] / a2->f32[0]);
  return result;
}

uint64_t InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t *v6;
  int *v7;
  int v8;
  int v9;
  uint64_t *v10;
  int *v11;
  int *v12;
  _DWORD *v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int *v23;
  int v24;
  uint64_t *v25;
  unsigned __int8 v26;
  uint64_t *v27;
  _BOOL4 v28;
  uint64_t *v29;
  unsigned __int8 v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned __int8 v33;
  uint64_t *v34;
  unsigned __int8 v36[8];
  uint64_t *v37;
  void *v38[2];
  char v39;
  unsigned __int8 v40[8];
  unint64_t v41;
  unsigned __int8 v42[8];
  uint64_t *v43;
  void *__p;
  int *v45;
  char *v46;
  void *v47;
  _BYTE *v48;
  char v49[8];
  uint64_t *v50;
  char v51[8];
  uint64_t *v52;
  int *v53;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, (uint64_t)a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  *(_QWORD *)a1 = off_1EA923750;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v49, (uint64_t)a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  v4 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v49[0];
  v49[0] = v4;
  v5 = *(uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v50;
  v50 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v6, &v47);
  v7 = (int *)v47;
  if (v47 == v48)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v7++;
      v8 += v9;
    }
    while (v7 != (int *)v48);
  }
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "loop");
  LODWORD(__p) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v10, (int *)&__p);
  if (v8 != (_DWORD)__p)
    __assert_rtn("SoundStormIOProcessor", "SoundStormIOProcessor.cpp", 22, "std::reduce(inference_schedule.begin(), inference_schedule.end()) == model_parameters[\"loop\"].get<int>()");
  v11 = (int *)operator new(4uLL);
  *v11 = 0;
  v12 = v11 + 1;
  v45 = v11 + 1;
  v46 = (char *)(v11 + 1);
  __p = v11;
  v13 = v47;
  if (v48 - (_BYTE *)v47 != 4)
  {
    v14 = 0;
    do
    {
      v15 = (int *)__p;
      v16 = v13[v14] + *((_DWORD *)__p + v14);
      if (v12 >= (int *)v46)
      {
        v17 = ((char *)v12 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v46, v20);
          v15 = (int *)__p;
          v12 = v45;
        }
        else
        {
          v21 = 0;
        }
        v22 = (int *)&v21[4 * v17];
        *v22 = v16;
        v23 = v22 + 1;
        while (v12 != v15)
        {
          v24 = *--v12;
          *--v22 = v24;
        }
        __p = v22;
        v45 = v23;
        v46 = &v21[4 * v20];
        if (v15)
          operator delete(v15);
        v12 = v23;
      }
      else
      {
        *v12++ = v16;
      }
      v45 = v12;
      ++v14;
      v13 = v47;
    }
    while (((v48 - (_BYTE *)v47) >> 2) - 1 > v14);
    v11 = (int *)__p;
  }
  v43 = 0;
  v42[0] = 2;
  v38[0] = v11;
  v53 = v12;
  v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((int **)v38, &v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  v26 = *(_BYTE *)v25;
  *(_BYTE *)v25 = v42[0];
  v42[0] = v26;
  v27 = (uint64_t *)v25[1];
  v25[1] = (uint64_t)v43;
  v43 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v43, v42[0]);
  std::string::basic_string[abi:ne180100]<0>(v38, "prompt_attention");
  LOBYTE(v53) = 0;
  v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>((char *)a2, (const void **)v38, (unsigned __int8 *)&v53);
  v40[0] = 4;
  v41 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "prompt_attention");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  v30 = *(_BYTE *)v29;
  *(_BYTE *)v29 = v40[0];
  v40[0] = v30;
  v31 = (uint64_t *)v29[1];
  v29[1] = v41;
  v41 = (unint64_t)v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41, v40[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  std::string::basic_string[abi:ne180100]<0>(v38, "num_vqs");
  LODWORD(v53) = 8;
  v36[0] = 5;
  v37 = (uint64_t *)(int)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>((char *)a2, (const void **)v38, (unsigned int *)&v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  v33 = *(_BYTE *)v32;
  *(_BYTE *)v32 = v36[0];
  v36[0] = v33;
  v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v37;
  v37 = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (__p)
  {
    v45 = (int *)__p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return a1;
}

void sub_1DE508160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t **v25;
  uint64_t **v26;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v26);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v25);
  _Unwind_Resume(a1);
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use operator[] with a string argument with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)__p, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, &v13);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v7 + 7;
}

void sub_1DE508388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>@<D0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>,0>(a1, (uint64_t)a2);
}

void sub_1DE50842C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(char *a1, const void **a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    v5 = *a3;
  }
  else
  {
    v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    v12.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v6, &v12);
    v5 = v12.__r_.__value_.__s.__data_[0];
  }
  return v5 != 0;
}

void sub_1DE50855C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<int,0>(char *a1, const void **a2, unsigned int *a3)
{
  unsigned __int8 *v6;
  nlohmann::detail::exception *exception;
  char *v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v8 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v8);
    v9 = std::string::insert(&v11, 0, "cannot use value() with ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13 = v9->__r_.__value_.__r.__words[2];
    v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v12, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v11);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v12, (unsigned __int8 **)&v11))
  {
    return *a3;
  }
  v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v12);
  LODWORD(v11.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v11);
  return LODWORD(v11.__r_.__value_.__l.__data_);
}

void sub_1DE5086C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_1EA923750;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

void InferenceEngine::SoundStormIOProcessor::build_vq_target(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  __int128 v19;
  float v20;
  void *v21[2];
  char v22;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(v21, "pred_semantic");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v21);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, &__p.__r_.__value_.__l.__data_);
  v9 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "vq_tokens");
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a4, (uint64_t *)v10 + 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = (unsigned __int8 *)(a1 + 24);
    v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, (int *)&v19);
    v13 = (int)v19;
    v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v11, "vq_mask_id");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)&v19);
    v20 = (float)(int)v19;
    std::vector<float>::vector(v21, v13, &v20);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v21);
    if (v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "vq_tokens");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v19);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v19);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a4, 0);
    v21[0] = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a4, &__p);
  v21[0] = &__p;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v21);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v18 + 5, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE5089BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1DE508A40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE508A38);
}

void InferenceEngine::DataTensor::build_from_2d_array<float>(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  void *v11;
  void *v12;
  _QWORD *v13;

  v5 = *a1;
  v4 = a1[1];
  v7 = **a1;
  v6 = (*a1)[1];
  v8 = operator new(0x10uLL);
  v12 = v8 + 2;
  v13 = v8 + 2;
  *v8 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  v8[1] = (v6 - v7) >> 2;
  v11 = v8;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v10 < 0)
    operator delete(__p[0]);
  InferenceEngine::VectorOps::flatten_2d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(_QWORD *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
}

void sub_1DE508B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void InferenceEngine::SoundStormIOProcessor::build_q_token_mask(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _DWORD *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  kaldi::quasar::Vocab *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int128 v20;
  void *v21[2];
  char v22;
  std::string v23;
  void *__p;
  _BYTE *v25;

  *a4 = 0;
  a4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v23, "pred_semantic");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)&__p);
  v9 = *((_QWORD *)__p + 1);
  v25 = __p;
  operator delete(__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  v12 = __p;
  v11 = v25;
  if (v25 != __p)
  {
    v13 = 0;
    do
    {
      if (v12[v13] == a3)
      {
        LODWORD(v20) = 0;
        std::vector<float>::vector(v21, v9, &v20);
        std::vector<std::vector<float>>::vector(&v23, 1uLL, (uint64_t)v21);
        if (v21[0])
        {
          v21[1] = v21[0];
          operator delete(v21[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v21, "q_token_mask");
        InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v23, &v20);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v20);
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v22 < 0)
          operator delete(v21[0]);
        v21[0] = &v23;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
        v12 = __p;
        v11 = v25;
      }
      ++v13;
    }
    while (v13 < (v11 - (_BYTE *)v12) >> 2);
  }
  v17 = *a4;
  if (!*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "q_token_mask");
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
    if (!v18)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a4, (uint64_t *)v18 + 5);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v17 = *a4;
  }
  kaldi::quasar::Vocab::OOvWord(v17, &v23);
  v21[0] = &v23;
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (__int128 **)v21);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v19 + 5, (uint64_t *)a4);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1DE508DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void InferenceEngine::SoundStormIOProcessor::build_layer_q(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  kaldi::quasar::Vocab *v15;
  char *v16;
  char *v17;
  float *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  void *__p;
  void *v24;
  float *v25;
  std::string v26;
  __int128 v27;
  char *v28;
  char *v29;

  *a4 = 0;
  a4[1] = 0;
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v7, &v28);
  if ((unint64_t)(v29 - v28) >= 5)
  {
    v8 = 0;
    v9 = (v29 - v28) >> 2;
    if (v9 <= 2)
      v9 = 2;
    v10 = v9 - 1;
    while (*(_DWORD *)&v28[4 * v8] > a3 || *(_DWORD *)&v28[4 * v8 + 4] <= a3)
    {
      if (v10 == ++v8)
        goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(&v26, "layer_q");
    v11 = (float *)operator new(4uLL);
    __p = v11;
    *v11 = (float)(v8 + 1) + -1.0;
    v24 = v11 + 1;
    v25 = v11 + 1;
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v27);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v27);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
LABEL_18:
  v15 = (kaldi::quasar::Vocab *)*a4;
  if (!*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "layer_q");
    v17 = v28;
    v16 = v29;
    v18 = (float *)operator new(4uLL);
    __p = v18;
    *v18 = (float)(unint64_t)((v16 - v17) >> 2) + -1.0;
    v24 = v18 + 1;
    v25 = v18 + 1;
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&__p, &v27);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v27);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v15 = (kaldi::quasar::Vocab *)*a4;
  }
  kaldi::quasar::Vocab::OOvWord(v15, &v26);
  __p = &v26;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&v26, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v22 + 5, a4);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1DE5090F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::build_from_1d_array<float>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  void *__p;
  char v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  v5 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = operator new(8uLL);
  v9 = v6;
  *v6 = (v4 - (uint64_t)v5) >> 2;
  v10 = v6 + 1;
  v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<float>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0)
    operator delete(__p);
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(_QWORD *)(*a2 + 80));
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_1DE509210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::SoundStormIOProcessor::build_k_tensor(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  float v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  int v15;
  std::__shared_weak_count *v16;
  InferenceEngine::DataTensor *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  int v22;
  void *v23;
  float v24;
  double v25;
  float v26;
  unint64_t v27;
  float *v28;
  float v29;
  unsigned __int8 *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  float *v35;
  InferenceEngine::DataTensor *v36;
  std::__shared_weak_count *v37;
  std::string v38;
  void *__p;
  void *v40;

  std::string::basic_string[abi:ne180100]<0>(&v38, "layer_q");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v8 + 5), &__p);
  v9 = *(float *)__p;
  v40 = __p;
  operator delete(__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "pred_data");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v10 + 5), 0, (char **)&__p);
  v11 = *((_QWORD *)__p + 1);
  v40 = __p;
  operator delete(__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v12 = (unsigned __int8 *)(a1 + 24);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v13, &__p);
  std::string::basic_string[abi:ne180100]<0>(&v38, "q_token_mask");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v38);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (int)v9;
  v17 = (InferenceEngine::DataTensor *)*((_QWORD *)v14 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v36 = v17;
  v37 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v20 = *((_DWORD *)__p + v15);
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v12, "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v21, &v38);
  v22 = a3 - v20;
  v23 = (void *)v38.__r_.__value_.__r.__words[0];
  v24 = ((float)v22 + 1.0) / (float)*(int *)(v38.__r_.__value_.__r.__words[0] + 4 * v15);
  v25 = cos(v24 * 3.14159265 * 0.5);
  v38.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  operator delete(v23);
  v26 = InferenceEngine::DataTensor::accumulate_sum(v17);
  InferenceEngine::DataTensor::get_shape(v17, 0, &v38.__r_.__value_.__l.__data_);
  v27 = *(_QWORD *)v38.__r_.__value_.__l.__data_;
  v38.__r_.__value_.__l.__size_ = v38.__r_.__value_.__r.__words[0];
  operator delete(v38.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v38, "k_tensor");
  v28 = (float *)operator new(4uLL);
  v29 = v25;
  v33 = v28;
  *v28 = (float)(int)(v11 - (int)v26 / v27 - (int)(float)((float)v11 * v29));
  v34 = v28 + 1;
  v35 = v28 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v33, a4);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a4, &v38);
  v33 = &v38;
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v38, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v30 + 5, a4);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v16)
  {
    v31 = (unint64_t *)&v16->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

void sub_1DE50958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21)
{
  uint64_t v21;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void *InferenceEngine::DataTensor::get_1d_array<float>@<X0>(InferenceEngine::DataTensor *this@<X0>, void **a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  const void *v10;
  int size;

  v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702)
        goto LABEL_20;
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]))
      InferenceEngine::DataTensor::get_1d_array<float>();
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910)
      goto LABEL_21;
    if (**(_DWORD **)v4 == 909209702)
      goto LABEL_22;
    v6 = *((_QWORD *)this + 5);
  }
  if (v6 != 5)
    goto LABEL_20;
  v4 = *(char **)v4;
LABEL_11:
  v7 = *(_DWORD *)v4;
  v8 = v4[4];
  if (v7 != 863268457 || v8 != 50)
LABEL_20:
    InferenceEngine::DataTensor::get_1d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EF0]))
    InferenceEngine::DataTensor::get_1d_array<float>();
LABEL_22:
  v10 = (const void *)*((_QWORD *)this + 11);
  size = InferenceEngine::DataTensor::get_size(this);
  std::vector<float>::vector(a2, size);
  return memcpy(*a2, v10, 4 * size);
}

void InferenceEngine::SoundStormIOProcessor::build_pred_data(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  InferenceEngine::DataTensor *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  uint64_t v29[3];
  uint64_t v30[3];
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t *v34[3];
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  InferenceEngine::DataTensor *v41;
  std::__shared_weak_count *v42;
  InferenceEngine::DataTensor *v43;
  std::__shared_weak_count *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  InferenceEngine::DataTensor *v48;
  std::__shared_weak_count *v49;
  std::string *p_p;

  std::string::basic_string[abi:ne180100]<0>(&v45, "pred_semantic");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v48 = v6;
  v49 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  std::string::basic_string[abi:ne180100]<0>(&v45, "vq_tokens");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v43 = v11;
  v44 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  std::string::basic_string[abi:ne180100]<0>(&v45, "q_token_mask");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (InferenceEngine::DataTensor *)*((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v41 = v16;
  v42 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  InferenceEngine::DataTensor::get_shape(v6, 0, &v45);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  InferenceEngine::DataTensor::unsqueeze(v6, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v38);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v45, (uint64_t)*v38, (uint64_t)v38[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v38[1] - (_BYTE *)*v38) >> 3));
  v35 = (void **)&v38;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v35);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, &v35);
  v39 = 0;
  v40 = 0;
  v38 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v38, (uint64_t)*v35, (uint64_t)v35[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v35[1] - (_BYTE *)*v35) >> 3));
  v34[0] = (uint64_t *)&v35;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  InferenceEngine::DataTensor::squeeze(v6, 2);
  InferenceEngine::DataTensor::unsqueeze(v16, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v16, v34);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v35, *v34[0], v34[0][1], 0xAAAAAAAAAAAAAAABLL * ((v34[0][1] - *v34[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v16, 2);
  v32 = 0;
  v31 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v31, (uint64_t)v45, (uint64_t)v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v30, (uint64_t)v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v35) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v31, v30, 1, (uint64_t *)&v33);
  memset(v29, 0, sizeof(v29));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v29, (uint64_t)v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v33, v29, 1, (uint64_t *)v34);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v34, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a2, 0);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v19 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v34[0] = (uint64_t *)&v35;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  v35 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  v38 = (void **)&v45;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v38);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = v44;
  if (v44)
  {
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v49;
  if (v49)
  {
    v26 = (unint64_t *)&v49->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1DE509C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t ***__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t **a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a28 = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a31 = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a34 = v35 - 120;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 152);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 96);
  _Unwind_Resume(a1);
}

void sub_1DE509DD4()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE509DBCLL);
}

void sub_1DE509DEC()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE509DC4);
}

void sub_1DE509E04()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE509DCCLL);
}

void InferenceEngine::DataTensor::get_3d_array<float>(InferenceEngine::DataTensor *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  void *__p[3];

  v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702)
        goto LABEL_20;
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]))
      InferenceEngine::DataTensor::get_3d_array<float>();
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910)
      goto LABEL_21;
    if (**(_DWORD **)v4 == 909209702)
      goto LABEL_22;
    v6 = *((_QWORD *)this + 5);
  }
  if (v6 != 5)
    goto LABEL_20;
  v4 = *(char **)v4;
LABEL_11:
  v7 = *(_DWORD *)v4;
  v8 = v4[4];
  if (v7 != 863268457 || v8 != 50)
LABEL_20:
    InferenceEngine::DataTensor::get_3d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EF0]))
    InferenceEngine::DataTensor::get_3d_array<float>();
LABEL_22:
  v10 = *((_QWORD *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_3d_array<float>(v10, (unint64_t **)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DE509F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 *InferenceEngine::VectorOps::concatenate_vectors_2d<float>@<X0>(__n128 *result@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __n128 *v5;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *exception;
  std::string v18;

  v5 = result;
  if (a3 == 1)
  {
    v10 = result->n128_u64[0];
    v11 = result->n128_u64[1];
    if (v11 - result->n128_u64[0] != a2[1] - *a2)
      InferenceEngine::VectorOps::concatenate_vectors_2d<float>();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (v11 != v10)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = v10 + v12;
        v15 = a4[1];
        if (v15 >= a4[2])
        {
          v16 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a4, v14);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a4, v14);
          v16 = v15 + 24;
        }
        a4[1] = v16;
        result = (__n128 *)std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(*a4 + v12, *(_QWORD *)(*a4 + v12 + 8), *(char **)(*a2 + v12), *(char **)(*a2 + v12 + 8), (uint64_t)(*(_QWORD *)(*a2 + v12 + 8) - *(_QWORD *)(*a2 + v12)) >> 2);
        ++v13;
        v10 = v5->n128_u64[0];
        v12 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5->n128_u64[1] - v5->n128_u64[0]) >> 3) > v13);
    }
  }
  else
  {
    if (a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v18, "dimension can only be 0 or 1 for concatenate_vectors_2d");
      MEMORY[0x1DF0EC99C](exception, &v18);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v7 = result->n128_u64[0];
    v8 = *a2;
    if (*(_QWORD *)(result->n128_u64[0] + 8) - *(_QWORD *)result->n128_u64[0] != *(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2)
      InferenceEngine::VectorOps::concatenate_vectors_2d<float>();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (a4 == (uint64_t *)result)
    {
      v9 = 0;
    }
    else
    {
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)a4, v7, result->n128_i64[1], 0xAAAAAAAAAAAAAAABLL * ((int64_t)(result->n128_u64[1] - v7) >> 3));
      v9 = (__n128 *)a4[1];
      v8 = *a2;
    }
    return std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(a4, v9, v8, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - v8) >> 3));
  }
  return result;
}

void sub_1DE50A158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void InferenceEngine::SoundStormIOProcessor::build_pred_lens(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v5;
  float *v6;
  unsigned __int8 *v7;
  void *p_p;
  void *v9;
  float *v10;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&p_p, "pred_data");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&p_p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v4 + 5), 0, &__p.__r_.__value_.__l.__data_);
  v5 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10) < 0)
    operator delete(p_p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_lens");
  v6 = (float *)operator new(4uLL);
  p_p = v6;
  *v6 = (float)v5;
  v9 = v6 + 1;
  v10 = v6 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    v9 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v7 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE50A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void InferenceEngine::SoundStormIOProcessor::build_prompt_data(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  uint64_t v21[3];
  __n128 v22;
  uint64_t v23;
  uint64_t *v24[3];
  void **v25;
  uint64_t v26;
  uint64_t v27;
  InferenceEngine::DataTensor *v28;
  std::__shared_weak_count *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  InferenceEngine::DataTensor *v33;
  std::__shared_weak_count *v34;
  std::string *p_p;

  std::string::basic_string[abi:ne180100]<0>(&v30, "prompt_semantic");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v33 = v6;
  v34 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
  std::string::basic_string[abi:ne180100]<0>(&v30, "prompt_vq");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v28 = v11;
  v29 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
  InferenceEngine::DataTensor::unsqueeze(v6, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v25);
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v30, (uint64_t)*v25, (uint64_t)v25[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v25[1] - (_BYTE *)*v25) >> 3));
  v24[0] = (uint64_t *)&v25;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v24);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v25, *v24[0], v24[0][1], 0xAAAAAAAAAAAAAAABLL * ((v24[0][1] - *v24[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v6, 2);
  v23 = 0;
  v22 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v22, (uint64_t)v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v21, (uint64_t)v25, v26, 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v25) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v22, v21, 1, (uint64_t *)v24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v24, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a2, 0);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v14 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v24[0] = (uint64_t *)&v25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  v25 = &v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1DE50A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
  __p = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = v28 - 104;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void sub_1DE50A750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x1DE50A728);
}

void sub_1DE50A768()
{
  JUMPOUT(0x1DE50A728);
}

void sub_1DE50A770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  JUMPOUT(0x1DE50A738);
}

void sub_1DE50A788()
{
  JUMPOUT(0x1DE50A738);
}

void sub_1DE50A794()
{
  JUMPOUT(0x1DE50A740);
}

void sub_1DE50A79C()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  JUMPOUT(0x1DE50A740);
}

void sub_1DE50A7B4()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  JUMPOUT(0x1DE50A748);
}

void InferenceEngine::SoundStormIOProcessor::build_prompt_lens(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v5;
  float *v6;
  unsigned __int8 *v7;
  void *p_p;
  void *v9;
  float *v10;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&p_p, "prompt_data");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&p_p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v4 + 5), 0, &__p.__r_.__value_.__l.__data_);
  v5 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10) < 0)
    operator delete(p_p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_lens");
  v6 = (float *)operator new(4uLL);
  p_p = v6;
  *v6 = (float)v5;
  v9 = v6 + 1;
  v10 = v6 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    v9 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v7 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE50A900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void InferenceEngine::SoundStormIOProcessor::update_vq_target(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  InferenceEngine::DataTensor *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  std::__shared_weak_count *v20;
  InferenceEngine::DataTensor *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  InferenceEngine::DataTensor *v26;
  unint64_t *v27;
  unint64_t v28;
  int64_t v29;
  float v30;
  _BOOL8 v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  NSObject *LogObject;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned __int8 *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const char *v61;
  int v62;
  __int128 v63;
  void *v64[3];
  std::vector<int> v65;
  std::vector<int> v66;
  InferenceEngine::DataTensor *v67;
  std::__shared_weak_count *v68;
  InferenceEngine::DataTensor *v69;
  std::__shared_weak_count *v70;
  InferenceEngine::DataTensor *v71;
  std::__shared_weak_count *v72;
  InferenceEngine::DataTensor *v73;
  std::__shared_weak_count *v74;
  std::vector<int> __p;
  __int128 v76;
  std::string buf;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = *((_QWORD *)v5 + 6);
  *(_QWORD *)&v76 = *((_QWORD *)v5 + 5);
  *((_QWORD *)&v76 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "layer_q");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_code");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (InferenceEngine::DataTensor *)*((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v71 = v16;
  v72 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_b");
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (InferenceEngine::DataTensor *)*((_QWORD *)v19 + 5);
  v20 = (std::__shared_weak_count *)*((_QWORD *)v19 + 6);
  v69 = v21;
  v70 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_t");
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v24)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v26 = (InferenceEngine::DataTensor *)*((_QWORD *)v24 + 5);
  v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
  v67 = v26;
  v68 = v25;
  if (v25)
  {
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  InferenceEngine::DataTensor::get_1d_array<int>(v16, &__p);
  InferenceEngine::DataTensor::get_1d_array<int>(v21, &v66);
  InferenceEngine::DataTensor::get_1d_array<int>(v26, &v65);
  v29 = v66.__end_ - v66.__begin_;
  if (v29 != v65.__end_ - v65.__begin_)
  {
    v61 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    v62 = 177;
    goto LABEL_90;
  }
  if (v29 != __p.__end_ - __p.__begin_)
  {
    v61 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    v62 = 178;
LABEL_90:
    __assert_rtn("update_vq_target", "SoundStormIOProcessor.cpp", v62, v61);
  }
  InferenceEngine::DataTensor::get_1d_array<float>(v11, v64);
  v30 = *(float *)v64[0];
  v64[1] = v64[0];
  operator delete(v64[0]);
  InferenceEngine::DataTensor::get_2d_array<float>((InferenceEngine::DataTensor *)v76, v64);
  if (__p.__end_ != __p.__begin_)
  {
    v32 = 0;
    if ((unint64_t)(__p.__end_ - __p.__begin_) <= 1)
      v33 = 1;
    else
      v33 = __p.__end_ - __p.__begin_;
    v34 = v64[0];
    do
    {
      v35 = v66.__begin_[v32];
      v36 = v65.__begin_[v32];
      if (*(float *)(v34[3 * v35] + 4 * v36) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v31);
        v31 = os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if (v31)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v35;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v36;
          _os_log_error_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! q_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      v34 = v64[0];
      *(_DWORD *)(*((_QWORD *)v64[0] + 3 * v35) + 4 * v36) = 1065353216;
      *(float *)(*(_QWORD *)(*(_QWORD *)(*a3 + 24 * v35) + 24 * v36) + 4 * (int)v30) = (float)__p.__begin_[v32++];
    }
    while (v33 != v32);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v76, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)v64, &v63);
  v38 = v63;
  v63 = 0uLL;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  v76 = v38;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v76, &buf);
  *(_QWORD *)&v63 = &buf;
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v63);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v45 + 5, (uint64_t *)&v76);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    operator delete(v65.__begin_);
  }
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  v46 = v68;
  if (v68)
  {
    v47 = (unint64_t *)&v68->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v70;
  if (v70)
  {
    v50 = (unint64_t *)&v70->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v72;
  if (v72)
  {
    v53 = (unint64_t *)&v72->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v74;
  if (v74)
  {
    v56 = (unint64_t *)&v74->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1DE50AFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  *(_QWORD *)(v35 - 144) = &a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void *InferenceEngine::DataTensor::get_1d_array<int>@<X0>(InferenceEngine::DataTensor *this@<X0>, std::vector<int> *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  const void *v10;
  int size;

  v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702)
        goto LABEL_20;
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EE0]))
      InferenceEngine::DataTensor::get_1d_array<float>();
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910)
      goto LABEL_21;
    if (**(_DWORD **)v4 == 909209702)
      goto LABEL_22;
    v6 = *((_QWORD *)this + 5);
  }
  if (v6 != 5)
    goto LABEL_20;
  v4 = *(char **)v4;
LABEL_11:
  v7 = *(_DWORD *)v4;
  v8 = v4[4];
  if (v7 != 863268457 || v8 != 50)
LABEL_20:
    InferenceEngine::DataTensor::get_1d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EF0]))
    InferenceEngine::DataTensor::get_1d_array<float>();
LABEL_22:
  v10 = (const void *)*((_QWORD *)this + 11);
  size = InferenceEngine::DataTensor::get_size(this);
  std::vector<int>::vector(a2, size);
  return memcpy(a2->__begin_, v10, 4 * size);
}

void InferenceEngine::DataTensor::get_2d_array<float>(InferenceEngine::DataTensor *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  void *__p[3];

  v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702)
        goto LABEL_20;
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]))
      InferenceEngine::DataTensor::get_2d_array<float>();
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910)
      goto LABEL_21;
    if (**(_DWORD **)v4 == 909209702)
      goto LABEL_22;
    v6 = *((_QWORD *)this + 5);
  }
  if (v6 != 5)
    goto LABEL_20;
  v4 = *(char **)v4;
LABEL_11:
  v7 = *(_DWORD *)v4;
  v8 = v4[4];
  if (v7 != 863268457 || v8 != 50)
LABEL_20:
    InferenceEngine::DataTensor::get_2d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EF0]))
    InferenceEngine::DataTensor::get_2d_array<float>();
LABEL_22:
  v10 = *((_QWORD *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_2d_array<float>(v10, (uint64_t)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DE50B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::SoundStormIOProcessor::process_inputs(unsigned __int8 *a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  InferenceEngine::DataTensor *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  float v12;
  InferenceEngine *v13;
  NSObject *v14;
  uint64_t v15;
  float v16;
  uint64_t *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  InferenceEngine *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *LogObject;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string __p;
  std::string v61;
  std::string v62;
  InferenceEngine::DataTensor *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  InferenceEngine::DataTensor *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  InferenceEngine::DataTensor *v75;
  std::__shared_weak_count *v76;
  uint8_t buf[16];
  std::string::size_type v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_semantic");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = (InferenceEngine::DataTensor *)*((_QWORD *)v6 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v75 = v8;
  v76 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (SHIBYTE(v78) < 0)
    operator delete(*(void **)buf);
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  v11 = **(_QWORD **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v11 != 1)
    __assert_rtn("process_inputs", "SoundStormIOProcessor.cpp", 205, "B == 1");
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 16))(&v73, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 24))(&v71, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 32))(&v69, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(&v67, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 64))(&v65, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 40))(&v63, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v63, (void **)buf);
  v12 = **(float **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v12 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v69, (void **)buf);
    v16 = **(float **)buf;
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
    v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v17, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v62, "prompt_k_");
      std::to_string(&v61, (int)v16);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v61;
      else
        v18 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v20 = std::string::append(&v62, (const std::string::value_type *)v18, size);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v78 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v61, "prompt_v_");
      std::to_string(&__p, (int)v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v23 = __p.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v61, (const std::string::value_type *)p_p, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v26)
        goto LABEL_93;
      std::string::basic_string[abi:ne180100]<0>(&v61, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v61, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v27 + 5, (uint64_t *)v26 + 5);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v62);
      if (!v28)
LABEL_93:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v61, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v61, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v30 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v29 + 5, (uint64_t *)v28 + 5);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78) < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1, a2, a3);
      v30 = (InferenceEngine *)(*(_QWORD *(**)(std::string *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 72))(&v62, a1, a2, a3);
      v31 = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
      if (v62.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Prepare SoundStorm inputs finished for loop %d", buf, 8u);
    }
    v15 = 0;
  }
  else
  {
    v14 = InferenceEngine::Diagnostics_GetLogObject(v13);
    v15 = 1;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  v38 = v64;
  if (v64)
  {
    v39 = (unint64_t *)&v64->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v66;
  if (v66)
  {
    v42 = (unint64_t *)&v66->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v68;
  if (v68)
  {
    v45 = (unint64_t *)&v68->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v70;
  if (v70)
  {
    v48 = (unint64_t *)&v70->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v72;
  if (v72)
  {
    v51 = (unint64_t *)&v72->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v74;
  if (v74)
  {
    v54 = (unint64_t *)&v74->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v76;
  if (v76)
  {
    v57 = (unint64_t *)&v76->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return v15;
}

void sub_1DE50BAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 96);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 120);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::SoundStormIOProcessor::process_outputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  kaldi::quasar::Vocab *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  InferenceEngine *v25;
  NSObject *LogObject;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v31;
  InferenceEngine::DataTensor *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  kaldi::quasar::Vocab *v36[2];
  std::string buf;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "vq_tokens");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (kaldi::quasar::Vocab *)*((_QWORD *)v6 + 6);
  v36[0] = *((kaldi::quasar::Vocab **)v6 + 5);
  v36[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v35 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v32 = (InferenceEngine::DataTensor *)*((_QWORD *)v10 + 5);
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v32, a3);
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v35 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v36[0], __p);
  (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 80))(a1, a2, __p);
  kaldi::quasar::Vocab::OOvWord(v36[0], &buf);
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &v31);
  v17 = v31;
  v31 = 0uLL;
  v18 = (std::__shared_weak_count *)v36[1];
  *(_OWORD *)v36 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(v36[0], &buf);
  *(_QWORD *)&v31 = &buf;
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  v25 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v24 + 5, (uint64_t *)v36);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v25);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Process SoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v27 = (std::__shared_weak_count *)v36[1];
  if (v36[1])
  {
    v28 = (unint64_t *)((char *)v36[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return 0;
}

void sub_1DE50BF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 64) = &__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 64));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1DE50BFC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE50BFB8);
}

void InferenceEngine::SoundStormIOProcessor::check_outputs<int>(uint64_t a1, InferenceEngine::DataTensor **a2, int a3)
{
  InferenceEngine::DataTensor *v5;
  unsigned __int8 *v6;
  uint64_t *v7;
  InferenceEngine *v8;
  int v9;
  NSObject *LogObject;
  InferenceEngine *v11;
  NSObject *v12;
  uint64_t *v13;
  int v14;
  int v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = (unsigned __int8 *)(a1 + 24);
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "vq_mask_id");
  v15[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v7, v15);
  v8 = (InferenceEngine *)InferenceEngine::DataTensor::contain_value<int>(v5, (float)v15[0]);
  v9 = (int)v8;
  if ((int)v8 >= 1)
  {
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v8);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR))
    {
      v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v6, "vq_mask_id");
      v15[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v13, v15);
      v14 = v15[0];
      v15[0] = 67109632;
      v15[1] = v9;
      v16 = 1024;
      v17 = v14;
      v18 = 1024;
      v19 = a3;
      _os_log_error_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_ERROR, "Found %d appearances of invalid value %d in loop %d", (uint8_t *)v15, 0x14u);
    }
  }
  v11 = (InferenceEngine *)InferenceEngine::DataTensor::contain_nan<int>(*a2);
  if ((int)v11 >= 1)
  {
    v12 = InferenceEngine::Diagnostics_GetLogObject(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      InferenceEngine::SoundStormIOProcessor::check_outputs<int>(v9, a3, v12);
  }
}

void InferenceEngine::DataTensor::build_from_3d_array<float>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  char v12;
  void *v13;
  void *v14;
  _QWORD *v15;

  v5 = (_QWORD **)*a1;
  v4 = a1[1];
  v7 = *(uint64_t **)*a1;
  v6 = *(_QWORD *)(*a1 + 8);
  v9 = *v7;
  v8 = v7[1];
  v10 = operator new(0x18uLL);
  v14 = v10 + 3;
  v15 = v10 + 3;
  *v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3);
  v10[1] = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3);
  v10[2] = (v8 - v9) >> 2;
  v13 = v10;
  InferenceEngine::DataUtils::get_type_string<float>(__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v12 < 0)
    operator delete(__p[0]);
  InferenceEngine::VectorOps::flatten_3d_to_1d<float>(a1, __p);
  memcpy(*(void **)(*a2 + 88), __p[0], *(_QWORD *)(*a2 + 80));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1DE50C23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v17);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      v2 = 1220;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      v2 = 1221;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      v2 = 1222;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v25 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (i = v25; v24 != v25; i = v25)
  {
    v12 = *(_BYTE *)(i - 16);
    v11 = i - 16;
    LOBYTE(v22) = v12;
    v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      v13 = v23;
      v14 = v23 + 1;
      v15 = (_QWORD *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(_BYTE *)v16 = *((_BYTE *)v15 + 56);
            *(_QWORD *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((_BYTE *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v25 = v16;
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v9 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v9);
          }
          v15 = v18;
        }
        while (v18 != v14);
        v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_42;
      v20 = (void *)*v19;
      break;
    case 7:
      v19 = *a1;
      v21 = (void *)**a1;
      if (!v21)
        goto LABEL_42;
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1DE50C6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 16;
    v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v6 = *v5;
      v5 -= 16;
      result = (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      v7 = v4 == v3;
      v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      v10 = v7 - 16;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      v7 = *((_QWORD *)&v17 + 1) - 16;
      *((_QWORD *)&v17 + 1) -= 16;
      v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t result;

  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    i = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(_BYTE *)v7 = *(_BYTE *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1DE50CB88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 16;
    v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      v8 = v5 == a2;
      v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(const void ****)(a2 + 8));
      goto LABEL_8;
    case 2:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 4:
      v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(_QWORD *)(a2 + 8));
LABEL_8:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(const void ***a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_1DE50CE14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1DE50CE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DE50CFE4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_1DE50D058(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(*(_QWORD *)a1, (uint64_t)__p + 32);
  if (__p)
    operator delete(__p);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1DE50D100(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE50D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DE50D224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  if (a3 != a5)
  {
    v6 = a3 - 16;
    v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      v9 = v6 == a5;
      v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_1DE50D328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_1DE50D384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<signed char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DE50D3F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1DE50D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &unk_1EA92E178;
  *((_DWORD *)this + 2) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)this + 1, a3);
  return this;
}

void sub_1DE50D5D0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1DF0ED014);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &unk_1EA92E080;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1DE50D754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_1EA93BEE8[v1];
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 2);
  v6[2] = **a2;
  *((_QWORD *)v6 + 6) = v8;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_BYTE *)v6 + 56) = 0;
  v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>,0>(char *a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>>((unsigned __int8 *)a1, a2);
}

void sub_1DE50D98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<int>>(unsigned __int8 *a1, uint64_t a2)
{
  std::vector<int>::size_type v4;
  const int *i;
  unsigned __int8 *v6;
  std::vector<int>::const_iterator v7;
  std::__wrap_iter<int *>::iterator_type v8;
  void *v9;
  double result;
  unsigned __int8 *v11[5];
  unsigned __int8 *v12[5];
  std::vector<int> v13;
  std::vector<int>::value_type __x;

  memset(&v13, 0, sizeof(v13));
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  std::vector<int>::reserve(&v13, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v12);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v11);
  for (i = v13.__end_;
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v12, v11);
        i = v8 + 1)
  {
    v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v12);
    __x = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, &__x);
    v7.__i_ = i;
    v8 = std::vector<int>::insert(&v13, v7, &__x).__i_;
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v12);
  }
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v9;
    operator delete(v9);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v13.__begin_;
  *(std::vector<int> *)a2 = v13;
  return result;
}

void sub_1DE50DB10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(_QWORD *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  nlohmann::detail::exception *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  v3 = *result;
  if (v3 == 1)
  {
    v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  }
  else
  {
    if (!*result)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, exception);
    }
    if (a1[4])
    {
      v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_1DE50DCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v5;

  if (!*result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++();
  v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    v2 = result[1];
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[4];
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==();
  v3 = *v2;
  if (v3 == 2)
  {
    v4 = a1[2];
    v5 = a2[2];
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    v5 = a2[1];
  }
  else
  {
    v4 = a1[4];
    v5 = a2[4];
  }
  return v4 == v5;
}

void sub_1DE50DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &unk_1EA92E120;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1DE50DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  int *i;
  const int *end;
  std::__compressed_pair<int *> *p_end_cap;
  int *v8;
  int *value;
  std::__wrap_iter<const int *>::iterator_type v10;
  const int *v11;
  int *v12;
  int v13;
  std::vector<int>::pointer begin;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  std::__split_buffer<int> __v;

  i = (int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v15 = end - this->__begin_ + 1;
    if (v15 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = __position.__i_ - begin;
    v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v18);
    else
      v19 = 0;
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<int>::push_back(&__v, __x);
    i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v10 = __position.__i_ + 1;
    v11 = end - 1;
    v12 = (int *)end;
    while (v11 < end)
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10)
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    *i = *__x;
  }
  return (std::vector<int>::iterator)i;
}

void sub_1DE50E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<int>::push_back(std::__split_buffer<int> *this, std::__split_buffer<int>::value_type *__x)
{
  std::__split_buffer<int>::pointer end;
  std::__split_buffer<int>::pointer begin;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  std::__split_buffer<int>::pointer v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  std::__split_buffer<int>::pointer first;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = this->__begin_;
    v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_)
        v16 = 1;
      else
        v16 = ((char *)end - (char *)this->__first_) >> 1;
      v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this->__end_cap_.__value_, v16);
      v19 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v20 = this->__begin_;
      end = v19;
      v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        end = (int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        v22 = 4 * (v21 >> 2);
        v23 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        end = this->__end_;
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &begin[-v12];
      v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        end = this->__begin_;
      }
      v15 = &end[v11];
      end = (int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  *end = *__x;
  this->__end_ = end + 1;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_begin", "iter_impl.hpp", 174, "m_object != nullptr");
  v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else
    {
      result[4] = 0;
    }
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0x8000000000000000;
  if (!a2)
    __assert_rtn("iter_impl", "iter_impl.hpp", 88, "m_object != nullptr");
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_end", "iter_impl.hpp", 211, "m_object != nullptr");
  v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((_QWORD *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((_QWORD *)v1 + 1) + 8);
  }
  else
  {
    result[4] = (unsigned __int8 *)1;
  }
  return result;
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(_BYTE *result, int *a2)
{
  char *v2;
  int v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v10 = v6->__r_.__value_.__r.__words[2];
      v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1DE50E4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(int **a1, int **a2)
{
  _QWORD *v4;
  int *v5;
  int *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1DE50E584(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,int const*,int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE50E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,int const*,int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 5;
      *(_QWORD *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  uint64_t result;

  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, a1);
  result = (uint64_t)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(a3);
  if (*(_BYTE *)a1 == 1)
  {
    result = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(*(_QWORD *)(a1 + 8), a2);
    a3[1] = (unsigned __int8 *)result;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DE50E8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *InferenceEngine::DataUtils::get_type_string<float>@<X0>(_QWORD *a1@<X8>)
{
  char *v2;

  if (std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EE0]))
  {
    v2 = "fp32";
  }
  else
  {
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EE0], MEMORY[0x1E0DE4EF0]))
      InferenceEngine::DataUtils::get_type_string<float>();
    v2 = "int32";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void *InferenceEngine::VectorOps::flatten_2d_to_1d<float>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int64_t v4;
  unint64_t v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v4 = *(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) * (v4 >> 2);
  v11 = 0;
  result = std::vector<float>::vector(a2, v5, &v11);
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      result = memcpy((void *)(*a2 + v8), *(const void **)(v7 + v9), v4);
      ++v10;
      v7 = *a1;
      v9 += 24;
      v8 += 4 * (v4 >> 2);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v10);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE50EA58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1EA935F10;
  a1[1] = 0;
  InferenceEngine::DataTensor::DataTensor(a1 + 3);
  return a1;
}

void sub_1DE50EAA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::DataTensor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1DE50ED98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void InferenceEngine::DataUtils::convert_data_to_3d_array<float>(uint64_t a1@<X0>, unint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  void *__p[3];
  uint64_t v18[3];
  void **v19;

  v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 24)
    InferenceEngine::DataUtils::convert_data_to_3d_array<float>();
  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  v16 = 0;
  std::vector<float>::vector(__p, v9, &v16);
  std::vector<std::vector<float>>::vector(v18, v8, (uint64_t)__p);
  std::vector<std::vector<std::vector<float>>>::vector(a3, v7, v18);
  v19 = (void **)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v10 = *a2;
  v11 = **a2;
  if (v11)
  {
    for (i = 0; i < v11; ++i)
    {
      v13 = v10[1];
      if (v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          memcpy(*(void **)(*(_QWORD *)(*a3 + 24 * i) + v14), (const void *)(a1 + 4 * v10[2] * v15++ + 4 * v13 * i * v10[2]), 4 * v10[2]);
          v10 = *a2;
          v13 = (*a2)[1];
          v14 += 24;
        }
        while (v15 < v13);
        v11 = *v10;
      }
    }
  }
}

void sub_1DE50EF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<float>>>::vector(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DE50EFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DE50F078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DE50F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1DE50F2F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE50F2FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 *std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<float>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(&v23, a3, a5);
      v5 = (__n128 *)std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1DE50F4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<float>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__n128 *)((char *)a2 + v6 - a4);
  v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v8 = (__n128 *)((char *)v8 + 24);
      v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(a2, v7, v6);
}

_QWORD *std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a3)
  {
    v6 = &v4[3 * a3];
    v7 = 24 * a3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1DE50F5A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<float>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<float>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  void *__p[3];

  v4 = *(unint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    InferenceEngine::DataUtils::convert_data_to_2d_array<float>();
  v8 = *v4;
  v7 = v4[1];
  v12 = 0;
  std::vector<float>::vector(__p, v7, &v12);
  std::vector<std::vector<float>>::vector(a3, v8, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v9 = *(unint64_t **)a2;
  if (**(_QWORD **)a2)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      memcpy(*(void **)(*a3 + v10), (const void *)(a1 + 4 * v9[1] * v11++), 4 * v9[1]);
      v9 = *(unint64_t **)a2;
      v10 += 24;
    }
    while (v11 < **(_QWORD **)a2);
  }
}

void sub_1DE50F864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(char *result, _BYTE *a2)
{
  char *v2;
  nlohmann::detail::exception *exception;
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;
  __int128 v8;
  std::string::size_type v9;

  v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v4 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v7, v4);
    v5 = std::string::insert(&v7, 0, "type must be BOOLean, but is ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9 = v5->__r_.__value_.__r.__words[2];
    v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_1DE50F940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t InferenceEngine::DataTensor::contain_value<int>(InferenceEngine::DataTensor *a1, float a2)
{
  uint64_t v3;
  std::vector<int>::pointer begin;
  int v5;
  std::vector<int> v7;

  InferenceEngine::DataTensor::get_1d_array<int>(a1, &v7);
  if (v7.__begin_ == v7.__end_)
  {
    v3 = 0;
    if (!v7.__begin_)
      return v3;
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  begin = v7.__begin_;
  do
  {
    v5 = *begin++;
    if ((float)v5 == a2)
      v3 = (v3 + 1);
    else
      v3 = v3;
  }
  while (begin != v7.__end_);
  if (v7.__begin_)
  {
LABEL_8:
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
  return v3;
}

uint64_t InferenceEngine::DataTensor::contain_nan<int>(InferenceEngine::DataTensor *a1)
{
  std::vector<int> __p;

  InferenceEngine::DataTensor::get_1d_array<int>(a1, &__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return 0;
}

void InferenceEngine::VectorOps::flatten_3d_to_1d<float>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  void *__p[3];
  uint64_t v8[3];

  memset(v8, 0, sizeof(v8));
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      InferenceEngine::VectorOps::flatten_2d_to_1d<float>((_QWORD *)(v3 + v5), __p);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v8, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v6;
      v3 = *a1;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v6);
  }
  InferenceEngine::VectorOps::flatten_2d_to_1d<float>(v8, a2);
  __p[0] = v8;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DE50FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1DE50FC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::get_1d_array<float>()
{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 331, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 335, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_1d_array", "DataTensor.hpp", 337, "0");
}

void InferenceEngine::DataTensor::get_3d_array<float>()
{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 299, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 303, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_3d_array", "DataTensor.hpp", 305, "0");
}

void InferenceEngine::VectorOps::concatenate_vectors_2d<float>()
{
  __assert_rtn("concatenate_vectors_2d", "VectorOps.h", 102, "matrix1[0].size() == matrix2[0].size()");
}

{
  __assert_rtn("concatenate_vectors_2d", "VectorOps.h", 104, "matrix1.size() == matrix2.size()");
}

void InferenceEngine::DataTensor::get_2d_array<float>()
{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 315, "typeid(T) == typeid(float)");
}

{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 319, "typeid(T) == typeid(int32_t)");
}

{
  __assert_rtn("get_2d_array", "DataTensor.hpp", 321, "0");
}

void InferenceEngine::SoundStormIOProcessor::check_outputs<int>(int a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109376;
  v3[1] = a1;
  v4 = 1024;
  v5 = a2;
  _os_log_error_impl(&dword_1DE3F6000, log, OS_LOG_TYPE_ERROR, "Found %d appearances of nan in loop %d", (uint8_t *)v3, 0xEu);
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*()
{
  __assert_rtn("operator*", "iter_impl.hpp", 242, "m_object != nullptr");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 248, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator*", "iter_impl.hpp", 254, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++()
{
  __assert_rtn("operator++", "iter_impl.hpp", 324, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==()
{
  __assert_rtn("operator==", "iter_impl.hpp", 405, "m_object != nullptr");
}

void InferenceEngine::DataUtils::get_type_string<float>()
{
  __assert_rtn("get_type_string", "DataTensor.hpp", 253, "0");
}

void InferenceEngine::DataUtils::convert_data_to_3d_array<float>()
{
  __assert_rtn("convert_data_to_3d_array", "DataTensor.hpp", 149, "shape.size() == 3");
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<float>()
{
  __assert_rtn("convert_data_to_2d_array", "DataTensor.hpp", 137, "shape.size() == 2");
}

uint64_t InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6)
{
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  v8 = (_QWORD *)InferenceEngine::MilIO::MilIO(a1, a2, a3, a4, a5);
  *v8 = off_1EA923658;
  v8[17] = 0;
  v9 = (uint64_t)(v8 + 17);
  v8[18] = 0;
  if (a6)
  {
    v10 = (char *)operator new(0xC8uLL);
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &unk_1EA933F20;
    *((_QWORD *)v10 + 1) = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_QWORD *)&v15 = v10 + 24;
    *((_QWORD *)&v15 + 1) = v10;
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](v9, &v15);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 136) = 0;
    free(*(void **)(a1 + 88));
    *(_QWORD *)(a1 + 88) = 0;
  }
  return a1;
}

void sub_1DE510100(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v2);
  InferenceEngine::MilIO::~MilIO(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::~MilIO(void **this)
{
  *this = &unk_1EA923968;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
}

{
  *this = &unk_1EA923968;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
  JUMPOUT(0x1DF0ED014);
}

void *InferenceEngine::Mil2BnnsMilIO::set_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  _DWORD *v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const char *v9;
  void *exception;
  int v11;
  void *result;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  void *v16;
  std::string v17;

  v2 = (_DWORD *)((char *)this + 32);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 55) != 4)
    {
      v3 = (char *)this + 32;
      if (*((_BYTE *)this + 55) != 5)
        goto LABEL_19;
      goto LABEL_11;
    }
    v5 = 65552;
    if (*v2 != 842231910)
    {
      if (*v2 != 909209702)
        goto LABEL_19;
      goto LABEL_23;
    }
LABEL_22:
    v5 = 65568;
    goto LABEL_23;
  }
  v4 = *((_QWORD *)this + 5);
  if (v4 == 4)
  {
    v5 = 65552;
    if (**(_DWORD **)v2 == 842231910)
      goto LABEL_22;
    if (**(_DWORD **)v2 == 909209702)
      goto LABEL_23;
    v4 = *((_QWORD *)this + 5);
  }
  if (v4 != 5)
    goto LABEL_19;
  v3 = *(char **)v2;
LABEL_11:
  v6 = *(_DWORD *)v3;
  v7 = v3[4];
  if (v6 != 863268457 || v7 != 50)
  {
LABEL_19:
    v9 = (char *)this + 32;
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)this + 55) < 0)
      v9 = *(const char **)v9;
    InferenceEngine::StringFormatter::StringFormatter(&v17, "dtype %s not supported", v9);
    MEMORY[0x1DF0EC99C](exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v5 = 131104;
LABEL_23:
  v11 = 163841;
  *(_DWORD *)(*((_QWORD *)this + 17) + 144) = v5;
  result = (void *)InferenceEngine::DataTensor::get_rank(this);
  if (result == (void *)5)
  {
    v11 = 360449;
  }
  else
  {
    result = (void *)InferenceEngine::DataTensor::get_rank(this);
    if (result == (void *)4)
    {
      v11 = 294913;
    }
    else
    {
      result = (void *)InferenceEngine::DataTensor::get_rank(this);
      if (result == (void *)3)
      {
        v11 = 229377;
      }
      else
      {
        result = (void *)InferenceEngine::DataTensor::get_rank(this);
        if (result != (void *)2)
        {
          result = (void *)InferenceEngine::DataTensor::get_rank(this);
          if (result != (void *)1)
          {
            v16 = __cxa_allocate_exception(0x10uLL);
            InferenceEngine::StringFormatter::StringFormatter(&v17, "shape rank %ld not supported", (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
            MEMORY[0x1DF0EC99C](v16, &v17);
            __cxa_throw(v16, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          v11 = 98305;
        }
      }
    }
  }
  v13 = *((_QWORD *)this + 17);
  *(_DWORD *)(v13 + 4) = v11;
  *(_QWORD *)(v13 + 136) = *((_QWORD *)this + 11);
  v14 = (_BYTE *)*((_QWORD *)this + 7);
  v15 = (_BYTE *)*((_QWORD *)this + 8);
  if (v15 != v14)
    return memmove((void *)(v13 + 8), v14, v15 - v14);
  return result;
}

void sub_1DE5103D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer(InferenceEngine::Mil2BnnsMilIO *this)
{
  _DWORD *v2;
  int v3;
  _QWORD *v4;
  int v5;
  char *v6;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  unint64_t v13;
  void *v14;
  void *v15;
  void *exception;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  std::string v37;

  v2 = (_DWORD *)*((_QWORD *)this + 17);
  v3 = v2[36];
  if (v3 == 65552)
  {
    v8 = (_QWORD *)((char *)this + 32);
    v9 = *((char *)this + 55);
    if (v9 < 0)
    {
      if (*((_QWORD *)this + 5) != 4)
        goto LABEL_23;
      v8 = (_QWORD *)*v8;
    }
    else if (v9 != 4)
    {
      goto LABEL_23;
    }
    if (*(_DWORD *)v8 == 909209702)
      goto LABEL_27;
LABEL_23:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 == 131104)
  {
    v6 = (char *)this + 32;
    v7 = *((char *)this + 55);
    if (v7 < 0)
    {
      if (*((_QWORD *)this + 5) != 5)
        goto LABEL_19;
      v6 = *(char **)v6;
    }
    else if (v7 != 5)
    {
      goto LABEL_19;
    }
    v10 = *(_DWORD *)v6;
    v11 = v6[4];
    if (v10 == 863268457 && v11 == 50)
      goto LABEL_27;
LABEL_19:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (v3 != 65568)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v17 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v17 = *(const char **)v17;
    InferenceEngine::StringFormatter::StringFormatter(&v37, "dtype %s not supported", v17);
    MEMORY[0x1DF0EC99C](exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v4 = (_QWORD *)((char *)this + 32);
  v5 = *((char *)this + 55);
  if (v5 < 0)
  {
    if (*((_QWORD *)this + 5) != 4)
      goto LABEL_45;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 4)
  {
LABEL_45:
    InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer();
  }
  if (*(_DWORD *)v4 != 842231910)
    goto LABEL_45;
LABEL_27:
  HIDWORD(v13) = v2[1] - 32769;
  LODWORD(v13) = HIDWORD(v13);
  switch((v13 >> 16))
  {
    case 0u:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v19, 0, 0, 0);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v19);
      v14 = v19;
      if (!v19)
        goto LABEL_44;
      v20 = v19;
      goto LABEL_43;
    case 1u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 4), 1uLL);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v22, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v22);
      v15 = v22;
      if (!v22)
        goto LABEL_41;
      v23 = v22;
      goto LABEL_40;
    case 2u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 6), 2uLL);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v25, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v25);
      v15 = v25;
      if (!v25)
        goto LABEL_41;
      v26 = v25;
      goto LABEL_40;
    case 3u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 8), 3uLL);
      v28 = 0;
      v29 = 0;
      v30 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v28, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v28);
      v15 = v28;
      if (!v28)
        goto LABEL_41;
      v29 = v28;
      goto LABEL_40;
    case 4u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 10), 4uLL);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v31, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v31);
      v15 = v31;
      if (!v31)
        goto LABEL_41;
      v32 = v31;
      goto LABEL_40;
    case 5u:
      memset(&v37, 0, sizeof(v37));
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v37, v2 + 2, (uint64_t)(v2 + 12), 5uLL);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&v34, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)(v37.__r_.__value_.__l.__size_ - v37.__r_.__value_.__r.__words[0]) >> 3);
      InferenceEngine::DataTensor::set_shape(this, (uint64_t)&v34);
      v15 = v34;
      if (!v34)
        goto LABEL_41;
      v35 = v34;
LABEL_40:
      operator delete(v15);
LABEL_41:
      v14 = (void *)v37.__r_.__value_.__r.__words[0];
      if (v37.__r_.__value_.__r.__words[0])
      {
        v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
LABEL_43:
        operator delete(v14);
      }
LABEL_44:
      *((_QWORD *)this + 11) = *(_QWORD *)(*((_QWORD *)this + 17) + 136);
      return;
    default:
      v18 = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&v37, "layout %ld not supported", *(unsigned int *)(*((_QWORD *)this + 17) + 4));
      MEMORY[0x1DF0EC99C](v18, &v37);
      __cxa_throw(v18, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
}

void sub_1DE510814(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

uint64_t InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  std::string::size_type size;
  std::string *v9;
  int data;
  int v12;
  std::string::size_type v14;
  BOOL v15;
  std::string::size_type v17;
  std::string *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  InferenceEngine *WorkspaceSize_v2;
  NSObject *LogObject;
  void *v28;
  void *v29;
  void *exception;
  std::string *p_p;
  void *v32[2];
  char v33;
  std::string __p;
  std::string v35;
  std::string buf;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = InferenceEngine::MilInferenceModel::MilInferenceModel(a1, a2);
  *(_QWORD *)v3 = off_1EA923910;
  v4 = (void **)(v3 + 336);
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_QWORD *)(v3 + 352) = 0;
  BNNSGraphCompileOptionsMakeDefault();
  std::string::basic_string[abi:ne180100]<0>(&__p, "mil2bnns_model_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, &v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "mil2bnns_downcast_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(a1 + 32), (const void **)&buf.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v32, "mil2bnns_mmap_path");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, (char *)(a1 + 32), (const void **)v32, &buf);
  if (*(char *)(a1 + 359) < 0)
    operator delete(*v4);
  *(std::string *)v4 = buf;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (v33 < 0)
    operator delete(v32[0]);
  if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v35.__r_.__value_.__l.__data_ == 1702257015
      && *(_DWORD *)(v35.__r_.__value_.__r.__words[0] + 3) == 1852732005)
    {
      goto LABEL_40;
    }
    if (v35.__r_.__value_.__l.__size_ == 10)
    {
      if (*(_QWORD *)v35.__r_.__value_.__l.__data_ == 0x6F7473646E756F73
        && *(_WORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 28018)
      {
        goto LABEL_40;
      }
      size = v35.__r_.__value_.__l.__size_;
    }
    if (size != 7)
      goto LABEL_41;
    v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 10)
        goto LABEL_41;
      if (v35.__r_.__value_.__r.__words[0] != 0x6F7473646E756F73 || LOWORD(v35.__r_.__value_.__r.__words[1]) != 28018)
        goto LABEL_41;
LABEL_40:
      BNNSGraphCompileOptionsSetPredefinedOptimizations();
      goto LABEL_41;
    }
    if (LODWORD(v35.__r_.__value_.__l.__data_) == 1702257015
      && *(_DWORD *)((char *)v35.__r_.__value_.__r.__words + 3) == 1852732005)
    {
      goto LABEL_40;
    }
    v9 = &v35;
  }
  data = (int)v9->__r_.__value_.__l.__data_;
  v12 = *(_DWORD *)((char *)v9->__r_.__value_.__r.__words + 3);
  if (data == 1601401972 && v12 == 1886154335)
    goto LABEL_40;
LABEL_41:
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __p.__r_.__value_.__l.__size_;
  if (v14)
  {
    if ((_get_cpu_capabilities() & 0x78000000) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      InferenceEngine::StringFormatter::StringFormatter(&buf, "BNNS downcast type not supported '%s'", (const char *)p_p);
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 909209702)
        goto LABEL_74;
      if (__p.__r_.__value_.__l.__size_ == 19)
      {
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x73706F5F36317066
          && *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x63615F323370665FLL
          && *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 11) == 0x6D756363615F3233)
        {
          goto LABEL_74;
        }
        v17 = __p.__r_.__value_.__l.__size_;
      }
      if (v17 != 4)
        goto LABEL_75;
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 19)
          goto LABEL_75;
        v15 = __p.__r_.__value_.__r.__words[0] == 0x73706F5F36317066
           && __p.__r_.__value_.__l.__size_ == 0x63615F323370665FLL;
        if (!v15 || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 3) != 0x6D756363615F3233)
          goto LABEL_75;
LABEL_74:
        BNNSGraphCompileOptionsSetDownconvertMode();
        goto LABEL_75;
      }
      if (LODWORD(__p.__r_.__value_.__l.__data_) == 909209702)
        goto LABEL_74;
      v20 = &__p;
    }
    if (LODWORD(v20->__r_.__value_.__l.__data_) != 909207138 || (_get_cpu_capabilities() & 0x78000000uLL) < 0x10000001)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_75:
  if (*(char *)(a1 + 359) < 0)
  {
    if (!*(_QWORD *)(a1 + 344))
      goto LABEL_80;
    goto LABEL_79;
  }
  if (*(_BYTE *)(a1 + 359))
LABEL_79:
    BNNSGraphCompileOptionsSetOutputPath();
LABEL_80:
  v21 = (const char *)(a1 + 64);
  *(_QWORD *)(a1 + 224) = BNNSGraphCompileFromFile_v2();
  *(_QWORD *)(a1 + 232) = v22;
  BNNSGraphCompileOptionsDestroy();
  if (!*(_QWORD *)(a1 + 224))
  {
    v28 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 87) < 0)
      v21 = *(const char **)v21;
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to compile mil2bnns model from: '%s'", v21);
    MEMORY[0x1DF0EC99C](v28, &buf);
    __cxa_throw(v28, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v23 = BNNSGraphContextMake();
  *(_QWORD *)(a1 + 256) = v23;
  *(_QWORD *)(a1 + 264) = v24;
  if (!v23)
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 87) < 0)
      v21 = *(const char **)v21;
    InferenceEngine::StringFormatter::StringFormatter(&buf, "failed to create context: '%s'", v21);
    MEMORY[0x1DF0EC99C](v29, &buf);
    __cxa_throw(v29, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(_BYTE *)(a1 + 136))
  {
    WorkspaceSize_v2 = (InferenceEngine *)BNNSGraphContextSetArgumentType();
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    WorkspaceSize_v2 = (InferenceEngine *)BNNSGraphContextGetWorkspaceSize_v2();
    *(_QWORD *)(a1 + 240) = WorkspaceSize_v2;
    if (WorkspaceSize_v2)
      WorkspaceSize_v2 = (InferenceEngine *)malloc_type_valloc((size_t)WorkspaceSize_v2, 0x3F0997A8uLL);
    *(_QWORD *)(a1 + 248) = WorkspaceSize_v2;
  }
  LogObject = InferenceEngine::Diagnostics_GetLogObject(WorkspaceSize_v2);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 87) < 0)
      v21 = *(const char **)v21;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Load model from %s", (uint8_t *)&buf, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE510F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  void **v36;
  void *v38;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
        operator delete(a16);
      if (a27 < 0)
        operator delete(a22);
      if (*(char *)(v33 + 359) < 0)
        operator delete(*v36);
      v38 = *(void **)(v33 + 312);
      if (v38)
      {
        *(_QWORD *)(v33 + 320) = v38;
        operator delete(v38);
      }
      a22 = (void *)(v33 + 288);
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      InferenceEngine::MilInferenceModel::~MilInferenceModel((InferenceEngine::MilInferenceModel *)v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(char *__s@<X2>, char *a2@<X0>, const void **a3@<X1>, std::string *a4@<X8>)
{
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(a2, a3, (uint64_t)__p, a4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1DE5110F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::~Mil2BnnsMilInferenceModel(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = off_1EA923910;
  BNNSGraphContextDestroy_v2();
  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
    free(v2);
  if (*((char *)this + 359) < 0)
    v3 = *((_QWORD *)this + 43);
  else
    v3 = *((unsigned __int8 *)this + 359);
  v4 = (void *)*((_QWORD *)this + 28);
  if (v3)
    munmap(v4, *((_QWORD *)this + 29));
  else
    free(v4);
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  v5 = (void *)*((_QWORD *)this + 39);
  if (v5)
  {
    *((_QWORD *)this + 40) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  InferenceEngine::MilInferenceModel::~MilInferenceModel(this);
}

double InferenceEngine::Mil2BnnsMilInferenceModel::build_io@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  double result;
  double v8[3];

  std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>(a2, a3, a4, a5, (unsigned __int8 *)(a1 + 136), v8);
  result = v8[0];
  *a6 = *(_OWORD *)v8;
  return result;
}

void InferenceEngine::Mil2BnnsMilInferenceModel::prepare(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  uint64_t v2;
  _QWORD *i;
  const void *v4;
  InferenceEngine::MilIO *v5;
  InferenceEngine::MilIO *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int ArgumentPosition;
  uint64_t v11;
  uint64_t data_size;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *j;
  const void *v17;
  InferenceEngine::MilIO *v18;
  InferenceEngine::MilIO *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  std::string __p;
  InferenceEngine::MilIO *v44;
  std::__shared_weak_count *v45;

  InferenceEngine::MilInferenceModel::prepare(this);
  v2 = *((_QWORD *)this + 26) + *((_QWORD *)this + 21);
  *((_QWORD *)this + 34) = v2;
  *((_QWORD *)this + 35) = malloc_type_malloc(16 * v2, 0x10A20408DAD38D9uLL);
  for (i = (_QWORD *)*((_QWORD *)this + 20); i; i = (_QWORD *)*i)
  {
    v4 = (const void *)i[5];
    if (v4
    {
      v6 = v5;
      v7 = (std::__shared_weak_count *)i[6];
      v44 = v5;
      v45 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
      v44 = 0;
      v45 = 0;
    }
    InferenceEngine::MilIO::get_io_name(v6, &__p);
    ArgumentPosition = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *((_DWORD *)v6 + 32) = ArgumentPosition;
    if (*((_BYTE *)this + 136))
      v11 = *((_QWORD *)v6 + 17);
    else
      v11 = *((_QWORD *)v6 + 11);
    data_size = InferenceEngine::DataTensor::get_data_size(v6);
    v13 = (_QWORD *)(*((_QWORD *)this + 35) + 16 * *((int *)v6 + 32));
    *v13 = v11;
    v13[1] = data_size;
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  for (j = (_QWORD *)*((_QWORD *)this + 25); j; j = (_QWORD *)*j)
  {
    v17 = (const void *)j[5];
    if (v17
    {
      v19 = v18;
      v20 = (std::__shared_weak_count *)j[6];
      v44 = v18;
      v45 = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
    else
    {
      v20 = 0;
      v19 = 0;
      v44 = 0;
      v45 = 0;
    }
    InferenceEngine::MilIO::get_io_name(v19, &__p);
    v23 = BNNSGraphGetArgumentPosition();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *((_DWORD *)v19 + 32) = v23;
    if (*((_BYTE *)this + 136))
      v24 = *((_QWORD *)v19 + 17);
    else
      v24 = *((_QWORD *)v19 + 11);
    v25 = InferenceEngine::DataTensor::get_data_size(v19);
    v26 = (_QWORD *)(*((_QWORD *)this + 35) + 16 * *((int *)v19 + 32));
    *v26 = v24;
    v26[1] = v25;
    if (v20)
    {
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v29 = *((_QWORD *)this + 26) + *((_QWORD *)this + 21);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::vector<std::vector<unsigned long long>>::resize((uint64_t *)this + 36, v29);
  if (v29)
  {
    v30 = 0;
    v31 = (char **)((char *)this + 312);
    v32 = (_QWORD *)((char *)this + 328);
    v33 = (char *)*((_QWORD *)this + 40);
    do
    {
      if ((unint64_t)v33 >= *v32)
      {
        v34 = (v33 - *v31) >> 4;
        if ((unint64_t)(v34 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v35 = *v32 - (_QWORD)*v31;
        v36 = v35 >> 3;
        if (v35 >> 3 <= (unint64_t)(v34 + 1))
          v36 = v34 + 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)this + 328, v37);
        else
          v38 = 0;
        v39 = &v38[16 * v34];
        *(_OWORD *)v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v41 = (char *)*((_QWORD *)this + 39);
        v40 = (char *)*((_QWORD *)this + 40);
        v42 = v39;
        if (v40 != v41)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
            v42 -= 16;
            v40 -= 16;
          }
          while (v40 != v41);
          v40 = *v31;
        }
        v33 = v39 + 16;
        *((_QWORD *)this + 39) = v42;
        *((_QWORD *)this + 40) = v39 + 16;
        *((_QWORD *)this + 41) = &v38[16 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_OWORD *)v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v33 += 16;
      }
      *((_QWORD *)this + 40) = v33;
      ++v30;
    }
    while (v30 != v29);
  }
}

void sub_1DE5115C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void InferenceEngine::Mil2BnnsMilInferenceModel::clean(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  uint64_t **i;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  free(*((void **)this + 35));
  *((_QWORD *)this + 40) = *((_QWORD *)this + 39);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 36);
  if (*((_BYTE *)this + 136))
  {
    for (i = (uint64_t **)*((_QWORD *)this + 25); i; i = (uint64_t **)*i)
    {
      v4 = (std::__shared_weak_count *)i[6];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
        v3[11] = 0;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      else
      {
        v3[11] = 0;
      }
    }
  }
  InferenceEngine::MilInferenceModel::clean(this);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::set_input(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  const void *v11;
  int *v12;
  int *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  std::string __p;
  int *v28;
  std::__shared_weak_count *v29;
  kaldi::quasar::Vocab *v30;
  std::__shared_weak_count *v31;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v30 = *(kaldi::quasar::Vocab **)a2;
  v31 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  InferenceEngine::MilInferenceModel::set_input(a1, &v30);
  v7 = v31;
  if (v31)
  {
    v8 = (unint64_t *)&v31->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_BYTE *)(a1 + 136))
  {
    kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)a2, &__p);
    *(_QWORD *)&v25 = &__p;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 144, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v25);
    v11 = (const void *)*((_QWORD *)v10 + 5);
    if (v11
    {
      v13 = v12;
      v14 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
      v28 = v12;
      v29 = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
    }
    else
    {
      v14 = 0;
      v13 = 0;
      v28 = 0;
      v29 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = v13[32];
    InferenceEngine::DataTensor::get_shape((InferenceEngine::DataTensor *)v13, 0, &__p.__r_.__value_.__l.__data_);
    v26 = 0;
    v25 = 0uLL;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((char *)&v25, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
    v18 = *(_QWORD *)(a1 + 288);
    v19 = v18 + 24 * (int)v17;
    v20 = *(void **)v19;
    if (*(_QWORD *)v19)
    {
      *(_QWORD *)(v18 + 24 * (int)v17 + 8) = v20;
      operator delete(v20);
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 16) = 0;
    }
    *(_OWORD *)v19 = v25;
    *(_QWORD *)(v18 + 24 * v17 + 16) = v26;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * v17);
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 312) + 16 * v17);
    *v22 = (*(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * v17 + 8) - v21) >> 3;
    v22[1] = v21;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v14)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1DE511990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void InferenceEngine::Mil2BnnsMilInferenceModel::execute(InferenceEngine::Mil2BnnsMilInferenceModel *this)
{
  int v1;
  InferenceEngine *v2;
  int v3;
  NSObject *LogObject;
  int v5;
  void *exception;
  std::string buf;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 136))
  {
    v1 = BNNSGraphContextSetDynamicShapes_v2();
    if (v1 < 0)
    {
      v5 = v1;
      exception = __cxa_allocate_exception(0x10uLL);
      InferenceEngine::StringFormatter::StringFormatter(&buf, "Set dynamic shape for execution failed with return code %d", v5);
      MEMORY[0x1DF0EC99C](exception, &buf);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
  }
  v2 = (InferenceEngine *)BNNSGraphContextExecute_v2();
  v3 = (int)v2;
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v2);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "BNNS execution finished with return code %d", (uint8_t *)&buf, 8u);
  }
}

void sub_1DE511B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void InferenceEngine::Mil2BnnsMilIO::~Mil2BnnsMilIO(void **this)
{
  *this = off_1EA923658;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  *this = &unk_1EA923968;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
}

{
  *this = off_1EA923658;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  *this = &unk_1EA923968;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  InferenceEngine::DataTensor::~DataTensor((InferenceEngine::DataTensor *)this);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA933F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BNNSNDArrayDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA933F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::string,0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unsigned __int8 *v7;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
  }
  else
  {
    v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v7, a4);
  }
}

void sub_1DE511DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_1DE511E60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be string, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  return std::string::operator=(this, *(const std::string **)(a1 + 8));
}

void sub_1DE511F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilIO,std::allocator<InferenceEngine::Mil2BnnsMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X4>, unsigned __int8 *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xB0uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1DE512014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,BOOL &,std::allocator<InferenceEngine::Mil2BnnsMilIO>,0>(_QWORD *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, unsigned __int8 *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EA935F80;
  InferenceEngine::Mil2BnnsMilIO::Mil2BnnsMilIO((uint64_t)(a1 + 3), a2, a3, a4, a5, *a6);
  return a1;
}

void sub_1DE512064(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<std::vector<unsigned long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DE512220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE5123D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void InferenceEngine::Mil2BnnsMilIO::read_framework_specific_buffer()
{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 66, "dtype_ == \"fp32\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 68, "dtype_ == \"fp16\"");
}

{
  __assert_rtn("read_framework_specific_buffer", "Mil2BnnsInferenceModule.cpp", 70, "dtype_ == \"int32\"");
}

double InferenceEngine::BaseInferenceController::BaseInferenceController(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v3;
  double result;

  v3 = InferenceEngine::MLInferenceModel::MLInferenceModel(a1, a2, a3);
  *v3 = off_1EA9237B8;
  result = 0.0;
  *(_OWORD *)(v3 + 3) = 0u;
  *(_OWORD *)(v3 + 5) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  v3[8] = 0;
  v3[9] = 0;
  return result;
}

void InferenceEngine::BaseInferenceController::~BaseInferenceController(InferenceEngine::BaseInferenceController *this)
{
  char *v2;

  *(_QWORD *)this = off_1EA9237B8;
  v2 = (char *)this + 24;
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)v2);
  InferenceEngine::MLInferenceModel::~MLInferenceModel(this);
}

_QWORD *InferenceEngine::BaseInferenceController::set_io_processor(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), a2);
}

void InferenceEngine::BaseInferenceController::set_input(uint64_t a1, kaldi::quasar::Vocab **a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  std::string __p;
  std::string *p_p;

  v3 = a1 + 24;
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v4 + 5, (uint64_t *)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE512564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *InferenceEngine::BaseInferenceController::set_input(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v4 + 5, a3);
}

uint64_t InferenceEngine::BaseInferenceController::clean(InferenceEngine::BaseInferenceController *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 24);
  return InferenceEngine::MLInferenceModel::clean(this);
}

unsigned __int8 *InferenceEngine::BaseInferenceController::get_output@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 *v8;

  v8 = a2;
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v8);
  v5 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void InferenceEngine::BaseInferenceController::execute(InferenceEngine::MilInferenceModel **this)
{
  uint64_t v2;
  char *v3;
  float v4;
  uint64_t *v5;
  int data;
  InferenceEngine *v7;
  std::chrono::steady_clock::time_point v8;
  InferenceEngine::MilInferenceModel *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  unsigned __int8 *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  unsigned __int8 *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *LogObject;
  NSObject *v28;
  _BOOL8 v29;
  NSObject *v30;
  std::string v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  std::string *v36;
  uint8_t buf[8];
  _BYTE v38[10];
  __int16 v39;
  double v40;
  uint64_t v41;

  v2 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  v3 = (char *)(this + 3);
  v4 = 0.0;
  while (1)
  {
    InferenceEngine::MLInferenceModel::get_model_parameters(this, (uint64_t)buf);
    v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(buf, "loop");
    LODWORD(v35.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v5, (int *)&v35);
    data = (int)v35.__r_.__value_.__l.__data_;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v38, buf[0]);
    if ((int)v2 >= data)
      break;
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v9 = this[8];
    if (!v9
      || !(**(unsigned int (***)(InferenceEngine::MilInferenceModel *, char *, uint64_t))v9)(v9, v3, v2))
    {
      InferenceEngine::MLInferenceModel::get_all_input_names(this, (uint64_t)buf);
      v10 = *(__int128 **)buf;
      v11 = *(__int128 **)v38;
      while (v10 != v11)
      {
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v12 = *v10;
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v12;
        }
        *(_QWORD *)&v32 = &v35;
        v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v35, (uint64_t)&std::piecewise_construct, (__int128 **)&v32);
        v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
        v33 = *((_QWORD *)v13 + 5);
        v34 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        InferenceEngine::MLInferenceModel::set_input((uint64_t)this, &v33);
        v17 = v34;
        if (v34)
        {
          v18 = (unint64_t *)&v34->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v10 = (__int128 *)((char *)v10 + 24);
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      InferenceEngine::MLInferenceModel::execute((InferenceEngine::MLInferenceModel *)this);
      InferenceEngine::MLInferenceModel::get_all_output_names(this, (uint64_t)buf);
      v20 = *(__int128 **)buf;
      v21 = *(__int128 **)v38;
      while (v20 != v21)
      {
        if (*((char *)v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
        }
        else
        {
          v22 = *v20;
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v31, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
        else
          v31 = v35;
        InferenceEngine::MLInferenceModel::get_output((uint64_t)this);
        v36 = &v35;
        v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v35, (uint64_t)&std::piecewise_construct, (__int128 **)&v36);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)(v23 + 40), &v32);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v20 = (__int128 *)((char *)v20 + 24);
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      InferenceEngine::MLInferenceModel::reset((InferenceEngine::MLInferenceModel *)this);
      v7 = this[8];
      if (v7)
      {
        v7 = (InferenceEngine *)(*(uint64_t (**)(InferenceEngine *, char *, uint64_t))(*(_QWORD *)v7 + 8))(v7, v3, v2);
        if ((_DWORD)v7)
          break;
      }
      LogObject = InferenceEngine::Diagnostics_GetLogObject(v7);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v2;
        _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Loop %d has completed!", buf, 8u);
      }
      v4 = v4 + (float)((std::chrono::steady_clock::now().__d_.__rep_ - v8.__d_.__rep_) / 1000);
    }
    v2 = (v2 + 1);
  }
  v28 = InferenceEngine::Diagnostics_GetLogObject(v7);
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v29)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DE3F6000, v28, OS_LOG_TYPE_INFO, "Inference completed!", buf, 2u);
  }
  v30 = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v2;
    *(_WORD *)v38 = 2048;
    *(double *)&v38[2] = v4;
    v39 = 2048;
    v40 = (float)(v4 / (float)(int)v2) / 1000.0;
    _os_log_impl(&dword_1DE3F6000, v30, OS_LOG_TYPE_INFO, "%i steps, total_time_microseconds: %.3f us, average time per step: %.6f ms", buf, 0x1Cu);
  }
}

void sub_1DE512ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a31);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1DE512E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1DE512ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::S1NARDecoderIOProcessor(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  _BYTE v7[8];
  uint64_t *v8;
  _BYTE v9[8];
  uint64_t *v10;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  *(_QWORD *)a1 = off_1EA923808;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  v4 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7[0];
  v7[0] = v4;
  v5 = *(uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v8 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  return a1;
}

void sub_1DE513024(_Unwind_Exception *a1)
{
  uint64_t **v1;
  uint64_t **v2;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v2);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::S1NARDecoderIOProcessor::~S1NARDecoderIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_1EA923808;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::process_inputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  InferenceEngine::DataTensor *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  float v31;
  double v32;
  kaldi::quasar::Vocab *v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float *v38;
  float *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  InferenceEngine *v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t i;
  InferenceEngine *v65;
  NSObject *LogObject;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  kaldi::quasar::Vocab *v77;
  std::__shared_weak_count *v78;
  kaldi::quasar::Vocab *v79;
  std::__shared_weak_count *v80;
  uint64_t v81[3];
  uint64_t v82[3];
  __n128 v83;
  uint64_t v84;
  __n128 v85;
  std::string v86;
  std::string v87;
  __int128 v88;
  uint64_t v89;
  void *v90[2];
  uint64_t v91;
  void *__p;
  _BYTE *v93;
  uint64_t v94;
  kaldi::quasar::Vocab *v95[2];
  kaldi::quasar::Vocab *v96[2];
  InferenceEngine::DataTensor *v97;
  std::__shared_weak_count *v98;
  std::string buf;
  std::string v100;
  kaldi::quasar::Vocab *v101;
  kaldi::quasar::Vocab *v102;
  std::string v103;
  kaldi::quasar::Vocab *v104;
  kaldi::quasar::Vocab *v105;
  std::string v106;
  _QWORD v107[2];
  std::string v108;

  v108.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v100, "enc_output");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v100);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = (InferenceEngine::DataTensor *)*((_QWORD *)v6 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v97 = v8;
  v98 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  v96[0] = 0;
  v96[1] = 0;
  v95[0] = 0;
  v95[1] = 0;
  InferenceEngine::DataTensor::get_shape(v8, 0, &v100.__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)v100.__r_.__value_.__l.__data_;
  v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
  operator delete(v100.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::get_shape(v8, 0, &v100.__r_.__value_.__l.__data_);
  v12 = *(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8);
  v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
  operator delete(v100.__r_.__value_.__l.__data_);
  if (v11 != 1)
    __assert_rtn("process_inputs", "S1NARDecoderIOProcessor.cpp", 31, "B == 1");
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, "semantic");
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v100);
    if (!v13)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](v96, (uint64_t *)v13 + 5);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v100, "semantic_inf_mask");
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v100);
    if (!v14)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](v95, (uint64_t *)v14 + 5);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
  }
  else
  {
    v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "vq_mask_id");
    LODWORD(v90[0]) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v15, (int *)v90);
    *(float *)&v88 = (float)SLODWORD(v90[0]);
    std::vector<float>::vector(&__p, v12, &v88);
    std::vector<std::vector<float>>::vector(&v100, 1uLL, (uint64_t)&__p);
    if (__p)
    {
      v93 = __p;
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "semantic");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v100, v90);
    v16 = *(_OWORD *)v90;
    v90[0] = 0;
    v90[1] = 0;
    v17 = (std::__shared_weak_count *)v96[1];
    *(_OWORD *)v96 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)v90[1];
    if (v90[1])
    {
      v21 = (unint64_t *)((char *)v90[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v94) < 0)
      operator delete(__p);
    LODWORD(v88) = 0;
    std::vector<float>::vector(v90, v12, &v88);
    std::vector<std::vector<float>>::vector(&__p, 1uLL, (uint64_t)v90);
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "semantic_inf_mask");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v88);
    v23 = v88;
    v88 = 0uLL;
    v24 = (std::__shared_weak_count *)v95[1];
    *(_OWORD *)v95 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v91) < 0)
      operator delete(v90[0]);
    v90[0] = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
    __p = &v100;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "loop");
  LODWORD(v100.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v30, (int *)&v100);
  v31 = ((float)a3 + 1.0) / (float)SLODWORD(v100.__r_.__value_.__l.__data_);
  v32 = cos(v31 * 3.14159265 * 0.5);
  InferenceEngine::DataTensor::unsqueeze(v96[0], 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v96[0], &v100);
  v93 = 0;
  v94 = 0;
  __p = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&__p, *(_QWORD *)v100.__r_.__value_.__l.__data_, *(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v100.__r_.__value_.__l.__data_) >> 3));
  v90[0] = &v100;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
  InferenceEngine::DataTensor::squeeze(v96[0], 2);
  InferenceEngine::DataTensor::unsqueeze(v95[0], 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v95[0], &v100);
  v90[1] = 0;
  v91 = 0;
  v90[0] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v90, *(_QWORD *)v100.__r_.__value_.__l.__data_, *(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v100.__r_.__value_.__l.__data_) >> 3));
  *(_QWORD *)&v88 = &v100;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  InferenceEngine::DataTensor::squeeze(v95[0], 2);
  v33 = v97;
  InferenceEngine::DataTensor::get_3d_array<float>(v97, &v100);
  v89 = 0;
  v88 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v88, *(_QWORD *)v100.__r_.__value_.__l.__data_, *(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v100.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v100.__r_.__value_.__l.__data_) >> 3));
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v34 = InferenceEngine::DataTensor::accumulate_sum(v95[0]);
  v35 = v32;
  v36 = (float)v12;
  v37 = v12 - (int)v34 - (int)(float)((float)v12 * v35);
  if (v37 <= 0)
  {
    kaldi::quasar::Vocab::OOvWord(v96[0], &buf);
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v57 = buf.__r_.__value_.__r.__words[2];
    memset(&buf, 0, sizeof(buf));
    v100.__r_.__value_.__r.__words[2] = v57;
    v101 = v96[0];
    v102 = v96[1];
    if (v96[1])
    {
      v58 = (unint64_t *)((char *)v96[1] + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    kaldi::quasar::Vocab::OOvWord(v95[0], &v87);
    v103 = v87;
    memset(&v87, 0, sizeof(v87));
    v104 = v95[0];
    v105 = v95[1];
    if (v95[1])
    {
      v60 = (unint64_t *)((char *)v95[1] + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    kaldi::quasar::Vocab::OOvWord(v33, &v86);
    v106 = v86;
    memset(&v86, 0, sizeof(v86));
    v107[0] = v33;
    v107[1] = v98;
    if (v98)
    {
      v62 = (unint64_t *)&v98->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &v100, &v108);
    for (i = 0; i != -15; i -= 5)
    {
      v65 = (InferenceEngine *)std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v107[i]);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v106.__r_.__value_.__l.__data_ + i * 8));
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v65);
    v56 = 1;
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      LODWORD(v100.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v100.__r_.__value_.__r.__words[0]) = a3;
      _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Skip loop %d", (uint8_t *)&v100, 8u);
    }
  }
  else
  {
    v84 = 0;
    v83 = 0uLL;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v83, (uint64_t)__p, (uint64_t)v93, 0xAAAAAAAAAAAAAAABLL * ((v93 - (_BYTE *)__p) >> 3));
    memset(v82, 0, sizeof(v82));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v82, (uint64_t)v90[0], (uint64_t)v90[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v90[1] - (char *)v90[0]) >> 3));
    InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v83, v82, 1, (uint64_t *)&v85);
    memset(v81, 0, sizeof(v81));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v81, v88, *((uint64_t *)&v88 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3));
    InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v85, v81, 1, (uint64_t *)&v100);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::string::basic_string[abi:ne180100]<0>(&buf, "input_data");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v100, &v86);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)v86.__r_.__value_.__l.__data_, 0);
    std::string::basic_string[abi:ne180100]<0>(&buf, "input_data_lens");
    v38 = (float *)operator new(4uLL);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    *v38 = v36;
    v87.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
    v87.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v87, &v79);
    if (v87.__r_.__value_.__r.__words[0])
    {
      v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&buf, "k_tensor");
    v39 = (float *)operator new(4uLL);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    *v39 = (float)v37;
    v87.__r_.__value_.__l.__size_ = (std::string::size_type)(v39 + 1);
    v87.__r_.__value_.__r.__words[2] = (std::string::size_type)(v39 + 1);
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v87, &v77);
    if (v87.__r_.__value_.__r.__words[0])
    {
      v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v86.__r_.__value_.__l.__data_, &buf);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v40 + 5, (uint64_t *)&v86);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord(v79, &buf);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v41 + 5, (uint64_t *)&v79);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord(v77, &buf);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v42 + 5, (uint64_t *)&v77);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord(v95[0], &buf);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v43 + 5, (uint64_t *)v95);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord(v96[0], &buf);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    v45 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v44 + 5, (uint64_t *)v96);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v46 = InferenceEngine::Diagnostics_GetLogObject(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
      _os_log_impl(&dword_1DE3F6000, v46, OS_LOG_TYPE_INFO, "Prepare S1NARDecoder inputs finished for loop %d", (uint8_t *)&buf, 8u);
    }
    v47 = v78;
    if (v78)
    {
      v48 = (unint64_t *)&v78->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v80;
    if (v80)
    {
      v51 = (unint64_t *)&v80->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    size = (std::__shared_weak_count *)v86.__r_.__value_.__l.__size_;
    if (v86.__r_.__value_.__l.__size_)
    {
      v54 = (unint64_t *)(v86.__r_.__value_.__l.__size_ + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v56 = 0;
  }
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  v67 = (std::__shared_weak_count *)v95[1];
  if (v95[1])
  {
    v68 = (unint64_t *)((char *)v95[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v96[1];
  if (v96[1])
  {
    v71 = (unint64_t *)((char *)v96[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v98;
  if (v98)
  {
    v74 = (unint64_t *)&v98->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  return v56;
}

void sub_1DE513CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,char a55)
{
  uint64_t v55;

  *(_QWORD *)(v55 - 192) = &a37;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 192));
  *(_QWORD *)(v55 - 192) = &a41;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 192));
  *(_QWORD *)(v55 - 192) = &a47;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 192));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v55 - 248);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(uint64_t a1)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t InferenceEngine::S1NARDecoderIOProcessor::process_outputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  InferenceEngine::DataTensor *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  std::__shared_weak_count *v24;
  InferenceEngine::DataTensor *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  std::__shared_weak_count *v29;
  InferenceEngine::DataTensor *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  NSObject *LogObject;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::string::size_type v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  kaldi::quasar::Vocab *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t i;
  InferenceEngine *v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v86;
  int v87;
  std::string __p;
  std::string v90;
  std::string v91;
  uint64_t *v92[3];
  uint64_t *v93[3];
  std::vector<int> v94;
  std::vector<int> v95;
  std::vector<int> v96;
  InferenceEngine::DataTensor *v97;
  std::__shared_weak_count *v98;
  InferenceEngine::DataTensor *v99;
  std::__shared_weak_count *v100;
  InferenceEngine::DataTensor *v101;
  std::__shared_weak_count *v102;
  kaldi::quasar::Vocab *v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;
  std::string buf;
  unsigned __int128 v108;
  std::string v109;
  unsigned __int128 v110;
  std::string v111;
  _QWORD v112[2];
  std::string v113;

  v113.__r_.__value_.__l.__size_ = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&buf, "semantic");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  *(_QWORD *)&v106 = v6;
  *((_QWORD *)&v106 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "semantic_inf_mask");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = *((_QWORD *)v9 + 6);
  *(_QWORD *)&v105 = v11;
  *((_QWORD *)&v105 + 1) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "enc_output");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v103 = (kaldi::quasar::Vocab *)*((_QWORD *)v14 + 5);
  v104 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "pred_code");
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (InferenceEngine::DataTensor *)*((_QWORD *)v18 + 5);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
  v101 = v20;
  v102 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "index_b");
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v23)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v25 = (InferenceEngine::DataTensor *)*((_QWORD *)v23 + 5);
  v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
  v99 = v25;
  v100 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&buf, "index_t");
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&buf);
  if (!v28)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v30 = (InferenceEngine::DataTensor *)*((_QWORD *)v28 + 5);
  v29 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
  v97 = v30;
  v98 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::get_1d_array<int>(v20, &v96);
  InferenceEngine::DataTensor::get_1d_array<int>(v25, &v95);
  InferenceEngine::DataTensor::get_1d_array<int>(v30, &v94);
  InferenceEngine::DataTensor::get_2d_array<float>(v11, v93);
  InferenceEngine::DataTensor::get_2d_array<float>(v6, v92);
  v34 = v95.__end_ - v95.__begin_;
  if (v34 != v94.__end_ - v94.__begin_)
  {
    v86 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    v87 = 103;
    goto LABEL_132;
  }
  if (v34 != v96.__end_ - v96.__begin_)
  {
    v86 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    v87 = 104;
LABEL_132:
    __assert_rtn("process_outputs", "S1NARDecoderIOProcessor.cpp", v87, v86);
  }
  if (v96.__end_ != v96.__begin_)
  {
    v35 = 0;
    if (v34 <= 1)
      v36 = 1;
    else
      v36 = v95.__end_ - v95.__begin_;
    v37 = v93[0];
    do
    {
      v38 = v95.__begin_[v35];
      v39 = v94.__begin_[v35];
      if (*(float *)(v37[3 * v38] + 4 * v39) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v33);
        v33 = os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if (v33)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v38;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v39;
          _os_log_error_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! inf_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      v37 = v93[0];
      *(_DWORD *)(v93[0][3 * v38] + 4 * v39) = 1065353216;
      *(float *)(v92[0][3 * v38] + 4 * v39) = (float)v96.__begin_[v35++];
    }
    while (v36 != v35);
  }
  kaldi::quasar::Vocab::OOvWord(v6, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v92, &v91);
  v41 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = 0uLL;
  v106 = v41;
  if (v5)
  {
    v42 = (unint64_t *)&v5->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  size = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v45 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v105, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v93, &v91);
  v47 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = 0uLL;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  v105 = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v54 = v106;
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v106, &v91);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
  v55 = v91.__r_.__value_.__r.__words[2];
  memset(&v91, 0, sizeof(v91));
  buf.__r_.__value_.__r.__words[2] = v55;
  v108 = __PAIR128__(*((unint64_t *)&v106 + 1), v54);
  if (*((_QWORD *)&v106 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = v105;
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v105, &v90);
  v109 = v90;
  memset(&v90, 0, sizeof(v90));
  v110 = __PAIR128__(*((unint64_t *)&v105 + 1), v58);
  if (*((_QWORD *)&v105 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = v103;
  kaldi::quasar::Vocab::OOvWord(v103, &__p);
  v111 = __p;
  memset(&__p, 0, sizeof(__p));
  v112[0] = v61;
  v112[1] = v104;
  if (v104)
  {
    v62 = (unint64_t *)&v104->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &buf, &v113);
  for (i = 0; i != -15; i -= 5)
  {
    v65 = (InferenceEngine *)std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v112[i]);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v111.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v66 = InferenceEngine::Diagnostics_GetLogObject(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_1DE3F6000, v66, OS_LOG_TYPE_INFO, "Process S1NARDecoder outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v94.__begin_)
  {
    v94.__end_ = v94.__begin_;
    operator delete(v94.__begin_);
  }
  if (v95.__begin_)
  {
    v95.__end_ = v95.__begin_;
    operator delete(v95.__begin_);
  }
  if (v96.__begin_)
  {
    v96.__end_ = v96.__begin_;
    operator delete(v96.__begin_);
  }
  v67 = v98;
  if (v98)
  {
    v68 = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v100;
  if (v100)
  {
    v71 = (unint64_t *)&v100->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v102;
  if (v102)
  {
    v74 = (unint64_t *)&v102->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v104;
  if (v104)
  {
    v77 = (unint64_t *)&v104->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return 0;
}

void sub_1DE514938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52)
{
  uint64_t v52;

  *(_QWORD *)(v52 - 224) = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 224));
  *(_QWORD *)(v52 - 224) = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 224));
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v52 - 256);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v52 - 240);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  std::string *v11;
  std::string *v12;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = __str == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = (_QWORD *)v8;
      v11 = __str;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        v12 = v4 + 1;
        std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)(v8 + 40), (uint64_t *)&v4[1]);
        v10 = *(_QWORD **)v8;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique(a1, v8);
        v11 = (std::string *)((char *)v4 + 40);
        if (!v10)
          break;
        v4 = (std::string *)((char *)v4 + 40);
        v8 = (uint64_t)v10;
      }
      while (&v12->__r_.__value_.__r.__words[2] != (std::string::size_type *)a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node((uint64_t)a1, v10);
    v4 = v11;
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>((uint64_t)a1, (unsigned __int8 *)v4, (__int128 *)v4);
    v4 = (std::string *)((char *)v4 + 40);
  }
}

void sub_1DE514C54(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1DE514C70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
      v9 = v4 <= a2 ? a2 % v4 : a2;
    else
      v9 = (v4 - 1) & a2;
    v10 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(unsigned __int8 **)i)
      {
        v12 = *((_QWORD *)i + 1);
        if (v12 == a2)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3) & 1) != 0)
            return i;
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4)
              v12 %= v4;
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    v15 = 1;
    if (v4 >= 3)
      v15 = (v4 & (v4 - 1)) != 0;
    v16 = v15 | (2 * v4);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1DE515168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1DE5151DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

uint64_t InferenceEngine::GreedyDecoderIOProcessor::GreedyDecoderIOProcessor(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  _BYTE v7[8];
  uint64_t *v8;
  _BYTE v9[8];
  uint64_t *v10;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, a2);
  InferenceEngine::BaseIOProcessor::BaseIOProcessor(a1, (uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  *(_QWORD *)a1 = off_1EA923828;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  v4 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7[0];
  v7[0] = v4;
  v5 = *(uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v8 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  return a1;
}

void sub_1DE515340(_Unwind_Exception *a1)
{
  uint64_t **v1;
  uint64_t **v2;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v2);
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::GreedyDecoderIOProcessor::~GreedyDecoderIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)off_1EA923828;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 4, *((unsigned __int8 *)this + 24));
  InferenceEngine::BaseIOProcessor::~BaseIOProcessor(this);
}

uint64_t InferenceEngine::GreedyDecoderIOProcessor::process_inputs(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  float *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *p_p;
  uint64_t *v20;
  uint64_t *v21;
  std::string __p;
  __int128 v23;
  kaldi::quasar::Vocab *v24[2];
  std::string **v25;
  char v26;
  float *v27;
  float *v28;
  float *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v24[1] = 0;
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
    v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "bos_token_id");
    LODWORD(v25) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v6, (int *)&v25);
    LODWORD(a1) = (_DWORD)v25;
    v7 = (float *)operator new(4uLL);
    v27 = v7;
    *v7 = (float)(int)a1;
    v28 = v7 + 1;
    v29 = v7 + 1;
    v20 = 0;
    v21 = 0;
    p_p = 0;
    v25 = &p_p;
    v26 = 0;
    p_p = (std::string *)operator new(0x18uLL);
    v20 = (uint64_t *)p_p;
    v21 = (uint64_t *)&p_p[1];
    v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v21, (uint64_t)&v27, (uint64_t)&v30, p_p);
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&p_p, &v23);
    v8 = v23;
    v23 = 0uLL;
    v9 = (std::__shared_weak_count *)v24[1];
    *(_OWORD *)v24 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v25 = &p_p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord(v24[0], &__p);
    p_p = &__p;
    v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v15 + 5, (uint64_t *)v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v16 = (std::__shared_weak_count *)v24[1];
    if (v24[1])
    {
      v17 = (unint64_t *)((char *)v24[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return 0;
}

void sub_1DE5155F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL InferenceEngine::GreedyDecoderIOProcessor::process_outputs(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  kaldi::quasar::Vocab *v5;
  kaldi::quasar::Vocab *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 *v13;
  std::__shared_weak_count *v14;
  InferenceEngine::DataTensor *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  float *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  kaldi::quasar::Vocab *v26;
  std::string::size_type v27;
  unint64_t *v28;
  unint64_t v29;
  kaldi::quasar::Vocab *v30;
  std::string::size_type v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t i;
  float v35;
  uint64_t *v36;
  int data;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string __p;
  uint64_t v49[3];
  __n128 v50;
  uint64_t v51;
  std::string v52;
  int **v53;
  uint64_t v54;
  float **v55;
  _QWORD *v56;
  _QWORD v57[2];
  std::__shared_weak_count *v58;
  kaldi::quasar::Vocab *v59;
  std::__shared_weak_count *v60;
  kaldi::quasar::Vocab *v61[2];
  std::string *v62;
  std::string __str;
  _QWORD v64[2];
  __int128 v65;
  std::string::size_type v66;
  _QWORD v67[2];
  std::string v68;

  v68.__r_.__value_.__l.__size_ = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__str, "input_ids");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__str);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (kaldi::quasar::Vocab *)*((_QWORD *)v4 + 5);
  v5 = (kaldi::quasar::Vocab *)*((_QWORD *)v4 + 6);
  v61[0] = v6;
  v61[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)((char *)v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "encoder_hidden_states");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__str);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v59 = (kaldi::quasar::Vocab *)*((_QWORD *)v9 + 5);
  v60 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "output_id");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__str);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (InferenceEngine::DataTensor *)*((_QWORD *)v13 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v57[1] = v15;
  v58 = v14;
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::get_2d_array<int>(v15, &v53);
  v18 = **v53;
  memset(&__str, 0, sizeof(__str));
  v19 = (float *)operator new(4uLL);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  *v19 = (float)v18;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v19 + 1);
  __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 + 1);
  v56 = 0;
  v57[0] = 0;
  v55 = 0;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  v52.__r_.__value_.__s.__data_[8] = 0;
  v55 = (float **)operator new(0x18uLL);
  v56 = v55;
  v57[0] = v55 + 3;
  v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)v57, (uint64_t)&__str, (uint64_t)v64, v55);
  if (__str.__r_.__value_.__r.__words[0])
  {
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  InferenceEngine::DataTensor::get_2d_array<float>(v6, &v53);
  kaldi::quasar::Vocab::OOvWord(v6, &__str);
  v51 = 0;
  v50 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v50, (uint64_t)v53, v54, 0xAAAAAAAAAAAAAAABLL * ((v54 - (uint64_t)v53) >> 3));
  memset(v49, 0, sizeof(v49));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v49, (uint64_t)v55, (uint64_t)v56, 0xAAAAAAAAAAAAAAABLL * ((float **)v56 - v55));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v50, v49, 1, (uint64_t *)&v52);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v52, &__p);
  v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)v61 = v20;
  if (v5)
  {
    v21 = (unint64_t *)((char *)v5 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(kaldi::quasar::Vocab *))(*(_QWORD *)v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v62 = &v52;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v62 = (std::string *)v49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v62 = (std::string *)&v50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v26 = v61[0];
  kaldi::quasar::Vocab::OOvWord(v61[0], &v52);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  v27 = v52.__r_.__value_.__r.__words[2];
  memset(&v52, 0, sizeof(v52));
  __str.__r_.__value_.__r.__words[2] = v27;
  v64[0] = v26;
  v64[1] = v61[1];
  if (v61[1])
  {
    v28 = (unint64_t *)((char *)v61[1] + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = v59;
  kaldi::quasar::Vocab::OOvWord(v59, &__p);
  v65 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v31 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  v66 = v31;
  v67[0] = v30;
  v67[1] = v60;
  if (v60)
  {
    v32 = (unint64_t *)&v60->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &__str, &v68);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v67[i]);
    if (*((char *)&v66 + i * 8 + 7) < 0)
      operator delete(*(void **)((char *)&v65 + i * 8));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v35 = **v55;
  v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "eos_token_id");
  LODWORD(v52.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v36, (int *)&v52);
  data = (int)v52.__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v61[1];
  if (v61[1])
  {
    v45 = (unint64_t *)((char *)v61[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return v35 == (float)data;
}

void sub_1DE515BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t i;

  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>>::~pair(v37 + i);
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  *(_QWORD *)(v38 - 176) = &a27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 176));
  *(_QWORD *)(v38 - 176) = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 176));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_1DE515D34()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1DE515D1CLL);
}

void sub_1DE515D4C()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1DE515D24);
}

void sub_1DE515D64()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1DE515D2CLL);
}

void InferenceEngine::DataTensor::get_2d_array<int>(InferenceEngine::DataTensor *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  void *__p[3];

  v4 = (char *)this + 32;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    v5 = *((unsigned __int8 *)this + 55);
    if (v5 != 4)
    {
      if (v5 != 5)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (*(_DWORD *)v4 != 842231910)
    {
      if (*(_DWORD *)v4 != 909209702)
        goto LABEL_20;
      goto LABEL_22;
    }
LABEL_21:
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EE0]))
      InferenceEngine::DataTensor::get_2d_array<float>();
    goto LABEL_22;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 == 4)
  {
    if (**(_DWORD **)v4 == 842231910)
      goto LABEL_21;
    if (**(_DWORD **)v4 == 909209702)
      goto LABEL_22;
    v6 = *((_QWORD *)this + 5);
  }
  if (v6 != 5)
    goto LABEL_20;
  v4 = *(char **)v4;
LABEL_11:
  v7 = *(_DWORD *)v4;
  v8 = v4[4];
  if (v7 != 863268457 || v8 != 50)
LABEL_20:
    InferenceEngine::DataTensor::get_2d_array<float>();
  if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EF0]))
    InferenceEngine::DataTensor::get_2d_array<float>();
LABEL_22:
  v10 = *((_QWORD *)this + 11);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)__p);
  InferenceEngine::DataUtils::convert_data_to_2d_array<int>(v10, (uint64_t)__p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DE515ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DE515F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataUtils::convert_data_to_2d_array<int>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v4;
  std::vector<int>::size_type v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  std::vector<int>::value_type __x;
  std::vector<int> v13;

  v4 = *(unint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 16)
    InferenceEngine::DataUtils::convert_data_to_2d_array<float>();
  v8 = *v4;
  v7 = v4[1];
  __x = 0;
  std::vector<int>::vector(&v13, v7, &__x);
  std::vector<std::vector<int>>::vector(a3, v8, (uint64_t)&v13);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  v9 = *(unint64_t **)a2;
  if (**(_QWORD **)a2)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      memcpy(*(void **)(*a3 + v10), (const void *)(a1 + 4 * v9[1] * v11++), 4 * v9[1]);
      v9 = *(unint64_t **)a2;
      v10 += 24;
    }
    while (v11 < **(_QWORD **)a2);
  }
}

void sub_1DE516064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::DataTensor(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  *(_QWORD *)a1 = &off_1EA923608;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (a1 + 56 == a4)
    goto LABEL_17;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 56), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v9 = *(_QWORD **)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64) - (_QWORD)v9;
  if (!v10)
    goto LABEL_17;
  v11 = v10 >> 3;
  v12 = v11 <= 1 ? 1 : v11;
  if (*v9 != -1)
  {
    v13 = 1;
    do
    {
      v14 = v13;
      if (v12 == v13)
        break;
      v15 = v9[v13++];
    }
    while (v15 != -1);
    if (v14 >= v11)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
      InferenceEngine::DataTensor::allocate_memory(a1, (uint64_t)__p);
      if (v18 < 0)
        operator delete(__p[0]);
    }
  }
  return a1;
}

void sub_1DE5161D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 31) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

void *InferenceEngine::DataTensor::allocate_memory(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  int v6;
  void *v7;
  void *result;
  void *exception;
  int v10;
  const char *v11;
  int *v12;
  const char *v13;
  void *v14;
  int v15;
  int *v16;
  char *v17;
  std::string v18;

  InferenceEngine::DataTensor::init_data_size(a1);
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    v5 = open(v4, 0);
    if (v5 < 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v10 = *(char *)(a2 + 23);
      v11 = *(const char **)a2;
      v12 = __error();
      if (v10 >= 0)
        v13 = (const char *)a2;
      else
        v13 = v11;
      InferenceEngine::StringFormatter::StringFormatter(&v18, "MemoryMap unable to open '%s': error %d\n", v13, *v12);
      MEMORY[0x1DF0EC99C](exception, &v18);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v6 = v5;
    v7 = mmap(0, *(_QWORD *)(a1 + 80), 1, 1, v5, 0);
    *(_QWORD *)(a1 + 88) = v7;
    if (v7 == (void *)-1)
    {
      v14 = __cxa_allocate_exception(0x10uLL);
      v15 = *__error();
      v16 = __error();
      v17 = strerror(*v16);
      InferenceEngine::StringFormatter::StringFormatter(&v18, "MemoryMap unable to mmap, error %d/%s", v15, v17);
      MEMORY[0x1DF0EC99C](v14, &v18);
      __cxa_throw(v14, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    return (void *)close(v6);
  }
  else
  {
    free(*(void **)(a1 + 88));
    result = malloc_type_valloc(*(_QWORD *)(a1 + 80), 0xD897BAE6uLL);
    *(_QWORD *)(a1 + 88) = result;
  }
  return result;
}

void sub_1DE5163B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v18;

  if (a17 < 0)
    operator delete(__p);
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::DataTensor(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &off_1EA923608;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  if (a1 + 56 == a4)
    goto LABEL_17;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 56), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v11 = *(_QWORD **)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64) - (_QWORD)v11;
  if (!v12)
    goto LABEL_17;
  v13 = v12 >> 3;
  v14 = v13 <= 1 ? 1 : v13;
  if (*v11 != -1)
  {
    v15 = 1;
    do
    {
      v16 = v15;
      if (v14 == v15)
        break;
      v17 = v11[v15++];
    }
    while (v17 != -1);
    if (v16 >= v13)
LABEL_17:
      InferenceEngine::DataTensor::allocate_memory(a1, a5);
  }
  return a1;
}

void sub_1DE516520(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::init_data_size(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  std::string v16;

  v1 = *(uint64_t **)(this + 56);
  v2 = *(_QWORD *)(this + 64) - (_QWORD)v1;
  if (v2)
  {
    v3 = v2 >> 3;
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    v5 = 1;
    do
    {
      v6 = *v1++;
      v5 *= v6;
      --v4;
    }
    while (v4);
  }
  else
  {
    v5 = 1;
  }
  v7 = (const char *)(this + 32);
  if (*(char *)(this + 55) < 0)
  {
    v9 = *(_QWORD *)(this + 40);
    if (v9 == 4)
    {
      if (**(_DWORD **)v7 == 842231910)
        goto LABEL_24;
      if (**(_DWORD **)v7 == 909209702)
      {
LABEL_27:
        v13 = 2;
        goto LABEL_28;
      }
      v9 = *(_QWORD *)(this + 40);
    }
    if (v9 != 5)
      goto LABEL_29;
    v8 = *(const char **)v7;
    goto LABEL_19;
  }
  if (*(_BYTE *)(this + 55) != 4)
  {
    v8 = (const char *)(this + 32);
    if (*(_BYTE *)(this + 55) != 5)
      goto LABEL_29;
LABEL_19:
    v10 = *(_DWORD *)v8;
    v11 = *((unsigned __int8 *)v8 + 4);
    if (v10 != 863268457 || v11 != 50)
    {
LABEL_29:
      v14 = this;
      exception = __cxa_allocate_exception(0x10uLL);
      if (*(char *)(v14 + 55) < 0)
        v7 = *(const char **)v7;
      InferenceEngine::StringFormatter::StringFormatter(&v16, "DataTensor type not supported: '%s'", v7);
      MEMORY[0x1DF0EC99C](exception, &v16);
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    goto LABEL_24;
  }
  if (*(_DWORD *)v7 != 842231910)
  {
    if (*(_DWORD *)v7 != 909209702)
      goto LABEL_29;
    goto LABEL_27;
  }
LABEL_24:
  v13 = 4;
LABEL_28:
  *(_QWORD *)(this + 80) = v13 * v5;
  return this;
}

void sub_1DE5166F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void InferenceEngine::DataTensor::~DataTensor(InferenceEngine::DataTensor *this)
{
  int v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA923608;
  v2 = *((unsigned __int8 *)this + 96);
  v3 = (void *)*((_QWORD *)this + 11);
  if (v2)
    munmap(v3, *((_QWORD *)this + 10));
  else
    free(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  InferenceEngine::DataTensor::~DataTensor(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t InferenceEngine::DataTensor::get_data_size(InferenceEngine::DataTensor *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t InferenceEngine::DataTensor::get_rank(InferenceEngine::DataTensor *this)
{
  return (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
}

void InferenceEngine::DataTensor::set_rank(InferenceEngine::DataTensor *this, unint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  _BYTE *v14;

  if (!a2)
    InferenceEngine::DataTensor::set_rank();
  v2 = a2;
  v12 = 1;
  std::vector<unsigned long>::vector(&__p, a2, &v12);
  v5 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  v6 = (char *)this + 56;
  v7 = (unint64_t)(v4 - v5) >> 3;
  if ((int)v7 - 1 >= 0)
  {
    v8 = __p;
    v9 = (uint64_t *)(v5 + 8 * (v7 - 1));
    v10 = v2 - 1;
    do
    {
      if (v10 < 0)
        __assert_rtn("set_rank", "DataTensor.cpp", 100, "new_shape_dim >= 0");
      v11 = *v9--;
      v8[v10] = v11;
      LODWORD(v7) = v7 - 1;
      --v10;
    }
    while ((int)v7 > 0);
  }
  if (v6 != (char *)&__p)
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v6, (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_1DE5168C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::get_shape(InferenceEngine::DataTensor *this@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  if (v4 != v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3 + 2;
    do
    {
      if (!a2 || *(_QWORD *)(v5 + 8 * v9) != 1)
      {
        if ((unint64_t)v8 >= *v10)
        {
          v12 = *a3;
          v13 = (v8 - *a3) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = *v10 - (_QWORD)v12;
          if (v15 >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a3 + 2), v16);
            v12 = *a3;
            v8 = a3[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * v13];
          *(_QWORD *)v18 = *(_QWORD *)(v5 + 8 * v9);
          v11 = v18 + 8;
          while (v8 != v12)
          {
            v19 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v18 - 1) = v19;
            v18 -= 8;
          }
          *a3 = v18;
          a3[1] = v11;
          a3[2] = &v17[8 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_QWORD *)v8 = *(_QWORD *)(v5 + 8 * v9);
          v11 = v8 + 8;
        }
        a3[1] = v11;
        v8 = v11;
        v5 = *((_QWORD *)this + 7);
        v4 = *((_QWORD *)this + 8);
      }
      ++v9;
    }
    while (v9 < (v4 - v5) >> 3);
  }
}

void sub_1DE516A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 InferenceEngine::DataTensor::cast_data_to_target_tensor@<H0>(uint64_t a1@<X0>, uint64_t *a2@<X1>)
{
  const void **v5;
  uint64_t v6;
  unsigned __int8 **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  _WORD *v24;
  int v25;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  float *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int16 *v36;
  float *v37;
  __int16 v38;
  unint64_t v40;
  unint64_t v41;
  float *v42;
  _WORD *v43;
  float v44;
  void *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *exception;
  uint64_t v58;
  void *v59;
  const char *v60;
  std::string v62;

  InferenceEngine::DataTensor::valid_shape((uint64_t *)(a1 + 56), (_QWORD *)(*a2 + 56), 0, 0);
  v5 = (const void **)(a1 + 32);
  v6 = *a2;
  v7 = (unsigned __int8 **)(*a2 + 32);
  v8 = *(unsigned __int8 *)(a1 + 55);
  v9 = *(_QWORD *)(a1 + 40);
  if ((v8 & 0x80u) == 0)
    v10 = *(unsigned __int8 *)(a1 + 55);
  else
    v10 = *(_QWORD *)(a1 + 40);
  v11 = *(unsigned __int8 *)(v6 + 55);
  v12 = *(_QWORD *)(v6 + 40);
  if ((v11 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(v6 + 55);
  else
    v13 = *(_QWORD *)(v6 + 40);
  if (v10 != v13)
    goto LABEL_17;
  if ((v11 & 0x80u) == 0)
    v14 = (unsigned __int8 **)(*a2 + 32);
  else
    v14 = (unsigned __int8 **)*v7;
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v5, v14, *(_QWORD *)(a1 + 40)))
      goto LABEL_22;
LABEL_27:
    memcpy(*(void **)(v6 + 88), *(const void **)(a1 + 88), *(_QWORD *)(a1 + 80));
    return LOWORD(_S0);
  }
  if (!*(_BYTE *)(a1 + 55))
    goto LABEL_27;
  v15 = (unsigned __int8 *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 55);
  while (*v15 == *(unsigned __int8 *)v14)
  {
    ++v15;
    v14 = (unsigned __int8 **)((char *)v14 + 1);
    if (!--v16)
      goto LABEL_27;
  }
LABEL_17:
  if ((v8 & 0x80) == 0)
  {
    if (v8 != 4)
    {
      v17 = (unsigned __int8 *)(a1 + 32);
      if (v8 != 5)
        goto LABEL_74;
      goto LABEL_33;
    }
    if (*(_DWORD *)v5 != 909209702)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_22:
  if (v9 == 4)
  {
    if (*(_DWORD *)*v5 != 909209702)
    {
      if ((v8 & 0x80) != 0)
      {
        if (*(_DWORD *)*v5 != 842231910)
          goto LABEL_74;
        goto LABEL_64;
      }
      if (v8 != 4)
        goto LABEL_74;
LABEL_29:
      if (*(_DWORD *)v5 != 842231910)
        goto LABEL_74;
LABEL_64:
      if ((v11 & 0x80) != 0)
      {
        if (v12 != 4)
          goto LABEL_89;
        v7 = (unsigned __int8 **)*v7;
      }
      else if (v11 != 4)
      {
        goto LABEL_89;
      }
      if (*(_DWORD *)v7 == 909209702)
      {
        v40 = *(_QWORD *)(a1 + 80);
        if (v40 >= 4)
        {
          v41 = v40 >> 2;
          v42 = *(float **)(a1 + 88);
          v43 = *(_WORD **)(v6 + 88);
          do
          {
            v44 = *v42++;
            _S0 = v44;
            __asm { FCVT            H0, S0 }
            *v43++ = LOWORD(_S0);
            --v41;
          }
          while (v41);
        }
        return LOWORD(_S0);
      }
LABEL_89:
      exception = __cxa_allocate_exception(0x10uLL);
      v58 = a1;
      v59 = exception;
      if (*(char *)(v58 + 55) < 0)
        v5 = (const void **)*v5;
      v60 = (const char *)(*a2 + 32);
      if (*(char *)(*a2 + 55) < 0)
        v60 = *(const char **)v60;
      InferenceEngine::StringFormatter::StringFormatter(&v62, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v60);
      MEMORY[0x1DF0EC99C](v59, &v62);
      __cxa_throw(v59, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
LABEL_53:
    if ((v11 & 0x80) != 0)
    {
      if (v12 != 4)
        goto LABEL_84;
      v7 = (unsigned __int8 **)*v7;
    }
    else if (v11 != 4)
    {
      goto LABEL_84;
    }
    if (*(_DWORD *)v7 == 842231910)
    {
      v34 = *(_QWORD *)(a1 + 80);
      if (v34 >= 2)
      {
        v35 = v34 >> 1;
        v36 = *(__int16 **)(a1 + 88);
        v37 = *(float **)(v6 + 88);
        do
        {
          v38 = *v36++;
          _H0 = v38;
          __asm { FCVT            S0, H0 }
          *v37++ = _S0;
          --v35;
        }
        while (v35);
      }
      return LOWORD(_S0);
    }
LABEL_84:
    v53 = __cxa_allocate_exception(0x10uLL);
    v54 = a1;
    v55 = v53;
    if (*(char *)(v54 + 55) < 0)
      v5 = (const void **)*v5;
    v56 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0)
      v56 = *(const char **)v56;
    InferenceEngine::StringFormatter::StringFormatter(&v62, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v56);
    MEMORY[0x1DF0EC99C](v55, &v62);
    __cxa_throw(v55, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v9 != 5)
    goto LABEL_74;
  v17 = (unsigned __int8 *)*v5;
LABEL_33:
  v18 = *(_DWORD *)v17;
  v19 = v17[4];
  if (v18 != 863268457 || v19 != 50)
  {
LABEL_74:
    v45 = __cxa_allocate_exception(0x10uLL);
    v46 = a1;
    v47 = v45;
    if (*(char *)(v46 + 55) < 0)
      v5 = (const void **)*v5;
    v48 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0)
      v48 = *(const char **)v48;
    InferenceEngine::StringFormatter::StringFormatter(&v62, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v48);
    MEMORY[0x1DF0EC99C](v47, &v62);
    __cxa_throw(v47, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if ((v11 & 0x80) != 0)
  {
    if (v12 != 4)
      goto LABEL_79;
    v7 = (unsigned __int8 **)*v7;
  }
  else if (v11 != 4)
  {
LABEL_79:
    v49 = __cxa_allocate_exception(0x10uLL);
    v50 = a1;
    v51 = v49;
    if (*(char *)(v50 + 55) < 0)
      v5 = (const void **)*v5;
    v52 = (const char *)(*a2 + 32);
    if (*(char *)(*a2 + 55) < 0)
      v52 = *(const char **)v52;
    InferenceEngine::StringFormatter::StringFormatter(&v62, "DataTensor type cast not supported: src_dtype=%s, target_dtype=%s", (const char *)v5, v52);
    MEMORY[0x1DF0EC99C](v51, &v62);
    __cxa_throw(v51, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (*(_DWORD *)v7 == 842231910)
  {
    v29 = *(_QWORD *)(a1 + 80);
    if (v29 >= 4)
    {
      v30 = v29 >> 2;
      v31 = *(int **)(a1 + 88);
      v32 = *(float **)(v6 + 88);
      do
      {
        v33 = *v31++;
        _S0 = (float)v33;
        *v32++ = (float)v33;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    if (*(_DWORD *)v7 != 909209702)
      goto LABEL_79;
    v21 = *(_QWORD *)(a1 + 80);
    if (v21 >= 4)
    {
      v22 = v21 >> 2;
      v23 = *(int **)(a1 + 88);
      v24 = *(_WORD **)(v6 + 88);
      do
      {
        v25 = *v23++;
        _S0 = (float)v25;
        __asm { FCVT            H0, S0 }
        *v24++ = LOWORD(_S0);
        --v22;
      }
      while (v22);
    }
  }
  return LOWORD(_S0);
}

void sub_1DE516F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v18;

  if (a17 < 0)
    operator delete(__p);
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(exception_object);
}

uint64_t *InferenceEngine::DataTensor::valid_shape(uint64_t *result, _QWORD *a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v10;
  unint64_t v11;
  int v12;
  InferenceEngine::DataUtils *v13;
  void *exception;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  std::string v20;

  v4 = *result;
  v5 = result[1];
  v6 = v5 - *result;
  if (v6 >> 3 != (uint64_t)(a2[1] - *a2) >> 3)
    InferenceEngine::DataTensor::valid_shape();
  if (v5 != v4)
  {
    v10 = result;
    v11 = 0;
    v12 = ((unint64_t)v6 >> 3) - 1;
    do
    {
      v13 = *(InferenceEngine::DataUtils **)(v4 + 8 * v11);
      if (a3)
      {
        result = (uint64_t *)InferenceEngine::DataUtils::compare_shape(v13, *(_QWORD *)(*a2 + 8 * v12), a4);
        if ((result & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v15 = a2;
          v16 = exception;
          InferenceEngine::StringFormatter::StringFormatter(&v20, "Shape mismatch! src_shape[%d]=%d, dst_shape[%d]=%d", v11, *(_QWORD *)(*v10 + 8 * v11), v12, *(_QWORD *)(*v15 + 8 * v12));
          MEMORY[0x1DF0EC99C](v16, &v20);
          __cxa_throw(v16, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      else
      {
        result = (uint64_t *)InferenceEngine::DataUtils::compare_shape(v13, *(_QWORD *)(*a2 + 8 * v11), a4);
        if ((result & 1) == 0)
        {
          v17 = __cxa_allocate_exception(0x10uLL);
          v18 = a2;
          v19 = v17;
          InferenceEngine::StringFormatter::StringFormatter(&v20, "Shape mismatch! src_shape[%d]=%d, dst_shape[%d]=%d", v11, *(_QWORD *)(*v10 + 8 * v11), v11, *(_QWORD *)(*v18 + 8 * v11));
          MEMORY[0x1DF0EC99C](v19, &v20);
          __cxa_throw(v19, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      ++v11;
      v4 = *v10;
      --v12;
    }
    while (v11 < (v10[1] - *v10) >> 3);
  }
  return result;
}

void sub_1DE517120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  char v20;

  if (a19 < 0)
    operator delete(__p);
  if ((v20 & 1) != 0)
    __cxa_free_exception(v19);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::DataTensor::get_size(InferenceEngine::DataTensor *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = (uint64_t *)*((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 8) - (_QWORD)v1;
  if (!v2)
    return 1;
  v3 = v2 >> 3;
  if (v3 <= 1)
    v3 = 1;
  result = 1;
  do
  {
    v5 = *v1++;
    result *= v5;
    --v3;
  }
  while (v3);
  return result;
}

void InferenceEngine::DataTensor::resize(uint64_t a1, uint64_t a2)
{
  char *v3;
  void *__p[2];
  char v5;

  v3 = (char *)(a1 + 56);
  if (v3 != (char *)a2)
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  InferenceEngine::DataTensor::allocate_memory(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1DE517200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL InferenceEngine::DataUtils::compare_shape(InferenceEngine::DataUtils *this, int a2, char a3)
{
  _BOOL4 v4;

  if ((a3 & 1) != 0)
  {
    v4 = (_DWORD)this == -1 || a2 == -1;
    return (_DWORD)this == a2 || v4;
  }
  else
  {
    if ((this & 0x80000000) != 0)
      InferenceEngine::DataUtils::compare_shape();
    if (a2 < 0)
      InferenceEngine::DataUtils::compare_shape();
    return (_DWORD)this == a2;
  }
}

uint64_t InferenceEngine::DataTensor::set_shape(InferenceEngine::DataTensor *this, uint64_t a2)
{
  char *v3;

  v3 = (char *)this + 56;
  if (v3 != (char *)a2)
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v3, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return InferenceEngine::DataTensor::init_data_size((uint64_t)this);
}

void InferenceEngine::DataTensor::reshape(InferenceEngine::DataTensor *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v3 = (uint64_t *)*((_QWORD *)a1 + 7);
  v4 = *((_QWORD *)a1 + 8) - (_QWORD)v3;
  if (v4)
  {
    v5 = v4 >> 3;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    v7 = 1;
    do
    {
      v8 = *v3++;
      v7 *= v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    v7 = 1;
  }
  v9 = *(uint64_t **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v12 = v10 - (_QWORD)v9;
  if ((uint64_t *)v10 == v9)
  {
    v14 = 1;
  }
  else
  {
    if ((unint64_t)(v12 >> 3) <= 1)
      v13 = 1;
    else
      v13 = v12 >> 3;
    v14 = 1;
    v15 = v9;
    do
    {
      v16 = *v15++;
      v14 *= v16;
      --v13;
    }
    while (v13);
  }
  if (v7 != v14)
    InferenceEngine::DataTensor::reshape();
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v9, v10, v12 >> 3);
  InferenceEngine::DataTensor::set_shape(a1, (uint64_t)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_1DE517370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::unsqueeze(InferenceEngine::DataTensor *this, int a2)
{
  void *__p;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;

  if ((a2 & 0x80000000) == 0 && *((_QWORD *)this + 8) == *((_QWORD *)this + 7))
    InferenceEngine::DataTensor::unsqueeze();
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v8);
  v7 = 1;
  std::vector<unsigned long>::insert((uint64_t)&v8, (char *)v8 + 8 * a2, &v7);
  v5 = 0;
  v6 = 0;
  __p = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v8, (uint64_t)v9, (v9 - (_BYTE *)v8) >> 3);
  InferenceEngine::DataTensor::set_shape(this, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_1DE51743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long>::push_back(&__p, a3);
    v4 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1DE5175DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InferenceEngine::DataTensor::squeeze(InferenceEngine::DataTensor *this, int a2)
{
  void *v4;
  char *v5;
  int64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;
  void *v10;
  char *v11;

  if ((a2 >= 0) >= (unint64_t)((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3))
    InferenceEngine::DataTensor::squeeze();
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v10);
  if (a2 >= (unint64_t)((v11 - (_BYTE *)v10) >> 3))
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  if (*((_QWORD *)v10 + a2) != 1)
    __assert_rtn("squeeze", "DataTensor.cpp", 236, "get_shape().at(dimension) == 1");
  v11 = (char *)v10;
  operator delete(v10);
  InferenceEngine::DataTensor::get_shape(this, 0, (char **)&v10);
  v4 = v10;
  v5 = (char *)v10 + 8 * a2;
  v6 = v11 - (v5 + 8);
  if (v11 != v5 + 8)
  {
    memmove(v5, v5 + 8, v11 - (v5 + 8));
    v4 = v10;
  }
  v11 = &v5[v6];
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, v4, (uint64_t)&v5[v6], (&v5[v6] - (_BYTE *)v4) >> 3);
  InferenceEngine::DataTensor::set_shape(this, (uint64_t)&__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = (char *)v10;
    operator delete(v10);
  }
}

void sub_1DE517748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

float InferenceEngine::DataTensor::accumulate_sum(InferenceEngine::DataTensor *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = (uint64_t *)*((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 8) - (_QWORD)v1;
  if (v2)
  {
    v3 = v2 >> 3;
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    v5 = 1;
    do
    {
      v6 = *v1++;
      v5 *= (_DWORD)v6;
      --v4;
    }
    while (v4);
  }
  else
  {
    v5 = 1;
  }
  return cblas_sasum(v5, *((const float **)this + 11), 1);
}

uint64_t InferenceEngine::MilIO::MilIO(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  _QWORD *v7;
  std::string *v8;
  __int128 v9;

  v7 = (_QWORD *)InferenceEngine::DataTensor::DataTensor(a1, a2, a4, a5);
  *v7 = &unk_1EA923968;
  v8 = (std::string *)(v7 + 13);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1DE517828(_Unwind_Exception *a1)
{
  InferenceEngine::DataTensor *v1;

  InferenceEngine::DataTensor::~DataTensor(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilIO::get_io_name(InferenceEngine::MilIO *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
}

void sub_1DE517948(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1DF0ECF6C](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DE5179E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] = v4 + 8;
}

void InferenceEngine::DataTensor::set_rank()
{
  __assert_rtn("set_rank", "DataTensor.cpp", 94, "rank > 0");
}

void InferenceEngine::DataTensor::valid_shape()
{
  __assert_rtn("valid_shape", "DataTensor.cpp", 194, "src_shape.size() == dst_shape.size()");
}

void InferenceEngine::DataUtils::compare_shape()
{
  __assert_rtn("compare_shape", "DataTensor.cpp", 298, "src_dim >= 0");
}

{
  __assert_rtn("compare_shape", "DataTensor.cpp", 299, "dst_dim >= 0");
}

void InferenceEngine::DataTensor::reshape()
{
  __assert_rtn("reshape", "DataTensor.cpp", 217, "get_size() == DataUtils::get_size(new_shape)");
}

void InferenceEngine::DataTensor::unsqueeze()
{
  __assert_rtn("unsqueeze", "DataTensor.cpp", 225, "0 <= dimension <= get_rank()");
}

void InferenceEngine::DataTensor::squeeze()
{
  __assert_rtn("squeeze", "DataTensor.cpp", 235, "0 <= dimension < get_rank()");
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(uint64_t a1, char *a2)
{
  _BOOL4 v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  unsigned __int8 v12[8];
  uint64_t *v13;
  unsigned __int8 v14;
  void *__p[2];
  char v16;
  unsigned __int8 v17[8];
  unint64_t v18;
  unsigned __int8 v19[8];
  uint64_t *v20;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19, (uint64_t)a2);
  InferenceEngine::SoundStormIOProcessor::SoundStormIOProcessor(a1, v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  *(_QWORD *)a1 = off_1EA923848;
  std::string::basic_string[abi:ne180100]<0>(__p, "p2a");
  v14 = 0;
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v14);
  v17[0] = 4;
  v18 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "p2a");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v6 = *(_BYTE *)v5;
  *(_BYTE *)v5 = v17[0];
  v17[0] = v6;
  v7 = (uint64_t *)v5[1];
  v5[1] = v18;
  v18 = (unint64_t)v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v18, v17[0]);
  if (v16 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "prompt_attention");
  v14 = 0;
  v12[0] = 4;
  v13 = (uint64_t *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(a2, (const void **)__p, &v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "prompt_attention");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  v9 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v12[0];
  v12[0] = v9;
  v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v13;
  v13 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  if (v16 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1DE517E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t **v18;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&a9);
  if (a17 < 0)
    operator delete(__p);
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(v18);
  _Unwind_Resume(a1);
}

void sub_1DE517E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  JUMPOUT(0x1DE517E4CLL);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_vq_target(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  __int128 v19;
  float v20;
  void *v21[2];
  char v22;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(v21, "pred_enc_output");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v21);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, &__p.__r_.__value_.__l.__data_);
  v9 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "target");
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a4, (uint64_t *)v10 + 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = (unsigned __int8 *)(a1 + 24);
    v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, (int *)&v19);
    v13 = (int)v19;
    v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v11, "vq_mask_id");
    LODWORD(v19) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v14, (int *)&v19);
    v20 = (float)(int)v19;
    std::vector<float>::vector(v21, v13, &v20);
    std::vector<std::vector<float>>::vector(&__p, v9, (uint64_t)v21);
    if (v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "target");
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, &v19);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v19);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a4, 0);
    v21[0] = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a4, &__p);
  v21[0] = &__p;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v21);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v18 + 5, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE5180B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  __p = &a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void sub_1DE51813C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE518134);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_q_token_mask(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _DWORD *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  kaldi::quasar::Vocab *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int128 v20;
  void *v21[2];
  char v22;
  std::string v23;
  void *__p;
  _BYTE *v25;

  *a4 = 0;
  a4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v23, "pred_enc_output");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)&__p);
  v9 = *((_QWORD *)__p + 1);
  v25 = __p;
  operator delete(__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  v12 = __p;
  v11 = v25;
  if (v25 != __p)
  {
    v13 = 0;
    do
    {
      if (v12[v13] == a3)
      {
        LODWORD(v20) = 0;
        std::vector<float>::vector(v21, v9, &v20);
        std::vector<std::vector<float>>::vector(&v23, 1uLL, (uint64_t)v21);
        if (v21[0])
        {
          v21[1] = v21[0];
          operator delete(v21[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v21, "q_token_mask");
        InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v23, &v20);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, &v20);
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (v22 < 0)
          operator delete(v21[0]);
        v21[0] = &v23;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
        v12 = __p;
        v11 = v25;
      }
      ++v13;
    }
    while (v13 < (v11 - (_BYTE *)v12) >> 2);
  }
  v17 = *a4;
  if (!*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "q_token_mask");
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v23);
    if (!v18)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a4, (uint64_t *)v18 + 5);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v17 = *a4;
  }
  kaldi::quasar::Vocab::OOvWord(v17, &v23);
  v21[0] = &v23;
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (__int128 **)v21);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v19 + 5, (uint64_t *)a4);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1DE5183B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_pred_data(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  InferenceEngine::DataTensor *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  uint64_t v29[3];
  uint64_t v30[3];
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t *v34[3];
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  InferenceEngine::DataTensor *v41;
  std::__shared_weak_count *v42;
  InferenceEngine::DataTensor *v43;
  std::__shared_weak_count *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  InferenceEngine::DataTensor *v48;
  std::__shared_weak_count *v49;
  std::string *p_p;

  std::string::basic_string[abi:ne180100]<0>(&v45, "pred_enc_output");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v48 = v6;
  v49 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  std::string::basic_string[abi:ne180100]<0>(&v45, "target");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v43 = v11;
  v44 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  std::string::basic_string[abi:ne180100]<0>(&v45, "q_token_mask");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v45);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (InferenceEngine::DataTensor *)*((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v41 = v16;
  v42 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  InferenceEngine::DataTensor::get_shape(v6, 0, &v45);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v38);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v45, (uint64_t)*v38, (uint64_t)v38[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v38[1] - (_BYTE *)*v38) >> 3));
  v35 = (void **)&v38;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v35);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, &v35);
  v39 = 0;
  v40 = 0;
  v38 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v38, (uint64_t)*v35, (uint64_t)v35[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v35[1] - (_BYTE *)*v35) >> 3));
  v34[0] = (uint64_t *)&v35;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  InferenceEngine::DataTensor::unsqueeze(v16, 2);
  InferenceEngine::DataTensor::get_3d_array<float>(v16, v34);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v35, *v34[0], v34[0][1], 0xAAAAAAAAAAAAAAABLL * ((v34[0][1] - *v34[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  InferenceEngine::DataTensor::squeeze(v16, 2);
  v32 = 0;
  v31 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v31, (uint64_t)v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v35) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v30, (uint64_t)v45, (uint64_t)v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v31, v30, 1, (uint64_t *)&v33);
  memset(v29, 0, sizeof(v29));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v29, (uint64_t)v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v33, v29, 1, (uint64_t *)v34);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v34, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a2, 0);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v19 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v34[0] = (uint64_t *)&v35;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  v35 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v35);
  v38 = (void **)&v45;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v38);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v22 = v44;
  if (v44)
  {
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v49;
  if (v49)
  {
    v26 = (unint64_t *)&v49->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1DE518914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t ***__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t **a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v34);
  __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a28 = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a31 = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a34 = v35 - 120;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 152);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v35 - 96);
  _Unwind_Resume(a1);
}

void sub_1DE518A0C()
{
  JUMPOUT(0x1DE5189BCLL);
}

void sub_1DE518A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a10 = (void **)&a25;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  JUMPOUT(0x1DE5189CCLL);
}

void sub_1DE518A30()
{
  JUMPOUT(0x1DE5189CCLL);
}

void sub_1DE518A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28)
{
  a25 = (void **)&a28;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a25);
  JUMPOUT(0x1DE5189DCLL);
}

void sub_1DE518A54()
{
  JUMPOUT(0x1DE5189DCLL);
}

void sub_1DE518A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,char a31)
{
  a28 = (void **)&a31;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a28);
  JUMPOUT(0x1DE5189ECLL);
}

void sub_1DE518A74()
{
  JUMPOUT(0x1DE5189ECLL);
}

void sub_1DE518A80()
{
  JUMPOUT(0x1DE5189F4);
}

void sub_1DE518A88()
{
  JUMPOUT(0x1DE5189FCLL);
}

void sub_1DE518A90()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE5189F4);
}

void sub_1DE518AA8()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE5189FCLL);
}

void sub_1DE518AC0()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x1DE518A04);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_prompt_data(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  uint64_t v21[3];
  __n128 v22;
  uint64_t v23;
  uint64_t *v24[3];
  void **v25;
  uint64_t v26;
  uint64_t v27;
  InferenceEngine::DataTensor *v28;
  std::__shared_weak_count *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  InferenceEngine::DataTensor *v33;
  std::__shared_weak_count *v34;
  std::string *p_p;

  std::string::basic_string[abi:ne180100]<0>(&v30, "prompt_enc_output");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v33 = v6;
  v34 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
  std::string::basic_string[abi:ne180100]<0>(&v30, "prompt_target");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v30);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v28 = v11;
  v29 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
  InferenceEngine::DataTensor::get_shape(v6, 0, &v30);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v25);
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v30, (uint64_t)*v25, (uint64_t)v25[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v25[1] - (_BYTE *)*v25) >> 3));
  v24[0] = (uint64_t *)&v25;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v24);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v25, *v24[0], v24[0][1], 0xAAAAAAAAAAAAAAABLL * ((v24[0][1] - *v24[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v23 = 0;
  v22 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v22, (uint64_t)v30, (uint64_t)v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v21, (uint64_t)v25, v26, 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v25) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v22, v21, 1, (uint64_t *)v24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "prompt_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v24, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a2, 0);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v14 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v24[0] = (uint64_t *)&v25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  v25 = (void **)&v30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1DE518E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
  __p = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = v28 - 104;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void sub_1DE518ED0()
{
  JUMPOUT(0x1DE518E98);
}

void sub_1DE518ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  JUMPOUT(0x1DE518EA8);
}

void sub_1DE518EF0()
{
  JUMPOUT(0x1DE518EA8);
}

void sub_1DE518EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  JUMPOUT(0x1DE518EB8);
}

void sub_1DE518F10()
{
  JUMPOUT(0x1DE518EB8);
}

void sub_1DE518F1C()
{
  JUMPOUT(0x1DE518EC0);
}

void sub_1DE518F24()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  JUMPOUT(0x1DE518EC0);
}

void sub_1DE518F3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    operator delete(*(void **)(v0 - 104));
  JUMPOUT(0x1DE518EC8);
}

void InferenceEngine::P2ASoundStormIOProcessor::build_multinomial_factor(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  int v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t *v17;
  unsigned __int8 *v18;
  __int128 v19;
  void *p_p;
  void *v21;
  _DWORD *v22;
  std::string __p;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&p_p, "layer_q");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&p_p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v8 + 5), (void **)&__p.__r_.__value_.__l.__data_);
  v9 = (int)*(float *)__p.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(p_p);
    if (v9)
      goto LABEL_11;
  }
  else if (v9)
  {
    goto LABEL_11;
  }
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "inference_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v10, &__p);
  v11 = *(_DWORD *)__p.__r_.__value_.__l.__data_ - 1;
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 == a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "multinomial_factor");
    v12 = operator new(4uLL);
    p_p = v12;
    *v12 = 0;
    v21 = v12 + 1;
    v22 = v12 + 1;
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v19);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a4, &v19);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_16;
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    goto LABEL_14;
  }
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(&__p, "multinomial_factor");
  v16 = operator new(4uLL);
  p_p = v16;
  *v16 = 1065353216;
  v21 = v16 + 1;
  v22 = v16 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v19);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a4, &v19);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_16;
  v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
  do
    v15 = __ldaxr(v17);
  while (__stlxr(v15 - 1, v17));
LABEL_14:
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_16:
  if (p_p)
  {
    v21 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(*(kaldi::quasar::Vocab **)a4, &__p);
  p_p = &__p;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v18 + 5, (uint64_t *)a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DE519180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::process_inputs(unsigned __int8 *a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  InferenceEngine::DataTensor *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  float v12;
  InferenceEngine *v13;
  NSObject *v14;
  uint64_t v15;
  float v16;
  uint64_t *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  InferenceEngine *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *LogObject;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string __p;
  std::string v64;
  std::string v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  InferenceEngine::DataTensor *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  InferenceEngine::DataTensor *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  InferenceEngine::DataTensor *v80;
  std::__shared_weak_count *v81;
  uint8_t buf[16];
  std::string::size_type v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_enc_output");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = (InferenceEngine::DataTensor *)*((_QWORD *)v6 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v80 = v8;
  v81 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (SHIBYTE(v83) < 0)
    operator delete(*(void **)buf);
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  v11 = **(_QWORD **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v11 != 1)
    __assert_rtn("process_inputs", "P2ASoundStormIOProcessor.cpp", 119, "B == 1");
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 16))(&v78, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 24))(&v76, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 32))(&v74, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(&v72, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 64))(&v70, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 40))(&v68, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 88))(&v66, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v68, (void **)buf);
  v12 = **(float **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v12 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v74, (void **)buf);
    v16 = **(float **)buf;
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
    v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v17, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v65, "prompt_k_");
      std::to_string(&v64, (int)v16);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v64;
      else
        v18 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      else
        size = v64.__r_.__value_.__l.__size_;
      v20 = std::string::append(&v65, (const std::string::value_type *)v18, size);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v83 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v64, "prompt_v_");
      std::to_string(&__p, (int)v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v23 = __p.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v64, (const std::string::value_type *)p_p, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v26)
        goto LABEL_98;
      std::string::basic_string[abi:ne180100]<0>(&v64, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v64, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v27 + 5, (uint64_t *)v26 + 5);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v65);
      if (!v28)
LABEL_98:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v64, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v64, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v30 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v29 + 5, (uint64_t *)v28 + 5);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v83) < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1, a2, a3);
      v30 = (InferenceEngine *)(*(_QWORD *(**)(std::string *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 72))(&v65, a1, a2, a3);
      v31 = (std::__shared_weak_count *)v65.__r_.__value_.__l.__size_;
      if (v65.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v65.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Prepare P2ASoundStorm inputs finished for loop %d", buf, 8u);
    }
    v15 = 0;
  }
  else
  {
    v14 = InferenceEngine::Diagnostics_GetLogObject(v13);
    v15 = 1;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  v38 = v67;
  if (v67)
  {
    v39 = (unint64_t *)&v67->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v69;
  if (v69)
  {
    v42 = (unint64_t *)&v69->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v71;
  if (v71)
  {
    v45 = (unint64_t *)&v71->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v73;
  if (v73)
  {
    v48 = (unint64_t *)&v73->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v75;
  if (v75)
  {
    v51 = (unint64_t *)&v75->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v77;
  if (v77)
  {
    v54 = (unint64_t *)&v77->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v79;
  if (v79)
  {
    v57 = (unint64_t *)&v79->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v81;
  if (v81)
  {
    v60 = (unint64_t *)&v81->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return v15;
}

void sub_1DE519934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v37 - 96);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v37 - 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::P2ASoundStormIOProcessor::process_outputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  kaldi::quasar::Vocab *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  InferenceEngine *v25;
  NSObject *LogObject;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v31;
  InferenceEngine::DataTensor *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  kaldi::quasar::Vocab *v36[2];
  std::string buf;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (kaldi::quasar::Vocab *)*((_QWORD *)v6 + 6);
  v36[0] = *((kaldi::quasar::Vocab **)v6 + 5);
  v36[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v35 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v32 = (InferenceEngine::DataTensor *)*((_QWORD *)v10 + 5);
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v32, a3);
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v35 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v36[0], __p);
  (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 80))(a1, a2, __p);
  std::string::basic_string[abi:ne180100]<0>(&buf, "target");
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &v31);
  v17 = v31;
  v31 = 0uLL;
  v18 = (std::__shared_weak_count *)v36[1];
  *(_OWORD *)v36 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(v36[0], &buf);
  *(_QWORD *)&v31 = &buf;
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  v25 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v24 + 5, (uint64_t *)v36);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v25);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Process SoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v27 = (std::__shared_weak_count *)v36[1];
  if (v36[1])
  {
    v28 = (unint64_t *)((char *)v36[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return 0;
}

void sub_1DE519DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 64) = &__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 64));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1DE519E50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE519E48);
}

uint64_t InferenceEngine::BaseIOProcessor::BaseIOProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t *v6;
  _BYTE v8[8];
  uint64_t *v9;

  *(_QWORD *)a1 = &unk_1EA923688;
  *(_BYTE *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v8[0];
  v8[0] = v5;
  v6 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  v9 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
  return a1;
}

void sub_1DE519F20(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::BaseIOProcessor::~BaseIOProcessor(uint64_t **this)
{
  *this = (uint64_t *)&unk_1EA923688;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(this + 1));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(this + 2, *((unsigned __int8 *)this + 8));
}

uint64_t InferenceEngine::EspressoMilIO::EspressoMilIO(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  _QWORD *v6;

  v6 = (_QWORD *)InferenceEngine::MilIO::MilIO(a1, a2, a3, a4, a5);
  *v6 = &off_1EA923628;
  InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>((uint64_t)(v6 + 16), *(_QWORD *)(a1 + 88), (_QWORD *)(a1 + 56), 65568);
  return a1;
}

void sub_1DE519FB8(_Unwind_Exception *a1)
{
  void **v1;

  InferenceEngine::MilIO::~MilIO(v1);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::EspressoUtils::convert_data_to_espresso_buffer<void>(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t result;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*a3 == a3[1])
    result = espresso_buffer_set_rank();
  else
    result = espresso_buffer_pack_tensor_shape();
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 160) = a4;
  return result;
}

void InferenceEngine::EspressoMilIO::~EspressoMilIO(void **this)
{
  InferenceEngine::MilIO::~MilIO(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t InferenceEngine::EspressoMilInferenceModel::EspressoMilInferenceModel(uint64_t a1, uint64_t a2)
{
  std::string *p_p;
  std::string::size_type size;
  int v5;
  InferenceEngine *v6;
  NSObject *LogObject;
  std::string *v8;
  void *exception;
  int v11;
  void **v12;
  const char *status_string;
  void **v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string __p;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)InferenceEngine::MilInferenceModel::MilInferenceModel(a1, a2) = off_1EA9238B8;
  *(_QWORD *)(a1 + 248) = espresso_create_context();
  *(_QWORD *)(a1 + 240) = espresso_create_plan();
  if (*(char *)(a1 + 87) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
  else
    v17 = *(std::string *)(a1 + 64);
  if (*(char *)(a1 + 135) < 0)
  {
    if (!*(_QWORD *)(a1 + 120))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(a1 + 135))
  {
    goto LABEL_16;
  }
  std::operator+<char>();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  v5 = espresso_plan_add_network();
  v6 = (InferenceEngine *)std::string::basic_string[abi:ne180100]<0>(v15, "Unable to load network.");
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v11 = v16;
    v12 = (void **)v15[0];
    status_string = (const char *)espresso_get_status_string();
    v14 = v15;
    if (v11 < 0)
      v14 = v12;
    InferenceEngine::StringFormatter::StringFormatter(&__p, "%s Error: %d, %s", (const char *)v14, v5, status_string);
    MEMORY[0x1DF0EC99C](exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v16 < 0)
    operator delete(v15[0]);
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v6);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    v8 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Load model from %s", (uint8_t *)&__p, 0xCu);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE51A2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  InferenceEngine::MilInferenceModel *v30;
  void *v31;
  int v32;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a17 < 0)
        operator delete(a12);
      if (a23 < 0)
        operator delete(a18);
      InferenceEngine::MilInferenceModel::~MilInferenceModel(v30);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::~EspressoMilInferenceModel(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v2;
  int v3;
  void *exception;
  int v5;
  void **v6;
  const char *status_string;
  void **v8;
  void *v9;
  int v10;
  void **v11;
  const char *v12;
  void **v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  std::string v18;

  *(_QWORD *)this = off_1EA9238B8;
  v2 = espresso_plan_destroy();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to destroy linear plan");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v5 = v17;
    v6 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v8 = __p;
    if (v5 < 0)
      v8 = v6;
    InferenceEngine::StringFormatter::StringFormatter(&v18, "%s Error: %d, %s", (const char *)v8, v2, status_string);
    MEMORY[0x1DF0EC99C](exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  v3 = espresso_context_destroy();
  std::string::basic_string[abi:ne180100]<0>(v14, "Unable to destroy context");
  if (v3)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    v10 = v15;
    v11 = (void **)v14[0];
    v12 = (const char *)espresso_get_status_string();
    v13 = v14;
    if (v10 < 0)
      v13 = v11;
    InferenceEngine::StringFormatter::StringFormatter(&v18, "%s Error: %d, %s", (const char *)v13, v3, v12);
    MEMORY[0x1DF0EC99C](v9, &v18);
    __cxa_throw(v9, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v15 < 0)
    operator delete(v14[0]);
  InferenceEngine::MilInferenceModel::~MilInferenceModel(this);
}

void sub_1DE51A4D8(void *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    if ((v2 & 1) == 0)
LABEL_6:
      __clang_call_terminate(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

double InferenceEngine::EspressoMilInferenceModel::build_io@<D0>(__int128 *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  double result;
  double v7[3];

  std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilIO,std::allocator<InferenceEngine::EspressoMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>(a1, a2, a3, a4, v7);
  result = v7[0];
  *a5 = *(_OWORD *)v7;
  return result;
}

void InferenceEngine::EspressoMilInferenceModel::prepare(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v2;
  _QWORD *i;
  const void *v4;
  InferenceEngine::MilIO *v5;
  InferenceEngine::MilIO *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *j;
  const void *v15;
  InferenceEngine::MilIO *v16;
  InferenceEngine::MilIO *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  int v26;
  void **v27;
  const char *v28;
  void **v29;
  void *v30;
  int v31;
  void **v32;
  const char *v33;
  void **v34;
  void *exception;
  int v36;
  void **v37;
  const char *status_string;
  void **v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  std::string v44;
  InferenceEngine::MilIO *v45;
  std::__shared_weak_count *v46;
  void *__p[2];
  char v48;
  std::string v49;

  InferenceEngine::MilInferenceModel::prepare(this);
  v2 = espresso_plan_build();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to build plan.");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v36 = v48;
    v37 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v39 = __p;
    if (v36 < 0)
      v39 = v37;
    InferenceEngine::StringFormatter::StringFormatter(&v49, "%s Error: %d, %s", (const char *)v39, v2, status_string);
    MEMORY[0x1DF0EC99C](exception, &v49);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v48 < 0)
    operator delete(__p[0]);
  for (i = (_QWORD *)*((_QWORD *)this + 20); i; i = (_QWORD *)*i)
  {
    v4 = (const void *)i[5];
    if (v4
    {
      v6 = v5;
      v7 = (std::__shared_weak_count *)i[6];
      v45 = v5;
      v46 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
    }
    else
    {
      v6 = 0;
      v45 = 0;
      v46 = 0;
    }
    InferenceEngine::MilIO::get_io_name(v6, &v44);
    v10 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v42, "Unable to bind input buffer");
    if (v10)
    {
      v25 = __cxa_allocate_exception(0x10uLL);
      v26 = v43;
      v27 = (void **)v42[0];
      v28 = (const char *)espresso_get_status_string();
      v29 = v42;
      if (v26 < 0)
        v29 = v27;
      InferenceEngine::StringFormatter::StringFormatter(&v49, "%s Error: %d, %s", (const char *)v29, v10, v28);
      MEMORY[0x1DF0EC99C](v25, &v49);
      __cxa_throw(v25, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v43 < 0)
      operator delete(v42[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v11 = v46;
    if (v46)
    {
      v12 = (unint64_t *)&v46->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  for (j = (_QWORD *)*((_QWORD *)this + 25); j; j = (_QWORD *)*j)
  {
    v15 = (const void *)j[5];
    if (v15
    {
      v17 = v16;
      v18 = (std::__shared_weak_count *)j[6];
      v45 = v16;
      v46 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    else
    {
      v17 = 0;
      v45 = 0;
      v46 = 0;
    }
    InferenceEngine::MilIO::get_io_name(v17, &v44);
    v21 = espresso_network_bind_buffer();
    std::string::basic_string[abi:ne180100]<0>(v40, "Unable to bind output buffer");
    if (v21)
    {
      v30 = __cxa_allocate_exception(0x10uLL);
      v31 = v41;
      v32 = (void **)v40[0];
      v33 = (const char *)espresso_get_status_string();
      v34 = v40;
      if (v31 < 0)
        v34 = v32;
      InferenceEngine::StringFormatter::StringFormatter(&v49, "%s Error: %d, %s", (const char *)v34, v21, v33);
      MEMORY[0x1DF0EC99C](v30, &v49);
      __cxa_throw(v30, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v22 = v46;
    if (v46)
    {
      v23 = (unint64_t *)&v46->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1DE51A964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (*(char *)(v39 - 81) < 0)
  {
    operator delete(*(void **)(v39 - 104));
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (a37 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::clean(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v2;
  void *exception;
  int v4;
  void **v5;
  const char *status_string;
  void **v7;
  void *__p[2];
  char v9;
  std::string v10;

  v2 = espresso_plan_build_clean();
  std::string::basic_string[abi:ne180100]<0>(__p, "unable to clean the plan");
  if (v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v4 = v9;
    v5 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v7 = __p;
    if (v4 < 0)
      v7 = v5;
    InferenceEngine::StringFormatter::StringFormatter(&v10, "%s Error: %d, %s", (const char *)v7, v2, status_string);
    MEMORY[0x1DF0EC99C](exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v9 < 0)
    operator delete(__p[0]);
  InferenceEngine::MilInferenceModel::clean(this);
}

void sub_1DE51AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void InferenceEngine::EspressoMilInferenceModel::execute(InferenceEngine::EspressoMilInferenceModel *this)
{
  int v1;
  void *exception;
  int v3;
  void **v4;
  const char *status_string;
  void **v6;
  void *__p[2];
  char v8;
  std::string v9;

  v1 = espresso_plan_execute_sync();
  std::string::basic_string[abi:ne180100]<0>(__p, "Unable to execute model.");
  if (v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = v8;
    v4 = (void **)__p[0];
    status_string = (const char *)espresso_get_status_string();
    v6 = __p;
    if (v3 < 0)
      v6 = v4;
    InferenceEngine::StringFormatter::StringFormatter(&v9, "%s Error: %d, %s", (const char *)v6, v1, status_string);
    MEMORY[0x1DF0EC99C](exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1DE51AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a18 < 0)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilIO,std::allocator<InferenceEngine::EspressoMilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x140uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::EspressoMilIO>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1DE51ACF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::EspressoMilIO>,0>(_QWORD *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = &unk_1EA935F48;
  a1[1] = 0;
  InferenceEngine::EspressoMilIO::EspressoMilIO((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1DE51AD3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA935F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::EspressoMilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *InferenceEngine::SoundStormUtils::build_layer_group_mask@<X0>(char *result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)result;
  if (*((_QWORD *)result + 1) != *(_QWORD *)result)
  {
    v5 = result;
    v6 = 0;
    v7 = (int)a2;
    v8 = a2;
    do
    {
      v9 = *(int *)(v4 + 4 * v6);
      if ((uint64_t)v6 >= v7)
      {
        v11 = (char *)a3[1];
        if (v8 == v6)
        {
          v13 = 0x40000000;
          result = std::vector<float>::insert((uint64_t)a3, v11, v9, (char *)&v13);
        }
        else
        {
          v12 = 1077936128;
          result = std::vector<float>::insert((uint64_t)a3, v11, v9, (char *)&v12);
        }
      }
      else
      {
        v10 = (char *)a3[1];
        v14 = 1065353216;
        result = std::vector<float>::insert((uint64_t)a3, v10, v9, (char *)&v14);
      }
      ++v6;
      v4 = *(_QWORD *)v5;
    }
    while (v6 < (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 2);
  }
  return result;
}

void sub_1DE51AE7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *__p;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v4 = __src;
  if (a3)
  {
    v5 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    v8 = a1 + 16;
    v9 = v10;
    v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 2)
    {
      v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 2)
      {
        v21 = *(char **)(v8 - 8);
        v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 2;
        v21 = &v11[4 * (a3 - (v18 >> 2))];
        do
        {
          *(_DWORD *)&v11[v19] = *(_DWORD *)a4;
          v19 += 4;
        }
        while (4 * a3 - 4 * v20 != v19);
        *(_QWORD *)(a1 + 8) = v21;
        if (v11 == __src)
          return v4;
      }
      v22 = &__src[4 * a3];
      v23 = &v21[-4 * a3];
      v24 = v21;
      if (v23 < v11)
      {
        v24 = v21;
        do
        {
          v25 = *(_DWORD *)v23;
          v23 += 4;
          *(_DWORD *)v24 = v25;
          v24 += 4;
        }
        while (v23 < v11);
      }
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-4 * ((v21 - v22) >> 2)], __src, v21 - v22);
      if (v4 <= v5)
      {
        if (*(_QWORD *)(a1 + 8) <= (unint64_t)v5)
          v26 = 0;
        else
          v26 = a3;
        v5 += 4 * v26;
      }
      v27 = v4;
      do
      {
        *(_DWORD *)v27 = *(_DWORD *)v5;
        v27 += 4;
        --v20;
      }
      while (v20);
    }
    else
    {
      v12 = *(_BYTE **)a1;
      v13 = a3 + ((uint64_t)&v11[-*(_QWORD *)a1] >> 2);
      if (v13 >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = (__src - v12) >> 2;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 1 > v13)
        v13 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      v36 = v8;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v16);
      else
        v17 = 0;
      v28 = &v17[4 * v14];
      __p = v17;
      v33 = v28;
      v35 = &v17[4 * v16];
      v29 = 4 * a3;
      v30 = &v28[4 * a3];
      do
      {
        *(_DWORD *)v28 = *(_DWORD *)v5;
        v28 += 4;
        v29 -= 4;
      }
      while (v29);
      v34 = v30;
      v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33)
        v34 += (v33 - v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (__p)
        operator delete(__p);
    }
  }
  return v4;
}

void sub_1DE51B088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::P2ASoundStormLayerGroupIOProcessor(uint64_t a1, char *a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  int *v7;
  int v8;
  int v9;
  uint64_t *v10;
  unsigned __int8 v12[8];
  uint64_t *v13;
  void *__p;
  void *v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *v19;
  _DWORD *v20;
  char v21[8];
  uint64_t *v22;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)a2);
  InferenceEngine::P2ASoundStormIOProcessor::P2ASoundStormIOProcessor(a1, v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  *(_QWORD *)a1 = off_1EA90AAA0;
  std::string::basic_string[abi:ne180100]<0>(v17, "layer_groups");
  __p = 0;
  v15 = 0;
  v16 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<int>,0>(a2, (const void **)v17, (uint64_t)&__p, &v19);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v18 < 0)
    operator delete(v17[0]);
  v12[0] = 2;
  v17[0] = v19;
  __p = v20;
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((int **)v17, (int **)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "layer_groups");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v12[0];
  v12[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v13;
  v13 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  v7 = (int *)v19;
  if (v19 == v20)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v7++;
      v8 += v9;
    }
    while (v7 != v20);
  }
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_vqs");
  LODWORD(v17[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v10, (int *)v17);
  if (v8 != LODWORD(v17[0]))
    __assert_rtn("P2ASoundStormLayerGroupIOProcessor", "P2ASoundStormLayerGroupIOProcessor.cpp", 43, "std::accumulate(layer_groups.begin(), layer_groups.end(), 0) == model_parameters_[\"num_vqs\"].get<int>()");
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_1DE51B294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  InferenceEngine::SoundStormIOProcessor *v22;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  InferenceEngine::SoundStormIOProcessor::~SoundStormIOProcessor(v22);
  _Unwind_Resume(a1);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<int>,0>@<D0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double result;
  unsigned __int8 *v8;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v15 = v11->__r_.__value_.__r.__words[2];
    v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  else
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, a4);
  }
  return result;
}

void sub_1DE51B424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_q_token_mask(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, kaldi::quasar::Vocab **a4@<X8>)
{
  unsigned __int8 *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  kaldi::quasar::Vocab *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void *v23[3];
  void *v24[2];
  char v25;
  std::string __p;
  void *v27;
  _BYTE *v28;

  *a4 = 0;
  a4[1] = 0;
  v7 = (unsigned __int8 *)(a1 + 24);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "q_init_schedule");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, &v27);
  std::string::basic_string[abi:ne180100]<0>(v24, "pred_enc_output");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v24);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v9 + 5), 0, &__p.__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  v12 = v27;
  v11 = v28;
  if (v28 != v27)
  {
    v13 = 0;
    do
    {
      if (v12[v13] == a3)
      {
        v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "layer_groups");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v14, v24);
        v15 = *((int *)v24[0] + v13);
        v22 = 0;
        std::vector<float>::vector(v23, v10, &v22);
        std::vector<std::vector<float>>::vector(&__p, v15, (uint64_t)v23);
        if (v23[0])
        {
          v23[1] = v23[0];
          operator delete(v23[0]);
        }
        if (v24[0])
        {
          v24[1] = v24[0];
          operator delete(v24[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v24, "q_token_mask");
        InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&__p, v23);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)a4, (__int128 *)v23);
        v16 = (std::__shared_weak_count *)v23[1];
        if (v23[1])
        {
          v17 = (unint64_t *)((char *)v23[1] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v25 < 0)
          operator delete(v24[0]);
        v24[0] = &__p;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
        v12 = v27;
        v11 = v28;
      }
      ++v13;
    }
    while (v13 < (v11 - (_BYTE *)v12) >> 2);
  }
  v19 = *a4;
  if (!*a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v20)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a4, (uint64_t *)v20 + 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v19 = *a4;
  }
  kaldi::quasar::Vocab::OOvWord(v19, &__p);
  v24[0] = &__p;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v24);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v21 + 5, (uint64_t *)a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_1DE51B728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_l2_tensor(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  unsigned __int8 *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14[3];
  void *p_p;
  void *v16;
  float *v17;
  std::string __p;
  InferenceEngine::DataTensor *v19;
  std::__shared_weak_count *v20;

  std::string::basic_string[abi:ne180100]<0>(&__p, "q_token_mask");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v19 = v6;
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "l2_tensor");
  InferenceEngine::DataTensor::get_shape(v6, 0, (char **)v14);
  v9 = *(_QWORD *)v14[0];
  v16 = 0;
  v17 = 0;
  p_p = 0;
  v10 = (float *)operator new(4uLL);
  p_p = v10;
  *v10 = (float)v9;
  v16 = v10 + 1;
  v17 = v10 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, a2);
  if (p_p)
  {
    v16 = p_p;
    operator delete(p_p);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v11 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1DE51B984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void sub_1DE51BA08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE51BA00);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_layer_mask(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v6;
  float v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13[3];
  std::string v14;
  void *__p;
  _BYTE *v16;
  std::string **v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v14, "layer_q");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v14);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_1d_array<float>(*((InferenceEngine::DataTensor **)v6 + 5), &__p);
  v7 = *(float *)__p;
  v16 = __p;
  operator delete(__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "layer_groups");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<int>,std::vector<int>,0>((char *)v8, v13);
  InferenceEngine::SoundStormUtils::build_layer_group_mask((char *)v13, (int)v7, &__p);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "layer_mask");
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, __p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 2);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v17 = &v10;
  v18 = 0;
  v10 = (std::string *)operator new(0x18uLL);
  v11 = (uint64_t *)v10;
  v12 = (uint64_t *)&v10[1];
  v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v12, (uint64_t)&v19, (uint64_t)&v22, v10);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v10, a3);
  v17 = &v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a3, &v14);
  v10 = &v14;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v14, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v9 + 5, a3);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1DE51BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v24);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::build_pred_data(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  InferenceEngine::DataTensor *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *p_p;
  void *v34;
  float *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::string __p;
  uint64_t v39[3];
  __n128 v40;
  uint64_t v41;
  uint64_t *v42[3];
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  InferenceEngine::DataTensor *v48;
  std::__shared_weak_count *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  InferenceEngine::DataTensor *v53;
  std::__shared_weak_count *v54;

  std::string::basic_string[abi:ne180100]<0>(&v50, "pred_enc_output");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v50);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (InferenceEngine::DataTensor *)*((_QWORD *)v4 + 5);
  v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
  v53 = v6;
  v54 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  std::string::basic_string[abi:ne180100]<0>(&v50, "target");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v50);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (InferenceEngine::DataTensor *)*((_QWORD *)v9 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v48 = v11;
  v49 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  std::string::basic_string[abi:ne180100]<0>(&v50, "q_token_mask");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a1, (unsigned __int8 *)&v50);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v46 = *((_QWORD *)v14 + 5);
  v47 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  InferenceEngine::DataTensor::get_shape(v6, 0, &v50);
  v18 = *((_QWORD *)v50 + 1);
  v51 = v50;
  operator delete(v50);
  InferenceEngine::DataTensor::get_3d_array<float>(v6, &v43);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v50, (uint64_t)*v43, (uint64_t)v43[1], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v43[1] - (_BYTE *)*v43) >> 3));
  v42[0] = (uint64_t *)&v43;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  InferenceEngine::DataTensor::get_3d_array<float>(v11, v42);
  v44 = 0;
  v45 = 0;
  v43 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v43, *v42[0], v42[0][1], 0xAAAAAAAAAAAAAAABLL * ((v42[0][1] - *v42[0]) >> 3));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v41 = 0;
  v40 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v40, (uint64_t)v50, (uint64_t)v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  memset(v39, 0, sizeof(v39));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v39, (uint64_t)v43, v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - (uint64_t)v43) >> 3));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v40, v39, 1, (uint64_t *)v42);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_data");
  InferenceEngine::DataTensor::build_from_2d_array<float>(v42, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::unsqueeze((InferenceEngine::DataTensor *)*a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pred_lens");
  v19 = (float *)operator new(4uLL);
  p_p = v19;
  *v19 = (float)v18;
  v34 = v19 + 1;
  v35 = v19 + 1;
  InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&p_p, &v36);
  if (p_p)
  {
    v34 = p_p;
    operator delete(p_p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)*a2, &__p);
  p_p = &__p;
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v20 + 5, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v42[0] = (uint64_t *)&v43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  v43 = (void **)&v50;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v43);
  v24 = v47;
  if (v47)
  {
    v25 = (unint64_t *)&v47->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v49;
  if (v49)
  {
    v28 = (unint64_t *)&v49->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v54;
  if (v54)
  {
    v31 = (unint64_t *)&v54->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1DE51C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v29);
  __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = &a29;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a29 = v30 - 96;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 128);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 112);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v30 - 72);
  _Unwind_Resume(a1);
}

void sub_1DE51C25C()
{
  JUMPOUT(0x1DE51C21CLL);
}

void sub_1DE51C264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a14 = (void **)&a23;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a14);
  JUMPOUT(0x1DE51C22CLL);
}

void sub_1DE51C27C()
{
  JUMPOUT(0x1DE51C22CLL);
}

void sub_1DE51C284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  a23 = (void **)&a26;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  JUMPOUT(0x1DE51C23CLL);
}

void sub_1DE51C29C()
{
  JUMPOUT(0x1DE51C23CLL);
}

void sub_1DE51C2A8()
{
  JUMPOUT(0x1DE51C244);
}

void sub_1DE51C2B0()
{
  JUMPOUT(0x1DE51C24CLL);
}

void sub_1DE51C2B8()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x1DE51C244);
}

void sub_1DE51C2D0()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x1DE51C24CLL);
}

void sub_1DE51C2E8()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x1DE51C254);
}

void InferenceEngine::P2ASoundStormLayerGroupIOProcessor::update_vq_target(uint64_t a1, _QWORD *a2, _QWORD **a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  std::__shared_weak_count *v9;
  InferenceEngine::DataTensor *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 *v13;
  std::__shared_weak_count *v14;
  InferenceEngine::DataTensor *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  std::__shared_weak_count *v23;
  InferenceEngine::DataTensor *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  std::__shared_weak_count *v28;
  InferenceEngine::DataTensor *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  std::__shared_weak_count *v33;
  InferenceEngine::DataTensor *v34;
  unint64_t *v35;
  unint64_t v36;
  _BYTE *v37;
  float *v38;
  InferenceEngine *_1d;
  uint64_t v40;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  std::vector<int>::pointer v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t v51;
  NSObject *LogObject;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const char *v82;
  int v83;
  uint64_t v84;
  __int128 v86;
  std::vector<int> v87;
  std::vector<int> v88;
  std::vector<int> __p;
  void *v90;
  float *v91;
  uint64_t v92;
  InferenceEngine::DataTensor *v93;
  std::__shared_weak_count *v94;
  InferenceEngine::DataTensor *v95;
  std::__shared_weak_count *v96;
  InferenceEngine::DataTensor *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  InferenceEngine::DataTensor *v101;
  std::__shared_weak_count *v102;
  InferenceEngine::DataTensor *v103;
  std::__shared_weak_count *v104;
  uint64_t *v105[2];
  char v106;
  __int128 v107;
  std::string buf;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v105, "q_token_mask");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)v4 + 6);
  *(_QWORD *)&v107 = *((_QWORD *)v4 + 5);
  *((_QWORD *)&v107 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "layer_q");
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v10 = (InferenceEngine::DataTensor *)*((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v103 = v10;
  v104 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "layer_mask");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (InferenceEngine::DataTensor *)*((_QWORD *)v13 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v101 = v15;
  v102 = v14;
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "target");
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
  v99 = *((_QWORD *)v18 + 5);
  v100 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "pred_code");
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v22)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v24 = (InferenceEngine::DataTensor *)*((_QWORD *)v22 + 5);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
  v97 = v24;
  v98 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "index_b");
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v27)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v29 = (InferenceEngine::DataTensor *)*((_QWORD *)v27 + 5);
  v28 = (std::__shared_weak_count *)*((_QWORD *)v27 + 6);
  v95 = v29;
  v96 = v28;
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  std::string::basic_string[abi:ne180100]<0>(v105, "index_t");
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)v105);
  if (!v32)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v34 = (InferenceEngine::DataTensor *)*((_QWORD *)v32 + 5);
  v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 6);
  v93 = v34;
  v94 = v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  if (v106 < 0)
    operator delete(v105[0]);
  InferenceEngine::DataTensor::get_2d_array<float>((InferenceEngine::DataTensor *)v107, v105);
  InferenceEngine::DataTensor::get_2d_array<float>(v15, &__p);
  v91 = 0;
  v92 = 0;
  v90 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v90, *(const void **)__p.__begin_, *((_QWORD *)__p.__begin_ + 1), (uint64_t)(*((_QWORD *)__p.__begin_ + 1) - *(_QWORD *)__p.__begin_) >> 2);
  v88.__begin_ = (std::vector<int>::pointer)&__p;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  InferenceEngine::DataTensor::get_1d_array<float>(v10, (void **)&__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  v37 = v90;
  if (v90 == v91)
  {
    v38 = (float *)v90;
  }
  else
  {
    v38 = (float *)v90;
    while (*v38 != 2.0)
    {
      if (++v38 == v91)
      {
        v38 = v91;
        break;
      }
    }
  }
  InferenceEngine::DataTensor::get_1d_array<int>(v24, &__p);
  InferenceEngine::DataTensor::get_1d_array<int>(v29, &v88);
  _1d = (InferenceEngine *)InferenceEngine::DataTensor::get_1d_array<int>(v34, &v87);
  v40 = (char *)v38 - v37;
  begin = v88.__begin_;
  end = v88.__end_;
  if (v88.__begin_ != v88.__end_)
  {
    v43 = v88.__begin_;
    do
      *v43++ += (unint64_t)v40 >> 2;
    while (v43 != end);
  }
  v44 = end - begin;
  if (v44 != v87.__end_ - v87.__begin_)
  {
    v82 = "top_k_b_index_vector.size() == top_k_t_index_vector.size()";
    v83 = 131;
    goto LABEL_125;
  }
  if (v44 != __p.__end_ - __p.__begin_)
  {
    v82 = "top_k_b_index_vector.size() == top_k_pred_code_vector.size()";
    v83 = 132;
LABEL_125:
    __assert_rtn("update_vq_target", "P2ASoundStormLayerGroupIOProcessor.cpp", v83, v82);
  }
  v84 = (uint64_t)a2;
  if (__p.__end_ != __p.__begin_)
  {
    v45 = 0;
    v46 = v40 >> 2;
    if (v44 <= 1)
      v47 = 1;
    else
      v47 = v44;
    v48 = v105[0];
    do
    {
      v49 = v88.__begin_[v45];
      v50 = v87.__begin_[v45];
      v51 = v49 - v46;
      if (*(float *)(v48[3 * v51] + 4 * v50) != 0.0)
      {
        LogObject = InferenceEngine::Diagnostics_GetLogObject(_1d);
        _1d = (InferenceEngine *)os_log_type_enabled(LogObject, OS_LOG_TYPE_ERROR);
        if ((_DWORD)_1d)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v49;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v50;
          _os_log_error_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_ERROR, "Duplicate value in index_t found in the outputs! q_mask_vector[%d][%d] is already predicted!", (uint8_t *)&buf, 0xEu);
        }
      }
      v48 = v105[0];
      *(_DWORD *)(v105[0][3 * v51] + 4 * v50) = 1065353216;
      *(float *)(*(_QWORD *)(**a3 + 24 * v50) + 4 * v49) = (float)__p.__begin_[v45++];
    }
    while (v47 != v45);
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v107, &buf);
  InferenceEngine::DataTensor::build_from_2d_array<float>(v105, &v86);
  v53 = v86;
  v86 = 0uLL;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  v107 = v53;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v107, &buf);
  *(_QWORD *)&v86 = &buf;
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v84, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v86);
  std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v60 + 5, (uint64_t *)&v107);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  if (v88.__begin_)
  {
    v88.__end_ = v88.__begin_;
    operator delete(v88.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v90)
  {
    v91 = (float *)v90;
    operator delete(v90);
  }
  v90 = v105;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  v61 = v94;
  if (v94)
  {
    v62 = (unint64_t *)&v94->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v96;
  if (v96)
  {
    v65 = (unint64_t *)&v96->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v98;
  if (v98)
  {
    v68 = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v100;
  if (v100)
  {
    v71 = (unint64_t *)&v100->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v102;
  if (v102)
  {
    v74 = (unint64_t *)&v102->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v104;
  if (v104)
  {
    v77 = (unint64_t *)&v104->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_1DE51CB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  a25 = (void *)(v36 - 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v36 - 200);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v36 - 160);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::process_inputs(unsigned __int8 *a1, _QWORD *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  InferenceEngine::DataTensor *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  float v12;
  InferenceEngine *v13;
  NSObject *v14;
  uint64_t v15;
  float v16;
  uint64_t *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  InferenceEngine *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *LogObject;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string __p;
  std::string v70;
  std::string v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  InferenceEngine::DataTensor *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  InferenceEngine::DataTensor *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  InferenceEngine::DataTensor *v90;
  std::__shared_weak_count *v91;
  uint8_t buf[16];
  std::string::size_type v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(buf, "pred_enc_output");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = (InferenceEngine::DataTensor *)*((_QWORD *)v6 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v90 = v8;
  v91 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (SHIBYTE(v93) < 0)
    operator delete(*(void **)buf);
  InferenceEngine::DataTensor::get_shape(v8, 0, (char **)buf);
  v11 = **(_QWORD **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v11 != 1)
    __assert_rtn("process_inputs", "P2ASoundStormLayerGroupIOProcessor.cpp", 156, "B == 1");
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 16))(&v88, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 24))(&v86, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 96))(&v84, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 32))(&v82, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(&v80, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 64))(&v78, a1, a2, a3);
  (*(void (**)(InferenceEngine::DataTensor **__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 40))(&v76, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 88))(&v74, a1, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 104))(&v72, a1, a2, a3);
  InferenceEngine::DataTensor::get_1d_array<float>(v76, (void **)buf);
  v12 = **(float **)buf;
  *(_QWORD *)&buf[8] = *(_QWORD *)buf;
  operator delete(*(void **)buf);
  if (v12 >= 1.0)
  {
    InferenceEngine::DataTensor::get_1d_array<float>(v82, (void **)buf);
    v16 = **(float **)buf;
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
    v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1 + 24, "prompt_attention");
    buf[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v17, buf);
    if (buf[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&v71, "prompt_k_");
      std::to_string(&v70, (int)v16);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v70;
      else
        v18 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      else
        size = v70.__r_.__value_.__l.__size_;
      v20 = std::string::append(&v71, (const std::string::value_type *)v18, size);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v93 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)buf = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v70, "prompt_v_");
      std::to_string(&__p, (int)v16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v23 = __p.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v70, (const std::string::value_type *)p_p, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, buf);
      if (!v26)
        goto LABEL_108;
      std::string::basic_string[abi:ne180100]<0>(&v70, "prompt_k");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v70, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v27 + 5, (uint64_t *)v26 + 5);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&v71);
      if (!v28)
LABEL_108:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      std::string::basic_string[abi:ne180100]<0>(&v70, "prompt_v");
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&v70, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v30 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v29 + 5, (uint64_t *)v28 + 5);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93) < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 56))(buf, a1, a2, a3);
      v30 = (InferenceEngine *)(*(_QWORD *(**)(std::string *__return_ptr, unsigned __int8 *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 72))(&v71, a1, a2, a3);
      v31 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    LogObject = InferenceEngine::Diagnostics_GetLogObject(v30);
    if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Prepare P2ASoundStormLayerGroup inputs finished for loop %d", buf, 8u);
    }
    v15 = 0;
  }
  else
  {
    v14 = InferenceEngine::Diagnostics_GetLogObject(v13);
    v15 = 1;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1DE3F6000, v14, OS_LOG_TYPE_INFO, "Skip loop %d", buf, 8u);
    }
  }
  v38 = v73;
  if (v73)
  {
    v39 = (unint64_t *)&v73->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v75;
  if (v75)
  {
    v42 = (unint64_t *)&v75->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v77;
  if (v77)
  {
    v45 = (unint64_t *)&v77->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v79;
  if (v79)
  {
    v48 = (unint64_t *)&v79->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v81;
  if (v81)
  {
    v51 = (unint64_t *)&v81->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v83;
  if (v83)
  {
    v54 = (unint64_t *)&v83->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v85;
  if (v85)
  {
    v57 = (unint64_t *)&v85->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v87;
  if (v87)
  {
    v60 = (unint64_t *)&v87->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v89;
  if (v89)
  {
    v63 = (unint64_t *)&v89->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v91;
  if (v91)
  {
    v66 = (unint64_t *)&v91->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  return v15;
}

void sub_1DE51D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 96);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 152);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 136);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v39 - 120);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::P2ASoundStormLayerGroupIOProcessor::process_outputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  kaldi::quasar::Vocab *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  InferenceEngine *v25;
  NSObject *LogObject;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v31;
  InferenceEngine::DataTensor *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  kaldi::quasar::Vocab *v36[2];
  std::string buf;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (kaldi::quasar::Vocab *)*((_QWORD *)v6 + 6);
  v36[0] = *((kaldi::quasar::Vocab **)v6 + 5);
  v36[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)((char *)v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v35 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "pred_code");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v32 = (InferenceEngine::DataTensor *)*((_QWORD *)v10 + 5);
  v33 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  InferenceEngine::SoundStormIOProcessor::check_outputs<int>(a1, &v32, a3);
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v35 < 0)
    operator delete(__p[0]);
  InferenceEngine::DataTensor::get_3d_array<float>(v36[0], __p);
  (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 80))(a1, a2, __p);
  std::string::basic_string[abi:ne180100]<0>(&buf, "target");
  InferenceEngine::DataTensor::build_from_3d_array<float>((uint64_t *)__p, &v31);
  v17 = v31;
  v31 = 0uLL;
  v18 = (std::__shared_weak_count *)v36[1];
  *(_OWORD *)v36 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(v36[0], &buf);
  *(_QWORD *)&v31 = &buf;
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a2, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  v25 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v24 + 5, (uint64_t *)v36);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v25);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Process P2ASoundStorm outputs finished for loop %d", (uint8_t *)&buf, 8u);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v27 = (std::__shared_weak_count *)v36[1];
  if (v36[1])
  {
    v28 = (unint64_t *)((char *)v36[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return 0;
}

void sub_1DE51D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 64) = &__p;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 64));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1DE51DA28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE51DA20);
}

uint64_t InferenceEngine::MilInferenceModel::MilInferenceModel(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  void **v8;
  void **v9;
  void **v10;
  char v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  _BOOL8 v15;
  NSObject *LogObject;
  _BYTE v18[8];
  uint64_t *v19;
  std::string v20;
  std::string __p;
  _BYTE v22[8];
  uint64_t *v23;
  std::string v24;
  std::string v25;
  std::string v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1EA9236F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v4 = (char *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = (void **)(a1 + 64);
  v9 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  v10 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v25, v5, v6, v7, &v24);
  InferenceEngine::Utils::read_json_from_file((char *)&v25, (uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  v11 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v22[0];
  v22[0] = v11;
  v12 = *(uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v23;
  v23 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_file");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v4, (const void **)&v26.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v26 = v24;
  boost::filesystem::path::append_v3(&v26, &v20);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_parameters");
  v20.__r_.__value_.__s.__data_[0] = 0;
  v20.__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>(v4, (const void **)&v26.__r_.__value_.__l.__data_, (unsigned __int8 *)&v20, (uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  v13 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v18[0];
  v18[0] = v13;
  v14 = *(uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v19;
  v19 = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20.__r_.__value_.__l.__size_, v20.__r_.__value_.__s.__data_[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v20, "model_name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v4, (const void **)&v20.__r_.__value_.__l.__data_, &v26);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v20, "model_function");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value("main", v4, (const void **)&v20.__r_.__value_.__l.__data_, &v26);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v26, "model_dynamic_shape");
  v20.__r_.__value_.__s.__data_[0] = 0;
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<BOOL,0>(v4, (const void **)&v26.__r_.__value_.__l.__data_, (unsigned __int8 *)&v20);
  *(_BYTE *)(a1 + 136) = v15;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)v15);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 135) < 0)
      v10 = (void **)*v10;
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Load model with %s function", (uint8_t *)&v26, 0xCu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1DE51DED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  char *v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void **v45;
  void **v46;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(v43);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table(v42);
  if (v39[135] < 0)
    operator delete(*v45);
  if (v39[111] < 0)
    operator delete(*v44);
  if (v39[87] < 0)
    operator delete(*v46);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v40);
  if (v39[31] < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

void sub_1DE51E010()
{
  JUMPOUT(0x1DE51DF94);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  nlohmann::detail::exception *exception;
  char *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v12, v9);
    v10 = std::string::insert(&v12, 0, "cannot use value() with ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v13, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v13);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v12, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v12);
  if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v13, (unsigned __int8 **)&v12))a3 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v13);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a4, (uint64_t)a3);
}

void sub_1DE51E120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::~MilInferenceModel(InferenceEngine::MilInferenceModel *this)
{
  *(_QWORD *)this = off_1EA9236F8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::~__hash_table((uint64_t)this + 144);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 7, *((unsigned __int8 *)this + 48));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)this + 32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)this + 5, *((unsigned __int8 *)this + 32));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

_QWORD *InferenceEngine::MilInferenceModel::build_io@<X0>(_QWORD *a1@<X8>)
{
  return std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>(a1);
}

void InferenceEngine::MilInferenceModel::add_model_ios(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v7;
  unsigned __int8 *v8;
  InferenceEngine *v9;
  NSObject *LogObject;
  std::string *v11;
  std::string *p_p;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string __p;
  std::string v23;
  char v24[8];
  uint64_t *v25;
  _BYTE buf[12];
  __int16 v27;
  std::string *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, v3);
      std::string::basic_string[abi:ne180100]<0>(&__p, "name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v24, (const void **)&__p.__r_.__value_.__l.__data_, &v23);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v21, "io_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v24, (const void **)&v21.__r_.__value_.__l.__data_, &__p);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(v19, "io_dtype");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v24, (const void **)v19, &v21);
      if (v20 < 0)
        operator delete(v19[0]);
      std::string::basic_string[abi:ne180100]<0>(buf, "shape");
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v7.n128_f64[0] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>(v24, (const void **)buf, (uint64_t)&v16, v19);
      if (v16)
      {
        v17 = (std::__shared_weak_count *)v16;
        operator delete(v16);
      }
      if (v29 < 0)
        operator delete(*(void **)buf);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, std::string *, std::string *, void **, __n128))(*(_QWORD *)a1 + 64))(&v16, a1, &v23, &__p, &v21, v19, v7);
      *(_QWORD *)buf = &v23;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&v23, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
      v9 = (InferenceEngine *)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v8 + 5, (uint64_t *)&v16);
      LogObject = InferenceEngine::Diagnostics_GetLogObject(v9);
      if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v23;
        else
          v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v11;
        v27 = 2080;
        v28 = p_p;
        _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Added IO: %s -> %s", buf, 0x16u);
      }
      v13 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v19[0])
      {
        v19[1] = v19[0];
        operator delete(v19[0]);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v25, v24[0]);
      v3 += 16;
    }
    while (v3 != v4);
  }
}

void sub_1DE51E53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t *a38)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a38);
  _Unwind_Resume(a1);
}

void sub_1DE51E608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    JUMPOUT(0x1DE51E5F4);
  JUMPOUT(0x1DE51E5F8);
}

void sub_1DE51E61C()
{
  JUMPOUT(0x1DE51E5F8);
}

void sub_1DE51E624()
{
  JUMPOUT(0x1DE51E600);
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  double result;
  unsigned __int8 *v8;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v15 = v11->__r_.__value_.__r.__words[2];
    v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  }
  else
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>((char *)v8, a4);
  }
  return result;
}

void sub_1DE51E74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::prepare(InferenceEngine::MilInferenceModel *this)
{
  char *v2;
  void **v3[3];
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  char v7;
  uint64_t v8[3];
  void ***v9;

  v2 = (char *)this + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "model_inputs");
  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)__p, (uint64_t *)v4, v8);
  v3[0] = v4;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v4, "model_outputs");
  memset(v3, 0, sizeof(v3));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v2, (const void **)v4, (uint64_t *)v3, __p);
  v9 = v3;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, v8, (uint64_t)this + 144);
  InferenceEngine::MilInferenceModel::add_model_ios((uint64_t)this, (uint64_t *)__p, (uint64_t)this + 184);
  v4[0] = __p;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
  __p[0] = v8;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DE51E8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v25 - 40) = v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a18 < 0)
    operator delete(__p);
  a19 = (void *)(v25 - 64);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(char *a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v13, v10);
    v11 = std::string::insert(&v13, 0, "cannot use value() with ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v15 = v11->__r_.__value_.__r.__words[2];
    v14 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(306, (uint64_t)&v14, exception);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::find<std::string const&>((uint64_t)a1, a2, (unsigned __int8 **)&v14);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v13, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end((unsigned __int8 **)&v13);
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==((unsigned __int8 **)&v14, (unsigned __int8 **)&v13))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a4, *a3, a3[1], (a3[1] - *a3) >> 4);
  }
  else
  {
    v8 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((unsigned __int8 **)&v14);
    return (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v8, a4);
  }
}

void sub_1DE51EA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void InferenceEngine::MilInferenceModel::clean(InferenceEngine::MilInferenceModel *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::clear((uint64_t)this + 184);
}

void InferenceEngine::MilInferenceModel::get_all_input_names(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  void *v18[2];
  char v19;
  char v20[8];
  uint64_t *v21;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  std::__split_buffer<std::string> __p;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_inputs");
  memset(&v22, 0, sizeof(v22));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((char *)this + 32, (const void **)&__p.__first_, (uint64_t *)&v22, &v23);
  v18[0] = &v22;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  v4 = v23;
  for (i = v24; v4 != i; v4 += 16)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, v4);
    std::string::basic_string[abi:ne180100]<0>(v18, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v20, (const void **)v18, &v22);
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if (v6 >= v7)
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
      v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v10;
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v12);
      else
        v13 = 0;
      v14 = v13 + v9;
      __p.__first_ = v13;
      __p.__begin_ = v14;
      __p.__end_cap_.__value_ = &v13[v12];
      v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&v22, 0, sizeof(v22));
      __p.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__p);
      v16 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      v17 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 8) = v16;
      if (v17 < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    else
    {
      v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)v6 = v8;
      memset(&v22, 0, sizeof(v22));
      *(_QWORD *)(a2 + 8) = v6 + 24;
    }
    if (v19 < 0)
      operator delete(v18[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1DE51ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a31 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilInferenceModel::get_all_output_names(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  void *v18[2];
  char v19;
  char v20[8];
  uint64_t *v21;
  std::string v22;
  uint64_t v23;
  uint64_t v24;
  std::__split_buffer<std::string> __p;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_outputs");
  memset(&v22, 0, sizeof(v22));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((char *)this + 32, (const void **)&__p.__first_, (uint64_t *)&v22, &v23);
  v18[0] = &v22;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  v4 = v23;
  for (i = v24; v4 != i; v4 += 16)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, v4);
    std::string::basic_string[abi:ne180100]<0>(v18, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::value(&byte_1DEBD87CE, v20, (const void **)v18, &v22);
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    if (v6 >= v7)
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
      v10 = v9 + 1;
      if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
      if (2 * v11 > v10)
        v10 = 2 * v11;
      if (v11 >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v10;
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v12);
      else
        v13 = 0;
      v14 = v13 + v9;
      __p.__first_ = v13;
      __p.__begin_ = v14;
      __p.__end_cap_.__value_ = &v13[v12];
      v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&v22, 0, sizeof(v22));
      __p.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__p);
      v16 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      v17 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 8) = v16;
      if (v17 < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    else
    {
      v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)v6 = v8;
      memset(&v22, 0, sizeof(v22));
      *(_QWORD *)(a2 + 8) = v6 + 24;
    }
    if (v19 < 0)
      operator delete(v18[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1DE51EFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a31 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::MilInferenceModel::get_model_parameters@<X0>(InferenceEngine::MilInferenceModel *this@<X0>, uint64_t a2@<X8>)
{
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)this + 48);
}

void InferenceEngine::MilInferenceModel::set_input(uint64_t a1, kaldi::quasar::Vocab **a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  InferenceEngine::DataTensor *v6;
  unint64_t rank;
  uint64_t v8;
  kaldi::quasar::Vocab *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[3];
  void *p_p;
  void *v21;
  std::string __p;

  v4 = (_QWORD *)(a1 + 144);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(v4, (unsigned __int8 *)&__p))__assert_rtn("set_input", "MilInferenceBaseModule.cpp", 122, "input_buffers_.find(data_tensor->get_name()) != input_buffers_.end()");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(*a2, &__p);
  p_p = &__p;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v4, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *a2;
  rank = InferenceEngine::DataTensor::get_rank(*((InferenceEngine::DataTensor **)v5 + 5));
  InferenceEngine::DataTensor::set_rank(v6, rank);
  if (*(_BYTE *)(a1 + 136))
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v5 + 5), 0, (char **)&p_p);
    InferenceEngine::DataTensor::valid_shape((uint64_t *)&__p, &p_p, 0, 1);
    if (p_p)
    {
      v21 = p_p;
      operator delete(p_p);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v8 = *((_QWORD *)v5 + 5);
    InferenceEngine::DataTensor::get_shape(*a2, 0, (char **)v19);
    InferenceEngine::DataTensor::resize(v8, (uint64_t)v19);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)v5 + 5) + 16))(*((_QWORD *)v5 + 5));
  }
  else
  {
    InferenceEngine::DataTensor::get_shape(*a2, 0, &__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v5 + 5), 0, (char **)&p_p);
    InferenceEngine::DataTensor::valid_shape((uint64_t *)&__p, &p_p, 0, 0);
    if (p_p)
    {
      v21 = p_p;
      operator delete(p_p);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v9 = *a2;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  v17 = *((_QWORD *)v5 + 5);
  v18 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor((uint64_t)v9, &v17);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1DE51F2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

BOOL InferenceEngine::MilInferenceModel::has_input(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 144), a2) != 0;
}

void InferenceEngine::MilInferenceModel::get_output(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[3];
  std::string v20;

  v6 = a1 + 184;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 184), a2))InferenceEngine::MilInferenceModel::get_output();
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v20);
  v8 = v7;
  if (*(_BYTE *)(a1 + 136))
    (*(void (**)(_QWORD))(**((_QWORD **)v7 + 5) + 24))(*((_QWORD *)v7 + 5));
  kaldi::quasar::Vocab::BosWord(*((kaldi::quasar::Vocab **)v8 + 5), &v20);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>(a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v9 = *((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v9, &v17);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1DE51F4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilInferenceModel::get_output_io(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[3];
  std::string v20;
  std::string v21;

  v6 = a1 + 184;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>((_QWORD *)(a1 + 184), a2))InferenceEngine::MilInferenceModel::get_output_io();
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v8 = v7;
  if (*(_BYTE *)(a1 + 136))
    (*(void (**)(_QWORD))(**((_QWORD **)v7 + 5) + 24))(*((_QWORD *)v7 + 5));
  InferenceEngine::MilIO::get_io_name(*((InferenceEngine::MilIO **)v8 + 5), &v21);
  kaldi::quasar::Vocab::BosWord(*((kaldi::quasar::Vocab **)v8 + 5), &v20);
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v8 + 5), 0, (char **)__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>(a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v9 = *((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v9, &v17);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1DE51F64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE51F75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1EA936178;
  a1[1] = 0;
  InferenceEngine::MilIO::MilIO(a1 + 3);
  return a1;
}

void sub_1DE51F7A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::MilIO>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<InferenceEngine::MilIO>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(a1, (uint64_t)a2);
}

void sub_1DE51F884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(char *a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>((unsigned __int8 *)a1, a2);
}

void sub_1DE51F95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v4;
  char *i;
  unsigned __int8 *v6;
  char *v7;
  void *v8;
  double result;
  unsigned __int8 *v10[5];
  unsigned __int8 *v11[5];
  __int128 v12;
  uint64_t v13;
  unint64_t v14;

  v12 = 0uLL;
  v13 = 0;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  std::vector<unsigned long>::reserve((void **)&v12, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v11);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v10, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v10);
  for (i = (char *)*((_QWORD *)&v12 + 1);
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v11, v10);
        i = v7 + 8)
  {
    v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v11);
    v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v6, &v14);
    v7 = std::vector<unsigned long>::insert((uint64_t)&v12, i, &v14);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(v11);
  }
  v8 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v8;
    operator delete(v8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_1DE51FAE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(_QWORD *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(_BYTE *result, unint64_t *a2)
{
  char *v2;
  unint64_t v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_QWORD *)result + 1);
      break;
    case 7:
      v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v8, v5);
      v6 = std::string::insert(&v8, 0, "type must be number, but is ");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v10 = v6->__r_.__value_.__r.__words[2];
      v9 = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  *a2 = v3;
  return result;
}

void sub_1DE51FC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(a1, (uint64_t)a2);
}

void sub_1DE51FD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t *v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  v2 = (char *)result;
  if (*(_BYTE *)result != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be array, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(302, (uint64_t)&v9, exception);
  }
  v3 = *(uint64_t **)(result + 8);
  if (v3 != (uint64_t *)a2)
    return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(a2, *v3, v3[1], (v3[1] - *v3) >> 4);
  return result;
}

void sub_1DE51FE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__assign_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(_QWORD *)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<int,double>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (*(_QWORD *)(a1 + 8) - v9) >> 4;
  if (v14 < a4)
  {
    v15 = a2 + 16 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v17, a2, v15, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v18, a2, a3, v9);
  return std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](a1, v16);
}

void sub_1DE51FF98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE51FFA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v10[8];
  uint64_t *v11;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v10, v5);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    v7 = *(_BYTE *)a4;
    *(_BYTE *)a4 = v10[0];
    v10[0] = v7;
    v8 = *(uint64_t **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v11;
    v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    v5 += 16;
    a4 += 16;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long>,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::DataTensor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string,std::vector<unsigned long> &,std::allocator<InferenceEngine::DataTensor>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE5200F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::MilIO,std::allocator<InferenceEngine::MilIO>,std::string const&,std::string,std::string,std::vector<unsigned long>,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::MilIO>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::vector<unsigned long> const&,std::allocator<InferenceEngine::MilIO>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE520168(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void InferenceEngine::MilInferenceModel::get_output()
{
  __assert_rtn("get_output", "MilInferenceBaseModule.cpp", 143, "output_buffers_.find(key) != output_buffers_.end()");
}

void InferenceEngine::MilInferenceModel::get_output_io()
{
  __assert_rtn("get_output_io", "MilInferenceBaseModule.cpp", 155, "output_buffers_.find(key) != output_buffers_.end()");
}

_QWORD *InferenceEngine::MLInferenceModel::MLInferenceModel(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  InferenceEngine *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  NSObject *LogObject;
  std::string::size_type v16;
  void *exception;
  const char *v19;
  void *v20;
  const char *v21;
  unsigned __int8 v22;
  std::__fs::filesystem::path v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *a1 = off_1EA9236A8;
  a1[1] = 0;
  v6 = a1 + 1;
  a1[2] = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v23.__pn_, a2);
  std::__fs::filesystem::__status(&v23, 0);
  if (SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__pn_.__r_.__value_.__l.__data_);
  if (!v22 || v22 == 255)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (a2[23] >= 0)
      v19 = a2;
    else
      v19 = *(const char **)a2;
    InferenceEngine::StringFormatter::StringFormatter(&v23.__pn_, "Model config %s doesn't exist!", v19);
    MEMORY[0x1DF0EC99C](exception, &v23);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 8)
      goto LABEL_31;
    v9 = *(_QWORD **)a3;
    v8 = **(_QWORD ***)a3;
  }
  else
  {
    if (v7 != 8)
      goto LABEL_31;
    v8 = *(_QWORD **)a3;
    v9 = (_QWORD *)a3;
  }
  if (v8 != (_QWORD *)0x6F73736572707365)
  {
    if (*v9 == 0x736E6E62326C696DLL)
    {
      std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string const&,void>(&v23);
      v10 = (InferenceEngine *)std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v6, (__int128 *)&v23);
      size = (std::__shared_weak_count *)v23.__pn_.__r_.__value_.__l.__size_;
      if (!v23.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_21;
      v12 = (unint64_t *)(v23.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_19;
    }
LABEL_31:
    v20 = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a3 + 23) >= 0)
      v21 = (const char *)a3;
    else
      v21 = *(const char **)a3;
    InferenceEngine::StringFormatter::StringFormatter(&v23.__pn_, "Unsupported inference type %s! Inference type can be either %s or %s.", v21, "espresso", "mil2bnns");
    MEMORY[0x1DF0EC99C](v20, &v23);
    __cxa_throw(v20, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilInferenceModel,std::allocator<InferenceEngine::EspressoMilInferenceModel>,std::string const&,void>(&v23);
  v10 = (InferenceEngine *)std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100]((uint64_t)v6, (__int128 *)&v23);
  size = (std::__shared_weak_count *)v23.__pn_.__r_.__value_.__l.__size_;
  if (!v23.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_21;
  v14 = (unint64_t *)(v23.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v13 = __ldaxr(v14);
  while (__stlxr(v13 - 1, v14));
LABEL_19:
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
LABEL_21:
  LogObject = InferenceEngine::Diagnostics_GetLogObject(v10);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a2[23] >= 0)
      v16 = (std::string::size_type)a2;
    else
      v16 = *(_QWORD *)a2;
    LODWORD(v23.__pn_.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v23.__pn_.__r_.__value_.__r.__words + 4) = v16;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Model has been created from %s", (uint8_t *)&v23, 0xCu);
  }
  (**(void (***)(_QWORD))*v6)(*v6);
  return a1;
}

void sub_1DE5204D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void InferenceEngine::MLInferenceModel::~MLInferenceModel(InferenceEngine::MLInferenceModel *this)
{
  char *v1;

  *(_QWORD *)this = off_1EA9236A8;
  v1 = (char *)this + 8;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

void InferenceEngine::MLInferenceModel::set_input(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1DE520650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::MLInferenceModel::has_input(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void InferenceEngine::MLInferenceModel::set_input(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1DE520700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::MLInferenceModel::execute(InferenceEngine::MLInferenceModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t InferenceEngine::MLInferenceModel::reset(InferenceEngine::MLInferenceModel *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
  return (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

uint64_t InferenceEngine::MLInferenceModel::get_output(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void InferenceEngine::MLInferenceModel::get_all_input_names(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
  InferenceEngine::MilInferenceModel::get_all_input_names(this[1], a2);
}

void InferenceEngine::MLInferenceModel::get_all_output_names(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
  InferenceEngine::MilInferenceModel::get_all_output_names(this[1], a2);
}

uint64_t InferenceEngine::MLInferenceModel::get_model_parameters@<X0>(InferenceEngine::MilInferenceModel **this@<X0>, uint64_t a2@<X8>)
{
  return InferenceEngine::MilInferenceModel::get_model_parameters(this[1], a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3;
  uint64_t v4;
  nlohmann::detail::exception *exception;
  char *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  __int128 v11;
  std::string::size_type v12;
  const std::string::value_type *v13;

  v13 = a2;
  if (*(_BYTE *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    v8 = std::string::insert(&v10, 0, "cannot use operator[] with a string argument with ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v12 = v8->__r_.__value_.__r.__words[2];
    v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create(305, (uint64_t)&v11, exception);
  }
  v3 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(*(_QWORD *)(a1 + 8), &v13);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 + 8 == v3)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>();
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(v4, &v13)+ 56;
}

void sub_1DE520874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t InferenceEngine::DataUtils::read_vector_from_file<float>@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v4);
  std::istream::tellg();
  if ((v3 & 3) != 0)
    __assert_rtn("read_vector_from_file", "DataTensor.hpp", 217, "filesize%sizeof(T) == 0");
  std::vector<float>::vector(a1, v3 >> 2);
  std::istream::seekg();
  std::istream::read();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(v4[0] - 24)), *(_DWORD *)&v5[*(_QWORD *)(v4[0] - 24) + 16] | 4);
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](v5);
  std::istream::~istream();
  return MEMORY[0x1DF0ECF6C](v6);
}

void sub_1DE520A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::ifstream::~ifstream(&a26);
  _Unwind_Resume(a1);
}

void InferenceEngine::DataTensor::build_from_1d_array<int>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  void *__p;
  char v8;
  void *v9;
  void *v10;
  _QWORD *v11;

  v5 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = operator new(8uLL);
  v9 = v6;
  *v6 = (v4 - (uint64_t)v5) >> 2;
  v10 = v6 + 1;
  v11 = v6 + 1;
  InferenceEngine::DataUtils::get_type_string<int>(&__p);
  std::allocate_shared[abi:ne180100]<InferenceEngine::DataTensor,std::allocator<InferenceEngine::DataTensor>,std::string const&,std::string,std::vector<unsigned long> &,void>(a2);
  if (v8 < 0)
    operator delete(__p);
  memcpy(*(void **)(*a2 + 88), *(const void **)a1, *(_QWORD *)(*a2 + 80));
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_1DE520AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[16 * v10];
    v18 = &v14[16 * v13];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, a2);
    v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_1DE520C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::EspressoMilInferenceModel,std::allocator<InferenceEngine::EspressoMilInferenceModel>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x118uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::EspressoMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE520C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::EspressoMilInferenceModel>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1EA936108;
  a1[1] = 0;
  InferenceEngine::EspressoMilInferenceModel::EspressoMilInferenceModel(a1 + 3);
  return a1;
}

void sub_1DE520CC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::EspressoMilInferenceModel>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::EspressoMilInferenceModel::~EspressoMilInferenceModel((InferenceEngine::EspressoMilInferenceModel *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<InferenceEngine::Mil2BnnsMilInferenceModel,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DE520D74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InferenceEngine::Mil2BnnsMilInferenceModel>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1EA936140;
  a1[1] = 0;
  InferenceEngine::Mil2BnnsMilInferenceModel::Mil2BnnsMilInferenceModel(a1 + 3);
  return a1;
}

void sub_1DE520DC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

void std::__shared_ptr_emplace<InferenceEngine::Mil2BnnsMilInferenceModel>::__on_zero_shared(uint64_t a1)
{
  InferenceEngine::Mil2BnnsMilInferenceModel::~Mil2BnnsMilInferenceModel((InferenceEngine::Mil2BnnsMilInferenceModel *)(a1 + 24));
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1)
    return v2;
  return v5;
}

_QWORD *InferenceEngine::DataUtils::get_type_string<int>@<X0>(_QWORD *a1@<X8>)
{
  char *v2;

  if (std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EE0]))
  {
    v2 = "fp32";
  }
  else
  {
    if (!std::type_info::operator==[abi:ne180100](MEMORY[0x1E0DE4EF0], MEMORY[0x1E0DE4EF0]))
      InferenceEngine::DataUtils::get_type_string<float>();
    v2 = "int32";
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>()
{
  __assert_rtn("operator[]", "json.hpp", 3713, "m_value.object->find(key) != m_value.object->end()");
}

uint64_t InferenceEngine::GreedyDecoderKVCachingIOProcessor::GreedyDecoderKVCachingIOProcessor(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  unsigned __int8 v17[8];
  uint64_t *v18;
  unsigned __int8 v19[8];
  uint64_t *v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  _BYTE v23[8];
  uint64_t *v24;
  int v25;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)a2);
  InferenceEngine::GreedyDecoderIOProcessor::GreedyDecoderIOProcessor(a1, (uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  *(_QWORD *)a1 = off_1EA90AA80;
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "num_hidden_layers");
  v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v4, &v25);
  v21[0] = 5;
  v22 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_hidden_layers");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v6 = *(_BYTE *)v5;
  *(_BYTE *)v5 = v21[0];
  v21[0] = v6;
  v7 = (uint64_t *)v5[1];
  v5[1] = (uint64_t)v22;
  v22 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "num_attention_heads");
  v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v8, &v25);
  v19[0] = 5;
  v20 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "num_attention_heads");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  v10 = *(_BYTE *)v9;
  *(_BYTE *)v9 = v19[0];
  v19[0] = v10;
  v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v20;
  v20 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a2, "attention_head_size");
  v25 = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v12, &v25);
  v17[0] = 5;
  v18 = (uint64_t *)v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "attention_head_size");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v14 = *(_BYTE *)v13;
  *(_BYTE *)v13 = v17[0];
  v17[0] = v14;
  v15 = (uint64_t *)v13[1];
  v13[1] = (uint64_t)v18;
  v18 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  return a1;
}

void sub_1DE5211C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t **v2;
  va_list va;

  va_start(va, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  InferenceEngine::GreedyDecoderIOProcessor::~GreedyDecoderIOProcessor(v2);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::GreedyDecoderKVCachingIOProcessor::process_inputs(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v10;
  uint64_t *v11;
  uint64_t data_low;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string __p;
  __int128 v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46[3];

  InferenceEngine::GreedyDecoderIOProcessor::process_inputs(a1, a2, a3);
  *(_OWORD *)v46 = 0uLL;
  v45 = 0uLL;
  if (!a3)
  {
    v42 = 0;
    v43 = 0;
    v10 = (unsigned __int8 *)(a1 + 24);
    v44 = 0;
    v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "num_hidden_layers");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v11, (int *)&__p);
    data_low = SLODWORD(__p.__r_.__value_.__l.__data_);
    v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "num_attention_heads");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v13, (int *)&__p);
    v14 = SLODWORD(__p.__r_.__value_.__l.__data_);
    v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v10, "attention_head_size");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v15, (int *)&__p);
    v16 = SLODWORD(__p.__r_.__value_.__l.__data_);
    v17 = operator new(0x28uLL);
    v40 = v17 + 5;
    v41 = v17 + 5;
    *v17 = data_low;
    v17[1] = 1;
    v17[2] = v14;
    v17[3] = 0;
    v17[4] = v16;
    v39 = v17;
    std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_input");
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v42, &v38);
    v18 = v38;
    v38 = 0uLL;
    v19 = (std::__shared_weak_count *)v46[1];
    *(_OWORD *)v46 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v46[0], (uint64_t)&v39);
    std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_input");
    InferenceEngine::DataTensor::build_from_1d_array<float>((uint64_t)&v42, &v38);
    v25 = v38;
    v38 = 0uLL;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    v45 = v25;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    InferenceEngine::DataTensor::reshape((InferenceEngine::DataTensor *)v45, (uint64_t)&v39);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v46[0], &__p);
    *(_QWORD *)&v38 = &__p;
    v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v32 + 5, v46);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v45, &__p);
    *(_QWORD *)&v38 = &__p;
    v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)v33 + 5, (uint64_t *)&v45);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v6 = (std::__shared_weak_count *)v46[1];
  if (v46[1])
  {
    v7 = (unint64_t *)(v46[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 0;
}

void sub_1DE521590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22 - 80);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v22 - 64);
  _Unwind_Resume(a1);
}

BOOL InferenceEngine::GreedyDecoderKVCachingIOProcessor::process_outputs(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  kaldi::quasar::Vocab *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  std::__shared_weak_count *v24;
  kaldi::quasar::Vocab *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  InferenceEngine::DataTensor *v54;
  unint64_t *v55;
  unint64_t v56;
  __n128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  float *v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *size;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  kaldi::quasar::Vocab *v79;
  std::string::size_type v80;
  unint64_t *v81;
  unint64_t v82;
  kaldi::quasar::Vocab *v83;
  unint64_t *v84;
  unint64_t v85;
  kaldi::quasar::Vocab *v86;
  unint64_t *v87;
  unint64_t v88;
  kaldi::quasar::Vocab *v89;
  unint64_t *v90;
  unint64_t v91;
  kaldi::quasar::Vocab *v92;
  unint64_t *v93;
  unint64_t v94;
  kaldi::quasar::Vocab *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t *v102;
  int data;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  uint64_t v135[3];
  __n128 v136;
  uint64_t v137;
  std::string v138;
  int **v139;
  uint64_t v140;
  float **v141;
  _QWORD *v142;
  _QWORD *v143;
  __int128 v144;
  kaldi::quasar::Vocab *v145;
  std::__shared_weak_count *v146;
  kaldi::quasar::Vocab *v147;
  std::__shared_weak_count *v148;
  kaldi::quasar::Vocab *v149;
  std::__shared_weak_count *v150;
  kaldi::quasar::Vocab *v151;
  std::__shared_weak_count *v152;
  kaldi::quasar::Vocab *v153;
  std::__shared_weak_count *v154;
  void *v155[3];
  void *v156[3];
  kaldi::quasar::Vocab *v157;
  std::__shared_weak_count *v158;
  kaldi::quasar::Vocab *v159;
  std::__shared_weak_count *v160;
  InferenceEngine::DataTensor *v161;
  std::__shared_weak_count *v162;
  kaldi::quasar::Vocab *v163;
  std::__shared_weak_count *v164;
  kaldi::quasar::Vocab *v165;
  std::__shared_weak_count *v166;
  std::string __p;
  _QWORD v168[2];
  std::string v169;
  kaldi::quasar::Vocab *v170;
  std::__shared_weak_count *v171;
  std::string v172;
  kaldi::quasar::Vocab *v173;
  std::__shared_weak_count *v174;
  std::string v175;
  kaldi::quasar::Vocab *v176;
  std::__shared_weak_count *v177;
  std::string v178;
  kaldi::quasar::Vocab *v179;
  std::__shared_weak_count *v180;
  std::string v181;
  kaldi::quasar::Vocab *v182;
  std::__shared_weak_count *v183;
  std::string v184;
  __int128 v185;
  std::string v186;

  v186.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input_ids");
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v165 = (kaldi::quasar::Vocab *)*((_QWORD *)v6 + 5);
  v166 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "encoder_hidden_states");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v163 = (kaldi::quasar::Vocab *)*((_QWORD *)v10 + 5);
  v164 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_id");
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v161 = (InferenceEngine::DataTensor *)*((_QWORD *)v14 + 5);
  v162 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_input");
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v18)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v19 = (kaldi::quasar::Vocab *)*((_QWORD *)v18 + 5);
  v20 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
  v159 = v19;
  v160 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_input");
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v23)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v25 = (kaldi::quasar::Vocab *)*((_QWORD *)v23 + 5);
  v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
  v157 = v25;
  v158 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_output");
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v28)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v28 + 5), 0, (char **)v156);
  InferenceEngine::DataTensor::resize((uint64_t)v19, (uint64_t)v156);
  if (v156[0])
  {
    v156[1] = v156[0];
    operator delete(v156[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_output");
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v29)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  InferenceEngine::DataTensor::get_shape(*((InferenceEngine::DataTensor **)v29 + 5), 0, (char **)v155);
  InferenceEngine::DataTensor::resize((uint64_t)v25, (uint64_t)v155);
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_key_output");
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v30)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v31 = *((_QWORD *)v30 + 5);
  v153 = v19;
  v154 = v20;
  if (v20)
  {
    v32 = (unint64_t *)&v20->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v31, (uint64_t *)&v153);
  v35 = v154;
  if (v154)
  {
    v36 = (unint64_t *)&v154->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v34);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "self_past_values_output");
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v38)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v39 = *((_QWORD *)v38 + 5);
  v151 = v157;
  v152 = v158;
  if (v158)
  {
    v40 = (unint64_t *)&v158->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor(v39, (uint64_t *)&v151);
  v43 = v152;
  if (v152)
  {
    v44 = (unint64_t *)&v152->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v42);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "cross_past_key_input");
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v46)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v47 = (std::__shared_weak_count *)*((_QWORD *)v46 + 6);
  v149 = (kaldi::quasar::Vocab *)*((_QWORD *)v46 + 5);
  v150 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "cross_past_values_input");
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v50)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 6);
  v147 = (kaldi::quasar::Vocab *)*((_QWORD *)v50 + 5);
  v148 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54 = v161;
  v145 = v165;
  v146 = v166;
  if (v166)
  {
    v55 = (unint64_t *)&v166->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57.n128_u64[0] = InferenceEngine::DataTensor::cast_data_to_target_tensor((uint64_t)v54, (uint64_t *)&v145);
  v58 = v146;
  if (v146)
  {
    v59 = (unint64_t *)&v146->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v58->__on_zero_shared)(v58, v57);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v144 = 0uLL;
  InferenceEngine::DataTensor::get_2d_array<int>(v161, &v139);
  v61 = **v139;
  memset(&__p, 0, sizeof(__p));
  v62 = (float *)operator new(4uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  *v62 = (float)v61;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 1);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v62 + 1);
  v142 = 0;
  v143 = 0;
  v141 = 0;
  v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  v138.__r_.__value_.__s.__data_[8] = 0;
  v141 = (float **)operator new(0x18uLL);
  v142 = v141;
  v143 = v141 + 3;
  v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)&v143, (uint64_t)&__p, (uint64_t)v168, v141);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
    v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
    if (!v63)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](&v144, (uint64_t *)v63 + 5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
    v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "bos_token_id");
    LODWORD(v133.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v64, (int *)&v133);
    *(float *)&v132.__r_.__value_.__l.__data_ = (float)SLODWORD(v133.__r_.__value_.__l.__data_);
    std::vector<float>::vector(&v138, 1uLL, &v132);
    std::vector<std::vector<float>>::vector(&v139, 1uLL, (uint64_t)&v138);
    InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v139, &v134);
    v65 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0uLL;
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    v144 = v65;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    size = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
    if (v134.__r_.__value_.__l.__size_)
    {
      v70 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
    if (v138.__r_.__value_.__r.__words[0])
    {
      v138.__r_.__value_.__l.__size_ = v138.__r_.__value_.__r.__words[0];
      operator delete(v138.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  InferenceEngine::DataTensor::get_2d_array<float>((InferenceEngine::DataTensor *)v144, &v139);
  std::string::basic_string[abi:ne180100]<0>(&__p, "accumulated_ids");
  v137 = 0;
  v136 = 0uLL;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v136, (uint64_t)v139, v140, 0xAAAAAAAAAAAAAAABLL * ((v140 - (uint64_t)v139) >> 3));
  memset(v135, 0, sizeof(v135));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v135, (uint64_t)v141, (uint64_t)v142, 0xAAAAAAAAAAAAAAABLL * ((float **)v142 - v141));
  InferenceEngine::VectorOps::concatenate_vectors_2d<float>(&v136, v135, 1, (uint64_t *)&v138);
  InferenceEngine::DataTensor::build_from_2d_array<float>((uint64_t **)&v138, &v134);
  v72 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0uLL;
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  v144 = v72;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v77 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v79 = v165;
  kaldi::quasar::Vocab::OOvWord(v165, &v138);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
  v80 = v138.__r_.__value_.__r.__words[2];
  memset(&v138, 0, sizeof(v138));
  __p.__r_.__value_.__r.__words[2] = v80;
  v168[0] = v79;
  v168[1] = v166;
  if (v166)
  {
    v81 = (unint64_t *)&v166->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = v163;
  kaldi::quasar::Vocab::OOvWord(v163, &v134);
  v169 = v134;
  memset(&v134, 0, sizeof(v134));
  v170 = v83;
  v171 = v164;
  if (v164)
  {
    v84 = (unint64_t *)&v164->__shared_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  v86 = v159;
  kaldi::quasar::Vocab::OOvWord(v159, &v133);
  v172 = v133;
  memset(&v133, 0, sizeof(v133));
  v173 = v86;
  v174 = v160;
  if (v160)
  {
    v87 = (unint64_t *)&v160->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = v157;
  kaldi::quasar::Vocab::OOvWord(v157, &v132);
  v175 = v132;
  memset(&v132, 0, sizeof(v132));
  v176 = v89;
  v177 = v158;
  if (v158)
  {
    v90 = (unint64_t *)&v158->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = v149;
  kaldi::quasar::Vocab::OOvWord(v149, &v131);
  v178 = v131;
  memset(&v131, 0, sizeof(v131));
  v179 = v92;
  v180 = v150;
  if (v150)
  {
    v93 = (unint64_t *)&v150->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  v95 = v147;
  kaldi::quasar::Vocab::OOvWord(v147, &v130);
  v181 = v130;
  memset(&v130, 0, sizeof(v130));
  v182 = v95;
  v183 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v144, &v129);
  v184 = v129;
  memset(&v129, 0, sizeof(v129));
  v185 = v144;
  if (*((_QWORD *)&v144 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InferenceEngine::DataTensor>>>>::__assign_unique<std::pair<std::string const,std::shared_ptr<InferenceEngine::DataTensor>> const*>(a2, &__p, &v186);
  v100 = 280;
  do
  {
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v165 + v100);
    if (*((char *)&v164 + v100 + 7) < 0)
      operator delete(*(std::__shared_weak_count **)((char *)&v162 + v100));
    v100 -= 40;
  }
  while (v100);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  v101 = **v141;
  v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)(a1 + 24), "eos_token_id");
  LODWORD(v138.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v102, (int *)&v138);
  data = (int)v138.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v148;
  if (v148)
  {
    v108 = (unint64_t *)&v148->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v150;
  if (v150)
  {
    v111 = (unint64_t *)&v150->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v158;
  if (v158)
  {
    v114 = (unint64_t *)&v158->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v160;
  if (v160)
  {
    v117 = (unint64_t *)&v160->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v162;
  if (v162)
  {
    v120 = (unint64_t *)&v162->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v164;
  if (v164)
  {
    v123 = (unint64_t *)&v164->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v166;
  if (v166)
  {
    v126 = (unint64_t *)&v166->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  return v101 == (float)data;
}

void sub_1DE5223F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  char a65;
  char a67;
  char a69;
  void *a71;

  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a71);
  a71 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t InferenceEngine::Utils::read_json_from_file@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *LogObject;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  void *exception;
  const char *v10;
  std::string v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE buf[12];
  _QWORD v15[51];
  _QWORD v16[21];

  v16[20] = *MEMORY[0x1E0C80C00];
  LogObject = InferenceEngine::Diagnostics_GetLogObject((InferenceEngine *)a1);
  if (os_log_type_enabled(LogObject, OS_LOG_TYPE_INFO))
  {
    if (a1[23] >= 0)
      v5 = a1;
    else
      v5 = *(char **)a1;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1DE3F6000, LogObject, OS_LOG_TYPE_INFO, "Read json from %s", buf, 0xCu);
  }
  std::ifstream::basic_ifstream(buf);
  if (!v15[15])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (a1[23] >= 0)
      v10 = a1;
    else
      v10 = *(const char **)a1;
    InferenceEngine::StringFormatter::StringFormatter(&v11, "Can't open file from %s", v10);
    MEMORY[0x1DF0EC99C](exception, &v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v13 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(buf, (uint64_t)v12, 1, a2);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)((char *)&v15[2] + *(_QWORD *)(*(_QWORD *)buf - 24)) | 4);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](v15);
  std::istream::~istream();
  return MEMORY[0x1DF0ECF6C](v16);
}

void sub_1DE5229A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  void *v18[19];

  v18[18] = *(void **)MEMORY[0x1E0C80C00];
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  v13[0] = a1;
  v13[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v14, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v13, (uint64_t)v14, a3, (uint64_t)v16);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v16, 1, a4);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v18);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v9 + 8 * v10))(v9, v8);
LABEL_6:
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_10;
  }
  if (v15)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(_QWORD *, uint64_t))(*v11 + 8 * v12))(v11, v8);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v13);
}

void sub_1DE522B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15)
{
  uint64_t **v15;
  char *v17;
  uint64_t v18;

  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)&a15);
  v17 = a14;
  if (a14 == &a11)
  {
    v18 = 4;
    v17 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v15);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::locale v22;
  void (***v23[81])(void);

  v23[80] = *(void (****)(void))MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936338;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA92E148;
  v7[1].__shared_owners_ = (uint64_t)a1;
  v19 = v7;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v23, (uint64_t)&v20, (char)fmtflags, 0);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v23, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v23);
  return a1;
}

void sub_1DE522DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
  std::locale::~locale(&a13);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  __int128 v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v9 = a1;
  *((_QWORD *)&v9 + 1) = a2;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(a5, &v9, (uint64_t)v10, a4);
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1DE522E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parse(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t **v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  char v23[8];
  uint64_t v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  void *v27[2];
  char v28;
  std::string __p;
  __int128 v30;
  uint64_t v31;
  std::exception v32;
  _BYTE v33[24];
  std::string v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v35, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v37, a3, (uint64_t)v35, *(_BYTE *)(a1 + 176));
    v6 = v36;
    if (v36 == v35)
    {
      v7 = 4;
      v6 = v35;
    }
    else
    {
      if (!v36)
      {
LABEL_19:
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
        if (a2)
        {
          v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v13;
          if (v13 != 15)
          {
            v14 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v34);
            v30 = *(_OWORD *)(a1 + 64);
            v31 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(v27, "value");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v37, v14, (uint64_t)&v34, (uint64_t)&v32);
            v32.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
            MEMORY[0x1DF0ECA08](v33);
            std::exception::~exception(&v32);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v28 < 0)
              operator delete(v27[0]);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v34.__r_.__value_.__l.__data_);
          }
        }
        if (v42)
        {
          v25[0] = 9;
          v15 = (uint64_t **)&v26;
          v26 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v16 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v25[0];
          v25[0] = v16;
          v17 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v26;
          v26 = v17;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v18 = v25[0];
        }
        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v37);
            return;
          }
          v23[0] = 0;
          v15 = (uint64_t **)&v24;
          v24 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v19 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v23[0];
          v23[0] = v19;
          v20 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v24;
          v24 = v20;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v18 = v23[0];
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15, v18);
        goto LABEL_32;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_19;
  }
  v8 = *(_BYTE *)(a1 + 176);
  v37 = a3;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(a1 + 40);
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      v10 = *(_QWORD *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v34);
      v30 = *(_OWORD *)(a1 + 64);
      v31 = *(_QWORD *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v27, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v37, v10, (uint64_t)&v34, (uint64_t)&v32);
      v32.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
      MEMORY[0x1DF0ECA08](v33);
      std::exception::~exception(&v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (v40)
  {
    v21[0] = 9;
    v22 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v11 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v21[0];
    v21[0] = v11;
    v12 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v22;
    v22 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  }
  if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
}

void sub_1DE5232E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  void *v48;

  a31.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v45 + 16);
  std::exception::~exception(&a31);
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a41 < 0)
    operator delete(a36);
  v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~parser(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer((uint64_t)(a1 + 5));
  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_BYTE *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(_BYTE *a1, int a2)
{
  _QWORD *v3;

  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      goto LABEL_8;
    case 3:
      v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(&byte_1DEBD87CE);
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(_QWORD *)a1 = v3;
      break;
    default:
      *(_QWORD *)a1 = 0;
      break;
  }
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1DE52356C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::parser(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_DWORD *)(v7 + 32) = 0;
  v8 = v7 + 40;
  *(_OWORD *)(v7 + 40) = *a2;
  *(_DWORD *)(v7 + 56) = -1;
  *(_BYTE *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = &byte_1DEBD87CE;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_DWORD *)(a1 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point();
  *(_BYTE *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v8);
  return a1;
}

void sub_1DE523670(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point()
{
  lconv *v0;

  v0 = localeconv();
  if (!v0)
    __assert_rtn("get_decimal_point", "lexer.hpp", 136, "loc != nullptr");
  if (v0->decimal_point)
    return *v0->decimal_point;
  else
    return 46;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(uint64_t a1)
{
  int v2;
  uint64_t result;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  _DWORD v11[2];
  int v12;

  if (!*(_QWORD *)(a1 + 24)
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom((unsigned __int8 **)a1))
  {
    v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_19;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      v2 = *(_DWORD *)(a1 + 16);
      if (v2 > 31)
        break;
      if ((v2 - 9) >= 2 && v2 != 13)
      {
        if ((v2 + 1) < 2)
          return 15;
        goto LABEL_36;
      }
    }
    if (v2 > 90)
    {
      if (v2 <= 109)
      {
        if (v2 == 91)
          return 8;
        if (v2 == 93)
          return 10;
        if (v2 != 102)
          goto LABEL_36;
        qmemcpy(v11, "false", 5);
        v5 = v11;
        v6 = a1;
        v7 = 5;
        v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 <= 122)
      {
        if (v2 == 110)
        {
          v10 = 1819047278;
          v5 = &v10;
          v6 = a1;
          v7 = 4;
          v8 = 3;
        }
        else
        {
          if (v2 != 116)
            goto LABEL_36;
          v12 = 1702195828;
          v5 = &v12;
          v6 = a1;
          v7 = 4;
          v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if (v2 == 123)
        return 9;
      if (v2 == 125)
        return 11;
LABEL_36:
      v9 = "invalid literal";
LABEL_19:
      *(_QWORD *)(a1 + 96) = v9;
      return 14;
    }
    switch(v2)
    {
      case ' ':
        continue;
      case '"':
        result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(a1);
        break;
      case ',':
        result = 13;
        break;
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(a1);
        break;
      case ':':
        result = 12;
        break;
      default:
        goto LABEL_36;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::skip_bom(unsigned __int8 **a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get(unsigned __int8 **a1)
{
  int v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  uint64_t result;
  uint64_t v18;

  *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
  if (*((_BYTE *)a1 + 20))
  {
    *((_BYTE *)a1 + 20) = 0;
    v2 = *((_DWORD *)a1 + 4);
  }
  else
  {
    v3 = *a1;
    if (*a1 == a1[1])
    {
      v2 = -1;
    }
    else
    {
      v2 = *v3;
      *a1 = v3 + 1;
    }
    *((_DWORD *)a1 + 4) = v2;
  }
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v5 = a1[7];
  v4 = (unint64_t)a1[8];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1 + 6;
    v8 = (unint64_t)a1[6];
    v9 = &v5[-v8];
    v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unsigned __int8 *)operator new(v12);
    else
      v13 = 0;
    v14 = &v13[v12];
    v9[(_QWORD)v13] = v2;
    v6 = (uint64_t)&v9[(_QWORD)v13 + 1];
    if (v5 == (unsigned __int8 *)v8)
    {
      v13 = &v9[(_QWORD)v13];
    }
    else
    {
      v15 = &v5[~v8];
      do
      {
        v16 = *--v5;
        (v15--)[(_QWORD)v13] = v16;
      }
      while (v5 != (unsigned __int8 *)v8);
      v5 = *v7;
    }
    a1[6] = v13;
    a1[7] = (unsigned __int8 *)v6;
    a1[8] = v14;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = v2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[7] = (unsigned __int8 *)v6;
  result = *((unsigned int *)a1 + 4);
  if ((_DWORD)result == 10)
  {
    v18 = (uint64_t)(a1[5] + 1);
    a1[4] = 0;
    a1[5] = (unsigned __int8 *)v18;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;

  if (*a2 != *(unsigned __int8 *)(a1 + 16))
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal();
  if (a3 >= 2)
  {
    v6 = a3 - 1;
    v7 = a2 + 1;
    while (1)
    {
      v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      v9 = *v7++;
      if (v9 != v8)
        break;
      if (!--v6)
        return a4;
    }
    *(_QWORD *)(a1 + 96) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string(uint64_t a1)
{
  int v2;
  uint64_t result;
  const char *v4;
  int v5;
  std::string *v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  unsigned int codepoint;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
  while (2)
  {
    while (2)
    {
      v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         + 1;
      result = 4;
      v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
          v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '"':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(_QWORD *)&v14 = 0xBF00000080;
          v6 = (std::string *)a1;
          v7 = 2;
          goto LABEL_19;
        case 225:
          v8 = xmmword_1DEC40480;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          v8 = xmmword_1DEC40470;
          goto LABEL_7;
        case 238:
          v8 = xmmword_1DEC40460;
LABEL_7:
          v14 = v8;
          v6 = (std::string *)a1;
          v7 = 4;
          goto LABEL_19;
        case 241:
          v15 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE48;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          v15 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE60;
          goto LABEL_18;
        case 245:
          v15 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE78;
LABEL_18:
          v14 = *v9;
          v6 = (std::string *)a1;
          v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14;
          continue;
        default:
          v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (codepoint == -1)
          goto LABEL_85;
        v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000)
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1) != 117)
        {
LABEL_86:
          v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55)
            goto LABEL_86;
          v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(_QWORD *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102)
            goto LABEL_82;
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number(uint64_t a1)
{
  int v2;
  std::string *v3;
  int v4;
  std::string *v5;
  int v6;
  int v7;
  std::string *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *__endptr;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      v4 = 5;
    }
    else
    {
      if (v2 != 45)
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
      v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
      if ((v13 - 49) < 9)
      {
        v2 = *(_DWORD *)(a1 + 16);
        v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      v4 = 6;
    }
    v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if (v15 == 101 || v15 == 69)
    {
      v5 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v15 != 46)
      goto LABEL_40;
    v5 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
       - 48 > 9)
    {
      v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    v5 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(_BYTE *)(a1 + 16));
    v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v7 - 48) < 0xA)
    {
      v8 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      v8 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(_QWORD *)(a1 + 96) = v14;
    return 14;
  }
  v3 = (std::string *)(a1 + 72);
  v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  v5 = (std::string *)(a1 + 72);
  while (1)
  {
    v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    if ((v6 - 48) >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
  }
  if (v6 == 46)
    goto LABEL_34;
  if (v6 == 69 || v6 == 101)
    goto LABEL_9;
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    v21 = (const char **)(a1 + 72);
    v22 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v22 = *v21;
    v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      v21 = *(const char ***)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v21 + v24)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 104) = v23;
      return 6;
    }
  }
  else
  {
    v17 = (const char **)(a1 + 72);
    v18 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v18 = *v17;
    v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      v17 = *(const char ***)(a1 + 72);
      v20 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v17 + v20)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 112) = v19;
      return 5;
    }
  }
LABEL_14:
  v9 = (const char **)(a1 + 72);
  v10 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v10 = *v9;
  *(double *)(a1 + 120) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    v9 = *(const char ***)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v9 + v11)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(result + 32);
  v2 = *(_QWORD *)(result + 32);
  *(_BYTE *)(result + 20) = 1;
  --*(_QWORD *)(result + 24);
  if (v2 || (v1 = (_QWORD *)(result + 40), (v2 = *(_QWORD *)(result + 40)) != 0))
    *v1 = v2 - 1;
  if (*(_DWORD *)(result + 16) != -1)
  {
    v3 = *(_QWORD *)(result + 56);
    if (*(_QWORD *)(result + 48) == v3)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget();
    *(_QWORD *)(result + 56) = v3 - 1;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 95) < 0)
  {
    **(_BYTE **)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 95) = 0;
  }
  v2 = *(_BYTE **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9 + 1;
    *(_QWORD *)(a1 + 64) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 56) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 16) != 117)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  v2 = 0;
  LODWORD(v3) = 0;
  v8 = xmmword_1DEC40490;
  do
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    v5 = *(_DWORD *)(a1 + 16);
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5)
          return 0xFFFFFFFFLL;
        v6 = v5 - 87;
      }
      else
      {
        v6 = v5 - 55;
      }
    }
    v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range();
  v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get((unsigned __int8 **)a1);
    v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::~lexer(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string __p;
  void *v34[2];
  std::string::size_type v35;
  std::exception v36;
  _BYTE v37[24];
  std::string v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v4 = (__int128 *)(a1 + 112);
  v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v36.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v36, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v36.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v36, 0);
        goto LABEL_19;
      case 3:
        v36.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v36, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v36, 0);
        goto LABEL_19;
      case 6:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v36, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v36.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v36, 0);
          goto LABEL_19;
        }
        v27 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v32);
        v28 = std::string::insert(&v32, 0, "number overflow parsing '");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&__p, "'");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v35 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)v34 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v34, (nlohmann::detail::exception *)&v36);
        v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v38, (uint64_t)&v36);
        v36.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v37);
        std::exception::~exception(&v36);
        if (SHIBYTE(v35) < 0)
          operator delete(v34[0]);
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v36.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v39, &v36);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56;
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_59;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12)
            goto LABEL_60;
          LOBYTE(v36.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v39, &v36);
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        v9 = v40;
        if (!v40)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if (((*(_QWORD *)&v39[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_36;
            if (v10 != 10)
            {
              v22 = *(_QWORD *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
              *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
              v35 = *(_QWORD *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v32, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v32, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
              v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v38, (uint64_t)&v36);
              goto LABEL_49;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2))
              goto LABEL_56;
            v11 = v40;
            if (!v40)
            {
              v23 = 383;
              goto LABEL_62;
            }
LABEL_30:
            v9 = v11 - 1;
            v40 = v9;
            if (!v9)
              goto LABEL_43;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v24 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
            *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
            v35 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v32, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v32, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
            v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v24, (uint64_t)&v38, (uint64_t)&v36);
            goto LABEL_49;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2))
            goto LABEL_56;
          v11 = v40;
          if (!v40)
          {
            v23 = 439;
LABEL_62:
            __assert_rtn("sax_parse_internal", "parser.hpp", v23, "not states.empty()");
          }
          goto LABEL_30;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          v25 = *(_QWORD *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
          *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
          v35 = *(_QWORD *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v32, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v32, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
          v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v38, (uint64_t)&v36);
          goto LABEL_49;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        v26 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v38, (uint64_t)&v36);
LABEL_49:
        v17 = v20;
        v36.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v37);
        std::exception::~exception(&v36);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
LABEL_44:
        if (v39)
          operator delete(v39);
        return v17;
      case 0xE:
        v19 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
      default:
        v21 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
    }
  }
}

void sub_1DE524F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;

  a29.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v29 + 16);
  std::exception::~exception(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  v32 = *(void **)(v30 - 88);
  if (v32)
    operator delete(v32);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
      case 1:
        v7 = __cxa_allocate_exception(0x20uLL);
        v8 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v7, a4);
      case 2:
        v9 = __cxa_allocate_exception(0x20uLL);
        v10 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
      case 3:
        v11 = __cxa_allocate_exception(0x20uLL);
        v12 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v11, a4);
      case 4:
        v13 = __cxa_allocate_exception(0x20uLL);
        v14 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v13, a4);
      default:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  char __str[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 48);
  for (i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v7 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1DE5252AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  void *v24;
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  std::string::basic_string[abi:ne180100]<0>(&v24, "parse_error");
  nlohmann::detail::exception::name(a1, &v26);
  v8 = std::string::append(&v26, "parse error");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, ": ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31 = v19->__r_.__value_.__r.__words[2];
  v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24);
  v21 = *a2;
  if (v31 >= 0)
    v22 = (const char *)&v30;
  else
    v22 = (const char *)v30;
  nlohmann::detail::exception::exception(a4, a1, v22);
  *(_QWORD *)a4 = &unk_1EA92E0D0;
  *((_QWORD *)a4 + 4) = v21;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
}

void sub_1DE5254A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a4, "- ");
  v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 136));
    v14 = std::string::append(&v36, "; last read: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2)
      return;
    goto LABEL_50;
  }
  v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2)
    return;
LABEL_50:
  v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1DE525878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::exception_vtbl *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string v34;
  std::string __p;
  void *v36[2];
  std::string::size_type v37;
  std::exception v38;
  _BYTE v39[24];
  std::string v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v5 = (std::exception_vtbl *)(a1 + 112);
  v6 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v38, a3);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 7:
        if ((*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38, a3);
          goto LABEL_17;
        }
        v29 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v34);
        v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&__p, "'");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        v19 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        v38.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v39);
        std::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_55;
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
          goto LABEL_12;
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          v19 = 0;
          goto LABEL_37;
        }
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_51;
          v17 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
          v38.__vftable = v5;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v38)+ 7);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_54;
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        v9 = v42;
        if (!v42)
        {
LABEL_36:
          v19 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if (((*(_QWORD *)&v41[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_31;
            if (v10 != 10)
            {
              v24 = *(_QWORD *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
              *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
              v37 = *(_QWORD *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v24, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_42;
            }
            a2[2] -= 8;
            v11 = v42;
            if (!v42)
            {
              v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            v9 = v11 - 1;
            v42 = v9;
            if (!v9)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v26 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
            *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
            v37 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_42;
          }
          a2[2] -= 8;
          v11 = v42;
          if (!v42)
          {
            v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          v27 = *(_QWORD *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
          *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
          v37 = *(_QWORD *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_42;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
        v38.__vftable = v5;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v38)+ 7);
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan(v6);
          goto LABEL_32;
        }
LABEL_54:
        v28 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        v19 = v22;
        v38.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v39);
        std::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
LABEL_37:
        if (v41)
          operator delete(v41);
        return v19;
      case 0xE:
        v21 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        v23 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
    }
  }
}

void sub_1DE52618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;

  a29.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v39 + 16);
  std::exception::~exception(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a39 < 0)
    operator delete(a34);
  v42 = *(void **)(v40 - 104);
  if (v42)
    operator delete(v42);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        v6 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a4);
      case 1:
        v7 = __cxa_allocate_exception(0x20uLL);
        v8 = (void *)nlohmann::detail::invalid_iterator::invalid_iterator((uint64_t)v7, a4);
      case 2:
        v9 = __cxa_allocate_exception(0x20uLL);
        v10 = (void *)nlohmann::detail::type_error::type_error((uint64_t)v9, a4);
      case 3:
        v11 = __cxa_allocate_exception(0x20uLL);
        v12 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)v11, a4);
      case 4:
        v13 = __cxa_allocate_exception(0x20uLL);
        v14 = (void *)nlohmann::detail::other_error::other_error((uint64_t)v13, a4);
      default:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error();
    }
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  char v8;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(_BYTE *)(a1 + 136) = 9;
  *(_BYTE *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_1DE5264F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v3;
  uint64_t **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v4);
  v8 = (_QWORD *)v1[15];
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = (void *)v1[7];
  if (v11)
    operator delete(v11);
  if (*v2)
    operator delete(*v2);
  v12 = *v5;
  if (*v5)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_1DEC40440[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive object size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1DE526754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 *v16[5];
  unsigned __int8 *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[8];
  uint64_t *v21;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)(a1 + 17));
    v4 = *(_QWORD *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    v5 = *(_BYTE *)v4;
    *(_BYTE *)v4 = v20[0];
    v20[0] = v5;
    v6 = *(uint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v21;
    v21 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  v8 = a1[1];
  v7 = a1[2];
  if (v8 == v7)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  v9 = a1[5];
  if (!v9)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(&v17, (uint64_t)v10);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(&v17);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(_QWORD *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v17) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator++(&v17);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v16, *(_QWORD *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v16);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(&v17, v16))
            {
              return 1;
            }
          }
          v11 = *(unsigned __int8 **)(a1[2] - 8);
          v13 = v17;
          v14 = v18;
          v15 = v19;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v11, &v13, v16);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  char v6;
  uint64_t *v7;
  _BYTE v9[8];
  uint64_t *v10;
  char v11;
  _BYTE v12[8];
  uint64_t *v13;
  __int128 *v14;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v12, (uint64_t)a2);
  v11 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v11);
  if (v11 && *(_QWORD *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    v4 = *(uint64_t ***)(*(_QWORD *)(a1[2] - 8) + 8);
    v14 = a2;
    v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    v6 = *((_BYTE *)v5 + 56);
    v5 += 7;
    *(_BYTE *)v5 = v9[0];
    v9[0] = v6;
    v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    v10 = v7;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
    a1[10] = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  return 1;
}

void sub_1DE526A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, uint64_t *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string::size_type v29;
  char v30;

  v4 = (char **)(a1 + 1);
  v30 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v30);
  LOBYTE(v28) = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v28, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_1DEC40440[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v27, a2);
        v25 = std::string::insert(&v27, 0, "excessive array size: ");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v29 = v25->__r_.__value_.__r.__words[2];
        v28 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v28, exception);
      }
    }
  }
  return 1;
}

void sub_1DE526C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t *v13;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v12, (uint64_t)(a1 + 17));
    v4 = *(_QWORD *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    v5 = *(_BYTE *)v4;
    *(_BYTE *)v4 = v12[0];
    v12[0] = v5;
    v6 = *(uint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v13;
    v13 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v8 = a1[1];
  v7 = a1[2];
  if (v8 == v7)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  v9 = a1[5];
  if (!v9)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
    v10 = *(_QWORD *)(v7 - 16);
    if (*(_BYTE *)v10 == 2)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) - 16);
  }
  return 1;
}

void nlohmann::detail::out_of_range::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_of_range");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &unk_1EA92E0F8;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1DE526EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  _BYTE v26[8];
  uint64_t *v27;
  _BYTE v28[8];
  uint64_t *v29;
  _BYTE v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "not key_keep_stack.empty()";
          v25 = 615;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1DE527268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1DF0ED014);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  v3 = *result;
  if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    return v4 + 56;
  }
  else if (a1[4])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_1DE5273B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 **v6;
  int v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v19;
  nlohmann::detail::exception *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;

  if (*a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)&v25, exception);
  }
  v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v6);
  v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (a2[4])
    {
      v19 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "iterator out of range");
      nlohmann::detail::invalid_iterator::create(205, (uint64_t)&v25, v19);
    }
    if (v7 == 8)
    {
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      v14 = *v8;
      if (*v8)
      {
        v8[1] = v14;
        v10 = v14;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
        return;
      }
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        v10 = *v8;
LABEL_13:
        operator delete(v10);
        v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    v15 = (uint64_t **)*((_QWORD *)a1 + 1);
    v16 = (uint64_t *)a2[1];
    v17 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(v15, v16);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
    a3[1] = v17;
  }
  else
  {
    if (v7 != 2)
    {
      v20 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v21 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v24, v21);
      v22 = std::string::insert(&v24, 0, "cannot use erase() with ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v26 = v22->__r_.__value_.__r.__words[2];
      v25 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create(307, (uint64_t)&v25, v20);
    }
    v11 = *((_QWORD *)a1 + 1);
    v12 = (uint64_t)a2[2];
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v25, v12 + 16, *(_QWORD *)(v11 + 8), v12);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
}

void sub_1DE527648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v10[8];
  uint64_t *v11;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v10[0] = *(_BYTE *)v5;
    v11 = *(uint64_t **)(v5 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
    *(_BYTE *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    v7 = *(_BYTE *)a4;
    *(_BYTE *)a4 = v10[0];
    v10[0] = v7;
    v8 = *(uint64_t **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v11;
    v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DE5278F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 7;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "not key_keep_stack.empty()";
          v25 = 615;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1DE527C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = (uint64_t *)*a2;
    v30[0] = 4;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "not key_keep_stack.empty()";
          v25 = 615;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1DE527F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  const char *v23;
  int v24;
  _BYTE v25[8];
  uint64_t *v26;
  _BYTE v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v29[0] = 0;
    v30 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v14 = *(_BYTE *)v13;
        *(_BYTE *)v13 = v27[0];
        v27[0] = v14;
        v15 = *(uint64_t **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v28;
        v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        v12 = 1;
        goto LABEL_21;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(_BYTE *)v10 = v29[0];
            *(_QWORD *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v16 = a1[8];
          if (v16)
          {
            v17 = v16 - 1;
            v18 = *(_QWORD *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v25[0] = v29[0];
              v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v20 = *(_BYTE *)v19;
              *(_BYTE *)v19 = v25[0];
              v25[0] = v20;
              v21 = *(uint64_t **)(v19 + 8);
              *(_QWORD *)(v19 + 8) = v26;
              v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v23 = "not key_keep_stack.empty()";
          v24 = 615;
        }
        else
        {
          v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_1DE528270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 5;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "not key_keep_stack.empty()";
          v25 = 615;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1DE528578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  const char *v23;
  int v24;
  _BYTE v25[8];
  uint64_t *v26;
  _BYTE v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v29, a2);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v14 = *(_BYTE *)v13;
        *(_BYTE *)v13 = v27[0];
        v27[0] = v14;
        v15 = *(uint64_t **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v28;
        v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        v12 = 1;
        goto LABEL_21;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(_BYTE *)v10 = v29[0];
            *(_QWORD *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v16 = a1[8];
          if (v16)
          {
            v17 = v16 - 1;
            v18 = *(_QWORD *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v25[0] = v29[0];
              v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v20 = *(_BYTE *)v19;
              *(_BYTE *)v19 = v25[0];
              v25[0] = v20;
              v21 = *(uint64_t **)(v19 + 8);
              *(_QWORD *)(v19 + 8) = v26;
              v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v23 = "not key_keep_stack.empty()";
          v24 = 615;
        }
        else
        {
          v23 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v24 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v24, v23);
      }
    }
LABEL_17:
    v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_1DE528864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 6;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json_sax.hpp", 624, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "not key_keep_stack.empty()";
          v25 = 615;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() or ref_stack.back()->is_object()";
          v25 = 603;
        }
        __assert_rtn("handle_value", "json_sax.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_1DE528B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parse_error::parse_error(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1EA92E178;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1DF0EC9F0](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1EA92E0D0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t nlohmann::detail::out_of_range::out_of_range(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1EA92E178;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1DF0EC9F0](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1EA92E0F8;
  return a1;
}

uint64_t nlohmann::detail::invalid_iterator::invalid_iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1EA92E178;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1DF0EC9F0](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1EA92E120;
  return a1;
}

uint64_t nlohmann::detail::type_error::type_error(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1EA92E178;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1DF0EC9F0](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1EA92E080;
  return a1;
}

uint64_t nlohmann::detail::other_error::other_error(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1EA92E178;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1DF0EC9F0](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1EA92E0A8;
  return a1;
}

void nlohmann::detail::parse_error::~parse_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1DF0ED014);
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1DE528E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10)
    return "unknown token";
  else
    return off_1EA93BF38[a1];
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 1;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_1DEC40440[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive object size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_1DE529154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  LOBYTE(v27) = 2;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v27, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_1DEC40440[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v26, a2);
      v24 = std::string::insert(&v26, 0, "excessive array size: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v28 = v24->__r_.__value_.__r.__words[2];
      v27 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v27, exception);
    }
  }
  return 1;
}

void sub_1DE529364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t *v18;
  char v19[8];
  uint64_t *v20;
  char v21[8];
  uint64_t *v22;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = *a2;
    v21[0] = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v22, v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v12 = *(_BYTE *)v11;
    *(_BYTE *)v11 = v21[0];
    v21[0] = v12;
    v13 = *(uint64_t **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v22;
    v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v7, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v7, a2);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v15 = *a2;
      v19[0] = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v20, v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      v17 = *(_BYTE *)v16;
      *(_BYTE *)v16 = v19[0];
      v19[0] = v17;
      v18 = *(uint64_t **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v20;
      v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;

  v4 = *a2;
  v3 = *(_BYTE **)(a1 + 8);
  *v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(_QWORD *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_1DE529580(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[16 * v9];
  v12 = *a2;
  *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1DE529664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 7;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 7;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 7;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 7;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DE5298FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 4;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 4;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 4;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 4;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DE529B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  char v17[8];
  uint64_t *v18;
  char v19[8];
  uint64_t *v20;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v19[0] = 0;
    v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    v10 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    v11 = *(_BYTE *)v10;
    *(_BYTE *)v10 = v19[0];
    v19[0] = v11;
    v12 = *(uint64_t **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v20;
    v20 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v7);
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      v17[0] = 0;
      v18 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      v14 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      v15 = *(_BYTE *)v14;
      *(_BYTE *)v14 = v17[0];
      v17[0] = v15;
      v16 = *(uint64_t **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v18;
      v18 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = a1[2] - v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v13[4] = a1 + 2;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v5, v7);
  v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_1DE529DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 5;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 5;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 5;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 5;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DE52A090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  char v14[8];
  uint64_t *v15;
  char v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    v8 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v9 = *(_BYTE *)v8;
    *(_BYTE *)v8 = v16[0];
    v16[0] = v9;
    v10 = *(uint64_t **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v17;
    v17 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(uint64_t ***)(v4 - 8);
    v6 = *(unsigned __int8 *)v5;
    if (v6 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v5[1], a2);
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v14, a2);
      v11 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      v12 = *(_BYTE *)v11;
      *(_BYTE *)v11 = v14[0];
      v14[0] = v12;
      v13 = *(uint64_t **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v15;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[16 * v9];
    v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_1DE52A2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 6;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 6;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 6;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 6;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DE52A578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a4, a1, (uint64_t)v9, a3);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1DE52A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t **v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  char v23[8];
  uint64_t v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  void *v27[2];
  char v28;
  std::string __p;
  __int128 v30;
  uint64_t v31;
  std::exception v32;
  _BYTE v33[24];
  std::string v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v35, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v37, a3, (uint64_t)v35, *(_BYTE *)(a1 + 176));
    v6 = v36;
    if (v36 == v35)
    {
      v7 = 4;
      v6 = v35;
    }
    else
    {
      if (!v36)
      {
LABEL_19:
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
        if (a2)
        {
          v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
          *(_DWORD *)(a1 + 32) = v13;
          if (v13 != 15)
          {
            v14 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v34);
            v30 = *(_OWORD *)(a1 + 64);
            v31 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(v27, "value");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v37, v14, (uint64_t)&v34, (uint64_t)&v32);
            v32.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
            MEMORY[0x1DF0ECA08](v33);
            std::exception::~exception(&v32);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v28 < 0)
              operator delete(v27[0]);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v34.__r_.__value_.__l.__data_);
          }
        }
        if (v42)
        {
          v25[0] = 9;
          v15 = (uint64_t **)&v26;
          v26 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v16 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v25[0];
          v25[0] = v16;
          v17 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v26;
          v26 = v17;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v18 = v25[0];
        }
        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v37);
            return;
          }
          v23[0] = 0;
          v15 = (uint64_t **)&v24;
          v24 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v19 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v23[0];
          v23[0] = v19;
          v20 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v24;
          v24 = v20;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v18 = v23[0];
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15, v18);
        goto LABEL_32;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_19;
  }
  v8 = *(_BYTE *)(a1 + 176);
  v37 = a3;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((nlohmann::detail::input_stream_adapter *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      v10 = *(_QWORD *)(a1 + 64);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string(a1 + 40, &v34);
      v30 = *(_OWORD *)(a1 + 64);
      v31 = *(_QWORD *)(a1 + 80);
      std::string::basic_string[abi:ne180100]<0>(v27, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)&v37, v10, (uint64_t)&v34, (uint64_t)&v32);
      v32.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
      MEMORY[0x1DF0ECA08](v33);
      std::exception::~exception(&v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (v40)
  {
    v21[0] = 9;
    v22 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v11 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v21[0];
    v21[0] = v11;
    v12 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v22;
    v22 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  }
  if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
}

void sub_1DE52AA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  void *v48;

  a31.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v45 + 16);
  std::exception::~exception(&a31);
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a41 < 0)
    operator delete(a36);
  v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  nlohmann::detail::input_stream_adapter *v8;

  v7 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a2;
  v8 = (nlohmann::detail::input_stream_adapter *)(v7 + 40);
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(v7 + 56) = -1;
  *(_BYTE *)(v7 + 60) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = &byte_1DEBD87CE;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_DWORD *)(v7 + 168) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_decimal_point();
  *((_BYTE *)v8 + 136) = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v8);
  return a1;
}

void sub_1DE52ACCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(nlohmann::detail::input_stream_adapter *this)
{
  unint64_t v2;
  uint64_t result;
  int *v5;
  nlohmann::detail::input_stream_adapter *v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  _DWORD v11[2];
  int v12;

  v2 = *((_QWORD *)this + 3);
  if (!v2
    && !nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    v9 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
    goto LABEL_19;
  }
  while (2)
  {
    while (1)
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((uint64_t *)v2, this);
      v2 = *((unsigned int *)this + 4);
      if ((int)v2 > 31)
        break;
      if ((v2 - 9) >= 2 && (_DWORD)v2 != 13)
      {
        if ((v2 + 1) < 2)
          return 15;
        goto LABEL_36;
      }
    }
    if ((int)v2 > 90)
    {
      if ((int)v2 <= 109)
      {
        if ((_DWORD)v2 == 91)
          return 8;
        if ((_DWORD)v2 == 93)
          return 10;
        if ((_DWORD)v2 != 102)
          goto LABEL_36;
        qmemcpy(v11, "false", 5);
        v5 = v11;
        v6 = this;
        v7 = 5;
        v8 = 2;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if ((int)v2 <= 122)
      {
        if ((_DWORD)v2 == 110)
        {
          v10 = 1819047278;
          v5 = &v10;
          v6 = this;
          v7 = 4;
          v8 = 3;
        }
        else
        {
          if ((_DWORD)v2 != 116)
            goto LABEL_36;
          v12 = 1702195828;
          v5 = &v12;
          v6 = this;
          v7 = 4;
          v8 = 1;
        }
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v6, (unsigned __int8 *)v5, v7, v8);
      }
      if ((_DWORD)v2 == 123)
        return 9;
      if ((_DWORD)v2 == 125)
        return 11;
LABEL_36:
      v9 = "invalid literal";
LABEL_19:
      *((_QWORD *)this + 12) = v9;
      return 14;
    }
    v2 = (v2 - 32);
    switch((int)v2)
    {
      case 0:
        continue;
      case 2:
        result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
        break;
      case 12:
        result = 13;
        break;
      case 13:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
        result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
        break;
      case 26:
        result = 12;
        break;
      default:
        goto LABEL_36;
    }
    return result;
  }
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(nlohmann::detail::input_stream_adapter *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(nlohmann::detail::input_stream_adapter *this)
{
  int character;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  *(int64x2_t *)((char *)this + 24) = vaddq_s64(*(int64x2_t *)((char *)this + 24), vdupq_n_s64(1uLL));
  if (*((_BYTE *)this + 20))
  {
    *((_BYTE *)this + 20) = 0;
    character = *((_DWORD *)this + 4);
  }
  else
  {
    character = nlohmann::detail::input_stream_adapter::get_character(this);
    *((_DWORD *)this + 4) = character;
  }
  if (character == -1)
    return 0xFFFFFFFFLL;
  v4 = (_BYTE *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 8);
  if ((unint64_t)v4 >= v3)
  {
    v6 = *((_QWORD *)this + 6);
    v7 = &v4[-v6];
    v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v3 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v10];
    v7[(_QWORD)v11] = character;
    v5 = (uint64_t)&v7[(_QWORD)v11 + 1];
    if (v4 == (_BYTE *)v6)
    {
      v11 = &v7[(_QWORD)v11];
    }
    else
    {
      v13 = &v4[~v6];
      do
      {
        v14 = *--v4;
        (v13--)[(_QWORD)v11] = v14;
      }
      while (v4 != (_BYTE *)v6);
      v4 = (_BYTE *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = v11;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 8) = v12;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = character;
    v5 = (uint64_t)(v4 + 1);
  }
  *((_QWORD *)this + 7) = v5;
  result = *((unsigned int *)this + 4);
  if ((_DWORD)result == 10)
  {
    v16 = *((_QWORD *)this + 5) + 1;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(nlohmann::detail::input_stream_adapter *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;

  if (*a2 != *((unsigned __int8 *)this + 16))
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal();
  if (a3 >= 2)
  {
    v6 = a3 - 1;
    v7 = a2 + 1;
    while (1)
    {
      v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v9 = *v7++;
      if (v9 != v8)
        break;
      if (!--v6)
        return a4;
    }
    *((_QWORD *)this + 12) = "invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  int v2;
  uint64_t result;
  const char *v4;
  int v5;
  std::string *v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  unsigned int codepoint;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  if (*(_DWORD *)(a1 + 16) != 34)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
  while (2)
  {
    while (2)
    {
      v2 = ((uint64_t (*)(nlohmann::detail::input_stream_adapter *))nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get)((nlohmann::detail::input_stream_adapter *)a1)
         + 1;
      result = 4;
      v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          v5 = *(_DWORD *)(a1 + 16);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((uint64_t *)"invalid string: missing closing quote", (nlohmann::detail::input_stream_adapter *)a1);
          v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '"':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(_QWORD *)&v16 = 0xBF00000080;
          v6 = (std::string *)a1;
          v7 = 2;
          goto LABEL_19;
        case 225:
          v8 = xmmword_1DEC40480;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          v8 = xmmword_1DEC40470;
          goto LABEL_7;
        case 238:
          v8 = xmmword_1DEC40460;
LABEL_7:
          v16 = v8;
          v6 = (std::string *)a1;
          v7 = 4;
          goto LABEL_19;
        case 241:
          v17 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE48;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          v17 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE60;
          goto LABEL_18;
        case 245:
          v17 = 0xBF00000080;
          v9 = &xmmword_1DEC3FE78;
LABEL_18:
          v16 = *v9;
          v6 = (std::string *)a1;
          v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v16, v7) & 1) == 0)return 14;
          continue;
        default:
          v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (codepoint == -1)
          goto LABEL_85;
        v12 = codepoint;
        v13 = (uint64_t *)(codepoint & 0xFFFFFC00);
        if ((_DWORD)v13 != 55296)
        {
          if ((_DWORD)v13 == 56320)
          {
            v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000)
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string();
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 72), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 72), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 72), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v13, (nlohmann::detail::input_stream_adapter *)a1) != 92|| nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v14, (nlohmann::detail::input_stream_adapter *)a1) != 117)
        {
LABEL_86:
          v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((nlohmann::detail::input_stream_adapter *)a1);
        if (v15 != -1)
        {
          if (v15 >> 10 != 55)
            goto LABEL_86;
          v12 = v15 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(_QWORD *)(a1 + 96) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102)
            goto LABEL_82;
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  int v2;
  std::string *v3;
  int v4;
  uint64_t *v5;
  std::string *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t *v12;
  const char **v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  const char *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  const char **v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  const char **v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char *__endptr;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::reset(a1);
  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 72), 48);
      v4 = 5;
    }
    else
    {
      if (v2 != 45)
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
      v3 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), 45);
      v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v17, (nlohmann::detail::input_stream_adapter *)a1);
      if (v18 - 49 < 9)
      {
        v2 = *(_DWORD *)(a1 + 16);
        v4 = 6;
        goto LABEL_3;
      }
      if (v18 != 48)
      {
        v20 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      v4 = 6;
    }
    v22 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v21, (nlohmann::detail::input_stream_adapter *)a1);
    if (v22 == 101 || v22 == 69)
    {
      v6 = (std::string *)(a1 + 72);
      goto LABEL_9;
    }
    if (v22 != 46)
      goto LABEL_40;
    v6 = (std::string *)(a1 + 72);
LABEL_34:
    std::string::push_back(v6, *(_BYTE *)(a1 + 128));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v23, (nlohmann::detail::input_stream_adapter *)a1)- 48 > 9)
    {
      v20 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    v6 = (std::string *)(a1 + 72);
    do
    {
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      v25 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v24, (nlohmann::detail::input_stream_adapter *)a1);
    }
    while (v25 - 48 < 0xA);
    if (v25 != 101 && v25 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v6, *(_BYTE *)(a1 + 16));
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v8, (nlohmann::detail::input_stream_adapter *)a1);
    if (v9 - 48 < 0xA)
    {
      v10 = (std::string *)(a1 + 72);
      goto LABEL_11;
    }
    if (v9 == 45 || v9 == 43)
    {
      v10 = (std::string *)(a1 + 72);
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v19, (nlohmann::detail::input_stream_adapter *)a1)- 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v10, *(_BYTE *)(a1 + 16));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v11, (nlohmann::detail::input_stream_adapter *)a1)- 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v12, (nlohmann::detail::input_stream_adapter *)a1)- 48 < 0xA);
        }
        goto LABEL_13;
      }
      v20 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v20 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(_QWORD *)(a1 + 96) = v20;
    return 14;
  }
  v3 = (std::string *)(a1 + 72);
  v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  v6 = (std::string *)(a1 + 72);
  while (1)
  {
    v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(v5, (nlohmann::detail::input_stream_adapter *)a1);
    if (v7 - 48 >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
  }
  if (v7 == 46)
    goto LABEL_34;
  if (v7 == 69 || v7 == 101)
    goto LABEL_9;
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    v30 = (const char **)(a1 + 72);
    v31 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v31 = *v30;
    v32 = strtoll(v31, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      v30 = *(const char ***)(a1 + 72);
      v33 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      v33 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v30 + v33)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 104) = v32;
      return 6;
    }
  }
  else
  {
    v26 = (const char **)(a1 + 72);
    v27 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v27 = *v26;
    v28 = strtoull(v27, &__endptr, 10);
    if (*(char *)(a1 + 95) < 0)
    {
      v26 = *(const char ***)(a1 + 72);
      v29 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      v29 = *(unsigned __int8 *)(a1 + 95);
    }
    if (__endptr != (char *)v26 + v29)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 112) = v28;
      return 5;
    }
  }
LABEL_14:
  v13 = (const char **)(a1 + 72);
  v14 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v14 = *v13;
  *(double *)(a1 + 120) = strtod(v14, &__endptr);
  if (*(char *)(a1 + 95) < 0)
  {
    v13 = *(const char ***)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a1 + 95);
  }
  if (__endptr != (char *)v13 + v15)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number();
  return 7;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t result;
  std::ios_base *v5;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    if ((_DWORD)result == -1)
    {
      v5 = (std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(nlohmann::detail::input_stream_adapter *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 4) != 117)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  v2 = 0;
  LODWORD(v3) = 0;
  v8 = xmmword_1DEC40490;
  do
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    v5 = *((_DWORD *)this + 4);
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5)
          return 0xFFFFFFFFLL;
        v6 = v5 - 87;
      }
      else
      {
        v6 = v5 - 55;
      }
    }
    v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint();
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(std::string *a1, _DWORD *a2, unint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range();
  v6 = a1 + 3;
  std::string::push_back(a1 + 3, a1->__r_.__value_.__s.__data_[16]);
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((nlohmann::detail::input_stream_adapter *)a1);
    v8 = a1->__r_.__value_.__r.__words[2];
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  a1[4].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  void *v2;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this[6];
  if (v2)
  {
    this[7] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  nlohmann::detail::input_stream_adapter *v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string v32;
  std::string __p;
  void *v34[2];
  std::string::size_type v35;
  std::exception v36;
  _BYTE v37[24];
  std::string v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v4 = (__int128 *)(a1 + 112);
  v5 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v36.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v36, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v36.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v36, 0);
        goto LABEL_19;
      case 3:
        v36.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v36, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v36, 0);
        goto LABEL_19;
      case 6:
        v36.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v36, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v36.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v36, 0);
          goto LABEL_19;
        }
        v27 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v32);
        v28 = std::string::insert(&v32, 0, "number overflow parsing '");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&__p, "'");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v35 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)v34 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v34, (nlohmann::detail::exception *)&v36);
        v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v38, (uint64_t)&v36);
        v36.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v37);
        std::exception::~exception(&v36);
        if (SHIBYTE(v35) < 0)
          operator delete(v34[0]);
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v36.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v39, &v36);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56;
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_59;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12)
            goto LABEL_60;
          LOBYTE(v36.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v39, &v36);
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        v9 = v40;
        if (!v40)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if (((*(_QWORD *)&v39[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_36;
            if (v10 != 10)
            {
              v22 = *(_QWORD *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
              *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
              v35 = *(_QWORD *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v32, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v32, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
              v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v22, (uint64_t)&v38, (uint64_t)&v36);
              goto LABEL_49;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2))
              goto LABEL_56;
            v11 = v40;
            if (!v40)
            {
              v23 = 383;
              goto LABEL_62;
            }
LABEL_30:
            v9 = v11 - 1;
            v40 = v9;
            if (!v9)
              goto LABEL_43;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v24 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
            *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
            v35 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v32, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v32, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
            v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v24, (uint64_t)&v38, (uint64_t)&v36);
            goto LABEL_49;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2))
            goto LABEL_56;
          v11 = v40;
          if (!v40)
          {
            v23 = 439;
LABEL_62:
            __assert_rtn("sax_parse_internal", "parser.hpp", v23, "not states.empty()");
          }
          goto LABEL_30;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          v25 = *(_QWORD *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
          *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
          v35 = *(_QWORD *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v32, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v32, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
          v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v25, (uint64_t)&v38, (uint64_t)&v36);
          goto LABEL_49;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        v26 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v38, (uint64_t)&v36);
LABEL_49:
        v17 = v20;
        v36.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v37);
        std::exception::~exception(&v36);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
LABEL_44:
        if (v39)
          operator delete(v39);
        return v17;
      case 0xE:
        v19 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v19, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
      default:
        v21 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v5, &v38);
        *(_OWORD *)v34 = *(_OWORD *)(a1 + 64);
        v35 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v32, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v32, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v34, (uint64_t)&__p, (nlohmann::detail::exception *)&v36);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v38, (uint64_t)&v36);
        goto LABEL_49;
    }
  }
}

void sub_1DE52C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;

  a29.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v29 + 16);
  std::exception::~exception(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  v32 = *(void **)(v30 - 88);
  if (v32)
    operator delete(v32);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::exception_vtbl *v5;
  nlohmann::detail::input_stream_adapter *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string v34;
  std::string __p;
  void *v36[2];
  std::string::size_type v37;
  std::exception v38;
  _BYTE v39[24];
  std::string v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v5 = (std::exception_vtbl *)(a1 + 112);
  v6 = (nlohmann::detail::input_stream_adapter *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v38.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v38.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v38, a3);
        goto LABEL_17;
      case 3:
        v38.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v38, a3);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 6:
        v38.__vftable = *(std::exception_vtbl **)(a1 + 144);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v38, a3);
        goto LABEL_17;
      case 7:
        if ((*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v38.__vftable = *(std::exception_vtbl **)(a1 + 160);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v38, a3);
          goto LABEL_17;
        }
        v29 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v34);
        v30 = std::string::insert(&v34, 0, "number overflow parsing '");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&__p, "'");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v37 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)v36 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        nlohmann::detail::out_of_range::create(406, (uint64_t)v36, (nlohmann::detail::exception *)&v38);
        v19 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v29, (uint64_t)&v40, (uint64_t)&v38);
        v38.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v39);
        std::exception::~exception(&v38);
        if (SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_55;
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
          goto LABEL_12;
        LOBYTE(v38.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          v19 = 0;
          goto LABEL_37;
        }
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_51;
          v17 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
          v38.__vftable = v5;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v38)+ 7);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_54;
          LOBYTE(v38.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v41, &v38);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        v9 = v42;
        if (!v42)
        {
LABEL_36:
          v19 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if (((*(_QWORD *)&v41[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_31;
            if (v10 != 10)
            {
              v24 = *(_QWORD *)(a1 + 64);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
              *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
              v37 = *(_QWORD *)(a1 + 80);
              std::string::basic_string[abi:ne180100]<0>(&v34, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xAu, (uint64_t)&v34, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
              v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v24, (uint64_t)&v40, (uint64_t)&v38);
              goto LABEL_42;
            }
            a2[2] -= 8;
            v11 = v42;
            if (!v42)
            {
              v25 = 383;
              goto LABEL_53;
            }
LABEL_26:
            v9 = v11 - 1;
            v42 = v9;
            if (!v9)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v26 = *(_QWORD *)(a1 + 64);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
            *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
            v37 = *(_QWORD *)(a1 + 80);
            std::string::basic_string[abi:ne180100]<0>(&v34, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xBu, (uint64_t)&v34, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
            v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v26, (uint64_t)&v40, (uint64_t)&v38);
            goto LABEL_42;
          }
          a2[2] -= 8;
          v11 = v42;
          if (!v42)
          {
            v25 = 439;
LABEL_53:
            __assert_rtn("sax_parse_internal", "parser.hpp", v25, "not states.empty()");
          }
          goto LABEL_26;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          v27 = *(_QWORD *)(a1 + 64);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
          *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
          v37 = *(_QWORD *)(a1 + 80);
          std::string::basic_string[abi:ne180100]<0>(&v34, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 4u, (uint64_t)&v34, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
          v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v27, (uint64_t)&v40, (uint64_t)&v38);
          goto LABEL_42;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
        v38.__vftable = v5;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v38)+ 7);
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          goto LABEL_32;
        }
LABEL_54:
        v28 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0xCu, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v28, (uint64_t)&v40, (uint64_t)&v38);
LABEL_42:
        v19 = v22;
        v38.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
        MEMORY[0x1DF0ECA08](v39);
        std::exception::~exception(&v38);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
LABEL_37:
        if (v41)
          operator delete(v41);
        return v19;
      case 0xE:
        v21 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v21, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
      default:
        v23 = *(_QWORD *)(a1 + 64);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_token_string((uint64_t)v6, &v40);
        *(_OWORD *)v36 = *(_OWORD *)(a1 + 64);
        v37 = *(_QWORD *)(a1 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v34, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::exception_message(a1, 0x10u, (uint64_t)&v34, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)v36, (uint64_t)&__p, (nlohmann::detail::exception *)&v38);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error((uint64_t)a2, v23, (uint64_t)&v40, (uint64_t)&v38);
        goto LABEL_42;
    }
  }
}

void sub_1DE52CDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::exception a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;

  a29.__vftable = (std::exception_vtbl *)&unk_1EA92E178;
  MEMORY[0x1DF0ECA08](v39 + 16);
  std::exception::~exception(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a39 < 0)
    operator delete(a34);
  v42 = *(void **)(v40 - 104);
  if (v42)
    operator delete(v42);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(_QWORD *)this)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24)), *(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  void (**v12)(void);
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(void);
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t *v30;
  _QWORD **v31;
  uint64_t (*v32)(void);
  void (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t (***v38)(void);
  _QWORD **v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  _QWORD **v63;
  uint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;

  switch(*(_BYTE *)a2)
  {
    case 0:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      v12 = **a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }
      if (a3)
      {
        v12[1]();
        v13 = a6 + a5;
        v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v15 = (unint64_t)a1[77];
          if (v15 >= v13)
            goto LABEL_7;
        }
        else
        {
          v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            v16 = *(_QWORD **)(a2 + 8);
            v17 = (_QWORD *)*v16;
            if (v16[2] == 1)
            {
              v18 = (_QWORD *)*v16;
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v67 = (_QWORD **)*v14;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v68 = (_QWORD *)v17[1];
                if (v68)
                {
                  do
                  {
                    v18 = v68;
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    v18 = (_QWORD *)v17[2];
                    v50 = *v18 == (_QWORD)v17;
                    v17 = v18;
                  }
                  while (!v50);
                }
                ++v66;
                v16 = *(_QWORD **)(a2 + 8);
                v17 = v18;
              }
              while (v66 < v16[2] - 1);
            }
            v69 = v16 + 1;
            if (v18 == v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v70 = (_QWORD *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              v73 = v18;
              do
              {
                v71 = (_QWORD *)v73[2];
                v50 = *v71 == (_QWORD)v73;
                v73 = v71;
              }
              while (!v50);
            }
            if (v71 != v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v74 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v74 = (_QWORD **)*v14;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*v12)();
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(_QWORD **)v45;
      if (*(_QWORD *)(v45 + 16) != 1)
      {
        v47 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v48 = (_QWORD *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v49[2];
              v50 = *v46 == (_QWORD)v49;
              v49 = v46;
            }
            while (!v50);
          }
          ++v47;
          v45 = *(_QWORD *)(a2 + 8);
        }
        while (v47 < *(_QWORD *)(v45 + 16) - 1);
      }
      v51 = (_QWORD *)(v45 + 8);
      if (v46 == v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      v52 = (_QWORD *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        v72 = v46;
        do
        {
          v53 = (_QWORD *)v72[2];
          v50 = *v53 == (_QWORD)v72;
          v72 = v53;
        }
        while (!v50);
      }
      if (v53 != v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
LABEL_109:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      v19 = *(uint64_t **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = **a1;
      if (v20 == v21)
      {
        v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }
      if (a3)
      {
        v22[1]();
        v23 = a6 + a5;
        v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v25 = (unint64_t)a1[77];
          if (v25 >= v23)
            goto LABEL_13;
        }
        else
        {
          v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            v26 = *(uint64_t **)(a2 + 8);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v29 = (_QWORD **)*v24;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v29, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v28, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v28 += 16;
                v30 = *(uint64_t **)(a2 + 8);
                v27 = v30[1];
              }
              while (v28 != v27 - 16);
              v28 = *v30;
            }
            if (v28 == v27)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v31 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v31 = (_QWORD **)*v24;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v31, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            if (*((char *)a1 + 631) < 0)
              v24 = (_QWORD *)*v24;
            ((void (*)(void (***)(void), _QWORD *, _QWORD))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }
      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      v56 = *v54;
      v55 = v54[1];
      if (v56 == v55 - 16)
      {
        v57 = v56;
      }
      else
      {
        v57 = v56;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v57 += 16;
          v58 = *(uint64_t **)(a2 + 8);
          v55 = v58[1];
        }
        while (v57 != v55 - 16);
        v56 = *v58;
      }
      if (v56 == v55)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
LABEL_95:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 6:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        v35 = (a6 + a5);
        v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }
        else
        {
          v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), _QWORD **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                v62 = *v61++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v61 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v61);
          }
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v63 = a1 + 76;
          if (*((char *)a1 + 631) < 0)
            v63 = (_QWORD **)*v36;
          ((void (*)(void (***)(void), _QWORD **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          v64 = *(_QWORD *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25))
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          else
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }
LABEL_62:
        v39 = (_QWORD **)*v36;
        goto LABEL_63;
      }
      v34();
      v40 = *(unsigned __int8 ***)(a2 + 8);
      v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          v43 = *v42++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v41 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v42);
      }
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      v44 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA936338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  lconv *v7;
  char *thousands_sep;
  char *decimal_point;
  int8x16_t *v10;
  int8x16_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = localeconv();
  *(_QWORD *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  v10 = (int8x16_t *)operator new(0x208uLL);
  *(_QWORD *)(a1 + 608) = v10;
  *(_QWORD *)(a1 + 624) = 0x8000000000000208;
  v11 = vdupq_n_s8(a3);
  *(_QWORD *)(a1 + 616) = 512;
  *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1DE52DBBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  int v26;
  nlohmann::detail::exception *exception;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  char *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  uint64_t *v36;
  nlohmann::detail::exception *v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int128 v41;
  std::string::size_type v42;
  char __str[8];
  std::string::size_type v44;
  char v45;
  char v46;
  unsigned int v47[3];

  v46 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v47[0] = 0;
  v12 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v13 = (uint64_t *)*a2;
    else
      v13 = a2;
    v14 = *((unsigned __int8 *)v13 + v8);
    result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v46, v47, v14);
    if ((_DWORD)result == 1)
    {
      v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          v45 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v38, v8);
          v28 = std::string::insert(&v38, 0, "invalid UTF-8 byte at index ");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v39, ": 0x");
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          if (v45 >= 0)
            v32 = __str;
          else
            v32 = *(char **)__str;
          if (v45 >= 0)
            v33 = v45;
          else
            v33 = v44;
          v34 = std::string::append(&v40, v32, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v42 = v34->__r_.__value_.__r.__words[2];
          v41 = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v41, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      v17 = v9 != 0;
      if (v16 == 1)
      {
        v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)v18 = -16401;
          *(_BYTE *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
          v10 = 0;
        }
      }
      v9 = 0;
      v8 -= v17;
      v46 = 0;
      v11 = v10;
    }
    else if ((_DWORD)result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = (uint64_t *)*a2;
        *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v47[0])
      {
        case 8u:
          v15 = 25180;
          goto LABEL_43;
        case 9u:
          v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          v15 = 29276;
          goto LABEL_43;
        default:
          if (v47[0] == 34)
          {
            v15 = 8796;
            goto LABEL_43;
          }
          if (v47[0] == 92)
          {
            v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v47[0] > 0x7E)
            v20 = a3;
          else
            v20 = 0;
          if (v47[0] < 0x20 || v20)
          {
            v24 = (char *)(v12 + v11);
            if (HIWORD(v47[0]))
            {
              result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v47[0] >> 10) - 10304), v47[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              result = snprintf(v24, 7uLL, "\\u%04x", v47[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            v9 = 0;
            v10 = v11;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v11);
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
          break;
      }
    }
    ++v8;
    v22 = *((char *)a2 + 23);
    v3 = v22 >> 31;
    v23 = a2[1];
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v23);
  if (v46)
  {
    v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v45 = 3;
        *(_DWORD *)__str = 0;
        v36 = (uint64_t *)*a2;
        if (v22 >= 0)
          v36 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v36 + v23 - 1));
        v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v41, v37);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_1DE52E0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (a39 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v41 - 97) < 0)
        operator delete(*(void **)(v41 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      v5 = (char *)a1 + 17;
      v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  *((_WORD *)v5 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v6 = 4;
      v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }
        if (v10 <= 0x3E7)
          break;
        if (v10 >> 4 < 0x271)
          goto LABEL_24;
        v6 += 4;
        v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }
      --v6;
    }
    else
    {
      v6 = 1;
    }
LABEL_24:
    v7 = v6 + 1;
  }
  else
  {
    if (v2 < 0xA)
    {
      v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    }
    v7 = 4;
    v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }
      if (v8 <= 0x3E7)
        break;
      if (v8 >> 4 < 0x271)
        goto LABEL_25;
      v7 += 4;
      v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }
    --v7;
  }
LABEL_25:
  if (v7 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v4 = &v3[v7];
  if (v2 < 0x64)
  {
    v11 = v2;
  }
  else
  {
    do
    {
      v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
      v4 -= 2;
      v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v12 > 0x270);
  }
  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }
  *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v11];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  if (a2 < 0xA)
  {
    v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  v5 = 4;
  v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }
    if (v6 <= 0x3E7)
      break;
    if (v6 >> 4 < 0x271)
      goto LABEL_13;
    v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }
  --v5;
LABEL_13:
  if (v5 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v2 % 0x64];
      v3 -= 2;
      v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v9 > 0x270);
  }
  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }
  *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v8];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  const char *v6;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)a1;
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v6 = "null";
    v3 = 4;
  }
  else
  {
    v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1)
    v4 = a3 & 0x3F | (*a2 << 6);
  else
    v4 = (0xFFu >> v3) & a3;
  *a2 = v4;
  v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190)
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  char *v3;
  char *result;
  unint64_t v5;
  char *v6;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::to_chars<double>();
  v3 = a1;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)v3 = 11824;
    result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    v5 = a2 - (_QWORD)v3;
    if (a2 - (uint64_t)v3 <= 16)
      nlohmann::detail::to_chars<double>();
    v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18)
      nlohmann::detail::to_chars<double>();
    if (v5 <= 0x15)
      nlohmann::detail::to_chars<double>();
    if (v5 == 22)
      nlohmann::detail::to_chars<double>();
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  uint64_t v7;
  uint64_t v9[6];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  if (a4 <= 0.0)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  char *result;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a4 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  if (a5 <= 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v5 = (int)a2;
  v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((_BYTE *)this + v7) = 46;
    result = (char *)this + v7 + 2;
    *((_BYTE *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if ((_DWORD)a2 == 1)
    {
      v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((_BYTE *)this + 1) = 46;
      v11 = v5 + 1;
    }
    v12 = (char *)this + v11;
    *v12 = 101;
    if ((int)v7 <= -999)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1001)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1)
      v13 = 43;
    else
      v13 = 45;
    if ((int)v7 - 1 >= 0)
      v14 = v7 - 1;
    else
      v14 = 1 - v7;
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      v15 = v14 + 48;
    }
    v12[3] = v15;
    v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  if (a2 <= 0.0)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  v4 = *(_QWORD *)&a2 >> 52;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v6 = 2 * v5;
  v7 = *(_QWORD *)&a2 >> 53;
  v8 = 4 * v5;
  v9 = (*(_QWORD *)&a2 >> 52) - 1077;
  v10 = 0x10000000000000;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v8 = 2 * v5;
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
    v10 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  v11 = v7 == 0;
  if (v7)
    v12 = v8;
  else
    v12 = 2 * v5;
  if (v11)
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
  else
    v5 = v10;
  v3 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    v13 = (*(_QWORD *)&a2 >> 52) - 1076;
  }
  else
  {
    v12 = 2 * v3;
    v9 = -1075;
    v13 = 4294966221;
  }
  if (v4)
  {
    v14 = (*(_QWORD *)&a2 >> 52) - 1075;
  }
  else
  {
    v6 = 2 * v3;
    v14 = 4294966222;
  }
  if (v4)
    v15 = v5;
  else
    v15 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v24 = v12 - 1;
  v25 = v9;
  v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  v18 = v17;
  v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  v21 = v20;
  result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  uint64_t cached_power_for_binary_exponent;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];

  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5)
    nlohmann::detail::dtoa_impl::grisu2();
  if ((_DWORD)a10 != (_DWORD)a7)
    nlohmann::detail::dtoa_impl::grisu2();
  cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  v15 = v14;
  v27 = cached_power_for_binary_exponent;
  v28 = v16;
  v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  v19 = v18;
  v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  v22 = v21;
  v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t result;
  const char *v5;
  int v6;

  v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    v5 = "delta >= 0";
    v6 = 162;
    goto LABEL_6;
  }
  v3 = *a1;
  result = *a1 << v2;
  if (result >> v2 != v3)
  {
    v5 = "((x.f << delta) >> delta) == x.f";
    v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  int v4;

  if ((int)this <= -1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if ((int)this >= 1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61)
    ++v1;
  if (v1 <= -315)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v3 = (_QWORD *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  v4 = v3[1] + (_DWORD)this;
  if (v4 <= -125)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if (v4 >= -95)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  v44 = a9;
  v45 = a10;
  if ((int)a10 <= -61)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  if ((int)a10 >= -31)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  v15 = -(int)v45;
  v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v17 = v14;
  v18 = 1 << v15;
  v19 = (1 << v15) - 1;
  v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          v23 = v16 >> 5;
          v24 = v16 >> 4;
          if (v16 <= 9)
            v25 = 1;
          else
            v25 = 10;
          if (v16 <= 9)
            v26 = 1;
          else
            v26 = 2;
          if (v16 <= 0x63)
            v27 = v26;
          else
            v27 = 3;
          if (v16 <= 0x63)
            v28 = v25;
          else
            v28 = 100;
          if (v16 <= 0x3E7)
            v29 = v27;
          else
            v29 = 4;
          if (v16 <= 0x3E7)
            v30 = v28;
          else
            v30 = 1000;
          if (v24 <= 0x270)
            v31 = v29;
          else
            v31 = 5;
          if (v24 <= 0x270)
            v32 = v30;
          else
            v32 = 10000;
          if (v23 <= 0xC34)
            v22 = v31;
          else
            v22 = 6;
          if (v23 > 0xC34)
            v21 = 100000;
          else
            v21 = v32;
        }
        else
        {
          v21 = 1000000;
          v22 = 7;
        }
      }
      else
      {
        v21 = 10000000;
        v22 = 8;
      }
    }
    else
    {
      v21 = 100000000;
      v22 = 9;
    }
  }
  else
  {
    v21 = 1000000000;
    v22 = 10;
  }
  v33 = v22 + 1;
  do
  {
    v34 = v16 / v21;
    if (v16 / v21 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v16 = v16 % v21;
    v35 = (int)*a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      v18 = (unint64_t)v21 << v15;
      v40 = (char *)*a2;
      v41 = a1;
      v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v37 = (10 * v20) >> v15;
    if (v37 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v38 = (int)*a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    v39 = 5 * v13;
    v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  v40 = (char *)*a2;
  v41 = a1;
  v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  const char *v4;
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    v4 = "x.e == y.e";
    v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  v2 = *(_QWORD *)a1 >= *(_QWORD *)a2;
  result = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (!v2)
  {
    v4 = "x.f >= y.f";
    v5 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a3 > a4)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a4 < a5)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (!a6)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        nlohmann::detail::dtoa_impl::grisu2_round();
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1);
}

void OUTLINED_FUNCTION_0_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 568, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 321, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 312, a4);
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_literal()
{
  __assert_rtn("scan_literal", "lexer.hpp", 1222, "char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_string()
{
  __assert_rtn("scan_string", "lexer.hpp", 370, "0x00 <= codepoint and codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "lexer.hpp", 250, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::scan_number()
{
  __assert_rtn("scan_number", "lexer.hpp", 928, "false");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1208, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1175, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "lexer.hpp", 1191, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::unget()
{
  __assert_rtn("unget", "lexer.hpp", 1314, "not token_string.empty()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::get_codepoint()
{
  __assert_rtn("get_codepoint", "lexer.hpp", 188, "0x0000 <= codepoint and codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "lexer.hpp", 162, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::iterator_input_adapter<std::__wrap_iter<char const*>>>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "lexer.hpp", 209, "ranges.size() == 2 or ranges.size() == 4 or ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
  __assert_rtn("parse_error", "json_sax.hpp", 537, "false");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error()
{
  __assert_rtn("parse_error", "json_sax.hpp", 283, "false");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
  __assert_rtn("end_object", "json_sax.hpp", 450, "not ref_stack.empty()");
}

{
  __assert_rtn("end_object", "json_sax.hpp", 451, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
  __assert_rtn("end_array", "json_sax.hpp", 502, "not ref_stack.empty()");
}

{
  __assert_rtn("end_array", "json_sax.hpp", 503, "not keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_0("handle_value", "json_sax.hpp", a3, "not keep_stack.empty()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "iter_impl.hpp", 279, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 285, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "iter_impl.hpp", 291, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2("handle_value", "json_sax.hpp", a3, "ref_stack.back()->is_array() or ref_stack.back()->is_object()");
}

{
  OUTLINED_FUNCTION_1("handle_value", "json_sax.hpp", a3, "object_element");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
  __assert_rtn("dump", "serializer.hpp", 363, "false");
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
  __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
  __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
  __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
  __assert_rtn("format_buffer", "to_chars.hpp", 979, "min_exp < 0");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 186, "value > 0");
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void InferenceEngine::StringFormatter::append(std::string *this, const char *a2, va_list a3)
{
  std::string::value_type *__s;

  __s = 0;
  vasprintf(&__s, a2, a3);
  std::string::append(this, __s);
  free(__s);
}

std::string *InferenceEngine::StringFormatter::StringFormatter(std::string *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  InferenceEngine::StringFormatter::append(this, a2, va);
  return this;
}

void sub_1DE52FCA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t InferenceEngine::Diagnostics_GetLogObject(InferenceEngine *this)
{
  if (InferenceEngine::Diagnostics_GetLogObject(void)::onceToken != -1)
    dispatch_once(&InferenceEngine::Diagnostics_GetLogObject(void)::onceToken, &__block_literal_global);
  return InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default;
}

os_log_t ___ZN15InferenceEngine24Diagnostics_GetLogObjectEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.siri.tts.inferenceEngine", "default");
  InferenceEngine::Diagnostics_GetLogObject(void)::__profile_log_default = (uint64_t)result;
  return result;
}

BOOL _pcre2_xclass_8(int a1, _BYTE *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  int v28;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  if (a1 <= 0xFF)
  {
    if ((*a2 & 4) == 0)
    {
      v2 = *a2 & 1;
      if ((*a2 & 2) != 0)
        return (a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1;
      return v2;
    }
    if ((*a2 & 2) != 0 && ((a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1) != 0)
      return !(*a2 & 1);
  }
  if ((*a2 & 2) != 0)
    v3 = a2 + 33;
  else
    v3 = a2 + 1;
  v4 = a1 + 127;
  if (a1 >= 0)
    v4 = a1;
  v5 = (uint64_t)v4 >> 7;
  v6 = a1 - (v4 & 0xFFFFFF80);
  v7 = a1 - 8232;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = *v3;
        if (v8 != 1)
          break;
        v9 = v3 + 2;
        v10 = v3[1];
        if (v10 >= 0xC0)
        {
          if ((v10 & 0x20) != 0)
          {
            v13 = *v9 & 0x3F;
            if ((v10 & 0x10) != 0)
            {
              if ((v10 & 8) != 0)
              {
                v30 = v3[3] & 0x3F;
                v31 = v3[4] & 0x3F;
                v32 = v3[5] & 0x3F;
                if ((v10 & 4) != 0)
                {
                  v10 = ((v10 & 1) << 30) | (v13 << 24) | (v30 << 18) | (v31 << 12) | (v32 << 6) | v3[6] & 0x3F;
                  v9 = v3 + 7;
                }
                else
                {
                  v10 = ((v10 & 3) << 24) | (v13 << 18) | (v30 << 12) | (v31 << 6) | v32;
                  v9 = v3 + 6;
                }
              }
              else
              {
                v10 = ((v10 & 7) << 18) | (v13 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
                v9 = v3 + 5;
              }
            }
            else
            {
              v10 = ((v10 & 0xF) << 12) | (v13 << 6) | v3[3] & 0x3F;
              v9 = v3 + 4;
            }
          }
          else
          {
            v9 = v3 + 3;
            v10 = v3[2] & 0x3F | ((v10 & 0x1F) << 6);
          }
        }
        v3 = v9;
        if (v10 == a1)
          return !(*a2 & 1);
      }
      if (v8 != 2)
        break;
      v11 = v3 + 2;
      v12 = v3[1];
      if (v12 >= 0xC0)
      {
        if ((v12 & 0x20) != 0)
        {
          v14 = *v11 & 0x3F;
          if ((v12 & 0x10) != 0)
          {
            if ((v12 & 8) != 0)
            {
              v33 = v3[3] & 0x3F;
              v34 = v3[4] & 0x3F;
              v35 = v3[5] & 0x3F;
              if ((v12 & 4) != 0)
              {
                v12 = ((v12 & 1) << 30) | (v14 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v3[6] & 0x3F;
                v11 = v3 + 7;
              }
              else
              {
                v12 = ((v12 & 3) << 24) | (v14 << 18) | (v33 << 12) | (v34 << 6) | v35;
                v11 = v3 + 6;
              }
            }
            else
            {
              v12 = ((v12 & 7) << 18) | (v14 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
              v11 = v3 + 5;
            }
          }
          else
          {
            v12 = ((v12 & 0xF) << 12) | (v14 << 6) | v3[3] & 0x3F;
            v11 = v3 + 4;
          }
        }
        else
        {
          v11 = v3 + 3;
          v12 = v3[2] & 0x3F | ((v12 & 0x1F) << 6);
        }
      }
      v3 = v11 + 1;
      v36 = *v11;
      if (v36 >= 0xC0)
      {
        if ((v36 & 0x20) != 0)
        {
          v37 = *v3 & 0x3F;
          if ((v36 & 0x10) != 0)
          {
            if ((v36 & 8) != 0)
            {
              v38 = v11[2] & 0x3F;
              v39 = v11[3] & 0x3F;
              v40 = v11[4] & 0x3F;
              if ((v36 & 4) != 0)
              {
                v36 = ((v36 & 1) << 30) | (v37 << 24) | (v38 << 18) | (v39 << 12) | (v40 << 6) | v11[5] & 0x3F;
                v3 = v11 + 6;
              }
              else
              {
                v36 = ((v36 & 3) << 24) | (v37 << 18) | (v38 << 12) | (v39 << 6) | v40;
                v3 = v11 + 5;
              }
            }
            else
            {
              v36 = ((v36 & 7) << 18) | (v37 << 12) | ((v11[2] & 0x3F) << 6) | v11[3] & 0x3F;
              v3 = v11 + 4;
            }
          }
          else
          {
            v36 = ((v36 & 0xF) << 12) | (v37 << 6) | v11[2] & 0x3F;
            v3 = v11 + 3;
          }
        }
        else
        {
          v3 = v11 + 2;
          v36 = v11[1] & 0x3F | ((v36 & 0x1F) << 6);
        }
      }
      if (v12 <= a1 && v36 >= a1)
        return !(*a2 & 1);
    }
    if (!*v3)
      return *a2 & 1;
    v2 = 0;
    switch(v3[1])
    {
      case 0u:
        goto LABEL_116;
      case 1u:
        v15 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        v16 = v15 > 9;
        v17 = (1 << v15) & 0x320;
        if (!v16 && v17 != 0)
          goto LABEL_116;
        goto LABEL_68;
      case 2u:
        v19 = v8 == 3;
        v20 = v3[2];
        v21 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        goto LABEL_47;
      case 3u:
        v19 = v8 == 3;
        v22 = v3[2] == _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        goto LABEL_48;
      case 4u:
        v19 = v8 == 3;
        v21 = v3[2];
        v20 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]];
LABEL_47:
        v22 = v21 == v20;
        goto LABEL_48;
      case 5u:
        if ((v8 == 3) == ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12
                                                                    * _pcre2_ucd_stage2_8[v6
                                                                                        + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                                    + 1]] & 0xFFFFFFFD) == 1))
          return !(*a2 & 1);
        goto LABEL_117;
      case 6u:
      case 7u:
        if (a1 < 0x2000)
        {
          if (a1 > 132)
          {
            if (a1 > 5759)
            {
              if (a1 == 5760 || a1 == 6158)
                goto LABEL_116;
            }
            else if (a1 == 133 || a1 == 160)
            {
              goto LABEL_116;
            }
          }
          else if (a1 <= 0x20 && ((1 << a1) & 0x100003E00) != 0)
          {
            goto LABEL_116;
          }
        }
        else if ((a1 - 0x2000) < 0xB
               || v7 <= 0x37 && ((1 << v7) & 0x80000000000083) != 0
               || a1 == 12288)
        {
LABEL_116:
          if (v8 == 3)
            return !(*a2 & 1);
          goto LABEL_117;
        }
        v19 = v8 == 3;
        v22 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] == 6;
LABEL_48:
        v23 = !v22;
        if (v19 != v23)
          return !(*a2 & 1);
LABEL_117:
        v3 += 3;
        break;
      case 8u:
        if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]] | 2) == 3)
          goto LABEL_116;
        v24 = v8 == 3;
        v25 = a1 == 95;
        goto LABEL_91;
      case 0xAu:
        if (a1 > 0x9F)
        {
          if (((a1 & 0xFFFFF800) == 55296) != (v8 == 3))
            return !(*a2 & 1);
        }
        else
        {
          if ((a1 - 36) <= 0x3C && ((1 << (a1 - 36)) & 0x1000000010000001) != 0)
            goto LABEL_116;
LABEL_68:
          if (v8 != 3)
            return !(*a2 & 1);
        }
        goto LABEL_117;
      case 0xBu:
        v26 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v26 == 6)
          goto LABEL_68;
        if (v26)
          goto LABEL_116;
        if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1] == 1
          && a1 != 1564
          && a1 != 6158)
        {
          goto LABEL_90;
        }
        goto LABEL_68;
      case 0xCu:
        v27 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)] + 1];
        if ((v27 - 27) < 2)
          goto LABEL_68;
        if (_pcre2_ucp_gentype_8[v27])
          goto LABEL_116;
        if (a1 == 1564 || (_DWORD)v27 != 1)
          goto LABEL_68;
LABEL_90:
        v24 = v8 == 3;
        v25 = (a1 - 8298) < 0xFFFFFFFC;
LABEL_91:
        if (((v25 ^ v24) & 1) == 0)
          return !(*a2 & 1);
        goto LABEL_117;
      case 0xDu:
        v28 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)]
                                                      + 1]];
        if (v28 == 4)
          goto LABEL_116;
        v25 = v8 == 3;
        v24 = a1 < 0x80 && v28 == 5;
        goto LABEL_91;
      default:
        return v2;
    }
  }
}

uint64_t pcre2_get_error_message_8(int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;
  int v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (!a3)
    return 4294967248;
  v3 = a1 - 100;
  if (a1 < 100)
  {
    if ((a1 & 0x80000000) == 0)
    {
      v4 = &byte_1DEC41F29;
      v3 = 1;
      goto LABEL_8;
    }
    v3 = -a1;
    v4 = "no error";
  }
  else
  {
    v4 = "no error";
  }
  if (v3 < 1)
  {
    LOBYTE(v6) = *v4;
    if (!*v4)
    {
      result = 0;
LABEL_22:
      *(_BYTE *)(a2 + result) = 0;
      return result;
    }
LABEL_15:
    v9 = 0;
    v10 = a3 - 1;
    v11 = v4 + 1;
    while (v10 != v9)
    {
      *(_BYTE *)(a2 + v9) = v6;
      result = v9 + 1;
      v6 = v11[v9++];
      if (!v6)
        goto LABEL_22;
    }
    *(_BYTE *)(a2 + v10) = 0;
    return 4294967248;
  }
  while (1)
  {
LABEL_8:
    while (*v4++)
      ;
    LOBYTE(v6) = *v4;
    if (!*v4)
      return 4294967267;
    if (v3-- < 2)
      goto LABEL_15;
  }
}

char *_pcre2_memmove8(char *result, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (result <= a2)
  {
    if (a3)
    {
      v4 = a3;
      do
      {
        v5 = *a2++;
        *result++ = v5;
        --v4;
      }
      while (v4);
    }
    result -= a3;
  }
  else if (a3)
  {
    v3 = a3 - 1;
    do
    {
      result[v3] = a2[v3];
      --v3;
    }
    while (v3 != -1);
  }
  return result;
}

uint64_t _pcre2_strcmp_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = *a1;
    v3 = *a2;
    if (!(v2 | v3))
      return 0;
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strncmp_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3 != v4)
      break;
    ++a2;
    ++a1;
    if (!--a3)
      return 0;
  }
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strlen_8(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  if (!*a1)
    return 0;
  v1 = 0;
  v2 = a1 + 1;
  do
    result = v1 + 1;
  while (v2[v1++]);
  return result;
}

uint64_t _pcre2_valid_utf_8(unsigned __int8 *a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int8 *i;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (!a2)
    return 0;
  for (i = a1; ; ++i)
  {
    v4 = a2 - 1;
    if ((char)*i < 0)
      break;
    --a2;
LABEL_15:
    if (!a2)
      return 0;
  }
  v5 = *i;
  if (v5 <= 0xBF)
  {
    *a3 = i - a1;
    return 4294967274;
  }
  else if (v5 >= 0xFE)
  {
    *a3 = i - a1;
    return 4294967273;
  }
  else
  {
    v6 = _pcre2_utf8_table4[*i & 0x3F];
    a2 = v4 - v6;
    if (v4 < v6 && (*a3 = i - a1, v7 = ~v4 + v6, v7 < 5))
    {
      return (-3 - v7);
    }
    else
    {
      v9 = (_DWORD)i + 1;
      v8 = i[1];
      if ((v8 & 0xC0) == 0x80)
      {
        switch((int)v6)
        {
          case 1:
            if ((v5 & 0x3E) != 0)
              goto LABEL_14;
            *a3 = v9 + ~(_DWORD)a1;
            v16 = 4294967279;
            break;
          case 2:
            v10 = i[2];
            i += 2;
            if ((v10 & 0xC0) != 0x80)
            {
              v15 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_54;
            }
            if (v5 == 224 && (v8 & 0x20) == 0)
            {
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967278;
            }
            else
            {
              if (v5 != 237 || v8 < 0xA0)
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967280;
            }
            break;
          case 3:
            if ((i[2] & 0xC0) != 0x80)
            {
              v17 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_56;
            }
            v11 = i[3];
            i += 3;
            if ((v11 & 0xC0) != 0x80)
            {
              v18 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_61;
            }
            if (v5 == 240 && (v8 & 0x30) == 0)
            {
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967277;
            }
            else
            {
              if (v5 <= 0xF4 && (v5 != 244 || v8 < 0x90))
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967281;
            }
            break;
          case 4:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) != 0x80)
              goto LABEL_50;
            v14 = (_DWORD)i + 3;
            if ((i[3] & 0xC0) != 0x80)
              goto LABEL_60;
            v9 = (_DWORD)i + 4;
            if ((i[4] & 0xC0) != 0x80)
            {
              v19 = v9 - (_DWORD)a1;
              goto LABEL_64;
            }
            v16 = 4294967283;
            if (v5 != 248 || (v8 & 0x38) != 0)
              goto LABEL_52;
            *a3 = v9 - (int)a1 - 4;
            v16 = 4294967276;
            break;
          case 5:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) == 0x80)
            {
              v14 = (_DWORD)i + 3;
              if ((i[3] & 0xC0) == 0x80)
              {
                if ((i[4] & 0xC0) == 0x80)
                {
                  v9 = (_DWORD)i + 5;
                  if ((i[5] & 0xC0) == 0x80)
                  {
                    v16 = 4294967282;
                    if (v5 != 252 || (v8 & 0x3C) != 0)
                      goto LABEL_52;
                    *a3 = v9 - (int)a1 - 5;
                    v16 = 4294967275;
                  }
                  else
                  {
                    *a3 = (int)i - (int)a1;
                    v16 = 4294967284;
                  }
                }
                else
                {
                  v19 = (_DWORD)i + 4 - (_DWORD)a1;
LABEL_64:
                  *a3 = v19 - 4;
                  v16 = 4294967285;
                }
              }
              else
              {
LABEL_60:
                v18 = v14 - (_DWORD)a1;
LABEL_61:
                *a3 = v18 - 3;
                v16 = 4294967286;
              }
            }
            else
            {
LABEL_50:
              v15 = v13 - (_DWORD)a1;
LABEL_54:
              v17 = v15 - 2;
LABEL_56:
              *a3 = v17;
              v16 = 4294967287;
            }
            break;
          default:
            if (v6 < 4)
            {
LABEL_14:
              ++i;
              goto LABEL_15;
            }
            v16 = 4294967282;
LABEL_52:
            *a3 = (v9 - (_DWORD)a1 - v6);
            break;
        }
      }
      else
      {
        *a3 = v9 + ~(_DWORD)a1;
        return 4294967288;
      }
    }
  }
  return v16;
}

uint64_t pcre2_substring_nametable_scan_8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, unsigned __int8 **a4)
{
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v6 = 0;
  v7 = *(unsigned __int16 *)(a1 + 134);
  v8 = *(unsigned __int16 *)(a1 + 132);
  v28 = a1 + 136;
  v9 = a1 - v8 + 138;
  v25 = *(unsigned __int16 *)(a1 + 132);
  while (1)
  {
    if ((unsigned __int16)v7 <= v6)
      return 4294967247;
    v29 = v7;
    v10 = ((unsigned __int16)v7 + v6) >> 1;
    v11 = v10 * v8;
    v12 = (unsigned __int8 *)(a1 + (v11 + 136));
    v13 = _pcre2_strcmp_8(a2, v12 + 2);
    if (!v13)
      break;
    if (v13 > 0)
      v6 = v10 + 1;
    v7 = v29;
    if (v13 <= 0)
      v7 = v10;
  }
  v14 = 0;
  v15 = v28 + (*(unsigned __int16 *)(a1 + 134) - 1) * (uint64_t)v25;
  do
  {
    v16 = v11;
    v17 = v14;
    if (v11 + 136 < 137)
      break;
    v18 = _pcre2_strcmp_8(a2, (unsigned __int8 *)(v9 + v11));
    v11 -= v8;
    v14 = v17 + v8;
  }
  while (!v18);
  v27 = v28 + v16;
  v19 = v12;
  do
  {
    v20 = v19;
    v21 = v17;
    if ((unint64_t)v19 >= v15)
      break;
    v19 += v8;
    v17 += v8;
  }
  while (!_pcre2_strcmp_8(a2, &v20[v8 + 2]));
  if (a3)
  {
    *a3 = v27;
    *a4 = v20;
    return v8;
  }
  else if (v21)
  {
    return 4294967246;
  }
  else
  {
    return __rev16(*(unsigned __int16 *)v12);
  }
}

uint64_t pcre2_substring_length_bynumber_8(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  result = *(unsigned int *)(a1 + 76);
  if ((_DWORD)result == -2)
  {
    if (a2)
      return 4294967294;
    LODWORD(result) = 0;
  }
  else if ((result & 0x80000000) != 0)
  {
    return result;
  }
  if (*(_BYTE *)(a1 + 72) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 74) > a2)
    {
      if ((int)result - 1 < a2)
        return 4294967241;
      goto LABEL_15;
    }
    return 4294967242;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 128) < a2)
    return 4294967247;
  if (*(unsigned __int16 *)(a1 + 74) <= a2)
    return 4294967242;
  if (*(_QWORD *)(a1 + 16 * a2 + 80) == -1)
    return 4294967241;
LABEL_15:
  result = 0;
  if (a3)
  {
    v5 = a1 + 80;
    v6 = *(_QWORD *)(v5 + 8 * ((2 * a2) | 1));
    v7 = *(_QWORD *)(v5 + 16 * a2);
    v8 = v6 >= v7;
    v9 = v6 - v7;
    if (!v8)
      v9 = 0;
    *a3 = v9;
  }
  return result;
}

_QWORD *pcre2_match_data_create_8(unsigned int a1, __int128 *a2)
{
  int v2;
  _QWORD *result;

  if (a1 <= 1)
    v2 = 1;
  else
    v2 = a1;
  result = _pcre2_memctl_malloc_8(8 * (2 * v2) + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((_BYTE *)result + 73) = 0;
  }
  return result;
}

_QWORD *pcre2_match_data_create_from_pattern_8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *result;

  if (!a2)
    a2 = (__int128 *)a1;
  v2 = *(unsigned __int16 *)(a1 + 128) + 1;
  result = _pcre2_memctl_malloc_8(16 * v2 + 80, a2);
  if (result)
  {
    *((_WORD *)result + 37) = v2;
    *((_BYTE *)result + 73) = 0;
  }
  return result;
}

uint64_t pcre2_match_data_free_8(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if ((*(_BYTE *)(result + 73) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(result + 8))(*(_QWORD *)(result + 32), *(_QWORD *)(result + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t pcre2_get_mark_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t pcre2_get_ovector_pointer_8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pcre2_get_ovector_count_8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 74);
}

uint64_t sljit_free_exec(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  pthread_mutex_lock(&allocator_lock);
  v2 = a1 - 2;
  v3 = *(a1 - 2);
  v4 = allocated_size - v3;
  allocated_size -= v3;
  v5 = (_QWORD *)((char *)a1 - *(a1 - 1) - 16);
  if (*v5)
  {
    *(a1 - 2) = 0;
    a1[1] = 0;
    a1[2] = v3;
    v6 = free_blocks;
    *a1 = free_blocks;
    if (v6)
      *(_QWORD *)(v6 + 24) = v2;
    free_blocks = (uint64_t)(a1 - 2);
  }
  else
  {
    v3 += v5[4];
    v5[4] = v3;
    *(_QWORD *)((char *)v5 + v3 + 8) = v3;
    v2 = v5;
  }
  v7 = (_QWORD *)((char *)v2 + v3);
  if (!*(_QWORD *)((char *)v2 + v3))
  {
    v3 += v7[4];
    v2[4] = v3;
    v9 = v7[2];
    if (v9)
      *(_QWORD *)(v9 + 24) = v7[3];
    v10 = v7[3];
    if (v10)
      v11 = (uint64_t *)(v10 + 16);
    else
      v11 = &free_blocks;
    *v11 = v9;
    v7 = (_QWORD *)((char *)v2 + v3);
    *(_QWORD *)((char *)v2 + v3 + 8) = v3;
  }
  if (!v2[1] && *v7 == 1 && total_size - v3 > (unint64_t)(3 * v4) >> 1)
  {
    total_size -= v3;
    v12 = v2[2];
    if (v12)
      *(_QWORD *)(v12 + 24) = v2[3];
    v13 = v2[3];
    if (v13)
      v14 = (uint64_t *)(v13 + 16);
    else
      v14 = &free_blocks;
    *v14 = v12;
    munmap(v2, v3 + 16);
  }
  return pthread_mutex_unlock(&allocator_lock);
}

uint64_t pcre2_jit_match_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *);
  unsigned int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  int v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 v28;

  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
    return 4294967251;
  v10 = *(unsigned __int16 *)(a6 + 74);
  v28 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v24 = 0u;
  v25 = 0u;
  v11 = (a5 & 0x20) != 0 ? 2 : (a5 >> 4) & 1;
  v12 = *(uint64_t (**)(__int128 *))(v7 + 8 * v11);
  if (!v12)
    return 4294967251;
  *((_QWORD *)&v24 + 1) = a2 + a4;
  *(_QWORD *)&v25 = a2;
  *((_QWORD *)&v25 + 1) = a2 + a3;
  *(_QWORD *)&v26 = a6;
  *((_QWORD *)&v26 + 1) = a2;
  DWORD2(v28) = a5;
  if (!a7)
  {
    *((_QWORD *)&v27[0] + 1) = 0;
    *(_QWORD *)&v27[1] = 0;
    *((_QWORD *)&v27[1] + 1) = -1;
    v19 = *(_DWORD *)(a1 + 104);
    if (v19 >= 0x989680)
      v19 = 10000000;
    LODWORD(v28) = v19;
    if (*(_DWORD *)(v7 + 72) >= v10)
      v17 = v10;
    else
      v17 = *(_DWORD *)(v7 + 72);
    DWORD1(v28) = 2 * v17;
    goto LABEL_23;
  }
  *(_OWORD *)((char *)v27 + 8) = *(_OWORD *)(a7 + 40);
  *((_QWORD *)&v27[1] + 1) = *(_QWORD *)(a7 + 72);
  v14 = *(_DWORD *)(a7 + 84);
  if (v14 >= *(_DWORD *)(a1 + 104))
    v14 = *(_DWORD *)(a1 + 104);
  LODWORD(v28) = v14;
  v16 = *(uint64_t (**)(uint64_t))(a7 + 24);
  v15 = *(_QWORD *)(a7 + 32);
  if (v16)
  {
    v15 = v16(v15);
    v12 = *(uint64_t (**)(__int128 *))(v7 + 8 * v11);
  }
  if (*(_DWORD *)(v7 + 72) >= v10)
    v17 = v10;
  else
    v17 = *(_DWORD *)(v7 + 72);
  DWORD1(v28) = 2 * v17;
  if (!v15)
  {
LABEL_23:
    LODWORD(result) = jit_machine_stack_exec();
    goto LABEL_24;
  }
  *(_QWORD *)&v24 = *(_QWORD *)(v15 + 24);
  LODWORD(result) = v12(&v24);
LABEL_24:
  if ((int)result <= v17)
    result = result;
  else
    result = 0;
  if ((_DWORD)result != -2 && (int)result <= -1)
    v21 = 0;
  else
    v21 = a2;
  *(_QWORD *)(a6 + 24) = a1;
  *(_QWORD *)(a6 + 32) = v21;
  *(_DWORD *)(a6 + 76) = result;
  v22 = *(_QWORD *)&v27[0];
  v23 = *((_QWORD *)&v26 + 1) - a2;
  *(_QWORD *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = v23;
  *(_QWORD *)(a6 + 40) = v22;
  *(_QWORD *)(a6 + 48) = 0;
  *(_BYTE *)(a6 + 72) = 2;
  return result;
}

uint64_t jit_machine_stack_exec()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  _QWORD v3[4];
  _BYTE v4[32768];
  uint64_t v5;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v5 = *MEMORY[0x1E0C80C00];
  v3[2] = v4;
  v3[3] = v4;
  v3[0] = &v5;
  v3[1] = &v5;
  *v0 = v3;
  return v1();
}

uint64_t _pcre2_jit_free_8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  for (i = 0; i != 3; ++i)
  {
    v5 = *(_QWORD **)(a1 + 8 * i);
    if (v5)
      sljit_free_exec(v5);
    v6 = *(_QWORD **)(a1 + 8 * i + 24);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        (*(void (**)(void))(a2 + 8))();
        v6 = v7;
      }
      while (v7);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 8))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t pcre2_jit_free_unused_memory_8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  pthread_mutex_lock(&allocator_lock);
  v0 = free_blocks;
  while (v0)
  {
    v1 = (_QWORD *)v0;
    v0 = *(_QWORD *)(v0 + 16);
    if (!v1[1])
    {
      v2 = v1[4];
      if (*(_QWORD *)((char *)v1 + v2) == 1)
      {
        total_size -= v2;
        if (v0)
          *(_QWORD *)(v0 + 24) = v1[3];
        v3 = v1[3];
        if (v3)
          v4 = (uint64_t *)(v3 + 16);
        else
          v4 = &free_blocks;
        *v4 = v0;
        munmap(v1, v2 + 16);
      }
    }
  }
  return pthread_mutex_unlock(&allocator_lock);
}

_QWORD *pcre2_jit_stack_create_8(unint64_t a1, unint64_t a2, __int128 *a3)
{
  _QWORD *v3;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;

  v3 = 0;
  if (a1)
  {
    if (a2)
    {
      v6 = _pcre2_memctl_malloc_8(0x20uLL, a3);
      v3 = v6;
      if (v6)
      {
        if (a1 >= a2)
          v7 = a2;
        else
          v7 = a1;
        v8 = (a2 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        v9 = (v7 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        if (v9 - 1 < v8)
        {
          v10 = ((uint64_t (*)(uint64_t, _QWORD))*v6)(32, v6[2]);
          if (v10)
          {
            v11 = (_QWORD *)v10;
            v12 = get_page_alignment_sljit_page_align;
            if (!get_page_alignment_sljit_page_align)
            {
              v13 = sysconf(29);
              v12 = v13 - 1;
              if (v13 < 0)
                v12 = 4095;
              get_page_alignment_sljit_page_align = v12;
            }
            v14 = (v12 + v8) & ~v12;
            v15 = (char *)mmap(0, v14, 3, 4098, -1, 0);
            if (v15 != (char *)-1)
            {
              v11[2] = &v15[v14 - v9];
              v11[3] = v15;
              *v11 = &v15[v14];
              v11[1] = &v15[v14];
              v3[3] = v11;
              return v3;
            }
            ((void (*)(_QWORD *, _QWORD))v3[1])(v11, v3[2]);
          }
        }
        v3[3] = 0;
        ((void (*)(_QWORD *, _QWORD))v3[1])(v3, v3[2]);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t pcre2_jit_stack_assign_8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(_QWORD *)(result + 24) = a2;
    *(_QWORD *)(result + 32) = a3;
  }
  return result;
}

uint64_t pcre2_jit_stack_free_8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 24);
    munmap(*(void **)(v2 + 24), *(_QWORD *)(v2 + 8) - *(_QWORD *)(v2 + 24));
    (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v2, *(_QWORD *)(v1 + 16));
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t _pcre2_jit_get_size_8(_QWORD *a1)
{
  return a1[7] + a1[6] + a1[8];
}

uint64_t _pcre2_auto_possessify_8(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 *chr_property_list;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23 = 1000;
  v2 = *a1;
  if (v2 <= 0xA7)
  {
    v5 = a1;
    v6 = *(_DWORD *)(a2 + 204);
    v22 = v6 & 0x80000;
    v7 = (v6 >> 19) & 1;
    v8 = (v6 >> 17) & 1;
    while ((v2 - 33) > 0x40u)
    {
      if (v2 - 110 < 2)
      {
        v10 = 33;
        goto LABEL_14;
      }
      if (v2 == 112)
      {
        v10 = __rev16(*(unsigned __int16 *)(v5 + 1));
LABEL_14:
        v11 = v5[v10];
        if ((v11 - 98) <= 7u)
        {
          chr_property_list = get_chr_property_list(v5, v7, v8, *(_QWORD *)(a2 + 16), (uint64_t)&v24);
          v25 = (v11 & 1) == 0;
          if (compare_opcodes(chr_property_list, v7, v8, a2, &v24, chr_property_list, &v23))
          {
            if ((v11 - 98) <= 7u)
              v5[v10] = 0x6D6D6C6C6B6B6A6AuLL >> (8 * (v11 - 98));
          }
        }
LABEL_35:
        LOBYTE(v2) = *v5;
      }
      result = v2;
      switch((char)v2)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '^':
        case '_':
          v16 = v5[1];
          goto LABEL_42;
        case '[':
        case '\\':
        case ']':
        case 'a':
          v16 = v5[3];
LABEL_42:
          v17 = 2 * ((v16 - 15) < 2);
          goto LABEL_43;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
          goto LABEL_51;
        case 'p':
          v20 = *(unsigned __int16 *)(v5 + 1);
          goto LABEL_49;
        case 'w':
          v20 = *(unsigned __int16 *)(v5 + 5);
LABEL_49:
          v17 = __rev16(v20);
          goto LABEL_43;
        default:
          if (v2 - 153 <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
          {
            v17 = v5[1];
LABEL_43:
            v18 = _pcre2_OP_lengths_8;
            goto LABEL_44;
          }
          if (!(_BYTE)v2)
            return result;
LABEL_51:
          v17 = _pcre2_OP_lengths_8[v2];
          v19 = &v5[v17];
          if (v22)
          {
            if ((v2 - 29) <= 0x37u)
            {
              v21 = *(v19 - 1);
              if (v21 >= 0xC0)
              {
                LOBYTE(v2) = v21 & 0x3F;
                v18 = _pcre2_utf8_table4;
LABEL_44:
                v19 = &v5[v17 + v18[v2]];
              }
            }
          }
          v2 = *v19;
          v5 = v19;
          if (v2 >= 0xA8)
            return 0xFFFFFFFFLL;
          break;
      }
    }
    if (v2 <= 0x54u)
    {
      if (v2 <= 0x47u)
      {
        if (v2 >= 0x2Eu)
          v13 = -46;
        else
          v13 = -33;
        if (v2 <= 0x3Au)
          v9 = v13;
        else
          v9 = 197;
      }
      else
      {
        v9 = 184;
      }
    }
    else
    {
      v9 = 171;
    }
    if ((v2 + v9 + 33) >= 0x29u)
    {
      v25 = ((v9 + v2) & 0xF9) == 0;
    }
    else
    {
      v14 = get_chr_property_list(v5, v7, v8, *(_QWORD *)(a2 + 16), (uint64_t)&v24);
      v25 = ((v9 + v2) & 0xF9) == 0;
      if (v14 && compare_opcodes(v14, v7, v8, a2, &v24, v14, &v23))
      {
        switch((_BYTE)v2 + (_BYTE)v9)
        {
          case 0:
            v15 = *v5 + 9;
            goto LABEL_34;
          case 1:
          case 2:
            v15 = *v5 + 8;
            goto LABEL_34;
          case 3:
          case 4:
            v15 = *v5 + 7;
            goto LABEL_34;
          case 5:
          case 6:
            v15 = *v5 + 6;
            goto LABEL_34;
          case 7:
            v15 = *v5 + 5;
LABEL_34:
            *v5 = v15;
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    goto LABEL_35;
  }
  return 0xFFFFFFFFLL;
}

unsigned __int8 *get_chr_property_list(unsigned __int8 *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;

  v8 = *a1;
  result = a1 + 1;
  v7 = v8;
  *(_QWORD *)a5 = v8;
  if (v8 - 33 <= 0x40)
  {
    if (v7 >= 0x2E)
      v9 = 46;
    else
      v9 = 33;
    if (v7 <= 0x3A)
      v10 = v9;
    else
      v10 = 59;
    if (v7 <= 0x47)
      v11 = v10;
    else
      v11 = 72;
    if (v7 <= 0x54)
      v12 = v11;
    else
      v12 = 85;
    v13 = (v7 - v12 + 33) > 0x2Du
       || ((1 << (v7 - v12 + 33)) & 0x238000000000) == 0;
    v14 = a1 + 3;
    if (!v13)
      result = v14;
    if ((v7 - v12 - 2) > 8u)
      v15 = 1;
    else
      v15 = dword_1DEC422B4[(char)(v7 - v12 - 2)];
    *(_DWORD *)(a5 + 4) = v15;
    if (v12 <= 58)
    {
      if (v12 == 33)
      {
        v16 = 29;
LABEL_38:
        *(_DWORD *)a5 = v16;
LABEL_39:
        v22 = result + 1;
        v21 = *result;
        if (a2 && v21 >= 0xC0)
        {
          if ((v21 & 0x20) != 0)
          {
            v25 = *v22 & 0x3F;
            if ((v21 & 0x10) != 0)
            {
              if ((v21 & 8) != 0)
              {
                v36 = result[2] & 0x3F;
                v37 = result[3] & 0x3F;
                v38 = result[4] & 0x3F;
                if ((v21 & 4) != 0)
                {
                  v21 = ((v21 & 1) << 30) | (v25 << 24) | (v36 << 18) | (v37 << 12) | (v38 << 6) | result[5] & 0x3F;
                  v22 = result + 6;
                }
                else
                {
                  v21 = ((v21 & 3) << 24) | (v25 << 18) | (v36 << 12) | (v37 << 6) | v38;
                  v22 = result + 5;
                }
              }
              else
              {
                v21 = ((v21 & 7) << 18) | (v25 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
                v22 = result + 4;
              }
            }
            else
            {
              v21 = ((v21 & 0xF) << 12) | (v25 << 6) | result[2] & 0x3F;
              v22 = result + 3;
            }
          }
          else
          {
            v22 = result + 2;
            v21 = result[1] & 0x3F | ((v21 & 0x1F) << 6);
          }
        }
        *(_DWORD *)(a5 + 8) = v21;
        *(_DWORD *)(a5 + 12) = -1;
        return v22;
      }
LABEL_30:
      v18 = 29;
LABEL_32:
      *(_DWORD *)a5 = v18;
      v19 = *result;
      if (a2 && v19 >= 0xC0)
      {
        if ((v19 & 0x20) != 0)
        {
          v24 = result[1] & 0x3F;
          if ((v19 & 0x10) != 0)
          {
            if ((v19 & 8) != 0)
            {
              v33 = result[2] & 0x3F;
              v34 = result[3] & 0x3F;
              v35 = result[4] & 0x3F;
              if ((v19 & 4) != 0)
              {
                v19 = ((v19 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | result[5] & 0x3F;
                result += 6;
              }
              else
              {
                v19 = ((v19 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
                result += 5;
              }
            }
            else
            {
              v19 = ((v19 & 7) << 18) | (v24 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
              result += 4;
            }
          }
          else
          {
            v19 = ((v19 & 0xF) << 12) | (v24 << 6) | result[2] & 0x3F;
            result += 3;
          }
        }
        else
        {
          v20 = result[1];
          result += 2;
          v19 = v20 & 0x3F | ((v19 & 0x1F) << 6);
        }
      }
      else
      {
        ++result;
      }
      *(_DWORD *)(a5 + 8) = v19;
      if (v19 >= 0x80 && (a3 | a2 || v19 > 0xFF))
        v39 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[v19 & 0x7F | (_pcre2_ucd_stage1_8[v19 >> 7] << 7)]
                                             + 4]
            + v19;
      else
        v39 = *(unsigned __int8 *)(a4 + v19);
      *(_DWORD *)(a5 + 12) = v39;
      if (v19 == v39)
        *(_DWORD *)(a5 + 12) = -1;
      else
        *(_DWORD *)(a5 + 16) = -1;
      return result;
    }
    if (v12 != 85)
    {
      if (v12 != 72)
      {
        v16 = 31;
        goto LABEL_38;
      }
      v18 = 31;
      goto LABEL_32;
    }
    v17 = *result++;
    v7 = v17;
    *(_DWORD *)a5 = v17;
  }
  v18 = 31;
  switch(v7)
  {
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      return result;
    case 0xEu:
    case 0x1Bu:
    case 0x1Cu:
      return 0;
    case 0xFu:
    case 0x10u:
      v26 = *result;
      if (v26 != 9)
      {
        *(_DWORD *)(a5 + 8) = v26;
        *(_DWORD *)(a5 + 12) = result[1];
        result += 2;
        return result;
      }
      v27 = 0;
      v28 = (char *)&_pcre2_ucd_caseless_sets_8 + 4 * result[1];
      v23 = result + 2;
      do
      {
        if (v27 == 24)
        {
          *(_DWORD *)(a5 + 8) = result[2];
          *(_DWORD *)(a5 + 12) = result[3];
          return v23;
        }
        v29 = *(_DWORD *)&v28[v27];
        *(_DWORD *)(a5 + v27 + 8) = v29;
        v27 += 4;
      }
      while (v29 != -1);
      if (v7 == 16)
        v30 = 29;
      else
        v30 = 31;
      *(_DWORD *)a5 = v30;
      return v23;
    case 0x1Du:
    case 0x1Fu:
      goto LABEL_39;
    case 0x1Eu:
      goto LABEL_30;
    case 0x20u:
      goto LABEL_32;
    default:
      if (v7 - 110 >= 2)
      {
        if (v7 != 112)
          return 0;
        v23 = &result[__rev16(*(unsigned __int16 *)result) - 1];
      }
      else
      {
        v23 = result + 32;
      }
      v31 = *v23 - 98;
      if (v31 > 0xB)
        goto LABEL_71;
      v32 = 1 << v31;
      if ((v32 & 0x533) != 0)
      {
        *(_DWORD *)(a5 + 4) = 1;
LABEL_64:
        ++v23;
        goto LABEL_71;
      }
      if ((v32 & 0x20C) != 0)
        goto LABEL_64;
      *(_DWORD *)(a5 + 4) = __rev16(*(unsigned __int16 *)(v23 + 1)) == 0;
      v23 += 5;
LABEL_71:
      *(_DWORD *)(a5 + 8) = (_DWORD)v23 - (_DWORD)result;
      return v23;
  }
}

uint64_t compare_opcodes(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unsigned __int8 *a6, _DWORD *a7)
{
  int v7;
  uint64_t result;
  int v16;
  int v17;
  int *v18;
  int v19;
  int *v20;
  int *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int *v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  int *v36;
  int v37;
  int v38;
  BOOL v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  int v54;
  int *v55;
  unsigned __int8 *v56;
  int v57;
  int *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 *v62;
  int *v63;
  unsigned __int8 *v64;
  int *v65;
  unsigned __int8 *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  unsigned __int8 *v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v7 = (*a7)--;
  if (v7 < 2)
    return 0;
  v83 = 0;
  v82 = a5 + 2;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_5:
        while (1)
        {
          v16 = *a1;
          if (v16 != 118)
            break;
          a1 += 6;
        }
        if (v16 != 119)
          break;
        a1 += __rev16(*(unsigned __int16 *)(a1 + 5));
      }
      while (v16 == 120)
      {
        a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
        v16 = *a1;
      }
      if ((v16 - 121) > 0x1E)
        break;
      v17 = 1 << (v16 - 121);
      if ((v17 & 0xA800) != 0)
      {
        v22 = &a1[__rev16(*(unsigned __int16 *)(a1 + 1))];
        a1 += _pcre2_OP_lengths_8[v16];
        v83 = 1;
        if (*v22 == 120)
        {
          do
          {
            result = compare_opcodes(a1, a2, a3, a4, a5, a6, a7);
            if (!(_DWORD)result)
              return result;
            a1 = v22 + 3;
            v22 += __rev16(*(unsigned __int16 *)(v22 + 1));
          }
          while (*v22 == 120);
          v83 = 1;
        }
      }
      else if ((v17 & 9) != 0)
      {
        if (!a5[1])
          return 0;
        result = 0;
        switch(a1[-__rev16(*(unsigned __int16 *)(a1 + 1))])
        {
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x84u:
            return v83 ^ 1u;
          case 0x82u:
          case 0x83u:
            return result;
          case 0x85u:
            if ((*a5 - 29) < 2)
              goto LABEL_158;
            return 0;
          case 0x88u:
          case 0x89u:
          case 0x8Du:
          case 0x8Eu:
            if (*(_DWORD *)(a4 + 292))
              return 0;
            goto LABEL_158;
          default:
LABEL_158:
            a1 += _pcre2_OP_lengths_8[v16];
            break;
        }
      }
      else
      {
        if ((v17 & 0x60000000) == 0)
          break;
        v78 = a1 + 1;
        if (a1[1] - 132 > 4 || ((1 << (a1[1] + 124)) & 0x15) == 0)
          return 0;
        do
          v78 += __rev16(*(unsigned __int16 *)(v78 + 1));
        while (*v78 == 120);
        result = compare_opcodes(v78 + 3, a2, a3, a4, a5, a6, a7);
        if (!(_DWORD)result)
          return result;
        a1 += _pcre2_OP_lengths_8[v16];
      }
    }
    if (!v16)
      return a5[1] != 0;
    result = (uint64_t)get_chr_property_list(a1, a2, a3, *(_QWORD *)(a4 + 16), (uint64_t)&v84);
    if (!result)
      return result;
    a1 = (unsigned __int8 *)result;
    v19 = *a5;
    if (*a5 == 29)
    {
      v20 = &v84;
      v21 = v82;
LABEL_26:
      v23 = *v21;
      if (v20 == &v84)
        v24 = result;
      else
        v24 = (uint64_t)a6;
      v25 = v24 + 2;
      v26 = v20 + 3;
      while (2)
      {
        result = 0;
        v27 = *v20;
        if (*v20 <= 109)
        {
          switch(v27)
          {
            case 6:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 8) == 0)
                return 0;
              goto LABEL_148;
            case 7:
              if (v23 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 8) != 0)
                return 0;
              goto LABEL_148;
            case 8:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 1) == 0)
                return 0;
              goto LABEL_148;
            case 9:
              if (v23 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 1) != 0)
                return 0;
              goto LABEL_148;
            case 10:
              if (v23 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 0x10) == 0)
                return 0;
              goto LABEL_148;
            case 11:
              if (v23 <= 0xFE && (*(_BYTE *)(*(_QWORD *)(a4 + 32) + v23) & 0x10) != 0)
                return 0;
              goto LABEL_148;
            case 15:
            case 16:
              v30 = v27 == 15;
              v31 = v20[3];
              LODWORD(v18) = _pcre2_ucd_stage2_8[v23
                                               - (v18 & 0xFFFFFF80)
                                               + (_pcre2_ucd_stage1_8[v23 / 128] << 7)];
              switch(v20[2])
              {
                case 1:
                  v38 = _pcre2_ucd_records_8[12 * v18 + 1];
                  if (v38 == 5 || v38 == 9)
                    goto LABEL_118;
                  v40 = v38 == 8;
                  goto LABEL_143;
                case 2:
                  v41 = v27 == 15;
                  v42 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == v31;
                  goto LABEL_113;
                case 3:
                  v41 = v27 == 15;
                  v43 = _pcre2_ucd_records_8[12 * v18 + 1];
                  goto LABEL_111;
                case 4:
                  v41 = v27 == 15;
                  v43 = _pcre2_ucd_records_8[12 * v18];
LABEL_111:
                  v42 = v31 == v43;
                  goto LABEL_113;
                case 5:
                  v41 = v27 == 15;
                  v42 = (_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] & 0xFFFFFFFD) == 1;
                  goto LABEL_113;
                case 6:
                case 7:
                  if (v23 < 0x2000)
                  {
                    if (v23 > 132)
                    {
                      if (v23 > 5759)
                      {
                        if (v23 == 5760 || v23 == 6158)
                          goto LABEL_147;
                      }
                      else if (v23 == 133 || v23 == 160)
                      {
                        goto LABEL_147;
                      }
                    }
                    else if (v23 <= 0x20 && ((1 << v23) & 0x100003E00) != 0)
                    {
                      goto LABEL_147;
                    }
                  }
                  else if ((v23 - 0x2000) < 0xB
                         || (v23 - 8232) <= 0x37
                         && ((1 << (v23 - 40)) & 0x80000000000083) != 0
                         || v23 == 12288)
                  {
                    goto LABEL_147;
                  }
                  v41 = v27 == 15;
                  v42 = _pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] == 6;
LABEL_113:
                  v44 = !v42;
                  v30 = v41 ^ v44;
                  goto LABEL_147;
                case 8:
                  if ((_pcre2_ucp_gentype_8[_pcre2_ucd_records_8[12 * v18 + 1]] | 2) == 3)
                  {
LABEL_118:
                    v45 = 1;
                  }
                  else
                  {
                    v40 = v23 == 95;
LABEL_143:
                    v45 = v40;
                  }
                  v30 = v45 == v30;
                  goto LABEL_147;
                case 9:
                  v18 = (int *)((char *)&_pcre2_ucd_caseless_sets_8
                              + 4 * _pcre2_ucd_records_8[12 * v18 + 3]);
                  break;
                default:
                  return 0;
              }
              while (1)
              {
                v46 = *v18;
                if (*v18 > v23)
                  break;
                ++v18;
                if (v46 == v23)
                  goto LABEL_147;
              }
              v30 = v27 != 15;
LABEL_147:
              if (v30)
                goto LABEL_148;
              return 0;
            case 17:
            case 21:
            case 23:
            case 25:
              result = 0;
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133)
                goto LABEL_148;
              return result;
            case 18:
              result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 != 9 && v23 != 32)
                    return result;
                }
                else if (v23 != 160 && v23 != 5760 && v23 != 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 != 8239 && v23 != 8287 && v23 != 12288)
                  return result;
              }
              else if ((v23 - 0x2000) >= 0xB)
              {
                return result;
              }
              goto LABEL_148;
            case 19:
              result = 0;
              if (v23 < 0x2000)
              {
                if (v23 <= 159)
                {
                  if (v23 == 9 || v23 == 32)
                    return result;
                }
                else if (v23 == 160 || v23 == 5760 || v23 == 6158)
                {
                  return result;
                }
              }
              else if (v23 > 8238)
              {
                if (v23 == 8239 || v23 == 8287 || v23 == 12288)
                  return result;
              }
              else if ((v23 - 0x2000) < 0xB)
              {
                return result;
              }
              break;
            case 20:
              if ((v23 - 10) >= 4 && (v23 - 8232) >= 2 && v23 != 133)
                return 0;
              goto LABEL_148;
            case 24:
              goto LABEL_148;
            case 29:
              v32 = v20[2];
              v33 = v26;
              while (v23 != v32)
              {
                v34 = *v33++;
                v32 = v34;
                if (v34 == -1)
                  goto LABEL_148;
              }
              return 0;
            case 31:
              v35 = v20[2];
              v36 = v26;
              while (v23 != v35)
              {
                v37 = *v36++;
                v35 = v37;
                if (v37 == -1)
                  return 0;
              }
              if (v23 == -1)
                return 0;
              goto LABEL_148;
            default:
              return result;
          }
          goto LABEL_148;
        }
        switch(v27)
        {
          case 'n':
            if (v23 <= 0xFF)
              goto LABEL_89;
            break;
          case 'o':
            if (v23 > 0xFF)
              return 0;
LABEL_89:
            if (((*(unsigned __int8 *)(v24 - v20[2] + ((unint64_t)v23 >> 3)) >> (v23 & 7)) & 1) != 0)
              return 0;
            break;
          case 'p':
            v80 = v25;
            v81 = v24;
            v28 = v26;
            v29 = _pcre2_xclass_8(v23, (_BYTE *)(v25 - v20[2]));
            v26 = v28;
            v25 = v80;
            v24 = v81;
            if (v29)
              return 0;
            break;
          default:
            return result;
        }
LABEL_148:
        v47 = v21[1];
        ++v21;
        v23 = v47;
        if (v47 == -1)
          goto LABEL_233;
        continue;
      }
    }
    v21 = (int *)&v86;
    v20 = a5;
    if (v84 == 29)
      goto LABEL_26;
    if (v19 == 110 || v84 == 110 || !(_DWORD)a2 && (v19 == 111 || v84 == 111))
      break;
    if ((v19 - 15) > 1)
    {
      result = 0;
      v61 = v19 - 6;
      if (v61 > 0x10 || (v84 - 6) > 0x14)
        return result;
      if (!autoposstab[21 * v61 + v84 - 6])
        return 0;
    }
    else if (v84 != 24)
    {
      if ((v84 - 15) > 1)
        return 0;
      v48 = propposstab[11 * *v82 + v86];
      switch(propposstab[11 * *v82 + v86])
      {
        case 1u:
          result = 0;
          if (v19 != 16 || v84 != 16)
            return result;
          break;
        case 2u:
          if ((v19 == v84) == (a5[3] == v87))
            return 0;
          break;
        case 3u:
          if (v19 == v84)
            return 0;
          break;
        case 4u:
          if (v84 != 16)
            return 0;
          v75 = v19 == 16;
          v76 = a5[3];
          v77 = v87;
          goto LABEL_269;
        case 5u:
          if (v19 != 16)
            return 0;
          v75 = v84 == 16;
          v76 = v87;
          v77 = a5[3];
LABEL_269:
          if (catposstab[30 * v76 + v77] != v75)
            return 0;
          break;
        case 6u:
        case 7u:
        case 8u:
          if (v84 != 16)
            return 0;
          v49 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 6);
          v50 = v87;
          if (v87 == *v49 || v87 == v49[1])
            goto LABEL_247;
          result = 0;
          if (v19 != 16)
            return result;
          v51 = v49[2];
          goto LABEL_240;
        case 9u:
        case 0xAu:
        case 0xBu:
          if (v19 != 16)
            return 0;
          v70 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 9);
          v50 = a5[3];
          if (v50 == *v70 || v50 == v70[1])
            goto LABEL_256;
          result = 0;
          if (v84 != 16)
            return result;
          v51 = v70[2];
LABEL_240:
          if (v50 == v51)
            return result;
          break;
        case 0xCu:
        case 0xDu:
        case 0xEu:
          if (v84 != 16)
            return 0;
          v71 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 12);
          LODWORD(v72) = v87;
          if (catposstab[30 * *v71 + v87] && catposstab[30 * v71[1] + v87])
          {
            result = 0;
            if (v19 != 16)
              return result;
            v73 = v71[3];
            goto LABEL_254;
          }
LABEL_247:
          if (v19 == 16)
            return 0;
          break;
        case 0xFu:
        case 0x10u:
        case 0x11u:
          if (v19 != 16)
            return 0;
          v74 = (unsigned __int8 *)&posspropstab + 4 * (v48 - 15);
          v72 = a5[3];
          if (catposstab[30 * *v74 + v72] && catposstab[30 * v74[1] + v72])
          {
            result = 0;
            if (v84 != 16)
              return result;
            v73 = v74[3];
LABEL_254:
            if ((_DWORD)v72 == v73)
              return result;
          }
          else
          {
LABEL_256:
            if (v84 == 16)
              return 0;
          }
          break;
        default:
          return 0;
      }
    }
LABEL_233:
    if (!v85)
      return 1;
  }
  result = 0;
  if ((_DWORD)a2)
    v52 = 0;
  else
    v52 = v19 == 111;
  v53 = v52 || v19 == 110;
  v54 = v53;
  if (v53)
    v55 = a5;
  else
    v55 = &v84;
  if (v53)
    v56 = a6;
  else
    v56 = a1;
  if (v53)
    v57 = v84;
  else
    v57 = *a5;
  if (v53)
    v58 = &v84;
  else
    v58 = a5;
  v59 = &v56[-v55[2]];
  switch(v57)
  {
    case 6:
      LODWORD(result) = 1;
      goto LABEL_196;
    case 7:
LABEL_196:
      v60 = *(_QWORD *)(a4 + 24) + 64;
      goto LABEL_224;
    case 8:
      LODWORD(result) = 1;
      goto LABEL_221;
    case 9:
LABEL_221:
      v60 = *(_QWORD *)(a4 + 24);
      goto LABEL_224;
    case 10:
      LODWORD(result) = 1;
      goto LABEL_223;
    case 11:
LABEL_223:
      v60 = *(_QWORD *)(a4 + 24) + 160;
LABEL_224:
      if (!(_DWORD)result)
        goto LABEL_230;
      v68 = 0;
      while ((v59[v68] & ~*(unsigned __int8 *)(v60 + v68)) == 0)
      {
        if (++v68 == 32)
          goto LABEL_233;
      }
      return 0;
    default:
      if ((v57 - 110) < 2)
      {
        if (v58 == &v84)
          v62 = a1;
        else
          v62 = a6;
        if (v54)
          v63 = &v84;
        else
          v63 = a5;
        v60 = (uint64_t)&v62[-v63[2]];
        goto LABEL_230;
      }
      if (v57 != 112)
        return result;
      if (v58 == &v84)
        v64 = a1;
      else
        v64 = a6;
      if (v54)
        v65 = &v84;
      else
        v65 = a5;
      v66 = &v64[-v65[2]];
      v67 = v66[2];
      if ((v67 & 4) != 0)
        return 0;
      if ((v66[2] & 2) == 0)
      {
        if (!v85)
          return (v67 & 1) == 0;
        goto LABEL_5;
      }
      v60 = (uint64_t)(v66 + 3);
LABEL_230:
      v69 = 0;
      while ((*(_BYTE *)(v60 + v69) & v59[v69]) == 0)
      {
        if (++v69 == 32)
          goto LABEL_233;
      }
      return 0;
  }
}

unsigned __int8 *_pcre2_find_bracket_8(unsigned __int8 *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  while (2)
  {
    v3 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v4 = result[1];
        goto LABEL_10;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v4 = result[3];
LABEL_10:
        v6 = 2 * ((v4 - 15) < 2);
        goto LABEL_11;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_19;
      case 'p':
        v7 = *(unsigned __int16 *)(result + 1);
        goto LABEL_17;
      case 'w':
        v7 = *(unsigned __int16 *)(result + 5);
LABEL_17:
        result += __rev16(v7);
        continue;
      default:
        v5 = v3 - 125;
        if ((v3 - 125) > 0x24)
          goto LABEL_18;
        if (((1 << v5) & 0x1550000000) != 0)
        {
          v6 = result[1];
LABEL_11:
          result += v6 + _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (((1 << v5) & 0x31800) != 0)
        {
          if (a3 == bswap32(*(unsigned __int16 *)(result + 3)) >> 16)
            return result;
          result += _pcre2_OP_lengths_8[v3];
          continue;
        }
        if ((_DWORD)v3 == 125)
        {
          if (a3 < 0)
            return result;
          result += 3;
          continue;
        }
LABEL_18:
        if (*result)
        {
LABEL_19:
          result += _pcre2_OP_lengths_8[v3];
          if (a2 && (v3 - 29) <= 0x37)
          {
            v8 = *(result - 1);
            if (v8 >= 0xC0)
              result += _pcre2_utf8_table4[v8 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t pcre2_substitute_8(uint64_t a1, _BYTE *a2, size_t a3, size_t a4, int a5, uint64_t a6, __int128 *a7, unsigned __int8 *a8, unint64_t a9, char *a10, unint64_t *a11)
{
  int v11;
  unint64_t v12;
  uint64_t result;
  _QWORD *v15;
  int v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t ovector_pointer_8;
  const void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int valid;
  int v31;
  size_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int matched;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  size_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  int v63;
  unsigned int v64;
  signed int v65;
  unsigned __int8 *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  char v96;
  int v97;
  int text_end;
  int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned __int8 *mark_8;
  size_t v108;
  size_t v110;
  unsigned __int16 *v111;
  unsigned int v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned int v119;
  unsigned __int8 v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t (*v132)(_QWORD *, _QWORD);
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  size_t v146;
  __int16 v147;
  int v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  int v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  size_t *v158;
  unint64_t v159;
  int v160;
  int v161;
  size_t v162;
  unsigned int ovector_count_8;
  uint64_t v164;
  uint64_t *v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  size_t __n;
  int __na;
  uint64_t v171;
  size_t v172;
  __int128 *v173;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  unint64_t v184;
  int v185;
  unsigned __int16 *v186;
  unsigned __int16 *v187;
  unint64_t v188;
  unsigned int v189;
  _QWORD v190[2];
  __int128 v191;
  size_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  _BYTE v196[6];
  int v197[9];
  _OWORD v198[10];
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)(a1 + 88);
  v12 = *a11;
  *a11 = -1;
  if ((a5 & 0x30) != 0)
    return 4294967262;
  v15 = (_QWORD *)a6;
  if (a6)
  {
    __n = a4;
    v17 = a5;
    v181 = a1;
    if ((a5 & 0x10000) == 0)
    {
      v18 = 0;
      goto LABEL_20;
    }
    if (a7)
      v20 = a7;
    else
      v20 = (__int128 *)a1;
    v21 = *(unsigned __int16 *)(a1 + 128);
    v22 = *(unsigned __int16 *)(a6 + 74);
    v23 = pcre2_match_data_create_8(v22, v20);
    if (v23)
    {
      v18 = v23;
      if (v21 + 1 < v22)
        v24 = v21 + 1;
      else
        v24 = v22;
      memcpy(v23, v15, 16 * v24 + 80);
      v15 = v18;
      goto LABEL_20;
    }
    return 4294967248;
  }
  if ((a5 & 0x10000) != 0)
    return 4294967245;
  __n = a4;
  v17 = a5;
  if (a7)
    v19 = a7;
  else
    v19 = (__int128 *)a1;
  v181 = a1;
  v15 = pcre2_match_data_create_from_pattern_8(a1, v19);
  v18 = v15;
  if (!v15)
    return 4294967248;
LABEL_20:
  v173 = a7;
  v194 = 0;
  v191 = 0u;
  v192 = 0;
  v190[0] = 0;
  ovector_pointer_8 = pcre2_get_ovector_pointer_8((uint64_t)v15);
  ovector_count_8 = pcre2_get_ovector_count_8((uint64_t)v15);
  v26 = a2;
  v190[1] = a2;
  *(_QWORD *)&v191 = a10;
  v165 = (uint64_t *)ovector_pointer_8;
  v193 = ovector_pointer_8;
  if (a3 == -1)
  {
    v27 = _pcre2_strlen_8(a2);
    v26 = a2;
    a3 = v27;
  }
  v164 = (uint64_t)v18;
  v185 = v11 & 0x80000;
  v28 = a9;
  if (a9 == -1)
  {
    v29 = _pcre2_strlen_8(a8);
    v26 = a2;
    v28 = v29;
  }
  v195 = 0;
  v176 = (uint64_t)v15;
  if ((v17 & 0x40000000) == 0)
  {
    if (v185)
    {
      valid = _pcre2_valid_utf_8(a8, v28, v15 + 8);
      v26 = a2;
      if (valid)
      {
        v167 = valid;
        v15[6] = 0;
        goto LABEL_369;
      }
    }
  }
  if (a3 >= __n)
  {
    v162 = v28;
    if ((v17 & 0x20000) != 0)
    {
      v35 = v12;
      v34 = 0;
      v184 = 0;
      v32 = 0;
      v158 = a11;
      v159 = v35;
      v180 = v35;
    }
    else
    {
      v32 = __n;
      v180 = v12 - __n;
      if (v12 >= __n)
      {
        v158 = a11;
        v159 = v12;
        memcpy(a10, v26, __n);
        v34 = 0;
        v184 = 0;
      }
      else
      {
        if ((v17 & 0x1000) == 0)
          goto LABEL_367;
        v32 = 0;
        v184 = __n - v12;
        v33 = v12;
        v34 = 1;
        v158 = a11;
        v159 = v33;
        v180 = v33;
      }
    }
    v168 = 0;
    v36 = 0;
    v182 = 0;
    v179 = 0;
    v37 = 0;
    v38 = (unint64_t)&a8[v28];
    v39 = v17 & 0x39F00;
    v175 = v11 & 0xA0000;
    v40 = (v17 & 0x10000) == 0;
    v166 = v17;
    v167 = -48;
    v171 = -1;
    v172 = a3;
    v177 = -1;
    v178 = -1;
    v41 = __n;
    v42 = v165;
    while (1)
    {
      memset(v198, 0, sizeof(v198));
      v43 = v39;
      if (v40)
      {
        matched = pcre2_match_8();
        v39 = v43;
        if (matched < 0)
          goto LABEL_48;
      }
      else
      {
        matched = *(_DWORD *)(v176 + 76);
        if (matched < 0)
        {
LABEL_48:
          v31 = matched;
          if (matched != -1)
            goto LABEL_368;
          if (v179 && v41 < v172)
          {
            v48 = v41 + 1;
            if (a2[v41] == 13
              && *(unsigned __int16 *)(v181 + 122) - 3 <= 0xFFFFFFFD
              && v48 < v172
              && a2[v48] == 10)
            {
              v48 = v41 + 2;
            }
            else if ((*(_BYTE *)(v181 + 90) & 8) != 0 && v48 < v172)
            {
              while ((a2[v48] & 0xC0) == 0x80)
              {
                if (v172 == ++v48)
                {
                  v48 = v172;
                  break;
                }
              }
            }
            if ((v166 & 0x20000) != 0)
            {
              v179 = 0;
            }
            else
            {
              v49 = v48 - v41;
              if (v34 || v180 >= v49)
              {
                if (v34)
                {
                  v179 = 0;
                  v50 = v49 + v184;
                  goto LABEL_78;
                }
                memcpy(&a10[v32], &a2[v41], v48 - v41);
                v39 = v43;
                v179 = 0;
                v32 += v49;
                v180 -= v49;
              }
              else
              {
                if ((v39 & 0x1000) == 0)
                  goto LABEL_367;
                v179 = 0;
                v50 = v49 - v180;
LABEL_78:
                v184 = v50;
                v34 = 1;
              }
            }
            v41 = v178;
            goto LABEL_339;
          }
LABEL_350:
          if ((v166 & 0x20000) != 0)
          {
            v141 = v168;
          }
          else
          {
            v140 = v172 - v41;
            v141 = v168;
            if (!v34 && v180 < v140)
            {
              if ((v39 & 0x1000) != 0)
              {
                v142 = v140 - v180;
                goto LABEL_364;
              }
LABEL_367:
              v31 = -48;
              goto LABEL_368;
            }
            if (v34)
            {
              v142 = v140 + v184;
LABEL_364:
              v196[0] = 0;
LABEL_365:
              v144 = v142 + 1;
              v143 = v159;
              goto LABEL_366;
            }
            v145 = &a2[v41];
            v146 = v172 - v41;
            v147 = v39;
            memcpy(&a10[v32], v145, v146);
            LOWORD(v39) = v147;
            v32 += v140;
            v180 -= v140;
          }
          v196[0] = 0;
          if (v34 || v180)
          {
            v142 = v184;
            if (!v34)
            {
              a10[v32] = v196[0];
              *v158 = v32;
              v167 = v141;
              goto LABEL_369;
            }
            goto LABEL_365;
          }
          v143 = v159;
          if ((v39 & 0x1000) == 0)
            goto LABEL_367;
          v144 = 1;
LABEL_366:
          *v158 = v144 + v143;
          goto LABEL_367;
        }
      }
      v46 = *v42;
      v45 = v42[1];
      v31 = -60;
      if (v45 < *v42)
        goto LABEL_368;
      v47 = v46 - v41;
      if (v46 < v41)
        goto LABEL_368;
      if (v177 != v46 || v171 != v45)
      {
        v51 = v168;
        if (v168 == 0x7FFFFFFF)
        {
          v31 = -61;
          goto LABEL_368;
        }
        v52 = ovector_count_8;
        if (matched)
          v52 = matched;
        __na = v52;
        if ((v166 & 0x20000) != 0)
        {
          v53 = v32;
        }
        else if (v34 || v180 >= v47)
        {
          v53 = v32;
          if (v34)
          {
            v184 += v47;
            v34 = 1;
          }
          else
          {
            memcpy(&a10[v32], &a2[v41], v47);
            v39 = v43;
            v53 = v47 + v32;
            v180 -= v47;
          }
        }
        else
        {
          if ((v39 & 0x1000) == 0)
            goto LABEL_367;
          v184 = v47 - v180;
          v34 = 1;
          v53 = v32;
          v51 = v168;
        }
        v168 = v51 + 1;
        v32 = v53;
        *((_QWORD *)&v191 + 1) = v53;
        LODWORD(v194) = __na;
        v54 = a8;
        v195 = a8;
        v55 = v41;
        if ((v39 & 0x8000) == 0)
        {
          v56 = 0;
          if ((v39 & 0x800) != 0)
            v57 = -55;
          else
            v57 = -49;
          if ((v39 & 0x400) != 0)
            v58 = 9;
          else
            v58 = 16;
          v160 = v58;
          v161 = v57;
          while (2)
          {
            v189 = 0;
            if ((unint64_t)v54 >= v38)
            {
              if (!v56)
                goto LABEL_322;
              v38 = *((_QWORD *)&v198[v56 / 2 - 1] + 1);
              v56 -= 2;
              v61 = *(unsigned __int8 **)&v198[v56 / 2];
LABEL_102:
              v195 = v61;
              goto LABEL_171;
            }
            v59 = *v54;
            if (v37)
            {
              v60 = v59 != 92 || (unint64_t)v54 >= v38 - 1;
              if (!v60 && v54[1] == 69)
              {
                v37 = 0;
                v61 = v54 + 2;
                goto LABEL_102;
              }
LABEL_124:
              v62 = v54;
LABEL_125:
              v195 = v62 + 1;
              v73 = *v62;
              v189 = v73;
              if (v185 && v73 >= 0xC0)
              {
                if ((v73 & 0x20) == 0)
                {
                  v195 = v62 + 2;
                  v189 = v62[1] & 0x3F | ((v73 & 0x1F) << 6);
                  if (!v36)
                    goto LABEL_129;
LABEL_149:
                  if (v175)
                  {
                    v81 = _pcre2_ucd_stage2_8[v189
                                            - (v62 & 0xFFFFFF80)
                                            + (_pcre2_ucd_stage1_8[(int)v189 / 128] << 7)];
                    v82 = _pcre2_ucd_records_8[12 * v81 + 1];
                    v74 = v182;
                    if (_pcre2_ucp_gentype_8[v82] == 1)
                    {
                      v83 = v36 <= 0 ? 5 : 9;
                      v74 = v182;
                      if (v83 != (_DWORD)v82)
                      {
                        v84 = *(_DWORD *)&_pcre2_ucd_records_8[12 * v81 + 4] + v189;
                        goto LABEL_160;
                      }
                    }
                  }
                  else
                  {
                    v85 = *(_QWORD *)(v181 + 24);
                    v86 = 128;
                    if (v36 > 0)
                      v86 = 96;
                    v74 = v182;
                    if (((*(unsigned __int8 *)(v85 + v86 + ((unint64_t)v189 >> 3) + 512) >> (v189 & 7)) & 1) == 0)
                    {
                      v84 = *(unsigned __int8 *)(v85 + v189 + 256);
LABEL_160:
                      v189 = v84;
                      v74 = v182;
                    }
                  }
LABEL_161:
                  if (v185)
                  {
                    v87 = _pcre2_ord2utf_8(v189, (uint64_t)v196);
                    v39 = v43;
                  }
                  else
                  {
                    v196[0] = v189;
                    v87 = 1;
                  }
                  v88 = v87;
                  if (v34)
                  {
                    v89 = v184 + v87;
                    goto LABEL_169;
                  }
                  v90 = v180 - v87;
                  if (v180 >= v87)
                  {
                    memcpy(&a10[v32], v196, v87);
                    v39 = v43;
                    v34 = 0;
                    v32 += v88;
                    v180 = v90;
                  }
                  else
                  {
                    if ((v39 & 0x1000) == 0)
                      goto LABEL_367;
                    v89 = v87 - v180;
LABEL_169:
                    v184 = v89;
                    v34 = 1;
                  }
                  v36 = v74;
                  v41 = v55;
LABEL_171:
                  v54 = v195;
                  continue;
                }
                v75 = v62[1] & 0x3F;
                if ((v73 & 0x10) == 0)
                {
                  v189 = ((v73 & 0xF) << 12) | (v75 << 6) | v62[2] & 0x3F;
                  v76 = v62 + 3;
                  goto LABEL_147;
                }
                if ((v73 & 8) == 0)
                {
                  v189 = ((v73 & 7) << 18) | (v75 << 12) | ((v62[2] & 0x3F) << 6) | v62[3] & 0x3F;
                  v76 = v62 + 4;
                  goto LABEL_147;
                }
                v77 = v62[2] & 0x3F;
                v78 = v62[3] & 0x3F;
                v79 = v62[4] & 0x3F;
                if ((v73 & 4) == 0)
                {
                  v189 = ((v73 & 3) << 24) | (v75 << 18) | (v77 << 12) | (v78 << 6) | v79;
                  v195 = v62 + 5;
                  if (v36)
                    goto LABEL_149;
LABEL_129:
                  v74 = 0;
                  goto LABEL_161;
                }
                v189 = ((v73 & 1) << 30) | (v75 << 24) | (v77 << 18) | (v78 << 12) | (v79 << 6) | v62[5] & 0x3F;
                v76 = v62 + 6;
LABEL_147:
                v195 = v76;
              }
              if (v36)
                goto LABEL_149;
              goto LABEL_129;
            }
            break;
          }
          if (v59 == 36)
          {
            v188 = 0;
            v62 = v54 + 1;
            v195 = v54 + 1;
            if ((unint64_t)(v54 + 1) >= v38)
              goto LABEL_180;
            v63 = *v62;
            if (v63 == 36)
              goto LABEL_125;
            v64 = *v62;
            if (v63 == 123)
            {
              v62 = v54 + 2;
              v195 = v54 + 2;
              if ((unint64_t)(v54 + 2) >= v38)
                goto LABEL_180;
              v64 = *v62;
            }
            if (v64 == 42)
            {
              v195 = ++v62;
              if ((unint64_t)v62 >= v38)
                goto LABEL_180;
              v69 = *v62;
            }
            else
            {
              v65 = v64 - 48;
              if (v64 - 48 <= 9)
              {
                v66 = v62 + 1;
                v195 = v62 + 1;
                if ((unint64_t)(v62 + 1) >= v38)
                {
                  v69 = v64;
                }
                else
                {
                  v67 = ~(unint64_t)v62 + v38;
                  v68 = v62 + 2;
                  while (1)
                  {
                    v69 = *v66;
                    if (v69 - 58 < 0xFFFFFFF6)
                      goto LABEL_195;
                    v65 = v69 + 10 * v65 - 48;
                    if (v65 > *(unsigned __int16 *)(v181 + 128))
                      break;
                    v195 = ++v66;
                    ++v68;
                    if (!--v67)
                    {
                      v66 = (unsigned __int8 *)v38;
                      goto LABEL_195;
                    }
                  }
                  if ((v39 & 0x800) == 0)
                  {
                    v71 = 16;
                    v106 = -49;
                    goto LABEL_217;
                  }
                  do
                  {
                    v66 = v68;
                    v195 = v68;
                    if ((unint64_t)v68 >= v38)
                      break;
                    ++v68;
                  }
                  while (*v66 - 48 < 0xA);
                }
LABEL_195:
                if (v63 == 123)
                {
                  if ((v39 & 0x200) != 0 && v64 != 42 && v69 == 58 && (unint64_t)v66 < v38 - 2)
                  {
                    v195 = v66 + 1;
                    v97 = v66[1];
                    if (v97 != 45 && v97 != 43)
                    {
                      v71 = 16;
                      v106 = -59;
                      goto LABEL_217;
                    }
                    v155 = v66 + 2;
                    v195 = v66 + 2;
                    v152 = v97;
                    text_end = find_text_end(v181, &v195, v38, v97 == 45);
                    if (text_end)
                    {
                      __na = text_end;
LABEL_271:
                      v71 = 16;
LABEL_272:
                      v39 = v43;
                      goto LABEL_181;
                    }
                    v101 = v195;
                    v99 = v152;
                    if (v152 == 43)
                    {
                      if (*v195 == 58)
                      {
                        v151 = v195 + 1;
                        v154 = v195++;
                        __na = find_text_end(v181, &v195, v38, 1);
                        if (__na)
                          goto LABEL_271;
                        __na = 0;
                        v99 = 43;
                        v66 = v195;
                        v103 = v195;
                        v101 = v154;
                        v100 = v155;
                        v102 = v151;
                        goto LABEL_213;
                      }
                      __na = 0;
                      v102 = 0;
                      v103 = 0;
                      v99 = 43;
                    }
                    else
                    {
                      __na = 0;
                      v102 = 0;
                      v103 = 0;
                    }
                    v66 = v195;
                    v100 = v155;
                    goto LABEL_213;
                  }
                  if ((unint64_t)v66 >= v38 || *v66 != 125)
                  {
                    v71 = 16;
                    v106 = -58;
LABEL_217:
                    __na = v106;
                    goto LABEL_181;
                  }
                  v99 = 0;
                  v100 = 0;
                  v101 = 0;
                  v102 = 0;
                  v103 = 0;
LABEL_213:
                  v195 = v66 + 1;
                }
                else
                {
                  v99 = 0;
                  v100 = 0;
                  v101 = 0;
                  v102 = 0;
                  v103 = 0;
                }
                if (v64 == 42)
                {
                  if (_pcre2_strcmp_8((unsigned __int8 *)v197, "MARK"))
                  {
                    v71 = 11;
                    goto LABEL_272;
                  }
                  mark_8 = (unsigned __int8 *)pcre2_get_mark_8(v176);
                  if (mark_8)
                  {
                    v108 = -1;
                    v39 = v43;
                    while (mark_8[++v108])
                      ;
                    if (v34 || v180 >= v108)
                    {
                      if (!v34)
                      {
                        memcpy(&a10[v32], mark_8, v108);
                        v39 = v43;
                        v32 += v108;
                        v180 -= v108;
                        goto LABEL_313;
                      }
                      v110 = v184 + v108;
                    }
                    else
                    {
                      if ((v43 & 0x1000) == 0)
                      {
                        v34 = 0;
                        v71 = 3;
                        goto LABEL_181;
                      }
                      v110 = v108 - v180;
                    }
                    v184 = v110;
                    v34 = 1;
                  }
                  else
                  {
                    v39 = v43;
                  }
                }
                else
                {
                  v104 = v99;
                  v153 = v101;
                  v156 = v100;
                  v149 = v103;
                  v150 = v102;
                  if (v65 < 0)
                  {
                    v186 = 0;
                    v187 = 0;
                    v105 = pcre2_substring_nametable_scan_8(v181, (unsigned __int8 *)v197, &v187, (unsigned __int8 **)&v186);
                    v39 = v43;
                    if ((v43 & 0x800) != 0 && v105 == -49)
                    {
                      v65 = *(unsigned __int16 *)(v181 + 128) + 1;
                    }
                    else
                    {
                      __na = v105;
                      if ((v105 & 0x80000000) != 0)
                      {
                        v71 = 16;
                        goto LABEL_181;
                      }
                      if (v187 <= v186)
                      {
                        v111 = v187;
                        do
                        {
                          v112 = __rev16(*v111);
                          if (v112 < ovector_count_8)
                          {
                            if (v65 < 0)
                              v65 = v112;
                            if (v165[2 * v112] != -1)
                            {
                              v65 = v112;
                              goto LABEL_257;
                            }
                          }
                          v111 = (unsigned __int16 *)((char *)v111 + v105);
                        }
                        while (v111 <= v186);
                        if ((v65 & 0x80000000) == 0)
                          goto LABEL_257;
                      }
                      v65 = __rev16(*v187);
                    }
                  }
LABEL_257:
                  v113 = pcre2_substring_length_bynumber_8(v176, v65, &v188);
                  if (v113 < 0)
                  {
                    v115 = v113;
                    if (v113 == -49)
                      v115 = v161;
                    __na = v115;
                    if (v115 != -55)
                      goto LABEL_271;
                    v113 = -55;
                    if (!v104)
                    {
                      __na = -55;
                      v71 = v160;
                      goto LABEL_272;
                    }
                  }
                  __na = v113;
                  if (v104)
                  {
                    if (v104 != 45 || (v149 = v153, v150 = v156, v113))
                    {
                      v39 = v43;
                      if (v56 > 0x13)
                        goto LABEL_180;
                      *(_QWORD *)&v198[v56 / 2] = v195;
                      *((_QWORD *)&v198[v56 / 2] + 1) = v38;
                      v56 += 2;
                      v114 = v156;
                      if (v113)
                      {
                        v114 = v150;
                        v38 = (unint64_t)v149;
                      }
                      else
                      {
                        v38 = (unint64_t)v153;
                      }
                      v195 = v114;
                      v71 = 9;
LABEL_181:
                      v37 = 0;
                      goto LABEL_182;
                    }
                  }
                  v116 = v165[2 * v65];
                  v117 = v165[(2 * v65) | 1u];
                  v39 = v43;
                  if (v116 < v117)
                  {
                    v157 = &a2[v117];
                    v118 = &a2[v116];
                    while (1)
                    {
                      v119 = *v118;
                      v189 = v119;
                      if (v185 && v119 >= 0xC0)
                      {
                        if ((v119 & 0x20) != 0)
                        {
                          v123 = v118[1] & 0x3F;
                          if ((v119 & 0x10) != 0)
                          {
                            if ((v119 & 8) != 0)
                            {
                              v129 = v118[2] & 0x3F;
                              v130 = v118[3] & 0x3F;
                              v131 = v118[4] & 0x3F;
                              if ((v119 & 4) != 0)
                              {
                                v119 = ((v119 & 1) << 30) | (v123 << 24) | (v129 << 18) | (v130 << 12) | (v131 << 6) | v118[5] & 0x3F;
                                v189 = v119;
                                v118 += 6;
                              }
                              else
                              {
                                v118 += 5;
                                v119 = ((v119 & 3) << 24) | (v123 << 18) | (v129 << 12) | (v130 << 6) | v131;
                                v189 = v119;
                              }
                            }
                            else
                            {
                              v119 = ((v119 & 7) << 18) | (v123 << 12) | ((v118[2] & 0x3F) << 6) | v118[3] & 0x3F;
                              v189 = v119;
                              v118 += 4;
                            }
                          }
                          else
                          {
                            v119 = ((v119 & 0xF) << 12) | (v123 << 6) | v118[2] & 0x3F;
                            v189 = v119;
                            v118 += 3;
                          }
                        }
                        else
                        {
                          v120 = v118[1];
                          v118 += 2;
                          v189 = v120 & 0x3F | ((v119 & 0x1F) << 6);
                          v119 = v189;
                        }
                      }
                      else
                      {
                        ++v118;
                      }
                      if (v36)
                        break;
LABEL_296:
                      if (v185)
                      {
                        v126 = _pcre2_ord2utf_8(v119, (uint64_t)v196);
                        v39 = v43;
                      }
                      else
                      {
                        v196[0] = v119;
                        v126 = 1;
                      }
                      v127 = v126;
                      if (v34)
                      {
                        v184 += v126;
                        v34 = 1;
                      }
                      else
                      {
                        v128 = v180 - v126;
                        if (v180 >= v126)
                        {
                          memcpy(&a10[v32], v196, v126);
                          v39 = v43;
                          v34 = 0;
                          v32 += v127;
                          v180 = v128;
                        }
                        else
                        {
                          if ((v39 & 0x1000) == 0)
                          {
                            v34 = 0;
                            v71 = 3;
                            v41 = v55;
                            goto LABEL_181;
                          }
                          v184 = v126 - v180;
                          v34 = 1;
                        }
                        v41 = v55;
                      }
                      if (v118 >= v157)
                        goto LABEL_313;
                    }
                    if (v175)
                    {
                      v121 = _pcre2_ucd_records_8[12
                                                * _pcre2_ucd_stage2_8[v119 & 0x7F | (_pcre2_ucd_stage1_8[v119 >> 7] << 7)]
                                                + 1];
                      if (_pcre2_ucp_gentype_8[v121] == 1)
                      {
                        v122 = v36 <= 0 ? 5 : 9;
                        if (v122 != (_DWORD)v121)
                        {
                          v119 += *(_DWORD *)&_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v119 & 0x7F | (_pcre2_ucd_stage1_8[v119 >> 7] << 7)]
                                                                 + 4];
                          goto LABEL_294;
                        }
                      }
                    }
                    else
                    {
                      v124 = *(_QWORD *)(v181 + 24);
                      v125 = 128;
                      if (v36 > 0)
                        v125 = 96;
                      if (((*(unsigned __int8 *)(v124 + v125 + ((unint64_t)v119 >> 3) + 512) >> (v119 & 7)) & 1) == 0)
                      {
                        v119 = *(unsigned __int8 *)(v124 + v119 + 256);
LABEL_294:
                        v189 = v119;
                      }
                    }
                    v36 = v182;
                    goto LABEL_296;
                  }
                }
LABEL_313:
                v37 = 0;
                goto LABEL_171;
              }
              v69 = v64;
            }
            v91 = *(_QWORD *)(v181 + 24) + 832;
            if ((*(_BYTE *)(v91 + v69) & 0x10) == 0)
              goto LABEL_180;
            v92 = 0;
            v93 = v62 + 1;
            do
            {
              v94 = v92;
              *((_BYTE *)v197 + v92) = v69;
              if (v92 == 32)
                goto LABEL_180;
              v95 = &v93[v92];
              v195 = &v93[v94];
              if ((unint64_t)&v93[v94] >= v38)
                goto LABEL_189;
              v69 = *v95;
              v96 = *(_BYTE *)(v91 + *v95);
              v92 = v94 + 1;
            }
            while ((v96 & 0x10) != 0);
            if (v94 == -1)
            {
LABEL_180:
              v71 = 11;
              goto LABEL_181;
            }
LABEL_189:
            *((_BYTE *)v197 + v94 + 1) = 0;
            v66 = &v62[v94 + 1];
            v65 = -1;
            goto LABEL_195;
          }
          if ((v39 & 0x200) == 0 || v59 != 92)
            goto LABEL_124;
          v197[0] = 0;
          if ((unint64_t)v54 < v38 - 1)
          {
            v70 = v54[1];
            if (v70 > 0x6B)
            {
              if (v70 == 108)
              {
                v182 = 0;
                v37 = 0;
                v195 = v54 + 2;
                v71 = 9;
                v36 = -1;
                goto LABEL_182;
              }
              if (v70 == 117)
              {
                v182 = 0;
                v37 = 0;
                v195 = v54 + 2;
                v71 = 9;
                v36 = 1;
                goto LABEL_182;
              }
            }
            else
            {
              if (v70 == 76)
              {
                v37 = 0;
                v195 = v54 + 2;
                v71 = 9;
                v36 = -1;
                v72 = -1;
                goto LABEL_176;
              }
              if (v70 == 85)
              {
                v37 = 0;
                v195 = v54 + 2;
                v71 = 9;
                v36 = 1;
                v72 = 1;
LABEL_176:
                v182 = v72;
                goto LABEL_182;
              }
            }
          }
          v195 = v54 + 1;
          v80 = _pcre2_check_escape_8(&v195, v38, (int *)&v189, v197, *(_DWORD *)(v181 + 88), *(_DWORD *)(v181 + 92), 0, 0);
          if (v197[0])
          {
            __na = v80;
            v37 = 0;
            v71 = 28;
            v39 = v43;
          }
          else
          {
            v39 = v43;
            switch(v80)
            {
              case 0:
                __na = 0;
                if (v36)
                  goto LABEL_149;
                goto LABEL_129;
              case 25:
                __na = 25;
                v36 = 0;
                v182 = 0;
                v37 = 0;
                v71 = 9;
                break;
              case 26:
                v71 = 9;
                v37 = 1;
                __na = 26;
                break;
              default:
                __na = v80;
                v37 = 0;
                v71 = 28;
                break;
            }
          }
LABEL_182:
          if (v71 == 9)
            goto LABEL_171;
          switch(v71)
          {
            case 2:
              goto LABEL_380;
            case 3:
              goto LABEL_369;
            case 4:
              goto LABEL_350;
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
              return 4294967248;
            case 11:
              v148 = -35;
              goto LABEL_378;
            default:
              if (v71 == 16)
                goto LABEL_379;
              if (v71 != 28)
                return 4294967248;
              v148 = -57;
LABEL_378:
              __na = v148;
LABEL_379:
              *v158 = v195 - a8;
LABEL_380:
              v31 = __na;
              break;
          }
          goto LABEL_368;
        }
        if (!v34 && v180 < v162)
        {
          v42 = v165;
          if ((v39 & 0x1000) == 0)
            goto LABEL_367;
          v184 = v162 - v180;
          v34 = 1;
          goto LABEL_332;
        }
        if (v34)
        {
          v184 += v162;
          v34 = 1;
          goto LABEL_331;
        }
        memcpy(&a10[v53], a8, v162);
        v39 = v43;
        v32 = v53 + v162;
        v180 -= v162;
LABEL_322:
        if (v173 && !v34)
        {
          v132 = (uint64_t (*)(_QWORD *, _QWORD))*((_QWORD *)v173 + 7);
          if (v132)
          {
            HIDWORD(v194) = v168;
            v192 = v32;
            v133 = v132(v190, *((_QWORD *)v173 + 8));
            if (!v133)
            {
              v34 = 0;
              v42 = v165;
              v39 = v43;
              goto LABEL_332;
            }
            v134 = v133;
            v32 -= v192 - *((_QWORD *)&v191 + 1);
            v135 = v192 - *((_QWORD *)&v191 + 1) + v180;
            LODWORD(v39) = v43;
            if ((v166 & 0x20000) != 0)
            {
              v180 += v192 - *((_QWORD *)&v191 + 1);
              v34 = 0;
            }
            else
            {
              v136 = v165[1] - *v165;
              v137 = v135 - v136;
              if (v135 < v136)
              {
                v41 = v55;
                v42 = v165;
                if ((v43 & 0x1000) == 0)
                  goto LABEL_367;
                v180 += v192 - *((_QWORD *)&v191 + 1);
                v184 = v136 - v135;
                v34 = 1;
LABEL_345:
                if (v134 >= 0)
                  v39 = v39;
                else
                  v39 = v39 & 0xFFFFFEFF;
LABEL_332:
                v48 = v42[1];
                v177 = *v42;
                if (*v42 <= v41 && *v42 == v48)
                  v139 = -2147483640;
                else
                  v139 = 0;
                v179 = v139;
                v171 = v42[1];
                goto LABEL_339;
              }
              memcpy(&a10[v32], &a2[*v165], v165[1] - *v165);
              LODWORD(v39) = v43;
              v34 = 0;
              v32 += v136;
              v180 = v137;
              v41 = v55;
            }
            v42 = v165;
            goto LABEL_345;
          }
          v34 = 0;
        }
LABEL_331:
        v42 = v165;
        goto LABEL_332;
      }
      v31 = -65;
      if (v177 != v171)
        goto LABEL_368;
      v48 = v41;
      v179 = -2147483640;
      v177 = v171;
      if (v178 == v41)
        goto LABEL_368;
LABEL_339:
      v178 = v41;
      v41 = v48;
      v40 = 1;
      if ((v39 & 0x100) == 0)
        goto LABEL_350;
    }
  }
  v15[6] = 0;
  v31 = -33;
LABEL_368:
  v167 = v31;
LABEL_369:
  if (v164)
  {
    pcre2_match_data_free_8(v164);
    return v167;
  }
  else
  {
    result = v167;
    *(_DWORD *)(v176 + 76) = v167;
  }
  return result;
}

uint64_t find_text_end(uint64_t a1, unsigned __int8 **a2, unint64_t a3, int a4)
{
  unsigned __int8 *v5;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  int v12;
  int v14;
  BOOL v15;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 *v24;

  v5 = *a2;
  v24 = v5;
  if ((unint64_t)v5 < a3)
  {
    v9 = 0;
    v10 = 0;
    v11 = a3 - 1;
    while (1)
    {
      v12 = *v5;
      if (v9)
        break;
      if (v12 != 125)
      {
        if (!a4 && v12 == 58 && v10 == 0)
        {
LABEL_42:
          result = 0;
          goto LABEL_41;
        }
        if (v12 != 92)
        {
          if (v12 == 36 && (unint64_t)v5 < v11)
          {
            v9 = 0;
            if (v5[1] == 123)
            {
              ++v5;
              ++v10;
            }
          }
          else
          {
            v9 = 0;
          }
          goto LABEL_39;
        }
        v23 = 0;
        if ((unint64_t)v5 < v11)
        {
          v17 = v5[1] - 76;
          v18 = v17 > 0x29;
          v19 = (1 << v17) & 0x20100000201;
          if (!v18 && v19 != 0)
          {
            v9 = 0;
            ++v5;
            goto LABEL_39;
          }
        }
        v24 = v5 + 1;
        v21 = _pcre2_check_escape_8(&v24, a3, (int *)&v23, (int *)&v23 + 1, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), 0, 0);
        v5 = v24 - 1;
        result = HIDWORD(v23);
        if (HIDWORD(v23))
          goto LABEL_41;
        v9 = 0;
        if (!v21 || v21 == 25)
          goto LABEL_39;
        if (v21 != 26)
        {
          result = 4294967239;
          goto LABEL_41;
        }
        goto LABEL_9;
      }
      if (!v10)
        goto LABEL_42;
      v9 = 0;
      --v10;
LABEL_39:
      v24 = ++v5;
      if ((unint64_t)v5 >= a3)
        goto LABEL_40;
    }
    if (v12 == 92 && (unint64_t)v5 < v11)
    {
      v14 = v5[1];
      v15 = v14 == 69;
      v9 = v14 != 69;
      if (v15)
        ++v5;
      goto LABEL_39;
    }
LABEL_9:
    v9 = 1;
    goto LABEL_39;
  }
LABEL_40:
  result = 4294967238;
LABEL_41:
  *a2 = v5;
  return result;
}

uint64_t _pcre2_script_run_8(unsigned __int8 *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned __int8 *v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  _BYTE v48[50];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a1 >= a2)
    return 1;
  v5 = a1 + 1;
  v4 = *a1;
  if (a3 && v4 >= 0xC0)
  {
    if ((v4 & 0x20) != 0)
    {
      v6 = *v5 & 0x3F;
      if ((v4 & 0x10) != 0)
      {
        if ((v4 & 8) != 0)
        {
          v7 = a1[2] & 0x3F;
          v8 = a1[3] & 0x3F;
          v9 = a1[4] & 0x3F;
          if ((v4 & 4) != 0)
          {
            v4 = ((v4 & 1) << 30) | (v6 << 24) | (v7 << 18) | (v8 << 12) | (v9 << 6) | a1[5] & 0x3F;
            v5 = a1 + 6;
          }
          else
          {
            v4 = ((v4 & 3) << 24) | (v6 << 18) | (v7 << 12) | (v8 << 6) | v9;
            v5 = a1 + 5;
          }
        }
        else
        {
          v4 = ((v4 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6) | a1[3] & 0x3F;
          v5 = a1 + 4;
        }
      }
      else
      {
        v4 = ((v4 & 0xF) << 12) | (v6 << 6) | a1[2] & 0x3F;
        v5 = a1 + 3;
      }
    }
    else
    {
      v5 = a1 + 2;
      v4 = a1[1] & 0x3F | ((v4 & 0x1F) << 6);
    }
  }
  result = 1;
  if ((unint64_t)v5 < a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 4294867297;
    while (1)
    {
      v14 = v5;
      v15 = _pcre2_ucd_stage2_8[v4 & 0x7F | (_pcre2_ucd_stage1_8[v4 >> 7] << 7)];
      result = *(unsigned __int16 *)&_pcre2_ucd_records_8[12
                                                        * _pcre2_ucd_stage2_8[v4 & 0x7F | (_pcre2_ucd_stage1_8[v4 >> 7] << 7)]
                                                        + 8];
      if ((_DWORD)result == 10)
      {
        v17 = v13;
      }
      else
      {
        if ((_DWORD)result == 28)
        {
          v17 = v13;
          v18 = v11;
          goto LABEL_38;
        }
        if (!*(_WORD *)&_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v4 & 0x7F | (_pcre2_ucd_stage1_8[v4 >> 7] << 7)]
                                            + 8])
          return result;
        v16 = (__int16)result;
        v17 = (__int16)result;
        if ((int)v17 < 1)
        {
          v18 = (char *)&_pcre2_ucd_script_sets_8 - v16;
          v17 = 4294867302;
          switch(v13)
          {
            case 0xFFFE7961:
              goto LABEL_23;
            case 0xFFFE7962:
              result = 0;
              while (2)
              {
                v24 = *v18;
                if (v24 > 0x1A)
                {
                  v25 = result | 2;
                  if (v24 == 30)
                    LODWORD(result) = result | 4;
                  if (v24 == 27)
                    result = v25;
                  else
                    result = result;
                  goto LABEL_58;
                }
                if (v24 == 4)
                {
                  result = result | 1;
                  goto LABEL_58;
                }
                if (v24 == 24)
                {
                  result = result | 8;
LABEL_58:
                  ++v18;
                  continue;
                }
                break;
              }
              if (*v18)
                goto LABEL_58;
              switch((_DWORD)result)
              {
                case 1:
LABEL_128:
                  v17 = 4294867300;
                  break;
                case 6:
LABEL_122:
                  v17 = 4294867299;
                  break;
                case 0:
                  return result;
                default:
LABEL_121:
                  v17 = 4294867298;
                  break;
              }
              break;
            case 0xFFFE7963:
              while (2)
              {
                result = *v18;
                if (!*v18)
                  return result;
                if ((_DWORD)result != 27 && (_DWORD)result != 30)
                {
                  ++v18;
                  continue;
                }
                break;
              }
              goto LABEL_122;
            case 0xFFFE7964:
              while (2)
              {
                result = *v18;
                if (!*v18)
                  return result;
                if ((_DWORD)result != 4)
                {
                  ++v18;
                  continue;
                }
                break;
              }
              goto LABEL_128;
            case 0xFFFE7965:
              while (2)
              {
                result = *v18;
                if (!*v18)
                  return result;
                if ((_DWORD)result != 24)
                {
                  ++v18;
                  continue;
                }
                break;
              }
LABEL_96:
              v17 = 4294867301;
              break;
            case 0xFFFE7966:
              v39 = *v11;
              if (!*v11)
                return 0;
              v40 = v3;
              result = 0;
              v42 = (char *)&_pcre2_ucd_script_sets_8 - v16 + 1;
              v41 = *((unsigned __int8 *)&_pcre2_ucd_script_sets_8 - v16);
              v43 = v11;
              do
              {
                v44 = (unsigned __int8 *)v42;
                v45 = v41;
                if (v41)
                {
                  while (v39 != v45)
                  {
                    v46 = *v44++;
                    v45 = v46;
                    if (!v46)
                      goto LABEL_114;
                  }
                  v48[(int)result] = v39;
                  result = (result + 1);
                }
LABEL_114:
                v47 = *++v43;
                v39 = v47;
              }
              while (v47);
              if ((_DWORD)result == 1)
              {
                v17 = v48[0];
                v18 = v11;
                v3 = v40;
              }
              else
              {
                if (!(_DWORD)result)
                  return result;
                v3 = v40;
                v18 = v48;
                v48[(int)result] = 0;
                v17 = 4294867302;
              }
              goto LABEL_23;
            default:
              do
              {
                v27 = *v18++;
                v26 = v27;
                if (v27)
                  v28 = (_DWORD)v13 == v26;
                else
                  v28 = 1;
              }
              while (!v28);
              v17 = v13;
              v18 = v11;
              if (!v26)
                return 0;
              goto LABEL_23;
          }
        }
        else
        {
          switch(v13)
          {
            case 0xFFFE7961:
            case 0xFFFE7962:
              switch((int)v17)
              {
                case 23:
                  goto LABEL_121;
                case 24:
                  goto LABEL_96;
                case 25:
                case 26:
                case 28:
                case 29:
                  break;
                case 27:
                case 30:
                  goto LABEL_122;
                default:
                  if ((_DWORD)v17 == 4)
                    goto LABEL_128;
                  break;
              }
              v18 = v11;
              if ((_DWORD)v13 == -99998)
                return 0;
              goto LABEL_23;
            case 0xFFFE7963:
              v33 = v16 > 0x1E || ((1 << v16) & 0x48800000) == 0;
              v17 = 4294867299;
              v18 = v11;
              if (!v33)
                goto LABEL_23;
              return 0;
            case 0xFFFE7964:
              if ((_DWORD)v17 != 23 && (unsigned __int16)v17 != 4)
                return 0;
              goto LABEL_128;
            case 0xFFFE7965:
              if ((unsigned __int16)(v16 - 25) >= 0xFFFEu)
                goto LABEL_96;
              return 0;
            case 0xFFFE7966:
              v35 = v11;
              do
              {
                v37 = *v35++;
                v36 = v37;
                if (v37)
                  v38 = v36 == (_DWORD)v17;
                else
                  v38 = 1;
              }
              while (!v38);
              if (!v36)
                return 0;
              switch((int)v17)
              {
                case 23:
                  goto LABEL_121;
                case 24:
                  goto LABEL_96;
                case 25:
                case 26:
                case 28:
                case 29:
                  goto LABEL_22;
                case 27:
                case 30:
                  goto LABEL_122;
                default:
                  if ((_DWORD)v17 == 4)
                    goto LABEL_128;
                  break;
              }
              break;
            default:
              v18 = v11;
              v28 = (_DWORD)v13 == (_DWORD)v17;
              v17 = v13;
              if (!v28)
                return 0;
              goto LABEL_23;
          }
        }
      }
LABEL_22:
      v18 = v11;
LABEL_23:
      if (_pcre2_ucd_records_8[12 * v15 + 1] == 13)
      {
        if (v4 <= 0x39)
        {
          v19 = 1;
          if (!v12)
            goto LABEL_37;
        }
        else
        {
          v19 = 65;
          v20 = 1;
          do
          {
            v21 = v19 + v20;
            if (v19 + v20 < 0 != __OFADD__(v19, v20))
              ++v21;
            v22 = v21 >> 1;
            if (v4 <= _pcre2_ucd_digit_sets_8[v22])
              v19 = v22;
            else
              v20 = v22;
          }
          while (v19 > v20 + 1);
          if (!v12)
          {
LABEL_37:
            v12 = v19;
            goto LABEL_38;
          }
        }
        if (v19 != v12)
          return 0;
      }
LABEL_38:
      if ((unint64_t)v14 >= a2)
        return 1;
      v5 = v14 + 1;
      v4 = *v14;
      v13 = v17;
      v11 = v18;
      if (a3)
      {
        v13 = v17;
        v11 = v18;
        if (v4 >= 0xC0)
        {
          if ((v4 & 0x20) != 0)
          {
            v23 = *v5 & 0x3F;
            if ((v4 & 0x10) != 0)
            {
              if ((v4 & 8) != 0)
              {
                v30 = v14[2] & 0x3F;
                v31 = v14[3] & 0x3F;
                v32 = v14[4] & 0x3F;
                if ((v4 & 4) != 0)
                {
                  v4 = ((v4 & 1) << 30) | (v23 << 24) | (v30 << 18) | (v31 << 12) | (v32 << 6) | v14[5] & 0x3F;
                  v5 = v14 + 6;
                }
                else
                {
                  v4 = ((v4 & 3) << 24) | (v23 << 18) | (v30 << 12) | (v31 << 6) | v32;
                  v5 = v14 + 5;
                }
              }
              else
              {
                v4 = ((v4 & 7) << 18) | (v23 << 12) | ((v14[2] & 0x3F) << 6) | v14[3] & 0x3F;
                v5 = v14 + 4;
              }
            }
            else
            {
              v4 = ((v4 & 0xF) << 12) | (v23 << 6) | v14[2] & 0x3F;
              v5 = v14 + 3;
            }
            v13 = v17;
            v11 = v18;
          }
          else
          {
            v5 = v14 + 2;
            v13 = v17;
            v11 = v18;
            v4 = v14[1] & 0x3F | ((v4 & 0x1F) << 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t pcre2_match_8()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v17;
  _BOOL4 v19;
  __int32 v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t matched;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  unsigned __int8 *v30;
  char *v31;
  char v32;
  int v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  __int128 *v51;
  uint64_t v52;
  __int32 v53;
  unsigned __int32 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  int v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int32 v70;
  __int32 v71;
  unsigned __int8 *v72;
  unsigned __int32 v73;
  int v74;
  uint32x2_t *v75;
  __int32 v76;
  _BOOL4 v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  int is_newline_8;
  char v82;
  unsigned __int8 *v83;
  int v84;
  size_t v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  char v88;
  unint64_t v89;
  _BOOL4 v91;
  char v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  void *v97;
  unint64_t v98;
  _BOOL4 v99;
  unsigned __int8 *v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  _BOOL4 v105;
  BOOL v106;
  unint64_t v107;
  unsigned __int8 *v108;
  int v109;
  unint64_t v110;
  unsigned __int8 *v111;
  BOOL v112;
  int v113;
  size_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  BOOL v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  uint64_t v126;
  void *v127;
  uint64_t valid;
  _QWORD *v129;
  int v130;
  int v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned __int32 v134;
  uint64_t v135;
  _BOOL4 v136;
  int v137;
  _BOOL4 v138;
  int __c;
  unsigned int v140;
  int v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  char v145;
  int v146;
  char *v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  int v153;
  int v154;
  __int32 v155;
  uint64_t v156;
  __int32 v157;
  unint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _OWORD *v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[2];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _OWORD v184[1280];
  uint64_t v185;

  v0 = MEMORY[0x1E0C80A78]();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v1;
  v12 = (uint32x2_t *)v0;
  v185 = *MEMORY[0x1E0C80C00];
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  v179 = 0u;
  v177 = 0u;
  memset(v178, 0, sizeof(v178));
  v175 = 0u;
  v176 = 0u;
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v163 = 0;
  v164 = 0u;
  v160 = 0u;
  v161 = 0u;
  v159 = 0u;
  memset(v184, 0, 512);
  v162 = v184;
  if (v2 == -1)
  {
    v13 = _pcre2_strlen_8(v1);
    v14 = 1;
  }
  else
  {
    v13 = v2;
    v14 = 0;
  }
  if ((v8 & 0x1FFF9FC0) != 0)
    return 4294967262;
  v15 = 4294967245;
  if (!v12 || !v11 || !v6)
    return v15;
  if (v13 < (unint64_t)v10)
    return 4294967263;
  if (v12[10].i32[0] != 1346589253)
    return 4294967265;
  v17 = v12[12].u32[0];
  if ((v17 & 7) != 1)
    return 4294967264;
  v19 = (v8 & 0xBFFFBFC0) == 0 && *(_QWORD *)&v12[4] != 0;
  v20 = v12[11].i32[0];
  v21 = (v8 >> 4) & 1;
  if ((v8 & 0x20) != 0)
    v21 = 2;
  LOWORD(v168) = v21;
  if (v21)
  {
    if (((v20 | v8) & 0x20000000) != 0)
      return 4294967262;
  }
  if (v4 && *(_QWORD *)(v4 + 72) != -1 && (v20 & 0x800000) == 0)
    return 4294967240;
  v142 = v10;
  v152 = &v11[v10];
  v22 = (v17 >> 14) & 0xC;
  v153 = v20 & 0x80000;
  v135 = v14;
  v157 = v20;
  if ((*(_BYTE *)(v6 + 73) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 16));
    v20 = v157;
    *(_BYTE *)(v6 + 73) &= ~1u;
  }
  v140 = v22 | v8;
  *(_QWORD *)(v6 + 64) = 0;
  v143 = (uint64_t *)(v6 + 64);
  *(_QWORD *)(v6 + 32) = 0;
  if (!v19)
  {
    v23 = 0;
    v24 = (unint64_t)&v11[v10];
    goto LABEL_42;
  }
  if (v153 && !(v8 & 0x40000000 | v20 & 0x4000000))
  {
    v27 = v10;
    if (v13 > v10 && (*v152 & 0xC0) == 0x80)
      goto LABEL_67;
    v33 = v12[15].u16[2];
    if (v12[15].i16[2])
    {
      v34 = (_QWORD *)(v6 + 64);
      if (v10 < 1)
      {
        v24 = (unint64_t)&v11[v10];
      }
      else
      {
        v35 = &v11[v10];
LABEL_60:
        v36 = (unint64_t)(v35 - 1);
        while (1)
        {
          v24 = v36;
          if (v36 <= (unint64_t)v11)
            break;
          --v36;
          if ((*(_BYTE *)v24 & 0xC0) != 0x80)
          {
            v35 = (char *)v24;
            if (--v33)
              goto LABEL_60;
            break;
          }
        }
      }
    }
    else
    {
      v24 = (unint64_t)&v11[v10];
      v34 = (_QWORD *)(v6 + 64);
    }
    valid = _pcre2_valid_utf_8((unsigned __int8 *)v24, v13 - (v24 - (_QWORD)v11), v34);
    *(_DWORD *)(v6 + 76) = valid;
    if ((_DWORD)valid)
    {
      v129 = v34;
      v15 = valid;
      *v129 += v24 - (_QWORD)v11;
      return v15;
    }
    v23 = 1;
  }
  else
  {
    v23 = 0;
    v24 = (unint64_t)&v11[v10];
  }
  matched = pcre2_jit_match_8((uint64_t)v12, (uint64_t)v11, v13, v10, v140, v6, v4);
  v20 = v157;
  if ((_DWORD)matched == -45)
  {
LABEL_42:
    LODWORD(v15) = 0;
    v147 = &v11[v13];
    *(_QWORD *)&v170 = v11;
    if (!v153 || v23)
      goto LABEL_92;
    if ((v8 & 0x40000000) != 0 && (v20 & 0x4000000) == 0)
    {
      LODWORD(v15) = 0;
      goto LABEL_92;
    }
    v27 = v10;
    if ((v20 & 0x4000000) != 0)
    {
      v28 = (_QWORD *)(v6 + 64);
      if (v24 < (unint64_t)v147)
      {
        v29 = *(_BYTE *)v24 & 0xC0;
        if (v29 == 128)
        {
          v30 = &v11[v13];
          v31 = &v11[v13 + ~v24];
          while (v31)
          {
            v32 = *(_BYTE *)++v24;
            --v31;
            if ((v32 & 0xC0) != 0x80)
              goto LABEL_53;
          }
          *(_QWORD *)&v170 = &v11[v13];
          v24 = (unint64_t)&v11[v13];
LABEL_80:
          v15 = _pcre2_valid_utf_8(v30, &v11[v13] - v30, v28);
          *(_DWORD *)(v6 + 76) = v15;
          if ((_DWORD)v15)
          {
            v40 = (uint64_t *)(v6 + 64);
            while (1)
            {
              v41 = v170;
              v42 = *v40;
              v43 = v170 - (_QWORD)v11 + *v40;
              *v40 = v43;
              if ((v157 & 0x4000000) == 0 || (int)v15 > 0)
                return v15;
              v44 = &v11[v43];
              if ((unint64_t)&v11[v43] >= v24)
                break;
              v45 = (char *)(v42 + v41 + 1);
              while ((unint64_t)v45 < v24)
              {
                v46 = *v45++;
                if ((v46 & 0xC0) != 0x80)
                {
                  v47 = &v11[v43];
                  v48 = (unsigned __int8 *)(v45 - 1);
                  goto LABEL_90;
                }
              }
              v47 = &v11[v43];
              v48 = (unsigned __int8 *)v24;
LABEL_90:
              *(_QWORD *)&v170 = v48;
              v49 = _pcre2_valid_utf_8(v48, &v11[v13] - v48, v143);
              v40 = (uint64_t *)(v6 + 64);
              v15 = v49;
              *(_DWORD *)(v6 + 76) = v49;
              if (!(_DWORD)v49)
              {
                v44 = v47;
                v50 = (unint64_t)&v11[v13];
                goto LABEL_93;
              }
            }
            LODWORD(v15) = 2;
            v50 = (unint64_t)&v11[v13];
            goto LABEL_93;
          }
LABEL_92:
          v50 = (unint64_t)&v11[v13];
          v44 = &v11[v13];
LABEL_93:
          v51 = &_pcre2_default_match_context_8;
          if (v4)
            v52 = v4;
          else
            v52 = (uint64_t)v12;
          if (v4)
            v51 = (__int128 *)v4;
          v159 = *(_OWORD *)v52;
          *(_QWORD *)&v160 = *(_QWORD *)(v52 + 16);
          v53 = v12[11].i32[0];
          v54 = v12[12].u32[0];
          v55 = *((_QWORD *)v51 + 9);
          if (v55 == -1)
            v56 = (char *)v50;
          else
            v56 = &v11[v55];
          v150 = (unint64_t)v56;
          LODWORD(v178[0]) = 2;
          *(_QWORD *)&v179 = v11;
          *((_QWORD *)&v179 + 1) = v44 - v11;
          DWORD2(v183) = 0;
          v57 = *((_QWORD *)v51 + 5);
          *(_QWORD *)&v177 = *((_QWORD *)v51 + 6);
          *((_QWORD *)&v177 + 1) = v57;
          *((_QWORD *)&v176 + 1) = v178;
          *(_QWORD *)&v167 = v10;
          *((_QWORD *)&v170 + 1) = v44;
          v134 = v54;
          LODWORD(v57) = (v12[15].u16[2] | v54 & 0x2000) != 0;
          LODWORD(v165) = (v54 >> 12) & 1;
          DWORD1(v165) = v57;
          *((_QWORD *)&v172 + 1) = 0;
          *(_QWORD *)&v173 = 0;
          WORD2(v168) = v12[16].i16[3];
          WORD3(v168) = v12[16].i16[2];
          *((_QWORD *)&v168 + 1) = v12 + 17;
          *(_QWORD *)&v169 = (char *)v12 + WORD3(v168) * (unint64_t)WORD2(v168) + 136;
          *((_QWORD *)&v169 + 1) = v11;
          WORD1(v168) = v12[15].i16[0];
          v155 = v53;
          LODWORD(v175) = v53;
          *((_QWORD *)&v175 + 1) = 0;
          switch(v12[15].i16[1])
          {
            case 1:
              LODWORD(v176) = 1;
              v58 = 13;
              goto LABEL_105;
            case 2:
              LODWORD(v176) = 1;
              v58 = 10;
LABEL_105:
              BYTE4(v176) = v58;
              goto LABEL_111;
            case 3:
              LODWORD(v176) = 2;
              WORD2(v176) = 2573;
              goto LABEL_111;
            case 4:
              v59 = 1;
              goto LABEL_109;
            case 5:
              v59 = 2;
LABEL_109:
              HIDWORD(v175) = v59;
              goto LABEL_111;
            case 6:
              LODWORD(v176) = 1;
              BYTE4(v176) = 0;
LABEL_111:
              v60 = v12[16].u16[0];
              v61 = 16 * v60;
              v62 = 16 * v60 + 128;
              LODWORD(v63) = *((_DWORD *)v51 + 20);
              v64 = v12[12].u32[1];
              if (v63 >= v64)
                v63 = v64;
              else
                v63 = v63;
              v163 = v63;
              *(uint32x2_t *)&v164 = vmin_u32(*(uint32x2_t *)((char *)v51 + 84), v12[13]);
              if (v60 > 0x78)
              {
                *((_QWORD *)&v160 + 1) = 10 * v62;
                if (v63 < (10 * v62) >> 10)
                {
                  if (v62 > v63 << 10)
                    return 4294967233;
                  *((_QWORD *)&v160 + 1) = (v63 << 10) / v62 * v62;
                }
                v65 = (unsigned __int8 *)v44;
                v148 = 16 * v60 + 128;
                v66 = ((uint64_t (*)(void))v159)();
                *(_QWORD *)&v161 = v66;
                if (!v66)
                  return 4294967248;
                v67 = *((_QWORD *)&v160 + 1);
                v61 = 16 * v12[16].u16[0];
              }
              else
              {
                v65 = (unsigned __int8 *)v44;
                v66 = (uint64_t)v162;
                v148 = 16 * v60 + 128;
                v67 = 0x5000 / v62 * v62;
                *((_QWORD *)&v160 + 1) = v67;
                *(_QWORD *)&v161 = v162;
              }
              *((_QWORD *)&v161 + 1) = v66 + v67;
              memset((void *)(v66 + 128), 255, v61);
              v68 = mapped_global_table;
              if (v12[3])
                v68 = (uint64_t)v12[3];
              v69 = v68 + 256;
              *((_QWORD *)&v165 + 1) = v68;
              *(_QWORD *)&v166 = v68 + 256;
              *((_QWORD *)&v166 + 1) = v68 + 832;
              v70 = v12[12].i32[0];
              v144 = v70 & 0x10;
              v145 = v70;
              if ((v70 & 0x10) != 0)
              {
                v71 = v12[14].i32[0];
                v72 = v65;
                v73 = v157;
                __c = v71;
                if ((v70 & 0x20) != 0)
                {
                  v151 = 0;
                  v141 = *(unsigned __int8 *)(v69 + v71);
                  if (v71 >= 0x80u && (v157 & 0x20000) != 0 && !v153)
                  {
                    v151 = 0;
                    v141 = (*(_DWORD *)&_pcre2_ucd_records_8[12
                                                                            * _pcre2_ucd_stage2_8[v71 & 0x7F | (_pcre2_ucd_stage1_8[v71 >> 7] << 7)]
                                                                            + 4]
                                           + v71);
                  }
                }
                else
                {
                  v151 = 0;
                  v141 = v12[14].i32[0];
                }
              }
              else
              {
                __c = 0;
                v141 = 0;
                v74 = (v134 >> 9) & 1;
                if ((v70 & 0x40) == 0)
                  v74 = 1;
                if (v74)
                  v75 = 0;
                else
                  v75 = v12 + 5;
                v151 = (uint64_t)v75;
                v72 = v65;
                v73 = v157;
              }
              v133 = v152 - 1;
              v146 = (v73 >> 19) & 1;
              v154 = v155 | v8;
              if ((v70 & 0x80) != 0)
              {
                v76 = v12[14].i32[1];
                if ((v70 & 0x100) != 0)
                {
                  LOBYTE(v69) = *(_BYTE *)(v69 + v12[14].i32[1]);
                  if (v12[14].i32[1] >= 0x80u && (v73 & 0x20000) != 0 && !v153)
                    LODWORD(v69) = *(_DWORD *)&_pcre2_ucd_records_8[12
                                                                  * _pcre2_ucd_stage2_8[v12[14].i32[1] & 0x7F | (_pcre2_ucd_stage1_8[v12[14].i32[1] >> 7] << 7)]
                                                                  + 4]
                                 + v12[14].i32[1];
                }
                else
                {
                  LODWORD(v69) = v12[14].i32[1];
                }
              }
              else
              {
                LOBYTE(v76) = 0;
                LOBYTE(v69) = 0;
              }
              v78 = (v70 & 0x10) != 0 || v151 != 0;
              v136 = v78;
              v132 = v144 >> 4;
              v130 = v76;
              v131 = v69;
              break;
            default:
              return 4294967252;
          }
          while (1)
          {
LABEL_148:
            v137 = 0;
            v138 = 0;
            v156 = 0;
            v158 = 0;
            HIDWORD(v164) = 0;
            v149 = v15 | v140;
            v15 = v151;
            while (1)
            {
              if ((v12[11].i8[2] & 1) != 0)
                goto LABEL_260;
              if ((v155 & 0x100) == 0)
              {
                v79 = v72;
                goto LABEL_176;
              }
              if (v153)
              {
                v79 = (unsigned __int8 *)v24;
                if (v24 >= (unint64_t)v72)
                  goto LABEL_176;
LABEL_154:
                if (HIDWORD(v175))
                {
                  if ((unint64_t)v79 < *((_QWORD *)&v170 + 1))
                  {
                    v80 = v72;
                    is_newline_8 = _pcre2_is_newline_8(v79, SHIDWORD(v175), *((uint64_t *)&v170 + 1), (int *)&v176, v146);
                    v72 = v80;
                    if (is_newline_8)
                      goto LABEL_176;
                  }
                }
                else if ((unint64_t)v79 <= *((_QWORD *)&v170 + 1) - (unint64_t)v176
                       && *v79 == BYTE4(v176)
                       && ((_DWORD)v176 == 1 || v79[1] == BYTE5(v176)))
                {
                  goto LABEL_176;
                }
                ++v79;
                while (v79 < v72)
                {
                  v82 = *v79++;
                  if ((v82 & 0xC0) != 0x80)
                  {
                    --v79;
                    goto LABEL_154;
                  }
                }
              }
              else
              {
                v79 = (unsigned __int8 *)v24;
                if (v24 < (unint64_t)v72)
                {
                  do
                  {
                    if (HIDWORD(v175))
                    {
                      if ((unint64_t)v79 < *((_QWORD *)&v170 + 1))
                      {
                        v83 = v72;
                        v84 = _pcre2_is_newline_8(v79, SHIDWORD(v175), *((uint64_t *)&v170 + 1), (int *)&v176, v146);
                        v72 = v83;
                        if (v84)
                          break;
                      }
                    }
                    else if ((unint64_t)v79 <= *((_QWORD *)&v170 + 1) - (unint64_t)v176
                           && *v79 == BYTE4(v176)
                           && ((_DWORD)v176 == 1 || v79[1] == BYTE5(v176)))
                    {
                      break;
                    }
                    ++v79;
                  }
                  while (v79 < v72);
                }
              }
LABEL_176:
              if (v154 < 0)
              {
                if (!v136)
                  goto LABEL_238;
                if (v24 >= (unint64_t)v79)
                  goto LABEL_329;
                v89 = *(unsigned __int8 *)v24;
                if ((_DWORD)v144)
                {
                  v91 = (_DWORD)v89 != __c && (_DWORD)v89 != v141;
                  if (!v91 || v15 == 0)
                  {
                    if (v91)
                      goto LABEL_329;
                    goto LABEL_238;
                  }
                }
                else if (!v15)
                {
                  goto LABEL_330;
                }
                if (((*(unsigned __int8 *)(v15 + (v89 >> 3)) >> (v89 & 7)) & 1) == 0)
                {
LABEL_329:
                  v15 = 0;
                  goto LABEL_330;
                }
LABEL_238:
                v50 = (unint64_t)&v11[v13];
                v95 = (unsigned __int16)v168;
                v72 = (unsigned __int8 *)*((_QWORD *)&v170 + 1);
                v87 = (unsigned __int8 *)v24;
                goto LABEL_239;
              }
              if (!(_DWORD)v144)
              {
                if ((v134 & 0x200) != 0)
                {
                  if (v24 > *((_QWORD *)&v169 + 1) + v142)
                  {
                    if (v153)
                    {
                      if (v24 >= (unint64_t)v79)
                        goto LABEL_313;
LABEL_203:
                      if (HIDWORD(v175))
                      {
                        if (v24 > *((_QWORD *)&v169 + 1)
                          && _pcre2_was_newline_8((_BYTE *)v24, SHIDWORD(v175), *((unint64_t *)&v169 + 1), (int *)&v176, v146))
                        {
                          goto LABEL_313;
                        }
LABEL_211:
                        ++v24;
                        while (v24 < (unint64_t)v79)
                        {
                          v93 = *(_BYTE *)v24++;
                          if ((v93 & 0xC0) != 0x80)
                          {
                            --v24;
                            goto LABEL_203;
                          }
                        }
                      }
                      else if (v24 < *((_QWORD *)&v169 + 1) + (unint64_t)v176
                             || *(unsigned __int8 *)(v24 - v176) != BYTE4(v176)
                             || (_DWORD)v176 != 1 && *(unsigned __int8 *)(v24 - v176 + 1) != BYTE5(v176))
                      {
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      while (v24 < (unint64_t)v79)
                      {
                        if (HIDWORD(v175))
                        {
                          if (v24 > *((_QWORD *)&v169 + 1)
                            && _pcre2_was_newline_8((_BYTE *)v24, SHIDWORD(v175), *((unint64_t *)&v169 + 1), (int *)&v176, v146))
                          {
                            break;
                          }
                        }
                        else if (v24 >= *((_QWORD *)&v169 + 1) + (unint64_t)v176
                               && *(unsigned __int8 *)(v24 - v176) == BYTE4(v176)
                               && ((_DWORD)v176 == 1 || *(unsigned __int8 *)(v24 - v176 + 1) == BYTE5(v176)))
                        {
                          break;
                        }
                        ++v24;
                      }
                    }
LABEL_313:
                    if (*(_BYTE *)(v24 - 1) == 13)
                    {
                      v118 = (HIDWORD(v175) - 1) > 1 || v24 >= (unint64_t)v79;
                      if (!v118 && *(_BYTE *)v24 == 10)
                        ++v24;
                    }
                  }
                  goto LABEL_238;
                }
                if (!v15)
                  goto LABEL_238;
                do
                {
                  v87 = (unsigned __int8 *)v24;
                  if (v24 >= (unint64_t)v79)
                    break;
                  ++v24;
                }
                while (((*(unsigned __int8 *)(v15 + ((unint64_t)*v87 >> 3)) >> (*v87 & 7)) & 1) == 0);
                v95 = (unsigned __int16)v168;
                v72 = (unsigned __int8 *)*((_QWORD *)&v170 + 1);
                if ((_WORD)v168)
                  v96 = 0;
                else
                  v96 = (unint64_t)v87 >= *((_QWORD *)&v170 + 1);
                if (v96)
                {
LABEL_328:
                  v15 = 0;
                  v24 = (unint64_t)v87;
LABEL_330:
                  v72 = v79;
                  goto LABEL_331;
                }
                v50 = (unint64_t)&v11[v13];
LABEL_239:
                v88 = v145;
                goto LABEL_258;
              }
              v85 = (size_t)&v79[-v24];
              if (__c != v141)
              {
                if (v137)
                {
                  v94 = 0;
                  goto LABEL_227;
                }
                v97 = memchr((void *)v24, __c, (size_t)&v79[-v24]);
                v94 = (unint64_t)v97;
                if (v97)
                {
                  v137 = 0;
                  v85 = (size_t)v97 - v24;
                }
                else
                {
LABEL_227:
                  v137 = 1;
                }
                if (v138)
                {
                  v98 = 0;
                  v99 = 1;
                }
                else
                {
                  v98 = (unint64_t)memchr((void *)v24, v141, v85);
                  v99 = (v94 | v98) == 0;
                }
                v88 = v145;
                v138 = v99;
                if (v94)
                {
                  if (v94 < v98 || v98 == 0)
                    v87 = (unsigned __int8 *)v94;
                  else
                    v87 = (unsigned __int8 *)v98;
                }
                else if (v98)
                {
                  v87 = (unsigned __int8 *)v98;
                }
                else
                {
                  v87 = v79;
                }
                goto LABEL_255;
              }
              v86 = (unsigned __int8 *)memchr((void *)v24, __c, (size_t)&v79[-v24]);
              v87 = v86 ? v86 : v79;
              v88 = v145;
LABEL_255:
              v95 = (unsigned __int16)v168;
              v72 = (unsigned __int8 *)*((_QWORD *)&v170 + 1);
              if (!(_WORD)v168 && (unint64_t)v87 >= *((_QWORD *)&v170 + 1))
                goto LABEL_328;
              v50 = (unint64_t)&v11[v13];
LABEL_258:
              if (v95)
                goto LABEL_259;
              v110 = v72 - v87;
              if (v72 - v87 < v12[15].u16[3])
                goto LABEL_327;
              if ((v88 & 0x80) == 0
                || (v111 = &v87[v132], &v87[v132] <= v133)
                || (v154 >= 0 ? (v112 = v110 >= 0x4C4B40) : (v112 = 1),
                    v112 ? (v113 = 0) : (v113 = 1),
                    v110 >> 3 >= 0x271 && !v113))
              {
LABEL_259:
                v24 = (unint64_t)v87;
                goto LABEL_260;
              }
              v114 = v72 - v111;
              v115 = v72;
              v116 = (unsigned __int8 *)memchr(&v87[v132], v130, v72 - v111);
              if (v130 == v131)
              {
                if (!v116)
                  v116 = v115;
                v72 = v115;
              }
              else
              {
                v72 = v115;
                if (!v116)
                {
                  v116 = (unsigned __int8 *)memchr(v111, v131, v114);
                  v72 = v115;
                  if (!v116)
                    v116 = v115;
                }
              }
              if (v116 >= v72)
                break;
              v24 = (unint64_t)v87;
              v133 = v116;
              v50 = (unint64_t)&v11[v13];
LABEL_260:
              if (v24 > v150)
                goto LABEL_326;
              v101 = v72;
              *(_QWORD *)&v180 = v24 - (_QWORD)v11;
              DWORD2(v183) |= 1u;
              *((_QWORD *)&v171 + 1) = v24;
              *(_QWORD *)&v172 = v24;
              DWORD2(v164) = 0;
              *((_QWORD *)&v167 + 1) = 0;
              HIDWORD(v174) = v149;
              DWORD1(v175) = 0;
              v102 = match(v24, (unsigned __int8 *)v169, v6 + 80, *(unsigned __int16 *)(v6 + 74), v12[16].u16[0], v148, (uint64_t)&v159);
              v103 = HIDWORD(v164) != 0;
              v104 = v156;
              v105 = v156 == 0;
              v106 = !v103 || !v105;
              if (v103 && v105)
                v104 = *((_QWORD *)&v171 + 1);
              v107 = v158;
              if (!v106)
                v107 = v24;
              v156 = v104;
              v158 = v107;
              v15 = 0;
              v72 = v101;
              switch(v102)
              {
                case 0xFFFFFC1B:
                  goto LABEL_332;
                case 0xFFFFFC1C:
                case 0xFFFFFC1F:
                  goto LABEL_269;
                case 0xFFFFFC1D:
                  v87 = (unsigned __int8 *)v174;
                  if ((unint64_t)v174 > v24)
                    goto LABEL_276;
                  goto LABEL_269;
                case 0xFFFFFC1E:
                  DWORD2(v175) = DWORD1(v175);
                  v87 = (unsigned __int8 *)v24;
                  goto LABEL_276;
                default:
                  v15 = v102;
                  v72 = v101;
                  if ((_DWORD)v102)
                    goto LABEL_332;
LABEL_269:
                  DWORD2(v175) = 0;
                  v87 = (unsigned __int8 *)(v24 + 1);
                  if (!v153 || v87 >= v72)
                    goto LABEL_276;
                  v108 = &v72[~v24];
                  break;
              }
              while ((*v87 & 0xC0) == 0x80)
              {
                ++v87;
                if (!--v108)
                {
                  v87 = v72;
                  break;
                }
              }
LABEL_276:
              v15 = v151;
              if ((v155 & 0x100) != 0)
              {
                if (HIDWORD(v175))
                {
                  if (v24 < *((_QWORD *)&v170 + 1))
                  {
                    v109 = _pcre2_is_newline_8((unsigned __int8 *)v24, SHIDWORD(v175), *((uint64_t *)&v170 + 1), (int *)&v176, v146);
                    v72 = v101;
                    if (v109)
                      goto LABEL_326;
                  }
                }
                else if (v24 <= *((_QWORD *)&v170 + 1) - (unint64_t)v176
                       && *(unsigned __int8 *)v24 == BYTE4(v176)
                       && ((_DWORD)v176 == 1 || *(unsigned __int8 *)(v24 + 1) == BYTE5(v176)))
                {
LABEL_326:
                  v15 = 0;
                  goto LABEL_332;
                }
              }
              if (v154 < 0 || v87 > v72)
              {
LABEL_327:
                v15 = 0;
                v24 = (unint64_t)v87;
                goto LABEL_332;
              }
              if (v87 > v152
                && *(v87 - 1) == 13
                && v87 < v72
                && *v87 == 10
                && (v12[12].i8[1] & 8) == 0
                && ((HIDWORD(v175) - 1) < 2 || (_DWORD)v176 == 2))
              {
                ++v87;
              }
              *((_QWORD *)&v172 + 1) = 0;
              v24 = (unint64_t)v87;
            }
            v15 = 0;
            v24 = (unint64_t)v87;
LABEL_331:
            v50 = (unint64_t)&v11[v13];
LABEL_332:
            if (!v153 || v72 == (unsigned __int8 *)v50 || (_DWORD)v15 && (_DWORD)v15 != -2)
            {
LABEL_346:
              if ((_OWORD *)v161 != v162)
              {
                v123 = v72;
                (*((void (**)(_QWORD, _QWORD))&v159 + 1))(v161, v160);
                v72 = v123;
              }
              *(_QWORD *)(v6 + 24) = v12;
              *(_QWORD *)(v6 + 40) = *((_QWORD *)&v172 + 1);
              *(_BYTE *)(v6 + 72) = 0;
              if ((_DWORD)v15 != 1)
              {
                *(_QWORD *)(v6 + 40) = v173;
                if ((_DWORD)v15 == -2 || !(_DWORD)v15)
                {
                  if (v158)
                  {
                    *(_QWORD *)(v6 + 32) = v11;
                    *(_QWORD *)(v6 + 80) = v158 - (_QWORD)v11;
                    *(_QWORD *)(v6 + 88) = v72 - v11;
                    *(_QWORD *)(v6 + 56) = v72 - v11;
                    *(_QWORD *)(v6 + 64) = v158 - (_QWORD)v11;
                    *(_QWORD *)(v6 + 48) = v156 - (_QWORD)v11;
                    v15 = 4294967294;
                  }
                  else
                  {
                    v15 = 0xFFFFFFFFLL;
                  }
                }
                *(_DWORD *)(v6 + 76) = v15;
                return v15;
              }
              if ((SDWORD2(v167) & 0x80000000) == 0)
                v124 = DWORD2(v167);
              else
                v124 = DWORD2(v167) + 1;
              v125 = v124 >> 1;
              if (SDWORD2(v167) < 2 * *(unsigned __int16 *)(v6 + 74))
                v15 = (v125 + 1);
              else
                v15 = 0;
              *(_DWORD *)(v6 + 76) = v15;
              *(_QWORD *)(v6 + 64) = v24 - (_QWORD)v11;
              v126 = v171;
              if ((unint64_t)v172 > (unint64_t)v171)
                v126 = v172;
              *(_QWORD *)(v6 + 48) = *((_QWORD *)&v171 + 1) - (_QWORD)v11;
              *(_QWORD *)(v6 + 56) = v126 - (_QWORD)v11;
              if ((v8 & 0x4000) == 0)
              {
                *(_QWORD *)(v6 + 32) = v11;
                return v15;
              }
              v127 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v6)(v135 + v13, *(_QWORD *)(v6 + 16));
              *(_QWORD *)(v6 + 32) = v127;
              if (v127)
              {
                memcpy(v127, v11, v135 + v13);
                *(_BYTE *)(v6 + 73) |= 1u;
                return *(unsigned int *)(v6 + 76);
              }
              return 4294967248;
            }
            while (2)
            {
              v119 = v72;
              while (1)
              {
                v24 = (unint64_t)(v119 + 1);
                if ((unint64_t)(v119 + 1) >= v50)
                {
                  v15 = 0;
                  goto LABEL_346;
                }
                ++v119;
                if ((*(_BYTE *)v24 & 0xC0) != 0x80)
                {
                  v120 = v72;
                  *(_QWORD *)&v170 = v24;
                  v121 = _pcre2_valid_utf_8((unsigned __int8 *)v24, (unint64_t)&v11[v13 - v24], v143);
                  if (!v121)
                  {
                    *((_QWORD *)&v170 + 1) = v50;
                    LODWORD(v15) = 1;
                    v72 = (unsigned __int8 *)v50;
                    goto LABEL_148;
                  }
                  v72 = v120;
                  v119 = v120;
                  if (v121 < 0)
                    break;
                }
              }
              v122 = *v143;
              v72 = (unsigned __int8 *)(v24 + *v143);
              *((_QWORD *)&v170 + 1) = v72;
              if (v122 <= 0)
                continue;
              break;
            }
            LODWORD(v15) = 3;
          }
        }
LABEL_53:
        *(_QWORD *)&v170 = v24;
        v30 = (unsigned __int8 *)v24;
        if (v29 == 128)
          goto LABEL_80;
LABEL_71:
        v37 = v12[15].u16[2];
        if (v12[15].i16[2] && v24 > (unint64_t)v11)
        {
          v38 = v24;
          do
          {
            v39 = (unsigned __int8 *)(v38 - 1);
            do
            {
              v30 = v39;
              *(_QWORD *)&v170 = v39;
              if (v39 <= v11)
                goto LABEL_80;
              --v39;
            }
            while ((*v30 & 0xC0) == 0x80);
            v38 = (unint64_t)v30;
            --v37;
          }
          while (v37);
        }
        else
        {
          v30 = (unsigned __int8 *)v24;
        }
        goto LABEL_80;
      }
LABEL_70:
      *(_QWORD *)&v170 = v24;
      goto LABEL_71;
    }
    v28 = (_QWORD *)(v6 + 64);
    if (v24 >= (unint64_t)v147 || (*(_BYTE *)v24 & 0xC0) != 0x80)
      goto LABEL_70;
LABEL_67:
    if (v27)
      return 4294967260;
    else
      return 4294967274;
  }
  v15 = matched;
  if ((v8 & 0x4000) != 0 && (matched & 0x80000000) == 0)
  {
    v26 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v6)(v135 + v13, *(_QWORD *)(v6 + 16));
    *(_QWORD *)(v6 + 32) = v26;
    if (!v26)
      return 4294967248;
    memcpy(v26, v11, v135 + v13);
    *(_BYTE *)(v6 + 73) |= 1u;
  }
  return v15;
}

uint64_t match(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a7 + 32);
  *(_DWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 104) = 0xFFFFFFFFLL;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 88) = a1;
  *(_QWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 112) = xmmword_1DEC43890;
  *(_DWORD *)(v7 + 52) = 0;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 32) = a6;
  v8 = *(_DWORD *)(a7 + 72);
  *(_DWORD *)(a7 + 72) = v8 + 1;
  if (v8 >= *(_DWORD *)(a7 + 64))
    return 4294967249;
  if (!*(_DWORD *)(a7 + 68))
    return 4294967243;
  v9 = *a2;
  *(_BYTE *)(v7 + 73) = v9;
  v10 = 4294967252;
  if (v9 <= 0xA6)
    __asm { BR              X10 }
  return v10;
}

uint64_t match_ref(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t result;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 *v38;

  if (*(_QWORD *)(a3 + 120) <= a1 || (v6 = a3 + 8 * a1, v7 = *(_QWORD *)(v6 + 128), v7 == -1))
  {
    if ((*(_BYTE *)(a4 + 241) & 2) != 0)
    {
      v33 = 0;
LABEL_59:
      result = 0;
      *a5 = v33;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(_QWORD *)(a3 + 80);
  v9 = *(_QWORD *)(a4 + 152);
  v10 = (unsigned __int8 *)(v9 + v7);
  v11 = *(_QWORD *)(v6 + 136);
  v12 = v11 - v7;
  if (a2)
  {
    v13 = *(_DWORD *)(a4 + 240);
    if ((v13 & 0xA0000) != 0)
    {
      if (v7 < v11)
      {
        v14 = v9 + v11;
        v15 = *(_QWORD *)(a4 + 168);
        v16 = *(unsigned __int8 **)(a3 + 80);
        while ((unint64_t)v16 < v15)
        {
          v17 = *v16;
          if ((v13 & 0x80000) != 0)
          {
            if (v17 < 0xC0)
            {
              ++v16;
            }
            else if ((v17 & 0x20) != 0)
            {
              v24 = v16[1] & 0x3F;
              if ((v17 & 0x10) != 0)
              {
                if ((v17 & 8) != 0)
                {
                  v26 = v16[2] & 0x3F;
                  v27 = v16[3] & 0x3F;
                  v28 = v16[4] & 0x3F;
                  if ((v17 & 4) != 0)
                  {
                    v17 = ((v17 & 1) << 30) | (v24 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | v16[5] & 0x3F;
                    v16 += 6;
                  }
                  else
                  {
                    v17 = ((v17 & 3) << 24) | (v24 << 18) | (v26 << 12) | (v27 << 6) | v28;
                    v16 += 5;
                  }
                }
                else
                {
                  v17 = ((v17 & 7) << 18) | (v24 << 12) | ((v16[2] & 0x3F) << 6) | v16[3] & 0x3F;
                  v16 += 4;
                }
              }
              else
              {
                v17 = ((v17 & 0xF) << 12) | (v24 << 6) | v16[2] & 0x3F;
                v16 += 3;
              }
            }
            else
            {
              v20 = v16[1];
              v16 += 2;
              v17 = v20 & 0x3F | ((v17 & 0x1F) << 6);
            }
            v18 = *v10;
            if (v18 < 0xC0)
            {
              ++v10;
            }
            else if ((v18 & 0x20) != 0)
            {
              v25 = v10[1] & 0x3F;
              if ((v18 & 0x10) != 0)
              {
                if ((v18 & 8) != 0)
                {
                  v29 = v10[2] & 0x3F;
                  v30 = v10[3] & 0x3F;
                  v31 = v10[4] & 0x3F;
                  if ((v18 & 4) != 0)
                  {
                    v18 = ((v18 & 1) << 30) | (v25 << 24) | (v29 << 18) | (v30 << 12) | (v31 << 6) | v10[5] & 0x3F;
                    v10 += 6;
                  }
                  else
                  {
                    v18 = ((v18 & 3) << 24) | (v25 << 18) | (v29 << 12) | (v30 << 6) | v31;
                    v10 += 5;
                  }
                }
                else
                {
                  v18 = ((v18 & 7) << 18) | (v25 << 12) | ((v10[2] & 0x3F) << 6) | v10[3] & 0x3F;
                  v10 += 4;
                }
              }
              else
              {
                v18 = ((v18 & 0xF) << 12) | (v25 << 6) | v10[2] & 0x3F;
                v10 += 3;
              }
            }
            else
            {
              v21 = v10[1];
              v10 += 2;
              v18 = v21 & 0x3F | ((v18 & 0x1F) << 6);
            }
          }
          else
          {
            v19 = *v10++;
            v18 = v19;
            ++v16;
          }
          if (v17 != v18
            && v17 != *(_DWORD *)&_pcre2_ucd_records_8[12
                                                     * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                     + 4]
                    + v18)
          {
            v22 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12
                                                                 * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)]
                                                                 + 3]];
            do
            {
              v23 = *v22;
              if (v17 < *v22)
                return 0xFFFFFFFFLL;
              ++v22;
            }
            while (v17 != v23);
          }
          if ((unint64_t)v10 >= v14)
            goto LABEL_58;
        }
        return 1;
      }
    }
    else if (v12)
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      v37 = v7 - v11;
      v38 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v38 < *(_QWORD *)(a4 + 168))
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v10) != *(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v38))
          return 0xFFFFFFFFLL;
        ++v10;
        ++v38;
        v36 = __CFADD__(v37++, 1);
        if (v36)
          goto LABEL_58;
      }
      return 1;
    }
    goto LABEL_57;
  }
  if (*(_WORD *)(a4 + 128))
  {
    if (v12)
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      v34 = v7 - v11;
      v35 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v35 < *(_QWORD *)(a4 + 168))
      {
        if (*v10 != *v35)
          return 0xFFFFFFFFLL;
        ++v35;
        ++v10;
        v36 = __CFADD__(v34++, 1);
        if (v36)
          goto LABEL_58;
      }
      return 1;
    }
LABEL_57:
    v16 = *(unsigned __int8 **)(a3 + 80);
LABEL_58:
    v33 = &v16[-v8];
    goto LABEL_59;
  }
  if (*(_QWORD *)(a4 + 168) - v8 >= v12)
  {
    if (!memcmp(v10, *(const void **)(a3 + 80), v11 - v7))
    {
      v16 = (unsigned __int8 *)(v8 + v12);
      goto LABEL_58;
    }
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t do_callout(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 118)
    v5 = 6;
  else
    v5 = __rev16(*(unsigned __int16 *)(v4 + 5));
  *a3 = v5;
  v6 = (uint64_t (*)(uint64_t, _QWORD))a2[35];
  if (!v6)
    return 0;
  v7 = a2[33];
  v8 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v7 + 8) = (*(_DWORD *)(a1 + 120) >> 1) + 1;
  *(_DWORD *)(v7 + 12) = v8;
  v9 = a2[26];
  *(_QWORD *)(v7 + 16) = a1 + 112;
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(a1 + 80) - a2[19];
  *(_QWORD *)(v7 + 64) = __rev16(*(unsigned __int16 *)(v4 + 1));
  *(_QWORD *)(v7 + 72) = __rev16(*(unsigned __int16 *)(v4 + 3));
  if (*v4 == 118)
  {
    v10 = 0;
    v11 = 0;
    *(_DWORD *)(v7 + 4) = v4[5];
    *(_QWORD *)(v7 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 80) = __rev16(*(unsigned __int16 *)(v4 + 7));
    v10 = v4 + 10;
    v11 = *a3 - 11;
  }
  *(_QWORD *)(v7 + 88) = v11;
  *(_QWORD *)(v7 + 96) = v10;
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = -1;
  *(_QWORD *)(a1 + 120) = -1;
  result = v6(v7, a2[34]);
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = v14;
  *(_DWORD *)(v7 + 104) = 0;
  return result;
}

uint64_t _pcre2_study_8(uint64_t a1)
{
  unsigned int v2;
  unsigned __int8 *v3;
  int v4;
  int minlength;
  int started;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  int v28;
  int v29[129];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v2 = *(_DWORD *)(a1 + 88);
  v3 = (unsigned __int8 *)(a1 + *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132) + 136);
  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 0x210) != 0)
    goto LABEL_2;
  v29[0] = 0;
  started = set_start_bits(a1, v3, (v2 >> 19) & 1, (v2 >> 17) & 1, v29);
  if (started != 1)
  {
    if (started != 3)
    {
      v4 = *(_DWORD *)(a1 + 96);
      goto LABEL_2;
    }
    return 1;
  }
  v8 = 0;
  v9 = (_BYTE *)(a1 + 40);
  v10 = 0xFFFFFFFFLL;
  v11 = -8;
  v12 = -1;
  do
  {
    v13 = v10;
    v11 += 8;
    v14 = *v9;
    if (!*v9)
      goto LABEL_46;
    if ((v14 & (v14 - 1)) != 0)
      goto LABEL_54;
    v15 = v8 | 6;
    v16 = v8 | 7;
    if (v14 != 128)
      v16 = v11;
    if (v14 != 64)
      v15 = v16;
    v17 = v8 | 4;
    v18 = v8 | 5;
    if (v14 != 32)
      v18 = v11;
    if (v14 != 16)
      v17 = v18;
    if (*v9 <= 0x3Fu)
      v15 = v17;
    v19 = v8 | 1;
    v20 = v8 | 2;
    v21 = v8 | 3;
    if (v14 != 8)
      v21 = v11;
    if (v14 != 4)
      v20 = v21;
    if (v14 != 2)
      v19 = v20;
    v10 = *v9 <= 0xFu ? v19 : v15;
    if ((v2 & 0x80000) != 0 && v10 > 0x7F)
    {
LABEL_54:
      v24 = *(_DWORD *)(a1 + 96);
LABEL_55:
      v25 = 64;
      goto LABEL_56;
    }
    if (v12 < 0)
    {
      v12 = v10;
LABEL_46:
      v10 = v13;
      goto LABEL_47;
    }
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v10 + 256);
    if ((v2 & 0xA0000) != 0)
    {
      v23 = v10 - 128;
      if (v10 < 0x80)
        v23 = v10;
      if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F] + v23] + 3])
        goto LABEL_54;
      if (v10 >= 0x80)
        v22 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v10 > 0x7F]
                                                                 + v23]
                                             + 4]
            + v10;
    }
    if (v22 != v12)
      goto LABEL_54;
LABEL_47:
    ++v9;
    v8 += 8;
  }
  while (v11 < 0xF8);
  v24 = *(_DWORD *)(a1 + 96);
  if (v12 < 0)
    goto LABEL_55;
  if ((v24 & 0x80) != 0)
  {
    v27 = *(_DWORD *)(a1 + 116);
    if (v27 == v12 || (v10 & 0x80000000) == 0 && v27 == (_DWORD)v10)
      goto LABEL_55;
  }
  *(_DWORD *)(a1 + 112) = v12;
  if ((int)v10 < 0)
    v25 = 16;
  else
    v25 = 48;
LABEL_56:
  v4 = v24 | v25;
  *(_DWORD *)(a1 + 96) = v4;
LABEL_2:
  if ((v4 & 0x802000) != 0)
    return 0;
  if (*(unsigned __int16 *)(a1 + 130) > 0x80u)
    return 0;
  v29[0] = 0;
  minlength = find_minlength(a1, (char *)v3, v3, (v2 >> 19) & 1, 0, &v28, v29);
  switch(minlength)
  {
    case -1:
      return 0;
    case -2:
      return 2;
    case -3:
      return 3;
  }
  if (minlength >= 0xFFFF)
    v26 = -1;
  else
    v26 = minlength;
  *(_WORD *)(a1 + 126) = v26;
  return 0;
}

uint64_t set_start_bits(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  unint64_t v37;
  char v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned __int8 *v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  unsigned int v73;
  char v74[6];

  if ((_DWORD)a3)
    v5 = 16;
  else
    v5 = 32;
  v6 = (*a5)++;
  if (v6 > 999)
    return 4;
  v11 = a2;
  v13 = *a2;
  v72 = (_DWORD *)(a1 + 65);
  v14 = a1 + 40;
  v73 = 1;
LABEL_7:
  v15 = v13 - 136;
  v16 = v15 > 6;
  v17 = (1 << v15) & 0x63;
  if (v16 || v17 == 0)
    v19 = v11 + 3;
  else
    v19 = v11 + 5;
  while (2)
  {
    v20 = *v19;
    result = 3;
    v21 = 0;
    v22 = 2;
    switch(*v19)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x1Fu:
      case 0x20u:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x7Du:
      case 0x8Au:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return 0;
      case 4u:
      case 5u:
      case 0x57u:
      case 0x58u:
      case 0x5Fu:
        ++v19;
        continue;
      case 6u:
        v57 = 0;
        v58 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v57) |= ~*(_BYTE *)(v58 + (v57 + 576));
          ++v57;
        }
        while (v5 != v57);
        goto LABEL_118;
      case 7u:
        v59 = a1;
        v60 = 64;
        goto LABEL_121;
      case 8u:
        v61 = 0;
        v62 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v61) |= ~*(_BYTE *)(v62 + (v61 + 512));
          ++v61;
        }
        while (v5 != v61);
        goto LABEL_118;
      case 9u:
        v59 = a1;
        v60 = 0;
        goto LABEL_121;
      case 0xAu:
        v63 = 0;
        v64 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v14 + v63) |= ~*(_BYTE *)(v64 + (v63 + 672));
          ++v63;
        }
        while (v5 != v63);
LABEL_118:
        if ((_DWORD)a3)
          *(_QWORD *)(a1 + 64) = -1;
        goto LABEL_140;
      case 0xBu:
        v59 = a1;
        v60 = 160;
LABEL_121:
        set_type_bits(v59, v60, v5);
        goto LABEL_140;
      case 0x10u:
        if (v19[1] == 9)
        {
          v65 = v19[2];
          v66 = _pcre2_ucd_caseless_sets_8[v65];
          if (v66 == -1)
          {
LABEL_140:
            v22 = v73;
            goto LABEL_141;
          }
          v67 = &_pcre2_ucd_caseless_sets_8[v65 + 1];
          while (!(_DWORD)a3)
          {
            if (v66 < 0x100)
              goto LABEL_129;
            *(_BYTE *)(a1 + 71) |= 0x80u;
LABEL_130:
            v68 = *v67++;
            v66 = v68;
            if (v68 == -1)
              goto LABEL_140;
          }
          _pcre2_ord2utf_8(v66, (uint64_t)v74);
          v66 = v74[0];
LABEL_129:
          *(_BYTE *)(a1 + (v66 >> 3) + 40) |= 1 << (v66 & 7);
          goto LABEL_130;
        }
        return 0;
      case 0x11u:
      case 0x15u:
        *(_BYTE *)(a1 + 41) |= 0x3Cu;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v56 = *(_BYTE *)(a1 + 68) | 4;
          goto LABEL_134;
        }
        *(_BYTE *)(a1 + 56) |= 0x20u;
        goto LABEL_140;
      case 0x13u:
        *(_BYTE *)(a1 + 41) |= 2u;
        *(_BYTE *)(a1 + 44) |= 1u;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v56 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_134:
          *(_BYTE *)(a1 + 68) = v56;
        }
        else
        {
          *(_BYTE *)(a1 + 60) |= 1u;
        }
        goto LABEL_140;
      case 0x1Bu:
        v26 = 1;
        goto LABEL_61;
      case 0x1Du:
      case 0x23u:
      case 0x24u:
      case 0x2Bu:
        goto LABEL_136;
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
      case 0x38u:
        goto LABEL_138;
      case 0x21u:
      case 0x22u:
      case 0x25u:
      case 0x26u:
      case 0x2Au:
      case 0x2Cu:
        v23 = v19 + 1;
        goto LABEL_23;
      case 0x27u:
      case 0x28u:
      case 0x2Du:
        v23 = v19 + 3;
LABEL_23:
        v19 = set_table_bit(a1, v23, 0, a3, a4);
        continue;
      case 0x29u:
        v19 += 2;
LABEL_136:
        v69 = v19 + 1;
        v70 = a1;
        v71 = 0;
        goto LABEL_139;
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x39u:
        v24 = v19 + 1;
        goto LABEL_25;
      case 0x34u:
      case 0x35u:
      case 0x3Au:
        v24 = v19 + 3;
LABEL_25:
        v19 = set_table_bit(a1, v24, 1, a3, a4);
        continue;
      case 0x36u:
        v19 += 2;
LABEL_138:
        v69 = v19 + 1;
        v70 = a1;
        v71 = 1;
LABEL_139:
        set_table_bit(v70, v69, v71, a3, a4);
        goto LABEL_140;
      case 0x55u:
      case 0x56u:
      case 0x59u:
      case 0x5Au:
      case 0x5Eu:
      case 0x60u:
        goto LABEL_27;
      case 0x5Bu:
      case 0x5Cu:
      case 0x61u:
        v19 += 2;
LABEL_27:
        result = 0;
        switch(v19[1])
        {
          case 6u:
            v41 = 0;
            v42 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v41) |= ~*(_BYTE *)(v42 + (v41 + 576));
              ++v41;
            }
            while (v5 != v41);
            goto LABEL_75;
          case 7u:
            v43 = a1;
            v44 = 64;
            goto LABEL_78;
          case 8u:
            v45 = 0;
            v46 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v45) |= ~*(_BYTE *)(v46 + (v45 + 512));
              ++v45;
            }
            while (v5 != v45);
            goto LABEL_75;
          case 9u:
            v43 = a1;
            v44 = 0;
            goto LABEL_78;
          case 0xAu:
            v47 = 0;
            v48 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v14 + v47) |= ~*(_BYTE *)(v48 + (v47 + 672));
              ++v47;
            }
            while (v5 != v47);
LABEL_75:
            if ((_DWORD)a3)
              *(_QWORD *)(a1 + 64) = -1;
            break;
          case 0xBu:
            v43 = a1;
            v44 = 160;
LABEL_78:
            set_type_bits(v43, v44, v5);
            break;
          case 0x11u:
          case 0x15u:
            *(_BYTE *)(a1 + 41) |= 0x3Cu;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v25 = *(_BYTE *)(a1 + 68) | 4;
              goto LABEL_81;
            }
            *(_BYTE *)(a1 + 56) |= 0x20u;
            break;
          case 0x13u:
            *(_BYTE *)(a1 + 41) |= 2u;
            *(_BYTE *)(a1 + 44) |= 1u;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v25 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_81:
              *(_BYTE *)(a1 + 68) = v25;
            }
            else
            {
              *(_BYTE *)(a1 + 60) |= 1u;
            }
            break;
          default:
            return result;
        }
        v19 += 2;
        continue;
      case 0x5Du:
        goto LABEL_33;
      case 0x6Eu:
        goto LABEL_58;
      case 0x6Fu:
        goto LABEL_54;
      case 0x70u:
        result = 0;
        v27 = v19[3];
        if ((v27 & 4) != 0 || (v27 & 3) == 1)
          return result;
        if ((v19[3] & 2) != 0)
          v21 = v19 + 4;
        else
          v21 = 0;
        if (!(_DWORD)a3 || (v19[3] & 1) != 0)
        {
LABEL_54:
          if ((_DWORD)a3)
          {
            *(_BYTE *)(a1 + 64) |= 0xF0u;
            *v72 = -1;
            *(_DWORD *)((char *)v72 + 3) = -1;
            v20 = *v19;
          }
          if (v20 != 112)
          {
LABEL_58:
            v21 = v19 + 1;
            v39 = v19 + 33;
            goto LABEL_85;
          }
          v29 = __rev16(*(unsigned __int16 *)(v19 + 1));
        }
        else
        {
          v28 = &v19[16 * (v27 & 2) + 4];
          v29 = __rev16(*(unsigned __int16 *)(v19 + 1));
          while (1)
          {
            while (1)
            {
              v30 = v28 + 1;
              v31 = *v28;
              if (v31 != 1)
                break;
              v37 = *v30;
              do
                v38 = *++v30;
              while ((v38 & 0xC0) == 0x80);
              *(_BYTE *)(a1 + (v37 >> 3) + 40) |= 1 << (v37 & 7);
              v28 = v30;
            }
            if (v31 != 2)
              break;
            v33 = *++v28;
            v32 = v33;
            do
            {
              v35 = *++v28;
              v34 = v35;
            }
            while ((v35 & 0xC0) == 0x80);
            do
              v36 = *++v28;
            while ((v36 & 0xC0) == 0x80);
            if (v32 <= v34)
            {
              do
              {
                *(_BYTE *)(a1 + (v32 >> 3) + 40) |= 1 << (v32 & 7);
                ++v32;
              }
              while (v34 >= v32);
            }
          }
          if (*v28)
            return 3;
        }
        v39 = &v19[v29];
        if (!v21)
          goto LABEL_94;
LABEL_85:
        v49 = 0;
        if ((_DWORD)a3)
        {
          do
          {
            *(_BYTE *)(v14 + v49) |= v21[v49];
            ++v49;
          }
          while (v49 != 16);
          v50 = 128;
          do
          {
            if (((v21[(unint64_t)v50 >> 3] >> (v50 & 7)) & 1) != 0)
            {
              *(_BYTE *)(a1 + 64) |= 1 << (v50 >> 6);
              v50 |= 0x3Fu;
            }
          }
          while (v50++ < 0xFF);
        }
        else
        {
          do
          {
            *(_BYTE *)(v14 + v49) |= v21[v49];
            ++v49;
          }
          while (v49 != 32);
        }
LABEL_94:
        v52 = *v39 - 98;
        if (v52 > 0xB)
          goto LABEL_140;
        v53 = 1 << v52;
        if ((v53 & 0x533) != 0)
        {
          v19 = v39 + 1;
        }
        else
        {
          if ((v53 & 0x8C0) == 0)
            goto LABEL_140;
          v54 = __rev16(*(unsigned __int16 *)(v39 + 1)) == 0;
          v55 = 5;
          if (!v54)
            v55 = 0;
          v19 = &v39[v55];
          if (!v54)
            goto LABEL_140;
        }
        continue;
      case 0x76u:
        v26 = 6;
        goto LABEL_61;
      case 0x77u:
        v26 = __rev16(*(unsigned __int16 *)(v19 + 5));
LABEL_61:
        v19 += v26;
        continue;
      case 0x78u:
        goto LABEL_141;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        return 2;
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
        result = set_start_bits(a1, v19, a3, a4, a5);
        if ((_DWORD)result == 2)
        {
          do
            v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
          while (*v19 == 120);
LABEL_33:
          v19 += 3;
          continue;
        }
        v22 = v73;
        if ((_DWORD)result != 1)
          return result;
LABEL_141:
        v11 += __rev16(*(unsigned __int16 *)(v11 + 1));
        v13 = 120;
        v73 = v22;
        result = v22;
        if (*v11 != 120)
          return result;
        goto LABEL_7;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        do
          v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
        while (*v19 == 120);
        goto LABEL_33;
      case 0x96u:
      case 0x97u:
      case 0x98u:
        result = set_start_bits(a1, ++v19, a3, a4, a5);
        if (result <= 4 && ((1 << result) & 0x19) != 0)
          return result;
        do
          v19 += __rev16(*(unsigned __int16 *)(v19 + 1));
        while (*v19 == 120);
        goto LABEL_33;
      case 0xA6u:
        v40 = v19 + 1;
        do
          v40 += __rev16(*(unsigned __int16 *)(v40 + 1));
        while (*v40 == 120);
        v19 = v40 + 3;
        continue;
      default:
        return result;
    }
  }
}

uint64_t find_minlength(uint64_t a1, char *a2, unsigned __int8 *a3, int a4, _QWORD *a5, _DWORD *a6, int *a7)
{
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *bracket_8;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  signed int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t minlength;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int *v80;
  int v81;
  signed int v82;
  int v83;
  int v84;
  int v85;
  int v87;
  int v88;
  uint64_t v90;
  int v91;

  v7 = *a2;
  if ((*a2 + 117) >= 5u)
  {
    v9 = *(_DWORD *)(a1 + 96);
    v10 = a2[1];
    v11 = a2[2];
    v12 = (*a6)++;
    if (v12 > 1000)
      return 0xFFFFFFFFLL;
    v14 = a7;
    v84 = 0;
    v85 = v9;
    v15 = 0;
    v78 = 0;
    v16 = 0;
    v27 = (v7 & 0xFE) == 136;
    v17 = 3;
    if (v27)
      v17 = 5;
    v18 = (unsigned __int8 *)&a2[v17];
    v19 = (unsigned __int8 *)&a2[v11 | (v10 << 8)];
    v77 = a1 + 136;
    v80 = a7 + 1;
    v87 = 0;
    v88 = -1;
    v83 = -1;
    v79 = -1;
    v91 = a4;
    v90 = a1;
    while (1)
    {
      if (v15 <= 65534)
        v20 = v15;
      else
        v20 = 0xFFFFLL;
      if (v15 <= 65534)
        v21 = v18;
      else
        v21 = v19;
      v22 = *v21;
      v23 = v16;
      v8 = 0xFFFFFFFFLL;
      switch(*v21)
      {
        case 0u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          v8 = v88;
          if (v88 < 0 || !v87 && (int)v20 < v88)
            v8 = v20;
          v27 = (_DWORD)v22 != 120 || (_DWORD)v8 == 0;
          if (!v27)
          {
            v87 = 0;
            v88 = v8;
            v15 = 0;
            v19 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
            goto LABEL_45;
          }
          return v8;
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x76u:
        case 0x7Du:
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
          goto LABEL_20;
        case 3u:
        case 0x9Au:
        case 0x9Cu:
        case 0x9Eu:
        case 0xA0u:
        case 0xA2u:
        case 0xA5u:
          v25 = _pcre2_OP_lengths_8[v22];
          goto LABEL_26;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_104;
        case 0xEu:
          if (!a4)
            goto LABEL_104;
          return v8;
        case 0xFu:
        case 0x10u:
          v21 += 2;
LABEL_104:
          v15 = v20 + 1;
          v18 = v21 + 1;
          continue;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x23u:
        case 0x24u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x38u:
        case 0x3Du:
        case 0x3Eu:
        case 0x45u:
        case 0x4Au:
        case 0x4Bu:
        case 0x52u:
          v15 = v20 + 1;
          v18 = v21 + 2;
          if (!a4)
            continue;
          v26 = v21[1];
          goto LABEL_23;
        case 0x21u:
        case 0x22u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Au:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x44u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x53u:
        case 0x54u:
          v18 = &v21[_pcre2_OP_lengths_8[v22]];
          v15 = v20;
          if (!a4)
            continue;
          v24 = *(v18 - 1);
          v15 = v20;
          if (v24 < 0xC0)
            continue;
          v18 += _pcre2_utf8_table4[v24 & 0x3F];
          goto LABEL_53;
        case 0x29u:
        case 0x36u:
        case 0x43u:
        case 0x50u:
          v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          v18 = v21 + 4;
          if (!a4)
            continue;
          v26 = v21[3];
LABEL_23:
          if (v26 >= 0xC0)
            v18 += _pcre2_utf8_table4[v26 & 0x3F];
          continue;
        case 0x55u:
        case 0x56u:
        case 0x59u:
        case 0x5Au:
        case 0x5Eu:
        case 0x60u:
          v28 = v21[1];
          goto LABEL_51;
        case 0x57u:
        case 0x58u:
        case 0x5Fu:
          v15 = v20 + 1;
          v35 = v21[1] - 15 >= 2;
          v36 = 2;
          v37 = 4;
          goto LABEL_106;
        case 0x5Bu:
        case 0x5Cu:
        case 0x61u:
          v28 = v21[3];
LABEL_51:
          v30 = &v21[2 * ((v28 - 15) < 2)];
          v29 = _pcre2_OP_lengths_8[v22];
          goto LABEL_52;
        case 0x5Du:
          v15 = v20 + (bswap32(*(unsigned __int16 *)(v21 + 1)) >> 16);
          v35 = v21[3] - 15 >= 2;
          v36 = 4;
          v37 = 6;
LABEL_106:
          if (!v35)
            v36 = v37;
          v18 = &v21[v36];
          v16 = v23;
          continue;
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
          if ((_DWORD)v22 == 112)
            v38 = __rev16(*(unsigned __int16 *)(v21 + 1));
          else
            v38 = 33;
          v18 = &v21[v38];
          v63 = *v18 - 98;
          if (v63 > 0xB)
          {
            v15 = v20 + 1;
          }
          else
          {
            v64 = 1 << v63;
            if ((v64 & 0x533) == 0)
            {
              if ((v64 & 0x20C) == 0)
              {
                v15 = v20 + (bswap32(*(unsigned __int16 *)(v18 + 1)) >> 16);
                v18 += 5;
                continue;
              }
              LODWORD(v20) = v20 + 1;
            }
            ++v18;
LABEL_53:
            v15 = v20;
          }
          continue;
        case 0x71u:
        case 0x72u:
          v39 = v21[1];
          v40 = v21[2];
          v41 = v40 | (v39 << 8);
          if (v41 <= *v14)
          {
            LODWORD(v42) = v14[v41];
            if ((v42 & 0x80000000) == 0)
              goto LABEL_143;
          }
          if ((*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_140;
          }
          bracket_8 = _pcre2_find_bracket_8(a3, a4, v21[2] | (v21[1] << 8));
          if (!bracket_8)
            return 4294967294;
          v44 = bracket_8;
          v45 = bracket_8;
          do
            v45 += __rev16(*(unsigned __int16 *)(v45 + 1));
          while (*v45 == 120);
          a4 = v91;
          if ((v85 & 0x200000) != 0)
          {
            v46 = _pcre2_find_bracket_8(v45, v91, v41);
            a4 = v91;
            if (v46)
            {
              LODWORD(v42) = 0;
LABEL_126:
              a1 = v90;
              goto LABEL_140;
            }
          }
          if (v21 > v44 && v21 < v45)
          {
            LODWORD(v42) = 0;
            v87 = 1;
            goto LABEL_126;
          }
          a1 = v90;
          if (a5)
          {
            v71 = a5;
            while ((unsigned __int8 *)v71[1] != v44)
            {
              v71 = (_QWORD *)*v71;
              if (!v71)
                goto LABEL_139;
            }
            LODWORD(v42) = 0;
            v87 = 1;
          }
          else
          {
LABEL_139:
            minlength = find_minlength(v90);
            a4 = v91;
            v42 = minlength;
            a1 = v90;
            v8 = v42;
            if ((v42 & 0x80000000) != 0)
              return v8;
          }
LABEL_140:
          v14[v41] = v42;
          v73 = *v14;
          if ((int)v73 + 1 < v41)
          {
            memset(&v80[v73], 255, 4 * ((v39 << 8) + v40 - v73 - 2) + 4);
            a1 = v90;
            a4 = v91;
          }
          *v14 = v41;
LABEL_143:
          v61 = 3;
LABEL_144:
          v18 = &v21[v61];
          v74 = 1;
          v75 = *v18 - 98;
          if (v75 <= 0xB)
          {
            if (((1 << v75) & 0x533) != 0)
            {
              v74 = 0;
              ++v18;
            }
            else if (((1 << v75) & 0x20C) != 0)
            {
              ++v18;
              v74 = 1;
            }
            else
            {
              v74 = __rev16(*(unsigned __int16 *)(v18 + 1));
              v18 += 5;
            }
          }
          if ((int)v42 < 1 || (v15 = 0xFFFF, v16 = v23, 0x7FFFFFFF / v42 >= v74))
          {
            v76 = v74 * v42;
            if (0xFFFF - (int)v20 >= v76)
              v15 = v76 + v20;
            else
              v15 = 0xFFFF;
            v16 = v23;
          }
          break;
        case 0x73u:
        case 0x74u:
          if ((v85 & 0x200000) != 0 || (*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v42) = 0;
            goto LABEL_102;
          }
          v47 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if (!v47)
          {
            LODWORD(v42) = 0x7FFFFFFF;
            goto LABEL_102;
          }
          v48 = (unsigned __int8 *)(v77
                                  + *(unsigned __int16 *)(a1 + 132)
                                  * (unint64_t)__rev16(*(unsigned __int16 *)(v21 + 1)));
          v49 = *v14;
          LODWORD(v42) = 0x7FFFFFFF;
          while (2)
          {
            v50 = v14;
            v51 = *v48;
            v52 = v48[1] | (v51 << 8);
            if ((int)v52 <= (int)v49)
            {
              LODWORD(v8) = v50[v52];
              if ((v8 & 0x80000000) == 0)
              {
                v52 = v49;
                v14 = v50;
                goto LABEL_87;
              }
            }
            v81 = v48[1];
            v82 = v47;
            v53 = _pcre2_find_bracket_8(a3, a4, v52);
            if (!v53)
              return 4294967294;
            v54 = v53;
            v55 = v51 << 8;
            v56 = v53;
            do
              v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
            while (*v56 == 120);
            v14 = v50;
            a4 = v91;
            a1 = v90;
            if (v21 > v54 && v21 < v56)
              goto LABEL_78;
            if (a5)
            {
              v57 = a5;
              while ((unsigned __int8 *)v57[1] != v54)
              {
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_83;
              }
LABEL_78:
              LODWORD(v8) = 0;
              v87 = 1;
            }
            else
            {
LABEL_83:
              v58 = v55;
              v59 = find_minlength(v90);
              v55 = v58;
              a4 = v91;
              v8 = v59;
              a1 = v90;
              if ((v8 & 0x80000000) != 0)
                return v8;
            }
            v14[v52] = v8;
            v60 = *v14;
            if ((int)v60 + 1 < (int)v52)
            {
              memset(&v80[v60], 255, 4 * (v55 + v81 - v60 - 2) + 4);
              a1 = v90;
              a4 = v91;
            }
            *v14 = v52;
            v47 = v82;
LABEL_87:
            if ((int)v8 < (int)v42)
              LODWORD(v42) = v8;
            if ((int)v42 >= 1)
            {
              v48 += *(unsigned __int16 *)(a1 + 132);
              v61 = 5;
              v49 = v52;
              if (v47-- <= 1)
                goto LABEL_144;
              continue;
            }
            break;
          }
LABEL_102:
          v61 = 5;
          goto LABEL_144;
        case 0x75u:
          v65 = &a3[__rev16(*(unsigned __int16 *)(v21 + 1))];
          v66 = __rev16(*(unsigned __int16 *)(v65 + 3));
          v67 = (unint64_t)v65;
          if (v66 == v79)
          {
            LODWORD(v20) = v78 + v20;
            goto LABEL_133;
          }
          do
            v67 += __rev16(*(unsigned __int16 *)(v67 + 1));
          while (*(_BYTE *)v67 == 120);
          if (v21 > v65 && (unint64_t)v21 < v67)
            goto LABEL_114;
          if (a5)
          {
            v69 = a5;
            while ((unsigned __int8 *)v69[1] != v65)
            {
              v69 = (_QWORD *)*v69;
              if (!v69)
                goto LABEL_131;
            }
LABEL_114:
            v87 = 1;
          }
          else
          {
LABEL_131:
            v70 = find_minlength(a1);
            if ((v70 & 0x80000000) != 0)
              return v70;
            v78 = v70;
            v79 = v66;
            LODWORD(v20) = v70 + v20;
            a4 = v91;
            a1 = v90;
          }
LABEL_133:
          v16 = 0;
          v18 = &v21[(v23 + 3)];
          v15 = v20;
          continue;
        case 0x77u:
          v25 = __rev16(*(unsigned __int16 *)(v21 + 5));
          goto LABEL_26;
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
          do
          {
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
            LODWORD(v22) = *v21;
          }
          while ((_DWORD)v22 == 120);
LABEL_20:
          v25 = _pcre2_OP_lengths_8[v22];
LABEL_26:
          v18 = &v21[v25];
          goto LABEL_53;
        case 0x84u:
        case 0x85u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_118;
        case 0x86u:
          v18 = v21 + 3;
          if (v21[3] == 117)
          {
            v16 = 3;
            v15 = v20;
            if (v21[6] == 121)
              continue;
          }
          goto LABEL_118;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          v31 = __rev16(*(unsigned __int16 *)(v21 + 3));
          if ((v85 & 0x200000) != 0 || v31 != v83)
          {
            v32 = find_minlength(v90);
            a4 = v91;
            v33 = v32;
            a1 = v90;
            v83 = v31;
            v84 = v33;
            v8 = v33;
            if ((v33 & 0x80000000) != 0)
              return v8;
          }
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          v15 = v84 + v20;
LABEL_45:
          v18 = v21 + 3;
          v16 = v23;
          continue;
        case 0x8Au:
        case 0x8Fu:
          v34 = &v21[__rev16(*(unsigned __int16 *)(v21 + 1))];
          if (*v34 != 120)
            goto LABEL_48;
LABEL_118:
          v68 = find_minlength(a1);
          v8 = v68;
          if ((v68 & 0x80000000) != 0)
            return v8;
          do
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          while (*v21 == 120);
          v15 = v68 + v20;
          v18 = v21 + 3;
          v16 = v23;
          a4 = v91;
          a1 = v90;
          continue;
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0xA6u:
          v34 = &v21[_pcre2_OP_lengths_8[v22]];
          do
            v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          while (*v34 == 120);
LABEL_48:
          v18 = v34 + 3;
          goto LABEL_53;
        case 0x99u:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Fu:
        case 0xA1u:
          v29 = _pcre2_OP_lengths_8[v22];
          v30 = &v21[v21[1]];
LABEL_52:
          v18 = &v30[v29];
          goto LABEL_53;
        case 0xA3u:
        case 0xA4u:
          return v8;
        default:
          return 4294967293;
      }
    }
  }
  return 0;
}

unsigned __int8 *set_table_bit(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  char v15[6];

  v7 = a2 + 1;
  v6 = *a2;
  *(_BYTE *)(a1 + (v6 >> 3) + 40) |= 1 << (v6 & 7);
  if (a4 && v6 >= 0xC0)
  {
    if ((v6 & 0x20) != 0)
    {
      if ((v6 & 0x10) != 0)
      {
        if ((v6 & 8) != 0)
        {
          v8 = a2[1] & 0x3F;
          v9 = a2[2] & 0x3F;
          v10 = a2[3] & 0x3F;
          v11 = a2[4] & 0x3F;
          if ((v6 & 4) != 0)
          {
            LODWORD(v6) = ((v6 & 1) << 30) | (v8 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6) | a2[5] & 0x3F;
            v7 = a2 + 6;
          }
          else
          {
            LODWORD(v6) = ((v6 & 3) << 24) | (v8 << 18) | (v9 << 12) | (v10 << 6) | v11;
            v7 = a2 + 5;
          }
        }
        else
        {
          LODWORD(v6) = ((v6 & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          v7 = a2 + 4;
        }
      }
      else
      {
        LODWORD(v6) = ((v6 & 0xF) << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
        v7 = a2 + 3;
      }
    }
    else
    {
      v7 = a2 + 2;
      LODWORD(v6) = a2[1] & 0x3F | ((v6 & 0x1F) << 6);
    }
  }
  if (a3)
  {
    if (!(a5 | a4))
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v6 + 256);
      goto LABEL_17;
    }
    v12 = *(_DWORD *)&_pcre2_ucd_records_8[12
                                         * _pcre2_ucd_stage2_8[v6 & 0x7F | (_pcre2_ucd_stage1_8[v6 >> 7] << 7)]
                                         + 4]
        + v6;
    if (a4)
    {
      _pcre2_ord2utf_8(v12, (uint64_t)v15);
      v13 = v15[0];
LABEL_17:
      *(_BYTE *)(a1 + (v13 >> 3) + 40) |= 1 << (v13 & 7);
      return v7;
    }
    if (v12 <= 0xFF)
      *(_BYTE *)(a1 + (v12 >> 3) + 40) |= 1 << (v12 & 7);
  }
  return v7;
}

uint64_t set_type_bits(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  _BYTE v7[6];

  v3 = result;
  if (!a3)
    goto LABEL_5;
  v4 = 0;
  v5 = *(_QWORD *)(result + 24);
  do
  {
    *(_BYTE *)(result + 40 + v4) |= *(_BYTE *)(v5 + (a2 + 512 + v4));
    ++v4;
  }
  while (a3 != v4);
  if (a3 != 32)
  {
LABEL_5:
    for (i = 128; i != 256; ++i)
    {
      if (((*(unsigned __int8 *)((i >> 3) + *(_QWORD *)(v3 + 24) + 512) >> (i & 7)) & 1) != 0)
      {
        result = _pcre2_ord2utf_8(i, (uint64_t)v7);
        *(_BYTE *)(v3 + ((unint64_t)v7[0] >> 3) + 40) |= 1 << (v7[0] & 7);
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_encode_8(size_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  __int128 *v6;
  uint64_t result;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t **v15;
  size_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  size_t *v22;

  if (a5)
    v6 = a5;
  else
    v6 = &_pcre2_default_compile_context_8;
  result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      v11 = 0;
      v12 = a2;
      v13 = 1104;
      v14 = a2;
      v15 = a1;
      do
      {
        v16 = *v15;
        if (!*v15)
          return 4294967245;
        if (*((_DWORD *)v16 + 20) != 1346589253)
          return 4294967265;
        if (v11)
        {
          if (v11 != (const void *)v16[3])
            return 4294967266;
        }
        else
        {
          v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      v17 = (*(uint64_t (**)(uint64_t, _QWORD))v6)(v13 + 24, *((_QWORD *)v6 + 2));
      if (v17)
      {
        v18 = v17;
        v19 = *v6;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v17 = v19;
        *(_QWORD *)(v17 + 24) = 0x24000A50523253;
        v20 = v17 + 24;
        *(_DWORD *)(v17 + 32) = 526337;
        *(_DWORD *)(v17 + 36) = a2;
        memcpy((void *)(v17 + 40), v11, 0x440uLL);
        v21 = (_QWORD *)(v18 + 1128);
        do
        {
          v22 = *a1++;
          memcpy(v21, v22, v22[9]);
          *v21 = 0;
          v21[1] = 0;
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          v21 = (_QWORD *)((char *)v21 + v22[9]);
          --v12;
        }
        while (v12);
        *a3 = v20;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_encode_mm_8(size_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  __int128 *v6;
  uint64_t result;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t **v15;
  size_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  size_t *v22;

  if (a5)
    v6 = a5;
  else
    v6 = &_pcre2_default_compile_context_8;
  result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      v11 = 0;
      v12 = a2;
      v13 = 1112;
      v14 = a2;
      v15 = a1;
      do
      {
        v16 = *v15;
        if (!*v15)
          return 4294967245;
        if (*((_DWORD *)v16 + 20) != 1346589253)
          return 4294967265;
        if (v11)
        {
          if (v11 != (const void *)v16[3])
            return 4294967266;
        }
        else
        {
          v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      v17 = (*(uint64_t (**)(uint64_t, _QWORD))v6)(v13 + 24, *((_QWORD *)v6 + 2));
      if (v17)
      {
        v18 = v17;
        v19 = *v6;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v17 = v19;
        *(_QWORD *)(v17 + 24) = 0x24000A50523253;
        v20 = v17 + 24;
        *(_DWORD *)(v17 + 32) = 526337;
        *(_DWORD *)(v17 + 36) = a2;
        memcpy((void *)(v17 + 40), v11, 0x440uLL);
        *(_QWORD *)(v18 + 1128) = a2;
        v21 = (_QWORD *)(v18 + 1136);
        do
        {
          v22 = *a1++;
          memcpy(v21, v22, v22[9]);
          *v21 = 0;
          v21[1] = 0;
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          *((_DWORD *)v21 + 24) |= 0x40000u;
          v21 = (_QWORD *)((char *)v21 + v22[9]);
          --v12;
        }
        while (v12);
        *a3 = v20;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_decode_8(uint64_t a1, int a2, _DWORD *a3, __int128 *a4)
{
  __int128 *v4;
  uint64_t v5;
  int v7;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t i;

  if (a4)
    v4 = a4;
  else
    v4 = &_pcre2_default_compile_context_8;
  v5 = 4294967245;
  if (a1 && a3)
  {
    if (a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      v7 = a3[3];
      if (v7 < 1)
        return 4294967234;
      if (*a3 == 1347564115)
      {
        if (a3[1] == 2359306)
        {
          if (v7 >= a2)
            v5 = a2;
          else
            v5 = v7;
          v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))v4)(1096, *((_QWORD *)v4 + 2));
          if (!v10)
            return 4294967248;
          v11 = v10;
          memcpy(v10, a3 + 4, 0x440uLL);
          v12 = 0;
          v11[136] = v5;
          v13 = a3 + 276;
          while (1)
          {
            v14 = *((_QWORD *)v13 + 9);
            if (v14 < 0x89)
              break;
            v15 = _pcre2_memctl_malloc_8(*((_QWORD *)v13 + 9), a4);
            if (!v15)
            {
              (*((void (**)(_QWORD *, _QWORD))v4 + 1))(v11, *((_QWORD *)v4 + 2));
              if (!v12)
                return 4294967248;
              for (i = 0; i != v12; ++i)
              {
                (*((void (**)(_QWORD, _QWORD))v4 + 1))(*(_QWORD *)(a1 + 8 * i), *((_QWORD *)v4 + 2));
                *(_QWORD *)(a1 + 8 * i) = 0;
                v5 = 4294967248;
              }
              return v5;
            }
            v16 = v15;
            memcpy(v15 + 5, v13 + 10, v14 - 40);
            if (*((_DWORD *)v16 + 20) != 1346589253
              || *((unsigned __int16 *)v16 + 66) > 0x23u
              || *((unsigned __int16 *)v16 + 67) >= 0x2711u)
            {
              (*((void (**)(_QWORD *, _QWORD))v4 + 1))(v16, *((_QWORD *)v4 + 2));
              return 4294967234;
            }
            v16[3] = v11;
            v16[4] = 0;
            *((_DWORD *)v16 + 24) |= 0x40000u;
            *(_QWORD *)(a1 + 8 * v12) = v16;
            v13 = (_DWORD *)((char *)v13 + v14);
            if (v5 == ++v12)
              return v5;
          }
          return 4294967234;
        }
        return 4294967264;
      }
      else
      {
        return 4294967265;
      }
    }
  }
  return v5;
}

uint64_t pcre2_serialize_decode_mm_8(_QWORD *a1, int a2, _DWORD *a3)
{
  int v3;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;

  if (!a3)
    return 4294967245;
  if (a2 < 1)
    return 4294967267;
  v3 = a3[3];
  if (v3 < 1)
    return 4294967234;
  if (*a3 != 1347564115)
    return 4294967265;
  if (a3[1] != 2359306)
    return 4294967264;
  if (v3 >= a2)
    result = a2;
  else
    result = v3;
  mapped_global_table = (uint64_t)(a3 + 4);
  v6 = a3 + 278;
  v7 = result;
  do
  {
    *a1++ = v6;
    v6 = (_DWORD *)((char *)v6 + *((_QWORD *)v6 + 9));
    --v7;
  }
  while (v7);
  return result;
}

uint64_t pcre2_serialize_get_number_of_codes_8(_DWORD *a1)
{
  if (!a1)
    return 4294967245;
  if (*a1 != 1347564115)
    return 4294967265;
  if (a1[1] == 2359306)
    return a1[3];
  return 4294967264;
}

uint64_t pcre2_serialize_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result - 16))(result - 24, *(_QWORD *)(result - 8));
  return result;
}

unsigned __int8 *_pcre2_extuni_8(int a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, _DWORD *a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v26;
  int v27;
  int v28;

  if ((unint64_t)a2 >= a4)
    return a2;
  if (a1 >= 0)
    v6 = a1;
  else
    v6 = a1 + 127;
  v7 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[a1 - (v6 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v6 >> 7] << 7)] + 2];
  while (1)
  {
    v8 = *a2;
    if (a5 && v8 >= 0xC0)
    {
      v9 = a2[1] & 0x3F;
      if ((v8 & 0x20) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          if ((v8 & 8) != 0)
          {
            v26 = a2[2] & 0x3F;
            v27 = a2[3] & 0x3F;
            v28 = a2[4] & 0x3F;
            if ((v8 & 4) != 0)
            {
              v8 = ((v8 & 1) << 30) | (v9 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | a2[5] & 0x3F;
              v10 = 6;
            }
            else
            {
              v8 = ((v8 & 3) << 24) | (v9 << 18) | (v26 << 12) | (v27 << 6) | v28;
              v10 = 5;
            }
          }
          else
          {
            v8 = ((v8 & 7) << 18) | (v9 << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
            v10 = 4;
          }
        }
        else
        {
          v8 = ((v8 & 0xF) << 12) | (v9 << 6) | a2[2] & 0x3F;
          v10 = 3;
        }
      }
      else
      {
        v8 = a2[1] & 0x3F | ((v8 & 0x1F) << 6);
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
    v11 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v8 & 0x7F | (_pcre2_ucd_stage1_8[v8 >> 7] << 7)] + 2];
    if (((_pcre2_ucp_gbtable_8[v7] >> v11) & 1) == 0)
      return a2;
    if (v7 == 11 && v11 == 11)
    {
      if (a5)
      {
        v12 = a2;
        do
          v13 = *--v12;
        while ((v13 & 0xC0) == 0x80);
      }
      else
      {
        v12 = a2 - 1;
      }
      if ((unint64_t)v12 > a3)
        break;
    }
LABEL_40:
    if ((v11 == 13 || v11 == 3) && v7 == 14)
      v7 = 14;
    else
      v7 = v11;
    if (a6)
      ++*a6;
    a2 += v10;
    if ((unint64_t)a2 >= a4)
      return a2;
  }
  v14 = 0;
  do
  {
    if (a5)
    {
      do
      {
        v16 = *--v12;
        v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      if (v15 >= 0xC0)
      {
        v17 = v12[1] & 0x3F;
        if ((v15 & 0x20) != 0)
        {
          if ((v15 & 0x10) != 0)
          {
            if ((v15 & 8) != 0)
            {
              v21 = v12[2] & 0x3F;
              v22 = v12[3] & 0x3F;
              v23 = v12[4] & 0x3F;
              if ((v15 & 4) == 0)
              {
                v15 = ((v15 & 3) << 24) | (v17 << 18) | (v21 << 12) | (v22 << 6) | v23;
                goto LABEL_37;
              }
              v19 = ((v15 & 1) << 30) | (v17 << 24) | (v21 << 18) | (v22 << 12) | (v23 << 6);
              v20 = v12[5];
            }
            else
            {
              v19 = ((v15 & 7) << 18) | (v17 << 12) | ((v12[2] & 0x3F) << 6);
              v20 = v12[3];
            }
          }
          else
          {
            v19 = ((v15 & 0xF) << 12) | (v17 << 6);
            v20 = v12[2];
          }
          v15 = v19 & 0xFFFFFFC0 | v20 & 0x3F;
          goto LABEL_37;
        }
        v15 = v12[1] & 0x3F | ((v15 & 0x1F) << 6);
      }
    }
    else
    {
      v18 = *--v12;
      v15 = v18;
    }
LABEL_37:
    if (_pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v15 & 0x7F | (_pcre2_ucd_stage1_8[v15 >> 7] << 7)] + 2] != 11)
      break;
    ++v14;
  }
  while ((unint64_t)v12 > a3);
  if ((v14 & 1) == 0)
    goto LABEL_40;
  return a2;
}

uint64_t _pcre2_ord2utf_8(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int v4;

  v2 = 0;
  while (_pcre2_utf8_table1[v2] < (signed int)a1)
  {
    if (++v2 == 6)
    {
      LODWORD(v2) = 6;
      break;
    }
  }
  v3 = (_BYTE *)(a2 + v2);
  if ((int)v2 >= 1)
  {
    v4 = v2 + 1;
    do
    {
      *v3-- = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v4 > 1);
  }
  *v3 = _pcre2_utf8_table2[4 * v2] | a1;
  return (v2 + 1);
}

_QWORD *pcre2_code_copy_8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    memcpy(v2, (const void *)a1, *(_QWORD *)(a1 + 72));
    v3[4] = 0;
    if ((*(_BYTE *)(a1 + 98) & 4) != 0)
      ++*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1088);
  }
  return v3;
}

uint64_t pcre2_code_free_8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (v2)
      _pcre2_jit_free_8(v2, v1);
    if ((*(_BYTE *)(v1 + 98) & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = *(_QWORD *)(v3 + 1088);
      if (v4)
      {
        v5 = v4 - 1;
        *(_QWORD *)(v3 + 1088) = v5;
        if (!v5)
          (*(void (**)(void))(v1 + 8))();
      }
    }
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t _pcre2_check_escape_8(unsigned __int8 **a1, unint64_t a2, int *a3, int *a4, unsigned int a5, char a6, int a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v13;
  unsigned __int8 *v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  _BOOL4 v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;

  v9 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    result = 0;
    v16 = 101;
    goto LABEL_7;
  }
  v14 = v9 + 1;
  v13 = *v9;
  v68 = v9 + 1;
  if ((a5 & 0x80000) != 0 && v13 >= 0xC0)
  {
    if ((v13 & 0x20) != 0)
    {
      v17 = *v14 & 0x3F;
      if ((v13 & 0x10) != 0)
      {
        if ((v13 & 8) != 0)
        {
          v18 = v9[2] & 0x3F;
          v19 = v9[3] & 0x3F;
          v20 = v9[4] & 0x3F;
          if ((v13 & 4) != 0)
          {
            v13 = ((v13 & 1) << 30) | (v17 << 24) | (v18 << 18) | (v19 << 12) | (v20 << 6) | v9[5] & 0x3F;
            v14 = v9 + 6;
          }
          else
          {
            v13 = ((v13 & 3) << 24) | (v17 << 18) | (v18 << 12) | (v19 << 6) | v20;
            v14 = v9 + 5;
          }
        }
        else
        {
          v13 = ((v13 & 7) << 18) | (v17 << 12) | ((v9[2] & 0x3F) << 6) | v9[3] & 0x3F;
          v14 = v9 + 4;
        }
      }
      else
      {
        v13 = ((v13 & 0xF) << 12) | (v17 << 6) | v9[2] & 0x3F;
        v14 = v9 + 3;
      }
      v68 = v14;
    }
    else
    {
      v14 = v9 + 2;
      v68 = v9 + 2;
      v13 = v9[1] & 0x3F | ((v13 & 0x1F) << 6);
    }
  }
  *a4 = 0;
  if ((v13 - 123) < 0xFFFFFFB5)
    goto LABEL_17;
  v21 = escapes[v13 - 48];
  if (escapes[v13 - 48])
  {
    if (v21 >= 1)
    {
      if (v13 == 114)
      {
        result = 0;
        if ((a6 & 0x10) != 0)
          v13 = 10;
        else
          v13 = 13;
      }
      else
      {
        result = 0;
        v13 = escapes[v13 - 48];
      }
      goto LABEL_18;
    }
    result = -v21;
    if (a8)
    {
      if (v13 > 87)
      {
        if (v13 != 112 && v13 != 88)
          goto LABEL_18;
LABEL_65:
        *(_DWORD *)(a8 + 208) |= 0x100000u;
        goto LABEL_18;
      }
      if (v13 != 78)
      {
        if (v13 != 80)
          goto LABEL_18;
        goto LABEL_65;
      }
    }
    else if (v13 != 78)
    {
      goto LABEL_18;
    }
    if ((unint64_t)v14 >= a2 || *v14 != 123)
    {
LABEL_114:
      result = 12;
      v13 = 78;
      goto LABEL_18;
    }
    v67 = v14 + 1;
    if ((uint64_t)(a2 - (_QWORD)(v14 + 1)) < 2 || v14[1] != 85 || (v29 = v14[2], v14 += 2, v29 != 43))
    {
      if (read_repeat_counts(&v67, a2, 0, 0, a4) || *a4)
        goto LABEL_114;
      v30 = 137;
      goto LABEL_113;
    }
    if ((a5 & 0x80000) == 0)
    {
      v30 = 193;
LABEL_113:
      *a4 = v30;
      goto LABEL_114;
    }
    goto LABEL_134;
  }
  v66 = 0;
  v22 = (a6 & 0x20 | a5 & 2) != 0;
  if (!a8)
  {
    if ((v13 - 99) <= 0x15 && ((1 << (v13 - 99)) & 0x201001) != 0)
    {
      v22 = 0;
      goto LABEL_31;
    }
    result = 0;
    v16 = 103;
LABEL_7:
    *a4 = v16;
    return result;
  }
LABEL_31:
  if (v13 <= 84)
  {
    switch(v13)
    {
      case '0':
        goto LABEL_35;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (a7)
          goto LABEL_34;
        v31 = v14 - 1;
        v68 = v14 - 1;
        *a4 = 0;
        if ((unint64_t)(v14 - 1) >= a2)
          goto LABEL_17;
        v32 = *v31;
        if (v32 - 48 > 9)
          goto LABEL_17;
        v33 = 0;
        break;
      case 'F':
      case 'L':
        goto LABEL_78;
      default:
        goto LABEL_115;
    }
    while ((unint64_t)v31 < a2)
    {
      v34 = *v31;
      if ((v34 - 48) > 9)
        break;
      ++v31;
      v33 = v34 + 10 * v33 - 48;
      if (v33 >= 0xCCCCCCC)
      {
        result = 0;
        *a4 = 161;
        v68 = v31;
        goto LABEL_18;
      }
    }
    v68 = v31;
    if (v33 >= 0xA)
    {
      if (v32 <= 0x37 && (signed int)v33 > *(_DWORD *)(a8 + 212))
      {
        v68 = v14;
LABEL_34:
        if (v13 <= 0x37)
        {
LABEL_35:
          v24 = 0;
          v13 -= 48;
          v25 = v14;
          while ((unint64_t)&v14[v24] < a2)
          {
            v26 = v14[v24];
            if ((v26 & 0xF8) != 0x30)
            {
              v25 = &v14[v24];
              break;
            }
            ++v25;
            v13 = v26 + 8 * v13 - 48;
            if ((_DWORD)++v24 == 2)
            {
              v25 = v14 + 2;
              break;
            }
          }
          result = 0;
          v68 = v25;
          if ((a5 & 0x80000) == 0 && v13 >= 0x100)
          {
            result = 0;
            v35 = 151;
            goto LABEL_91;
          }
          goto LABEL_18;
        }
LABEL_17:
        result = 0;
        goto LABEL_18;
      }
      if (v33 >= 0x10000)
      {
        result = 0;
        v35 = 161;
        goto LABEL_91;
      }
    }
    result = -v33;
    goto LABEL_18;
  }
  if (v13 > 107)
  {
    if (v13 <= 116)
    {
      if (v13 == 108)
      {
LABEL_78:
        result = 0;
        v35 = 137;
        goto LABEL_91;
      }
      if (v13 == 111)
      {
        if ((unint64_t)v14 < a2 && (v27 = *v14, ++v14, v68 = v14, v27 == 123))
        {
          if ((unint64_t)v14 < a2 && *v14 != 125)
          {
            v13 = 0;
            if ((a5 & 0x80000) != 0)
              v52 = 1114111;
            else
              v52 = 255;
            v53 = a2 - (_QWORD)v14;
            do
            {
              v54 = *v14;
              if ((v54 & 0xF8) != 0x30)
                goto LABEL_165;
              if (v13 || v54 != 48)
              {
                v13 = v54 + 8 * v13 - 48;
                if (v13 > v52)
                {
                  v65 = v14 + 1;
                  v68 = v65;
                  if ((unint64_t)v65 >= a2)
                    goto LABEL_231;
                  do
                  {
                    if ((*v65 & 0xF8) != 0x30)
                      goto LABEL_231;
                    ++v65;
                  }
                  while ((unint64_t)v65 < a2);
LABEL_230:
                  v65 = (unsigned __int8 *)a2;
LABEL_231:
                  result = 0;
                  v68 = v65;
                  v35 = 134;
                  goto LABEL_91;
                }
              }
              else
              {
                v13 = 0;
              }
              ++v14;
              --v53;
            }
            while (v53);
            v14 = (unsigned __int8 *)a2;
LABEL_165:
            if ((unint64_t)v14 >= a2)
            {
              v55 = v14;
            }
            else
            {
              v55 = v14 + 1;
              v68 = v14 + 1;
              if (*v14 == 125)
              {
                result = 0;
                if ((a5 & 0x80000) == 0 || (a6 & 1) != 0 || (v13 & 0xFFFFF800) != 0xD800)
                  goto LABEL_18;
LABEL_195:
                result = 0;
                v68 = v14;
                v35 = 173;
                goto LABEL_91;
              }
            }
            result = 0;
            v68 = v55 - 1;
            v35 = 164;
            goto LABEL_91;
          }
          result = 0;
          v28 = 178;
        }
        else
        {
          result = 0;
          v68 = v14 - 1;
          v28 = 155;
        }
        *a4 = v28;
        v13 = 111;
        goto LABEL_18;
      }
      goto LABEL_115;
    }
    if (v13 != 117)
    {
      if (v13 == 120)
      {
        if (!v22)
        {
          if ((unint64_t)v14 >= a2)
            goto LABEL_153;
          v45 = *v14;
          if (v45 == 123)
          {
LABEL_134:
            v68 = ++v14;
            if ((unint64_t)v14 < a2 && *v14 != 125)
            {
              v13 = 0;
              v56 = a2 - (_QWORD)v14;
              do
              {
                v57 = *v14;
                v58 = xdigitab[v57];
                if (v58 == 255)
                  goto LABEL_189;
                if (v13 || (_DWORD)v57 != 48)
                {
                  v13 = v58 | (16 * v13);
                  v60 = (a5 & 0x80000) == 0 && v13 > 0xFF;
                  if (((v13 > 0x10FFFF) & (a5 >> 19)) != 0 || v60)
                  {
                    v65 = v14 + 1;
                    v68 = v65;
                    if ((unint64_t)v65 < a2)
                    {
                      while (xdigitab[*v65] != 255)
                      {
                        if ((unint64_t)++v65 >= a2)
                          goto LABEL_230;
                      }
                    }
                    goto LABEL_231;
                  }
                }
                else
                {
                  v13 = 0;
                }
                ++v14;
                --v56;
              }
              while (v56);
              v14 = (unsigned __int8 *)a2;
LABEL_189:
              if ((unint64_t)v14 >= a2)
              {
                v61 = v14;
              }
              else
              {
                v61 = v14 + 1;
                v68 = v14 + 1;
                if (*v14 == 125)
                {
                  result = 0;
                  if ((a6 & 1) != 0
                    || (a5 & 0x80000) == 0
                    || v13 >> 11 < 0x1B
                    || v13 >> 13 > 6)
                  {
                    goto LABEL_18;
                  }
                  goto LABEL_195;
                }
              }
              result = 0;
              v68 = v61 - 1;
              v35 = 167;
              goto LABEL_91;
            }
            result = 0;
            v35 = 178;
LABEL_91:
            *a4 = v35;
            goto LABEL_18;
          }
          v13 = xdigitab[v45];
          if (v13 == 255)
          {
LABEL_153:
            v13 = 0;
          }
          else
          {
            v68 = v14 + 1;
            if ((unint64_t)(v14 + 1) < a2)
            {
              v51 = xdigitab[v14[1]];
              if (v51 != 255)
              {
                result = 0;
                v68 = v14 + 2;
                v13 = v51 | (16 * v13);
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        if ((uint64_t)(a2 - (_QWORD)v14) < 2
          || (v36 = xdigitab[*v14], v36 == 255)
          || (v37 = xdigitab[v14[1]], v37 == 255))
        {
          result = 0;
          v13 = 120;
          goto LABEL_18;
        }
        result = 0;
        v13 = v37 | (16 * v36);
        v38 = v14 + 2;
LABEL_139:
        v68 = v38;
        goto LABEL_18;
      }
      goto LABEL_115;
    }
    if (v22)
    {
      if ((unint64_t)v14 < a2)
      {
        v39 = *v14;
        if ((a6 & 0x20) != 0 && (_DWORD)v39 == 123)
        {
          if ((unint64_t)(v14 + 1) < a2)
          {
            v40 = 0;
            v41 = 0;
            while (1)
            {
              v42 = &v14[v40];
              v43 = xdigitab[v14[v40 + 1]];
              if (v43 == 255)
                break;
              if (v41 >> 28)
              {
                *a4 = 177;
                v62 = &v14[v40 + 1];
                v68 = v62;
                goto LABEL_198;
              }
              result = 0;
              v41 = v43 | (16 * v41);
              ++v40;
              v13 = 117;
              if (~(unint64_t)v14 + a2 == v40)
                goto LABEL_18;
            }
            v62 = v14;
LABEL_198:
            if (v42 != v62 && v42[1] == 125)
            {
              v50 = &v14[v40 + 2];
LABEL_201:
              v68 = v50;
              if ((a5 & 0x80000) != 0)
              {
                if (v41 < 0x110000)
                {
                  result = 0;
                  if ((a6 & 1) != 0 || (v41 & 0xFFFFF800) != 0xD800)
                    goto LABEL_233;
                  result = 0;
                  v63 = 173;
                  goto LABEL_221;
                }
              }
              else if (v41 < 0x100)
              {
                result = 0;
                goto LABEL_233;
              }
              result = 0;
              v63 = 177;
LABEL_221:
              *a4 = v63;
LABEL_233:
              v13 = v41;
              goto LABEL_18;
            }
          }
        }
        else if ((uint64_t)(a2 - (_QWORD)v14) >= 4)
        {
          v46 = xdigitab[v39];
          if (v46 != 255)
          {
            v47 = xdigitab[v14[1]];
            if (v47 != 255)
            {
              v48 = xdigitab[v14[2]];
              if (v48 != 255)
              {
                v49 = xdigitab[v14[3]];
                if (v49 != 255)
                {
                  v41 = v49 | (16 * ((16 * v47) | (v46 << 8) | v48));
                  v50 = v14 + 4;
                  goto LABEL_201;
                }
              }
            }
          }
        }
      }
      result = 0;
    }
    else
    {
      result = 0;
      *a4 = 137;
    }
    v13 = 117;
    goto LABEL_18;
  }
  switch(v13)
  {
    case 'U':
      result = 0;
      if (!v22)
        *a4 = 137;
      v13 = 85;
      goto LABEL_18;
    case 'c':
      if ((unint64_t)v14 >= a2)
      {
        result = 0;
        *a4 = 102;
        v13 = 99;
        goto LABEL_18;
      }
      v13 = *v14;
      if ((v13 - 97) < 0x1A)
        v13 -= 32;
      if ((v13 - 127) <= 0xFFFFFFA0)
      {
        result = 0;
        v35 = 168;
        goto LABEL_91;
      }
      result = 0;
      v13 ^= 0x40u;
      v38 = v14 + 1;
      goto LABEL_139;
    case 'g':
      if (a7)
      {
LABEL_77:
        result = 0;
LABEL_216:
        v13 = 103;
        goto LABEL_18;
      }
      if ((unint64_t)v14 >= a2)
        goto LABEL_214;
      v44 = *v14;
      result = 27;
      v13 = 103;
      if (v44 != 39 && v44 != 60)
      {
        if (v44 == 123)
        {
          v67 = v14 + 1;
          if (!read_number(&v67, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v66, a4))
          {
            if (*a4)
              result = 0;
            else
              result = 28;
            goto LABEL_216;
          }
          if ((unint64_t)v67 < a2 && *v67 == 125)
          {
            v68 = v67 + 1;
LABEL_172:
            if (v66 > 0)
            {
              result = -v66;
              goto LABEL_216;
            }
            result = 0;
            v64 = 115;
LABEL_215:
            *a4 = v64;
            goto LABEL_216;
          }
        }
        else
        {
          if (read_number(&v68, a2, *(_DWORD *)(a8 + 212), 0xFFFFu, 161, &v66, a4))
            goto LABEL_172;
          if (*a4)
            goto LABEL_77;
        }
LABEL_214:
        result = 0;
        v64 = 157;
        goto LABEL_215;
      }
LABEL_18:
      *a1 = v68;
      *a3 = v13;
      return result;
  }
LABEL_115:
  result = 0;
  *a4 = 103;
  *a1 = v14 - 1;
  return result;
}

uint64_t read_repeat_counts(unsigned __int8 **a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v13;
  int v14;
  int v15;

  v5 = 0;
  v6 = *a1;
  *a5 = 0;
  if ((unint64_t)v6 < a2)
  {
    if (*v6 - 48 <= 9)
    {
      v7 = 0;
      v8 = v6 + 1;
      while (1)
      {
        v9 = v8 - 1;
        if ((unint64_t)(v8 - 1) >= a2)
          return 0;
        v10 = *v9;
        if ((v10 - 48) > 9)
          break;
        v7 = v10 + 10 * v7 - 48;
        ++v8;
        if (v7 >= 0x10000)
        {
          v5 = 0;
          *a5 = 105;
          --v8;
LABEL_21:
          *a1 = v8;
          return v5;
        }
      }
      v11 = v7;
      if (v10 == 125)
      {
LABEL_16:
        v8 = v9 + 1;
        if (a3)
          *a3 = v7;
        if (a4)
          *a4 = v11;
        v5 = 1;
        goto LABEL_21;
      }
      if (v10 == 44 && (unint64_t)v8 < a2)
      {
        v13 = *v8;
        if (v13 == 125)
        {
          v11 = 0x10000;
LABEL_15:
          v9 = v8;
          goto LABEL_16;
        }
        if ((v13 - 48) <= 9)
        {
          v11 = 0;
          while ((unint64_t)v8 < a2)
          {
            v14 = *v8;
            if ((v14 - 48) > 9)
              goto LABEL_29;
            ++v8;
            v11 = v14 + 10 * v11 - 48;
            if (v11 >= 0x10000)
            {
              v5 = 0;
              v15 = 105;
LABEL_33:
              *a5 = v15;
              goto LABEL_21;
            }
          }
          v8 = (unsigned __int8 *)a2;
LABEL_29:
          if ((unint64_t)v8 < a2 && *v8 == 125)
          {
            if (v11 >= v7)
              goto LABEL_15;
            v5 = 0;
            v15 = 104;
            goto LABEL_33;
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t read_number(unsigned __int8 **a1, unint64_t a2, int a3, unsigned int a4, int a5, int *a6, int *a7)
{
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;

  v7 = 0;
  v8 = *a1;
  *a7 = 0;
  if (a3 < 0 || (unint64_t)v8 >= a2)
  {
    v14 = 0;
  }
  else
  {
    v9 = *v8;
    v10 = a4 - a3;
    if (v9 != 43)
      v10 = a4;
    v11 = v9 == 43;
    if (v9 == 43)
      v12 = v8 + 1;
    else
      v12 = v8;
    v13 = v9 == 45;
    if (v9 == 45)
    {
      v7 = 1;
    }
    else
    {
      a4 = v10;
      v7 = v9 == 43;
    }
    v14 = !v13 && v11;
    if (v13)
      ++v8;
    else
      v8 = v12;
  }
  if ((unint64_t)v8 < a2 && *v8 - 48 <= 9)
  {
    v15 = 0;
    while ((unint64_t)v8 < a2)
    {
      v16 = *v8;
      if ((v16 - 48) > 9)
        break;
      ++v8;
      v15 = v16 + 10 * v15 - 48;
      if (v15 > a4)
      {
        v17 = 0;
        *a7 = a5;
        goto LABEL_38;
      }
    }
    v18 = !v7;
    if (a3 < 0)
      v18 = 1;
    if ((v18 & 1) != 0)
      goto LABEL_37;
    if (v15)
    {
      if (v14)
      {
        v15 += a3;
LABEL_37:
        v17 = 1;
        goto LABEL_38;
      }
      if (v15 <= a3)
      {
        v15 = a3 - v15 + 1;
        goto LABEL_37;
      }
      v17 = 0;
      v19 = 115;
    }
    else
    {
      v17 = 0;
      v19 = 126;
    }
    *a7 = v19;
LABEL_38:
    *a6 = v15;
    *a1 = v8;
    return v17;
  }
  return 0;
}

uint64_t pcre2_compile_8()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unsigned int v2;
  int *v3;
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 *recurse;
  __int128 *v44;
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  int v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned __int8 *v74;
  unsigned int v75;
  int v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *bracket_8;
  _DWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int firstassertedcu;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  char *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  __int16 v106;
  int v107;
  int v108;
  __int16 v109;
  unsigned __int8 *v110;
  __int128 *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  unsigned __int8 *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[12];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _DWORD v132[33];
  _BYTE v133[12000];
  uint64_t v134;
  _BYTE v135[4096];
  _QWORD v136[131];

  v0 = (unsigned __int8 *)MEMORY[0x1E0C80A78]();
  v6 = 0;
  v136[128] = *MEMORY[0x1E0C80C00];
  v115 = 1;
  v116 = 0;
  v132[0] = 0;
  v117 = 0;
  v113 = 0;
  v114 = 0;
  if (!v3)
    return v6;
  v7 = v4;
  if (!v4)
    return v6;
  v8 = v3;
  v9 = v0;
  *v3 = 100;
  *v4 = 0;
  if (!v0)
  {
    v6 = 0;
    v14 = 116;
    goto LABEL_14;
  }
  v10 = v2;
  if (v5)
    v11 = v5;
  else
    v11 = &_pcre2_default_compile_context_8;
  if ((v2 & 0x18000000) != 0 || (v12 = *((_DWORD *)v11 + 16), v12 >= 0x40))
  {
    v6 = 0;
    v14 = 117;
    goto LABEL_14;
  }
  v13 = v1;
  if ((v2 & 0x2000000) != 0 && v12 & 0xFFFFFFF3 | v2 & 0x1976FEF3)
  {
    v6 = 0;
    v14 = 192;
LABEL_14:
    *v8 = v14;
    return v6;
  }
  if (v1 == -1)
    v13 = _pcre2_strlen_8(v0);
  if (v13 > *((_QWORD *)v11 + 6))
  {
    v6 = 0;
    v14 = 188;
    goto LABEL_14;
  }
  v130 = 0u;
  v131 = 0u;
  v16 = (v10 >> 7) & 0x80000 | v10;
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  memset(v123, 0, sizeof(v123));
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  if (*((_QWORD *)v11 + 5))
    v17 = (char *)*((_QWORD *)v11 + 5);
  else
    v17 = (char *)&_pcre2_default_tables_8;
  *(_QWORD *)&v119 = v17 + 256;
  *((_QWORD *)&v119 + 1) = v17 + 512;
  v100 = v17;
  *(_QWORD *)&v118 = v11;
  *((_QWORD *)&v118 + 1) = v17;
  *(_QWORD *)&v128 = v136;
  *(_QWORD *)((char *)&v131 + 4) = 0;
  *(_QWORD *)&v125 = &v134;
  HIDWORD(v125) = (v10 >> 7) & 0x80000 | v10;
  DWORD2(v125) = 20;
  *(_QWORD *)&v127 = v135;
  v123[11] = 0;
  *(_QWORD *)&v126 = 0;
  DWORD2(v126) = 0;
  v122 = (unint64_t)&v9[v13];
  v124 = 0uLL;
  *(_QWORD *)((char *)&v130 + 4) = 0;
  *(_QWORD *)&v121 = v133;
  *((_QWORD *)&v121 + 1) = v9;
  *(_QWORD *)&v120 = v17 + 832;
  *((_QWORD *)&v120 + 1) = v133;
  v123[0] = 6000;
  *((_QWORD *)&v128 + 1) = 0;
  *(_QWORD *)&v18 = -1;
  *((_QWORD *)&v18 + 1) = -1;
  *(_OWORD *)&v123[1] = v18;
  *(_OWORD *)&v123[3] = v18;
  *(_OWORD *)&v123[5] = v18;
  *(_OWORD *)&v123[7] = v18;
  *(_OWORD *)&v123[9] = v18;
  v111 = v11;
  if ((v10 & 0x2000000) != 0 || (v19 = v13 - 2, v13 < 2))
  {
    v24 = 0;
    LODWORD(v39) = 0;
    v22 = 0;
    v21 = 0;
    v101 = -1;
    v102 = -1;
    v103 = -1;
LABEL_63:
    v40 = &v9[v39];
    v41 = HIDWORD(v125);
    if ((HIDWORD(v125) & 0x80000) != 0)
    {
      if ((v10 & 0x1000) != 0)
      {
        v6 = 0;
        LODWORD(recurse) = 174;
        goto LABEL_78;
      }
      v42 = HIDWORD(v125);
      if ((v10 & 0x40000000) == 0)
      {
        v97 = v24;
        v105 = v21;
        v108 = v22;
        LODWORD(recurse) = _pcre2_valid_utf_8(v9, v13, v7);
        v112 = (int)recurse;
        if ((_DWORD)recurse)
        {
          v6 = 0;
          v44 = v111;
          goto LABEL_102;
        }
        v42 = HIDWORD(v125);
        v41 = HIDWORD(v125);
        v24 = v97;
        v21 = v105;
        v22 = v108;
      }
    }
    else
    {
      v42 = HIDWORD(v125);
    }
    if ((~v42 & 0x20800) == 0)
    {
      v6 = 0;
      LODWORD(recurse) = 175;
LABEL_78:
      v112 = (int)recurse;
      goto LABEL_79;
    }
    if (!v21)
      LOWORD(v21) = *((_WORD *)v111 + 28);
    if (!v22)
      v22 = *((unsigned __int16 *)v111 + 29);
    LODWORD(v129) = 0;
    v95 = v41;
    v45 = v39;
    v99 = v16;
    switch(v22)
    {
      case 1:
        DWORD1(v129) = 1;
        v46 = 13;
        goto LABEL_82;
      case 2:
        DWORD1(v129) = 1;
        v46 = 10;
LABEL_82:
        LOBYTE(v130) = v46;
        break;
      case 3:
        DWORD1(v129) = 2;
        LOWORD(v130) = 2573;
        break;
      case 4:
        v47 = 1;
        goto LABEL_86;
      case 5:
        v47 = 2;
LABEL_86:
        LODWORD(v129) = v47;
        break;
      case 6:
        DWORD1(v129) = 1;
        LOBYTE(v130) = 0;
        break;
      default:
        v6 = 0;
        LODWORD(recurse) = 156;
        goto LABEL_78;
    }
    v48 = v24;
    v106 = v21;
    v109 = v22;
    v49 = v13 - v45;
    if ((v111[4] & 0xC) != 0)
      v49 += 4;
    if ((v10 & 4) != 0)
      v50 = 5 * v49 + 5;
    else
      v50 = v49;
    v98 = v42;
    if (v50 <= 0x3FF)
    {
      v51 = v127;
      v52 = v42;
    }
    else
    {
      v51 = (*(uint64_t (**)(unint64_t, _QWORD))v111)(4 * v50 + 4, *((_QWORD *)v111 + 2));
      if (!v51)
      {
        v6 = 0;
        *v8 = 121;
        v44 = v111;
        goto LABEL_103;
      }
      *(_QWORD *)&v127 = v51;
      v52 = HIDWORD(v125);
    }
    *((_QWORD *)&v127 + 1) = v51 + 4 * v50 + 4;
    LODWORD(recurse) = parse_regex(v40, v52, v132, &v118);
    v112 = (int)recurse;
    if ((_DWORD)recurse)
      goto LABEL_98;
    v53 = DWORD1(v126);
    if (DWORD1(v126) <= 0xFF)
    {
      v54 = (void *)v128;
    }
    else
    {
      v54 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v111)(4 * (DWORD1(v126) + 1), *((_QWORD *)v111 + 2));
      *(_QWORD *)&v128 = v54;
      if (!v54)
      {
        v6 = 0;
        LODWORD(recurse) = 121;
        v112 = 121;
        v123[11] = 0;
        goto LABEL_99;
      }
      v53 = DWORD1(v126);
    }
    bzero(v54, 4 * (v53 + 1));
    if (v132[0])
    {
      LODWORD(recurse) = check_lookbehinds((unsigned int *)v127, 0, 0, (uint64_t)&v118);
      v112 = (int)recurse;
      if ((_DWORD)recurse)
        goto LABEL_98;
    }
    v123[11] = v13;
    v116 = (unsigned int *)v127;
    v117 = v133;
    v133[0] = -122;
    compile_regex(HIDWORD(v125), &v117, &v116, &v112, 0, (unsigned int *)&v113 + 1, (int *)&v114 + 1, (unsigned int *)&v113, (int *)&v114, 0, (uint64_t)&v118, &v115);
    LODWORD(recurse) = v112;
    if (v112)
    {
LABEL_98:
      v6 = 0;
LABEL_99:
      v44 = v111;
LABEL_100:
      v40 = &v9[v123[11]];
      goto LABEL_101;
    }
    if (v115 > 0x10000)
    {
      v6 = 0;
      LODWORD(recurse) = 120;
      v112 = 120;
      goto LABEL_99;
    }
    v55 = v115 + WORD1(v124) * (unint64_t)(unsigned __int16)v124 + 136;
    v56 = (*(uint64_t (**)(unint64_t, _QWORD))v111)(v55, *((_QWORD *)v111 + 2));
    v6 = v56;
    if (!v56)
    {
      LODWORD(recurse) = 121;
      v112 = 121;
      v44 = v111;
      goto LABEL_100;
    }
    *(_QWORD *)(v56 + 128) = 0;
    v57 = *((_QWORD *)v111 + 2);
    *(_OWORD *)v56 = *v111;
    *(_QWORD *)(v56 + 16) = v57;
    *(_QWORD *)(v56 + 24) = v100;
    *(_QWORD *)(v56 + 32) = 0;
    *(_OWORD *)(v56 + 40) = 0u;
    *(_OWORD *)(v56 + 56) = 0u;
    *(_QWORD *)(v56 + 72) = v55;
    *(_DWORD *)(v56 + 80) = 1346589253;
    *(_DWORD *)(v56 + 84) = v99;
    v58 = HIDWORD(v125);
    *(_DWORD *)(v6 + 88) = HIDWORD(v125);
    *(_DWORD *)(v6 + 92) = *((_DWORD *)v111 + 16);
    *(_DWORD *)(v6 + 96) = v48 | v126 | 1;
    *(_DWORD *)(v6 + 100) = v102;
    *(_DWORD *)(v6 + 104) = v101;
    *(_DWORD *)(v6 + 108) = v103;
    *(_QWORD *)(v6 + 112) = 0;
    *(_WORD *)(v6 + 120) = v106;
    *(_WORD *)(v6 + 122) = v109;
    *(_QWORD *)(v6 + 124) = 0;
    v59 = WORD1(v124);
    *(_WORD *)(v6 + 132) = WORD1(v124);
    v60 = (unsigned __int16)v124;
    *(_WORD *)(v6 + 134) = v124;
    DWORD1(v124) = 0;
    DWORD2(v126) = 0;
    *((_QWORD *)&v122 + 1) = v6 + 136;
    v110 = (unsigned __int8 *)(v6 + 136 + v60 * (unint64_t)v59);
    *(_QWORD *)&v121 = v110;
    *((_QWORD *)&v130 + 1) = 0;
    LODWORD(v131) = 0;
    *((_QWORD *)&v124 + 1) = 0;
    if (v60)
    {
      v61 = 0;
      v62 = v125;
      do
      {
        add_name_to_table((uint64_t)&v118, *(void **)v62, *(unsigned __int16 *)(v62 + 12), *(_DWORD *)(v62 + 8), v61++);
        v62 += 16;
      }
      while (v61 < (unsigned __int16)v124);
      v58 = *(_DWORD *)(v6 + 88);
    }
    v116 = (unsigned int *)v127;
    v117 = v110;
    *v110 = -122;
    if ((compile_regex(v58, &v117, &v116, &v112, 0, (unsigned int *)&v113 + 1, (int *)&v114 + 1, (unsigned int *)&v113, (int *)&v114, 0, (uint64_t)&v118, 0) & 0x80000000) != 0)*(_DWORD *)(v6 + 96) |= 0x2000u;
    *(_WORD *)(v6 + 128) = WORD2(v126);
    *(_WORD *)(v6 + 130) = WORD4(v128);
    *(_WORD *)(v6 + 124) = WORD2(v130);
    if (HIDWORD(v130))
    {
      LODWORD(v113) = 0;
      LODWORD(v114) = -1;
      *(_DWORD *)(v6 + 96) |= 0x800000u;
    }
    v65 = v117;
    *v117 = 0;
    v117 = v65 + 1;
    v66 = v65 + 1 - v110;
    v67 = v66 > v115;
    v68 = v66 - v115;
    if (v67)
    {
      LODWORD(recurse) = 123;
LABEL_135:
      v112 = (int)recurse;
LABEL_162:
      v44 = v111;
      goto LABEL_100;
    }
    *(_QWORD *)(v6 + 72) += v68;
    LODWORD(recurse) = v112;
    if (!v112)
    {
      if (DWORD1(v131))
      {
        v69 = (v95 >> 19) & 1;
        recurse = find_recurse(v110, v69);
        if (recurse)
        {
          v70 = recurse;
          v71 = 0;
          v72 = 8;
          while (1)
          {
            v73 = __rev16(*(unsigned __int16 *)(v70 + 1));
            if (v73)
            {
              v74 = v110;
              if (!v71)
                goto LABEL_151;
              v75 = v71;
              v74 = v110;
              v76 = v72;
              while (1)
              {
                v77 = &v132[4 * v76 + 1];
                v78 = v77[2];
                if (v73 == v78)
                  break;
                if (v73 > v78)
                  v74 = *(unsigned __int8 **)v77;
                v76 = ((_BYTE)v76 + 1) & 7;
                if (!--v75)
                  goto LABEL_151;
              }
              v79 = *(_QWORD *)v77;
              if (!*(_QWORD *)v77)
              {
LABEL_151:
                bracket_8 = _pcre2_find_bracket_8(v74, v69, v73);
                if (!bracket_8)
                {
                  LODWORD(recurse) = 153;
                  v112 = 153;
                  break;
                }
                LODWORD(v79) = (_DWORD)bracket_8;
                if (v72 >= 1)
                  --v72;
                else
                  v72 = 7;
                v81 = &v132[4 * v72 + 1];
                v81[2] = v73;
                *(_QWORD *)v81 = bracket_8;
                if (v71 < 8)
                  ++v71;
              }
            }
            else
            {
              LODWORD(v79) = (_DWORD)v110;
            }
            *(_WORD *)(v70 + 1) = bswap32(v79 - (_DWORD)v110) >> 16;
            v70 = find_recurse(v70 + 3, v69);
            if (!v70)
            {
              LODWORD(recurse) = v112;
              break;
            }
          }
        }
      }
    }
    if ((_DWORD)recurse)
      goto LABEL_162;
    v82 = *(_DWORD *)(v6 + 88);
    if ((v82 & 0x4000) == 0)
    {
      if (_pcre2_auto_possessify_8(v110, (uint64_t)&v118))
      {
        LODWORD(recurse) = 180;
        goto LABEL_135;
      }
      v82 = *(_DWORD *)(v6 + 88);
    }
    if ((v82 & 0x80000000) == 0 && is_anchored(v110, 0, (uint64_t)&v118, 0, 0))
    {
      v82 |= 0x80000000;
      *(_DWORD *)(v6 + 88) = v82;
    }
    if ((v82 & 0x10000) != 0)
    {
LABEL_211:
      v44 = v111;
      goto LABEL_103;
    }
    v83 = v95 & 0x80000;
    v84 = v98 & 0x20000;
    v85 = HIDWORD(v114);
    if (v114 < 0)
    {
      firstassertedcu = find_firstassertedcu(v110, (int *)&v114 + 1, 0);
      HIDWORD(v113) = firstassertedcu;
      v85 = HIDWORD(v114);
      if (v114 < 0)
      {
        if ((*(_DWORD *)(v6 + 88) & 0x80000000) != 0
          || !is_startline(v110, 0, (uint64_t)&v118, 0, 0))
        {
          v88 = 0;
          goto LABEL_190;
        }
        v88 = 0;
        v89 = *(_DWORD *)(v6 + 96) | 0x200;
        goto LABEL_188;
      }
    }
    else
    {
      firstassertedcu = HIDWORD(v113);
    }
    *(_DWORD *)(v6 + 112) = firstassertedcu;
    v87 = *(_DWORD *)(v6 + 96);
    *(_DWORD *)(v6 + 96) = v87 | 0x10;
    if ((v85 & 1) == 0)
    {
LABEL_179:
      v88 = 1;
LABEL_190:
      LOBYTE(v64) = v114;
      if ((v114 & 0x80000000) != 0)
        goto LABEL_204;
      v90 = *(_DWORD *)(v6 + 88);
      if (v85 < 0 || (v90 & 0x80000) == 0 || (firstassertedcu & 0x80) == 0 || (v113 & 0x80) == 0)
        ++v88;
      if ((v114 & 2) == 0 && v90 < 0)
        goto LABEL_204;
      v91 = v113;
      *(_DWORD *)(v6 + 116) = v113;
      v92 = *(_DWORD *)(v6 + 96);
      *(_DWORD *)(v6 + 96) = v92 | 0x80;
      if ((v64 & 1) == 0)
        goto LABEL_204;
      if (v91 >= 0x80 && (v84 | v83 || v91 > 0xFE))
      {
        if (v83
          || !v84
          || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                             * _pcre2_ucd_stage2_8[(int)(v91
                                                                       - (v64 & 0xFFFFFF80)
                                                                       + (_pcre2_ucd_stage1_8[(int)v91 / 128] << 7))]
                                             + 4])
        {
          goto LABEL_204;
        }
      }
      else if ((_DWORD)v91 == *(unsigned __int8 *)(v119 + v91))
      {
LABEL_204:
        if (_pcre2_study_8(v6))
        {
          LODWORD(recurse) = 131;
          goto LABEL_135;
        }
        if (((v88 == 0) & (*(unsigned __int8 *)(v6 + 96) >> 6)) != 0)
          v93 = 1;
        else
          v93 = v88;
        if (v93 > *(unsigned __int16 *)(v6 + 126))
          *(_WORD *)(v6 + 126) = v93;
        goto LABEL_211;
      }
      *(_DWORD *)(v6 + 96) = v92 | 0x180;
      goto LABEL_204;
    }
    if (firstassertedcu >= 0x80 && (v84 | v83 || firstassertedcu > 0xFE))
    {
      v88 = 1;
      if (v83
        || !v84
        || !*(_DWORD *)&_pcre2_ucd_records_8[12
                                           * _pcre2_ucd_stage2_8[firstassertedcu
                                                               - (v63 & 0xFFFFFF80)
                                                               + (_pcre2_ucd_stage1_8[(int)firstassertedcu / 128] << 7)]
                                           + 4])
      {
        goto LABEL_190;
      }
      v89 = v87 | 0x30;
    }
    else
    {
      if (firstassertedcu == *(unsigned __int8 *)(v119 + firstassertedcu))
        goto LABEL_179;
      v89 = v87 | 0x30;
      v88 = 1;
    }
LABEL_188:
    *(_DWORD *)(v6 + 96) = v89;
    goto LABEL_190;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = v9 + 2;
  v102 = -1;
  v103 = -1;
  v101 = -1;
  while (2)
  {
    if (v9[v20] != 40 || v9[v23 + 1] != 42)
    {
      LODWORD(v39) = v23;
      goto LABEL_63;
    }
    v94 = v23;
    v96 = v24;
    v104 = v21;
    v107 = v22;
    v26 = 0;
    v27 = v19 - v23;
    v28 = &v25[v23];
    while (1)
    {
      v29 = LOWORD((&pso_list)[v26 + 1]);
      if (v27 >= v29
        && !_pcre2_strncmp_8(v28, (unsigned __int8 *)(&pso_list)[v26], LOWORD((&pso_list)[v26 + 1])))
      {
        break;
      }
      v26 += 2;
      if (v26 == 42)
      {
        LODWORD(v39) = v94;
        v24 = v96;
        v16 = (v10 >> 7) & 0x80000 | v10;
        v21 = v104;
        v22 = v107;
        goto LABEL_63;
      }
    }
    v39 = v94 + v29 + 2;
    v30 = *((unsigned __int16 *)&pso_list + 4 * v26 + 5);
    v21 = v104;
    v22 = v107;
    v24 = v96;
    switch(*((_WORD *)&pso_list + 4 * v26 + 5))
    {
      case 0:
        HIDWORD(v125) |= *((_DWORD *)&pso_list + 2 * v26 + 3);
        goto LABEL_58;
      case 1:
        v24 = *((_DWORD *)&pso_list + 2 * v26 + 3) | v96;
        goto LABEL_58;
      case 2:
        v22 = *((_DWORD *)&pso_list + 2 * v26 + 3);
        v24 = v96 | 0x8000;
        goto LABEL_58;
      case 3:
        v21 = *((_DWORD *)&pso_list + 2 * v26 + 3);
        v24 = v96 | 0x4000;
LABEL_58:
        v16 = (v10 >> 7) & 0x80000 | v10;
        goto LABEL_59;
      case 4:
      case 5:
      case 6:
        v31 = v9[v39];
        v25 = v9 + 2;
        if (v31 - 48 > 9)
        {
          v6 = 0;
          v40 = &v9[v39];
          LODWORD(recurse) = 160;
          goto LABEL_78;
        }
        v32 = 0;
        LODWORD(v39) = v94 + v29 + 3;
        v16 = (v10 >> 7) & 0x80000 | v10;
        v19 = v13 - 2;
        do
        {
          if (v31 > 0x39 || v32 > 0x19999998)
            goto LABEL_121;
          v32 = v31 + 10 * v32 - 48;
          v31 = v9[v39];
          LODWORD(v39) = v39 + 1;
        }
        while (v31 > 0x2F);
        if (v31 == 41)
        {
          v34 = v102;
          v33 = v103;
          if (v30 == 4)
            v35 = v32;
          else
            v35 = v102;
          if (v30 == 4)
            v36 = v103;
          else
            v36 = v32;
          v37 = v30 == 5;
          if (v30 != 5)
            v34 = v35;
          v38 = v101;
          if (v37)
            v38 = v32;
          v101 = v38;
          v102 = v34;
          if (!v37)
            v33 = v36;
          v103 = v33;
LABEL_60:
          v20 = v39;
          v23 = v39;
          if (v13 - v39 <= 1)
            goto LABEL_63;
          continue;
        }
LABEL_121:
        v6 = 0;
        LODWORD(recurse) = 160;
        v112 = 160;
        v40 = &v9[v39];
LABEL_79:
        v44 = v111;
LABEL_101:
        *v7 = v40 - v9;
LABEL_102:
        *v8 = (int)recurse;
        pcre2_code_free_8(v6);
        v6 = 0;
LABEL_103:
        if ((_BYTE *)v127 != v135)
          (*((void (**)(_QWORD, _QWORD))v44 + 1))(v127, *((_QWORD *)v44 + 2));
        if (DWORD2(v125) >= 0x15)
          (*((void (**)(_QWORD, _QWORD))v44 + 1))(v125, *((_QWORD *)v44 + 2));
        if ((_QWORD *)v128 != v136)
          (*((void (**)(_QWORD, _QWORD))v44 + 1))(v128, *((_QWORD *)v44 + 2));
        return v6;
      default:
        v24 = v96;
        v16 = (v10 >> 7) & 0x80000 | v10;
        v21 = v104;
        v22 = v107;
LABEL_59:
        v19 = v13 - 2;
        v25 = v9 + 2;
        goto LABEL_60;
    }
  }
}

uint64_t parse_regex(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int *v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int is_newline_8;
  uint64_t v91;
  unsigned __int8 *v92;
  int64_t v93;
  unsigned __int8 *v94;
  int v95;
  unsigned __int8 *v96;
  unsigned __int8 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  int v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int16 v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned __int16 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int16 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned __int16 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  int v155;
  unsigned __int8 *v156;
  int v157;
  int v158;
  unsigned __int8 *v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  int v167;
  unsigned __int8 *v168;
  unsigned int v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned __int8 *v181;
  int *v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int *v197;
  unsigned __int8 *v198;
  int v199;
  _DWORD *v200;
  int v201;
  int v202;
  unsigned __int8 *v203;
  unsigned __int16 *v204;
  char v205;
  int v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  int *v210;
  unsigned __int8 *v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int *v217;
  unsigned __int8 *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned __int8 **v227;
  uint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  _BOOL4 v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  int v242;
  int v243;
  int *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int16 *v248;
  int v249;
  unsigned int v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  unsigned __int16 *v258;
  int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  __int16 v265;
  unsigned int v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned __int16 v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unsigned __int16 *v282;
  uint64_t v283;
  int *v284;
  int v285;
  int v286;
  int *v287;
  int v288;
  char v289;
  unsigned __int8 *v290;
  unsigned int v291;
  int v292;
  int v293;
  int v294;
  unsigned __int16 *v296;
  uint64_t v297;
  unsigned __int16 *v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unsigned __int16 *v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  int v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  int v311;
  uint64_t v312;
  unsigned __int8 *v313;
  int v314;
  unsigned __int8 *v315;
  int v316;
  int v317;
  int v318;
  unsigned __int8 *v319;
  uint64_t v320;
  unsigned __int8 v321;
  uint64_t v322;
  unsigned __int8 *v323;
  uint64_t v324;
  int v325;
  int v326;
  uint64_t v327;
  BOOL v328;
  int v329;
  unsigned __int8 *v330;
  unsigned int v331;
  unsigned __int8 *v332;
  int v333;
  int v334;
  int v335;
  int v336;
  unsigned __int8 *v337;
  unsigned int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  __int16 v343;
  _DWORD *v344;
  int v345;
  int v346;
  unsigned __int8 *v348;
  int v349;
  int v350;
  int v351;
  unsigned __int8 *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  unsigned __int16 *v357;
  unsigned __int16 *v358;
  unsigned __int16 *v359;
  unsigned __int16 *v360;
  unsigned __int16 *v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned __int8 *v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  __int16 v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  int *v386;
  unsigned __int8 *v387;
  int v388;
  unsigned __int8 *v389;
  int *v390;
  char v391;
  char *v392;
  unsigned __int8 *v393;
  int v394;
  uint64_t v395;
  int v396;
  unint64_t v397;
  unsigned __int8 *v398;
  int v399;
  uint64_t v400;
  unsigned __int8 *v401;
  uint64_t v402;
  uint64_t v403;
  unsigned __int8 *v404;
  uint64_t v405;
  int *v406;
  unsigned int v407;
  int v408;
  unsigned __int8 *v409[2];

  v4 = (uint64_t)a4;
  v5 = a1;
  v409[0] = a1;
  v407 = 0;
  v405 = 0;
  v406 = 0;
  v6 = (int *)a4[28];
  v397 = a4[29];
  v7 = *(_DWORD *)(*a4 + 64);
  v8 = a2 & 0x80000;
  v396 = (a2 >> 2) & 1;
  v404 = 0;
  v9 = (unsigned __int8 *)a4[8];
  v10 = -2146893824;
  if ((v7 & 8) == 0)
  {
    if ((v7 & 4) == 0)
      goto LABEL_5;
    v10 = -2145910779;
  }
  *v6 = v10;
  v6[1] = -2145779712;
  v6 += 2;
LABEL_5:
  v408 = 0;
  if ((a2 & 0x2000000) != 0)
  {
    if (v9 <= a1)
      goto LABEL_803;
    v336 = a2 & 4;
    while (1)
    {
      if ((unint64_t)v6 >= v397)
        goto LABEL_812;
      v337 = v5 + 1;
      v409[0] = v5 + 1;
      v338 = *v5;
      v408 = v338;
      if (!(_DWORD)v8 || v338 < 0xC0)
        goto LABEL_791;
      if ((v338 & 0x20) == 0)
        break;
      v339 = *v337 & 0x3F;
      if ((v338 & 0x10) != 0)
      {
        if ((v338 & 8) != 0)
        {
          v340 = v5[2] & 0x3F;
          v341 = v5[3] & 0x3F;
          v342 = v5[4] & 0x3F;
          if ((v338 & 4) != 0)
          {
            v338 = ((v338 & 1) << 30) | (v339 << 24) | (v340 << 18) | (v341 << 12) | (v342 << 6) | v5[5] & 0x3F;
            v408 = v338;
            v337 = v5 + 6;
          }
          else
          {
            v337 = v5 + 5;
            v338 = ((v338 & 3) << 24) | (v339 << 18) | (v340 << 12) | (v341 << 6) | v342;
            v408 = v338;
          }
        }
        else
        {
          v338 = ((v338 & 7) << 18) | (v339 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
          v408 = v338;
          v337 = v5 + 4;
        }
      }
      else
      {
        v338 = ((v338 & 0xF) << 12) | (v339 << 6) | v5[2] & 0x3F;
        v408 = v338;
        v337 = v5 + 3;
      }
      v409[0] = v337;
      if (v336)
      {
LABEL_801:
        v6 = manage_callouts((int)v5, &v406, v396, v6, v4);
        v338 = v408;
        v5 = v409[0];
        goto LABEL_802;
      }
LABEL_792:
      v5 = v337;
LABEL_802:
      *v6++ = v338;
      if (v5 >= v9)
        goto LABEL_803;
    }
    v337 = v5 + 2;
    v409[0] = v5 + 2;
    v408 = v5[1] & 0x3F | ((v338 & 0x1F) << 6);
    v338 = v408;
LABEL_791:
    if (v336)
      goto LABEL_801;
    goto LABEL_792;
  }
  if (v9 <= a1)
  {
LABEL_803:
    LOWORD(v17) = 0;
    goto LABEL_804;
  }
  v391 = v7;
  v11 = 0;
  v392 = 0;
  v393 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v394 = 0;
  v18 = 0;
  v386 = 0;
  v388 = (a2 >> 19) & 1;
  v384 = *(_QWORD *)(v4 + 40) + 12 * (*(_QWORD *)(v4 + 80) / 0xCuLL);
  v19 = (a2 >> 17) & 0x80 | a2;
  v389 = v9 - 1;
  v390 = (int *)(v4 + 260);
  v395 = v4;
  while (1)
  {
    v402 = 0;
    v403 = 0;
    v400 = 0;
    v401 = 0;
    if ((unint64_t)v6 >= v397)
    {
      v350 = 163;
      goto LABEL_822;
    }
    v20 = *(_QWORD *)v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 60) < (unsigned __int16)v17)
    {
      v350 = 119;
      goto LABEL_822;
    }
    v21 = v5 + 1;
    v409[0] = v5 + 1;
    v22 = *v5;
    v408 = v22;
    if (!(_DWORD)v8 || v22 < 0xC0)
      goto LABEL_14;
    if ((v22 & 0x20) == 0)
    {
      v21 = v5 + 2;
      v409[0] = v5 + 2;
      v408 = v5[1] & 0x3F | ((v22 & 0x1F) << 6);
      v22 = v408;
LABEL_14:
      if (v14)
        goto LABEL_15;
      goto LABEL_38;
    }
    v24 = *v21 & 0x3F;
    if ((v22 & 0x10) != 0)
    {
      if ((v22 & 8) != 0)
      {
        v33 = v5[2] & 0x3F;
        v34 = v5[3] & 0x3F;
        v35 = v5[4] & 0x3F;
        if ((v22 & 4) != 0)
        {
          v22 = ((v22 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v5[5] & 0x3F;
          v408 = v22;
          v21 = v5 + 6;
        }
        else
        {
          v21 = v5 + 5;
          v22 = ((v22 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
          v408 = v22;
        }
      }
      else
      {
        v22 = ((v22 & 7) << 18) | (v24 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
        v408 = v22;
        v21 = v5 + 4;
      }
    }
    else
    {
      v22 = ((v22 & 0xF) << 12) | (v24 << 6) | v5[2] & 0x3F;
      v408 = v22;
      v21 = v5 + 3;
    }
    v409[0] = v21;
    if (v14)
    {
LABEL_15:
      if (v22 == 92 && v21 < v9 && *v21 == 69)
      {
        v14 = 0;
LABEL_19:
        v23 = v21 + 1;
        goto LABEL_20;
      }
      if ((int)v15 < 1)
      {
        if ((_DWORD)v13)
        {
          *v6 = v22;
        }
        else
        {
          if ((int)v16 <= 0)
          {
            v25 = (int)v5;
            v26 = v6;
            v27 = v16;
            v16 = v19;
            v28 = v13;
            v29 = v17;
            v30 = v11;
            v31 = v15;
            v32 = manage_callouts(v25, &v406, v396, v26, v4);
            v15 = v31;
            v11 = v30;
            v19 = v16;
            LODWORD(v16) = v27;
            v17 = v29;
            v13 = v28;
            v6 = v32;
            v22 = v408;
          }
          v16 = (v16 - 1);
          *v6 = v22;
          v12 = 1;
        }
        v18 = 0;
        ++v6;
        v14 = 1;
        goto LABEL_30;
      }
      v348 = v21 - 1;
LABEL_821:
      v409[0] = v348;
      v350 = 128;
      goto LABEL_822;
    }
LABEL_38:
    if ((_DWORD)v13)
    {
      if ((~(_DWORD)v19 & 0x400080) != 0)
        goto LABEL_47;
      if (v22 >= 0x100)
      {
        if ((v22 | 1) != 0x200F && (v22 | 1) != 0x2029)
          goto LABEL_47;
        goto LABEL_57;
      }
      if (v22 == 35)
        goto LABEL_57;
      if (v22 != 133 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v22) & 1) == 0)
      {
LABEL_47:
        if (v22 == 41)
        {
          if ((uint64_t)&v21[~(unint64_t)v393] >= 256)
          {
            v409[0] = v21 - 1;
            v350 = 176;
            goto LABEL_822;
          }
          *(_DWORD *)v392 = ((unint64_t)((char *)v6 - v392) >> 2) - 1;
          if (v394)
          {
            v14 = 0;
            v13 = 0;
            *v6++ = v394;
            v394 = 0;
          }
          else
          {
            v394 = 0;
            v14 = 0;
            v13 = 0;
          }
        }
        else
        {
          if (v22 != 92)
            goto LABEL_103;
          if ((v19 & 0x400000) == 0)
          {
            v22 = 92;
LABEL_103:
            v14 = 0;
            *v6++ = v22;
            v13 = 1;
            goto LABEL_30;
          }
          v60 = v12;
          v61 = v15;
          v62 = v16;
          v63 = v19;
          v64 = v4;
          v65 = v17;
          v66 = v11;
          v67 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(v20 + 64), 0, v64);
          if (HIDWORD(v405))
            goto LABEL_823;
          v11 = v66;
          v17 = v65;
          if (v67 == 26)
          {
            v14 = 1;
            v13 = 1;
            v19 = v63;
            v4 = v395;
            v16 = v62;
            v15 = v61;
            v12 = v60;
          }
          else
          {
            v19 = v63;
            v4 = v395;
            v15 = v61;
            v12 = v60;
            if (v67 != 25)
            {
              if (v67)
              {
                v350 = 140;
                goto LABEL_822;
              }
              v22 = v408;
              v16 = v62;
              goto LABEL_103;
            }
            v14 = 0;
            v13 = 1;
LABEL_231:
            v16 = v62;
          }
        }
        goto LABEL_30;
      }
    }
    if (v22 == 92)
    {
      if (v21 < v9)
      {
        v36 = *v21;
        if (v36 == 81 || v36 == 69)
        {
          v14 = v36 == 81;
          goto LABEL_19;
        }
      }
      v22 = 92;
    }
LABEL_57:
    if ((v19 & 0x80) != 0)
    {
      if (v22 <= 0xFF)
      {
        v14 = 0;
        if (v22 == 133 || (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v22) & 1) != 0)
          goto LABEL_30;
      }
      v14 = 0;
      if ((v22 | 1) == 0x200F || (v22 | 1) == 0x2029)
        goto LABEL_30;
      if ((int)v22 <= 41)
      {
        if (v22 == 35)
        {
          if (v21 >= v9)
            goto LABEL_407;
          v366 = v12;
          v381 = v18;
          while (1)
          {
            v81 = *(_DWORD *)(v4 + 256);
            v82 = *(_QWORD *)(v4 + 64);
            if (v81)
            {
              if ((unint64_t)v21 < v82)
              {
                v83 = v8;
                v84 = v13;
                v85 = v15;
                v86 = v11;
                v87 = v16;
                v88 = v19;
                v89 = v17;
                is_newline_8 = _pcre2_is_newline_8(v21, v81, v82, v390, v388);
                v21 = v409[0];
                if (is_newline_8)
                {
                  v91 = *v390;
                  v17 = v89;
                  v19 = v88;
                  v16 = v87;
                  v11 = v86;
                  v15 = v85;
                  v13 = v84;
                  v8 = v83;
                  v12 = v366;
                  v18 = v381;
                  goto LABEL_541;
                }
                v17 = v89;
                v19 = v88;
                v16 = v87;
                v11 = v86;
                v15 = v85;
                v13 = v84;
                v8 = v83;
                v12 = v366;
                v18 = v381;
              }
            }
            else
            {
              v91 = *v390;
              if ((unint64_t)v21 <= v82 - v91 && *v21 == *(unsigned __int8 *)(v4 + 272))
              {
                if ((_DWORD)v91 == 1)
                {
                  v91 = 1;
LABEL_541:
                  v14 = 0;
                  v23 = &v21[v91];
LABEL_20:
                  v409[0] = v23;
                  goto LABEL_30;
                }
                if (v21[1] == *(unsigned __int8 *)(v4 + 273))
                  goto LABEL_541;
              }
            }
            v92 = v21 + 1;
            v409[0] = v21 + 1;
            if ((_DWORD)v8 && v92 < v9)
            {
              v93 = v389 - v21;
              do
              {
                if ((*v92 & 0xC0) != 0x80)
                  goto LABEL_160;
                v409[0] = ++v92;
                --v93;
              }
              while (v93);
              v92 = v9;
            }
LABEL_160:
            v21 = v92;
            if (v92 >= v9)
              goto LABEL_407;
          }
        }
LABEL_60:
        v37 = v11;
        if (v22 == 40 && v9 - v21 >= 2 && *v21 == 63 && v21[1] == 35)
        {
          v23 = v21 + 1;
          while (1)
          {
            v409[0] = v23;
            if (v23 >= v9)
              break;
            v38 = *v23++;
            if (v38 == 41)
            {
              v14 = 0;
              goto LABEL_20;
            }
          }
          v350 = 118;
          goto LABEL_822;
        }
LABEL_78:
        v46 = (v16 - 1);
        if ((int)v16 <= 0)
        {
          v47 = (int)v5;
          v372 = v9;
          v48 = v18;
          v49 = v12;
          v50 = v6;
          v51 = v19;
          v52 = v17;
          v53 = v8;
          v54 = v13;
          v55 = v15;
          v56 = manage_callouts(v47, &v406, v396, v50, v4);
          LODWORD(v12) = v49;
          v18 = v48;
          v9 = v372;
          LODWORD(v15) = v55;
          v13 = v54;
          v8 = v53;
          v19 = v51;
          v17 = v52;
          v6 = v56;
        }
        v16 = v46;
        goto LABEL_81;
      }
      if (v22 - 42 < 2)
        goto LABEL_82;
    }
    else if ((int)v22 <= 62)
    {
      if (v22 - 42 < 2)
        goto LABEL_82;
      goto LABEL_60;
    }
    if (v22 == 63)
      goto LABEL_82;
    v37 = v11;
    if (v22 != 123)
      goto LABEL_78;
    v401 = v21;
    v371 = v8;
    v379 = v18;
    v39 = v13;
    v40 = v19;
    v41 = v12;
    v42 = v16;
    v43 = v17;
    v44 = v15;
    v45 = read_repeat_counts(&v401, (unint64_t)v9, 0, 0, (int *)&v405 + 1);
    LODWORD(v12) = v41;
    LODWORD(v15) = v44;
    v19 = v40;
    v13 = v39;
    v18 = v379;
    v4 = v395;
    v17 = v43;
    v16 = v42;
    v8 = v371;
    if (!v45)
      goto LABEL_78;
LABEL_81:
    v11 = v37;
LABEL_82:
    if ((int)v15 >= 1)
    {
      if (v408 != 40 || v9 - v409[0] < 3)
      {
LABEL_820:
        v348 = v409[0] - 1;
        goto LABEL_821;
      }
      v57 = *v409[0];
      if (v57 == 63)
      {
        v58 = v409[0][1];
        if (v58 > 0x3C)
        {
          if (v58 != 61 && (v58 != 67 || (_DWORD)v15 != 2))
            goto LABEL_820;
        }
        else if (v58 != 33)
        {
          if (v58 != 60)
            goto LABEL_820;
          v59 = v409[0][2];
          if (v59 != 33 && v59 != 61)
            goto LABEL_820;
        }
      }
      else if (v57 != 42 || (*(_BYTE *)(*(_QWORD *)(v4 + 32) + v409[0][1]) & 4) == 0)
      {
        goto LABEL_820;
      }
    }
    v68 = v408;
    if (v18)
      break;
    if (v408 > 62)
    {
      if (v408 <= 93)
      {
        if (v408 != 63)
          goto LABEL_123;
        v69 = -2143682560;
        goto LABEL_241;
      }
LABEL_132:
      if (v408 == 94)
      {
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2146893824;
        goto LABEL_228;
      }
      if (v408 != 123)
      {
        if (v408 != 124)
        {
LABEL_232:
          v18 = 0;
          v15 = 0;
          v14 = 0;
LABEL_233:
          *v6++ = v68;
          goto LABEL_234;
        }
        if (v11 && *v11 == (unsigned __int16)v17 && (v11[3] & 1) != 0)
        {
          v80 = *(_DWORD *)(v4 + 212);
          if (v80 > v11[2])
            v11[2] = v80;
          *(_DWORD *)(v4 + 212) = v11[1];
        }
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2147418112;
LABEL_228:
        *v6++ = v70;
        goto LABEL_30;
      }
      v136 = v12;
      v137 = v11;
      v382 = v16;
      v138 = v13;
      v139 = v19;
      v140 = v17;
      if (!read_repeat_counts(v409, (unint64_t)v9, (unsigned int *)&v403 + 1, (unsigned int *)&v403, (int *)&v405 + 1))
      {
        v14 = HIDWORD(v405);
        if (HIDWORD(v405))
          goto LABEL_823;
        v17 = v140;
        v11 = v137;
        v18 = 0;
        v15 = 0;
        *v6++ = 123;
        v12 = 1;
        v19 = v139;
        v13 = v138;
        v4 = v395;
        v16 = v382;
        goto LABEL_30;
      }
      v69 = -2143485952;
      v17 = v140;
      v19 = v139;
      v13 = v138;
      v16 = v382;
      v11 = v137;
      LODWORD(v12) = v136;
LABEL_241:
      if ((_DWORD)v12)
      {
        v141 = v6 - 1;
        if (*(v6 - 1) == -2144731136)
        {
          while (v141 >= v386)
          {
            v141[1] = *v141;
            --v141;
          }
          *v386 = -2145779712;
          v6[1] = -2145845248;
          v6 += 2;
        }
        *v6 = v69;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        if (v408 == 123)
        {
          v142 = v403;
          v6[1] = HIDWORD(v403);
          v6[2] = v142;
          v6 += 3;
        }
        else
        {
          ++v6;
        }
        v18 = v69;
        goto LABEL_30;
      }
      v349 = 109;
LABEL_831:
      HIDWORD(v405) = v349;
LABEL_832:
      --v409[0];
      goto LABEL_824;
    }
    v69 = -2144075776;
    switch(v408)
    {
      case '$':
LABEL_112:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v70 = -2146041856;
        goto LABEL_228;
      case '(':
LABEL_162:
        v94 = v409[0];
        if (v409[0] >= v9)
          goto LABEL_811;
        v95 = *v409[0];
        if (v95 == 42)
        {
          if (v9 - v409[0] < 2)
            goto LABEL_392;
          v193 = v409[0][1];
          v408 = v193;
          if ((_DWORD)v193 == 41)
            goto LABEL_392;
          v356 = v15;
          v204 = v11;
          v383 = v16;
          v363 = v19;
          v368 = v13;
          v375 = v17;
          v205 = *(_BYTE *)(*(_QWORD *)(v4 + 32) + v193);
          v206 = read_name(v409, (unint64_t)v9, v388, 0, &v400, &v404, &v407, (int *)&v405 + 1, v4);
          v358 = v204;
          if ((v205 & 4) == 0)
          {
            if (!v206)
              goto LABEL_823;
            if (v409[0] >= v9 || (v207 = *v409[0], v207 != 41) && v207 != 58)
            {
LABEL_835:
              v350 = 160;
              goto LABEL_822;
            }
            v208 = v407;
            v387 = v404;
            v209 = -2;
            v210 = &dword_1DEC44208;
            v211 = (unsigned __int8 *)&verbnames;
            v4 = v395;
            v16 = v383;
            while (1)
            {
              v212 = *(v210 - 1);
              if ((_DWORD)v208 == v212)
              {
                v213 = _pcre2_strncmp_8(v387, v211, v208);
                v19 = v363;
                v17 = v375;
                if (!v213)
                  break;
              }
              v210 += 3;
              v211 += (v212 + 1);
              if (++v209 == 7)
                goto LABEL_835;
            }
            v250 = v209 + 2;
            LODWORD(v405) = v209 + 2;
            v251 = v409[0];
            v252 = v409[0] + 1;
            if (*v409[0] != 58 || v252 >= v9)
            {
              v11 = v358;
            }
            else
            {
              v11 = v358;
              if (*v252 == 41)
              {
                ++v409[0];
                ++v251;
              }
            }
            if (v250 <= 1 && *v251 != 58)
            {
              v350 = 166;
              goto LABEL_822;
            }
            v12 = (_DWORD)v209 == 0;
            v409[0] = v251 + 1;
            if (*v251 == 58)
            {
              v254 = *v210 + ((v250 > 1) << 16);
              if (v209 < 3)
                v254 = -2144796672;
              v255 = v394;
              if (v209 < 3)
                v255 = *v210;
              v394 = v255;
              v392 = (char *)(v6 + 1);
              v393 = v251 + 1;
              v386 = v6;
              *v6 = v254;
              v6 += 2;
              v13 = 1;
            }
            else
            {
              v386 = v6;
              *v6++ = *v210;
              v13 = v368;
            }
LABEL_406:
            v18 = 0;
            v15 = 0;
LABEL_407:
            v14 = 0;
            goto LABEL_30;
          }
          if (!v206)
            goto LABEL_823;
          if (v409[0] >= v9 || *v409[0] != 58)
          {
LABEL_834:
            v350 = 195;
            goto LABEL_822;
          }
          v214 = 0;
          v215 = v407;
          v216 = v404;
          v217 = &dword_1DEC44154;
          v218 = (unsigned __int8 *)&alasnames;
          while (1)
          {
            v219 = *(v217 - 1);
            if ((_DWORD)v215 == v219)
            {
              v220 = _pcre2_strncmp_8(v216, v218, v215);
              LODWORD(v17) = v375;
              if (!v220)
                break;
            }
            v218 += (v219 + 1);
            ++v214;
            v217 += 2;
            if (v214 == 17)
              goto LABEL_834;
          }
          LODWORD(v405) = v214;
          v256 = *v217;
          if (v356 >= 1 && (((0xB000uLL >> v214) | (0x1430CuLL >> v214)) & 1) != 0)
          {
            if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(vdupq_n_s32(v214), (int32x4_t)xmmword_1DEC444B0), (int8x16_t)xmmword_1DEC444C0)) & 0xF) != 0)v350 = 198;
            else
              v350 = 128;
            goto LABEL_822;
          }
          if (v256 <= -2145058817)
          {
            if (v256 <= -2145189889)
            {
              if (v256 == -2147352576)
              {
                v96 = v409[0];
                v13 = v368;
                LODWORD(v17) = v375;
                v11 = v358;
                v19 = v363;
                v4 = v395;
                v16 = v383;
LABEL_718:
                v18 = 0;
                v15 = 0;
                v14 = 0;
                v12 = 0;
                *v6++ = -2147352576;
                v17 = (v17 + 1);
                v23 = v96 + 1;
                goto LABEL_20;
              }
              LODWORD(v17) = v375;
              if (v256 != -2145255424)
                goto LABEL_871;
LABEL_648:
              *v6 = -2145255424;
              v17 = (v17 + 1);
              ++v409[0];
              if ((_DWORD)v214 == 16 || (_DWORD)v214 == 14)
              {
                v6[1] = -2147352576;
                if (v358)
                {
                  v296 = v358 + 6;
                  if ((unint64_t)(v358 + 6) >= v384)
                    goto LABEL_850;
                }
                else
                {
                  v296 = *(unsigned __int16 **)(v395 + 40);
                }
                v12 = 0;
                v6 += 2;
                v11 = v296;
                *v296 = v17;
                v296[3] = 4;
                v19 = v363;
                *((_DWORD *)v296 + 2) = v363 & 0x10424E8;
              }
              else
              {
                v12 = 0;
                ++v6;
                v11 = v358;
                v19 = v363;
              }
              v13 = v368;
              v4 = v395;
              v16 = v383;
              goto LABEL_406;
            }
            if (v256 == -2145189888)
            {
              v96 = v409[0];
              v13 = v368;
              LODWORD(v17) = v375;
              v11 = v358;
              v19 = v363;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_720:
              v314 = -2145189888;
            }
            else
            {
              LODWORD(v17) = v375;
              if (v256 != -2145124352)
                goto LABEL_871;
              v96 = v409[0];
              v11 = v358;
              v19 = v363;
              v13 = v368;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_700:
              v314 = -2145124352;
            }
          }
          else
          {
            if (v256 <= -2144927745)
            {
              if (v256 != -2145058816 && v256 != -2144993280)
              {
LABEL_871:
                v350 = 189;
                goto LABEL_822;
              }
              goto LABEL_695;
            }
            if (v256 != -2144927744)
            {
              if (v256 != -2144862208)
              {
                if (v256 != -1879113728)
                  goto LABEL_871;
                goto LABEL_648;
              }
LABEL_695:
              *v6 = v256;
              v96 = v409[0] - 1;
              v11 = v358;
              v19 = v363;
              v13 = v368;
              v4 = v395;
              v16 = v383;
              LODWORD(v15) = v356;
LABEL_696:
              *a3 = 1;
              v312 = (uint64_t)&v96[-*(_QWORD *)(v4 + 56) - 2];
              v400 = v312;
              v6[1] = HIDWORD(v312);
              v6[2] = v312;
              v6 += 3;
              v313 = v96 + 2;
LABEL_722:
              v409[0] = v313;
              v17 = (v17 + 1);
              if ((int)v15 < 1)
                goto LABEL_392;
              if (v11)
              {
                v11 += 6;
                if ((unint64_t)v11 >= v384)
                {
LABEL_850:
                  v350 = 184;
                  goto LABEL_822;
                }
              }
              else
              {
                v11 = *(unsigned __int16 **)(v4 + 40);
              }
              v18 = 0;
              v15 = 0;
              v14 = 0;
              v12 = 0;
              *v11 = v17;
              v11[3] = 2;
              *((_DWORD *)v11 + 2) = v19 & 0x10424E8;
              goto LABEL_30;
            }
            v96 = v409[0];
            v11 = v358;
            v19 = v363;
            v13 = v368;
            v4 = v395;
            v16 = v383;
            LODWORD(v15) = v356;
LABEL_716:
            v314 = -2144927744;
          }
          *v6++ = v314;
          v313 = v96 + 1;
          goto LABEL_722;
        }
        if (v95 != 63)
        {
          v17 = (v17 + 1);
          if ((v19 & 0x2000) != 0)
          {
            v12 = 0;
            v196 = -2145779712;
          }
          else
          {
            v194 = *(_DWORD *)(v4 + 212);
            if (v194 >= 0xFFFF)
              goto LABEL_842;
            v12 = 0;
            v195 = v194 + 1;
            *(_DWORD *)(v4 + 212) = v195;
            v196 = v195 | 0x80080000;
          }
          *v6++ = v196;
          goto LABEL_406;
        }
        v96 = ++v409[0];
        if (v94 + 1 >= v9)
          goto LABEL_811;
        break;
      case ')':
LABEL_172:
        if (v11 && *v11 == (unsigned __int16)v17)
        {
          v107 = *((_DWORD *)v11 + 2);
          v108 = v11[3];
          if ((v108 & 1) != 0)
          {
            v109 = v11[2];
            if (*(_DWORD *)(v4 + 212) < v109)
              *(_DWORD *)(v4 + 212) = v109;
          }
          v12 = (v108 & 2) == 0;
          if ((v108 & 4) != 0)
            *v6++ = -2145845248;
          v19 = v107 | v19 & 0xFEFBDB17;
          if (v11 == *(unsigned __int16 **)(v4 + 40))
            v11 = 0;
          else
            v11 -= 6;
        }
        else
        {
          v12 = 1;
        }
        if ((_WORD)v17)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v17 = (v17 - 1);
          *v6++ = -2145845248;
          goto LABEL_30;
        }
        v349 = 122;
        goto LABEL_831;
      case '*':
        goto LABEL_241;
      case '+':
        v69 = -2143879168;
        goto LABEL_241;
      case '.':
LABEL_182:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v68 = -2145976320;
        goto LABEL_233;
      default:
        goto LABEL_232;
    }
    v97 = *v96;
    v98 = -1;
    switch(*v96)
    {
      case '!':
        goto LABEL_700;
      case '&':
        goto LABEL_534;
      case '\'':
        goto LABEL_565;
      case '(':
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        v17 = (v17 + 1);
        v240 = v94[2];
        if (v240 == 63 || v240 == 42)
        {
          v18 = 0;
          v14 = 0;
          v12 = 0;
          *v6++ = -2146500608;
          v409[0] = v94 + 1;
          v15 = 2;
          goto LABEL_30;
        }
        v380 = v16;
        v364 = v19;
        v370 = v13;
        v298 = v11;
        v378 = v17;
        if (read_number(v409, (unint64_t)v9, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
        {
          if ((int)v405 <= 0)
          {
            v350 = 115;
            goto LABEL_822;
          }
          *v6 = -2146304000;
          v299 = v409[0];
          v300 = &v409[0][-*(_QWORD *)(v395 + 56) - 2];
          v400 = (uint64_t)v300;
          v6[1] = HIDWORD(v300);
          v6[2] = (int)v300;
          v6[3] = v405;
LABEL_760:
          v6 += 4;
          goto LABEL_761;
        }
        if (HIDWORD(v405))
          goto LABEL_823;
        v315 = v409[0];
        if (v9 - v409[0] >= 10)
        {
          v316 = _pcre2_strncmp_8(v409[0], "VERSION", 7);
          v315 = v409[0];
          if (!v316 && v409[0][7] != 41)
          {
            v409[0] += 7;
            v325 = v315[7];
            if (v325 == 62)
            {
              v325 = v315[8];
              v409[0] = v315 + 8;
              v326 = 1;
              v327 = 8;
            }
            else
            {
              v326 = 0;
              v327 = 7;
            }
            if (v325 != 61)
              goto LABEL_869;
            v330 = &v315[v327 + 1];
            v409[0] = v330;
            if (*v330 - 48 > 9)
              goto LABEL_869;
            HIDWORD(v405) = 0;
            if (v330 >= v9)
              goto LABEL_823;
            v331 = 0;
            v332 = &v315[v327 + 2];
            while (1)
            {
              v299 = v332 - 1;
              if (v332 - 1 >= v9)
                break;
              v333 = *v299;
              if ((v333 - 48) > 9)
              {
                v409[0] = v332 - 1;
                if (*(v332 - 1) == 46)
                {
                  v409[0] = v332;
                  if (v332 >= v9)
                    goto LABEL_869;
                  if (*v332 - 48 > 9)
                    goto LABEL_869;
                  v299 = v332 + 1;
                  v409[0] = v332 + 1;
                  if (v332 + 1 >= v9)
                    goto LABEL_869;
                  v334 = 10 * *v332;
                  if (*v299 - 48 > 9)
                  {
                    v335 = v334 - 480;
                  }
                  else
                  {
                    v299 = v332 + 2;
                    v409[0] = v332 + 2;
                    v335 = v334 + v332[1] - 528;
                  }
                  if (v299 >= v9 || *v299 != 41)
                    goto LABEL_869;
                }
                else
                {
                  v335 = 0;
                }
                *v6 = -2146107392;
                v6[1] = v326;
                v6[2] = v331;
                v6[3] = v335;
                goto LABEL_760;
              }
              v331 = v333 + 10 * v331 - 48;
              ++v332;
              if (v331 >= 0x3E9)
              {
                HIDWORD(v405) = 179;
                v352 = v332 - 1;
                goto LABEL_847;
              }
            }
            v409[0] = v332 - 1;
LABEL_869:
            v350 = 179;
            goto LABEL_822;
          }
        }
        v317 = *v315;
        if (v317 == 82 && v9 - v315 >= 2)
        {
          if (v315[1] == 38)
          {
            v409[0] = v315 + 1;
            if (!read_name(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
            v318 = -2146238464;
            goto LABEL_758;
          }
LABEL_736:
          v409[0] = v315 - 1;
          if (!read_name(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
          v322 = v407;
          v323 = v404;
          if (v407 == 6)
          {
            if (!_pcre2_strncmp_8(v404, "DEFINE", 6))
            {
              *v6 = -2146435072;
              v299 = --v409[0];
              *(_QWORD *)(v6 + 1) = __ROR8__(v400, 32);
              v6 += 3;
LABEL_761:
              if (v299 >= v9 || *v299 != 41)
              {
                v350 = 124;
                goto LABEL_822;
              }
              v15 = 0;
              v14 = 0;
              v12 = 0;
              v409[0] = v299 + 1;
              v13 = v370;
              v17 = v378;
              v11 = v298;
              v19 = v364;
              v18 = 0;
              v4 = v395;
              goto LABEL_448;
            }
          }
          else if ((int)v407 < 2)
          {
            LODWORD(v324) = 1;
LABEL_751:
            LODWORD(v405) = v324;
            v328 = *v323 != 82 || (int)v324 < (int)v322;
            if (v328)
              v329 = -458752;
            else
              v329 = -262144;
            v318 = v329 - 2145910784;
LABEL_758:
            *v6 = v318;
            v299 = --v409[0];
LABEL_759:
            v6[1] = v407;
            *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
            goto LABEL_760;
          }
          v324 = 1;
          do
          {
            if (v323[v324] - 48 > 9)
              goto LABEL_751;
            ++v324;
          }
          while (v322 != v324);
          LODWORD(v324) = v322;
          goto LABEL_751;
        }
        if (v317 == 60)
        {
          v321 = 62;
        }
        else
        {
          if (v317 != 39)
            goto LABEL_736;
          v321 = 39;
        }
        if (!read_name(v409, (unint64_t)v9, v388, v321, &v400, &v404, &v407, (int *)&v405 + 1, v395))goto LABEL_823;
        *v6 = -2146369536;
        v299 = v409[0];
        goto LABEL_759;
      case '*':
        goto LABEL_716;
      case '+':
        if (v9 - v96 >= 2 && v94[2] - 48 < 0xA)
          goto LABEL_509;
        v350 = 129;
        goto LABEL_822;
      case '-':
        if (v9 - v96 < 2 || v94[2] - 48 >= 0xA)
          goto LABEL_510;
LABEL_509:
        v98 = *(_DWORD *)(v4 + 212);
LABEL_167:
        v99 = v16;
        v100 = v13;
        v101 = v19;
        v102 = v17;
        v103 = v11;
        if (!read_number(v409, (unint64_t)v9, v98, 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
          goto LABEL_823;
        v104 = v405;
        if ((v405 & 0x80000000) == 0)
        {
          v17 = v102;
          v105 = v409[0];
          v4 = v395;
          v16 = v99;
          if (v409[0] >= v9)
            goto LABEL_811;
          v11 = v103;
          v19 = v101;
          v13 = v100;
          if (*v409[0] != 41)
            goto LABEL_811;
LABEL_171:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          *v6 = v104 | 0x80200000;
          v106 = &v105[-*(_QWORD *)(v4 + 56)];
          v400 = (uint64_t)v106;
          v409[0] = v105 + 1;
          v6[1] = HIDWORD(v106);
          v6[2] = (int)v106;
LABEL_453:
          v6 += 3;
          goto LABEL_234;
        }
        HIDWORD(v405) = 115;
        v4 = v395;
        goto LABEL_832;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto LABEL_167;
      case '<':
        if (v9 - v96 < 2)
          goto LABEL_564;
        v241 = v94[2];
        v97 = 62;
        if (v241 > 0x3D || ((1 << v241) & 0x2000040200000000) == 0)
          goto LABEL_565;
        if (v241 == 33)
          v242 = -2144993280;
        else
          v242 = -2144862208;
        if (v241 == 61)
          v243 = -2145058816;
        else
          v243 = v242;
        *v6 = v243;
        goto LABEL_696;
      case '=':
        goto LABEL_720;
      case '>':
        goto LABEL_718;
      case 'C':
        v96 = v94 + 2;
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        if (v406 && (v19 & 4) != 0 && v406 == v6 - 4)
        {
          if (*(v6 - 1) == 255)
            v244 = v406;
          else
            v244 = v6;
        }
        else
        {
          v244 = v6;
        }
        v406 = v244;
        v278 = *v96;
        if (v278 == 41 || (v278 - 48) < 0xA)
        {
          v279 = v8;
          v281 = v13;
          v282 = v11;
          v285 = 0;
          *v244 = -2147090432;
          while (v96 < v9 && *v96 - 48 <= 9)
          {
            v409[0] = v96 + 1;
            v286 = *v96 + 10 * v285;
            v285 = v286 - 48;
            ++v96;
            if (v286 > 303)
            {
              v350 = 138;
              goto LABEL_822;
            }
          }
          v6 = v244 + 4;
          v244[3] = v285;
          goto LABEL_712;
        }
        v279 = v8;
        v280 = 96;
        v281 = v13;
        v282 = v11;
        v283 = 0;
        while (v280 != v278)
        {
          v284 = &_pcre2_callout_start_delims_8[v283++];
          v280 = v284[1];
          if (!v280)
            goto LABEL_845;
        }
        LODWORD(v405) = v283;
        v307 = _pcre2_callout_end_delims_8[v283];
        if (!v307)
        {
LABEL_845:
          v350 = 182;
          goto LABEL_822;
        }
        *v244 = -2147024896;
        v308 = v94 + 3;
        v409[0] = v94 + 3;
        v309 = v94 + 2;
        while (2)
        {
          if (v308 < v9)
          {
            if (v307 != *v308 || (v308 = v309 + 2, v409[0] = v309 + 2, v309 + 2 < v9) && v307 == *v308)
            {
              v309 = v308++;
              v409[0] = v308;
              continue;
            }
            if ((unint64_t)(v308 - v96) >> 32)
            {
              v350 = 172;
              goto LABEL_822;
            }
            v244[3] = (_DWORD)v308 - (_DWORD)v96;
            v319 = &v96[-*(_QWORD *)(v395 + 56)];
            v400 = (uint64_t)v319;
            v6 = v244 + 6;
            v244[4] = HIDWORD(v319);
            v244[5] = (int)v319;
            v96 = v309 + 2;
LABEL_712:
            if (v96 >= v9 || *v96 != 41)
            {
              v350 = 139;
              goto LABEL_822;
            }
            v14 = 0;
            v12 = 0;
            v409[0] = v96 + 1;
            v4 = v395;
            v244[1] = (_DWORD)v96 + 1 - *(_DWORD *)(v395 + 56);
            v244[2] = 0;
            v15 = (v15 - 1);
            v16 = 1;
            v11 = v282;
            v13 = v281;
            v320 = v279;
            v18 = 0;
            v8 = v320;
            goto LABEL_30;
          }
          break;
        }
        v351 = 181;
        goto LABEL_857;
      case 'P':
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9)
          goto LABEL_811;
        v245 = v94[2];
        if (v245 != 60)
        {
          if (v245 == 61)
          {
            v62 = v16;
            v369 = v13;
            v246 = v19;
            v355 = v4;
            v301 = v17;
            v302 = v11;
            if (!read_name(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v355))goto LABEL_823;
            v11 = v302;
            v17 = v301;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v249 = -2147221504;
          }
          else
          {
            if (v245 != 62)
            {
              v350 = 141;
              goto LABEL_822;
            }
LABEL_534:
            v62 = v16;
            v369 = v13;
            v246 = v19;
            v353 = v4;
            v247 = v17;
            v248 = v11;
            if (!read_name(v409, (unint64_t)v9, v388, 0x29u, &v400, &v404, &v407, (int *)&v405 + 1, v353))goto LABEL_823;
            v11 = v248;
            v17 = v247;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v249 = -2145320960;
          }
          *v6 = v249;
          v6[1] = v407;
          *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
          v6 += 4;
          v12 = 1;
          v19 = v246;
          v13 = v369;
          v4 = v395;
          goto LABEL_231;
        }
LABEL_564:
        v97 = 62;
LABEL_565:
        v380 = v16;
        v365 = v13;
        v376 = v17;
        v257 = v19;
        v354 = v4;
        v258 = v11;
        v259 = read_name(v409, (unint64_t)v9, v388, v97, &v400, &v404, &v407, (int *)&v405 + 1, v354);
        v260 = v376;
        if (!v259)
          goto LABEL_823;
        v11 = v258;
        v4 = v395;
        v261 = *(_DWORD *)(v395 + 212);
        if (v261 >= 0xFFFF)
        {
LABEL_842:
          v350 = 197;
          goto LABEL_822;
        }
        v262 = v261 + 1;
        *(_DWORD *)(v395 + 212) = v262;
        *v6++ = v262 | 0x80080000;
        v263 = *(unsigned __int16 *)(v395 + 176);
        if (v263 >> 4 >= 0x271)
        {
          v350 = 149;
          goto LABEL_822;
        }
        v19 = v257;
        v264 = v407;
        if (v407 + 3 > *(unsigned __int16 *)(v395 + 178))
          *(_WORD *)(v395 + 178) = v407 + 3;
        if (!v263)
        {
          v271 = 0;
          v266 = 0;
          v265 = 0;
LABEL_585:
          v17 = (v260 + 1);
          LODWORD(v405) = v266;
          if ((int)v266 < (int)v271)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            goto LABEL_447;
          }
          v377 = v265;
          v275 = v8;
          v276 = *(unsigned int *)(v395 + 200);
          if (v276 <= v271)
          {
            v303 = v8;
            v361 = v11;
            v304 = v17;
            v305 = (void *)(**(uint64_t (***)(uint64_t, _QWORD))v395)(32 * v276, *(_QWORD *)(*(_QWORD *)v395 + 16));
            if (!v305)
            {
              v350 = 121;
              goto LABEL_822;
            }
            v277 = v305;
            memcpy(v305, *(const void **)(v395 + 192), 16 * *(unsigned int *)(v395 + 200));
            if (*(_DWORD *)(v395 + 200) >= 0x15u)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v395 + 8))(*(_QWORD *)(v395 + 192), *(_QWORD *)(*(_QWORD *)v395 + 16));
            *(_QWORD *)(v395 + 192) = v277;
            *(_DWORD *)(v395 + 200) = 2 * v276;
            v271 = *(unsigned __int16 *)(v395 + 176);
            v17 = v304;
            v11 = v361;
            v19 = v257;
            v275 = v303;
          }
          else
          {
            v277 = *(void **)(v395 + 192);
          }
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v306 = (uint64_t)v277 + 16 * v271;
          *(_QWORD *)v306 = v404;
          *(_WORD *)(v306 + 12) = v264;
          *(_DWORD *)(v306 + 8) = *(_DWORD *)(v395 + 212);
          v13 = v365;
          *(_WORD *)(v306 + 14) = v377;
          *(_WORD *)(v395 + 176) = v271 + 1;
          v16 = v380;
          v8 = v275;
          goto LABEL_30;
        }
        v360 = v11;
        v265 = 0;
        v266 = 0;
        v267 = v404;
        v268 = *(_QWORD *)(v395 + 192) + 8;
        while ((_DWORD)v264 == *(unsigned __int16 *)(v268 + 4))
        {
          v269 = _pcre2_strncmp_8(v267, *(unsigned __int8 **)(v268 - 8), v264);
          v19 = v257;
          v260 = v376;
          v270 = *(_DWORD *)(v395 + 212);
          if (v269)
            goto LABEL_578;
          if (*(_DWORD *)v268 == v270)
          {
            v271 = *(unsigned __int16 *)(v395 + 176);
LABEL_580:
            v11 = v360;
            goto LABEL_585;
          }
          if ((v257 & 0x40) == 0)
          {
            v350 = 143;
            goto LABEL_822;
          }
          v265 = 1;
          *(_WORD *)(v268 + 6) = 1;
          *(_DWORD *)(v395 + 296) = 1;
LABEL_579:
          v268 += 16;
          ++v266;
          v271 = *(unsigned __int16 *)(v395 + 176);
          if (v266 >= v271)
            goto LABEL_580;
        }
        v270 = *(_DWORD *)(v395 + 212);
LABEL_578:
        if (*(_DWORD *)v268 == v270)
        {
          v350 = 165;
          goto LABEL_822;
        }
        goto LABEL_579;
      case 'R':
        LODWORD(v405) = 0;
        v105 = v94 + 2;
        v409[0] = v94 + 2;
        if (v94 + 2 >= v9 || *v105 != 41)
        {
          v350 = 158;
          goto LABEL_822;
        }
        v104 = 0;
        goto LABEL_171;
      default:
LABEL_510:
        if (v11)
        {
          v11 += 6;
          if ((unint64_t)v11 >= v384)
            goto LABEL_850;
        }
        else
        {
          v11 = *(unsigned __int16 **)(v4 + 40);
        }
        *v11 = v17 + 1;
        v11[3] = 0;
        *((_DWORD *)v11 + 2) = v19 & 0x10424E8;
        if (*v96 == 124)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v272 = *(_WORD *)(v4 + 212);
          v11[1] = v272;
          v11[2] = v272;
          v11[3] = 1;
          *(_DWORD *)(v4 + 208) |= 0x200000u;
          *v6++ = -2145779712;
          v409[0] = v94 + 2;
          v17 = (v17 + 1);
          goto LABEL_30;
        }
        *(_DWORD *)(v11 + 1) = 0;
        v402 = 0;
        if (*v96 == 94)
        {
          v273 = 0;
          v274 = v19 & 0xFEFFDB57;
          v96 = v94 + 2;
          v409[0] = v94 + 2;
        }
        else
        {
          v273 = 1;
          v274 = v19;
        }
        if (v96 >= v9)
          goto LABEL_811;
        v287 = (int *)&v402 + 1;
        break;
    }
    do
    {
      v288 = *v96;
      v289 = 1;
      if (v288 == 41 || v288 == 58)
        goto LABEL_639;
      v290 = v96 + 1;
      v409[0] = v96 + 1;
      v291 = *v96;
      if (v291 <= 0x6C)
      {
        if (*v96 <= 0x54u)
        {
          if (v291 != 45)
          {
            if (v291 != 74)
              goto LABEL_855;
            *v287 |= 0x40u;
            *(_DWORD *)(v4 + 208) |= 0x400u;
            goto LABEL_636;
          }
          if (!v273)
          {
            v351 = 194;
            goto LABEL_857;
          }
          v273 = 0;
          v287 = (int *)&v402;
          goto LABEL_636;
        }
        if (v291 == 85)
        {
          v292 = *v287 | 0x40000;
        }
        else
        {
          if (v291 != 105)
            goto LABEL_855;
          v292 = *v287 | 8;
        }
LABEL_635:
        *v287 = v292;
        goto LABEL_636;
      }
      if (*v96 <= 0x72u)
      {
        if (v291 == 109)
        {
          v292 = *v287 | 0x400;
        }
        else
        {
          if (v291 != 110)
            goto LABEL_855;
          v292 = *v287 | 0x2000;
        }
        goto LABEL_635;
      }
      if (v291 == 115)
      {
        v292 = *v287 | 0x20;
        goto LABEL_635;
      }
      if (v291 != 120)
      {
LABEL_855:
        v351 = 111;
LABEL_857:
        HIDWORD(v405) = v351;
        v409[0] = v96;
        goto LABEL_823;
      }
      v293 = *v287;
      *v287 |= 0x80u;
      if (v290 < v9 && *v290 == 120)
      {
        *v287 = v293 | 0x1000080;
        v96 += 2;
        v409[0] = v96;
        continue;
      }
LABEL_636:
      v96 = v290;
    }
    while (v96 < v9);
    v289 = 0;
LABEL_639:
    v294 = v402;
    if ((HIDWORD(v402) & 0x1000080) != 0x80 && (v402 & 0x80) == 0)
    {
      if ((v289 & 1) == 0)
        goto LABEL_811;
    }
    else
    {
      v294 = v402 | 0x1000000;
      LODWORD(v402) = v402 | 0x1000000;
      if ((v289 & 1) == 0)
        goto LABEL_811;
    }
    v297 = (HIDWORD(v402) | v274) & ~v294;
    v409[0] = v96 + 1;
    if (*v96 == 41)
    {
      if ((unint64_t)v11 > *(_QWORD *)(v4 + 40) && *(v11 - 6) == (unsigned __int16)v17)
        v11 -= 6;
      else
        *v11 = v17;
    }
    else
    {
      *v6++ = -2145779712;
      v17 = (v17 + 1);
    }
    if ((_DWORD)v297 == (_DWORD)v19)
    {
LABEL_392:
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v12 = 0;
      goto LABEL_30;
    }
    v18 = 0;
    v15 = 0;
    v14 = 0;
    v12 = 0;
    *v6 = -2145714176;
    v6[1] = v297;
    v6 += 2;
    v19 = v297;
LABEL_30:
    v5 = v409[0];
    if (v409[0] >= v9)
    {
      LOBYTE(v7) = v391;
      if ((_DWORD)v13)
      {
        v346 = 160;
        goto LABEL_813;
      }
LABEL_804:
      v343 = v17;
      v344 = manage_callouts((int)v5, &v406, v396, v6, v4);
      if ((v7 & 8) != 0)
      {
        v345 = -2146041856;
LABEL_808:
        *v344 = -2145845248;
        v344[1] = v345;
        v344 += 2;
      }
      else if ((v7 & 4) != 0)
      {
        v345 = -2145910779;
        goto LABEL_808;
      }
      if ((unint64_t)v344 < v397)
      {
        *v344 = 0x80000000;
        if (!v343)
          return 0;
LABEL_811:
        v346 = 114;
LABEL_813:
        HIDWORD(v405) = v346;
        goto LABEL_824;
      }
LABEL_812:
      v346 = 163;
      goto LABEL_813;
    }
  }
  if (v408 <= 62)
  {
    v69 = -2144075776;
    switch(v408)
    {
      case '$':
        goto LABEL_112;
      case '(':
        goto LABEL_162;
      case ')':
        goto LABEL_172;
      case '*':
        goto LABEL_241;
      case '+':
        goto LABEL_115;
      case '.':
        goto LABEL_182;
      default:
        goto LABEL_232;
    }
  }
  if (v408 > 93)
    goto LABEL_132;
  if (v408 == 63)
  {
LABEL_115:
    v15 = 0;
    v14 = 0;
    v12 = 0;
    if (v408 == 63)
      v71 = 0x20000;
    else
      v71 = 0x10000;
    v72 = v71 + v18;
    v73 = 0x3FFFFFFFFFFFFFFFLL;
    if (v18 == -2143485952)
      v73 = 0x3FFFFFFFFFFFFFFDLL;
    v6[v73] = v72;
    v18 = 0;
    goto LABEL_30;
  }
LABEL_123:
  if (v408 != 91)
  {
    if (v408 != 92)
      goto LABEL_232;
    v74 = v11;
    v380 = v16;
    v365 = v13;
    v373 = v17;
    v75 = v409[0];
    v401 = v409[0];
    v76 = v19;
    v77 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(*(_QWORD *)v4 + 64), 0, v4);
    if (!HIDWORD(v405))
    {
      v78 = v77;
      v17 = v373;
      v19 = v76;
      v11 = v74;
      goto LABEL_440;
    }
    while (1)
    {
      v17 = v373;
      if ((v391 & 2) == 0)
        goto LABEL_823;
      v11 = v74;
      v409[0] = v75;
      if (v75 >= v9)
      {
        v78 = 0;
        v408 = 92;
        v19 = v76;
        v4 = v395;
        goto LABEL_440;
      }
      v78 = 0;
      v409[0] = v75 + 1;
      v79 = *v75;
      v408 = v79;
      v19 = v76;
      v4 = v395;
      if ((_DWORD)v8 && v79 >= 0xC0)
      {
        if ((v79 & 0x20) == 0)
        {
          v78 = 0;
          v409[0] = v75 + 2;
          v408 = v75[1] & 0x3F | ((v79 & 0x1F) << 6);
          goto LABEL_440;
        }
        v202 = v75[1] & 0x3F;
        if ((v79 & 0x10) != 0)
        {
          if ((v79 & 8) != 0)
          {
            v221 = v75[2] & 0x3F;
            v222 = v75[3] & 0x3F;
            v223 = v75[4] & 0x3F;
            v78 = 0;
            if ((v79 & 4) == 0)
            {
              v408 = ((v79 & 3) << 24) | (v202 << 18) | (v221 << 12) | (v222 << 6) | v223;
              v409[0] = v75 + 5;
              goto LABEL_440;
            }
            v408 = ((v79 & 1) << 30) | (v202 << 24) | (v221 << 18) | (v222 << 12) | (v223 << 6) | v75[5] & 0x3F;
            v203 = v75 + 6;
          }
          else
          {
            v78 = 0;
            v408 = ((v79 & 7) << 18) | (v202 << 12) | ((v75[2] & 0x3F) << 6) | v75[3] & 0x3F;
            v203 = v75 + 4;
          }
        }
        else
        {
          v78 = 0;
          v408 = ((v79 & 0xF) << 12) | (v202 << 6) | v75[2] & 0x3F;
          v203 = v75 + 3;
        }
        v409[0] = v203;
      }
LABEL_440:
      if (!v78)
      {
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v224 = v408;
LABEL_446:
        *v6++ = v224;
        v12 = 1;
LABEL_447:
        v13 = v365;
LABEL_448:
        v16 = v380;
        goto LABEL_30;
      }
      if ((v78 & 0x80000000) != 0)
      {
        v225 = &v409[0][~*(_QWORD *)(v4 + 56)];
        *v6 = -v78 | 0x80030000;
        v13 = v365;
        v16 = v380;
        if (v78 >= 0xFFFFFFF7)
        {
          v226 = v4 + 8 * -v78;
          v228 = *(_QWORD *)(v226 + 88);
          v227 = (unsigned __int8 **)(v226 + 88);
          v18 = 0;
          v15 = 0;
          v14 = 0;
          if (v228 == -1)
            *v227 = v225;
          v12 = 1;
          ++v6;
          goto LABEL_30;
        }
        v18 = 0;
        v15 = 0;
        v14 = 0;
        *(_QWORD *)(v6 + 1) = __ROR8__(v225, 32);
        goto LABEL_453;
      }
      switch(v78)
      {
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
          if ((v19 & 0x20000) == 0)
            goto LABEL_444;
          v13 = v365;
          v16 = v380;
          if (v78 - 7 > 4)
            v229 = -2145910769;
          else
            v229 = dword_1DEC44460[v78 - 7];
          v18 = 0;
          *v6 = v229;
          v12 = 1;
          if (v78 > 0xB)
            goto LABEL_583;
          v237 = 1 << v78;
          if (((1 << v78) & 0xC0) != 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 196621;
          }
          else if ((v237 & 0x300) != 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 393216;
          }
          else
          {
            if ((v237 & 0xC00) == 0)
            {
LABEL_583:
              ++v6;
              v15 = 0;
              v14 = 0;
              goto LABEL_30;
            }
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v238 = 0x80000;
          }
          v6[1] = v238;
          v6 += 2;
          goto LABEL_30;
        case 0xCu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
LABEL_444:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v224 = v78 - 2145910784;
          goto LABEL_446;
        case 0xEu:
          if ((v19 & 0x100000) == 0)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v224 = -2145910770;
            goto LABEL_446;
          }
          v74 = v11;
          v239 = 183;
          goto LABEL_582;
        case 0xFu:
        case 0x10u:
          v74 = v11;
          LODWORD(v398) = 0;
          v399 = 0;
          if (!get_ucp((unint64_t *)v409, &v398, (_WORD *)&v399 + 1, &v399, (_DWORD *)&v405 + 1, v4))continue;
          v18 = 0;
          v15 = 0;
          v14 = 0;
          if (v78 == 15)
            v230 = 16;
          else
            v230 = 15;
          if ((_DWORD)v398)
            v231 = v230;
          else
            v231 = v78;
          v232 = (unsigned __int16)v399 | (HIWORD(v399) << 16);
          *v6 = v231 - 2145910784;
          v6[1] = v232;
          v6 += 2;
          v12 = 1;
          v13 = v365;
          v17 = v373;
          v19 = v76;
          v16 = v380;
          v11 = v74;
          goto LABEL_30;
        case 0x1Bu:
        case 0x1Cu:
          if (v409[0] < v9)
          {
            v233 = *v409[0];
            if (v233 == 39 || v233 == 60 || v233 == 123)
            {
              v359 = v11;
              if (v233 == 39)
                v234 = 39;
              else
                v234 = 125;
              if (v233 == 60)
                v235 = 62;
              else
                v235 = v234;
              v236 = v233 == 39 || v233 == 60;
              if (v78 != 27 || !v236)
                goto LABEL_874;
              v398 = v409[0] + 1;
              if (read_number(&v398, (unint64_t)v9, *(_DWORD *)(v4 + 212), 0xFFFFu, 161, (int *)&v405, (int *)&v405 + 1))
              {
                v105 = v398;
                if (v398 < v9 && v235 == *v398)
                {
                  v104 = v405;
                  v13 = v365;
                  v17 = v373;
                  v11 = v359;
                  v19 = v76;
                  v16 = v380;
                  goto LABEL_171;
                }
                HIDWORD(v405) = 157;
                goto LABEL_692;
              }
              if (!HIDWORD(v405))
              {
LABEL_874:
                if (read_name(v409, (unint64_t)v9, v388, v235, &v400, &v404, &v407, (int *)&v405 + 1, v4))
                {
                  v18 = 0;
                  v15 = 0;
                  v14 = 0;
                  if (v235 == 125 || v78 == 28)
                    v311 = -2147221504;
                  else
                    v311 = -2145320960;
                  *v6 = v311;
                  v6[1] = v407;
                  *((_QWORD *)v6 + 1) = __ROR8__(v400, 32);
                  v6 += 4;
                  v12 = 1;
                  v13 = v365;
                  v17 = v373;
                  v11 = v359;
                  v19 = v76;
                  v16 = v380;
                  goto LABEL_30;
                }
              }
LABEL_692:
              v74 = v359;
              continue;
            }
          }
          v74 = v11;
          if (v78 == 27)
            v239 = 157;
          else
            v239 = 169;
LABEL_582:
          HIDWORD(v405) = v239;
          break;
        default:
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          *v6++ = v78 - 2145910784;
          goto LABEL_447;
      }
    }
  }
  v110 = v409[0];
  if (v9 - v409[0] >= 6)
  {
    v111 = v11;
    v112 = v16;
    v113 = v13;
    v114 = v19;
    v115 = v17;
    if (_pcre2_strncmp_8(v409[0], "[:<:]]", 6)
      && _pcre2_strncmp_8(v409[0], "[:>:]]", 6))
    {
      v110 = v409[0];
      v17 = v115;
      v19 = v114;
      v13 = v113;
      v16 = v112;
      v11 = v111;
      goto LABEL_187;
    }
    *v6 = -2145910779;
    v197 = v6 + 2;
    v198 = v409[0];
    if (v409[0][2] == 60)
    {
      v6[1] = -2145189888;
    }
    else
    {
      v6[1] = -2145058816;
      *a3 = 1;
      v197 = v6 + 4;
      *((_QWORD *)v6 + 1) = 0;
    }
    v17 = v115;
    v19 = v114;
    v11 = v111;
    v13 = v113;
    v16 = v112;
    if ((v19 & 0x20000) != 0)
    {
      v200 = v197 + 2;
      v197[1] = 0x80000;
      v201 = -2145910768;
    }
    else
    {
      v200 = v197 + 1;
      v201 = -2145910773;
    }
    v18 = 0;
    v15 = 0;
    v14 = 0;
    *v197 = v201;
    *v200 = -2145845248;
    v6 = v200 + 1;
    v409[0] = v198 + 6;
LABEL_234:
    v12 = 1;
    goto LABEL_30;
  }
LABEL_187:
  if (v110 < v9)
  {
    v116 = *v110;
    if (v116 <= 0x3D && ((1 << v116) & 0x2400400000000000) != 0)
    {
      v117 = v11;
      v118 = v16;
      v119 = v13;
      v120 = v19;
      v121 = v17;
      v122 = check_posix_syntax(v110, (uint64_t)v9, &v401);
      v110 = v409[0];
      if (!v122)
      {
        v17 = v121;
        v19 = v120;
        v13 = v119;
        v16 = v118;
        v11 = v117;
        goto LABEL_192;
      }
      --v409[0];
      if (*v110 == 58)
        v350 = 112;
      else
        v350 = 113;
LABEL_822:
      HIDWORD(v405) = v350;
      goto LABEL_823;
    }
  }
LABEL_192:
  if (v110 < v9)
  {
    v123 = 0;
    while (1)
    {
      v409[0] = v110 + 1;
      v124 = *v110;
      if ((_DWORD)v8 && v124 >= 0xC0)
      {
        if ((v124 & 0x20) != 0)
        {
          v126 = v110[1] & 0x3F;
          if ((v124 & 0x10) != 0)
          {
            if ((v124 & 8) != 0)
            {
              v127 = v110[2] & 0x3F;
              v128 = v110[3] & 0x3F;
              v129 = v110[4] & 0x3F;
              if ((v124 & 4) != 0)
              {
                v124 = ((v124 & 1) << 30) | (v126 << 24) | (v127 << 18) | (v128 << 12) | (v129 << 6) | v110[5] & 0x3F;
                v110 += 6;
              }
              else
              {
                v124 = ((v124 & 3) << 24) | (v126 << 18) | (v127 << 12) | (v128 << 6) | v129;
                v110 += 5;
              }
            }
            else
            {
              v124 = ((v124 & 7) << 18) | (v126 << 12) | ((v110[2] & 0x3F) << 6) | v110[3] & 0x3F;
              v110 += 4;
            }
          }
          else
          {
            v124 = ((v124 & 0xF) << 12) | (v126 << 6) | v110[2] & 0x3F;
            v110 += 3;
          }
          v409[0] = v110;
        }
        else
        {
          v409[0] = v110 + 2;
          v125 = v110[1] & 0x3F | ((v124 & 0x1F) << 6);
          v110 += 2;
          v124 = v125;
        }
      }
      else
      {
        ++v110;
      }
      if (v124 == 92)
      {
        v408 = 92;
        if (v110 < v9 && *v110 == 69)
        {
          v409[0] = ++v110;
          v124 = 92;
        }
        else
        {
          if (v9 - v110 < 3)
            goto LABEL_257;
          v131 = v11;
          v132 = v16;
          v133 = v13;
          v134 = v19;
          v135 = v17;
          if (_pcre2_strncmp_8(v110, "Q\\E", 3))
          {
            v124 = v408;
            v17 = v135;
            v19 = v134;
            v13 = v133;
            v16 = v132;
            v11 = v131;
            goto LABEL_255;
          }
          v110 = v409[0] + 3;
          v409[0] += 3;
          v124 = 92;
          v17 = v135;
          v19 = v134;
          v13 = v133;
          v16 = v132;
          v11 = v131;
        }
      }
      else if ((v19 & 0x1000000) == 0 || (v124 != 32 ? (v130 = v124 == 9) : (v130 = 1), !v130))
      {
        v408 = v124;
        if (v123 || v124 != 94)
          goto LABEL_255;
        v123 = 1;
      }
      if (v110 >= v9)
        goto LABEL_254;
    }
  }
  v123 = 0;
  v124 = 91;
LABEL_254:
  v408 = v124;
LABEL_255:
  if (v124 == 93 && (*(_BYTE *)(v4 + 204) & 1) != 0)
  {
    v199 = v123;
    v18 = 0;
    v15 = 0;
    v14 = 0;
    if (v199)
      v68 = -2146697216;
    else
      v68 = -2146762752;
    goto LABEL_233;
  }
LABEL_257:
  v367 = v13;
  v357 = v11;
  v143 = 0;
  v144 = 0;
  if (v123)
    v145 = -2146566144;
  else
    v145 = -2146828288;
  *v6 = v145;
  v146 = v6 + 1;
  while (1)
  {
    if (v144)
    {
      if (v408 == 92 && v409[0] < v9 && *v409[0] == 69)
      {
        v144 = 0;
        ++v409[0];
        goto LABEL_318;
      }
LABEL_303:
      v163 = 0;
      v164 = 3;
      goto LABEL_304;
    }
    if ((v19 & 0x1000000) != 0 && (v408 == 9 || v408 == 32))
    {
      v144 = 0;
      goto LABEL_318;
    }
    if (v408 != 91)
      break;
    if (v9 - v409[0] < 3)
      goto LABEL_303;
    v147 = *v409[0];
    v328 = v147 > 0x3D;
    v148 = (1 << v147) & 0x2400400000000000;
    if (v328 || v148 == 0)
      goto LABEL_303;
    v150 = v16;
    v151 = v19;
    v152 = v17;
    if (check_posix_syntax(v409[0], (uint64_t)v9, &v401))
    {
      if (v143 == 1)
        goto LABEL_836;
      v153 = v409[0];
      if (*v409[0] != 58)
      {
        v349 = 113;
        goto LABEL_831;
      }
      v154 = ++v409[0];
      v155 = v153[1];
      if (v155 == 94)
      {
        v154 = v153 + 2;
        v409[0] = v153 + 2;
      }
      v156 = v401;
      v157 = check_posix_name(v154, (int)v401 - (int)v154);
      if (v157 < 0)
      {
        v346 = 130;
        goto LABEL_813;
      }
      v409[0] = v156 + 2;
      if (v156 + 2 < v389 && v156[2] == 45 && v156[3] != 93)
      {
LABEL_836:
        v346 = 150;
        goto LABEL_813;
      }
      v17 = v152;
      v19 = v151;
      v16 = v150;
      if ((v19 & 0x20000) == 0)
        goto LABEL_335;
      if (((0xBFFFAFFuLL >> (2 * v157)) & 1) != 0)
      {
        v143 = 0;
        v144 = 0;
        v177 = posix_substitutes[(2 * v157) | 1];
        v178 = posix_substitutes[2 * v157];
        if (v155 == 94)
          v179 = -2145910769;
        else
          v179 = -2145910768;
        *v146 = v179;
        v146[1] = v177 | (v178 << 16);
      }
      else
      {
        if (((0xAAA2280uLL >> ((2 * v157) | 1u)) & 1) == 0)
        {
          v143 = 0;
          v144 = 0;
          if (v155 == 94)
            v158 = -2145910766;
          else
            v158 = -2145910765;
          *v146++ = v158;
          goto LABEL_318;
        }
LABEL_335:
        v143 = 0;
        v144 = 0;
        if (v155 == 94)
          v175 = -2145583104;
        else
          v175 = -2145648640;
        *v146 = v175;
        v146[1] = v157;
      }
      v146 += 2;
      goto LABEL_318;
    }
    v163 = 0;
    v164 = 3;
    v17 = v152;
    v19 = v151;
    v16 = v150;
LABEL_304:
    v165 = v408;
    if (v143 == 1)
    {
      v166 = *(v146 - 2);
      if (v408 == v166)
      {
        v143 = 0;
        --v146;
      }
      else
      {
        if (v166 > v408)
        {
          v349 = 108;
          goto LABEL_831;
        }
        if (v163 && *(v146 - 1) == -2145452032)
        {
          *(v146 - 1) = -2145517568;
          v165 = v408;
        }
        v143 = 0;
        *v146++ = v165;
      }
    }
    else
    {
      *v146++ = v408;
      v143 = v164;
    }
LABEL_318:
    v168 = v409[0];
    if (v409[0] >= v9)
    {
      v350 = 106;
      goto LABEL_822;
    }
    ++v409[0];
    v169 = *v168;
    v408 = v169;
    if ((_DWORD)v8 && v169 >= 0xC0)
    {
      if ((v169 & 0x20) != 0)
      {
        v170 = v168[1] & 0x3F;
        if ((v169 & 0x10) != 0)
        {
          if ((v169 & 8) != 0)
          {
            v172 = v168[2] & 0x3F;
            v173 = v168[3] & 0x3F;
            v174 = v168[4] & 0x3F;
            if ((v169 & 4) != 0)
            {
              v169 = ((v169 & 1) << 30) | (v170 << 24) | (v172 << 18) | (v173 << 12) | (v174 << 6) | v168[5] & 0x3F;
              v408 = v169;
              v171 = v168 + 6;
            }
            else
            {
              v171 = v168 + 5;
              v169 = ((v169 & 3) << 24) | (v170 << 18) | (v172 << 12) | (v173 << 6) | v174;
              v408 = v169;
            }
          }
          else
          {
            v169 = ((v169 & 7) << 18) | (v170 << 12) | ((v168[2] & 0x3F) << 6) | v168[3] & 0x3F;
            v408 = v169;
            v171 = v168 + 4;
          }
        }
        else
        {
          v169 = ((v169 & 0xF) << 12) | (v170 << 6) | v168[2] & 0x3F;
          v408 = v169;
          v171 = v168 + 3;
        }
        v409[0] = v171;
      }
      else
      {
        v409[0] = v168 + 2;
        v408 = v168[1] & 0x3F | ((v169 & 0x1F) << 6);
        v169 = v408;
      }
    }
    if (!v144 && v169 == 93)
    {
      if (v143 == 1)
        *(v146 - 1) = 45;
      v18 = 0;
      v15 = 0;
      v14 = 0;
      *v146 = -2146631680;
      v6 = v146 + 1;
      v12 = 1;
      v11 = v357;
      v13 = v367;
      goto LABEL_30;
    }
  }
  if (v408 == 45 && v143 >= 2)
  {
    v144 = 0;
    if (v143 == 3)
      v167 = -2145452032;
    else
      v167 = -2145517568;
    *v146++ = v167;
    v143 = 1;
    goto LABEL_318;
  }
  if (v408 != 92)
    goto LABEL_303;
  v374 = v17;
  v160 = v409[0];
  v401 = v409[0];
  v362 = v19;
  v161 = _pcre2_check_escape_8(v409, (unint64_t)v9, &v408, (int *)&v405 + 1, v19, *(_DWORD *)(*(_QWORD *)v4 + 64), 1, v4);
  if (HIDWORD(v405))
  {
    if ((v391 & 2) == 0)
      goto LABEL_823;
    v409[0] = v160;
    v17 = v374;
    v19 = v362;
    if (v160 >= v9)
    {
      v408 = 92;
      v163 = 1;
      v164 = 2;
LABEL_343:
      v4 = v395;
      goto LABEL_304;
    }
    v409[0] = v160 + 1;
    v162 = *v160;
    v408 = v162;
    v163 = 1;
    v164 = 2;
    if (!(_DWORD)v8)
      goto LABEL_343;
    v4 = v395;
    if (v162 < 0xC0)
      goto LABEL_304;
    if ((v162 & 0x20) == 0)
    {
      v409[0] = v160 + 2;
      v408 = v160[1] & 0x3F | ((v162 & 0x1F) << 6);
      v163 = 1;
      goto LABEL_304;
    }
    v180 = v160[1] & 0x3F;
    if ((v162 & 0x10) == 0)
    {
      v408 = ((v162 & 0xF) << 12) | (v180 << 6) | v160[2] & 0x3F;
      v181 = v160 + 3;
      goto LABEL_374;
    }
    if ((v162 & 8) == 0)
    {
      v408 = ((v162 & 7) << 18) | (v180 << 12) | ((v160[2] & 0x3F) << 6) | v160[3] & 0x3F;
      v181 = v160 + 4;
      goto LABEL_374;
    }
    v183 = v160[2] & 0x3F;
    v184 = v160[3] & 0x3F;
    v185 = v160[4] & 0x3F;
    if ((v162 & 4) != 0)
    {
      v408 = ((v162 & 1) << 30) | (v180 << 24) | (v183 << 18) | (v184 << 12) | (v185 << 6) | v160[5] & 0x3F;
      v181 = v160 + 6;
LABEL_374:
      v409[0] = v181;
    }
    else
    {
      v408 = ((v162 & 3) << 24) | (v180 << 18) | (v183 << 12) | (v184 << 6) | v185;
      v409[0] = v160 + 5;
    }
LABEL_375:
    v163 = 1;
    v164 = 2;
    goto LABEL_304;
  }
  v176 = v161;
  if (v161 > 16)
  {
    v17 = v374;
    v19 = v362;
    v144 = 0;
    switch(v161)
    {
      case 17:
      case 22:
        goto LABEL_846;
      case 25:
        goto LABEL_318;
      case 26:
        v144 = 1;
        goto LABEL_318;
      default:
        goto LABEL_355;
    }
  }
  v17 = v374;
  v19 = v362;
  if (!v161)
    goto LABEL_375;
  if (v161 == 5)
  {
    v408 = 8;
    goto LABEL_375;
  }
  if (v161 != 4)
  {
LABEL_355:
    if (v143 == 1)
    {
LABEL_854:
      v350 = 150;
      goto LABEL_822;
    }
    switch(v161)
    {
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        if ((v19 & 0x20000) == 0)
          goto LABEL_358;
        if ((v161 - 7) > 4)
          v186 = -2145910769;
        else
          v186 = dword_1DEC44460[v161 - 7];
        *v146 = v186;
        v182 = v146 + 1;
        if (v161 > 0xB)
          goto LABEL_385;
        v191 = 1 << v161;
        if (((1 << v161) & 0xC0) != 0)
        {
          v182 = v146 + 2;
          v192 = 196621;
        }
        else
        {
          if ((v191 & 0x300) == 0)
          {
            v17 = v374;
            v19 = v362;
            if ((v191 & 0xC00) != 0)
            {
              v182 = v146 + 2;
              v146[1] = 0x80000;
            }
            goto LABEL_386;
          }
          v182 = v146 + 2;
          v192 = 393216;
        }
        v146[1] = v192;
LABEL_385:
        v17 = v374;
        v19 = v362;
LABEL_386:
        if (v409[0] < v389 && *v409[0] == 45 && v409[0][1] != 93)
          goto LABEL_854;
        v143 = 0;
        v144 = 0;
        v146 = v182;
        break;
      case 12:
        v350 = 171;
        goto LABEL_822;
      case 15:
      case 16:
        LODWORD(v398) = 0;
        v399 = 0;
        if (!get_ucp((unint64_t *)v409, &v398, (_WORD *)&v399 + 1, &v399, (_DWORD *)&v405 + 1, v4))
          goto LABEL_823;
        if (v176 == 15)
          v187 = 16;
        else
          v187 = 15;
        if ((_DWORD)v398)
          v188 = v187;
        else
          v188 = v176;
        v189 = v188 - 2145910784;
        v190 = (unsigned __int16)v399 | (HIWORD(v399) << 16);
        v182 = v146 + 2;
        *v146 = v189;
        v146[1] = v190;
        v17 = v374;
        v19 = v362;
        v4 = v395;
        goto LABEL_386;
      case 18:
      case 19:
      case 20:
      case 21:
LABEL_358:
        *v146 = v161 - 2145910784;
        v182 = v146 + 1;
        goto LABEL_386;
      default:
        goto LABEL_846;
    }
    goto LABEL_318;
  }
LABEL_846:
  HIDWORD(v405) = 107;
  v352 = v409[0] - 1;
LABEL_847:
  v409[0] = v352;
LABEL_823:
  v4 = v395;
LABEL_824:
  *(_QWORD *)(v4 + 168) = &v409[0][-*(_QWORD *)(v4 + 56)];
  return HIDWORD(v405);
}

uint64_t check_lookbehinds(unsigned int *a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int *v14;

  v4 = 0;
  v13 = 0;
  v14 = a1;
  *(_QWORD *)(a4 + 168) = -1;
  v5 = *a1;
  if (*a1 == 0x80000000)
    return v4;
  v9 = 0;
  while ((v5 & 0x80000000) == 0)
  {
LABEL_19:
    v11 = a1[1];
    ++a1;
    v5 = v11;
    v14 = a1;
    if (v11 == 0x80000000)
      return 0;
  }
  switch(((v5 & 0xFFFF0000) + 2147418112) >> 16)
  {
    case 0u:
    case 2u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x15u:
    case 0x16u:
    case 0x1Du:
    case 0x1Eu:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x31u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
      goto LABEL_19;
    case 1u:
    case 7u:
    case 0xEu:
    case 0x19u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x26u:
      goto LABEL_6;
    case 3u:
    case 5u:
    case 0x20u:
      a1 += 3;
      goto LABEL_19;
    case 4u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
      ++a1;
      goto LABEL_19;
    case 6u:
      a1 += 5;
      goto LABEL_19;
    case 0xFu:
      a1 += 2;
      goto LABEL_6;
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
      a1 += 3;
LABEL_6:
      ++v9;
      goto LABEL_19;
    case 0x17u:
      v10 = v5 + 2145910769 < 2;
      goto LABEL_8;
    case 0x18u:
      if (v9 > 0)
      {
        --v9;
        goto LABEL_19;
      }
      if (!a2)
        return 0;
      v4 = 0;
      *a2 = a1;
      return v4;
    case 0x1Fu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
      a1 += 2;
      goto LABEL_19;
    case 0x24u:
    case 0x25u:
    case 0x27u:
      if (!set_lookbehind_lengths(&v14, (int *)&v13 + 1, &v13, a3, a4))
        return HIDWORD(v13);
      a1 = v14;
      goto LABEL_19;
    case 0x28u:
    case 0x2Cu:
    case 0x2Eu:
    case 0x30u:
    case 0x32u:
      v10 = a1[1] + 1;
LABEL_8:
      a1 += v10;
      goto LABEL_19;
    default:
      return 170;
  }
}

uint64_t compile_regex(unsigned int a1, unsigned __int8 **a2, unsigned int **a3, int *a4, unsigned int a5, unsigned int *a6, int *a7, unsigned int *a8, int *a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  _QWORD *v13;
  unsigned int *v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  uint64_t result;
  int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  char *i8;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int16 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  int v59;
  BOOL v60;
  _BOOL4 v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  char v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  unsigned __int16 *v78;
  int v79;
  unsigned int v80;
  int v81;
  char v82;
  unsigned int v83;
  int v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int v87;
  char v88;
  int v89;
  int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v95;
  int v96;
  BOOL v97;
  unsigned int v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unsigned __int8 *v102;
  int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  size_t v108;
  char v109;
  int v110;
  char *v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unint64_t v120;
  unsigned int v121;
  char v122;
  int v123;
  char v124;
  int v125;
  char v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  int v134;
  int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  BOOL v143;
  int v144;
  unint64_t v145;
  char v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  int8x16_t *v150;
  unsigned int v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  char *v157;
  unsigned int *v158;
  uint64_t v159;
  unsigned int *v160;
  int v161;
  int v162;
  char v163;
  char v164;
  char *v165;
  int8x16_t *v166;
  int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  _BOOL4 v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int8 v182;
  unsigned int v183;
  unsigned int v184;
  char v185;
  int8x16_t *v186;
  int8x16_t *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char v191;
  _BYTE *v192;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  int *v201;
  unsigned int *v202;
  int v203;
  int v204;
  unsigned int v205;
  char v206;
  char *v207;
  int v208;
  _BOOL4 v210;
  int v211;
  unsigned int v212;
  char v213;
  unsigned int *v214;
  unsigned int v215;
  int v216;
  BOOL v217;
  int v218;
  char v219;
  int v220;
  unsigned int v221;
  int v222;
  BOOL v223;
  char v225;
  int v227;
  int v228;
  char v229;
  __int16 v230;
  char v231;
  uint64_t v232;
  unint64_t v233;
  unsigned __int8 *v234;
  int v235;
  _BYTE *v236;
  __int16 v237;
  unsigned int v238;
  unsigned __int8 *v239;
  int v240;
  int v241;
  int v242;
  char v243;
  int v244;
  char *v245;
  unsigned int v246;
  int v247;
  int v248;
  BOOL v251;
  char v252;
  int v253;
  size_t v254;
  unsigned int v255;
  int v256;
  unsigned __int8 v257;
  unsigned int v258;
  char v259;
  char v260;
  char *v261;
  unsigned int v262;
  char v263;
  int8x16_t v264;
  char v265;
  _BYTE *v266;
  unsigned int v267;
  char *v268;
  char *v269;
  int v270;
  char v271;
  uint64_t v272;
  unint64_t v273;
  unsigned int v275;
  uint64_t v276;
  char *v277;
  __int16 v278;
  __int16 v279;
  uint64_t v280;
  int v281;
  char v282;
  char *v283;
  uint64_t v284;
  unsigned int v285;
  BOOL v286;
  char *v287;
  __int16 v288;
  size_t v289;
  _BOOL4 v290;
  char v291;
  char v292;
  int v293;
  unint64_t v294;
  unsigned __int8 *v295;
  int v296;
  _BOOL4 v297;
  char v298;
  unsigned int v299;
  int v300;
  char v301;
  int8x16_t v302;
  int v303;
  __int16 v304;
  int v305;
  char v306;
  int v307;
  _BOOL4 v308;
  char *v309;
  uint64_t v310;
  unsigned int v312;
  uint64_t v313;
  int v314;
  unint64_t v315;
  int v316;
  unsigned __int8 *v317;
  int v318;
  _BOOL4 v319;
  __int16 v320;
  char *v321;
  int v322;
  int v323;
  unsigned int v324;
  BOOL v326;
  BOOL v327;
  int v328;
  int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  uint64_t v343;
  char *v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  int v350;
  int v356;
  int v357;
  int v358;
  _BOOL4 v359;
  unsigned __int8 *v360;
  _BOOL4 v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t *v364;
  int v365;
  unsigned __int8 *__dst;
  int v368;
  _BOOL4 v369;
  unint64_t v370;
  unsigned int v371;
  int v373;
  int v374;
  unsigned int v375;
  int v376;
  int v377;
  char *v378;
  unsigned int v379;
  int v380;
  char v381;
  int v382;
  int v383;
  unsigned int v384;
  int v385;
  _BOOL4 v386;
  _BOOL4 v387;
  _BOOL4 v388;
  _BOOL4 v389;
  int v390;
  int v391;
  unsigned int v392;
  char v393;
  char v394;
  char v395;
  char v396;
  char v397;
  unsigned int v398;
  unsigned __int8 *v399;
  int v400;
  unsigned __int8 *v401;
  char *v402;
  char *v403;
  int v404;
  __int16 v405;
  unint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  uint64_t v412;
  uint64_t v413;
  int8x16_t *v414;
  char *v415;
  uint64_t v416;
  unsigned int *v417;
  _OWORD v418[2];
  char __src[8];
  int8x16_t v420;
  int8x16_t v421;
  uint64_t v422;

  v13 = (_QWORD *)a11;
  v422 = *MEMORY[0x1E0C80C00];
  v360 = *a2;
  v14 = *a3;
  v15 = *(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a11 + 24);
  if (v15 && v15(*(unsigned __int16 *)(a11 + 180), *(_QWORD *)(*(_QWORD *)a11 + 32)))
  {
    result = 0;
    v17 = 133;
LABEL_4:
    *a4 = v17;
    return result;
  }
  v18 = a12;
  v409 = 0;
  v410 = 0;
  v407 = a10;
  v408 = (char *)v360;
  v19 = a5 + 6;
  v20 = *v360;
  if ((v20 - 128) < 2)
    goto LABEL_8;
  if (v20 == 136)
  {
    v21 = 0;
    v357 = 0;
    v339 = __rev16(*(unsigned __int16 *)(v360 + 3));
    LOWORD(v410) = v339;
    v409 = *(_QWORD *)(a11 + 184);
    WORD1(v410) = *(_WORD *)(a11 + 182);
    *(_QWORD *)(a11 + 184) = &v409;
  }
  else
  {
    if (v20 == 131)
    {
LABEL_8:
      v339 = 0;
      v21 = *((unsigned __int16 *)v14 - 2);
      v14 += 2;
      v357 = 1;
      goto LABEL_11;
    }
    v21 = 0;
    v357 = 0;
    v339 = 0;
  }
LABEL_11:
  v340 = 0;
  v341 = 0;
  *(_WORD *)(v360 + 1) = 0;
  v22 = &v360[a5 + 3];
  v23 = &v416;
  if (!a12)
    v23 = 0;
  v364 = v23;
  v343 = a5;
  v344 = (char *)v360;
  v342 = -2;
  LODWORD(result) = 1;
  v24 = -2;
  while (2)
  {
    v25 = v357;
    if (!v21)
      v25 = 0;
    v345 = result;
    v346 = v24;
    if (v25 == 1)
    {
      *v22 = 125;
      v22[1] = BYTE1(v21);
      v22[2] = v21;
      v22 += 3;
      v19 += 3;
    }
    v392 = 0;
    v398 = 0;
    v370 = 0;
    v363 = 0;
    v26 = 0;
    v361 = 0;
    v376 = 0;
    v27 = 0;
    v365 = 0;
    v416 = 0;
    v417 = v14;
    v414 = 0;
    v415 = 0;
    v28 = v13[3];
    v349 = a1;
    v350 = (a1 >> 18) & 1;
    v358 = (a1 >> 3) & 1;
    v359 = (a1 & 0x40000) == 0;
    v356 = a1 & 0xA0000;
    v362 = v28;
    v347 = v28 + 64;
    v348 = v28 + 160;
    v29 = -1;
    v377 = -2;
    v375 = a1;
    v30 = -2;
    v368 = -2;
    v373 = -2;
    i8 = (char *)v22;
    __dst = v22;
    v378 = (char *)v22;
LABEL_19:
    v412 = 0;
    v413 = 0;
    LODWORD(v32) = *v14;
    v33 = *v14 & 0xFFFF0000;
    if (v18)
    {
      v34 = v13[5] + v13[10];
      if ((unint64_t)i8 > v34 - 100)
      {
        if ((unint64_t)i8 >= v34)
          v331 = 152;
        else
          v331 = 186;
        goto LABEL_820;
      }
      if (i8 < v378)
        i8 = v378;
      v35 = v33 + 2143354879;
      if (v33 + 2143354879 > 0xFFF4FFFE)
      {
        v378 = i8;
      }
      else
      {
        if (2147483627 - v19 < i8 - (char *)__dst)
          goto LABEL_816;
        v19 += i8 - (char *)__dst;
        i8 = (char *)__dst;
        v378 = (char *)__dst;
        if (v19 > 0x10000)
          goto LABEL_816;
      }
    }
    else
    {
      v35 = v33 + 2143354879;
    }
    v379 = *v14 & 0xFFFF0000;
    v385 = v30;
    if (v376)
      v36 = 1;
    else
      v36 = v27 == 0;
    if (v36)
      v37 = v29;
    else
      v37 = 1;
    if (v35 < 0xFFF4FFFF)
      v26 = i8;
    v403 = v26;
    v406 = v19;
    if (v35 < 0xFFF4FFFF)
      v29 = v37;
    v391 = v29;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = (unsigned __int16)*v14;
    v43 = 0x10000;
    v44 = 138;
    v45 = 1;
    v46 = 1;
    switch(WORD1(v32) ^ 0x8000)
    {
      case 0:
      case 1:
      case 0x19:
        if (v29 < 0)
          result = 0xFFFFFFFFLL;
        else
          result = v345;
        v18 = a12;
        v19 = v406;
        if (a12)
        {
          v21 = *v14;
          v13 = (_QWORD *)a11;
          v320 = (__int16)v360;
          if ((*v14 & 0xFFFF0000) == 0x80010000)
          {
            v22 = &(*a2)[v343 + 3];
            v19 = v406 + 3;
LABEL_815:
            v21 = (unsigned __int16)v21;
            ++v14;
            a1 = v349;
            v24 = v346;
            continue;
          }
        }
        else
        {
          v321 = v344;
          v13 = (_QWORD *)a11;
          v320 = (__int16)v360;
          if (*v344 == 120)
          {
            v322 = v342;
            if (v342 == v377 && v340 == v392)
            {
              v323 = v346;
            }
            else
            {
              v323 = v346;
              v324 = v341;
              if (v342 >= 0 && v346 < 0)
                v324 = v340;
              v341 = v324;
              if (v342 >= 0 && v346 < 0)
                v323 = v342;
              v322 = -1;
            }
            v342 = v322;
            v326 = v322 < 0 && v377 >= 0;
            v327 = v326 && v385 < 0;
            if (v327)
              v328 = v377;
            else
              v328 = v385;
            if (((v328 ^ v323) & 0xFFFFFFFD) != 0)
            {
              v329 = -1;
            }
            else
            {
              v36 = !v327;
              v330 = v392;
              if (v36)
                v330 = v398;
              v329 = v328 | v323;
              if (v341 != v330)
                v329 = -1;
            }
            v346 = v329;
            v321 = v344;
          }
          else
          {
            v340 = v392;
            v341 = v398;
            v342 = v377;
            v346 = v385;
          }
          if (*((unsigned __int16 *)v14 + 1) << 16 == -2147418112)
          {
            *i8 = 120;
            i8[1] = (unsigned __int16)((_WORD)i8 - (_WORD)v321) >> 8;
            i8[2] = (_BYTE)i8 - (_BYTE)v321;
            v408 = i8;
            v22 = (unsigned __int8 *)(i8 + 3);
            LOWORD(v21) = *(_WORD *)v14;
            v344 = i8;
            goto LABEL_815;
          }
          v332 = (_DWORD)i8 - (_DWORD)v321;
          do
          {
            v333 = __rev16(*(unsigned __int16 *)(v321 + 1));
            *(_WORD *)(v321 + 1) = bswap32(v332) >> 16;
            v321 -= v333;
            v332 = v333;
          }
          while ((_DWORD)v333);
        }
        *i8 = 121;
        i8[1] = (unsigned __int16)((_WORD)i8 - v320) >> 8;
        i8[2] = (_BYTE)i8 - v320;
        if (v339 >= 1)
          v13[23] = *(_QWORD *)v13[23];
        *a2 = (unsigned __int8 *)(i8 + 3);
        *a3 = v14;
        *a6 = v340;
        *a7 = v342;
        *a8 = v341;
        *a9 = v346;
        if (!a12)
          return result;
        if (2147483627 - *a12 >= v406)
        {
          *a12 += v406;
          return result;
        }
        result = 0;
        v17 = 120;
        goto LABEL_4;
      case 2:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 132;
        goto LABEL_202;
      case 3:
        if (v42 > 9)
        {
          v215 = v14[2];
          v214 = v14 + 2;
          v112 = v215 | ((unint64_t)*(v214 - 1) << 32);
          v417 = v214;
          v71 = a11;
        }
        else
        {
          v71 = a11;
          v112 = *(_QWORD *)(a11 + 8 * v42 + 88);
        }
        if (v42 > *(_DWORD *)(v71 + 212))
          goto LABEL_827;
        v363 = v112;
        goto LABEL_414;
      case 4:
      case 0x21:
        v70 = v14[3];
        v69 = v14 + 3;
        v71 = a11;
        v72 = *(_QWORD *)(a11 + 192);
        v73 = *(v69 - 2);
        v74 = v70 | ((unint64_t)*(v69 - 1) << 32);
        v417 = v69;
        if (!*(_WORD *)(a11 + 176))
          goto LABEL_825;
        v75 = 0;
        LODWORD(v42) = 0;
        v76 = 0;
        v363 = v74;
        v77 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v74);
        v78 = (unsigned __int16 *)(v72 + 14);
        do
        {
          if ((_DWORD)v73 == *(v78 - 1) && !_pcre2_strncmp_8(v77, *(unsigned __int8 **)(v78 - 7), v73))
          {
            LODWORD(v42) = *(_DWORD *)(v78 - 3);
            if (v379 == -2145320960)
              goto LABEL_197;
            v75 = *v78;
            v79 = 1 << v42;
            if (v42 >= 0x20)
              v79 = 1;
            v80 = *(_DWORD *)(a11 + 248);
            *(_DWORD *)(a11 + 252) |= v79;
            if (v42 > v80)
              *(_DWORD *)(a11 + 248) = v42;
          }
          v78 += 8;
          ++v76;
        }
        while (v76 < *(unsigned __int16 *)(a11 + 176));
        v74 = v363;
        if (!(_DWORD)v42)
        {
LABEL_825:
          *a4 = 115;
          *(_QWORD *)(a11 + 168) = v74;
          return 0;
        }
        if (v75)
        {
          LODWORD(v418[0]) = 0;
          v411 = 0;
          v18 = a12;
          v26 = v403;
          v19 = v406;
          if (!a12 && !find_dupname_details(v77, v73, &v411, (int *)v418, a4, a11))
            return 0;
          v27 = 0;
          v81 = v377;
          if (v377 == -2)
            v81 = -1;
          v377 = v81;
          if ((v375 & 8) != 0)
            v82 = 116;
          else
            v82 = 115;
          *i8 = v82;
          i8[1] = BYTE1(v411);
          i8[2] = v411;
          i8[3] = BYTE1(v418[0]);
          i8[4] = v418[0];
          i8 += 5;
        }
        else
        {
LABEL_414:
          v18 = a12;
          v19 = v406;
          v216 = v377;
          v217 = v377 == -2;
          if (v377 == -2)
            v216 = -1;
          v377 = v216;
          v218 = v373;
          if (v217)
            v218 = -1;
          v373 = v218;
          if ((v375 & 8) != 0)
            v219 = 114;
          else
            v219 = 113;
          *i8 = v219;
          i8[1] = BYTE1(v42);
          i8[2] = v42;
          v220 = 1 << v42;
          if (v42 >= 0x20)
            v220 = 1;
          v221 = *(_DWORD *)(v71 + 248);
          i8 += 3;
          *(_DWORD *)(v71 + 252) |= v220;
          v26 = v403;
          v27 = 0;
          if (v42 > v221)
            *(_DWORD *)(v71 + 248) = v42;
        }
        goto LABEL_510;
      case 5:
        LODWORD(v32) = v14[1];
        v417 = v14 + 1;
        v86 = a11;
        v87 = a1;
        goto LABEL_161;
      case 6:
        v27 = 0;
        *i8 = 118;
        i8[1] = BYTE1(v417[1]);
        i8[2] = v417[1];
        i8[3] = BYTE1(v417[2]);
        i8[4] = v417[2];
        i8[5] = v417[3];
        v417 += 3;
        i8 += 6;
        goto LABEL_433;
      case 7:
        v114 = v14[3];
        v18 = a12;
        if (a12)
        {
          v27 = 0;
          v19 = v406 + v114 + 9;
          v417 = v14 + 5;
          goto LABEL_233;
        }
        *i8 = 119;
        i8[1] = BYTE1(v417[1]);
        i8[2] = v417[1];
        i8[3] = BYTE1(v417[2]);
        i8[4] = v417[2];
        v232 = v417[5];
        v233 = v232 | ((unint64_t)v417[4] << 32);
        v417 += 5;
        v19 = v406;
        v363 = v233;
        v234 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v233);
        v235 = *v234;
        v236 = i8 + 10;
        i8[9] = v235;
        if (v235 == 123)
          v235 = 125;
        v237 = v232 + 1;
        i8[7] = HIBYTE(v237);
        i8[8] = v237;
        v238 = v114 - 1;
        if (v114 - 1 < 2)
        {
          v26 = v403;
        }
        else
        {
          v239 = v234 + 1;
          v26 = v403;
          do
          {
            v240 = *v239;
            if (v240 == v235 && v239[1] == v235)
            {
              *v236 = v235;
              v239 += 2;
              v238 = v114 - 2;
            }
            else
            {
              ++v239;
              *v236 = v240;
            }
            v114 = v238;
            ++v236;
            --v238;
          }
          while (v238 > 1);
        }
        v27 = 0;
        *v236 = 0;
        v287 = v236 + 1;
        i8[5] = (unsigned __int16)((_WORD)v287 - (_WORD)i8) >> 8;
        i8[6] = (_BYTE)v287 - (_BYTE)i8;
        v62 = v392;
        v63 = v398;
        v30 = v385;
        i8 = v287;
        goto LABEL_555;
      case 8:
        v40 = 0;
        v46 = 0;
        *(_WORD *)(i8 + 3) = bswap32(v32) >> 16;
        *(_DWORD *)(a11 + 216) = v42;
        v44 = 136;
        v38 = 2;
        goto LABEL_202;
      case 9:
        if ((v375 & 0x400) != 0)
        {
          v27 = 0;
          v222 = v377;
          v223 = v377 == -2;
          if (v377 == -2)
            v222 = -1;
          v377 = v222;
          v90 = v373;
          if (v223)
            v90 = -1;
          v373 = v90;
          LOBYTE(v90) = 28;
        }
        else
        {
          v27 = 0;
          LOBYTE(v90) = 27;
        }
        goto LABEL_432;
      case 0xA:
      case 0xE:
        v83 = *v14 & 0xFFFF0000;
        v84 = v33 == -2146566144;
        v85 = v14 + 1;
        v32 = v14[1];
        v86 = a11;
        if ((v32 & 0x80000000) != 0)
          goto LABEL_274;
        v35 = v14[2];
        if (v35 == -2146631680)
        {
          v417 = v14 + 2;
          v87 = a1;
          if (v33 == -2146828288)
          {
LABEL_161:
            v113 = v358;
LABEL_235:
            v140 = 0;
            if (v356)
            {
              v19 = v406;
              if ((v375 & 8) != 0)
              {
                v141 = _pcre2_ucd_records_8[12
                                          * _pcre2_ucd_stage2_8[(int)(v32
                                                                    - (v35 & 0xFFFFFF80)
                                                                    + (_pcre2_ucd_stage1_8[(int)v32 / 128] << 7))]
                                          + 3];
                v18 = a12;
                if (v141)
                {
                  *(_WORD *)i8 = 2320;
                  i8[2] = v141;
                  i8 += 3;
                  v142 = v377;
                  v143 = v377 == -2;
                  if (v377 == -2)
                    v142 = -1;
                  v377 = v142;
                  v144 = v373;
                  if (v143)
                    v144 = -1;
                  v373 = v144;
                  v27 = 1;
LABEL_233:
                  v62 = v392;
                  v63 = v398;
                  v30 = v385;
                  goto LABEL_435;
                }
                v140 = 0;
                if ((v87 & 0x80000) != 0)
                {
LABEL_385:
                  v205 = _pcre2_ord2utf_8(v32, (uint64_t)__src);
                  goto LABEL_388;
                }
              }
              else
              {
                v18 = a12;
                if ((v87 & 0x80000) != 0)
                  goto LABEL_385;
              }
            }
            else
            {
              v18 = a12;
              v19 = v406;
              if ((v87 & 0x80000) != 0)
                goto LABEL_385;
            }
LABEL_387:
            __src[0] = v32;
            v205 = 1;
LABEL_388:
            if ((v375 & 8) != 0)
              v206 = 30;
            else
              v206 = 29;
            *i8 = v206;
            v207 = i8 + 1;
            memcpy(v207, __src, v205);
            v208 = __src[0];
            if (__src[0] == 13 || __src[0] == 10)
              *(_DWORD *)(v86 + 208) |= 0x800u;
            i8 = &v207[v205];
            v210 = v205 == 1 || v113 == 0;
            if (v377 == -2)
            {
              if (v210)
              {
                if (v205 == 1)
                {
                  v373 = -1;
                  v62 = v208;
                  v212 = v398;
                  v63 = v398;
                  v377 = v113;
                  v211 = v385;
                  v30 = v385;
                }
                else
                {
                  v63 = *(i8 - 1);
                  v30 = *(_DWORD *)(v86 + 280);
                  v373 = -1;
                  v62 = v208;
                  v377 = v113;
LABEL_403:
                  v211 = v385;
                  v212 = v398;
                }
              }
              else
              {
                v377 = -1;
                v212 = v398;
                v63 = v398;
                v30 = -1;
                v373 = -1;
                v211 = v385;
                v62 = v392;
              }
            }
            else
            {
              if (v210)
              {
                v63 = *(i8 - 1);
                v30 = *(_DWORD *)(v86 + 280) | v113;
                v62 = v392;
                HIDWORD(v370) = v392;
                v373 = v377;
                goto LABEL_403;
              }
              v212 = v398;
              v63 = v398;
              v62 = v392;
              HIDWORD(v370) = v392;
              v211 = v385;
              v30 = v385;
              v373 = v377;
            }
            v258 = v375;
            if (v140)
              v258 = v375 & 0xFFFFFFF7;
            v375 = v258;
            if (v140)
              v113 = 0;
            v358 = v113;
            v27 = 1;
            LODWORD(v370) = v212;
            v368 = v211;
          }
          else
          {
            v256 = v377;
            if (v377 == -2)
              v256 = -1;
            v377 = v256;
            if (!v356
              || (v375 & 8) == 0
              || (v257 = _pcre2_ucd_records_8[12
                                            * _pcre2_ucd_stage2_8[v32 & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + ((v32 >> 6) & 0x3FFFFFE)) << 7)]
                                            + 3]) == 0)
            {
              if ((v375 & 8) != 0)
                v265 = 32;
              else
                v265 = 31;
              *i8 = v265;
              v266 = i8 + 1;
              v26 = v403;
              v19 = v406;
              if ((a1 & 0x80000) != 0 && v32 >= 0x80)
              {
                v267 = _pcre2_ord2utf_8(v32, (uint64_t)v266);
              }
              else
              {
                *v266 = v32;
                v267 = 1;
              }
              v18 = a12;
              v27 = 1;
              v62 = v392;
              v63 = v398;
              v370 = __PAIR64__(v392, v398);
              v30 = v385;
              v368 = v385;
              v373 = v377;
              i8 = &v266[v267];
              goto LABEL_555;
            }
            *(_WORD *)i8 = 2319;
            i8[2] = v257;
            i8 += 3;
            v27 = 1;
            v62 = v392;
            v63 = v398;
            v370 = __PAIR64__(v392, v398);
            v30 = v385;
            v368 = v385;
            v89 = v377;
LABEL_102:
            v373 = v89;
LABEL_434:
            v18 = a12;
            v19 = v406;
          }
LABEL_435:
          v26 = v403;
          goto LABEL_555;
        }
        if (v33 == -2146828288
          && (v35 & 0x80000000) == 0
          && v14[3] == -2146631680
          && !_pcre2_ucd_records_8[12
                                 * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8
                                                                                            + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                 + 3])
        {
          v303 = v356 && v32 >= 0x80
               ? *(_DWORD *)&_pcre2_ucd_records_8[12
                                                * _pcre2_ucd_stage2_8[v14[1] & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + (((unint64_t)v14[1] >> 6) & 0x3FFFFFE)) << 7)]
                                                + 4]
               + v14[1]
               : *(unsigned __int8 *)(*(_QWORD *)(a11 + 16) + v32);
          if ((_DWORD)v32 != v303 && v35 == v303)
          {
            v417 = v14 + 3;
            v113 = v358;
            if ((v375 & 8) == 0)
              v113 = 1;
            v140 = ((v375 & 8) >> 3) ^ 1;
            v375 |= 8u;
            v18 = a12;
            v19 = v406;
            if ((a1 & 0x80000) != 0)
              goto LABEL_385;
            goto LABEL_387;
          }
        }
LABEL_274:
        v150 = (int8x16_t *)(i8 + 4);
        v414 = (int8x16_t *)(i8 + 4);
        v420 = 0u;
        v421 = 0u;
        v151 = *v85;
        if (*v85 == -2146631680)
        {
          v152 = 0;
          v417 = v14 + 1;
          v153 = v377;
          if (v377 == -2)
            v153 = -1;
          v377 = v153;
          v18 = a12;
          v26 = v403;
          v19 = v406;
LABEL_606:
          if (v152 == v84)
            v263 = 110;
          else
            v263 = 111;
          *i8 = v263;
          if (!v18)
          {
            if (v83 == -2146566144)
            {
              v420 = vmvnq_s8(v420);
              v421 = vmvnq_s8(v421);
            }
            v264 = v421;
            *(int8x16_t *)(i8 + 1) = v420;
            *(int8x16_t *)(i8 + 17) = v264;
          }
          i8 += 33;
          goto LABEL_614;
        }
        v369 = v33 == -2146566144;
        v154 = 0;
        v374 = 0;
        v152 = 0;
        v155 = 0;
        v156 = 0;
        v371 = v375 & 0xFFFFFFF7;
        v157 = i8 + 4;
        v18 = a12;
        do
        {
          v158 = v14;
          v159 = v154;
          v14 = v85;
          if (v151 == -2147155968)
          {
            v151 = v158[2];
            v14 = v158 + 2;
LABEL_298:
            if (v151 == 13 || v151 == 10)
              *(_DWORD *)(a11 + 208) |= 0x800u;
            v168 = v14[1] | 0x10000;
            if (v168 == -2145452032)
            {
              v168 = (_DWORD)v14 + 8;
              v169 = v14[2];
              if (v169 == -2147155968)
              {
                v170 = v14[3];
                v14 += 3;
                v169 = v170;
              }
              else
              {
                v14 += 2;
              }
              if (v169 == 13 || v169 == 10)
              {
                v168 = *(_DWORD *)(a11 + 208) | 0x800;
                *(_DWORD *)(a11 + 208) = v168;
              }
              v171 = a11;
              *(_DWORD *)(a11 + 264) = v151;
              *(_DWORD *)(a11 + 268) = v169;
              v172 = v375;
            }
            else
            {
              v171 = a11;
              *(_DWORD *)(a11 + 264) = v151;
              *(_DWORD *)(a11 + 268) = v151;
              v172 = v375;
              v169 = v151;
            }
            v154 = add_to_class_internal((uint64_t)&v420, (_BYTE **)&v414, v172, v171, v151, v169, v168)
                 + v154;
            goto LABEL_346;
          }
          if (v151 == -2145583104 || v151 == -2145648640)
          {
            v152 = v151 == -2145583104;
            v162 = v158[2];
            v160 = v158 + 2;
            v161 = v162;
            if (((v162 < 3) & (v375 >> 3)) != 0)
              v161 = 0;
            if ((v375 & 0x20000) != 0)
            {
              if ((v161 - 8) <= 2)
              {
                if (v151 == -2145583104)
                  v163 = 4;
                else
                  v163 = 3;
                v414 = (int8x16_t *)(v157 + 1);
                *v157 = v163;
                if (v161 == 9)
                  v164 = 12;
                else
                  v164 = 13;
                if (v161 == 8)
                  v164 = 11;
                v165 = (char *)v414;
                v414 = (int8x16_t *)((char *)v414 + 1);
                *v165 = v164;
                v166 = v414;
                v414 = (int8x16_t *)((char *)v414 + 1);
                v166->i8[0] = 0;
LABEL_295:
                v155 = 1;
                goto LABEL_345;
              }
              v173 = (a1 & 0x80000) != 0 && v151 == -2145583104;
              v374 |= v173;
            }
            v174 = 3 * v161;
            v175 = (_OWORD *)(v362 + posix_class_maps[v174]);
            v176 = v175[1];
            v418[0] = *v175;
            v418[1] = v176;
            v177 = (int)v174 + 1;
            v178 = (int)v174 + 2;
            if (((0x2DB6DB6FB6BuLL >> v177) & 1) != 0)
            {
              v179 = posix_class_maps[v177];
              if (((0x2DB6DB6FB6BuLL >> v178) & 1) != 0)
              {
                v188 = 0;
                v189 = v362 + v179;
                do
                {
                  v418[v188] = vorrq_s8((int8x16_t)v418[v188], *(int8x16_t *)(v189 + v188 * 16));
                  ++v188;
                }
                while (v188 != 2);
              }
              else
              {
                v180 = 0;
                v181 = v362 + v179;
                do
                {
                  v418[v180] = vbicq_s8((int8x16_t)v418[v180], *(int8x16_t *)(v181 + v180 * 16));
                  ++v180;
                }
                while (v180 != 2);
              }
            }
            v190 = posix_class_maps[v178];
            if (((0x12492490494uLL >> v178) & 1) != 0)
              v190 = -v190;
            if (v190 == 1)
            {
              v191 = -61;
              v192 = (char *)v418 + 1;
LABEL_337:
              *v192 &= v191;
            }
            else if (v190 == 2)
            {
              v191 = 127;
              v192 = (char *)v418 + 11;
              goto LABEL_337;
            }
            if (v151 == -2145583104)
            {
              for (i = 0; i != 2; ++i)
                *(int8x16_t *)((char *)&v420 + i * 16) = vornq_s8(*(int8x16_t *)((char *)&v420 + i * 16), (int8x16_t)v418[i]);
            }
            else
            {
              for (j = 0; j != 2; ++j)
                *(int8x16_t *)((char *)&v420 + j * 16) = vorrq_s8(*(int8x16_t *)((char *)&v420 + j * 16), (int8x16_t)v418[j]);
            }
            v159 = 1;
LABEL_345:
            v14 = v160;
            v154 = v159;
            goto LABEL_346;
          }
          if ((v151 & 0x80000000) == 0)
            goto LABEL_298;
          if ((v151 & 0xFFFF0000) != 0x80180000)
          {
LABEL_826:
            v331 = 189;
            goto LABEL_820;
          }
          v154 = (v154 + 1);
          switch((__int16)v151)
          {
            case 6:
              for (k = 0; k != 32; ++k)
              {
                v420.i8[k] |= ~*(_BYTE *)(v347 + k);
                v152 = 1;
              }
              break;
            case 7:
              for (m = 0; m != 32; ++m)
                v420.i8[m] |= *(_BYTE *)(v347 + m);
              break;
            case 8:
              for (n = 0; n != 32; ++n)
              {
                v420.i8[n] |= ~*(_BYTE *)(v362 + n);
                v152 = 1;
              }
              break;
            case 9:
              for (ii = 0; ii != 32; ++ii)
                v420.i8[ii] |= *(_BYTE *)(v362 + ii);
              break;
            case 10:
              for (jj = 0; jj != 32; ++jj)
              {
                v420.i8[jj] |= ~*(_BYTE *)(v348 + jj);
                v152 = 1;
              }
              break;
            case 11:
              for (kk = 0; kk != 32; ++kk)
                v420.i8[kk] |= *(_BYTE *)(v348 + kk);
              break;
            case 15:
            case 16:
              v183 = v158[2];
              v160 = v158 + 2;
              v182 = v183;
              v184 = HIWORD(v183);
              if ((unsigned __int16)v151 == 16)
                v185 = 3;
              else
                v185 = 4;
              v414 = (int8x16_t *)(v157 + 1);
              *v157 = v185;
              v186 = v414;
              v414 = (int8x16_t *)((char *)v414 + 1);
              v186->i8[0] = v184;
              v187 = v414;
              v414 = (int8x16_t *)((char *)v414 + 1);
              v187->i8[0] = v182;
              goto LABEL_295;
            case 18:
              v201 = (int *)&_pcre2_hspace_list_8;
              goto LABEL_374;
            case 19:
              v202 = (unsigned int *)&_pcre2_hspace_list_8;
              goto LABEL_376;
            case 20:
              v201 = (int *)&_pcre2_vspace_list_8;
LABEL_374:
              add_not_list_to_class((uint64_t)&v420, (_BYTE **)&v414, v371, a11, v201);
              break;
            case 21:
              v202 = (unsigned int *)&_pcre2_vspace_list_8;
LABEL_376:
              add_list_to_class((uint64_t)&v420, (_BYTE **)&v414, v371, a11, v202);
              break;
            default:
              break;
          }
LABEL_346:
          v157 = (char *)v414;
          if (v414 > v150)
            v156 = 1;
          if (a12 && v414 > v150)
          {
            v406 += (char *)v414 - (char *)v150;
            v414 = (int8x16_t *)(i8 + 4);
            v156 = 1;
            v157 = i8 + 4;
          }
          v85 = v14 + 1;
          v151 = v14[1];
        }
        while (v151 != -2146631680);
        v417 = v14 + 1;
        v203 = v377;
        if (v377 == -2)
          v203 = -1;
        v377 = v203;
        if (!v156)
        {
          v26 = v403;
          v19 = v406;
          v83 = v379;
LABEL_605:
          v84 = v369;
          goto LABEL_606;
        }
        v204 = v155;
        v26 = v403;
        v83 = v379;
        if ((v375 & 0x20000) == 0 && !v204 && v152)
        {
          v19 = v406;
          goto LABEL_605;
        }
        v19 = v406;
        if (v374)
        {
          v414 = (int8x16_t *)(v157 + 1);
          *v157 = 2;
          if ((a1 & 0x80000) == 0)
          {
            v157 = (char *)v414;
            goto LABEL_714;
          }
LABEL_713:
          v299 = _pcre2_ord2utf_8(0x100u, (uint64_t)v414);
          v414 = (int8x16_t *)((char *)v414 + v299);
          v300 = _pcre2_ord2utf_8(0x10FFFFu, (uint64_t)v414);
          v157 = &v414->i8[v300];
        }
        else if ((v375 & 0x20000) == 0 && (a1 & 0x80000) != 0 && v152 && v379 != -2146566144)
        {
          v414 = (int8x16_t *)(v157 + 1);
          *v157 = 2;
          goto LABEL_713;
        }
LABEL_714:
        v301 = v379 == -2146566144;
        v414 = (int8x16_t *)(v157 + 1);
        *v157 = 0;
        *i8 = 112;
        if (v204)
          v301 = (v379 == -2146566144) | 4;
        i8[3] = v301;
        if ((int)v154 < 1)
        {
          i8 = (char *)v414;
        }
        else
        {
          i8[3] = v301 | 2;
          _pcre2_memmove8(i8 + 36, i8 + 4, (char *)v414 - (char *)v150);
          if (v379 == -2146566144 && !v204)
          {
            v420 = vmvnq_s8(v420);
            v421 = vmvnq_s8(v421);
          }
          v302 = v421;
          *v150 = v420;
          *(int8x16_t *)(i8 + 20) = v302;
          i8 = v414[2].i8;
        }
        *(_WORD *)(v403 + 1) = bswap32((_DWORD)i8 - (_DWORD)v403) >> 16;
LABEL_614:
        v27 = 1;
        v62 = v392;
        v63 = v398;
        v370 = __PAIR64__(v392, v398);
        v30 = v385;
        v368 = v385;
        v373 = v377;
LABEL_555:
        v14 = ++v417;
        v392 = v62;
        v398 = v63;
        v13 = (_QWORD *)a11;
        v29 = v391;
        goto LABEL_19;
      case 0xB:
      case 0xC:
        if (v33 == -2146697216)
          v88 = 13;
        else
          v88 = -94;
        *i8++ = v88;
        v89 = v377;
        if (v377 == -2)
          v89 = -1;
        v27 = 1;
        v62 = v392;
        v63 = v398;
        HIDWORD(v370) = v392;
        v30 = v385;
        v377 = v89;
        goto LABEL_102;
      case 0xF:
        goto LABEL_493;
      case 0x10:
        v45 = 0;
        v39 = 0;
        v40 = 0;
        v116 = v14[2];
        v115 = v14 + 2;
        v363 = v116 | ((unint64_t)*(v115 - 1) << 32);
        v417 = v115;
        i8[3] = -89;
        goto LABEL_492;
      case 0x11:
      case 0x13:
      case 0x14:
        v47 = *(_QWORD *)(a11 + 192);
        v50 = v14[3];
        v49 = v14 + 3;
        v48 = v50;
        v52 = *(v49 - 2);
        v51 = *(v49 - 1);
        v417 = v49;
        v53 = *(_QWORD *)(a11 + 56);
        v363 = v50 | ((unint64_t)v51 << 32);
        v54 = (unsigned __int8 *)(v53 + v363);
        v55 = *(_WORD *)(a11 + 176);
        if (!v55)
        {
          v56 = 0;
          goto LABEL_252;
        }
        v56 = 0;
        v57 = v47 + 8;
        while (2)
        {
          if ((_DWORD)v52 != *(unsigned __int16 *)(v57 + 4))
            goto LABEL_45;
          if (_pcre2_strncmp_8(v54, *(unsigned __int8 **)(v57 - 8), v52))
          {
            v55 = *(_WORD *)(a11 + 176);
LABEL_45:
            ++v56;
            v57 += 16;
            if (v56 >= v55)
              goto LABEL_252;
            continue;
          }
          break;
        }
        if (!*(_WORD *)(v57 + 6))
        {
          if (v379 == -2146238464)
            v260 = -110;
          else
            v260 = -112;
          i8[3] = v260;
          i8[4] = BYTE1(*(_DWORD *)v57);
          i8[5] = *(_DWORD *)v57;
          if (*(_DWORD *)v57 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = *(_DWORD *)v57;
          goto LABEL_268;
        }
        v55 = *(_WORD *)(a11 + 176);
LABEL_252:
        if (v56 < v55)
        {
          if (v379 == -2146238464)
            v146 = -110;
          else
            v146 = -112;
          i8[3] = v146;
          LODWORD(v418[0]) = 0;
          v411 = 0;
          if (a12 || find_dupname_details(v54, v52, &v411, (int *)v418, a4, a11))
          {
            ++i8[3];
            *((_WORD *)i8 + 2) = bswap32((unsigned __int16)v411) >> 16;
            *((_WORD *)i8 + 3) = bswap32(LOWORD(v418[0])) >> 16;
            v38 = 5;
            goto LABEL_269;
          }
          return 0;
        }
        if (v379 != -2146172928)
          goto LABEL_830;
        if ((int)v52 < 2)
          goto LABEL_266;
        v147 = 0;
        v148 = (v51 << 32) + v48 + 1;
        v149 = v52 - 1;
        do
        {
          v147 = 10 * v147 + *(unsigned __int8 *)(v53 + v148) - 48;
          if (v147 >= 0x10000)
          {
            *a4 = 161;
LABEL_824:
            *(_QWORD *)(a11 + 168) = v148;
            return 0;
          }
          ++v148;
          --v149;
        }
        while (v149);
        if (v147 > *(_DWORD *)(a11 + 212))
        {
LABEL_830:
          *a4 = 115;
          v148 = v363;
          goto LABEL_824;
        }
        if (!v147)
LABEL_266:
          LOWORD(v147) = -1;
        i8[3] = -110;
        i8[4] = BYTE1(v147);
        i8[5] = v147;
LABEL_268:
        v38 = 3;
LABEL_269:
        v39 = 0;
        v40 = 0;
        v44 = 138;
        v45 = 1;
        v46 = 1;
LABEL_493:
        ++*(_WORD *)(a11 + 180);
        *i8 = v44;
        v416 = 0;
        ++v417;
        v415 = i8;
        v241 = *(_DWORD *)(a11 + 280);
        v242 = compile_regex(v375, &v415, &v417, a4, v38, &v413, &v412, (char *)&v413 + 4, (char *)&v412 + 4, &v407, a11, v364);
        if (!v242)
          return 0;
        --*(_WORD *)(a11 + 180);
        if (v242 > 0)
          v27 = v45 & v39;
        else
          v27 = 0;
        v365 = v242;
        if (v40)
        {
          --*(_WORD *)(a11 + 182);
          goto LABEL_507;
        }
        v243 = v46 ^ 1;
        if (a12)
          v243 = 1;
        if ((v243 & 1) != 0)
        {
LABEL_507:
          v18 = a12;
          v26 = v403;
          if (!a12)
            goto LABEL_516;
LABEL_508:
          if (2147483627 - v406 >= v416 - 6)
          {
            v19 = v416 - 6 + v406;
            *(_DWORD *)(i8 + 1) = 7930624;
            i8[5] = 3;
            i8 += 6;
LABEL_510:
            v62 = v392;
            v63 = v398;
            v30 = v385;
            goto LABEL_555;
          }
LABEL_816:
          v331 = 120;
          goto LABEL_820;
        }
        v244 = 1;
        v245 = i8;
        v26 = v403;
        do
        {
          v245 += __rev16(*(unsigned __int16 *)(v245 + 1));
          --v244;
        }
        while (*v245 != 121);
        v18 = a12;
        if (i8[3] != 167)
        {
          if (-v244 >= 2)
          {
            *(_QWORD *)(a11 + 168) = v363;
            v331 = 127;
            goto LABEL_820;
          }
          if (v244)
            v27 = v242 > 0;
          else
            v412 = -1;
          v44 = 138;
          if (!a12)
          {
LABEL_516:
            i8 = v415;
            if (v44 < 0x84)
            {
              v361 = 0;
              v251 = (v44 == 126 || v44 == 130) && v412 >= 0;
              if (v251 && (int)v412 >= 0)
                v63 = HIDWORD(v413);
              else
                v63 = v398;
              if (v251 && (int)v412 >= 0)
                v30 = HIDWORD(v412);
              else
                v30 = v385;
              v62 = v392;
              v370 = __PAIR64__(v392, v398);
              v368 = v385;
              v373 = v377;
            }
            else
            {
              if (v377 != -2 || (_DWORD)v412 == -2)
              {
                v248 = HIDWORD(v412);
                if ((v412 & 0x80000000) != 0 || (v412 & 0x8000000000000000) == 0)
                {
                  v361 = 0;
                }
                else
                {
                  v361 = 0;
                  HIDWORD(v413) = v413;
                  v248 = v412 | v241;
                  HIDWORD(v412) = v412 | v241;
                }
                v246 = v392;
                v62 = v392;
                v373 = v377;
              }
              else
              {
                v246 = v392;
                if ((int)v412 < 0)
                  v62 = v392;
                else
                  v62 = v413;
                if ((int)v412 < 0)
                  v247 = -1;
                else
                  v247 = v412;
                v377 = v247;
                v361 = (int)v412 >= 0;
                v373 = -1;
                v248 = HIDWORD(v412);
              }
              if (v248 < 0)
                v63 = v398;
              else
                v63 = HIDWORD(v413);
              if (v248 < 0)
                v30 = v385;
              else
                v30 = v248;
              v370 = __PAIR64__(v246, v398);
              v368 = v385;
            }
            goto LABEL_554;
          }
          goto LABEL_508;
        }
        if (!v244)
        {
          i8[3] = -108;
          i8 = v415;
          v62 = v392;
          v63 = v398;
          v30 = v385;
LABEL_554:
          v19 = v406;
          goto LABEL_555;
        }
        *(_QWORD *)(a11 + 168) = v363;
        v331 = 154;
LABEL_820:
        *a4 = v331;
        return 0;
      case 0x12:
        v119 = v14[3];
        v118 = v14 + 3;
        v117 = v119;
        v120 = *(v118 - 1) | ((unint64_t)*(v118 - 2) << 32);
        v417 = v118;
        if (v119 <= *(_DWORD *)(a11 + 212))
        {
          if (v117 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = v117;
          v39 = 0;
          v40 = 0;
          v363 = v120 - 2;
          i8[3] = -112;
          i8[4] = BYTE1(v117);
          i8[5] = v117;
          v38 = 3;
          goto LABEL_493;
        }
        *a4 = 115;
        *(_QWORD *)(a11 + 168) = v120;
        return 0;
      case 0x15:
        v121 = v14[2];
        if (v14[1])
        {
          if (v121 < 0xA || v121 == 10 && v14[3] <= 0x24)
          {
            v122 = -107;
            goto LABEL_491;
          }
        }
        else if (v121 == 10)
        {
          if (v14[3] == 36)
            v122 = -107;
          else
            v122 = -108;
LABEL_491:
          v39 = 0;
          v40 = 0;
          i8[3] = v122;
          v417 += 3;
LABEL_492:
          v38 = 1;
          goto LABEL_493;
        }
        v122 = -108;
        goto LABEL_491;
      case 0x16:
        v27 = 0;
        if ((v375 & 0x400) != 0)
          LOBYTE(v90) = 26;
        else
          LOBYTE(v90) = 25;
        goto LABEL_432;
      case 0x17:
        v123 = v377;
        if (v377 == -2)
          v123 = -1;
        if ((v375 & 0x20) != 0)
          v124 = 13;
        else
          v124 = 12;
        *i8++ = v124;
        v27 = 1;
        v62 = v392;
        v63 = v398;
        v370 = __PAIR64__(v392, v398);
        v30 = v385;
        v368 = v385;
        goto LABEL_200;
      case 0x18:
        v27 = (v42 - 6) < 0x11;
        v125 = v377;
        if ((v27 & (v377 == -2)) != 0)
          v125 = -1;
        v377 = v125;
        if ((v42 - 15) <= 1)
        {
          v127 = v14[1];
          v126 = v127;
          v417 = v14 + 1;
          v128 = HIWORD(v127);
          v19 = v406;
          if ((_DWORD)v42 != 16 || v128)
          {
            if ((_DWORD)v42 == 16)
              v259 = 16;
            else
              v259 = 15;
            *i8 = v259;
            i8[1] = v128;
            i8[2] = v126;
            i8 += 3;
          }
          else
          {
            *i8++ = 13;
          }
          v62 = v392;
          v63 = v398;
          v370 = __PAIR64__(v392, v398);
          v30 = v385;
          v368 = v385;
          v373 = v377;
          v18 = a12;
          goto LABEL_435;
        }
        if ((_DWORD)v42 == 14)
          *(_DWORD *)(a11 + 208) |= 0x400000u;
        v26 = v403;
        v19 = v406;
        if (((v32 & 0xFFFE) == 4 || (_DWORD)v42 == 1) && !*(_DWORD *)(a11 + 276))
          *(_DWORD *)(a11 + 276) = 1;
        if ((_DWORD)v42 == 14 && (a1 & 0x80000) == 0)
          v225 = 13;
        else
          v225 = v32;
        *i8++ = v225;
        v62 = v392;
        v63 = v398;
        v370 = __PAIR64__(v392, v398);
        v30 = v385;
        v368 = v385;
        v373 = v125;
        v18 = a12;
        goto LABEL_555;
      case 0x1A:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 134;
        goto LABEL_202;
      case 0x1B:
        v27 = 0;
        v349 = v14[1];
        v350 = (v349 >> 18) & 1;
        v417 = v14 + 1;
        v358 = (v349 >> 3) & 1;
        v359 = (v349 & 0x40000) == 0;
        v375 = v349;
        goto LABEL_433;
      case 0x20:
        v130 = v14[2];
        v129 = v14 + 2;
        v112 = v130 | ((unint64_t)*(v129 - 1) << 32);
        v417 = v129;
        v71 = a11;
        if (v42 > *(_DWORD *)(a11 + 212))
        {
LABEL_827:
          *(_QWORD *)(v71 + 168) = v112;
          v331 = 115;
          goto LABEL_820;
        }
        v363 = v112;
LABEL_197:
        v361 = 0;
        v27 = 0;
        *i8 = 117;
        i8[1] = BYTE1(v42);
        i8[2] = v42;
        i8 += 3;
        v123 = v377;
        if (v377 == -2)
          v123 = -1;
        *(_DWORD *)(v71 + 292) = 1;
        v62 = v392;
        v63 = v398;
        HIDWORD(v370) = v392;
        v30 = v385;
LABEL_200:
        v377 = v123;
        v373 = v123;
        goto LABEL_434;
      case 0x22:
        v38 = 0;
        v40 = 0;
        v46 = 0;
        v44 = 133;
LABEL_202:
        v39 = 1;
        goto LABEL_493;
      case 0x23:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 126;
        goto LABEL_249;
      case 0x24:
        if (v14[1] != -2145845248 || v14[2] + 2143354879 > 0xFFF4FFFE)
        {
          v45 = 0;
          v38 = 0;
          v46 = 0;
          ++*(_WORD *)(a11 + 182);
          v44 = 127;
LABEL_249:
          v39 = 1;
          v40 = 1;
          goto LABEL_493;
        }
        v27 = 0;
        *i8++ = -94;
        ++v417;
LABEL_433:
        v62 = v392;
        v63 = v398;
        v30 = v385;
        goto LABEL_434;
      case 0x25:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 128;
        goto LABEL_249;
      case 0x26:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 129;
        goto LABEL_249;
      case 0x27:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 130;
        goto LABEL_249;
      case 0x28:
        v45 = 0;
        v38 = 0;
        v46 = 0;
        ++*(_WORD *)(a11 + 182);
        v44 = 131;
        goto LABEL_249;
      case 0x29:
      case 0x2D:
        goto LABEL_221;
      case 0x2A:
        *(_DWORD *)(a11 + 284) = 1;
        v131 = *(uint64_t **)(a11 + 184);
        if (v131)
        {
          v18 = a12;
          v26 = v403;
          v19 = v406;
          do
          {
            if (*((unsigned __int16 *)v131 + 5) < *(unsigned __int16 *)(a11 + 182))
              break;
            if (a12)
            {
              v19 += 3;
            }
            else
            {
              *i8 = -91;
              i8[1] = *((_BYTE *)v131 + 9);
              i8[2] = *((_BYTE *)v131 + 8);
              i8 += 3;
            }
            v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          v18 = a12;
          v26 = v403;
          v19 = v406;
        }
        v27 = 0;
        if (*(_WORD *)(a11 + 182))
          v252 = -92;
        else
          v252 = -93;
        *i8++ = v252;
        v253 = v377;
        if (v377 == -2)
          v253 = -1;
        v377 = v253;
        v376 = 1;
        goto LABEL_510;
      case 0x2B:
      case 0x2C:
        goto LABEL_104;
      case 0x2E:
      case 0x30:
        *(_DWORD *)(a11 + 288) = 1;
LABEL_104:
        v27 = 0;
        v90 = verbops[(v32 + 2144796672) >> 16];
        goto LABEL_432;
      case 0x2F:
      case 0x31:
        *(_DWORD *)(a11 + 288) = 1;
        goto LABEL_221;
      case 0x32:
        v27 = 0;
        *(_DWORD *)(a11 + 208) |= 0x1000u;
        LOBYTE(v90) = -98;
LABEL_432:
        *i8++ = v90;
        goto LABEL_433;
      case 0x33:
        *(_DWORD *)(a11 + 208) |= 0x1000u;
LABEL_221:
        v132 = i8 + 1;
        *i8 = verbops[(v32 + 2144796672) >> 16];
        v133 = i8 + 2;
        v135 = v417[1];
        v134 = v135;
        ++v417;
        v415 = v132;
        if (v135 < 1)
        {
          v136 = 0;
          v18 = a12;
          v19 = v406;
        }
        else
        {
          v136 = 0;
          v18 = a12;
          v19 = v406;
          do
          {
            v137 = v417[1];
            ++v417;
            if ((a1 & 0x80000) != 0)
            {
              v138 = _pcre2_ord2utf_8(v137, (uint64_t)__src);
            }
            else
            {
              __src[0] = v137;
              v138 = 1;
            }
            v139 = v138;
            if (a12)
            {
              v19 += v138;
            }
            else
            {
              memcpy(v133, __src, v138);
              v133 += v139;
              v136 += v139;
            }
            --v134;
          }
          while (v134);
          v132 = v415;
        }
        v27 = 0;
        *v132 = v136;
        *v133 = 0;
        i8 = v133 + 1;
        goto LABEL_233;
      case 0x34:
      case 0x35:
      case 0x36:
        goto LABEL_50;
      case 0x37:
      case 0x38:
      case 0x39:
        v41 = 1;
        goto LABEL_50;
      case 0x3A:
      case 0x3B:
      case 0x3C:
        v41 = 0;
        v43 = 1;
        goto LABEL_50;
      case 0x3D:
      case 0x3E:
      case 0x3F:
        v59 = v14[2];
        v58 = v14 + 2;
        v43 = v59;
        v41 = *(v58 - 1);
        v417 = v58;
LABEL_50:
        if (v27)
          v60 = v41 == 0;
        else
          v60 = 1;
        v27 = !v60;
        v61 = v43 != v41;
        if (v41)
          v62 = v392;
        else
          v62 = HIDWORD(v370);
        if (v41)
          v63 = v398;
        else
          v63 = v370;
        v64 = v377;
        if (!v41)
          v64 = v373;
        v377 = v64;
        if (v41)
          v30 = v385;
        else
          v30 = v368;
        v65 = (v379 + 2144010240) >> 16;
        if (v65 > 0xA)
          goto LABEL_106;
        v66 = 1;
        if (((1 << v65) & 0x249) != 0)
        {
          v68 = 0;
          v67 = 0;
        }
        else if (((1 << v65) & 0x492) != 0)
        {
          v66 = 0;
          v67 = 1;
          v68 = v359;
        }
        else
        {
LABEL_106:
          v66 = 0;
          v67 = 1;
          v68 = v350;
        }
        v91 = v403;
        v415 = v403;
        v92 = *v403;
        v93 = (v92 - 117);
        if (v93 > 0x2D)
          goto LABEL_134;
        if (((1 << (v92 - 117)) & 0x2BFE00) != 0)
        {
          if (v43 == 1 && v41 == 1)
            v95 = v66;
          else
            v95 = 1;
          if ((v95 & 1) != 0)
          {
            v96 = (_DWORD)i8 - (_DWORD)v403;
            if ((_DWORD)v92 != 138)
              goto LABEL_120;
            if (v403[3] != 148 || v403[__rev16(*(unsigned __int16 *)(v403 + 1))] == 120)
            {
              LODWORD(v92) = 138;
              goto LABEL_120;
            }
          }
          goto LABEL_148;
        }
        if ((_DWORD)v92 == 117)
        {
          if (v43 == 1 && v41 == 1)
            v227 = v66;
          else
            v227 = 1;
          if (v227 == 1)
          {
            v18 = a12;
            if (v41)
            {
              if (v41 == 1 && v43 == 0x10000)
              {
                v382 = v68;
                v395 = v67;
                v387 = v43 != v41;
                v228 = v27;
                v41 = 1;
              }
              else
              {
                v293 = v41 - (v43 == v41);
                if (a12)
                {
                  if (v293 > 715827882)
                    goto LABEL_816;
                  v294 = 3 * v293;
                  if (2147483627 - v406 < v294)
                    goto LABEL_816;
                  v406 += v294;
                }
                else if (v293 >= 1)
                {
                  do
                  {
                    v304 = *(_WORD *)v91;
                    i8[2] = v91[2];
                    *(_WORD *)i8 = v304;
                    v91 = i8;
                    i8 += 3;
                    --v293;
                  }
                  while (v293);
                  v91 = i8 - 3;
                }
                v305 = v43 - v41;
                if (v43 == v41)
                  goto LABEL_156;
                v382 = v68;
                v395 = v67;
                v387 = v43 != v41;
                v228 = v27;
                v41 = 0;
                if (v43 == 0x10000)
                  v43 = 0x10000;
                else
                  v43 = v305;
              }
            }
            else
            {
              v382 = v68;
              v395 = v67;
              v387 = v43 != v41;
              v228 = v27;
            }
            _pcre2_memmove8(v91 + 3, v91, 3);
            LODWORD(v92) = 134;
            *(_WORD *)v91 = 134;
            v91[2] = 6;
            *((_WORD *)v91 + 3) = 121;
            v91[8] = 6;
            i8 += 6;
            v403 = v91;
            v96 = (_DWORD)i8 - (_DWORD)v91;
            v365 = -1;
            v416 = 9;
            v27 = v228;
            v61 = v387;
            v67 = v395;
            v68 = v382;
LABEL_120:
            v97 = v43 != 0x10000 || v92 >= 0x84;
            if (v97)
              v98 = v43;
            else
              v98 = v41 + 1;
            v99 = v41 - 1;
            v334 = v96;
            if (v41 != 1)
            {
              if (!v41)
              {
                v380 = v68;
                v393 = v67;
                v386 = v61;
                v335 = v27;
                v18 = a12;
                if (v98 < 2 || v98 == 0x10000)
                {
                  v100 = v403;
                  v399 = (unsigned __int8 *)(v403 + 1);
                  _pcre2_memmove8(v403 + 1, v403, v96);
                  ++i8;
                  if (!v98)
                  {
                    *v403 = -90;
                    v19 = v406;
                    v27 = v335;
                    v61 = v386;
                    v102 = (unsigned __int8 *)(v403 + 1);
                    goto LABEL_151;
                  }
                  v101 = 0;
                  v68 = v380;
                  *v403 = v380 - 106;
                }
                else
                {
                  v399 = (unsigned __int8 *)(v403 + 4);
                  _pcre2_memmove8(v403 + 4, v403, v96);
                  i8 += 4;
                  v68 = v380;
                  *v403 = v380 - 106;
                  v101 = v403 + 2;
                  *(_WORD *)(v403 + 1) = 134;
                  v403[3] = 0;
                  v100 = 0;
                }
                v67 = v393;
                if (v98 == 0x10000)
                {
                  v101 = v100;
                  v111 = i8;
                  v27 = v335;
                  v61 = v386;
                  v102 = v399;
LABEL_628:
                  v268 = v111 - 3;
                  v269 = &v111[-__rev16(*((unsigned __int16 *)v111 - 1)) - 3];
                  v270 = *v269;
                  v271 = v66 ^ 1;
                  if (v270 != 132)
                    v271 = 1;
                  if ((v271 & 1) == 0)
                  {
                    v270 = 134;
                    *v269 = -122;
                    goto LABEL_634;
                  }
                  if ((v270 & 0xFE) != 0x84)
                  {
LABEL_634:
                    if (!a12)
                    {
                      if (v365 < 0)
                      {
                        LOBYTE(v270) = v270 + 5;
                        goto LABEL_693;
                      }
                      if (v270 == 138)
                      {
                        if (v269[__rev16(*(unsigned __int16 *)(v269 + 1))] == 120)
                        {
                          LOBYTE(v270) = -118;
                          goto LABEL_694;
                        }
                        LOBYTE(v270) = -113;
LABEL_693:
                        *v269 = v270;
                      }
                    }
LABEL_694:
                    if (v66)
                    {
                      if (v270 == 143 || v270 == 138)
                      {
                        v405 = (_WORD)v111 - (_WORD)v269;
                        v295 = v102;
                        v296 = v27;
                        v297 = v61;
                        _pcre2_memmove8(v269 + 3, v269, (int)v111 - (int)v269);
                        v102 = v295;
                        v61 = v297;
                        v27 = v296;
                        if (*v269 == 138)
                          v298 = -121;
                        else
                          v298 = -116;
                        *v269 = v298;
                        v111[3] = 124;
                        v111[4] = (unsigned __int16)(v405 + 3) >> 8;
                        v111[5] = v405 + 3;
                        i8 = v111 + 6;
                        v269[1] = (unsigned __int16)(v405 + 3) >> 8;
                        v269[2] = v405 + 3;
                      }
                      else
                      {
                        *v269 = v270 + 1;
                        *v268 = 124;
                        i8 = v111;
                      }
                      v18 = a12;
                      if (v101)
                        *v101 = -104;
                      v97 = v41 >= 2;
                      v19 = v406;
                      if (!v97)
                        goto LABEL_151;
LABEL_758:
                      v309 = v415;
                      v310 = *v415;
                      if (v310 > 0x5C)
                      {
                        if ((v310 - 110) < 2)
                        {
                          v309 = v415 + 33;
LABEL_773:
                          v415 = v309;
                          goto LABEL_774;
                        }
                        if ((_DWORD)v310 == 112)
                        {
                          v313 = __rev16(*(unsigned __int16 *)(v415 + 1));
                        }
                        else
                        {
                          if ((_DWORD)v310 != 93)
                          {
LABEL_774:
                            v314 = (_DWORD)i8 - (_DWORD)v309;
                            if ((int)i8 - (int)v309 >= 1)
                            {
                              v315 = *v309;
                              if (v315 <= 0x75 && (v316 = opcode_possessify[v315]) != 0)
                              {
                                *v309 = v316;
                              }
                              else
                              {
                                v317 = v102;
                                v318 = v27;
                                v319 = v61;
                                _pcre2_memmove8(v309 + 3, v309, ((_DWORD)i8 - (_DWORD)v309));
                                v102 = v317;
                                v61 = v319;
                                v27 = v318;
                                *v309 = -124;
                                i8[3] = 121;
                                i8[4] = (unsigned __int16)(v314 + 3) >> 8;
                                i8[5] = v314 + 3;
                                i8 += 6;
                                *(_WORD *)(v415 + 1) = bswap32(v314 + 3) >> 16;
                              }
                            }
                            v18 = a12;
                            goto LABEL_151;
                          }
                          v313 = 2 * (v415[3] - 15 < 2) + 4;
                        }
                      }
                      else
                      {
                        if ((v310 - 29) > 0x33
                          || ((1 << (v310 - 29)) & 0x800400200100FLL) == 0)
                        {
                          goto LABEL_774;
                        }
                        v309 = &v415[_pcre2_OP_lengths_8[v310]];
                        v415 = v309;
                        if ((a1 & 0x80000) == 0)
                          goto LABEL_774;
                        v312 = *(v309 - 1);
                        if (v312 < 0xC0)
                          goto LABEL_774;
                        v313 = _pcre2_utf8_table4[v312 & 0x3F];
                      }
                      v309 += v313;
                      goto LABEL_773;
                    }
                    *v268 = v68 + 122;
                    i8 = v111;
                    goto LABEL_149;
                  }
                  *v268 = v68 + 122;
                  v91 = (char *)v102;
                  v18 = a12;
                  goto LABEL_674;
                }
                v255 = v98 - 1;
                v27 = v335;
                v61 = v386;
                v102 = v399;
LABEL_625:
                if (v255 == 0x10000)
                {
                  v101 = v100;
                  goto LABEL_627;
                }
                if (v18 && v255)
                {
                  v272 = (v416 + 7) * v255;
                  v273 = v272 - 6;
                  if (v272 > 0x7FFFFFFF || 2147483627 - v406 < v273)
                    goto LABEL_816;
                  v19 = v406 + v273;
                }
                else
                {
                  v275 = v255 - 1;
                  v19 = v406;
                  if ((int)(v255 - 1) >= 0)
                  {
                    v397 = v67;
                    v389 = v61;
                    v337 = v27;
                    v276 = (v68 - 106);
                    *i8 = v68 - 106;
                    v277 = i8 + 1;
                    v401 = v102;
                    if (v255 != 1)
                    {
                      v404 = v62;
                      v278 = (_WORD)i8 + 2;
                      do
                      {
                        v279 = v278 - (_WORD)v101;
                        if (!v101)
                          v279 = 0;
                        v280 = v276;
                        v277[1] = HIBYTE(v279);
                        v101 = v277 + 1;
                        *v277 = -122;
                        v277[2] = v279;
                        memcpy(v277 + 3, v401, v334);
                        v276 = v280;
                        v277 += v334 + 4;
                        *(v277 - 1) = v280;
                        v278 += v334 + 4;
                        --v275;
                      }
                      while (v275);
                      v101 = &v277[-v334 - 3];
                      v18 = a12;
                      v19 = v406;
                      v62 = v404;
                    }
                    memcpy(v277, v401, v334);
                    v102 = v401;
                    i8 = &v277[v334];
                    v27 = v337;
                    v61 = v389;
                    v67 = v397;
                  }
                }
                if (v101)
                {
                  v281 = (_DWORD)i8 + 1;
                  do
                  {
                    v282 = v281 - (_BYTE)v101;
                    v283 = &i8[-(v281 - (int)v101)];
                    v284 = __rev16(*(unsigned __int16 *)(v283 + 1));
                    *i8 = 121;
                    v285 = (v281 - (_DWORD)v101) >> 8;
                    i8[1] = (unsigned __int16)(v281 - (_WORD)v101) >> 8;
                    i8[2] = v281 - (_BYTE)v101;
                    if ((_DWORD)v284)
                      v286 = v101 == 0;
                    else
                      v286 = 1;
                    v101 -= v284;
                    i8 += 3;
                    v283[1] = v285;
                    v283[2] = v282;
                    v281 += 3;
                  }
                  while (!v286);
                }
                v111 = i8;
                v91 = (char *)v102;
LABEL_757:
                v102 = (unsigned __int8 *)v91;
                i8 = v111;
                if ((v67 & 1) == 0)
                  goto LABEL_758;
LABEL_151:
                *(_DWORD *)(a11 + 280) |= 2 * v61;
                v26 = (char *)v102;
                goto LABEL_555;
              }
              if (a12)
              {
                v145 = v416 * v99;
                if (v416 * v99 > 0x7FFFFFFF || 2147483627 - v406 < v145)
                  goto LABEL_816;
                v406 += v145;
              }
              else
              {
                v383 = v68;
                v396 = v67;
                v388 = v61;
                v336 = v27;
                if (v361 && v30 < 0)
                {
                  v63 = v62;
                  v30 = v377;
                }
                v254 = v96;
                do
                {
                  memcpy(i8, v403, v254);
                  i8 += v254;
                  LODWORD(v99) = v99 - 1;
                }
                while ((_DWORD)v99);
                v27 = v336;
                v61 = v388;
                v67 = v396;
                v68 = v383;
              }
            }
            v101 = 0;
            if (v98 == 0x10000)
            {
              v102 = (unsigned __int8 *)v403;
LABEL_627:
              v111 = i8;
              goto LABEL_628;
            }
            v255 = v98 - v41;
            v102 = (unsigned __int8 *)v403;
            v100 = 0;
            v18 = a12;
            goto LABEL_625;
          }
        }
        else if (v93 != 45)
        {
LABEL_134:
          if ((v92 - 110) < 7)
          {
            if (v43)
            {
              v18 = a12;
              if (v43 == 1 && v41 == 1)
              {
                v102 = (unsigned __int8 *)v403;
LABEL_150:
                v19 = v406;
                goto LABEL_151;
              }
              if (v41 || v43 != 0x10000)
              {
                v111 = i8 + 1;
                if (v41 == 1 && v43 == 0x10000)
                {
                  v213 = v68 + 100;
                }
                else
                {
                  if (v43 != 1 || v41)
                  {
                    *i8 = v68 + 104;
                    i8[1] = BYTE1(v41);
                    i8[2] = v41;
                    if (v43 == 0x10000)
                      v288 = 0;
                    else
                      v288 = v43;
                    i8[3] = HIBYTE(v288);
                    i8[4] = v288;
                    v111 = i8 + 5;
                    goto LABEL_674;
                  }
                  v213 = v68 + 102;
                }
                *i8 = v213;
LABEL_674:
                v19 = v406;
                goto LABEL_757;
              }
              *i8++ = v68 + 98;
LABEL_156:
              v111 = i8;
              goto LABEL_674;
            }
            goto LABEL_147;
          }
          if ((v92 - 29) > 3)
          {
            if (v92 >= 0x17)
            {
              v331 = 110;
              goto LABEL_820;
            }
            if (v43 == 1 && v41 == 1)
              goto LABEL_148;
            v394 = v67;
            v108 = 0;
            if ((v92 - 15) > 1)
            {
              v109 = -1;
              v110 = -1;
            }
            else
            {
              v110 = v403[1];
              v109 = v403[2];
            }
            LOBYTE(v103) = 52;
            if (!v43)
              goto LABEL_147;
          }
          else
          {
            if (v43 == 1 && v41 == 1)
              goto LABEL_148;
            v103 = chartypeoffset[v92 - 29];
            v104 = *(i8 - 1);
            v394 = v67;
            if ((a1 & 0x80000) != 0 && (v104 & 0xC0) == 0x80)
            {
              v400 = chartypeoffset[v92 - 29];
              v381 = v68;
              v105 = v27;
              v106 = 0;
              do
                v107 = i8[--v106] & 0xC0;
              while (v107 == 128);
              v108 = -(int)v106;
              __memcpy_chk();
              v109 = -1;
              v110 = -1;
              v27 = v105;
              v61 = v43 != v41;
              LOBYTE(v68) = v381;
              LOBYTE(v103) = v400;
              if (!v43)
              {
LABEL_147:
                i8 = v403;
                goto LABEL_148;
              }
            }
            else
            {
              __src[0] = *(i8 - 1);
              v109 = -1;
              v110 = -1;
              v108 = 1;
              if (v41 >= 2 && v92 <= 0x1E)
              {
                v30 = *(_DWORD *)(a11 + 280) | v358;
                v109 = -1;
                v108 = 1;
                v63 = v104;
              }
              if (!v43)
                goto LABEL_147;
            }
          }
          v229 = v103 + v68;
          if (!v41)
          {
            if (v43 == 1)
            {
              v231 = v229 + 37;
              v91 = v403;
              v19 = v406;
              goto LABEL_683;
            }
            v19 = v406;
            if (v43 != 0x10000)
            {
              v292 = v229 + 39;
              v91 = v403;
              *v403 = v292;
              v403[1] = BYTE1(v43);
              v403[2] = v43;
              v261 = v403 + 3;
              goto LABEL_752;
            }
            v231 = v229 + 33;
LABEL_580:
            v91 = v403;
LABEL_683:
            *v91 = v231;
            v261 = v91 + 1;
LABEL_752:
            if (v108)
            {
              v307 = v27;
              v308 = v61;
              memcpy(v261, __src, v108);
              v61 = v308;
              v27 = v307;
              v111 = &v261[v108];
            }
            else
            {
              *v261 = v92;
              v111 = v261 + 1;
              if ((v110 & 0x80000000) == 0)
              {
                v261[1] = v110;
                v111 = v261 + 3;
                v261[2] = v109;
              }
            }
            v18 = a12;
            v67 = v394;
            goto LABEL_757;
          }
          if (v41 == 1)
          {
            v230 = v43 - 1;
            if (v43 == 1)
            {
              v102 = (unsigned __int8 *)v403;
              goto LABEL_149;
            }
            v19 = v406;
            if (v43 == 0x10000)
            {
              v231 = v229 + 35;
              goto LABEL_580;
            }
            *i8 = v229 + 39;
            i8[1] = HIBYTE(v230);
            i8[2] = v230;
            goto LABEL_750;
          }
          *v403 = v103 + 41;
          v403[1] = BYTE1(v41);
          v403[2] = v41;
          v261 = v403 + 3;
          v262 = v43 - v41;
          if (v43 == v41)
          {
            v19 = v406;
          }
          else
          {
            v19 = v406;
            if (v108)
            {
              v289 = v108;
              v338 = v27;
              v402 = (char *)v108;
              v290 = v61;
              v291 = v109;
              v390 = v110;
              v384 = v262;
              memcpy(v261, __src, v289);
              v262 = v384;
              v110 = v390;
              v109 = v291;
              v61 = v290;
              v108 = (size_t)v402;
              v27 = v338;
              i8 = &v402[(_QWORD)v261];
            }
            else
            {
              v403[3] = v92;
              if (v110 < 0)
              {
                i8 = v403 + 4;
              }
              else
              {
                v403[4] = v110;
                i8 = v403 + 6;
                v403[5] = v109;
              }
            }
            if (v43 == 0x10000)
            {
              v306 = v229 + 33;
            }
            else
            {
              if (v262 != 1)
              {
                *i8 = v229 + 39;
                i8[1] = BYTE1(v262);
                i8[2] = v262;
LABEL_750:
                v261 = i8 + 3;
                goto LABEL_751;
              }
              v306 = v229 + 37;
            }
            *i8 = v306;
            v261 = i8 + 1;
          }
LABEL_751:
          v91 = v403;
          goto LABEL_752;
        }
LABEL_148:
        v102 = (unsigned __int8 *)v403;
LABEL_149:
        v18 = a12;
        goto LABEL_150;
      default:
        v86 = a11;
        v87 = a1;
        v113 = v358;
        if ((v33 & 0x80000000) == 0)
          goto LABEL_235;
        goto LABEL_826;
    }
  }
}

void add_name_to_table(uint64_t a1, void *__src, size_t __n, unsigned int a4, int a5)
{
  int v6;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;

  v6 = __n;
  v9 = *(char **)(a1 + 72);
  v10 = __n;
  if (a5)
  {
    v11 = a5;
    v12 = __n + 2;
    do
    {
      v13 = memcmp(__src, v9 + 2, v10);
      if (v13)
      {
        if (v13 < 0)
          goto LABEL_9;
      }
      else if (v9[v12])
      {
LABEL_9:
        _pcre2_memmove8(&v9[*(unsigned __int16 *)(a1 + 178)], v9, v11 * *(unsigned __int16 *)(a1 + 178));
        break;
      }
      v9 += *(unsigned __int16 *)(a1 + 178);
      --v11;
    }
    while (v11);
  }
  *(_WORD *)v9 = bswap32(a4) >> 16;
  v14 = v9 + 2;
  memcpy(v14, __src, v10);
  bzero(&v14[v10], *(unsigned __int16 *)(a1 + 178) - v6 - 2);
}

unsigned __int8 *find_recurse(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  while (2)
  {
    v2 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v3 = result[1];
        goto LABEL_9;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v3 = result[3];
LABEL_9:
        v5 = 2 * ((v3 - 15) < 2);
        goto LABEL_10;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'v':
        goto LABEL_15;
      case 'p':
        v6 = *(unsigned __int16 *)(result + 1);
        goto LABEL_13;
      case 'u':
        return result;
      case 'w':
        v6 = *(unsigned __int16 *)(result + 5);
LABEL_13:
        result += __rev16(v6);
        continue;
      default:
        if ((v2 - 153) <= 8 && ((1 << (v2 + 103)) & 0x155) != 0)
        {
          v5 = result[1];
LABEL_10:
          result += v5 + _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (*result)
        {
LABEL_15:
          result += _pcre2_OP_lengths_8[v2];
          if (a2 && (v2 - 29) <= 0x37)
          {
            v7 = *(result - 1);
            if (v7 >= 0xC0)
              result += _pcre2_utf8_table4[v7 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t is_anchored(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  unsigned __int8 *significant_code;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = a1;
  v10 = (a4 + 1);
  for (i = *a1; ; i = 0x78u)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[i]], 0);
    result = 0;
    v14 = *significant_code;
    if (v14 > 0x5D)
    {
      switch(*significant_code)
      {
        case 0x7Eu:
        case 0x82u:
          v18 = significant_code;
          v17 = a2;
          v19 = a3;
          v20 = a4;
          v21 = 1;
          goto LABEL_17;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x83u:
        case 0x85u:
          return result;
        case 0x84u:
          v18 = significant_code;
          v17 = a2;
          v19 = a3;
          v20 = v10;
          goto LABEL_16;
        case 0x86u:
        case 0x87u:
        case 0x8Bu:
        case 0x8Cu:
          goto LABEL_14;
        case 0x88u:
        case 0x89u:
        case 0x8Du:
        case 0x8Eu:
          v15 = __rev16(*(unsigned __int16 *)(significant_code + 3));
          if (v15 >= 0x20)
            v16 = 1;
          else
            v16 = 1 << v15;
          v17 = v16 | a2;
          v18 = significant_code;
          goto LABEL_15;
        case 0x8Au:
        case 0x8Fu:
          if (significant_code[__rev16(*(unsigned __int16 *)(significant_code + 1))] != 120)
            return 0;
LABEL_14:
          v18 = significant_code;
          v17 = a2;
LABEL_15:
          v19 = a3;
          v20 = a4;
LABEL_16:
          v21 = a5;
LABEL_17:
          result = is_anchored(v18, v17, v19, v20, v21);
          if ((_DWORD)result)
            goto LABEL_18;
          return result;
        default:
          if (v14 == 94)
            goto LABEL_21;
          return result;
      }
    }
    if (v14 - 1 >= 2)
      break;
LABEL_18:
    v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
    if (*v9 != 120)
      return 1;
  }
  if (v14 - 85 >= 2)
  {
    if (v14 != 27)
      return result;
    goto LABEL_18;
  }
LABEL_21:
  if (significant_code[1] == 13)
  {
    result = 0;
    if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
      return result;
    if (!(*(_DWORD *)(a3 + 288) | a5) && (*(_BYTE *)(a3 + 205) & 0x80) == 0)
      goto LABEL_18;
  }
  return 0;
}

uint64_t find_firstassertedcu(_BYTE *a1, int *a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  int v7;
  char i;
  uint64_t v9;
  unsigned __int8 *significant_code;
  unsigned int v11;
  uint64_t firstassertedcu;
  uint64_t v16;

  v5 = a1;
  v6 = 0;
  v7 = -1;
  *a2 = -1;
  for (i = *a1 + 120; ; i = -16)
  {
    v9 = i > 6u ? 0 : qword_1DEC44478[i];
    significant_code = first_significant_code(&v5[v9 + 3], 1);
    v11 = *significant_code;
    if (v11 > 0x35)
      break;
    if (*significant_code > 0x28u)
    {
      if (v11 - 48 >= 2)
      {
        if (v11 == 41)
        {
          significant_code += 2;
          if (!a3)
            return 0;
        }
        else
        {
          if (v11 != 43)
            return 0;
LABEL_26:
          if (!a3)
            return 0;
        }
        v16 = significant_code[1];
        if (v7 < 0)
        {
          v7 = 0;
LABEL_42:
          v6 = v16;
          goto LABEL_43;
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (v11 - 35 < 2 || v11 == 29)
        goto LABEL_26;
      if (v11 != 30)
        return 0;
    }
LABEL_36:
    if (!a3 || (char)significant_code[1] < 0)
      return 0;
    v16 = significant_code[1];
    if (v7 < 0)
    {
      v7 = 1;
      goto LABEL_42;
    }
LABEL_39:
    if ((_DWORD)v6 != (_DWORD)v16)
      return 0;
LABEL_43:
    v5 += __rev16(*(unsigned __int16 *)(v5 + 1));
    if (*v5 != 120)
    {
      *a2 = v7;
      return v6;
    }
  }
  if (v11 - 126 > 0x10 || ((1 << (v11 - 126)) & 0x18FD1) == 0)
  {
    if (v11 == 54)
    {
      significant_code += 2;
    }
    else if (v11 != 56)
    {
      return 0;
    }
    goto LABEL_36;
  }
  firstassertedcu = find_firstassertedcu();
  if (v7 < 0)
  {
    v6 = firstassertedcu;
    v7 = 0;
    goto LABEL_43;
  }
  if ((_DWORD)v6 == (_DWORD)firstassertedcu && v7 == 0)
    goto LABEL_43;
  return 0;
}

uint64_t is_startline(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *significant_code;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  v9 = a1;
  v27 = a4 + 1;
  v10 = *a1;
  while (2)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[v10]], 0);
    v12 = *significant_code;
    if (v12 != 138)
      goto LABEL_16;
    v14 = significant_code + 3;
    v13 = significant_code[3];
    if (v13 == 119)
    {
      v15 = __rev16(*((unsigned __int16 *)significant_code + 4));
      goto LABEL_7;
    }
    if (v13 == 118)
    {
      v15 = 6;
LABEL_7:
      v14 += v15;
      v13 = *v14;
    }
    v16 = v13 - 144;
    v17 = v16 > 0x12;
    v18 = (1 << v16) & 0x4003F;
    if (!v17 && v18 != 0)
      return 0;
    result = is_startline(v14, a2, a3, a4, 1);
    if (!(_DWORD)result)
      return result;
    do
      v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
    while (*v14 == 120);
    significant_code = first_significant_code(v14 + 3, 0);
    v12 = *significant_code;
LABEL_16:
    switch(v12)
    {
      case 126:
      case 130:
        v21 = a2;
        v24 = a3;
        v25 = a4;
        v26 = 1;
        goto LABEL_24;
      case 127:
      case 128:
      case 129:
      case 131:
      case 133:
      case 138:
        goto LABEL_36;
      case 132:
        v21 = a2;
        v24 = a3;
        v25 = v27;
        goto LABEL_23;
      case 134:
      case 135:
      case 139:
      case 140:
        v21 = a2;
        goto LABEL_22;
      case 136:
      case 137:
      case 141:
      case 142:
        v22 = __rev16(*(unsigned __int16 *)(significant_code + 3));
        if (v22 >= 0x20)
          v23 = 1;
        else
          v23 = 1 << v22;
        v21 = v23 | a2;
LABEL_22:
        v24 = a3;
        v25 = a4;
LABEL_23:
        v26 = a5;
LABEL_24:
        result = is_startline(significant_code, v21, v24, v25, v26);
        if ((_DWORD)result)
          goto LABEL_25;
        return result;
      default:
        if ((v12 - 85) < 2 || v12 == 94)
        {
          if (significant_code[1] != 12)
            return 0;
          result = 0;
          if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
            return result;
          if (*(_DWORD *)(a3 + 288) | a5 || (*(_BYTE *)(a3 + 205) & 0x80) != 0)
            return 0;
        }
        else
        {
LABEL_36:
          if ((v12 - 29) < 0xFFFFFFFE)
            return 0;
        }
LABEL_25:
        v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
        v10 = 0x78u;
        if (*v9 == 120)
          continue;
        result = 1;
        break;
    }
    return result;
  }
}

_DWORD *manage_callouts(int a1, _QWORD *a2, int a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v5;
  BOOL v6;
  _DWORD *v7;
  _DWORD *v8;

  v5 = (_DWORD *)*a2;
  if (*a2)
    v5[2] = a1 - *(_DWORD *)(a5 + 56) - v5[1];
  if (a3)
  {
    if (v5)
      v6 = v5 == a4 - 4;
    else
      v6 = 0;
    if (v6 && v5[3] == 255)
    {
      v7 = a4;
      a4 = v5;
    }
    else
    {
      v7 = a4 + 4;
      *a4 = -2147090432;
      *((_QWORD *)a4 + 1) = 0xFF00000000;
    }
    v8 = a4;
    a4[1] = a1 - *(_DWORD *)(a5 + 56);
    a4 = v7;
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return a4;
}

uint64_t get_ucp(unint64_t *a1, _DWORD *a2, _WORD *a3, _WORD *a4, _DWORD *a5, uint64_t a6)
{
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  unsigned __int8 v25[32];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = (_BYTE *)*a1;
  v8 = (_BYTE *)*a1;
  v9 = *(_QWORD *)(a6 + 64);
  if (*a1 >= v9)
    goto LABEL_14;
  v13 = *v8++;
  v12 = v13;
  *a2 = 0;
  if (v13 == 123)
  {
    if ((unint64_t)v8 < v9)
    {
      if (*v8 == 94)
      {
        *a2 = 1;
        v8 = v7 + 2;
      }
      if ((unint64_t)v8 < v9)
      {
        v14 = 0;
        while (1)
        {
          v15 = &v8[v14];
          v16 = (unint64_t)&v8[v14 + 1];
          v17 = v8[v14];
          if (!v8[v14])
          {
LABEL_12:
            v8 = v15 + 1;
            goto LABEL_14;
          }
          if (v17 == 125)
            break;
          v25[v14] = v17;
          if (v14 <= 0x1D)
          {
            ++v14;
            if (v16 < v9)
              continue;
          }
          goto LABEL_12;
        }
        v8 += v14 + 1;
        goto LABEL_17;
      }
    }
LABEL_14:
    v18 = 0;
    *a5 = 146;
    *a1 = (unint64_t)v8;
    return v18;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a6 + 32) + v12) & 2) == 0)
    goto LABEL_14;
  v25[0] = v12;
  v14 = 1;
LABEL_17:
  v25[v14] = 0;
  *a1 = (unint64_t)v8;
  v20 = 201;
  v21 = 0;
  while (1)
  {
    v22 = (v20 + v21) >> 1;
    v23 = _pcre2_strcmp_8(v25, (unsigned __int8 *)&_pcre2_utt_names_8[_pcre2_utt_8[3 * v22]]);
    if (!v23)
      break;
    if (v23 <= 0)
      v20 = (v20 + v21) >> 1;
    else
      v21 = v22 + 1;
    if (v21 >= v20)
    {
      v18 = 0;
      *a5 = 147;
      return v18;
    }
  }
  v24 = (char *)&_pcre2_utt_8[3 * v22];
  *a3 = *((_WORD *)v24 + 1);
  *a4 = *((_WORD *)v24 + 2);
  return 1;
}

uint64_t read_name(unsigned __int8 **a1, unint64_t a2, int a3, unsigned __int8 a4, _QWORD *a5, _QWORD *a6, _DWORD *a7, int *a8, uint64_t a9)
{
  _BYTE *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;

  v9 = *a1;
  v11 = *a1 + 1;
  v10 = **a1;
  if ((unint64_t)v11 >= a2)
  {
    v14 = 0;
    if (v10 == 42)
      v15 = 160;
    else
      v15 = 162;
    goto LABEL_36;
  }
  *a6 = v11;
  *a5 = &v11[-*(_QWORD *)(a9 + 56)];
  if (!a3 || v10 == 42)
  {
    if (v10 != 42 && *v11 - 48 <= 9)
      goto LABEL_35;
    v16 = 1;
    while ((*(_BYTE *)(*(_QWORD *)(a9 + 32) + v9[v16]) & 0x10) != 0)
    {
      if (a2 - (_QWORD)v9 == ++v16)
      {
        v16 = a2 - (_QWORD)v9;
        goto LABEL_16;
      }
    }
    goto LABEL_16;
  }
  v12 = *v11;
  if (v12 >= 0xC0)
  {
    v13 = v9[2] & 0x3F;
    if ((v12 & 0x20) == 0)
    {
      v12 = v9[2] & 0x3F | ((v12 & 0x1F) << 6);
      goto LABEL_34;
    }
    if ((v12 & 0x10) != 0)
    {
      if ((v12 & 8) != 0)
      {
        v19 = v9[3] & 0x3F;
        v20 = v9[4] & 0x3F;
        v21 = v9[5] & 0x3F;
        if ((v12 & 4) == 0)
        {
          v12 = ((v12 & 3) << 24) | (v13 << 18) | (v19 << 12) | (v20 << 6) | v21;
          goto LABEL_34;
        }
        v17 = ((v12 & 1) << 30) | (v13 << 24) | (v19 << 18) | (v20 << 12) | (v21 << 6);
        v18 = v9[6];
      }
      else
      {
        v17 = ((v12 & 7) << 18) | (v13 << 12) | ((v9[3] & 0x3F) << 6);
        v18 = v9[4];
      }
    }
    else
    {
      v17 = ((v12 & 0xF) << 12) | (v13 << 6);
      v18 = v9[3];
    }
    v12 = v17 & 0xFFFFFFC0 | v18 & 0x3F;
  }
LABEL_34:
  v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
  if (v22 == 13)
  {
LABEL_35:
    v14 = 0;
    v15 = 144;
    goto LABEL_36;
  }
  v16 = 1;
  while (2)
  {
    if (v22 == 13 || v12 == 95 || _pcre2_ucp_gentype_8[v22] == 1)
    {
      do
      {
        if ((unint64_t)&v9[++v16] >= a2)
          goto LABEL_16;
        v12 = v9[v16];
      }
      while ((v12 & 0xC0) == 0x80);
      if (v12 >= 0xC0)
      {
        v24 = v9[v16 + 1] & 0x3F;
        if ((v12 & 0x20) != 0)
        {
          if ((v12 & 0x10) != 0)
          {
            if ((v12 & 8) != 0)
            {
              v27 = v9[v16 + 2] & 0x3F;
              v28 = v9[v16 + 3] & 0x3F;
              v29 = v9[v16 + 4] & 0x3F;
              if ((v12 & 4) == 0)
              {
                v12 = ((v12 & 3) << 24) | (v24 << 18) | (v27 << 12) | (v28 << 6) | v29;
                goto LABEL_55;
              }
              v25 = ((v12 & 1) << 30) | (v24 << 24) | (v27 << 18) | (v28 << 12) | (v29 << 6);
              v26 = v9[v16 + 5];
            }
            else
            {
              v25 = ((v12 & 7) << 18) | (v24 << 12) | ((v9[v16 + 2] & 0x3F) << 6);
              v26 = v9[v16 + 3];
            }
          }
          else
          {
            v25 = ((v12 & 0xF) << 12) | (v24 << 6);
            v26 = v9[v16 + 2];
          }
          v12 = v25 & 0xFFFFFFC0 | v26 & 0x3F;
          goto LABEL_55;
        }
        v12 = v9[v16 + 1] & 0x3F | ((v12 & 0x1F) << 6);
      }
LABEL_55:
      v22 = _pcre2_ucd_records_8[12 * _pcre2_ucd_stage2_8[v12 & 0x7F | (_pcre2_ucd_stage1_8[v12 >> 7] << 7)] + 1];
      continue;
    }
    break;
  }
LABEL_16:
  v11 = &v9[v16];
  if (v16 >= 34)
  {
    v14 = 0;
    v15 = 148;
LABEL_36:
    *a8 = v15;
    goto LABEL_37;
  }
  *a7 = v16 - 1;
  if (v10 != 42)
  {
    if (v16 == 1)
    {
      v14 = 0;
      v15 = 162;
      goto LABEL_36;
    }
    if ((unint64_t)v11 >= a2 || *v11 != a4)
    {
      v14 = 0;
      v15 = 142;
      goto LABEL_36;
    }
    ++v11;
  }
  v14 = 1;
LABEL_37:
  *a1 = v11;
  return v14;
}

uint64_t check_posix_syntax(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;

  v4 = a1 + 1;
  v3 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < 2)
    return 0;
  while (1)
  {
    v5 = a1[1];
    if (v5 == 91)
      break;
    if (v5 != 92)
    {
      if (v5 == 93)
        return 0;
      goto LABEL_10;
    }
    if ((a1[2] & 0xFE) != 0x5C)
      goto LABEL_10;
    v4 = a1 + 2;
LABEL_12:
    a1 = v4++;
    if (a2 - (uint64_t)v4 <= 1)
      return 0;
  }
  if (a1[2] == v3)
    return 0;
LABEL_10:
  if (v5 != v3 || a1[2] != 93)
    goto LABEL_12;
  *a3 = v4;
  return 1;
}

uint64_t check_posix_name(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = 0;
  v5 = a2;
  v6 = "alpha";
  while (1)
  {
    v7 = posix_name_lengths[v4];
    if ((_DWORD)v7 == a2 && !_pcre2_strncmp_8(a1, v6, v5))
      break;
    v6 += v7 + 1;
    if (++v4 == 14)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t set_lookbehind_lengths(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  int branchlength;
  uint64_t result;

  v10 = *a1;
  v11 = *a1 + 2;
  v12 = *v11 | ((unint64_t)(*a1)[1] << 32);
  while (1)
  {
    *a1 = v11 + 1;
    branchlength = get_branchlength(a1, a2, a3, a4, a5);
    if (branchlength < 0)
      break;
    if (branchlength > *(_DWORD *)(a5 + 276))
      *(_DWORD *)(a5 + 276) = branchlength;
    *v10 |= branchlength;
    v11 = *a1;
    v10 = *a1;
    if (**a1 != -2147418112)
      return 1;
  }
  if (!*a2)
    *a2 = 125;
  result = 0;
  if (*(_QWORD *)(a5 + 168) == -1)
    *(_QWORD *)(a5 + 168) = v12;
  return result;
}

uint64_t get_branchlength(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int **v6;
  unsigned int *v7;
  int v8;
  int v9;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int grouplength;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned __int16 *v39;
  int v40;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  _QWORD *v48;
  int v49;
  uint64_t v51;
  unsigned int **v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;

  v6 = a1;
  v7 = *a1;
  v56 = v7;
  v8 = (*a3)++;
  if (v8 > 2000)
  {
    v9 = 135;
    goto LABEL_86;
  }
  v13 = 0;
  v14 = 0;
  v54 = 0;
  v55 = 0;
  while (2)
  {
    v53 = 0;
    v15 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
LABEL_5:
      grouplength = 1;
      goto LABEL_6;
    }
    v17 = v15 & 0xFFFF0000;
    v18 = 0;
    grouplength = 0;
    switch(((v15 & 0xFFFF0000) + 2147418112) >> 16)
    {
      case 0u:
      case 0x18u:
        goto LABEL_92;
      case 1u:
      case 0x19u:
      case 0x21u:
        goto LABEL_40;
      case 2u:
        if ((*(_BYTE *)(a5 + 205) & 2) != 0 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
          goto LABEL_95;
        v30 = (unsigned __int16)*v7;
        if ((unsigned __int16)*v7 > 9u)
          goto LABEL_56;
        v31 = *(_QWORD *)(a5 + 8 * v30 + 88);
        goto LABEL_57;
      case 3u:
        if ((*(_BYTE *)(a5 + 205) & 2) == 0)
          goto LABEL_29;
        goto LABEL_95;
      case 4u:
        goto LABEL_53;
      case 5u:
        grouplength = 0;
        v20 = v7 + 3;
        goto LABEL_12;
      case 6u:
        grouplength = 0;
        v20 = v7 + 5;
        goto LABEL_12;
      case 7u:
        v18 = (unsigned __int16)*v7;
        goto LABEL_40;
      case 8u:
      case 0x15u:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_6;
      case 9u:
      case 0xDu:
        grouplength = 1;
        v56 = parsed_skip(v7, 1);
        if (v56)
          goto LABEL_6;
        goto LABEL_93;
      case 0xBu:
      case 0x16u:
        goto LABEL_5;
      case 0xEu:
        v18 = 0;
LABEL_40:
        v19 = v7 + 1;
        goto LABEL_41;
      case 0xFu:
        v26 = parsed_skip(v7 + 1, 2);
        goto LABEL_44;
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        v18 = 0;
        v19 = v7 + 4;
LABEL_41:
        v56 = v19;
        grouplength = get_grouplength(&v56, 1, (uint64_t)a2, (uint64_t)a3, v18, a4, a5);
        if (grouplength < 0)
          return 0xFFFFFFFFLL;
        goto LABEL_6;
      case 0x17u:
        v40 = (unsigned __int16)*v7;
        if (v40 == 17 || v40 == 22)
          return 0xFFFFFFFFLL;
        if ((v40 - 6) > 0x10)
          goto LABEL_17;
        if (v40 == 14 && (*(_DWORD *)(a5 + 204) & 0x80000) != 0)
        {
          v9 = 136;
          goto LABEL_86;
        }
        if ((v40 - 15) <= 1)
LABEL_53:
          v56 = v7 + 1;
        goto LABEL_5;
      case 0x1Au:
        grouplength = 0;
        v20 = v7 + 1;
        goto LABEL_12;
      case 0x1Fu:
        LODWORD(v30) = (unsigned __int16)*v7;
LABEL_56:
        v43 = v7[2];
        v42 = v7 + 2;
        v31 = v43 | ((unint64_t)*(v42 - 1) << 32);
        v56 = v42;
        goto LABEL_57;
      case 0x20u:
LABEL_29:
        v51 = a4;
        v52 = v6;
        v33 = v7[3];
        v32 = v7 + 3;
        v34 = *(_QWORD *)(a5 + 192);
        v35 = *(v32 - 2);
        v31 = v33 | ((unint64_t)*(v32 - 1) << 32);
        v56 = v32;
        v36 = *(_WORD *)(a5 + 176);
        if (!v36)
          goto LABEL_89;
        v37 = 0;
        v38 = (unsigned __int8 *)(*(_QWORD *)(a5 + 56) + v31);
        v39 = (unsigned __int16 *)(v34 + 14);
        while (2)
        {
          if ((_DWORD)v35 != *(v39 - 1))
            goto LABEL_34;
          if (_pcre2_strncmp_8(v38, *(unsigned __int8 **)(v39 - 7), v35))
          {
            v36 = *(_WORD *)(a5 + 176);
LABEL_34:
            ++v37;
            v39 += 8;
            if (v37 >= v36)
              goto LABEL_89;
            continue;
          }
          break;
        }
        LODWORD(v30) = *(_DWORD *)(v39 - 3);
        if (!(_DWORD)v30)
        {
LABEL_89:
          *a2 = 115;
          *(_QWORD *)(a5 + 168) = v31;
          return 0xFFFFFFFFLL;
        }
        if (v17 == -2145320960)
        {
          a4 = v51;
          v6 = v52;
        }
        else
        {
          v49 = *v39;
          a4 = v51;
          v6 = v52;
          if (v49 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
            goto LABEL_95;
        }
LABEL_57:
        if (v30 > *(_DWORD *)(a5 + 212))
        {
          *(_QWORD *)(a5 + 168) = v31;
          v9 = 115;
          goto LABEL_86;
        }
        if (!(_DWORD)v30)
          goto LABEL_95;
        v44 = *(unsigned int **)(a5 + 224);
        v45 = *v44;
        if (*v44 != 0x80000000)
        {
          do
          {
            if ((v45 & 0xFFFF0000) == 0x80050000)
            {
              ++v44;
            }
            else if (v45 == (v30 | 0x80080000))
            {
              break;
            }
            v46 = v44[1];
            ++v44;
            v45 = v46;
          }
          while (v46 != 0x80000000);
        }
        v53 = v44;
        v47 = parsed_skip(v44 + 1, 2);
        if (!v47)
        {
LABEL_93:
          v9 = 190;
          goto LABEL_86;
        }
        if (v56 > v44 && v56 < v47)
          goto LABEL_95;
        if (!a4)
        {
LABEL_71:
          v54 = a4;
          v55 = v44;
          v53 = v44 + 1;
          grouplength = get_grouplength(&v53, 0, (uint64_t)a2, (uint64_t)a3, v30, (uint64_t)&v54, a5);
          if (grouplength < 0)
          {
            if (!*a2)
              goto LABEL_95;
            return 0xFFFFFFFFLL;
          }
LABEL_6:
          if ((int)(v13 ^ 0x7FFFFFFF) < grouplength)
            goto LABEL_85;
          v13 = (grouplength + v13);
          if ((int)v13 >= 0x10000)
            goto LABEL_85;
          v7 = ++v56;
          v14 = grouplength;
          continue;
        }
        v48 = (_QWORD *)a4;
        while ((unsigned int *)v48[1] != v44)
        {
          v48 = (_QWORD *)*v48;
          if (!v48)
            goto LABEL_71;
        }
LABEL_95:
        v9 = 125;
LABEL_86:
        *a2 = v9;
        return 0xFFFFFFFFLL;
      case 0x22u:
      case 0x23u:
      case 0x26u:
        v21 = check_lookbehinds(v7 + 1, &v56, a4, a5, 0);
        *a2 = v21;
        if (v21)
          return 0xFFFFFFFFLL;
        HIDWORD(v23) = v56[1];
        LODWORD(v23) = HIDWORD(v23) + 2144075776;
        v22 = v23 >> 16;
        v24 = v22 >= 9;
        v25 = v22 - 9;
        if (v24)
        {
          if (v25 >= 3)
          {
LABEL_17:
            grouplength = 0;
          }
          else
          {
            grouplength = 0;
            v20 = v56 + 3;
LABEL_12:
            v56 = v20;
          }
        }
        else
        {
          grouplength = 0;
          ++v56;
        }
        goto LABEL_6;
      case 0x24u:
      case 0x25u:
      case 0x27u:
        if (!set_lookbehind_lengths(&v56, a2, a3, a4, a5))
          return 0xFFFFFFFFLL;
        goto LABEL_17;
      case 0x28u:
      case 0x2Cu:
      case 0x2Eu:
      case 0x30u:
      case 0x32u:
        grouplength = 0;
        v20 = &v7[v7[1] + 1];
        goto LABEL_12;
      case 0x29u:
      case 0x2Au:
        v7 = parsed_skip(v7, 0);
        if (!v7)
          goto LABEL_93;
LABEL_92:
        *v6 = v7;
        return v13;
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
        v27 = v7[2];
        v26 = v7 + 2;
        v28 = *(v26 - 1);
        if (v28 != v27)
          goto LABEL_95;
        v29 = v28 - 1;
        if (v28 == 1)
        {
LABEL_44:
          grouplength = 0;
        }
        else if (v28)
        {
          if (v14 && 0x7FFFFFFF / v14 < v29)
          {
LABEL_85:
            v9 = 187;
            goto LABEL_86;
          }
          grouplength = v29 * v14;
        }
        else
        {
          grouplength = 0;
          LODWORD(v13) = v13 - v14;
        }
        v56 = v26;
        goto LABEL_6;
      default:
        goto LABEL_95;
    }
  }
}

unsigned int *parsed_skip(unsigned int *a1, int a2)
{
  int v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;

  v2 = 0;
  while (2)
  {
    v3 = *a1;
    v4 = 0;
    switch(HIWORD(*a1) ^ 0x8000)
    {
      case 0:
        return v4;
      case 1:
        v4 = a1;
        if (v2 | a2)
          goto LABEL_5;
        return v4;
      case 2:
      case 8:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
        ++v2;
        goto LABEL_5;
      case 3:
        a1 += 2 * ((*a1 & 0xFFFE) > 9);
        goto LABEL_5;
      case 0xD:
        v4 = a1;
        if (a2 == 1)
          return v4;
        goto LABEL_5;
      case 0x18:
        v6 = a1 + 1;
        if ((unsigned __int16)*a1 - 15 > 1)
          v6 = a1;
        if ((unsigned __int16)*a1 - 27 >= 2)
          a1 = v6;
        else
          a1 += 3;
        goto LABEL_5;
      case 0x19:
        if (!v2)
          return a1;
        --v2;
LABEL_5:
        v5 = (v3 >> 16) & 0x7FFF;
        if (v5 <= 0x3F)
        {
          a1 += meta_extra_lengths[v5];
LABEL_7:
          ++a1;
          continue;
        }
        return 0;
      case 0x29:
      case 0x2D:
      case 0x2F:
      case 0x31:
      case 0x33:
        a1 += a1[1];
        goto LABEL_5;
      default:
        if ((v3 & 0x80000000) != 0)
          goto LABEL_5;
        goto LABEL_7;
    }
  }
}

uint64_t get_grouplength(unsigned int **a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t branchlength;
  int v15;

  if (a5 < 1 || (*(_BYTE *)(a7 + 210) & 0x20) != 0)
    goto LABEL_5;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5);
  if ((v13 & 0x40000000) != 0)
    return 0xFFFFFFFFLL;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    branchlength = get_branchlength(a1, a3, a4, a6, a7);
    if ((branchlength & 0x80000000) == 0)
    {
      v15 = -1;
      do
      {
        v13 = branchlength;
        if (v15 != -1 && v15 != (_DWORD)branchlength)
          break;
        if (**a1 == -2145845248)
        {
          if (a5 >= 1)
            *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= branchlength | 0x80000000;
          return v13;
        }
        ++*a1;
        branchlength = get_branchlength(a1, a3, a4, a6, a7);
        v15 = v13;
      }
      while ((branchlength & 0x80000000) == 0);
    }
    if (a5 >= 1)
      *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= 0x40000000u;
    return 0xFFFFFFFFLL;
  }
  if (a2)
    *a1 = parsed_skip(*a1, 2);
  return (unsigned __int16)v13;
}

uint64_t add_list_to_class(uint64_t result, _BYTE **a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;

  v5 = *a5;
  if (*a5 != -1)
  {
    v9 = result;
    do
    {
      v10 = -1;
      do
      {
        v11 = v10 + 2;
        ++v10;
      }
      while (v5 + v10 + 1 == a5[v11]);
      v12 = &a5[v11];
      *(_DWORD *)(a4 + 264) = v5;
      *(_DWORD *)(a4 + 268) = a5[v10];
      result = add_to_class_internal(v9, a2, a3, a4, *a5, a5[v10], *a5);
      v5 = *v12;
      a5 = v12;
    }
    while (*v12 != -1);
  }
  return result;
}

uint64_t add_not_list_to_class(uint64_t a1, _BYTE **a2, int a3, uint64_t a4, int *a5)
{
  int v10;
  uint64_t result;
  int v12;
  int *i;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v10 = *a5;
  if (!*a5
    || (*(_DWORD *)(a4 + 264) = 0,
        *(_DWORD *)(a4 + 268) = v10 - 1,
        result = add_to_class_internal(a1, a2, a3, a4, 0, v10 - 1, v10),
        v10 = *a5,
        *a5 != -1))
  {
    if ((a3 & 0x80000) != 0)
      v12 = 1114111;
    else
      v12 = -1;
    for (i = a5 + 1; ; ++i)
    {
      v14 = *i;
      v15 = v10 + 1;
      if (*i != v10 + 1)
      {
        v16 = v14 == -1 ? v12 : v14 - 1;
        *(_DWORD *)(a4 + 264) = v15;
        *(_DWORD *)(a4 + 268) = v16;
        result = add_to_class_internal(a1, a2, a3, a4, v15, v16, v14 - 1);
        v14 = *i;
        if (*i == -1)
          break;
      }
      v10 = v14;
    }
  }
  return result;
}

uint64_t find_dupname_details(unsigned __int8 *a1, unsigned int a2, unsigned int *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t result;

  v12 = *(unsigned __int8 **)(a6 + 72);
  v13 = *(unsigned __int16 *)(a6 + 176);
  if (*(_WORD *)(a6 + 176))
  {
    v14 = 0;
    v15 = a2 + 2;
    while (_pcre2_strncmp_8(a1, v12 + 2, a2) || v12[v15])
    {
      v12 += *(unsigned __int16 *)(a6 + 178);
      ++v14;
      v13 = *(unsigned __int16 *)(a6 + 176);
      if (v14 >= v13)
        goto LABEL_9;
    }
    v13 = *(unsigned __int16 *)(a6 + 176);
  }
  else
  {
    v14 = 0;
  }
LABEL_9:
  if (v14 >= v13)
  {
    result = 0;
    *a5 = 153;
    *(_QWORD *)(a6 + 168) = &a1[-*(_QWORD *)(a6 + 56)];
  }
  else
  {
    *a3 = v14;
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = __rev16(*(unsigned __int16 *)v12);
      v19 = 1 << v18;
      if (v18 >= 0x20)
        v19 = 1;
      v20 = *(_DWORD *)(a6 + 248);
      *(_DWORD *)(a6 + 252) |= v19;
      if (v18 > v20)
        *(_DWORD *)(a6 + 248) = v18;
      if (v14 + v17 >= *(unsigned __int16 *)(a6 + 176))
        break;
      v12 += *(unsigned __int16 *)(a6 + 178);
      if (_pcre2_strncmp_8(a1, v12 + 2, a2))
        break;
      v16 = v17 + 1;
    }
    while (!v12[a2 + 2]);
    *a4 = v17;
    return 1;
  }
  return result;
}

uint64_t add_to_class_internal@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int a7@<W8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  signed int v15;
  int *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v7 = a6;
  v8 = a5;
  LODWORD(v10) = a3;
  if (a6 >= 0xFF)
    v12 = 255;
  else
    v12 = a6;
  if ((a3 & 8) == 0)
    goto LABEL_5;
  if ((a3 & 0xA0000) != 0)
  {
    v13 = 0;
    v10 = a3 & 0xFFFFFFF7;
    v14 = a5;
LABEL_8:
    v36 = v14 - 1;
    v40 = v14;
LABEL_9:
    v37 = v7 + 1;
    while (v8 <= v7)
    {
      v15 = v8;
      while (1)
      {
        a7 = _pcre2_ucd_stage2_8[v15 - (a7 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v15 / 128] << 7)];
        if (_pcre2_ucd_records_8[12 * a7 + 3])
        {
          v8 = v15 + 1;
          v16 = &_pcre2_ucd_caseless_sets_8[_pcre2_ucd_records_8[12 * a7 + 3]];
          v17 = *v16;
          if (*v16 == -1)
          {
            v18 = 0;
          }
          else
          {
            v38 = v12;
            v39 = v7;
            v18 = 0;
            do
            {
              if (v17 == v15)
              {
                v19 = 0;
                v17 = v16[1];
              }
              else
              {
                v19 = -1;
                do
                {
                  v20 = v16[v19 + 2];
                  ++v19;
                }
                while (v17 + v19 + 1 == v20);
                v18 += add_to_class_internal(a1, a2, v10, a4);
                v17 = v20;
              }
              v16 += (v19 + 1);
            }
            while (v17 != -1);
            v12 = v38;
            v7 = v39;
          }
          goto LABEL_37;
        }
        a7 = *(_DWORD *)&_pcre2_ucd_records_8[12 * a7 + 4];
        if (a7)
          break;
        if (++v15 > v7)
          goto LABEL_45;
      }
      v21 = v15 + 1;
      v22 = v15 + a7;
      do
      {
        v23 = v22;
        v8 = v21;
        if (v21 > v7)
          break;
        v24 = _pcre2_ucd_stage2_8[v21 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[(int)v21 / 128] << 7)];
        if (_pcre2_ucd_records_8[12
                                * _pcre2_ucd_stage2_8[v8 - (v22 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v22 >> 7] << 7)]
                                + 3])
          break;
        ++v22;
        v25 = *(_DWORD *)&_pcre2_ucd_records_8[12 * v24 + 4];
        v21 = v8 + 1;
      }
      while (v22 == v25 + v8);
      if ((v15 + a7) < *(_DWORD *)(a4 + 264) || v23 > *(_DWORD *)(a4 + 268))
      {
        if (v15 + a7 < v14 && v23 >= v36)
        {
          v14 = v15 + a7;
          goto LABEL_8;
        }
        if (v23 <= v7 || v15 + a7 > v37)
        {
          v18 = add_to_class_internal(a1, a2, v10, a4);
LABEL_37:
          v13 = (v18 + v13);
          v14 = v40;
          continue;
        }
        if (v23 >= 0xFF)
          a7 = 255;
        else
          a7 = v23;
        if (v23 > v12)
          v12 = a7;
        v7 = v23;
        goto LABEL_9;
      }
    }
LABEL_45:
    v8 = v14;
  }
  else
  {
    if (v12 < a5)
    {
LABEL_5:
      v13 = 0;
      goto LABEL_50;
    }
    v26 = a5;
    v27 = v12 + 1;
    do
    {
      v28 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v26);
      *(_BYTE *)(a1 + (v28 >> 3)) |= 1 << (v28 & 7);
      ++v26;
    }
    while (v27 != v26);
    v13 = v27 - a5;
  }
LABEL_50:
  if (v7 > 0xFF && (v10 & 0x80000) == 0)
    v30 = 255;
  else
    v30 = v7;
  if (v8 <= *(_DWORD *)(a4 + 264) || v30 >= *(_DWORD *)(a4 + 268))
  {
    if (v8 <= v12)
    {
      v31 = v8;
      do
      {
        *(_BYTE *)(a1 + ((unint64_t)v31 >> 3)) |= 1 << (v31 & 7);
        v13 = (v13 + 1);
        ++v31;
      }
      while (v31 <= v12);
    }
    v32 = v8 <= 0x100 ? 256 : v8;
    if (v30 >= v32)
    {
      v33 = *a2;
      if ((v10 & 0x80000) != 0)
      {
        if (v32 < v7)
        {
          *v33 = 2;
          v34 = (uint64_t)&v33[_pcre2_ord2utf_8(v32, (uint64_t)(v33 + 1)) + 1];
LABEL_70:
          v33 = (_BYTE *)(v34 + _pcre2_ord2utf_8(v7, v34));
          goto LABEL_71;
        }
        if (v32 == v7)
        {
          *v33 = 1;
          v34 = (uint64_t)(v33 + 1);
          goto LABEL_70;
        }
      }
LABEL_71:
      *a2 = v33;
    }
  }
  return v13;
}

unsigned __int8 *first_significant_code(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  unsigned int v4;

  while (1)
  {
    v2 = *result;
    switch(*result)
    {
      case 0x76u:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
        goto LABEL_10;
      case 0x77u:
        result += __rev16(*(unsigned __int16 *)(result + 5));
        continue;
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x82u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x9Au:
      case 0x9Cu:
      case 0x9Eu:
      case 0xA0u:
      case 0xA2u:
      case 0xA3u:
      case 0xA4u:
      case 0xA5u:
        return result;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x83u:
        if (!a2)
          return result;
        do
        {
          result += __rev16(*(unsigned __int16 *)(result + 1));
          v2 = *result;
        }
        while (v2 == 120);
LABEL_10:
        result += _pcre2_OP_lengths_8[v2];
        break;
      case 0x8Au:
      case 0x8Fu:
        if (result[3] != 148)
          return result;
        v4 = __rev16(*(unsigned __int16 *)(result + 1));
        if (result[v4] != 121)
          return result;
        result += v4 + 3;
        break;
      case 0x99u:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Fu:
      case 0xA1u:
        result += result[1] + (unint64_t)_pcre2_OP_lengths_8[v2];
        continue;
      case 0xA6u:
        result += __rev16(*((unsigned __int16 *)result + 1)) + 4;
        continue;
      default:
        if ((v2 - 4) < 2 && a2 != 0)
          goto LABEL_10;
        return result;
    }
  }
}

uint64_t pcre2_pattern_info_8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *size_8;

  if (!a3 && a2 < 0x1B)
    return dword_1DEC444F4[a2];
  if (!a1)
    return 4294967245;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0)
    return 4294967264;
  switch(a2)
  {
    case 0u:
      v6 = *(_DWORD *)(a1 + 88);
      goto LABEL_51;
    case 1u:
      v6 = *(_DWORD *)(a1 + 84);
      goto LABEL_51;
    case 2u:
      v6 = *(unsigned __int16 *)(a1 + 130);
      goto LABEL_51;
    case 3u:
      v6 = *(unsigned __int16 *)(a1 + 120);
      goto LABEL_51;
    case 4u:
      v6 = *(unsigned __int16 *)(a1 + 128);
      goto LABEL_51;
    case 5u:
      if ((v5 & 0x10) == 0)
        goto LABEL_23;
      v6 = *(_DWORD *)(a1 + 112);
      goto LABEL_51;
    case 6u:
      if ((v5 & 0x10) != 0)
        v6 = 1;
      else
        v6 = (v5 >> 8) & 2;
      goto LABEL_51;
    case 7u:
      if ((v5 & 0x40) != 0)
        v7 = a1 + 40;
      else
        v7 = 0;
      goto LABEL_47;
    case 8u:
      v6 = (v5 >> 11) & 1;
      goto LABEL_51;
    case 9u:
      v6 = (v5 >> 10) & 1;
      goto LABEL_51;
    case 0xAu:
      size_8 = *(_QWORD **)(a1 + 32);
      if (size_8)
        size_8 = (_QWORD *)_pcre2_jit_get_size_8(size_8);
      *a3 = (uint64_t)size_8;
      goto LABEL_52;
    case 0xBu:
      if ((v5 & 0x80) != 0)
        v6 = *(_DWORD *)(a1 + 116);
      else
LABEL_23:
        v6 = 0;
      goto LABEL_51;
    case 0xCu:
      v6 = (v5 >> 7) & 1;
      goto LABEL_51;
    case 0xDu:
      v6 = (v5 >> 13) & 1;
      goto LABEL_51;
    case 0xEu:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 104);
      v8 = *(_DWORD *)(a1 + 104);
      goto LABEL_44;
    case 0xFu:
      v6 = *(unsigned __int16 *)(a1 + 124);
      goto LABEL_51;
    case 0x10u:
      v6 = *(unsigned __int16 *)(a1 + 126);
      goto LABEL_51;
    case 0x11u:
      v6 = *(unsigned __int16 *)(a1 + 134);
      goto LABEL_51;
    case 0x12u:
      v6 = *(unsigned __int16 *)(a1 + 132);
      goto LABEL_51;
    case 0x13u:
      v7 = a1 + 136;
      goto LABEL_47;
    case 0x14u:
      v6 = *(unsigned __int16 *)(a1 + 122);
      goto LABEL_51;
    case 0x15u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 108);
      v8 = *(_DWORD *)(a1 + 108);
      goto LABEL_44;
    case 0x16u:
      v7 = *(_QWORD *)(a1 + 72);
      goto LABEL_47;
    case 0x17u:
      v6 = (v5 >> 22) & 1;
      goto LABEL_51;
    case 0x18u:
      v7 = 16 * *(unsigned __int16 *)(a1 + 128) + 128;
LABEL_47:
      *a3 = v7;
      goto LABEL_52;
    case 0x19u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 100);
      v8 = *(_DWORD *)(a1 + 100);
LABEL_44:
      if (v8 != -1)
        goto LABEL_52;
      result = 4294967241;
      break;
    case 0x1Au:
      v6 = *(_DWORD *)(a1 + 92);
LABEL_51:
      *(_DWORD *)a3 = v6;
LABEL_52:
      result = 0;
      break;
    default:
      result = 4294967262;
      break;
  }
  return result;
}

uint64_t _pcre2_is_newline_8(unsigned __int8 *a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v5 = *a1;
  if (a5 && v5 >= 0xC0)
  {
    v6 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_13;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v9 = a1[2] & 0x3F;
        v10 = a1[3] & 0x3F;
        v11 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v6 << 18) | (v9 << 12) | (v10 << 6) | v11;
          goto LABEL_13;
        }
        v7 = ((v5 & 1) << 30) | (v6 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6);
        v8 = a1[5];
      }
      else
      {
        v7 = ((v5 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6);
        v8 = a1[3];
      }
    }
    else
    {
      v7 = ((v5 & 0xF) << 12) | (v6 << 6);
      v8 = a1[2];
    }
    v5 = v7 & 0xFFFFFFC0 | v8 & 0x3F;
  }
LABEL_13:
  if (a2 != 2)
  {
    v12 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v12;
        if (a5)
          v13 = 2;
        else
          v13 = 1;
      }
      else
      {
        v13 = 3;
      }
LABEL_31:
      *a4 = v13;
      return 1;
    }
    if ((v5 - 10) >= 3)
    {
      if (v5 != 13)
        return v12;
      goto LABEL_23;
    }
LABEL_19:
    v13 = 1;
    goto LABEL_31;
  }
  if (v5 == 10)
    goto LABEL_19;
  if (v5 == 13)
  {
LABEL_23:
    v13 = 1;
    if (a3 - 1 > (unint64_t)a1)
    {
      if (a1[1] == 10)
        v13 = 2;
      else
        v13 = 1;
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t _pcre2_was_newline_8(_BYTE *a1, int a2, unint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  if (!a5)
  {
    v8 = *--a1;
    v5 = v8;
    goto LABEL_15;
  }
  do
  {
    v6 = *--a1;
    v5 = v6;
  }
  while ((v6 & 0xC0) == 0x80);
  if (v5 >= 0xC0)
  {
    v7 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_15;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v11 = a1[2] & 0x3F;
        v12 = a1[3] & 0x3F;
        v13 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v7 << 18) | (v11 << 12) | (v12 << 6) | v13;
          goto LABEL_15;
        }
        v9 = ((v5 & 1) << 30) | (v7 << 24) | (v11 << 18) | (v12 << 12) | (v13 << 6);
        v10 = a1[5];
      }
      else
      {
        v9 = ((v5 & 7) << 18) | (v7 << 12) | ((a1[2] & 0x3F) << 6);
        v10 = a1[3];
      }
    }
    else
    {
      v9 = ((v5 & 0xF) << 12) | (v7 << 6);
      v10 = a1[2];
    }
    v5 = v9 & 0xFFFFFFC0 | v10 & 0x3F;
  }
LABEL_15:
  if (a2 != 2)
  {
    v14 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v14;
        if (a5)
          v15 = 2;
        else
          v15 = 1;
      }
      else
      {
        v15 = 3;
      }
LABEL_33:
      *a4 = v15;
      return 1;
    }
    if ((v5 - 11) >= 3)
    {
      if (v5 != 10)
        return v14;
      goto LABEL_25;
    }
LABEL_21:
    v15 = 1;
    goto LABEL_33;
  }
  if (v5 == 13)
    goto LABEL_21;
  if (v5 == 10)
  {
LABEL_25:
    v15 = 1;
    if ((unint64_t)a1 > a3)
    {
      if (*(a1 - 1) == 13)
        v15 = 2;
      else
        v15 = 1;
    }
    goto LABEL_33;
  }
  return 0;
}

_QWORD *_pcre2_memctl_malloc_8(size_t a1, __int128 *a2)
{
  _QWORD *result;
  __int128 v4;

  if (a2)
  {
    result = (_QWORD *)(*(uint64_t (**)(size_t, _QWORD))a2)(a1, *((_QWORD *)a2 + 2));
    if (result)
    {
      v4 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v4;
    }
  }
  else
  {
    result = malloc_type_malloc(a1, 0xB9CCD776uLL);
    if (result)
    {
      *result = default_malloc;
      result[1] = default_free;
      result[2] = 0;
    }
  }
  return result;
}

void *default_malloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xBCB589A9uLL);
}

void *(**pcre2_general_context_create_8(void *(*a1)(size_t a1), void (__cdecl *a2)(void *), void *(*a3)(size_t a1)))(size_t a1)
{
  void *(*v5)(size_t);
  void *(**result)(size_t);
  void (__cdecl *v7)(void *);

  if (a1)
  {
    v5 = a1;
    result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))a1)(24, a3);
  }
  else
  {
    v5 = default_malloc;
    result = (void *(**)(size_t))((uint64_t (*)(uint64_t, void *(*)(size_t)))default_malloc)(24, a3);
  }
  if (result)
  {
    v7 = default_free;
    if (a2)
      v7 = a2;
    *result = v5;
    result[1] = (void *(*)(size_t))v7;
    result[2] = a3;
  }
  return result;
}

__n128 pcre2_compile_context_create_8(uint64_t a1)
{
  _QWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x48uLL, (__int128 *)a1);
  if (v2)
  {
    *((_OWORD *)v2 + 2) = xmmword_1EA937F70;
    *((_OWORD *)v2 + 3) = unk_1EA937F80;
    v2[8] = 0;
    result.n128_u64[0] = xmmword_1EA937F60;
    *(_OWORD *)v2 = _pcre2_default_compile_context_8;
    *((_OWORD *)v2 + 1) = xmmword_1EA937F60;
    if (a1)
    {
      result = *(__n128 *)a1;
      v2[2] = *(_QWORD *)(a1 + 16);
      *(__n128 *)v2 = result;
    }
  }
  return result;
}

__n128 pcre2_match_context_create_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x60uLL, (__int128 *)a1);
  if (v2)
  {
    v2[2] = xmmword_1EA937FB8;
    v2[3] = unk_1EA937FC8;
    v2[4] = xmmword_1EA937FD8;
    v2[5] = unk_1EA937FE8;
    result.n128_u64[0] = _pcre2_default_match_context_8;
    *v2 = _pcre2_default_match_context_8;
    v2[1] = unk_1EA937FA8;
    if (a1)
    {
      result = *(__n128 *)a1;
      *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
      *v2 = result;
    }
  }
  return result;
}

uint64_t pcre2_general_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_set_substitute_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return 0;
}

uint64_t brkhlp_ScanFilesForEnginesAndAddOns(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v6;

  if (a3)
    ssftmap_Clear(*(_QWORD *)(a1 + 40));
  result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(a2 + 16));
  if (*(_QWORD *)(a2 + 32) && (result & 0x80000000) == 0 && *(_WORD *)(a2 + 24))
  {
    v6 = 0;
    do
    {
      result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(*(_QWORD *)(a2 + 32) + 8 * v6));
      if ((result & 0x80000000) != 0)
        break;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 24));
  }
  return result;
}

uint64_t brkhlp_FindAllEnginesAndAddOns(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t FirstFile;
  char *v6;
  unsigned int v7;
  uint64_t NextFile;
  uint64_t *p_s1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char **v36;
  _QWORD *v37;
  int v38;
  const char *v39;
  _QWORD *v40;
  _QWORD *v41;
  unsigned int Next;
  char *v43;
  char *v44;
  int v46;
  const char *v47;
  _QWORD *v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *__s;
  char *__s1;
  char *v55;

  v48 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  __s1 = 0;
  v55 = 0;
  v52 = 0;
  __s = 0;
  v51 = 0;
  v50 = 1;
  FirstFile = brkhlp_FindFirstFile(v4, a2, "*.hdr", (const char **)&__s, (uint64_t *)&v55);
  if ((FirstFile & 0x80000000) != 0)
    return FirstFile;
  v47 = 0;
  do
  {
    if (!v55)
    {
      FirstFile = brkhlp_FindFirstFile(v4, a2, "*.dat", (const char **)&__s, (uint64_t *)&__s1);
      if ((FirstFile & 0x80000000) != 0)
        return FirstFile;
      if (!__s1)
        goto LABEL_43;
      while (1)
      {
        v21 = __s;
        log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szFullPathName=%s", v18, v19, v20, (uint64_t)__s);
        v22 = strrchr(v21, 47);
        if (v22)
          v23 = v22;
        else
          v23 = v21 - 1;
        v24 = strlen(v21) + (_DWORD)v21 - (_DWORD)v23;
        v25 = (char *)heap_Alloc(*(_QWORD *)(v4 + 8), (v24 - 4));
        if (!v25)
          return 2169528330;
        v26 = (unint64_t)v25;
        strncpy(v25, v23 + 1, (v24 - 5))[v24 - 5] = 0;
        log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szSurrogateBrokerString=%s", v27, v28, v29, v26);
        v30 = __s;
        v31 = hdrpars_CreateSurrogateTagMap(*(_QWORD **)(v4 + 8), v26, (uint64_t)__s, &v52);
        if ((v31 & 0x80000000) != 0)
        {
          NextFile = v31;
        }
        else
        {
          NextFile = brkhlp_AddItemToClass((uint64_t)v30, v52, a1);
          if ((NextFile & 0x80000000) == 0)
            log_OutText(*(_QWORD *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem AddedNewSurrogateBrokerString=%s", v32, v33, v34, v26);
        }
        heap_Free(*(_QWORD **)(v4 + 8), v26);
        heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v30);
        if ((NextFile & 0x80000000) != 0)
          break;
        NextFile = brkhlp_FindNextFile(__s1, a2, (const char **)&__s, *(_QWORD **)(v4 + 8), &v50);
        p_s1 = (uint64_t *)&__s1;
        if ((NextFile & 0x80000000) != 0 || !v50)
          goto LABEL_42;
        if (!__s1)
          goto LABEL_43;
      }
      v36 = &__s1;
      goto LABEL_85;
    }
    v6 = __s;
    v7 = strlen(__s);
    if (v7 < 5 || strncmp(&__s[v7 - 4], ".hdr", 4uLL))
      goto LABEL_6;
    NextFile = hdrpars_ReadHeader(*(_WORD **)a1, *(_QWORD *)(a1 + 8), v6, 0, &v52, &v51);
    if ((NextFile & 0x80000000) != 0)
    {
      log_OutPublic(*(_QWORD *)(v4 + 32), (uint64_t)"BROKER", 276, "%s%s", v10, v11, v12, v13, "file");
      if ((NextFile & 0x1FFF) == 0xA)
        goto LABEL_83;
LABEL_6:
      heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v6);
      goto LABEL_7;
    }
    if (!v51)
    {
      v17 = brkhlp_ExpandComponentPath(a1, v52);
      if ((v17 & 0x80000000) == 0)
      {
        NextFile = brkhlp_AddItemToClass((uint64_t)v6, v52, a1);
        goto LABEL_25;
      }
      NextFile = v17;
LABEL_83:
      heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v6);
LABEL_84:
      v36 = &v55;
LABEL_85:
      v44 = *v36;
      goto LABEL_86;
    }
    v49 = 0;
    if (vector_GetElemAt(v51, 0, &v49))
    {
      v14 = 1;
      while (1)
      {
        if ((NextFile & 0x80000000) != 0)
          goto LABEL_18;
        v15 = brkhlp_ExpandComponentPath(a1, *v49);
        if ((v15 & 0x80000000) != 0)
          break;
        NextFile = brkhlp_AddItemToClass((uint64_t)v6, *v49, a1);
LABEL_19:
        if (!vector_GetElemAt(v51, v14++, &v49))
          goto LABEL_20;
      }
      NextFile = v15;
LABEL_18:
      ssftmap_ObjClose(*v49);
      goto LABEL_19;
    }
LABEL_20:
    vector_ObjClose(v51);
    v51 = 0;
LABEL_25:
    heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v6);
    if ((NextFile & 0x80000000) != 0)
      goto LABEL_84;
LABEL_7:
    NextFile = brkhlp_FindNextFile(v55, a2, (const char **)&__s, *(_QWORD **)(v4 + 8), &v50);
    p_s1 = (uint64_t *)&v55;
  }
  while ((NextFile & 0x80000000) == 0 && v50);
LABEL_42:
  osspi_FindClose(*p_s1);
  if ((NextFile & 0x80000000) != 0)
    return NextFile;
LABEL_43:
  v47 = 0;
  v48 = 0;
  if (!a2)
    goto LABEL_69;
  __s1 = 0;
  v55 = 0;
  FirstFile = brkhlp_ConcatenatePath((const char **)&v55, a2, "*", 0, *(_QWORD *)(v4 + 8));
  if ((FirstFile & 0x80000000) != 0)
    return FirstFile;
  v35 = v55;
  LODWORD(NextFile) = osspi_FindOpen(*(_QWORD **)(v4 + 64), *(_QWORD **)(v4 + 8), (uint64_t)v55, 16, (uint64_t)&__s1, (uint64_t *)&v48);
  if ((NextFile & 0x80000000) == 0)
  {
    while ((NextFile & 0x80000000) == 0)
    {
      NextFile = (uint64_t)__s1;
      if (strcmp(__s1, ".") && strcmp((const char *)NextFile, ".."))
      {
        v38 = brkhlp_ConcatenatePath(&v47, a2, (const char *)NextFile, 0, *(_QWORD *)(v4 + 8));
        LODWORD(NextFile) = 0;
        if ((v38 & 0x80000000) == 0)
        {
LABEL_58:
          if (__s1)
            heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)__s1);
          goto LABEL_60;
        }
        v46 = v38;
        v37 = v48;
        LODWORD(NextFile) = v46;
        if (!v48)
        {
LABEL_56:
          v48 = 0;
          goto LABEL_58;
        }
LABEL_55:
        osspi_FindClose((uint64_t)v37);
        goto LABEL_56;
      }
      heap_Free(*(_QWORD **)(v4 + 8), NextFile);
      __s1 = 0;
      LODWORD(NextFile) = osspi_FindNext(v48, (uint64_t)&__s1);
      if ((NextFile & 0x1FFF) == 0x14)
      {
        NextFile = 0;
        goto LABEL_63;
      }
    }
    v37 = v48;
    if (!v48)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_60:
  if ((NextFile & 0x1FFF) == 0x14)
    NextFile = 0;
  else
    NextFile = NextFile;
LABEL_63:
  if (v35)
    heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v35);
  if (!v47 && v48)
  {
    osspi_FindClose((uint64_t)v48);
    v48 = 0;
  }
  if ((NextFile & 0x80000000) == 0)
  {
LABEL_69:
    if (v48)
    {
      while (1)
      {
        v39 = v47;
        NextFile = brkhlp_FindAllEnginesAndAddOns(a1, v47);
        heap_Free(*(_QWORD **)(v4 + 8), (uint64_t)v39);
        if ((NextFile & 0x80000000) != 0)
          break;
        v40 = v48;
        v41 = *(_QWORD **)(v4 + 8);
        v55 = 0;
        v47 = 0;
        Next = osspi_FindNext(v48, (uint64_t)&v55);
        if ((Next & 0x80000000) != 0)
        {
          if ((Next & 0x1FFF) == 0x14)
            NextFile = 0;
          else
            NextFile = Next;
          break;
        }
        while (1)
        {
          v43 = v55;
          if ((Next & 0x80000000) != 0 || strcmp(v55, ".") && strcmp(v43, ".."))
            break;
          heap_Free(v41, (uint64_t)v43);
          v55 = 0;
          Next = osspi_FindNext(v40, (uint64_t)&v55);
          if ((Next & 0x1FFF) == 0x14)
          {
            NextFile = 0;
            goto LABEL_80;
          }
        }
        NextFile = brkhlp_ConcatenatePath(&v47, a2, v43, 0, (uint64_t)v41);
        heap_Free(v41, (uint64_t)v55);
        if ((NextFile & 0x80000000) != 0)
          break;
        NextFile = 0;
        if (!v48)
          return NextFile;
      }
LABEL_80:
      v44 = (char *)v48;
LABEL_86:
      osspi_FindClose((uint64_t)v44);
    }
    else
    {
      return 0;
    }
  }
  return NextFile;
}

uint64_t brkhlp_FindFirstFile(uint64_t a1, char *a2, const char *a3, const char **a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  const char *v11;
  unsigned int Open;
  const char *v14;
  const char *v15;

  v5 = 0;
  *a5 = 0;
  if (a2 && a3)
  {
    v14 = 0;
    v15 = 0;
    v10 = brkhlp_ConcatenatePath(&v15, a2, a3, 0, *(_QWORD *)(a1 + 8));
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else
    {
      v11 = v15;
      Open = osspi_FindOpen(*(_QWORD **)(a1 + 64), *(_QWORD **)(a1 + 8), (uint64_t)v15, 0, (uint64_t)&v14, a5);
      if ((Open & 0x80000000) != 0)
      {
        if ((Open & 0x1FFF) == 0x14)
          v5 = 0;
        else
          v5 = Open;
      }
      else
      {
        v5 = brkhlp_ConcatenatePath(a4, a2, v14, 0, *(_QWORD *)(a1 + 8));
        if ((v5 & 0x80000000) != 0)
        {
          if (*a5)
            osspi_FindClose(*a5);
          *a5 = 0;
        }
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v14);
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v11);
    }
  }
  return v5;
}

uint64_t brkhlp_ExpandComponentPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;

  v17 = 0;
  v18 = 0;
  v13 = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = "COMPONENT";
  v5 = brkhlp_SearchTag(a2, (uint64_t)"COMPONENT", &v18);
  if (v5 < 0
    && (v4 = "COMMONCOMPONENT", v6 = brkhlp_SearchTag(a2, (uint64_t)"COMMONCOMPONENT", &v18), (v6 & 0x80000000) != 0)
    || (v6 = brkhlp_SearchTag(a2, (uint64_t)"HDRFILE", &v17), (v6 & 0x80000000) != 0)
    || (v6 = brkhlp_ConcatenatePath(&v13, v17, v18, 1, *(_QWORD *)(v3 + 8)), (v6 & 0x80000000) != 0))
  {
    v9 = v6;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v7 = v13;
    v14 = v13;
    v8 = ssftmap_Insert(a2, (uint64_t)"FULLPATHCOMPONENT", (uint64_t)&v14);
    if ((v8 & 0x80000000) == 0 || (v9 = v8, (v8 & 0x1FFF) == 2))
      v9 = ssftmap_Remove(a2, (uint64_t)v4);
    heap_Free(*(_QWORD **)(v3 + 8), (uint64_t)v7);
    if (v5 < 0 && (v9 & 0x80000000) == 0)
    {
      v15 = 0;
      v16 = 0;
      v14 = "1";
      v10 = ssftmap_Insert(a2, (uint64_t)"COMMON", (uint64_t)&v14);
      if ((v10 & 0x1FFF) == 2)
        v11 = 0;
      else
        v11 = v10;
      if (v10 < 0)
        v9 = v11;
      else
        v9 = v10;
    }
  }
  if (v9 == -2125438956)
    return 0;
  else
    return v9;
}

uint64_t brkhlp_FindNextFile(_QWORD *a1, char *a2, const char **a3, _QWORD *a4, _DWORD *a5)
{
  unsigned int Next;
  uint64_t v10;
  const char *v12;

  v12 = 0;
  *a3 = 0;
  *a5 = 0;
  Next = osspi_FindNext(a1, (uint64_t)&v12);
  if ((Next & 0x80000000) != 0)
  {
    if ((Next & 0x1FFF) == 0x14)
      return 0;
    else
      return Next;
  }
  else
  {
    v10 = brkhlp_ConcatenatePath(a3, a2, v12, 0, (uint64_t)a4);
    heap_Free(a4, (uint64_t)v12);
    if ((v10 & 0x80000000) == 0)
    {
      v10 = 0;
      *a5 = 1;
    }
  }
  return v10;
}

uint64_t brkhlp_ConcatenatePath(const char **a1, char *__s, const char *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  size_t v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;

  v5 = 2169528320;
  if (__s && a3)
  {
    v11 = strlen(__s);
    v12 = strlen(a3);
    v13 = (char *)heap_Alloc(a5, v11 + v12 + 2);
    *a1 = v13;
    if (v13)
    {
      strcpy(v13, __s);
      if (a4)
      {
        v14 = v11++;
        while (v14)
        {
          v15 = (*a1)[--v14];
          --v11;
          if (v15 == 47)
            goto LABEL_11;
        }
        v11 = 0;
LABEL_11:
        (*a1)[v11] = 0;
      }
      if (v12 && v11 && __s[v11 - 1] != 47)
        *(_WORD *)&(*a1)[strlen(*a1)] = 47;
      strcat((char *)*a1, a3);
      v16 = strchr((char *)*a1 + 1, 46);
      if (v16)
      {
        v17 = v16;
        while (1)
        {
          v18 = v17 - 1;
          if (*(v17 - 1) != 47)
            goto LABEL_31;
          v19 = v17 + 1;
          v20 = v17[1];
          if (v20 == 46)
            break;
          if (v20 != 47)
            goto LABEL_31;
          v21 = strlen(v17 + 2);
          memmove(v17, v17 + 2, v21 + 1);
          v19 = v17;
LABEL_32:
          v17 = strchr(v19, 46);
          if (!v17)
            return 0;
        }
        if (v17[2] == 47)
        {
          v22 = (char *)*a1;
          if (v18 > *a1)
          {
            v23 = 0;
            v24 = v17 - 1;
            while (1)
            {
              v26 = *--v24;
              v25 = v26;
              if (v26 == 47)
                break;
              if (v25 != 46)
                v23 = 1;
              v18 = v24;
              if (v24 <= v22)
              {
                if (!v23)
                  goto LABEL_32;
                goto LABEL_35;
              }
            }
            v22 = v18;
            if (!v23)
              goto LABEL_32;
LABEL_35:
            v27 = v17 + 3;
            v28 = strlen(v27);
            memmove(v22, v27, v28 + 1);
            v19 = v22;
          }
          goto LABEL_32;
        }
LABEL_31:
        v19 = v17 + 1;
        goto LABEL_32;
      }
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v5;
}

uint64_t engbrk_AddSystemInfo(uint64_t a1, char *a2)
{
  uint64_t result;
  int v5;

  result = 2169528326;
  if (a1)
  {
    if (a2)
    {
      result = critsec_Enter(*(_QWORD **)(a1 + 24));
      if ((result & 0x80000000) == 0)
      {
        v5 = brkhlp_ScanBufferForEnginesAndAddOns(*(_QWORD *)(a1 + 16), a1, a2);
        LODWORD(result) = critsec_Leave(*(_QWORD **)(a1 + 24));
        if (v5 > -1 && (int)result < 0)
          return result;
        else
          return v5;
      }
    }
  }
  return result;
}

uint64_t brkhlp_ScanBufferForEnginesAndAddOns(uint64_t a1, uint64_t a2, char *__s1)
{
  uint64_t v3;
  char *i;
  char *v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = 2169528326;
  v20 = 0;
  v21 = 0;
  strcpy(v22, "BINBROKER");
  if (!a2)
    return v3;
  i = __s1;
  if (!__s1)
    return v3;
  if (strncmp(__s1, "<?xml", 5uLL))
  {
    v7 = strpbrk(i, "\n\r");
    if (v7)
    {
      for (i = v7; ; ++i)
      {
        v8 = *i;
        if (v8 != 13 && v8 != 10)
          break;
      }
    }
  }
  v3 = hdrpars_ReadHeader(*(_WORD **)a2, *(_QWORD *)(a2 + 8), 0, i, &v21, &v20);
  if ((v3 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"BROKER", 276, 0, v10, v11, v12, v13, v19);
    return v3;
  }
  if (!v20)
  {
    v3 = brkhlp_AddItemToClass((uint64_t)v22, v21, a2);
    if ((v3 & 0x80000000) != 0)
      return v3;
    goto LABEL_24;
  }
  v19 = 0;
  if (vector_GetElemAt(v20, 0, &v19))
  {
    v14 = 1;
    do
    {
      if ((v3 & 0x80000000) != 0)
        ssftmap_ObjClose(*v19);
      else
        v3 = brkhlp_AddItemToClass((uint64_t)v22, *v19, a2);
    }
    while (vector_GetElemAt(v20, v14++, &v19));
  }
  vector_ObjClose(v20);
  v20 = 0;
  if ((v3 & 0x80000000) == 0)
  {
LABEL_24:
    v3 = critsec_Enter(*(_QWORD **)(a2 + 56));
    if ((v3 & 0x80000000) == 0)
    {
      if (!ssftmap_GetSize(*(_QWORD *)(a2 + 40)))
        LODWORD(v3) = -2125438710;
      v16 = critsec_Leave(*(_QWORD **)(a2 + 56));
      if ((int)v3 > -1 && v16 < 0)
        return v16;
      else
        return v3;
    }
  }
  return v3;
}

uint64_t engbrk_GetSystemInfo(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD **v8;
  int Size;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t appended;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = 2169528326;
  v15 = 0;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    if ((ssftstring_ObjOpen(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), &v15) & 0x80000000) == 0)
    {
      v7 = critsec_Enter(*(_QWORD **)(a1 + 56));
      if ((v7 & 0x80000000) != 0)
      {
        v3 = v7;
LABEL_22:
        ssftstring_ObjClose(v15);
        return v3;
      }
      v8 = v15;
      Size = ssftmap_GetSize(*(_QWORD *)(a1 + 40));
      ssftstring_Reserve((uint64_t)v8, 500 * Size);
      v10 = v15;
      v11 = *(_QWORD *)(a1 + 40);
      v16 = 0;
      v17 = 0;
      if (v11)
      {
        v18 = 0;
        v12 = ssftmap_IteratorOpen(v11, 0, 1, (uint64_t)&v16);
        v3 = v12;
        if ((v12 & 0x80000000) == 0)
        {
          if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) == 0)
          {
            while (1)
            {
              appended = ssftstring_AppendCStr((uint64_t)v10, "<?xml version=\"1.0\"?>\n<NUANCE>\n<VERSION>NUAN_1.0</VERSION>\n<HEADER>\n");
              if ((appended & 0x80000000) != 0)
                break;
              appended = StoreTagInfo((uint64_t)v10, *v18);
              if ((appended & 0x80000000) != 0)
                break;
              v3 = ssftstring_AppendCStr((uint64_t)v10, "</HEADER>\n</NUANCE>\n");
              if ((v3 & 0x80000000) != 0)
                goto LABEL_20;
              if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) != 0)
                goto LABEL_13;
            }
            v3 = appended;
LABEL_20:
            ssftmap_IteratorClose((uint64_t)v16);
            goto LABEL_21;
          }
LABEL_13:
          ssftmap_IteratorClose((uint64_t)v16);
          goto LABEL_18;
        }
        if ((v12 & 0x1FFF) != 0x14)
        {
LABEL_21:
          critsec_Leave(*(_QWORD **)(a1 + 56));
          goto LABEL_22;
        }
      }
      v3 = 0;
LABEL_18:
      *a3 = ssftstring_Size((uint64_t)v15) + 1;
      *a2 = ssftstring_CStrDetach((uint64_t)v15);
      goto LABEL_21;
    }
    return 2169528330;
  }
  return v3;
}

uint64_t engbrk_FreeSystemInfo(uint64_t a1, uint64_t a2)
{
  if (a2)
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a2);
  return 0;
}

uint64_t StoreTagInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t appended;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *__s;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  __s = 0;
  v11 = 0;
  v9 = 0;
  if (!a2)
  {
    LODWORD(v3) = 0;
LABEL_29:
    if ((v3 & 0x1FFF) == 0x14)
      return 0;
    else
      return v3;
  }
  v3 = ssftmap_IteratorOpen(a2, 0, 1, (uint64_t)&v11);
  if ((v3 & 0x80000000) != 0)
    goto LABEL_29;
  if ((ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0)
    goto LABEL_34;
  while (1)
  {
    appended = ssftstring_AppendCStr(a1, "<");
    if ((appended & 0x80000000) != 0 || (appended = ssftstring_AppendCStr(a1, __s), (appended & 0x80000000) != 0))
    {
LABEL_33:
      v3 = appended;
      goto LABEL_34;
    }
    v5 = *(_QWORD *)(v9 + 8);
    v13 = 0;
    v14 = 0;
    v12 = 0;
    if (v5)
      break;
LABEL_18:
    appended = ssftstring_AppendCStr(a1, ">");
    if ((appended & 0x80000000) != 0)
      goto LABEL_33;
    appended = ssftstring_AppendCStr(a1, *(char **)v9);
    if ((appended & 0x80000000) != 0)
      goto LABEL_33;
    if (ssftmap_GetSize(*(_QWORD *)(v9 + 16)))
    {
      appended = ssftstring_AppendCStr(a1, "\n");
      if ((appended & 0x80000000) != 0)
        goto LABEL_33;
      appended = StoreTagInfo(a1, *(_QWORD *)(v9 + 16));
      if ((appended & 0x80000000) != 0)
        goto LABEL_33;
    }
    appended = ssftstring_AppendCStr(a1, "</");
    if ((appended & 0x80000000) != 0)
      goto LABEL_33;
    appended = ssftstring_AppendCStr(a1, __s);
    if ((appended & 0x80000000) != 0)
      goto LABEL_33;
    v3 = ssftstring_AppendCStr(a1, ">\n");
    if ((v3 & 0x80000000) != 0 || (ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0)
      goto LABEL_34;
  }
  v6 = ssftmap_IteratorOpen(v5, 0, 1, (uint64_t)&v14);
  if ((v6 & 0x80000000) != 0)
  {
    v3 = v6;
    if ((v6 & 0x1FFF) != 0x14)
      goto LABEL_34;
    goto LABEL_18;
  }
  do
  {
    if ((ssftmap_IteratorNext(v14, &v13, &v12) & 0x80000000) != 0)
    {
      ssftmap_IteratorClose((uint64_t)v14);
      goto LABEL_18;
    }
    v7 = ssftstring_AppendCStr(a1, " ");
    if ((v7 & 0x80000000) != 0)
      break;
    v7 = ssftstring_AppendCStr(a1, v13);
    if ((v7 & 0x80000000) != 0)
      break;
    v7 = ssftstring_AppendCStr(a1, "=\"");
    if ((v7 & 0x80000000) != 0)
      break;
    v7 = ssftstring_AppendCStr(a1, v12);
    if ((v7 & 0x80000000) != 0)
      break;
    v7 = ssftstring_AppendCStr(a1, "\"");
  }
  while ((v7 & 0x80000000) == 0);
  v3 = v7;
  ssftmap_IteratorClose((uint64_t)v14);
LABEL_34:
  ssftmap_IteratorClose((uint64_t)v11);
  return v3;
}

uint64_t brkhlp_SearchTag(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int ReadOnly;
  _QWORD *v6;

  v6 = 0;
  ReadOnly = ssftmap_FindReadOnly(a1, a2, &v6);
  if ((ReadOnly & 0x80000000) == 0 && v6)
    *a3 = *v6;
  if (ReadOnly < 0)
    return 2169528340;
  else
    return 0;
}

uint64_t brkhlp_ElemCompareKeysBrokerString(char *a1, char *a2)
{
  uint64_t v2;

  if ((unint64_t)a1 | (unint64_t)a2)
    LODWORD(v2) = -1;
  else
    LODWORD(v2) = 0;
  if (a1)
    v2 = 1;
  else
    v2 = v2;
  if (a1 && a2)
    return LH_stricmp(a1, a2);
  else
    return v2;
}

uint64_t brkhlp_AddItemToClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int ReadOnly;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v12 = 0;
  ReadOnly = ssftmap_FindReadOnly(a2, (uint64_t)"BROKERSTRING", &v12);
  if ((ReadOnly & 0x80000000) == 0 && v12)
  {
    v10 = *v12;
    return brkhlp_AddNewAddOn(v10, a1, a2, a3, 0, v7, v8, v9);
  }
  if ((ReadOnly & 0x80000000) == 0)
  {
    v10 = 0;
    return brkhlp_AddNewAddOn(v10, a1, a2, a3, 0, v7, v8, v9);
  }
  hdrpars_FreeHeader(a2);
  return 2169528340;
}

uint64_t brkhlp_AddNewAddOn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v20;
  _QWORD v22[3];

  if (!a3)
    return 2169528327;
  v9 = a3;
  v11 = *(_QWORD *)(a4 + 16);
  v22[0] = a3;
  v22[1] = a1;
  v22[2] = a5;
  log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_AddNewAddOn: detect= %s", a6, a7, a8, a1);
  v12 = critsec_Enter(*(_QWORD **)(a4 + 56));
  if ((v12 & 0x80000000) != 0)
  {
    v20 = v12;
  }
  else
  {
    v17 = ssftmap_Insert(*(_QWORD *)(a4 + 40), a1, (uint64_t)v22);
    if (v17 < 0)
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"BROKER", 289, "%s%s", v13, v14, v15, v16, "file");
    v18 = critsec_Leave(*(_QWORD **)(a4 + 56));
    if (v18 >= 0 || v17 <= -1)
      v20 = v17;
    else
      v20 = v18;
    v9 = v22[0];
    if (!v22[0])
      goto LABEL_16;
  }
  hdrpars_FreeHeader(v9);
LABEL_16:
  if ((v20 & 0x1FFF) == 2)
    return 0;
  else
    return v20;
}

uint64_t engbrk_ClassOpen(_WORD *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t *(*v38)(uint64_t *, _QWORD *);
  int v39[2];

  v5 = 2169528321;
  *(_QWORD *)v39 = 0;
  if ((*a3 & 0xFFFE) == 2)
  {
    inited = InitRsrcFunction(a1, a2, v39);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: Begin", v11, v12, v13, v35);
      v14 = (uint64_t *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v39 + 8), 1, 72);
      if (v14)
      {
        v15 = v14;
        *v14 = (uint64_t)a1;
        v14[1] = a2;
        v16 = *(_QWORD *)v39;
        v14[2] = *(_QWORD *)v39;
        v17 = *(_QWORD **)(v16 + 8);
        v18 = heap_Calloc(v17, 1, 48);
        if (!v18)
        {
LABEL_22:
          v15[6] = 0;
          v5 = 2169528330;
LABEL_32:
          engbrk_ClassClose(v15);
LABEL_33:
          log_OutText(*(_QWORD *)(*(_QWORD *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: End %x", v31, v32, v33, v5);
          return v5;
        }
        v19 = v18;
        *(_WORD *)v18 = *a3;
        *(_QWORD *)(v18 + 8) = 0;
        v20 = (char *)*((_QWORD *)a3 + 2);
        if (v20)
        {
          v21 = brkhlp_CloneString(v17, v20);
          *(_QWORD *)(v19 + 16) = v21;
          if (!v21)
            goto LABEL_21;
        }
        else
        {
          *(_QWORD *)(v18 + 16) = 0;
        }
        *(_WORD *)(v19 + 24) = 0;
        if (a3[12])
        {
          v22 = heap_Calloc(v17, a3[12], 8);
          *(_QWORD *)(v19 + 32) = v22;
          if (!v22)
          {
LABEL_21:
            brkhlp_FreeProductInfo(v17, v19);
            goto LABEL_22;
          }
          if (a3[12])
          {
            v23 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v23) = brkhlp_CloneString(v17, *(char **)(*((_QWORD *)a3 + 4) + 8 * v23));
              if (!*(_QWORD *)(*(_QWORD *)(v19 + 32) + 8 * v23))
                goto LABEL_21;
              ++*(_WORD *)(v19 + 24);
            }
            while (++v23 < (unint64_t)a3[12]);
          }
        }
        else
        {
          *(_QWORD *)(v19 + 32) = 0;
        }
        v24 = (char *)*((_QWORD *)a3 + 5);
        if (v24)
        {
          v25 = brkhlp_CloneString(v17, v24);
          *(_QWORD *)(v19 + 40) = v25;
          if (!v25)
            goto LABEL_21;
        }
        else
        {
          *(_QWORD *)(v19 + 40) = 0;
        }
        v15[6] = v19;
        v26 = critsec_ObjOpen(*(_QWORD *)(*(_QWORD *)v39 + 16), *(_QWORD **)(*(_QWORD *)v39 + 8), v15 + 3);
        if ((v26 & 0x80000000) != 0)
          goto LABEL_31;
        v27 = *(_QWORD **)(*(_QWORD *)v39 + 8);
        v36 = BRK_ADDON_IELEM;
        v37 = *(_OWORD *)&off_1EA90B3F0;
        v38 = brkhlp_ElemFreeAddOn;
        v26 = ssftmap_ObjOpen(v27, 0, &v36, v15 + 5);
        if ((v26 & 0x80000000) != 0
          || (v28 = *(_QWORD **)(*(_QWORD *)v39 + 8),
              v36 = BRK_INTF_IELEM,
              v37 = *(_OWORD *)&off_1EA90B440,
              v38 = brkhlp_ElemFreeLoadedIntf,
              v26 = ssftmap_ObjOpen(v28, 0, &v36, v15 + 4),
              (v26 & 0x80000000) != 0)
          || (v26 = critsec_ObjOpen(*(_QWORD *)(*(_QWORD *)v39 + 16), *(_QWORD **)(*(_QWORD *)v39 + 8), v15 + 7),
              (v26 & 0x80000000) != 0))
        {
LABEL_31:
          v5 = v26;
          goto LABEL_32;
        }
        v29 = *a3;
        if (v29 == 3)
        {
          v30 = brkhlp_ScanBufferForEnginesAndAddOns(*(uint64_t *)v39, (uint64_t)v15, *((char **)a3 + 5));
        }
        else
        {
          if (v29 != 2)
            goto LABEL_32;
          v30 = brkhlp_ScanFilesForEnginesAndAddOns((uint64_t)v15, (uint64_t)a3, 1);
        }
        v5 = v30;
        if ((v30 & 0x80000000) == 0)
        {
          *a5 = v15;
          v5 = brkhlp_InitializeONNX(*(uint64_t *)v39, v15 + 8);
          if ((v5 & 0x80000000) == 0)
            goto LABEL_33;
        }
        goto LABEL_32;
      }
      return 2169528330;
    }
  }
  return v5;
}

uint64_t brkhlp_InitializeONNX(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v6;
  int v7;
  _QWORD *v9;

  v2 = 2169528327;
  v9 = 0;
  *a2 = 0;
  if (a1)
  {
    v4 = *(_QWORD **)(a1 + 64);
    if (v4)
    {
      if ((osspi_DynModOpen(v4, *(_QWORD **)(a1 + 8), (uint64_t)"libcs_onnxruntime.so.1.13.1", 0, (uint64_t *)&v9) & 0x80000000) != 0)
      {
        return 0;
      }
      else
      {
        v6 = v9;
        *a2 = v9;
        v7 = osspi_DynModObjLoad(v6, (uint64_t)"OrtGetApiBase", a1 + 72);
        if (v7 >= 0)
          return v7;
        else
          return 2169528333;
      }
    }
  }
  return v2;
}

uint64_t engbrk_ClassClose(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v17;

  if (!a1)
    return 0;
  v2 = a1[2];
  v3 = a1[8];
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 72);
    if (v4)
      osspi_DynModObjUnload((_QWORD *)a1[8], v4);
    osspi_DynModClose(v3);
  }
  v5 = a1[4];
  if (v5)
  {
    v6 = ssftmap_ObjClose(v5);
    a1[4] = 0;
    v7 = v6 & (v6 >> 31);
  }
  else
  {
    v7 = 0;
  }
  v8 = a1[5];
  if (v8)
  {
    v9 = ssftmap_ObjClose(v8);
    a1[5] = 0;
    if (v9 >= 0 || (int)v7 <= -1)
      v7 = v7;
    else
      v7 = v9;
  }
  v11 = a1[3];
  if (v11)
  {
    v12 = critsec_ObjClose(v11);
    a1[3] = 0;
    if (v12 >= 0 || (int)v7 <= -1)
      v7 = v7;
    else
      v7 = v12;
  }
  v14 = a1[7];
  if (v14)
  {
    v15 = critsec_ObjClose(v14);
    a1[7] = 0;
    if (v15 >= 0 || (int)v7 <= -1)
      v7 = v7;
    else
      v7 = v15;
  }
  v17 = a1[6];
  if (v17)
  {
    brkhlp_FreeProductInfo(*(_QWORD **)(v2 + 8), v17);
    a1[6] = 0;
  }
  heap_Free(*(_QWORD **)(v2 + 8), (uint64_t)a1);
  return v7;
}

_QWORD *brkhlp_FreeProductInfo(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
      heap_Free(result, v4);
    v5 = *(_QWORD *)(a2 + 32);
    if (v5)
    {
      if (*(_WORD *)(a2 + 24))
      {
        v6 = 0;
        do
          heap_Free(v3, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v6++));
        while (v6 < *(unsigned __int16 *)(a2 + 24));
        v5 = *(_QWORD *)(a2 + 32);
      }
      heap_Free(v3, v5);
    }
    v7 = *(_QWORD *)(a2 + 40);
    if (v7)
      heap_Free(v3, v7);
    return heap_Free(v3, a2);
  }
  return result;
}

uint64_t engbrk_ClassUpdateEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;

  if (!a1)
    return 2169528327;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: Begin", a6, a7, a8, v16);
  v14 = brkhlp_ScanFilesForEnginesAndAddOns(a1, *(_QWORD *)(a1 + 48), a2);
  if ((v14 & 0x80000000) != 0)
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"BROKER", v14, "brk_ClassUpdate: Scan failed", v10, v11, v12, v13, v17);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: End %x", v11, v12, v13, v14);
  return v14;
}

uint64_t engbrk_ClassUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_ClassUpdateEx(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t engbrk_ObjOpen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v8 = 2169528327;
  v25 = 0;
  *a3 = 0;
  if (a2)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(v11 + 32);
    if (a1)
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=%s: Begin", a6, a7, a8, a1);
    else
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=NULL: Begin", a6, a7, a8, v23);
    v17 = heap_Calloc(*(_QWORD **)(v11 + 8), 1, 32);
    v18 = *(_QWORD *)(v11 + 32);
    if (v17)
    {
      *(_QWORD *)v17 = a2;
      *(_QWORD *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 24) = 0;
      if ((paramc_ParamGetStr(*(_QWORD *)(v11 + 40), (uint64_t)"broker_mmap_clc_data", &v25) & 0x80000000) == 0
        && (!LH_stricmp(v25, "yes") || !LH_stricmp(v25, "true")))
      {
        *(_DWORD *)(v17 + 24) = 1;
      }
      *a3 = v17;
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen : End", v19, v20, v21, v24);
      return 0;
    }
    else
    {
      log_OutPublic(v18, (uint64_t)"BROKER", 200, 0, v13, v14, v15, v16, v24);
      return 2169528330;
    }
  }
  return v8;
}

uint64_t engbrk_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    return 2169528327;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : Begin", a6, a7, a8, v18);
  v10 = 0;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24) == a1)
  {
    v11 = critsec_Enter(*(_QWORD **)(*(_QWORD *)a1 + 24));
    if ((v11 & 0x80000000) != 0)
      return v11;
    LODWORD(v10) = ssftmap_Clear(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v12 = critsec_Leave(*(_QWORD **)(*(_QWORD *)a1 + 24));
    if ((int)v10 > -1 && v12 < 0)
      v10 = v12;
    else
      v10 = v10;
  }
  heap_Free(*(_QWORD **)(v9 + 8), a1);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : End", v14, v15, v16, v19);
  return v10;
}

uint64_t engbrk_SetLog(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  if (!a1)
    return 2169528327;
  if (!a2)
    a2 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 32);
  v2 = 0;
  a1[1] = a2;
  return v2;
}

uint64_t engbrk_ObjGetClass(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  if (a1 && a2)
  {
    result = 0;
    v4 = *a1;
  }
  else
  {
    result = 2169528327;
    if (!a2)
      return result;
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t engbrk_InterfaceQuery(uint64_t *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_InterfaceQueryEx(a1, a2, a3, 0, a4, a5, a7, a8);
}

uint64_t engbrk_InterfaceQueryEx(uint64_t *a1, char *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  __int128 v16;
  uint64_t v17;
  uint64_t NullHandle;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  int ReadOnly;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int BuiltinInterface;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t *);
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD, _QWORD, uint64_t *);
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t (*v65)(uint64_t, uint64_t *);
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;

  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v8 = -2125438956;
  v9 = 2169528327;
  v64 = 0;
  if (a1 && a2 && a6)
  {
    v16 = 0uLL;
    v62 = 0u;
    v63 = 0u;
    v17 = *(_QWORD *)(*a1 + 16);
    if (a5)
    {
      NullHandle = safeh_GetNullHandle();
      v16 = 0uLL;
      *a5 = NullHandle;
      a5[1] = v19;
    }
    *a6 = 0;
    v62 = v16;
    v63 = v16;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : Begin", (uint64_t)a6, a7, a8, (uint64_t)a2);
    v9 = critsec_Enter(*(_QWORD **)(*a1 + 24));
    if ((v9 & 0x80000000) == 0)
    {
      if ((ssftmap_FindReadOnly(*(_QWORD *)(*a1 + 32), (uint64_t)a2, &v64) & 0x80000000) == 0)
      {
        v24 = v64;
        v25 = v64[1];
        if (v25)
        {
LABEL_9:
          *a6 = v25;
          if (a5)
            *(_OWORD *)a5 = *((_OWORD *)v24 + 1);
          v26 = 1;
          goto LABEL_22;
        }
        v8 = -2125438963;
        if (!a4)
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 259, "%s%s%s%x", v20, v21, v22, v23, "BrokerString");
          v8 = -2125438963;
        }
        goto LABEL_21;
      }
      ReadOnly = ssftmap_Insert(*(_QWORD *)(*a1 + 32), (uint64_t)a2, (uint64_t)&v62);
      if (ReadOnly < 0 || (ReadOnly = ssftmap_FindReadOnly(*(_QWORD *)(*a1 + 32), (uint64_t)a2, &v64), ReadOnly < 0))
      {
        v8 = ReadOnly;
        log_OutPublic(a1[1], (uint64_t)"BROKER", 200, "%s%s", v28, v29, v30, v31, "module");
        goto LABEL_21;
      }
      v32 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v68);
      if (v32 < 0)
      {
        if ((v32 & 0x1FFF) == 0xA)
        {
          v8 = -2125438966;
          goto LABEL_21;
        }
      }
      else
      {
        v33 = v68;
        v34 = *v68;
        v69 = 0;
        v35 = ssftmap_FindReadOnly(v34, (uint64_t)"FULLPATHCOMPONENT", &v69);
        if ((v35 & 0x80000000) == 0 && v69)
        {
          v67 = *v69;
          v40 = a4 == 0;
          goto LABEL_33;
        }
        v40 = a4 == 0;
        if (a4 || (v35 & 0x80000000) == 0)
        {
          if ((v35 & 0x80000000) == 0)
          {
LABEL_33:
            v46 = *v33;
            v69 = 0;
            v47 = ssftmap_FindReadOnly(v46, (uint64_t)"GETINTERFACE", &v69);
            if (v47 < 0 || !v69)
            {
              if (v47 < 0)
              {
                if (v40)
                  log_OutPublic(a1[1], (uint64_t)"BROKER", 262, "%s%s%s%x", v48, v21, v22, v23, "BrokerString");
                goto LABEL_21;
              }
              v49 = 0;
            }
            else
            {
              v49 = *v69;
            }
            v8 = 0;
            v66 = v49;
LABEL_42:
            v52 = v65;
            if ((v8 & 0x80000000) == 0 && !v65)
            {
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModOpen %s, %d", v21, v22, v23, v67);
              v53 = osspi_DynModOpen(*(_QWORD **)(v17 + 64), *(_QWORD **)(v17 + 8), v67, 0, v64);
              v8 = v53;
              if (!a4 && v53 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 263, "%s%s%s%x", v54, v21, v22, v23, "BrokerString");
                goto LABEL_21;
              }
              if (v53 < 0)
                goto LABEL_21;
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModObjLoad %s", v21, v22, v23, v66);
              v55 = osspi_DynModObjLoad((_QWORD *)*v64, v66, (uint64_t)&v65);
              v8 = v55;
              if (!a4 && v55 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 264, "%s%s%s%x", v56, v21, v22, v23, "BrokerString");
                goto LABEL_21;
              }
              v52 = v65;
            }
            if (v8 < 0 || !v52 || (v57 = v52(a3, v64 + 1), v8 = v57, a4) || (v57 & 0x80000000) == 0)
            {
              if ((v8 & 0x80000000) == 0)
              {
                v24 = v64;
                v25 = v64[1];
                v59 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v25 + 16);
                if (v59)
                {
                  v60 = v59(*(_QWORD *)*a1, *(_QWORD *)(*a1 + 8), v64 + 2);
                  v8 = v60;
                  if (!a4 && v60 < 0)
                  {
                    log_OutPublic(a1[1], (uint64_t)"BROKER", 266, "%s%s%s%x", v61, v21, v22, v23, "module");
                    goto LABEL_21;
                  }
                  if (v60 < 0)
                    goto LABEL_21;
                  v24 = v64;
                  v25 = v64[1];
                }
                LODWORD(v9) = v8;
                goto LABEL_9;
              }
            }
            else
            {
              log_OutPublic(a1[1], (uint64_t)"BROKER", 265, "%s%s%s%x", v58, v21, v22, v23, "module");
            }
LABEL_21:
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : BrokerString=%s: Module Not Found (%x)", v21, v22, v23, (uint64_t)a2);
            v26 = 0;
            LODWORD(v9) = v8;
LABEL_22:
            v41 = critsec_Leave(*(_QWORD **)(*a1 + 24));
            if ((v26 & (v41 < 0)) != 0)
              v9 = v41;
            else
              v9 = v9;
            log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : End", v42, v43, v44, (uint64_t)a2);
            return v9;
          }
        }
        else
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 260, "%s%s%s%x", v36, v37, v38, v39, "BrokerString");
        }
      }
      BuiltinInterface = brkhlp_GetBuiltinInterface(a2, &v65, &v67, &v66);
      v8 = BuiltinInterface;
      if (!a4 && BuiltinInterface < 0)
      {
        log_OutPublic(a1[1], (uint64_t)"BROKER", 261, "%s%s%s%x", v51, v21, v22, v23, "BrokerString");
        goto LABEL_21;
      }
      goto LABEL_42;
    }
  }
  return v9;
}

uint64_t brkhlp_SearchAddOn(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t result;
  int v7;

  *a3 = 0;
  result = 2169528333;
  if (a1)
  {
    if (a2)
    {
      result = critsec_Enter(*(_QWORD **)(*(_QWORD *)a1 + 56));
      if ((result & 0x80000000) == 0)
      {
        v7 = brkhlp_InternalSearchAddOn(a1, a2, a3);
        LODWORD(result) = critsec_Leave(*(_QWORD **)(*(_QWORD *)a1 + 56));
        if (v7 > -1 && (int)result < 0)
          return result;
        else
          return v7;
      }
    }
  }
  return result;
}

uint64_t engbrk_InterfaceRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : Begin", a6, a7, a8, v13);
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : End", v10, v11, v12, v14);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_TagQuery(_QWORD *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_TagQueryEx(a1, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t engbrk_TagQueryEx(_QWORD *a1, char *a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;

  v22 = 0;
  v8 = 2169528327;
  if (a1 && a5 && a3 && a2 && *a1)
  {
    *a5 = 0;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery BrokerString=%s TagName=%s : Begin", a6, a7, a8, (uint64_t)a2);
    v14 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v22);
    if (v14 < 0)
    {
      if ((v14 & 0x1FFF) == 0xA)
      {
        v8 = 2169528330;
        goto LABEL_16;
      }
      v8 = 2169528333;
    }
    else
    {
      v19 = brkhlp_SearchTag(*v22, a3, a5);
      if ((v19 & 0x80000000) == 0)
      {
        v8 = 0;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery TagContents = %p \"%s\": End", v16, v17, v18, *a5);
        return v8;
      }
      v8 = v19;
    }
    v20 = a1[1];
    if ((a4 & 1) != 0)
      log_OutText(v20, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagQuery : BrokerString=%s TagName=%s  Failure (%x)", v16, v17, v18, (uint64_t)a2);
    else
      log_OutPublic(v20, (uint64_t)"BROKER", 267, "%s%s%s%s%s%x", v15, v16, v17, v18, "Broker String");
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_TagRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease TagContents address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_ComponentTableIteratorOpen(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t String;
  _QWORD *v22;
  int v23;
  int v24;
  BOOL v25;

  v8 = 2169528327;
  if (a1 && a3 && a2 && *(_QWORD *)a1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen Query=%s: Begin", a6, a7, a8, (uint64_t)a2);
    v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v12 + 8), 1, 72);
    *(_QWORD *)a3 = v13;
    if (v13)
    {
      *v13 = v12;
      *(_QWORD *)(*(_QWORD *)a3 + 8) = a1;
      String = brkhlp_CreateString((char **)(*(_QWORD *)a3 + 16), a2, *(_QWORD *)(v12 + 8));
      if ((String & 0x80000000) == 0)
      {
        v8 = critsec_Enter(*(_QWORD **)(*(_QWORD *)a1 + 56));
        v22 = *(_QWORD **)a3;
        if ((v8 & 0x80000000) == 0)
        {
          v23 = ssftmap_IteratorOpen(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)a2, 0, (uint64_t)(v22 + 3));
          LODWORD(v8) = (v23 & 0x80001FFF) == 0x80000014 ? 0 : v23;
          v24 = critsec_Leave(*(_QWORD **)(*(_QWORD *)a1 + 56));
          v25 = (int)v8 > -1 && v24 < 0;
          v8 = v25 ? v24 : v8;
          v22 = *(_QWORD **)a3;
          if ((v8 & 0x80000000) == 0)
            goto LABEL_24;
        }
        goto LABEL_22;
      }
      v8 = String;
    }
    else
    {
      v8 = 2169528330;
    }
    v22 = *(_QWORD **)a3;
LABEL_22:
    if (v22)
    {
      engbrk_ComponentTableIteratorClose(v22, v14, v15, v16, v17, v18, v19, v20);
      v22 = 0;
      *(_QWORD *)a3 = 0;
    }
LABEL_24:
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen iterator address = %p: End", v18, v19, v20, (uint64_t)v22);
  }
  return v8;
}

uint64_t brkhlp_CreateString(char **a1, char *__s, uint64_t a3)
{
  uint64_t v3;
  int v7;
  char *v8;

  v3 = 2169528320;
  if (!a1)
    return 2169528327;
  *a1 = 0;
  if (__s)
  {
    v7 = strlen(__s);
    v8 = (char *)heap_Alloc(a3, (v7 + 1));
    *a1 = v8;
    if (v8)
    {
      strcpy(v8, __s);
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v3;
}

uint64_t engbrk_ComponentTableIteratorClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (!a1)
    return 2169528327;
  v9 = *a1;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  v10 = a1[2];
  if (v10)
  {
    heap_Free(*(_QWORD **)(v9 + 8), v10);
    a1[2] = 0;
  }
  v11 = a1[3];
  if (v11)
    ssftmap_IteratorClose(v11);
  heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_ComponentTableIteratorNext(uint64_t a1, char **a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char **v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  char *v22;
  char **v23;
  char *v24;
  char *v25;
  size_t Block;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  const char *v37;

  v36 = 0;
  v37 = 0;
  if (!a1)
    return 2169528327;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  LODWORD(v11) = brkhlp_SizeOfNextBlock(*(char **)(a1 + 16));
  v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
  if ((v12 & 0x80000000) != 0)
  {
LABEL_19:
    v16 = v12;
  }
  else
  {
    v11 = v11;
    v16 = 2169528330;
    v35 = v10;
    v33 = v11;
    while (1)
    {
      if ((LH_strnicmp(*(_QWORD *)(a1 + 16), (uint64_t)v37, v11) & 0x80000000) != 0)
      {
        v16 = 2169528343;
        goto LABEL_32;
      }
      v17 = *(_QWORD **)(v10 + 8);
      v18 = v37;
      v19 = *(const char **)(a1 + 16);
      v20 = strlen(v19);
      v21 = heap_Alloc((uint64_t)v17, (v20 + 1));
      if (!v21)
        goto LABEL_32;
      v22 = (char *)v21;
      v23 = v8;
      if (!*v19)
        break;
      v24 = (char *)v19;
      v25 = (char *)v18;
      while (1)
      {
        Block = brkhlp_SizeOfNextBlock(v24);
        strncpy(v22, v24, Block);
        v22[Block] = 0;
        v27 = strstr(v25, v22);
        if (!v27)
          break;
        v25 = &v27[Block];
        if ((_DWORD)Block)
        {
          if (v22[Block - 1] != 47 && v25 - v18 != strlen(v18))
            break;
        }
        v24 += (Block + 1);
        if (v24 - v19 >= strlen(v19))
          goto LABEL_21;
      }
      heap_Free(v17, (uint64_t)v22);
      v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
      v8 = v23;
      v10 = v35;
      v16 = 2169528330;
      v11 = v33;
      if ((v12 & 0x80000000) != 0)
        goto LABEL_19;
    }
LABEL_21:
    heap_Free(v17, (uint64_t)v22);
    v8 = v23;
    if (v23)
      *v23 = (char *)v37;
    v10 = v35;
    if (a3)
    {
      *(_QWORD *)(a1 + 32) = v37;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      v28 = brkhlp_SearchTag(*v36, (uint64_t)"NAME", (_QWORD *)(a1 + 40));
      if ((v28 & 0x80000000) == 0 || (v16 = v28, (_DWORD)v28 == -2125438956))
      {
        v29 = brkhlp_SearchTag(*v36, (uint64_t)"LANGUAGE", (_QWORD *)(a1 + 56));
        if ((v29 & 0x80000000) == 0 || (v16 = v29, (_DWORD)v29 == -2125438956))
        {
          v30 = brkhlp_SearchTag(*v36, (uint64_t)"VERSION", (_QWORD *)(a1 + 48));
          if ((v30 & 0x80000000) == 0 || (v16 = v30, (_DWORD)v30 == -2125438956))
          {
            v16 = 0;
            *a3 = a1 + 32;
          }
        }
      }
    }
    else
    {
      v16 = 0;
    }
  }
LABEL_32:
  v31 = &byte_1DEBD87CE;
  if (v8 && *v8)
    v31 = *v8;
  log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext szBrkString=%s: End", v13, v14, v15, (uint64_t)v31);
  return v16;
}

size_t brkhlp_SizeOfNextBlock(char *a1)
{
  char *v2;

  v2 = strchr(a1, 42);
  if (v2)
    return v2 - a1;
  else
    return strlen(a1);
}

uint64_t engbrk_DataReplace(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int ReadOnly;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;

  v31 = 0;
  v8 = 2169528327;
  if (a1 && a2 && a3)
  {
    v11 = *(_QWORD *)(*a1 + 16);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2);
    v12 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v31);
    if ((v12 & 0x80000000) != 0)
    {
      v24 = v12;
      log_OutPublic(a1[1], (uint64_t)"BROKER", 293, "%s%s", v13, v14, v15, v16, "brokerString");
      if ((v24 & 0x1FFF) == 0xA)
      {
        v8 = 2169528330;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace : End", v25, v26, v27, v30);
        return v8;
      }
    }
    else
    {
      v17 = *v31;
      v32 = 0;
      ReadOnly = ssftmap_FindReadOnly(v17, (uint64_t)"FULLPATHCOMPONENT", &v32);
      if ((ReadOnly & 0x80000000) == 0 && v32)
      {
        v23 = *v32;
        goto LABEL_12;
      }
      if ((ReadOnly & 0x80000000) == 0)
      {
        v23 = 0;
LABEL_12:
        v8 = osspi_DataReplace(*(_QWORD **)(v11 + 64), *(_QWORD *)(v11 + 8), v23);
        if ((v8 & 0x80000000) != 0)
          log_OutPublic(a1[1], (uint64_t)"BROKER", 295, "%s%s%s%x", v28, v25, v26, v27, "brokerString");
        goto LABEL_16;
      }
      log_OutPublic(a1[1], (uint64_t)"BROKER", 294, "%s%s", v19, v20, v21, v22, "brokerString");
      v24 = 2169528340;
    }
    v8 = v24;
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_DataOpen(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_DataOpenEx(a1, a2, 0, a3, a5, a6, a7, a8);
}

uint64_t engbrk_DataOpenEx(uint64_t *a1, uint64_t a2, char a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  const char *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v86;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v92;
  char v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  int v98;
  _OWORD v99[2];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[2];

  v9 = 2169528330;
  v102 = 0;
  v103[0] = 0;
  result = 2169528327;
  if (a1)
  {
    v11 = (char *)a2;
    if (a2)
    {
      if (a4)
      {
        v14 = *(_QWORD *)(*a1 + 16);
        *a4 = 0;
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : BrokerString=%s : Begin", a6, a7, a8, a2);
        v97 = (uint64_t *)heap_Calloc(*(_QWORD **)(v14 + 8), 1, 48);
        if (!v97)
        {
          hlp_ReleaseUriFetcherInterface(v14, 0);
LABEL_118:
          log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : End %x", v23, v24, v25, v9);
          return v9;
        }
        v15 = IsThisUrlOrRealPath(v11, 0);
        v16 = strchr(v11, 58);
        v17 = v16;
        LODWORD(v18) = -2125438976;
        if (v15 || !v16)
        {
          v96 = 0;
        }
        else
        {
          v19 = v15;
          v20 = (_DWORD)v16 - (_DWORD)v11;
          if (v16 == v11)
          {
            v96 = 0;
          }
          else
          {
            v18 = critsec_Enter(*(_QWORD **)(*a1 + 24));
            if ((v18 & 0x80000000) != 0)
            {
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              v96 = 0;
              v17 = 0;
              goto LABEL_113;
            }
            v21 = (char *)heap_Alloc(*(_QWORD *)(v14 + 8), v20 + 1);
            if (!v21)
            {
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              v96 = 0;
              v17 = 0;
              goto LABEL_104;
            }
            v22 = strncpy(v21, v11, v20);
            v22[v20] = 0;
            v96 = (uint64_t)v22;
            v11 = v22;
          }
          v15 = v19;
        }
        v26 = v15;
        if (v15)
          v17 = 0;
        v27 = brkhlp_SearchAddOn((uint64_t)a1, v11, v103);
        v31 = v27;
        if ((v27 & 0x80000000) == 0)
        {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on broker string %s", v28, v29, v30, (uint64_t)v11);
          goto LABEL_19;
        }
        if ((v27 & 0x1FFF) == 0xA)
          goto LABEL_23;
        v95 = v17;
        v34 = strlen(v11);
        v17 = (char *)heap_Alloc(*(_QWORD *)(v14 + 8), (v34 + 4));
        if (!v17)
          goto LABEL_103;
        if (engbrk_CreateSurrogateBrokerString(v11, (uint64_t)v17))
        {
          v31 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
          if ((v31 & 0x80000000) == 0)
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v35, v36, v37, (uint64_t)v17);
          if ((v31 & 0x1FFF) == 0xA)
            goto LABEL_23;
          if ((v31 & 0x80000000) == 0)
            goto LABEL_38;
        }
        v38 = strcpy(v17, v11);
        v39 = strstr(v38, "mpthreeml");
        if (!v39)
          goto LABEL_48;
        strcpy(v39, "mpthreevadml");
        v40 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
        v31 = v40;
        if ((v40 & 0x80000000) == 0)
        {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v41, v42, v43, (uint64_t)v17);
LABEL_38:
          heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v17);
          v17 = v95;
          goto LABEL_19;
        }
        if ((v40 & 0x1FFF) == 0xA)
          goto LABEL_23;
        if (engbrk_CreateSurrogateBrokerString(v17, (uint64_t)v17))
        {
          v31 = brkhlp_SearchAddOn((uint64_t)a1, v17, v103);
          if ((v31 & 0x80000000) == 0)
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v44, v45, v46, (uint64_t)v17);
          if ((v31 & 0x1FFF) == 0xA)
            goto LABEL_23;
          heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v17);
          v17 = v95;
          if ((v31 & 0x80000000) == 0)
          {
LABEL_19:
            if (*(_QWORD *)(v103[0] + 16))
            {
              if (v17)
              {
                v9 = brkhlp_SearchClcArchive(a1[1], v103[0], v17 + 1, a3, (uint64_t)v97, (uint64_t)a1);
LABEL_23:
                v17 = 0;
                goto LABEL_103;
              }
              v9 = v31;
LABEL_103:
              hlp_ReleaseUriFetcherInterface(v14, (uint64_t)v97);
              if ((v18 & 0x80000000) != 0)
              {
LABEL_110:
                if ((v9 & 0x80000000) == 0)
                {
                  *a4 = v97;
LABEL_114:
                  if (v96)
                    heap_Free(*(_QWORD **)(v14 + 8), v96);
                  if (v17)
                    heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v17);
                  goto LABEL_118;
                }
                v18 = v9;
LABEL_113:
                heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v97);
                v9 = v18;
                goto LABEL_114;
              }
LABEL_104:
              v90 = critsec_Leave(*(_QWORD **)(*a1 + 24));
              if ((int)v9 > -1 && v90 < 0)
                v9 = v90;
              else
                v9 = v9;
              goto LABEL_110;
            }
            v32 = *(_QWORD *)v103[0];
            *(_QWORD *)&v99[0] = 0;
            if ((ssftmap_FindReadOnly(v32, (uint64_t)"FULLPATHCOMPONENT", v99) & 0x80000000) == 0)
            {
              if (*(_QWORD *)&v99[0])
              {
                v33 = **(const char ***)&v99[0];
                if (**(_QWORD **)&v99[0])
                {
                  v94 = v17;
                  v17 = 0;
                  goto LABEL_57;
                }
              }
            }
LABEL_51:
            v94 = v17;
            if (v26)
            {
              v17 = 0;
              v33 = v11;
              goto LABEL_58;
            }
            v48 = strlen(v11);
            v49 = heap_Alloc(*(_QWORD *)(v14 + 8), (v48 + 1));
            if (!v49)
              goto LABEL_23;
            v33 = (const char *)v49;
            v50 = 0;
            v51 = 1;
            do
            {
              v33[v50] = __tolower(v11[v50]);
              v50 = v51;
            }
            while (strlen(v11) >= v51++);
            v17 = (char *)v33;
LABEL_57:
            if (!v26)
            {
LABEL_61:
              v9 = osspi_DataOpenEx(*(_QWORD **)(v14 + 64), *(_QWORD **)(v14 + 8), v97[3], v97[4], v97[5], (uint64_t)v33, v97);
              if ((v9 & 0x80000000) != 0)
              {
                if ((a3 & 1) != 0)
                {
                  log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen failed: %s, %x", v54, v55, v56, (uint64_t)v33);
                }
                else
                {
                  v70 = strcmp(v33, v11);
                  v71 = a1[1];
                  if (v70)
                    log_OutPublic(v71, (uint64_t)"BROKER", 275, "%s%s%s%s%s%x", v66, v67, v68, v69, "BrokerString");
                  else
                    log_OutPublic(v71, (uint64_t)"BROKER", 275, "%s%s%s%x", v66, v67, v68, v69, "BrokerString");
                }
              }
              else
              {
                log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen %s, %p", v54, v55, v56, (uint64_t)v33);
                if (v94)
                {
                  v93 = a3;
                  v57 = strstr(v11, "clc");
                  v58 = strstr(v11, "clmnn");
                  v92 = v103[0];
                  v59 = v11;
                  v60 = (uint64_t *)(v103[0] + 16);
                  v61 = clcarchive_ObjOpen(*(_WORD **)*a1, *(_QWORD *)(*a1 + 8), v59, (uint64_t *)(v103[0] + 16));
                  v9 = v61;
                  if ((v61 & 0x80000000) == 0)
                  {
                    v62 = (unint64_t)v58 | (unint64_t)v57;
                    v63 = ((unint64_t)v58 | (unint64_t)v57) != 0;
                    if (v62 && *((_DWORD *)a1 + 6))
                    {
                      v64 = 0;
                      v65 = (v61 & 0x1FFF) == 1;
                    }
                    else
                    {
                      v72 = osspi_ClcDataOpen(*v97, *v60);
                      v9 = v72;
                      v64 = v72 >> 31;
                      v65 = (v72 & 0x1FFF) == 1;
                      if ((v72 & 0x1FFF) != 1 && (v72 & 0x80000000) != 0)
                      {
                        v65 = 0;
                        *v60 = 0;
                      }
                    }
                    if (*((_DWORD *)a1 + 6))
                      v73 = v63;
                    else
                      v73 = 0;
                    if ((v65 & v64 & 1) != 0 || v73)
                    {
                      v100 = 0;
                      v101 = 0;
                      memset(v99, 0, sizeof(v99));
                      clcarchive_GetMemoryStreamInterface(v99);
                      v98 = 0;
                      v77 = engbrk_DataMapEx(a1, (uint64_t)v97, 0, (unsigned int *)&v101, &v100, v74, v75, v76);
                      if ((v77 & 0x80000000) != 0)
                      {
                        v9 = v77;
                      }
                      else
                      {
                        v78 = clcarchive_Parse(*v60, v99, (uint64_t)&v100, &v98, 1);
                        v84 = engbrk_DataUnmap(a1, (uint64_t)v97, v100, v79, v80, v81, v82, v83);
                        if (v78 > -1 && v84 < 0)
                          v78 = v84;
                        v86 = osspi_DataClose(*v97);
                        *v97 = 0;
                        if (v78 > -1 && v86 < 0)
                          v9 = v86;
                        else
                          v9 = v78;
                        if (v97[3] && v97[4])
                        {
                          objc_ReleaseObject(*(_QWORD *)(v14 + 48), (uint64_t)"URIFETCHER");
                          v97[3] = 0;
                          v97[4] = 0;
                        }
                      }
                    }
                    if ((v9 & 0x80000000) == 0)
                    {
                      v9 = brkhlp_SearchClcArchive(a1[1], v92, v94 + 1, v93, (uint64_t)v97, (uint64_t)a1);
                      v88 = v103[0];
                      v89 = *(_QWORD *)(v103[0] + 16);
                      if (v89)
                      {
                        if ((_DWORD)v9)
                        {
                          clcarchive_ObjClose(v89);
                          *(_QWORD *)(v88 + 16) = 0;
                          osspi_DataClose(*v97);
                          *v97 = 0;
                          if (v97[3])
                          {
                            if (v97[4])
                            {
                              objc_ReleaseObject(*(_QWORD *)(v14 + 48), (uint64_t)"URIFETCHER");
                              v97[3] = 0;
                              v97[4] = 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_103;
            }
LABEL_58:
            if (UriGetUrlPrefixLength(v33, 0)
              && (objc_GetObject(*(_QWORD *)(v14 + 48), (uint64_t)"URIFETCHER", &v102) & 0x80000000) == 0)
            {
              v53 = v102;
              v97[3] = *(_QWORD *)(v102 + 8);
              *((_OWORD *)v97 + 2) = *(_OWORD *)(v53 + 16);
            }
            goto LABEL_61;
          }
        }
        else
        {
LABEL_48:
          heap_Free(*(_QWORD **)(v14 + 8), (uint64_t)v17);
          v17 = v95;
        }
        if (v17)
        {
          v47 = brkhlp_RegisterAddon(v11, 0, 0, v103, *a1);
          if ((v47 & 0x80000000) != 0)
          {
            v17 = 0;
            v9 = v47;
            goto LABEL_103;
          }
        }
        goto LABEL_51;
      }
    }
  }
  return result;
}

uint64_t engbrk_CreateSurrogateBrokerString(char *__s, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;

  if (*__s)
  {
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = __s[v4];
      v8 = (v7 - 48) >= 0xA && (v7 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (v8 && v7 != 45)
      {
        if (v7 == 95 || v7 == 47)
        {
          if (v7 == 95)
            v5 = v5;
          else
            v5 = 1;
          LOBYTE(v7) = 95;
        }
        else
        {
          v5 = 1;
          LOBYTE(v7) = 45;
        }
      }
      *(_BYTE *)(a2 + v4) = v7;
      v4 = v6;
    }
    while (strlen(__s) > v6++);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  *(_BYTE *)(a2 + v4) = 0;
  return v5;
}

uint64_t brkhlp_SearchClcArchive(uint64_t a1, uint64_t a2, char *__s, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a2 + 16);
  memset(v22, 0, sizeof(v22));
  if (strlen(__s) <= 0x7F)
    engbrk_CreateSurrogateBrokerString(__s, (uint64_t)v22);
  if (*(_DWORD *)(v12 + 16))
  {
    v17 = 0;
    v18 = 0;
    while (LH_stricmp((char *)v22, *(char **)(*(_QWORD *)(v12 + 8) + v17)))
    {
      ++v18;
      v17 += 40;
      if (v18 >= *(unsigned int *)(v12 + 16))
        goto LABEL_7;
    }
    *(_DWORD *)(a5 + 16) = v18;
    *(_QWORD *)(a5 + 8) = v12;
    v20 = critsec_Enter(*(_QWORD **)(*(_QWORD *)a6 + 24));
    if ((v20 & 0x80000000) == 0)
    {
      ++*(_DWORD *)(v12 + 120);
      return critsec_Leave(*(_QWORD **)(*(_QWORD *)a6 + 24));
    }
    return v20;
  }
  else
  {
LABEL_7:
    v19 = 2169528333;
    if ((a4 & 1) != 0)
      log_OutText(a1, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : SearchClcArchive failed: %s:%s", v14, v15, v16, *(_QWORD *)(a2 + 8));
    else
      log_OutPublic(a1, (uint64_t)"BROKER", 257, "%s%s%s%s", v13, v14, v15, v16, "archive");
  }
  return v19;
}

uint64_t brkhlp_RegisterAddon(char *a1, char *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18[2];
  _QWORD *(*v19)(_QWORD *, _QWORD *);
  uint64_t *v20;
  int v21[2];

  v20 = 0;
  *(_QWORD *)v21 = 0;
  v5 = 2169528326;
  if (a1)
  {
    if (a5)
    {
      v7 = *(_QWORD *)(a5 + 16);
      if (v7)
      {
        v12 = brkhlp_SearchAddOn(*(_QWORD *)(v7 + 24), a1, a4);
        if ((v12 & 0x80000000) == 0 && a3 && !*(_QWORD *)(*a4 + 16))
        {
          *(_QWORD *)(*a4 + 16) = a3;
          return v12;
        }
        if ((v12 & 0x1FFF) != 0xA)
        {
          v13 = *(_QWORD **)(*(_QWORD *)(a5 + 16) + 8);
          v18[0] = BRK_HDRPARS_TAG_MAP_IELEM;
          v18[1] = *(_OWORD *)&off_1EA90B418;
          v19 = brkhlp_ElemFreeTag;
          v12 = ssftmap_ObjOpen(v13, 1, v18, (uint64_t *)v21);
          if ((v12 & 0x80000000) == 0)
          {
            v12 = brkhlp_allocateAndStoreTagInMap(*(_QWORD **)(*(_QWORD *)(a5 + 16) + 8), *(uint64_t *)v21, a1, (uint64_t)"BROKER", &v20);
            if ((v12 & 0x80000000) == 0)
            {
              if (!a2
                || (v12 = brkhlp_allocateAndStoreTagInMap(*(_QWORD **)(*(_QWORD *)(a5 + 16) + 8), *(uint64_t *)v21, a2, (uint64_t)"FULLPATHCOMPONENT", v18), (v12 & 0x80000000) == 0))
              {
                v12 = brkhlp_AddNewAddOn(*v20, *v20, *(uint64_t *)v21, a5, a3, v14, v15, v16);
                if ((v12 & 0x80000000) == 0)
                  return brkhlp_SearchAddOn(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 24), a1, a4);
              }
            }
          }
          return v12;
        }
        return 2169528330;
      }
    }
  }
  return v5;
}

uint64_t engbrk_DataMapEx(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v8 = 2169528327;
  if (a2 && a1 && a4 && a5)
  {
    *a5 = 0;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataMap : hData=%p Map Offset=%d Size=%d Data=%p : Begin", a6, a7, a8, a2);
    v18 = *(_QWORD *)(a2 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = *(_DWORD *)(a2 + 16);
      v21 = *(_DWORD *)(v19 + 40 * v20 + 16);
      v8 = 2169528324;
      if (v21 >= a3)
      {
        if (*a4)
        {
          v22 = *(_DWORD *)(v19 + 40 * v20 + 16);
          v21 = *a4;
        }
        else
        {
          *a4 = v21;
          v20 = *(_DWORD *)(a2 + 16);
          v22 = *(_DWORD *)(v19 + 40 * v20 + 16);
        }
        if (v21 + a3 > v22)
        {
          *a4 = v22 - a3;
          v20 = *(_DWORD *)(a2 + 16);
        }
        v23 = *(_QWORD *)(v19 + 40 * v20 + 8);
        if (v23)
        {
          v8 = 0;
          *a5 = v23 + a3;
          goto LABEL_27;
        }
        v24 = critsec_Enter(*(_QWORD **)(*a1 + 56));
        if ((v24 & 0x80000000) != 0)
        {
          v8 = v24;
        }
        else
        {
          LODWORD(v8) = clcarchive_GetData(*(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), a3, *a4, a5);
          v25 = critsec_Leave(*(_QWORD **)(*a1 + 56));
          if ((int)v8 > -1 && v25 < 0)
            v8 = v25;
          else
            v8 = v8;
          if ((v8 & 0x80000000) == 0)
            goto LABEL_27;
        }
      }
    }
    else
    {
      v8 = osspi_DataMap(*(_QWORD *)a2, a3, a4, a5);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_27:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataMap : End (%x, %p, %u)", v15, v16, v17, v8);
        return v8;
      }
    }
    log_OutPublic(a1[1], (uint64_t)"BROKER", 287, "%s%p%s%u%s%u%s%x", v14, v15, v16, v17, "hData");
    goto LABEL_27;
  }
  return v8;
}

uint64_t engbrk_DataUnmap(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;

  v8 = 2169528327;
  if (a1 && a2 && a3)
  {
    v12 = *(_QWORD *)(*a1 + 16);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataUnmap : hData=%p pData=%p : Begin", a6, a7, a8, a2);
    v8 = critsec_Enter(*(_QWORD **)(*a1 + 24));
    if ((v8 & 0x80000000) != 0)
      goto LABEL_16;
    v17 = *(_QWORD *)(a2 + 8);
    if (v17)
    {
      if (!*(_QWORD *)(*(_QWORD *)(v17 + 8) + 40 * *(unsigned int *)(a2 + 16) + 8))
        heap_Free(*(_QWORD **)(v12 + 8), a3);
    }
    else
    {
      LODWORD(v8) = osspi_DataUnmap(*(_QWORD *)a2, a3);
    }
    v18 = critsec_Leave(*(_QWORD **)(*a1 + 24));
    v19 = (int)v8 > -1 && v18 < 0;
    v8 = v19 ? v18 : v8;
    if ((v8 & 0x80000000) != 0)
LABEL_16:
      log_OutPublic(a1[1], (uint64_t)"BROKER", 296, "%s%p%s%x", v13, v14, v15, v16, "hData");
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataUnmap : End %x", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t hlp_ReleaseUriFetcherInterface(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  if (a2)
  {
    v2 = (_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a2 + 24))
    {
      if (*(_QWORD *)(a2 + 32))
      {
        result = objc_ReleaseObject(*(_QWORD *)(result + 48), (uint64_t)"URIFETCHER");
        *v2 = 0;
        v2[1] = 0;
      }
    }
  }
  return result;
}

uint64_t engbrk_DataClose(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v8 = 2169528327;
  if (!a1 || !a2)
    return v8;
  v11 = *(_QWORD *)(*a1 + 16);
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : hData=%p : Begin", a6, a7, a8, (uint64_t)a2);
  if (!a2[1])
  {
    if (*a2)
    {
      v8 = osspi_DataClose(*a2);
      *a2 = 0;
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_23;
  }
  v16 = critsec_Enter(*(_QWORD **)(*a1 + 24));
  if ((v16 & 0x80000000) != 0)
    return v16;
  v20 = a2[1];
  v21 = *(_DWORD *)(v20 + 120);
  if (v21)
  {
    v22 = v21 - 1;
    *(_DWORD *)(v20 + 120) = v22;
    if (!v22)
    {
LABEL_12:
      v34 = 0;
      if ((brkhlp_SearchAddOn((uint64_t)a1, *(char **)(v20 + 128), &v34) & 0x80001FFF) == 0x8000000A)
      {
LABEL_13:
        critsec_Leave(*(_QWORD **)(*a1 + 24));
        return 2169528330;
      }
      v23 = v34;
      if (v34)
        goto LABEL_16;
      v31 = strlen(*(const char **)(a2[1] + 128));
      v32 = heap_Alloc(*(_QWORD *)(v11 + 8), (v31 + 1));
      if (!v32)
        goto LABEL_13;
      v33 = (char *)v32;
      engbrk_CreateSurrogateBrokerString(*(char **)(a2[1] + 128), v32);
      if (!strcmp(*(const char **)(a2[1] + 128), v33))
      {
        heap_Free(*(_QWORD **)(v11 + 8), (uint64_t)v33);
      }
      else
      {
        brkhlp_SearchAddOn((uint64_t)a1, v33, &v34);
        v23 = v34;
        heap_Free(*(_QWORD **)(v11 + 8), (uint64_t)v33);
        if (v23)
LABEL_16:
          *(_QWORD *)(v23 + 16) = 0;
      }
      v24 = a2[1];
      if (*(_QWORD *)(v24 + 112))
      {
        osspi_DataClose(*(_QWORD *)(v24 + 112));
        v25 = a2[3];
        v24 = a2[1];
        *(_QWORD *)(v24 + 112) = 0;
        if (v25)
        {
          if (a2[4])
          {
            objc_ReleaseObject(*(_QWORD *)(v11 + 48), (uint64_t)"URIFETCHER");
            a2[3] = 0;
            a2[4] = 0;
            v24 = a2[1];
          }
        }
      }
      clcarchive_ObjClose(v24);
      a2[1] = 0;
    }
  }
  else
  {
    log_OutText(a1[1], (uint64_t)"BROKER", 1, 0, (uint64_t)"brk_DataClose : RefCount is 0 before substruction. hData=%p", v17, v18, v19, (uint64_t)a2);
    v20 = a2[1];
    if (!*(_DWORD *)(v20 + 120))
      goto LABEL_12;
  }
  v26 = critsec_Leave(*(_QWORD **)(*a1 + 24));
  v8 = v26 & (v26 >> 31);
LABEL_23:
  if (a2[3] && a2[4])
  {
    objc_ReleaseObject(*(_QWORD *)(v11 + 48), (uint64_t)"URIFETCHER");
    a2[3] = 0;
    a2[4] = 0;
  }
  if ((v8 & 0x80000000) != 0)
    log_OutPublic(a1[1], (uint64_t)"BROKER", 280, "%s%p%s%x", v12, v13, v14, v15, "hData");
  heap_Free(*(_QWORD **)(v11 + 8), (uint64_t)a2);
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : End %x", v27, v28, v29, v8);
  return v8;
}

uint64_t engbrk_DataMap(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;

  v12 = a4;
  v10 = engbrk_DataMapEx(a1, a2, a3, &v12, a5, a6, a7, a8);
  if ((v10 & 0x80000000) == 0 && a4 > v12)
    bzero((void *)(*a5 + v12), a4 - v12);
  return v10;
}

uint64_t engbrk_DataFreeze(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = 2169528327;
  if (a1 && a2)
  {
    log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataFreeze : hData=%p : Begin", a6, a7, a8, a2);
    v8 = 0;
    if (!*(_QWORD *)(a2 + 8))
    {
      v14 = osspi_DataFreeze(*(_QWORD **)a2);
      v8 = v14;
      if ((v14 & 0x80000000) != 0 && (v14 & 0x1FFF) != 1)
        log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 297, "%s%p%s%x", v15, v11, v12, v13, "hData");
    }
    log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataFreeze : End %x", v11, v12, v13, v8);
  }
  return v8;
}

uint64_t engbrk_TagIteratorOpen(uint64_t a1, char *a2, char *a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  char *i;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t String;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = 2169528327;
  v38 = 0;
  v39 = 0;
  if (a1 && a2 && a3 && *a2 && a5 && *a3)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    *a5 = 0;
    log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen BrokerString=%s Query=%s QueryMode=%d: Begin", a6, a7, a8, (uint64_t)a2);
    v15 = brkhlp_SearchAddOn(a1, a2, &v39);
    if (v39)
      v23 = v15 < 0;
    else
      v23 = 1;
    if (v23 && (v15 & 0x1FFF) == 13)
      v25 = 2169528333;
    else
      v25 = v15;
    if ((v25 & 0x80000000) != 0 || !v39)
    {
      if ((v25 & 0x80000000) != 0)
        goto LABEL_39;
      v37 = v14;
      v26 = 0;
    }
    else
    {
      v37 = v14;
      v26 = *v39;
    }
    for (i = a3; ; i = v28 + 1)
    {
      v28 = strchr(i, 47);
      if (!v28 && !strcmp(i, "*"))
        break;
      if (v38)
        v26 = *(_QWORD *)(v38 + 16);
      if (!v26)
        goto LABEL_38;
      if (!v28)
      {
        if ((ssftmap_FindReadOnly(v26, (uint64_t)i, &v38) & 0x80000000) != 0)
        {
LABEL_38:
          v25 = 2169528333;
          v14 = v37;
          goto LABEL_39;
        }
        break;
      }
      if (((_DWORD)v28 - (_DWORD)i) > 0x7FuLL)
      {
        v30 = v26;
        v29 = i;
      }
      else
      {
        __strncpy_chk();
        v40[v28 - i] = 0;
        v29 = v40;
        v30 = v26;
      }
      if ((ssftmap_FindReadOnly(v30, (uint64_t)v29, &v38) & 0x80000000) != 0)
        goto LABEL_38;
    }
    v14 = v37;
    v31 = heap_Calloc(*(_QWORD **)(v37 + 8), 1, 24);
    *a5 = v31;
    if (!v31)
    {
      v25 = 2169528330;
LABEL_41:
      v35 = *(_QWORD *)(v14 + 32);
      if ((a4 & 1) != 0)
        log_OutText(v35, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagIteratorOpen : BrokerString=%s Query=%s  Failure (%x)", v20, v21, v22, (uint64_t)a2);
      else
        log_OutPublic(v35, (uint64_t)"BROKER", 282, "%s%s%s%s%s%x", v19, v20, v21, v22, "Broker String");
      goto LABEL_44;
    }
    v32 = v31;
    if (!strcmp(i, "*"))
    {
      if (v38)
        v26 = *(_QWORD *)(v38 + 16);
      String = ssftmap_IteratorOpen(v26, 0, 1, v32 + 16);
LABEL_50:
      v25 = String;
      *(_QWORD *)*a5 = v37;
      if ((String & 0x80000000) == 0)
      {
LABEL_44:
        log_OutText(*(_QWORD *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen iterator address = %p: End", v20, v21, v22, *a5);
        return v25;
      }
      goto LABEL_39;
    }
    v33 = ssftmap_IteratorOpen(v26, (uint64_t)i, 1, v32 + 16);
    if ((v33 & 0x80000000) == 0)
    {
      String = brkhlp_CreateString((char **)(*a5 + 8), i, *(_QWORD *)(v37 + 8));
      goto LABEL_50;
    }
    v25 = v33;
LABEL_39:
    if (*a5)
    {
      engbrk_TagIteratorClose((_QWORD *)*a5, v16, v17, v18, v19, v20, v21, v22);
      *a5 = 0;
    }
    goto LABEL_41;
  }
  return v8;
}

uint64_t engbrk_TagIteratorClose(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (!a1)
    return 2169528327;
  v9 = *a1;
  log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  v10 = a1[1];
  if (v10)
    heap_Free(*(_QWORD **)(v9 + 8), v10);
  v11 = a1[2];
  if (v11)
    ssftmap_IteratorClose(v11);
  heap_Free(*(_QWORD **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_DataGetSize(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = 2169528327;
  if (a2 && a3 && a1 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataGetSize : hData=%p Get Size Valid=%d Size=%u : Begin", a6, a7, a8, a2);
    v16 = *(_QWORD *)(a2 + 8);
    if (v16)
    {
      *a4 = *(_DWORD *)(*(_QWORD *)(v16 + 8) + 40 * *(unsigned int *)(a2 + 16) + 16);
      *a3 = 1;
    }
    log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataGetSize : End (%x, %d, %u)", v13, v14, v15, 0);
    return 0;
  }
  return result;
}

uint64_t engbrk_TagIteratorNext(uint64_t a1, char **a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v22;

  v22 = 0;
  v8 = 2169528327;
  if (!a1 || !a2 || !a3)
    return v8;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  v16 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 16), a2, &v22);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_13;
  v17 = *(const char **)(a1 + 8);
  if (!v17 || !strcmp(v17, *a2))
  {
    v18 = v22;
    if (v22[2])
      v19 = 0;
    else
      v19 = *v22;
    *a3 = v19;
    if (a4)
      *a4 = v18[1];
LABEL_13:
    v8 = v16;
    goto LABEL_14;
  }
  v8 = 2169528343;
LABEL_14:
  v20 = *a2;
  if (!*a2)
    v20 = &byte_1DEBD87CE;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext Name=%s, Value=%s, Attrs=%p: End", v13, v14, v15, (uint64_t)v20);
  return v8;
}

uint64_t engbrk_ComponentPathQuery(_QWORD *a1, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v13;

  v8 = 2169528327;
  v13 = 0;
  if (a1
    && a3
    && a2
    && *a1
    && (log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathQuery BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2), v8 = 2169528333, (brkhlp_SearchAddOn((uint64_t)a1, a2, &v13) & 0x80000000) == 0)&& v13)
  {
    return brkhlp_SearchTag(*v13, (uint64_t)"FULLPATHCOMPONENT", a3);
  }
  else
  {
    return v8;
  }
}

uint64_t engbrk_ComponentPathRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(_QWORD *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_RegisterCupAddon(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v9 = 0;
  *a2 = 0;
  *a3 = 0;
  result = 2169528326;
  if (a1)
  {
    if (a4)
    {
      result = objc_GetAddRefCountedObject(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 48), a1, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))ObjcLoadCupAddon, (void (*)(_QWORD, _QWORD, __int128 *))ObjcUnloadCupAddon, 0, &v9);
      if ((result & 0x80000000) == 0)
      {
        if (v9)
        {
          v8 = *(_QWORD **)(v9 + 32);
          if (v8)
          {
            *a2 = *(_QWORD *)(*v8 + 16);
            *a3 = v8[3];
          }
        }
      }
    }
  }
  return result;
}

uint64_t ObjcLoadCupAddon(_WORD *a1, int a2, char *a3, uint64_t a4)
{
  uint64_t NullHandle;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  NullHandle = safeh_GetNullHandle();
  v10 = v9;
  inited = InitRsrcFunction(a1, a2, &v24);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = 2169528330;
  v13 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 32);
  if (v13)
  {
    v14 = v13;
    v15 = strhelper_Strdup(*(_QWORD *)(v24 + 8), a3);
    *(_QWORD *)(v14 + 8) = v15;
    if (v15)
    {
      v16 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 8);
      *(_QWORD *)(v14 + 24) = v16;
      if (v16)
      {
        v17 = UriToBrokerString(*(_QWORD **)(v24 + 8), a3);
        *(_QWORD *)(v14 + 16) = v17;
        if (v17)
        {
          if ((objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"URIFETCHER", &v23) & 0x80000000) != 0)
          {
            v18 = 0;
          }
          else
          {
            v18 = v23[1];
            NullHandle = v23[2];
            v10 = v23[3];
          }
          v19 = clcarchive_ObjOpen(a1, a2, *(const char **)(v14 + 16), &v22);
          if ((v19 & 0x80000000) == 0)
          {
            ++*(_DWORD *)(v22 + 120);
            v19 = osspi_DataOpenEx(*(_QWORD **)(v24 + 64), *(_QWORD **)(v24 + 8), v18, NullHandle, v10, (uint64_t)a3, &v21);
            if ((v19 & 0x80000000) == 0)
            {
              v19 = osspi_ClcDataOpen(v21, v22);
              if ((v19 & 0x80000000) == 0)
              {
                **(_QWORD **)(v14 + 24) = v21;
                v19 = brkhlp_RegisterAddon(*(char **)(v14 + 16), a3, v22, (_QWORD *)v14, **(_QWORD **)(v24 + 24));
              }
            }
          }
          v12 = v19;
          if (v18 && NullHandle)
            objc_ReleaseObject(*(_QWORD *)(v24 + 48), (uint64_t)"URIFETCHER");
          if ((v12 & 0x80000000) == 0)
          {
            *(_QWORD *)(a4 + 32) = v14;
            return v12;
          }
        }
        else
        {
          v12 = 2169528338;
        }
      }
    }
    FreeAllCupAddonResources(v24, (_QWORD *)v14);
  }
  return v12;
}

uint64_t ObjcUnloadCupAddon(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  _QWORD *v5;
  uint64_t v7;

  v7 = 0;
  inited = InitRsrcFunction(a1, a2, &v7);
  if ((inited & 0x80000000) == 0)
  {
    v5 = *(_QWORD **)(a3 + 32);
    if (v5)
      FreeAllCupAddonResources(v7, v5);
  }
  return inited;
}

uint64_t engbrk_UnregisterCupAddon(uint64_t a1, uint64_t a2)
{
  if (a1)
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 48), a1);
  return 0;
}

uint64_t engbrk_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 8;
  result = 0;
  *a2 = &IBroker;
  return result;
}

char *brkhlp_CloneString(_QWORD *a1, char *__s)
{
  int v4;
  char *result;

  if (!__s)
    return 0;
  v4 = strlen(__s);
  result = (char *)heap_Calloc(a1, 1, (v4 + 1));
  if (result)
    return strcpy(result, __s);
  return result;
}

uint64_t brkhlp_ElemCopyConstPtr(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t brkhlp_ElemCopyAddOn(__int128 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;

  v5 = heap_Alloc(a2, 24);
  if (!v5)
    return 2169528330;
  v6 = v5;
  result = 0;
  v8 = *a1;
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a1 + 2);
  *(_OWORD *)v6 = v8;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 2) = 0;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeAddOn(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = *result;
    if (v4)
      hdrpars_FreeHeader(v4);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t brkhlp_ElemCopyLoadedIntf(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t NullHandle;
  uint64_t result;
  uint64_t v10;

  v5 = (_OWORD *)heap_Alloc(a2, 32);
  if (!v5)
    return 2169528330;
  v6 = v5;
  v7 = *(_OWORD *)(a1 + 16);
  *v5 = *(_OWORD *)a1;
  v5[1] = v7;
  *(_QWORD *)a1 = 0;
  NullHandle = safeh_GetNullHandle();
  result = 0;
  *(_QWORD *)(a1 + 16) = NullHandle;
  *(_QWORD *)(a1 + 24) = v10;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeLoadedIntf(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  void (*v4)(void);

  if (result)
  {
    v3 = result;
    if (result[2])
    {
      v4 = *(void (**)(void))(result[1] + 24);
      if (v4)
        v4();
    }
    if (*v3)
      osspi_DynModClose(*v3);
    return heap_Free(a2, (uint64_t)v3);
  }
  return result;
}

uint64_t brkhlp_InternalSearchAddOn(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char *v11;
  uint64_t *v12;

  v5 = 2169528333;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v6 = ssftmap_IteratorOpen(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)a2, 1, (uint64_t)&v12);
  v7 = v6;
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x1FFF) == 0x14)
      return 2169528333;
    else
      return v6;
  }
  while ((ssftmap_IteratorNext(v12, &v11, &v10) & 0x80000000) == 0)
  {
    v8 = LH_stricmp(a2, v11);
    if (!v8)
    {
      *a3 = v10;
      break;
    }
    if (v8 > 0)
      break;
  }
  ssftmap_IteratorClose((uint64_t)v12);
  if (*a3)
    return v7;
  return v5;
}

uint64_t brkhlp_allocateAndStoreTagInMap(_QWORD *a1, uint64_t a2, char *__s, uint64_t a4, _QWORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t result;

  v10 = strlen(__s);
  v11 = heap_Calloc(a1, 1, v10 + 25);
  if (!v11)
    return 2169528330;
  v12 = (_QWORD *)v11;
  v13 = (char *)(v11 + 24);
  *v12 = v13;
  strcpy(v13, __s);
  result = ssftmap_Insert(a2, a4, (uint64_t)v12);
  if ((result & 0x80000000) == 0)
    *a5 = v12;
  return result;
}

uint64_t brkhlp_ElemCopyTag(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

_QWORD *brkhlp_ElemFreeTag(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[1];
    if (v4)
      ssftmap_ObjClose(v4);
    v5 = *(_QWORD *)(v3 + 16);
    if (v5)
      ssftmap_ObjClose(v5);
    return heap_Free(a2, v3);
  }
  return result;
}

_QWORD *FreeAllCupAddonResources(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = (uint64_t *)a2[3];
  if (v5)
  {
    v6 = *v5;
    v7 = (char *)a2[2];
    v8 = **(_QWORD **)(a1 + 24);
    v19 = 0;
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = *(_QWORD *)(v8 + 16);
      if (v10)
      {
        if ((critsec_Enter(*(_QWORD **)(v8 + 24)) & 0x80000000) == 0)
        {
          if ((brkhlp_InternalSearchAddOn(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 24), v7, &v19) & 0x80000000) == 0)
          {
            v11 = v19;
            v12 = *(_QWORD *)(v19 + 16);
            if (v12)
            {
              if (v6)
              {
                osspi_ClcDataClose(v6, v12);
                v12 = *(_QWORD *)(v11 + 16);
              }
              --*(_DWORD *)(v12 + 120);
              clcarchive_ObjClose(v12);
            }
          }
          if ((ssftmap_Remove(*(_QWORD *)(v8 + 40), (uint64_t)v7) & 0x80000000) == 0)
            log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_RemoveAddOn: %s", v13, v14, v15, (uint64_t)v7);
          critsec_Leave(*(_QWORD **)(v8 + 24));
        }
      }
    }
    if (v6)
      osspi_DataClose(v6);
    heap_Free(v4, a2[3]);
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = a2[1];
  if (v16)
  {
    heap_Free(v4, v16);
    v4 = *(_QWORD **)(a1 + 8);
  }
  v17 = a2[2];
  if (v17)
  {
    heap_Free(v4, v17);
    v4 = *(_QWORD **)(a1 + 8);
  }
  return heap_Free(v4, (uint64_t)a2);
}

uint64_t brkhlp_GetBuiltinInterface(char *__s1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  const char *v8;
  char **v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v8 = "fe/fe_prmfx";
  v9 = &off_1EA93AC80;
  while (strcmp(__s1, v8))
  {
    v10 = *v9;
    v9 += 4;
    v8 = v10;
    if (!v10)
      return 2169528333;
  }
  v12 = (uint64_t)*(v9 - 3);
  result = 0;
  if (v12)
  {
    *a2 = v12;
  }
  else
  {
    *a3 = *(v9 - 2);
    *a4 = *(v9 - 1);
  }
  return result;
}

uint64_t log_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  const char *v11;
  char *v12;
  BOOL v13;
  const char *v14;
  int Str;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26[1024];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = 2226135048;
  v20 = 0;
  if (!a4)
    return 2226135046;
  if ((InitRsrcFunction(a1, a2, &v20) & 0x80000000) == 0)
  {
    *a4 = 0;
    v8 = heap_Calloc(*(_QWORD **)(v20 + 8), 1, 224);
    if (v8)
    {
      v9 = v8;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 208) = 0u;
      *(_OWORD *)(v8 + 160) = 0u;
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_QWORD *)v8 = a1;
      *(_QWORD *)(v8 + 8) = a2;
      *(_QWORD *)(v8 + 16) = v20;
      v24 = 0;
      v25 = 0;
      v22 = 0;
      v23 = 0;
      bzero(v26, 0x400uLL);
      v21 = 0;
      if ((InitRsrcFunction(*(_WORD **)v9, *(_QWORD *)(v9 + 8), &v25) & 0x80000000) != 0 || !*(_QWORD *)(v25 + 40))
      {
LABEL_49:
        log_ClassClose(v9);
      }
      else
      {
        if (brk_TagIteratorOpen(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 24), "logging", "*", 1, &v21))
          v10 = 1;
        else
          v10 = v21 == 0;
        if (!v10)
        {
          while ((brk_TagIteratorNext(v21, (uint64_t)&v23, (uint64_t)&v22) & 0x80000000) == 0)
          {
            v12 = v22;
            v11 = v23;
            if (v23)
              v13 = v22 == 0;
            else
              v13 = 1;
            if (v13 || !strcmp(v23, "BROKERSTRING"))
              continue;
            v26[0] = 0;
            if (!strcmp(v11, "LOG.DIAGNOSTIC"))
            {
              v23 = "logfile.enabled";
              goto LABEL_36;
            }
            if (!strcmp(v11, "LOG.DIAGNOSTIC.LEVEL"))
            {
              v14 = "logfile.filter.level";
            }
            else if (!strcmp(v11, "LOG.DIAGNOSTIC.DIR"))
            {
              v14 = "logfile.filename.1";
            }
            else
            {
              if (!strcmp(v11, "LOG.DIAGNOSTIC.FILEMAXSIZEMB"))
              {
                v23 = "logfile.max_size";
                __strcpy_chk();
                __strcat_chk();
LABEL_32:
                v22 = v26;
                goto LABEL_36;
              }
              if (!strcmp(v11, "LOG.DIAGNOSTIC.FILEMIMETYPE"))
              {
                v14 = "logfile.filemimetype";
              }
              else
              {
                if (!strcmp(v11, "LOG.DIAGNOSTIC.MODULES"))
                {
                  v23 = "logfile.filter.modules";
                  LH_MapModuleNamesToIds(v12, v26, 0x400u);
                  goto LABEL_32;
                }
                if (!strcmp(v11, "LOG.TSO"))
                {
                  v14 = "logtso.enabled";
                }
                else if (!strcmp(v11, "LOG.TSO.LEVEL"))
                {
                  v14 = "logtso.filter.level";
                }
                else
                {
                  if (strcmp(v11, "LOG.TSO.FILENAME"))
                    goto LABEL_36;
                  v14 = "logtso.filename";
                }
              }
            }
            v23 = v14;
LABEL_36:
            Str = paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)v23, &v24);
            v16 = *(_QWORD *)(v25 + 40);
            if (Str < 0)
            {
              if ((paramc_ParamSetStr(v16, (uint64_t)v23, v22) & 0x80000000) != 0)
              {
                brk_TagIteratorClose(v21);
                v4 = 2226135040;
                goto LABEL_49;
              }
            }
            else
            {
              paramc_ParamRelease(v16);
            }
          }
          brk_TagIteratorClose(v21);
        }
        v17 = 0;
        v18 = (uint64_t *)&LOG_SUBSCRIBER_ID;
        do
        {
          if (v17 != 40)
            brk_InterfaceQueryEx(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 24), *v18, 1, 1, v9 + v17 + 48, v9 + v17 + 40);
          v17 += 40;
          ++v18;
        }
        while (v17 != 200);
        v4 = 0;
        *a4 = v9;
      }
    }
    else
    {
      return 2226135050;
    }
  }
  return v4;
}

uint64_t log_ClassClose(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v8;

  if (!a1)
    return 0;
  for (i = 40; i != 240; i += 40)
  {
    v3 = *(_QWORD *)(a1 + i);
    if (v3)
    {
      v4 = brk_InterfaceRelease(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v3);
      if ((v4 & 0x80000000) != 0)
        return v4;
      *(_QWORD *)(a1 + i) = 0;
    }
  }
  v8 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v8);
  if ((inited & 0x80000000) != 0)
    return 2226135048;
  v6 = inited;
  heap_Free(*(_QWORD **)(v8 + 8), a1);
  return v6;
}

uint64_t log_ObjOpen(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  unsigned int v14;

  if (a1)
  {
    v3 = 2226135046;
    if (a2)
    {
      *a2 = 0;
      v5 = (_OWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 128);
      if (v5)
      {
        v6 = (uint64_t)v5;
        v7 = 0;
        v5[6] = 0u;
        v5[7] = 0u;
        v5[4] = 0u;
        v5[5] = 0u;
        v5[2] = 0u;
        v5[3] = 0u;
        *v5 = 0u;
        v5[1] = 0u;
        *(_QWORD *)v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
        v8 = (_QWORD *)(a1 + 56);
        do
        {
          v9 = *(v8 - 2);
          *(_QWORD *)(v6 + v7 + 24) = v9;
          if (v9)
          {
            v10 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v9 + 32))(*(v8 - 1), *v8, v6 + v7 + 16);
            if ((v10 & 0x80000000) != 0)
            {
              v3 = v10;
              log_ObjClose(v6);
              return v3;
            }
          }
          v8 += 5;
          v7 += 16;
        }
        while (v7 != 80);
        v11 = 0;
        *(_DWORD *)(v6 + 96) = 1;
        do
        {
          v12 = *(_QWORD *)(v6 + v11 + 24);
          if (v12)
          {
            v13 = *(uint64_t (**)(_QWORD))(v12 + 80);
            if (v13)
            {
              v14 = v13(*(_QWORD *)(v6 + v11 + 16));
              if (v14 > *(_DWORD *)(v6 + 96))
                *(_DWORD *)(v6 + 96) = v14;
            }
          }
          v11 += 16;
        }
        while (v11 != 80);
        v3 = 0;
        *a2 = v6;
      }
      else
      {
        return 2226135050;
      }
    }
  }
  else
  {
    v3 = 0;
    *a2 = 0;
  }
  return v3;
}

uint64_t log_ObjClose(uint64_t result)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);

  if (result)
  {
    v1 = (_QWORD **)result;
    v2 = 0;
    while (1)
    {
      v3 = v1[v2 + 3];
      if (v3)
      {
        v4 = (uint64_t (*)(void))v3[5];
        if (v4)
        {
          if (v1[v2 + 2])
          {
            result = v4();
            if ((result & 0x80000000) != 0)
              break;
          }
        }
      }
      v2 += 2;
      if (v2 == 10)
      {
        heap_Free(*v1, (uint64_t)v1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t log_SubscriberAdd(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  unsigned int v5;
  unsigned int v6;

  if (result)
  {
    v3 = result;
    if (*(_QWORD *)(result + 112))
    {
      return 2226135040;
    }
    else
    {
      *(_QWORD *)(result + 104) = a2;
      *(_QWORD *)(result + 112) = a3;
      if (a3 && (v4 = *(uint64_t (**)(uint64_t))(a3 + 80)) != 0 && (v5 = v4(a2), v5 > *(_DWORD *)(v3 + 96)))
      {
        v6 = v5;
        result = 0;
        *(_DWORD *)(v3 + 96) = v6;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t LH_ERROR_to_VERROR(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (LH_ERROR_to_VERROR_lh2v[v1] != a1)
  {
    v1 += 2;
    if (v1 == 22)
      return 2703237376;
  }
  if (v1 * 4)
    return LH_ERROR_to_VERROR_lh2v[v1 + 1] | 0xA1202000;
  else
    return 0;
}

uint64_t compstats_ObjOpen(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v26 = 0;
  result = 2285903879;
  if (!a3)
    return result;
  if (!a4)
    return result;
  result = InitRsrcFunction(a1, a2, &v26);
  if ((result & 0x80000000) != 0)
    return result;
  v9 = heap_Calloc(*(_QWORD **)(v26 + 8), 1, 320);
  if (!v9)
  {
LABEL_13:
    log_OutPublic(*(_QWORD *)(v26 + 32), (uint64_t)"CompStats", 2688, 0, v10, v11, v12, v13, v25);
    return 2285903882;
  }
  v14 = (_QWORD *)v9;
  *(_DWORD *)(v9 + 284) = a3;
  v15 = 2 * a3;
  v16 = heap_Calloc(*(_QWORD **)(v26 + 8), v15, 56);
  v14[36] = v16;
  if (!v16)
  {
    heap_Free(*(_QWORD **)(v26 + 8), (uint64_t)v14);
    goto LABEL_13;
  }
  *v14 = a1;
  v14[1] = a2;
  v14[2] = v26;
  v14[38] = v16 + 56 * a3;
  if ((_DWORD)v15)
  {
    v17 = 0;
    __asm { FMOV            V1.2D, #1.0 }
    do
    {
      v23 = v14[36];
      if (v23)
      {
        v24 = v23 + v17;
        *(_QWORD *)(v24 + 48) = 0;
        *(_OWORD *)(v24 + 16) = 0uLL;
        *(_OWORD *)(v24 + 32) = 0uLL;
        *(_OWORD *)v24 = 0uLL;
        *(_OWORD *)(v24 + 40) = _Q1;
        *(_QWORD *)(v24 + 32) = 0;
      }
      v17 += 56;
    }
    while (56 * v15 != v17);
  }
  *(_QWORD *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 61435;
  return compstats_Reset((uint64_t)v14);
}

uint64_t compstats_ClockInit(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2285903879;
  result = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t compstats_Reset(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 2285903879;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  v1 = *(unsigned int *)(a1 + 284);
  if ((_DWORD)v1)
  {
    v2 = 0;
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_QWORD *)(a1 + 288);
      if (v4)
      {
        v5 = v4 + v2;
        *(_QWORD *)(v5 + 32) = 0;
        *(_OWORD *)v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
        v1 = *(unsigned int *)(a1 + 284);
      }
      v2 += 56;
    }
  }
  return 0;
}

uint64_t compstats_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = safeh_HandleCheck(a1, a2, 61435, 320);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
    heap_Free(v4, *(_QWORD *)(a1 + 288));
    heap_Free(v4, a1);
  }
  return v3;
}

uint64_t compstats_Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v21;

  v8 = 2285903879;
  if (a1)
  {
    v9 = a3;
    if (*(_DWORD *)(a1 + 284) <= a3)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"CompStats", 2689, 0, a5, a6, a7, a8, v21);
    }
    else if (*(_DWORD *)(a1 + 24) < 0x40u)
    {
      v11 = compstats_ClockXStart(*(_QWORD *)(a1 + 288) + 56 * a3, *(_QWORD *)(a1 + 16) + 384, a3, a4, a5, a6, a7, a8);
      if ((v11 & 0x80000000) != 0)
      {
        return v11;
      }
      else
      {
        v18 = *(_DWORD *)(a1 + 24);
        if (v18 && (v19 = *(_DWORD *)(a1 + 4 * (v18 - 1) + 28)) != 0)
        {
          v8 = compstats_ClockXStop(*(_QWORD *)(a1 + 288) + 56 * v19, *(_QWORD *)(a1 + 16) + 384, v12, v13, v14, v15, v16, v17);
          v18 = *(_DWORD *)(a1 + 24);
        }
        else
        {
          v8 = 0;
        }
        *(_DWORD *)(a1 + 4 * v18 + 28) = v9;
        *(_DWORD *)(a1 + 24) = v18 + 1;
      }
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"CompStats", 2690, 0, a5, a6, a7, a8, v21);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_ClockXStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (**v10)(_QWORD, _QWORD *);
  _QWORD v12[2];

  v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v12[0]);
      return 2285903889;
    }
    else
    {
      v10 = *(void (***)(_QWORD, _QWORD *))a2;
      if (*(_QWORD *)a2)
      {
        memset(v12, 0, 12);
        (*v10)(*(_QWORD *)(a2 + 8), v12);
        v8 = 0;
        *(_DWORD *)(a1 + 12) = v12[0];
        *(_QWORD *)(a1 + 4) = *(_QWORD *)((char *)v12 + 4);
      }
      else
      {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t compstats_ClockXStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int32x2_t v10;
  int v11;
  unsigned int v12;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v16 = 0;
      v17 = 0;
      memset(v14, 0, sizeof(v14));
      v15 = 0;
      compstats_ClockXStart((uint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
      v10 = vsub_s32(*(int32x2_t *)((char *)v14 + 4), *(int32x2_t *)(a1 + 4));
      v11 = *(_DWORD *)(a1 + 16);
      v12 = HIDWORD(v14[0]) - *(_DWORD *)(a1 + 12);
      *(int32x2_t *)(a1 + 28) = vadd_s32(*(int32x2_t *)(a1 + 28), v10);
      *(_DWORD *)(a1 + 36) += v12;
      if (*(_DWORD *)(a1 + 20) + v11 < vadd_s32(vdup_lane_s32(v10, 1), v10).u32[0])
        *(int32x2_t *)(a1 + 16) = v10;
      if (*(_DWORD *)(a1 + 24) < v12)
        *(_DWORD *)(a1 + 24) = v12;
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)a1 = (*(_DWORD *)a1 + 1);
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v14[0]);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_Stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;

  v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 284) <= a3)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"CompStats", 2691, 0, a5, a6, a7, a8, v20);
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 24);
      if (v10 && *(_DWORD *)(a1 + 4 * (v10 - 1) + 28) == (_DWORD)a3)
      {
        v8 = compstats_ClockXStop(*(_QWORD *)(a1 + 288) + 56 * a3, *(_QWORD *)(a1 + 16) + 384, a3, a4, a5, a6, a7, a8);
        v17 = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v17 - 1;
        if (v17 != 1)
        {
          v18 = *(_DWORD *)(a1 + 4 * (v17 - 2) + 28);
          if (v18)
            return compstats_ClockXStart(*(_QWORD *)(a1 + 288) + 56 * v18, *(_QWORD *)(a1 + 16) + 384, v11, v12, v13, v14, v15, v16);
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"CompStats", 2692, 0, a5, a6, a7, a8, v20);
        return 2285903889;
      }
    }
  }
  return v8;
}

uint64_t compstats_Notify(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  if (!a1)
    return 2285903879;
  if (a3 != 8)
    return 0;
  if (!*(_DWORD *)(a1 + 296))
  {
    *(_DWORD *)(a1 + 296) = 1;
    memcpy(*(void **)(a1 + 304), *(const void **)(a1 + 288), 56 * *(unsigned int *)(a1 + 284));
    v10 = *(_DWORD *)(a1 + 24);
    if (v10)
    {
      v11 = v10 - 1;
      do
      {
        v12 = *(_QWORD *)(a1 + 304);
        v13 = *(_DWORD *)(a1 + 4 * v11 + 28);
        if (*(_DWORD *)(v12 + 56 * v13 + 12))
          compstats_ClockXStop(v12 + 56 * v13, *(_QWORD *)(a1 + 16) + 384, v4, v5, v6, v7, v8, v9);
      }
      while ((unint64_t)v11--);
    }
    paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"audiooutputbufsamples", (unsigned int *)(a1 + 312));
  }
  return 0;
}

uint64_t compstats_ClockReset(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 2285903879;
  result = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t compstats_Log(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, int a7)
{
  uint64_t result;
  _BYTE *v14;
  _BYTE *v15;

  v15 = 0;
  result = 2285903879;
  if (a1 && a3)
  {
    if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"pipeline", &v15) & 0x80000000) != 0)
    {
      v14 = 0;
      v15 = 0;
    }
    else
    {
      v14 = v15;
    }
    if (*(_DWORD *)(a1 + 296))
    {
      compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 304), a3, a4, (uint64_t)" Latency", v14, *(unsigned int *)(a1 + 312), a5, 0, 0);
      v14 = v15;
    }
    compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 288), a3, a4, 0, v14, *(unsigned int *)(a1 + 312), a5, a6, a7);
    return 0;
  }
  return result;
}

uint64_t compstats_LogReport(unsigned int a1, _DWORD *a2, uint64_t a3, char *a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  _DWORD *v36;
  char **v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char *v59;

  if (a4)
    v16 = a4;
  else
    v16 = &byte_1DEBD87CE;
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report Start====================", (uint64_t)a6, a7, a8, (uint64_t)v16);
  if (a6 && *a6)
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Pipeline %s", v17, v18, v19, (uint64_t)a6);
  if ((_DWORD)a7)
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Audio output buffer samples %u", v17, v18, v19, a7);
  v20 = a9;
  v21 = a10;
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"<CPU msec> / <real-time msec>, <%% CPU> / <%% real-time> (timer starts), <max CPU> / <max real-time>", v17, v18, v19, v53);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v22, v23, v24, v54);
  v28 = a2[8] + a2[7];
  if (a1 <= 1)
  {
    v39 = v28 == 0;
  }
  else
  {
    v59 = v16;
    v29 = 0;
    v30 = 0;
    v31 = a1 - 1;
    v32 = a2 + 23;
    v33 = v31;
    v34 = a2[9];
    v35 = a2[8] + a2[7];
    do
    {
      v35 -= *(v32 - 2) + *(v32 - 1);
      v34 -= *v32;
      if (v30 <= *(v32 - 4) + *(v32 - 5))
        v30 = *(v32 - 4) + *(v32 - 5);
      if (v29 <= *(v32 - 3))
        v29 = *(v32 - 3);
      v32 += 14;
      --v33;
    }
    while (v33);
    v58 = v28 == 0;
    v36 = a2 + 26;
    v37 = (char **)(a8 + 8);
    do
    {
      if (a8)
      {
        v38 = *v37;
        if (!*v37)
          v38 = &byte_1DEBD87CE;
      }
      else
      {
        v38 = &byte_1DEBD87CE;
      }
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u), %7.1f / %7.1f", v25, v26, v27, (uint64_t)v38);
      v36 += 14;
      ++v37;
      --v31;
    }
    while (v31);
    v16 = v59;
    v20 = a9;
    v21 = a10;
    v39 = v58;
  }
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u)", v25, v26, v27, (uint64_t)"Other");
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v40, v41, v42, v55);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f  %6s    %6s   %4s   %7.1f / %7.1f", v43, v44, v45, (uint64_t)"TOTAL");
  if (v21 | v20)
  {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v46, v47, v48, v56);
    if (v20)
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Input text length (bytes)");
    if (v21)
    {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Output duration (msec)");
      if (!v39)
        log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Real-time rate");
    }
    if (v20)
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Msec per byte of input");
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v49, v50, v51, v57);
  }
  return log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report End====================", v46, v47, v48, (uint64_t)v16);
}

uint64_t compstats_ClockStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;

  v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t compstats_ClockStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;

  v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      return 0;
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t critsec_cb_ClassOpen(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v5 = 2168463367;
  if (a3)
  {
    v11 = (_QWORD *)heap_Calloc(a1, 1, 32);
    *(_QWORD *)a5 = v11;
    if (v11)
    {
      v5 = 0;
      *v11 = a1;
      *(_QWORD *)(*(_QWORD *)a5 + 8) = a2;
      *(_QWORD *)(*(_QWORD *)a5 + 16) = a3;
      *(_QWORD *)(*(_QWORD *)a5 + 24) = a4;
    }
    else
    {
      return 2168463370;
    }
  }
  return v5;
}

uint64_t critsec_cb_ClassClose(uint64_t *a1)
{
  uint64_t result;

  result = 2168463367;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(_QWORD **)*a1, *a1);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t critsec_ObjOpen(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t);

  v3 = 2168463367;
  if (a1 && a2 && a3)
  {
    v7 = (_QWORD *)heap_Calloc(a2, 1, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      *v7 = a1;
      *(_QWORD *)(*a3 + 8) = a2;
      v8 = **(uint64_t (***)(_QWORD, _QWORD, uint64_t))(a1 + 16);
      if (v8)
      {
        v3 = v8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2168463370;
    }
  }
  return v3;
}

uint64_t critsec_ObjClose(uint64_t a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  if (!a1)
    return 2168463367;
  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  if (v2)
  {
    v3 = v2(*(_QWORD *)(a1 + 16));
    if ((v3 & 0x80000000) != 0)
      return v3;
  }
  else
  {
    v3 = 0;
  }
  heap_Free(*(_QWORD **)(a1 + 8), a1);
  return v3;
}

uint64_t critsec_Enter(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD);

  if (!a1)
    return 2168463367;
  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 16);
  if (v1)
    return v1(a1[2]);
  else
    return 0;
}

uint64_t critsec_Leave(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD);

  if (!a1)
    return 2168463367;
  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 24);
  if (v1)
    return v1(a1[2]);
  else
    return 0;
}

uint64_t brk_ClassOpen(_WORD *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  result = InitRsrcFunction(a1, a2, &v14);
  if ((result & 0x80000000) == 0)
  {
    v13 = v14;
    memcpy((void *)(v14 + 80), a3, 0x130uLL);
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(a1, a2, a4, a5, a6);
  }
  return result;
}

uint64_t brk_ClassClose(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 16) + 104))();
  return result;
}

uint64_t brk_ClassUpdate(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 16) + 352))();
  else
    return 2169528327;
}

uint64_t brk_ObjOpen(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 120))();
  else
    return 2169528327;
}

uint64_t brk_ObjClose(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 128))();
  else
    return 2169528327;
}

uint64_t brk_ObjGetClass(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 136))();
  if (a2)
    *a2 = 0;
  return 2169528327;
}

uint64_t brk_InterfaceQuery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 264))();
}

uint64_t brk_InterfaceQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 && a2 && a6)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 272))();
  else
    return 2169528327;
}

uint64_t brk_InterfaceRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 280))();
  else
    return 2169528327;
}

uint64_t brk_TagQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a5 && a3 && a2 && *(_QWORD *)a1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 160))();
  else
    return 2169528327;
}

uint64_t brk_TagRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 168))();
  else
    return 2169528327;
}

uint64_t brk_ComponentTableIteratorOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3 && a2 && *(_QWORD *)a1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 240))();
  else
    return 2169528327;
}

uint64_t brk_ComponentTableIteratorNext(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  else
    return 2169528327;
}

uint64_t brk_ComponentTableIteratorClose(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  else
    return 2169528327;
}

uint64_t brk_DataOpen(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 296))();
}

uint64_t brk_DataOpenEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a4)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 304))();
  else
    return 2169528327;
}

uint64_t brk_DataClose(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 312))();
  else
    return 2169528327;
}

uint64_t brk_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a5)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 320))();
  else
    return 2169528327;
}

uint64_t brk_DataMapEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a4 && a5)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 328))();
  else
    return 2169528327;
}

uint64_t brk_DataUnmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 336))();
  else
    return 2169528327;
}

uint64_t brk_DataMapDeRefCnt(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(a3, a4, &v10);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApi = getObjcForThisApi(v11, v10);
      return objc_ReleaseObject(ObjcForThisApi, a5);
    }
  }
  return result;
}

uint64_t getObjcForThisApi(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *__s1;

  v3 = a1;
  __s1 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
    || !__s1
    || !*__s1
    || !strcmp(__s1, "internal"))
  {
    v3 = a2;
  }
  return *(_QWORD *)(v3 + 48);
}

uint64_t brk_DataMapRefCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, int a6, int a7, _QWORD *a8)
{
  uint64_t result;
  uint64_t ObjcForThisApi;
  uint64_t v18;
  _QWORD v19[4];
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = 0;
  result = InitRsrcFunction(a1, a2, &v24);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(a3, a4, &v23);
    if ((result & 0x80000000) == 0)
    {
      v19[0] = a1;
      v19[1] = a2;
      v19[2] = a3;
      v19[3] = a4;
      v20 = a6;
      v21 = a7;
      ObjcForThisApi = getObjcForThisApi(v24, v23);
      result = objc_GetAddRefCountedObject(ObjcForThisApi, a5, (uint64_t (*)(_QWORD, _QWORD, uint64_t, __int128 *, uint64_t))brkDataMap_ObjcLoad, (void (*)(_QWORD, _QWORD, __int128 *))brkDataMap_ObjcClose, (uint64_t)v19, &v22);
      if ((result & 0x80000000) != 0)
        v18 = 0;
      else
        v18 = *(_QWORD *)(v22 + 32);
      *a8 = v18;
    }
  }
  return result;
}

uint64_t brkDataMap_ObjcLoad(_WORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(_QWORD *)(a5 + 24), &v18);
  if ((inited & 0x80000000) != 0)
    return inited;
  v9 = 2169528327;
  v10 = v17;
  v11 = heap_Calloc(*(_QWORD **)(v17 + 8), 1, 272);
  *(_QWORD *)(a4 + 32) = v11;
  if (!v11)
    return 2169528330;
  if (a3)
  {
    v12 = *(_QWORD *)(v10 + 24);
    if (v12)
    {
      inited = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v12 + 16) + 304))(*(_QWORD *)(v10 + 24), a3, 1, v11 + 256);
      if ((inited & 0x80000000) == 0)
      {
        v13 = *(_QWORD *)(v10 + 24);
        v14 = *(_QWORD *)(a4 + 32);
        if (v13)
        {
          v15 = *(_QWORD *)(v14 + 256);
          if (v15)
            v9 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)v13 + 16)
                                                                                     + 320))(*(_QWORD *)(v10 + 24), v15, *(unsigned int *)(a5 + 32), *(unsigned int *)(a5 + 36), v14 + 264);
        }
        __strcpy_chk();
        return v9;
      }
      return inited;
    }
  }
  return v9;
}

uint64_t brkDataMap_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;

  v13 = 0;
  inited = InitRsrcFunction(a1, a2, &v13);
  if ((inited & 0x80000000) != 0)
    return inited;
  v5 = 2169528327;
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(v13 + 24);
  if (v7)
    v8 = *(_QWORD *)(v6 + 256) == 0;
  else
    v8 = 1;
  if (!v8 && *(_QWORD *)(v6 + 264) != 0)
  {
    inited = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v7 + 16) + 336))();
    if ((inited & 0x80000000) == 0)
    {
      v10 = *(_QWORD *)(v13 + 24);
      if (v10)
        v11 = *(_QWORD *)(v6 + 256) == 0;
      else
        v11 = 1;
      if (!v11)
      {
        v5 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v10 + 16) + 312))();
        if ((v5 & 0x80000000) == 0)
          heap_Free(*(_QWORD **)(v13 + 8), v6);
      }
      return v5;
    }
    return inited;
  }
  return v5;
}

uint64_t brk_DataFreeze(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 344))();
  else
    return 2169528327;
}

uint64_t brk_TagIteratorOpen(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  if (!a1 || !a2 || !a3 || !*a2 || !a5 || !*a3)
    return 2169528327;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *a5 = 0;
  return (*(uint64_t (**)(void))(v5 + 200))();
}

uint64_t brk_TagIteratorNext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  else
    return 2169528327;
}

uint64_t brk_TagIteratorClose(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  else
    return 2169528327;
}

uint64_t brk_RegisterCupAddon(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 && a2 && (v4 = *a1) != 0 && (v5 = *(_QWORD *)(v4 + 16)) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 368))(a2, a3, a4, v4);
  else
    return 2169528327;
}

uint64_t brk_UnregisterCupAddon(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 && a2 && (v2 = *a1) != 0 && (v3 = *(_QWORD *)(v2 + 16)) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 376))(a2, v2);
  else
    return 2169528327;
}

uint64_t filespi_fopen(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v11;

  v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (**(_QWORD **)(a1 + 16))
    {
      v11 = (_QWORD *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        *v11 = a1;
        *(_QWORD *)(*a5 + 8) = a2;
        v5 = (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t filespi_fclose(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 2153783303;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8))(*(_QWORD *)(a1 + 16));
  if ((v2 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(a1 + 8), a1);
  return v2;
}

uint64_t filespi_fread(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t);

  result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a4 + 16) + 16);
    if (v6)
      return v6(a1);
    else
      return 2153783297;
  }
  return result;
}

uint64_t filespi_GetFileSize(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD);

  if (a1 && (v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 32)) != 0)
    return v1(a1[2]);
  else
    return 2153783296;
}

uint64_t filespi_fwrite(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t);

  result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a4 + 16) + 48);
    if (v6)
      return v6(a1);
    else
      return 2153783297;
  }
  return result;
}

uint64_t filespi_fflush(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2153783297;
  if (!a1)
    return 2153783303;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 56);
  if (v3)
    return v3(a1[2]);
  return result;
}

uint64_t heap_cb_Open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v3 = 2159026183;
  if (a1)
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, 1, 16);
    *(_QWORD *)a3 = v7;
    if (v7)
    {
      v3 = 0;
      *v7 = a1;
      *(_QWORD *)(*(_QWORD *)a3 + 8) = a2;
    }
    else
    {
      return 2159026186;
    }
  }
  return v3;
}

uint64_t heap_cb_Close(_QWORD *a1)
{
  if (!a1)
    return 2159026183;
  (*(void (**)(_QWORD, _QWORD *))(*a1 + 24))(a1[1], a1);
  return 0;
}

uint64_t heap_Alloc(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (**(uint64_t (***)(_QWORD))a1)(*(_QWORD *)(a1 + 8));
  else
    return 0;
}

uint64_t heap_Calloc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return (*(uint64_t (**)(_QWORD))(*a1 + 8))(a1[1]);
  else
    return 0;
}

uint64_t heap_Realloc(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a1 || !a3)
    return 0;
  v3 = *a1;
  if (a2)
    return (*(uint64_t (**)(uint64_t))(v3 + 16))(a1[1]);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))v3)(a1[1], a3);
}

_QWORD *heap_Free(_QWORD *result, uint64_t a2)
{
  if (result)
  {
    if (a2)
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*result + 24))(result[1]);
  }
  return result;
}

uint64_t heap_SetLog(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2159026177;
  if (!a1)
    return 2159026183;
  v3 = *(uint64_t (**)(_QWORD))(*a1 + 32);
  if (v3)
    return v3(a1[1]);
  return result;
}

uint64_t thread_cb_ClassOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v6 = 2153783303;
  if (a3 && a4)
  {
    v13 = (_QWORD *)heap_Alloc(a1, 40);
    *(_QWORD *)a6 = v13;
    if (v13)
    {
      v6 = 0;
      *v13 = a1;
      *(_QWORD *)(*(_QWORD *)a6 + 8) = a2;
      *(_QWORD *)(*(_QWORD *)a6 + 16) = a3;
      *(_QWORD *)(*(_QWORD *)a6 + 24) = a4;
      *(_QWORD *)(*(_QWORD *)a6 + 32) = a5;
    }
    else
    {
      return 2153783306;
    }
  }
  return v6;
}

uint64_t thread_cb_ClassClose(uint64_t *a1)
{
  uint64_t result;

  result = 2153783303;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(_QWORD **)*a1, *a1);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t thread_ObjOpen(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t);

  v3 = 2153783303;
  if (a1 && a2 && a3)
  {
    v7 = (_QWORD *)heap_Alloc((uint64_t)a2, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      *v7 = a1;
      *(_QWORD *)(*a3 + 8) = a2;
      v8 = **(uint64_t (***)(_QWORD, _QWORD, uint64_t))(a1 + 16);
      if (v8)
      {
        v3 = v8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v3;
}

uint64_t thread_ObjClose(uint64_t a1)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  if (!a1)
    return 2153783303;
  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
  if (v2)
  {
    v3 = v2(*(_QWORD *)(a1 + 16));
    if ((v3 & 0x80000000) != 0)
      return v3;
  }
  else
  {
    v3 = 0;
  }
  heap_Free(*(_QWORD **)(a1 + 8), a1);
  return v3;
}

uint64_t thread_Start(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2153783304;
  if (!a1)
    return 2153783314;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 16);
  if (v3)
    return v3(a1[2]);
  return result;
}

uint64_t thread_Join(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2153783304;
  if (!a1)
    return 2153783314;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 24);
  if (v3)
    return v3(a1[2]);
  return result;
}

uint64_t semaphore_ObjectOpen(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);

  v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    v11 = (_QWORD *)heap_Alloc((uint64_t)a2, 24);
    *a5 = (uint64_t)v11;
    if (v11)
    {
      *v11 = a1;
      *(_QWORD *)(*a5 + 8) = a2;
      v12 = **(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 24);
      if (v12)
      {
        v5 = v12(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v5;
}

uint64_t semaphore_ObjectClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD);

  v1 = 2153783303;
  if (a1)
  {
    v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8);
    if (v3)
    {
      v1 = v3(*(_QWORD *)(a1 + 16));
      if ((v1 & 0x80000000) == 0)
        heap_Free(*(_QWORD **)(a1 + 8), a1);
    }
    else
    {
      return 2153783304;
    }
  }
  return v1;
}

uint64_t semaphore_Acquire(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2153783303;
  if (a1)
  {
    v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 24) + 16);
    if (v3)
      return v3(a1[2]);
    else
      return 2153783304;
  }
  return result;
}

uint64_t semaphore_Release(_QWORD *a1)
{
  uint64_t result;
  uint64_t (*v3)(_QWORD);

  result = 2153783303;
  if (a1)
  {
    v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 24) + 24);
    if (v3)
      return v3(a1[2]);
    else
      return 2153783304;
  }
  return result;
}

double MD5Init(uint64_t a1)
{
  double result;

  result = -3.59869635e230;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = xmmword_1DEC5D530;
  return result;
}

void *MD5Update(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t v9;

  v6 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 3) & 0x3F;
  *(_QWORD *)(a1 + 16) += __PAIR64__(a3 >> 29, 8 * (int)a3);
  v7 = 64 - v6;
  if (64 - v6 <= a3)
  {
    memcpy((void *)(a1 + 24 + v6), __src, 64 - v6);
    MD5Transform((_DWORD *)a1, (const char *)(a1 + 24));
    for (i = v6 ^ 0x7F; i < a3; i = v9 + 127)
    {
      v9 = v7;
      MD5Transform((_DWORD *)a1, &__src[v7]);
      v7 += 64;
    }
    v6 = 0;
  }
  else
  {
    v7 = 0;
  }
  return memcpy((void *)(a1 + v6 + 24), &__src[v7], a3 - v7);
}

int8x16_t MD5Transform(_DWORD *a1, const char *a2)
{
  int v2;
  int v3;
  int v4;
  uint16x8_t v5;
  int8x16_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v21;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int8x16_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int8x16_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int8x16_t result;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int8x16x4_t v96;

  v96 = vld4q_s8(a2);
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
  v6 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v5.i8);
  v7 = vmovl_high_u8((uint8x16_t)v96.val[0]);
  v8 = vmovl_high_u8((uint8x16_t)v96.val[1]);
  v9 = vmovl_u8(*(uint8x8_t *)v96.val[1].i8);
  v10 = vorrq_s8((int8x16_t)vshll_high_n_u16(v8, 8uLL), (int8x16_t)vmovl_high_u16(v7));
  v11 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v8.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v7.i8));
  v12 = vorrq_s8((int8x16_t)vshll_high_n_u16(v9, 8uLL), (int8x16_t)vmovl_high_u16(v5));
  v13 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v9.i8, 8uLL), v6);
  _Q3 = vmovl_u8(*(uint8x8_t *)v96.val[2].i8);
  _Q4 = vmovl_high_u8((uint8x16_t)v96.val[2]);
  __asm { SHLL2           V5.4S, V4.8H, #0x10 }
  v21 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q4.i8, 0x10uLL);
  __asm { SHLL2           V4.4S, V3.8H, #0x10 }
  v23 = vorrq_s8(v13, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL));
  v24 = vorrq_s8(v12, _Q4);
  v25 = vorrq_s8(v10, _Q5);
  v26 = vmovl_high_u8((uint8x16_t)v96.val[3]);
  v27 = vmovl_u8(*(uint8x8_t *)v96.val[3].i8);
  v28 = vorrq_s8(v23, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL));
  HIDWORD(v29) = *a1 + (v4 & v2) + (v3 & ~v2) + v28.i32[0] - 680876936;
  LODWORD(v29) = HIDWORD(v29);
  v30 = (v29 >> 25) + v2;
  HIDWORD(v29) = v3 + v28.i32[1] + (v4 & ~v30) + (v30 & v2) - 389564586;
  LODWORD(v29) = HIDWORD(v29);
  v31 = (v29 >> 20) + v30;
  HIDWORD(v29) = v4 + v28.i32[2] + (v2 & ~v31) + (v31 & v30) + 606105819;
  LODWORD(v29) = HIDWORD(v29);
  v32 = vorrq_s8(v24, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v27), 0x18uLL));
  v33 = (v29 >> 15) + v31;
  HIDWORD(v29) = v2 + v28.i32[3] + (v30 & ~v33) + (v33 & v31) - 1044525330;
  LODWORD(v29) = HIDWORD(v29);
  v34 = (v29 >> 10) + v33;
  HIDWORD(v29) = v32.i32[0] + v30 + (v31 & ~v34) + (v34 & v33) - 176418897;
  LODWORD(v29) = HIDWORD(v29);
  v35 = (v29 >> 25) + v34;
  HIDWORD(v29) = v32.i32[1] + v31 + (v33 & ~v35) + (v35 & v34) + 1200080426;
  LODWORD(v29) = HIDWORD(v29);
  v36 = (v29 >> 20) + v35;
  HIDWORD(v29) = v32.i32[2] + v33 + (v34 & ~v36) + (v36 & v35) - 1473231341;
  LODWORD(v29) = HIDWORD(v29);
  v37 = vorrq_s8(vorrq_s8(v11, v21), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), 0x18uLL));
  v38 = (v29 >> 15) + v36;
  HIDWORD(v29) = v32.i32[3] + v34 + (v35 & ~v38) + (v38 & v36) - 45705983;
  LODWORD(v29) = HIDWORD(v29);
  v39 = (v29 >> 10) + v38;
  HIDWORD(v29) = v37.i32[0] + v35 + (v36 & ~v39) + (v39 & v38) + 1770035416;
  LODWORD(v29) = HIDWORD(v29);
  v40 = (v29 >> 25) + v39;
  HIDWORD(v29) = v37.i32[1] + v36 + (v38 & ~v40) + (v40 & v39) - 1958414417;
  LODWORD(v29) = HIDWORD(v29);
  v41 = (v29 >> 20) + v40;
  HIDWORD(v29) = v37.i32[2] + v38 + (v39 & ~v41) + (v41 & v40) - 42063;
  LODWORD(v29) = HIDWORD(v29);
  result = vorrq_s8(v25, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v26), 0x18uLL));
  v43 = (v29 >> 15) + v41;
  HIDWORD(v29) = v37.i32[3] + v39 + (v40 & ~v43) + (v43 & v41) - 1990404162;
  LODWORD(v29) = HIDWORD(v29);
  v44 = (v29 >> 10) + v43;
  HIDWORD(v29) = result.i32[0] + v40 + (v41 & ~v44) + (v44 & v43) + 1804603682;
  LODWORD(v29) = HIDWORD(v29);
  v45 = (v29 >> 25) + v44;
  HIDWORD(v29) = result.i32[1] + v41 + (v43 & ~v45) + (v45 & v44) - 40341101;
  LODWORD(v29) = HIDWORD(v29);
  v46 = (v29 >> 20) + v45;
  HIDWORD(v29) = result.i32[2] + v43 + (v44 & ~v46) + (v46 & v45) - 1502002290;
  LODWORD(v29) = HIDWORD(v29);
  v47 = (v29 >> 15) + v46;
  HIDWORD(v29) = result.i32[3] + v44 + (v45 & ~v47) + (v47 & v46) + 1236535329;
  LODWORD(v29) = HIDWORD(v29);
  v48 = (v29 >> 10) + v47;
  HIDWORD(v29) = v28.i32[1] + v45 + (v47 & ~v46) - 165796510 + (v48 & v46);
  LODWORD(v29) = HIDWORD(v29);
  v49 = (v29 >> 27) + v48;
  HIDWORD(v29) = v32.i32[2] + v46 + (v48 & ~v47) - 1069501632 + (v49 & v47);
  LODWORD(v29) = HIDWORD(v29);
  v50 = (v29 >> 23) + v49;
  HIDWORD(v29) = v37.i32[3] + v47 + (v49 & ~v48) + 643717713 + (v50 & v48);
  LODWORD(v29) = HIDWORD(v29);
  v51 = (v29 >> 18) + v50;
  HIDWORD(v29) = v28.i32[0] + v48 + (v50 & ~v49) - 373897302 + (v51 & v49);
  LODWORD(v29) = HIDWORD(v29);
  v52 = (v29 >> 12) + v51;
  HIDWORD(v29) = v32.i32[1] + v49 + (v51 & ~v50) - 701558691 + (v52 & v50);
  LODWORD(v29) = HIDWORD(v29);
  v53 = (v29 >> 27) + v52;
  HIDWORD(v29) = v37.i32[2] + v50 + (v52 & ~v51) + 38016083 + (v53 & v51);
  LODWORD(v29) = HIDWORD(v29);
  v54 = (v29 >> 23) + v53;
  HIDWORD(v29) = result.i32[3] + v51 + (v53 & ~v52) - 660478335 + (v54 & v52);
  LODWORD(v29) = HIDWORD(v29);
  v55 = (v29 >> 18) + v54;
  HIDWORD(v29) = v32.i32[0] + v52 + (v54 & ~v53) - 405537848 + (v55 & v53);
  LODWORD(v29) = HIDWORD(v29);
  v56 = (v29 >> 12) + v55;
  HIDWORD(v29) = v37.i32[1] + v53 + (v55 & ~v54) + 568446438 + (v56 & v54);
  LODWORD(v29) = HIDWORD(v29);
  v57 = (v29 >> 27) + v56;
  HIDWORD(v29) = result.i32[2] + v54 + (v56 & ~v55) - 1019803690 + (v57 & v55);
  LODWORD(v29) = HIDWORD(v29);
  v58 = (v29 >> 23) + v57;
  HIDWORD(v29) = v28.i32[3] + v55 + (v57 & ~v56) - 187363961 + (v58 & v56);
  LODWORD(v29) = HIDWORD(v29);
  v59 = (v29 >> 18) + v58;
  HIDWORD(v29) = v37.i32[0] + v56 + (v58 & ~v57) + 1163531501 + (v59 & v57);
  LODWORD(v29) = HIDWORD(v29);
  v60 = (v29 >> 12) + v59;
  HIDWORD(v29) = result.i32[1] + v57 + (v59 & ~v58) - 1444681467 + (v60 & v58);
  LODWORD(v29) = HIDWORD(v29);
  v61 = (v29 >> 27) + v60;
  HIDWORD(v29) = v28.i32[2] + v58 + (v60 & ~v59) - 51403784 + (v61 & v59);
  LODWORD(v29) = HIDWORD(v29);
  v62 = (v29 >> 23) + v61;
  HIDWORD(v29) = v32.i32[3] + v59 + (v61 & ~v60) + 1735328473 + (v62 & v60);
  LODWORD(v29) = HIDWORD(v29);
  v63 = (v29 >> 18) + v62;
  HIDWORD(v29) = result.i32[0] + v60 + (v62 & ~v61) - 1926607734 + (v63 & v61);
  LODWORD(v29) = HIDWORD(v29);
  v64 = (v29 >> 12) + v63;
  HIDWORD(v29) = v32.i32[1] + v61 - 378558 + (v64 ^ v63 ^ v62);
  LODWORD(v29) = HIDWORD(v29);
  v65 = (v29 >> 28) + v64;
  HIDWORD(v29) = v37.i32[0] + v62 - 2022574463 + (v64 ^ v63 ^ v65);
  LODWORD(v29) = HIDWORD(v29);
  v66 = (v29 >> 21) + v65;
  HIDWORD(v29) = v37.i32[3] + v63 + 1839030562 + (v65 ^ v64 ^ v66);
  LODWORD(v29) = HIDWORD(v29);
  v67 = (v29 >> 16) + v66;
  HIDWORD(v29) = result.i32[2] + v64 - 35309556 + (v66 ^ v65 ^ v67);
  LODWORD(v29) = HIDWORD(v29);
  v68 = (v29 >> 9) + v67;
  HIDWORD(v29) = v28.i32[1] + v65 - 1530992060 + (v67 ^ v66 ^ v68);
  LODWORD(v29) = HIDWORD(v29);
  v69 = (v29 >> 28) + v68;
  HIDWORD(v29) = v32.i32[0] + v66 + 1272893353 + (v68 ^ v67 ^ v69);
  LODWORD(v29) = HIDWORD(v29);
  v70 = (v29 >> 21) + v69;
  HIDWORD(v29) = v32.i32[3] + v67 - 155497632 + (v69 ^ v68 ^ v70);
  LODWORD(v29) = HIDWORD(v29);
  v71 = (v29 >> 16) + v70;
  HIDWORD(v29) = v37.i32[2] + v68 - 1094730640 + (v70 ^ v69 ^ v71);
  LODWORD(v29) = HIDWORD(v29);
  v72 = (v29 >> 9) + v71;
  HIDWORD(v29) = result.i32[1] + v69 + 681279174 + (v71 ^ v70 ^ v72);
  LODWORD(v29) = HIDWORD(v29);
  v73 = (v29 >> 28) + v72;
  HIDWORD(v29) = v28.i32[0] + v70 - 358537222 + (v72 ^ v71 ^ v73);
  LODWORD(v29) = HIDWORD(v29);
  v74 = (v29 >> 21) + v73;
  HIDWORD(v29) = v28.i32[3] + v71 - 722521979 + (v73 ^ v72 ^ v74);
  LODWORD(v29) = HIDWORD(v29);
  v75 = (v29 >> 16) + v74;
  HIDWORD(v29) = v32.i32[2] + v72 + 76029189 + (v74 ^ v73 ^ v75);
  LODWORD(v29) = HIDWORD(v29);
  v76 = (v29 >> 9) + v75;
  HIDWORD(v29) = v37.i32[1] + v73 - 640364487 + (v75 ^ v74 ^ v76);
  LODWORD(v29) = HIDWORD(v29);
  v77 = (v29 >> 28) + v76;
  HIDWORD(v29) = result.i32[0] + v74 - 421815835 + (v76 ^ v75 ^ v77);
  LODWORD(v29) = HIDWORD(v29);
  v78 = (v29 >> 21) + v77;
  HIDWORD(v29) = result.i32[3] + v75 + 530742520 + (v77 ^ v76 ^ v78);
  LODWORD(v29) = HIDWORD(v29);
  v79 = (v29 >> 16) + v78;
  HIDWORD(v29) = v28.i32[2] + v76 - 995338651 + (v78 ^ v77 ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  v80 = (v29 >> 9) + v79;
  HIDWORD(v29) = v28.i32[0] + v77 - 198630844 + ((v80 | ~v78) ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  v81 = (v29 >> 26) + v80;
  HIDWORD(v29) = v32.i32[3] + v78 + 1126891415 + ((v81 | ~v79) ^ v80);
  LODWORD(v29) = HIDWORD(v29);
  v82 = (v29 >> 22) + v81;
  HIDWORD(v29) = result.i32[2] + v79 - 1416354905 + ((v82 | ~v80) ^ v81);
  LODWORD(v29) = HIDWORD(v29);
  v83 = (v29 >> 17) + v82;
  HIDWORD(v29) = v32.i32[1] + v80 - 57434055 + ((v83 | ~v81) ^ v82);
  LODWORD(v29) = HIDWORD(v29);
  v84 = (v29 >> 11) + v83;
  HIDWORD(v29) = result.i32[0] + v81 + 1700485571 + ((v84 | ~v82) ^ v83);
  LODWORD(v29) = HIDWORD(v29);
  v85 = (v29 >> 26) + v84;
  HIDWORD(v29) = v28.i32[3] + v82 - 1894986606 + ((v85 | ~v83) ^ v84);
  LODWORD(v29) = HIDWORD(v29);
  v86 = (v29 >> 22) + v85;
  HIDWORD(v29) = v37.i32[2] + v83 - 1051523 + ((v86 | ~v84) ^ v85);
  LODWORD(v29) = HIDWORD(v29);
  v87 = (v29 >> 17) + v86;
  HIDWORD(v29) = v28.i32[1] + v84 - 2054922799 + ((v87 | ~v85) ^ v86);
  LODWORD(v29) = HIDWORD(v29);
  v88 = (v29 >> 11) + v87;
  HIDWORD(v29) = v37.i32[0] + v85 + 1873313359 + ((v88 | ~v86) ^ v87);
  LODWORD(v29) = HIDWORD(v29);
  v89 = (v29 >> 26) + v88;
  HIDWORD(v29) = result.i32[3] + v86 - 30611744 + ((v89 | ~v87) ^ v88);
  LODWORD(v29) = HIDWORD(v29);
  v90 = (v29 >> 22) + v89;
  HIDWORD(v29) = v32.i32[2] + v87 - 1560198380 + ((v90 | ~v88) ^ v89);
  LODWORD(v29) = HIDWORD(v29);
  v91 = (v29 >> 17) + v90;
  HIDWORD(v29) = result.i32[1] + v88 + 1309151649 + ((v91 | ~v89) ^ v90);
  LODWORD(v29) = HIDWORD(v29);
  v92 = (v29 >> 11) + v91;
  HIDWORD(v29) = v32.i32[0] + v89 - 145523070 + ((v92 | ~v90) ^ v91);
  LODWORD(v29) = HIDWORD(v29);
  v93 = (v29 >> 26) + v92;
  HIDWORD(v29) = v37.i32[3] + v90 - 1120210379 + ((v93 | ~v91) ^ v92);
  LODWORD(v29) = HIDWORD(v29);
  v94 = (v29 >> 22) + v93;
  HIDWORD(v29) = v28.i32[2] + v91 + 718787259 + ((v94 | ~v92) ^ v93);
  LODWORD(v29) = HIDWORD(v29);
  v95 = (v29 >> 17) + v94;
  HIDWORD(v29) = v37.i32[1] + v92 - 343485551 + ((v95 | ~v93) ^ v94);
  LODWORD(v29) = HIDWORD(v29);
  *a1 += v93;
  a1[1] = v95 + v2 + (v29 >> 11);
  a1[2] = v95 + v4;
  a1[3] = v94 + v3;
  return result;
}

double MD5Final(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  double result;
  char v10[8];
  uint64_t v11;

  v4 = 0;
  v11 = *MEMORY[0x1E0C80C00];
  do
  {
    *(_DWORD *)&v10[v4] = *(_DWORD *)(a2 + v4 + 16);
    v4 += 4;
  }
  while (v4 != 8);
  v5 = ((unint64_t)*(unsigned int *)(a2 + 16) >> 3) & 0x3F;
  v6 = 120;
  if (v5 < 0x38)
    v6 = 56;
  MD5Update(a2, PADDING, v6 - v5);
  MD5Update(a2, v10, 8uLL);
  for (i = 0; i != 16; i += 4)
  {
    v8 = a1 + i;
    *(_WORD *)v8 = *(_DWORD *)(a2 + i);
    *(_BYTE *)(v8 + 2) = *(_WORD *)(a2 + i + 2);
    *(_BYTE *)(v8 + 3) = *(_BYTE *)(a2 + i + 3);
  }
  *(_QWORD *)(a2 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t cache_ClassOpen(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v11;

  v5 = 2153783303;
  if (a5 && !*a5)
  {
    v11 = (_QWORD *)heap_Calloc(a1, 1, 32);
    if (v11)
    {
      v5 = 0;
      v11[2] = a3;
      v11[3] = a4;
      *v11 = a1;
      v11[1] = a2;
    }
    else
    {
      v5 = 2153783306;
    }
    *a5 = v11;
  }
  return v5;
}

uint64_t cache_ClassClose(_QWORD **a1)
{
  if (!a1)
    return 2153783303;
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t cache_ObjOpen(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v5 = 2153783303;
  if (a1 && a5 && !*a5)
  {
    v11 = *(_QWORD **)a1;
    v12 = heap_Calloc(*(_QWORD **)a1, 1, 72);
    v13 = v12;
    if (v12)
    {
      *(_QWORD *)v12 = a1;
      *(_QWORD *)(v12 + 8) = v11;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a1 + 16);
      v14 = (uint64_t *)(v12 + 16);
      v15 = critsec_ObjOpen(*(_QWORD *)(a1 + 8), v11, (uint64_t *)(v12 + 16));
      if ((v15 & 0x80000000) == 0)
      {
        v16 = v15;
        if (!a2 || !a3 || !a4)
          goto LABEL_28;
        v17 = (_DWORD *)heap_Calloc(v11, 56, 1);
        *(_QWORD *)(v13 + 64) = v17;
        if (v17)
        {
          v18 = v17;
          v17[10] = a2;
          v17[11] = a3;
          if (a4 >= a3)
            v19 = a3;
          else
            v19 = a4;
          v17[12] = v19;
          if (a2 <= 1)
          {
            a2 = 2;
            v17[10] = 2;
          }
          v20 = heap_Alloc((uint64_t)v11, a2 * (unint64_t)a3);
          *((_QWORD *)v18 + 4) = v20;
          if (v20)
          {
            v21 = heap_Alloc((uint64_t)v11, 40 * v18[10]);
            *((_QWORD *)v18 + 3) = v21;
            if (v21)
            {
              v22 = (_QWORD *)(v21 + 40);
              *(_QWORD *)v21 = 0;
              *(_QWORD *)(v21 + 8) = v21 + 40;
              *(_DWORD *)(v21 + 16) = -1;
              v23 = *((_QWORD *)v18 + 4);
              *(_QWORD *)(v21 + 24) = v23;
              *(_QWORD *)(v21 + 32) = 0;
              v24 = v18[11];
              v25 = (v18[10] - 1);
              if (v25 < 2)
              {
                v30 = (_QWORD *)v21;
              }
              else
              {
                v26 = v25 - 1;
                v27 = v18[11];
                do
                {
                  v28 = v22;
                  v29 = v22 - 5;
                  v22 += 5;
                  *v28 = v29;
                  v28[1] = v22;
                  *((_DWORD *)v28 + 4) = -1;
                  v28[3] = v23 + v27;
                  v28[4] = 0;
                  v27 += v24;
                  --v26;
                }
                while (v26);
                v30 = v22 - 5;
              }
              v16 = 0;
              *v22 = v30;
              v30[6] = 0;
              *((_DWORD *)v30 + 14) = -1;
              v30[8] = v23 + (v24 * v25);
              v30[9] = 0;
              *((_QWORD *)v18 + 1) = v21;
              *((_QWORD *)v18 + 2) = v21 + 40 * v25;
              goto LABEL_28;
            }
            heap_Free(v11, *((_QWORD *)v18 + 4));
          }
        }
      }
      if (*v14)
        critsec_ObjClose(*v14);
      v31 = *(_QWORD *)(v13 + 64);
      if (v31)
        heap_Free(v11, v31);
      heap_Free(v11, v13);
      v13 = 0;
    }
    v16 = 2153783306;
LABEL_28:
    *a5 = v13;
    return v16;
  }
  return v5;
}

uint64_t cache_ObjClose(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  if (!a1)
    return 2153783303;
  critsec_Enter((_QWORD *)a1[2]);
  v2 = (_QWORD *)a1[1];
  v3 = a1[8];
  if (v3)
  {
    v4 = *(_QWORD **)v3;
    heap_Free((_QWORD *)a1[1], *(_QWORD *)(v3 + 32));
    heap_Free(v2, *(_QWORD *)(v3 + 24));
    if (v4)
    {
      do
      {
        heap_Free(v2, v4[1]);
        v5 = (_QWORD *)*v4;
        heap_Free(v2, (uint64_t)v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_DWORD *)(v3 + 48) = 0;
    v6 = a1[8];
  }
  else
  {
    v6 = 0;
  }
  heap_Free(v2, v6);
  a1[8] = 0;
  critsec_Leave((_QWORD *)a1[2]);
  v8 = critsec_ObjClose(a1[2]);
  heap_Free(v2, (uint64_t)a1);
  return v8;
}

uint64_t cache_ObjSetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  uint64_t result;

  if (!a1)
    return 2153783303;
  if (a3)
  {
    v6 = log_GetLogLevel(a3) > 0x63;
    *(_DWORD *)(a1 + 56) = v6;
    *(_DWORD *)(a1 + 60) = v6;
  }
  result = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  return result;
}

uint64_t cache_datastream_Open(int8x16_t *a1, uint64_t a2, char *a3, _BYTE *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t FileInfoDesc;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = 2153783306;
  v6 = 2153783303;
  if (a1 && a5)
  {
    v12 = a1[3].i64[0];
    v13 = *(_QWORD *)(v12 + 24);
    v14 = *(uint64_t **)(v12 + 64);
    v15 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, 56);
    v16 = v15;
    if (!v15)
    {
LABEL_26:
      *a5 = v16;
      return v5;
    }
    v17 = a1[3];
    *(int8x16_t *)v15 = vextq_s8(v17, v17, 8uLL);
    v18 = *(_QWORD *)(v17.i64[0] + 8);
    *(_OWORD *)(v15 + 24) = 0u;
    *(_QWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 40) = 0u;
    critsec_Enter(*(_QWORD **)(v17.i64[0] + 16));
    if (!v14)
    {
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
      goto LABEL_23;
    }
    if (!a3 || !a4)
      goto LABEL_23;
    if (*a4 == 114 && !strchr(a3, 46))
    {
      FileInfoDesc = GetFileInfoDesc(v14, *(_QWORD **)(v16 + 16), a3);
      *(_QWORD *)(v16 + 48) = FileInfoDesc;
      v6 = 2153783306;
      if (!FileInfoDesc)
        goto LABEL_23;
      *(_DWORD *)(FileInfoDesc + 40) = 1;
      if (*(_DWORD *)(FileInfoDesc + 20))
      {
LABEL_11:
        v6 = 0;
        v20 = *(_QWORD *)(FileInfoDesc + 24);
        v21 = *(_QWORD *)(FileInfoDesc + 32);
        *(_QWORD *)(v16 + 24) = v20;
        *(_QWORD *)(v16 + 40) = v21;
        if (!v20)
          goto LABEL_23;
        goto LABEL_22;
      }
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))v13)(a1[2].i64[1], a2, a3, "rb", v16 + 24);
    }
    else
    {
      FileInfoDesc = GetFileInfoDesc(v14, *(_QWORD **)(v16 + 16), a3);
      *(_QWORD *)(v16 + 48) = FileInfoDesc;
      v6 = 2153783306;
      if (!FileInfoDesc)
        goto LABEL_23;
      *(_DWORD *)(FileInfoDesc + 40) = 0;
      if (*(_DWORD *)(FileInfoDesc + 20))
        goto LABEL_11;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _BYTE *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
    }
    v6 = v22;
    if ((v22 & 0x80000000) != 0)
    {
      v23 = *(_QWORD *)(v16 + 40);
    }
    else
    {
      v23 = (*(unsigned int (**)(_QWORD))(v13 + 32))(*(_QWORD *)(v16 + 24));
      *(_QWORD *)(v16 + 40) = v23;
    }
    v24 = *(_QWORD *)(v16 + 24);
    FileInfoDesc = *(_QWORD *)(v16 + 48);
    *(_QWORD *)(FileInfoDesc + 24) = v24;
    *(_QWORD *)(FileInfoDesc + 32) = v23;
    if (v24)
LABEL_22:
      ++*(_DWORD *)(FileInfoDesc + 20);
LABEL_23:
    critsec_Leave(*(_QWORD **)(*(_QWORD *)(v16 + 8) + 16));
    if (!*(_QWORD *)(v16 + 24))
    {
      heap_Free(*(_QWORD **)(v16 + 16), v16);
      v16 = 0;
    }
    v5 = v6;
    goto LABEL_26;
  }
  return v6;
}

uint64_t GetFileInfoDesc(uint64_t *a1, _QWORD *a2, char *__s2)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  char *v10;

  v6 = *a1;
  if (*a1)
  {
    v7 = 0;
    while (strcmp(*(const char **)(v6 + 8), __s2))
    {
      ++v7;
      v6 = *(_QWORD *)v6;
      if (!v6)
        goto LABEL_7;
    }
  }
  else
  {
    v7 = 0;
LABEL_7:
    v8 = (_QWORD *)heap_Alloc((uint64_t)a2, 48);
    v6 = (uint64_t)v8;
    if (v8)
    {
      *v8 = *a1;
      v9 = strlen(__s2);
      v10 = (char *)heap_Alloc((uint64_t)a2, (v9 + 1));
      *(_QWORD *)(v6 + 8) = v10;
      if (v10)
      {
        strcpy(v10, __s2);
        *(_DWORD *)(v6 + 16) = v7;
        *(_QWORD *)(v6 + 28) = 0;
        *(_QWORD *)(v6 + 20) = 0;
        *(_DWORD *)(v6 + 36) = 0;
        *a1 = v6;
      }
      else
      {
        heap_Free(a2, v6);
        return 0;
      }
    }
  }
  return v6;
}

uint64_t cache_datastream_Close(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (!a1)
    return 2153783303;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16));
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v2 + 64)
    && (v4 = *(_QWORD *)(a1 + 48), v5 = *(_DWORD *)(v4 + 20) - 1, (*(_DWORD *)(v4 + 20) = v5) != 0))
  {
    v6 = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
  critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16));
  heap_Free(*(_QWORD **)(a1 + 16), a1);
  return v6;
}

uint64_t cache_datastream_Read(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;

  if (a4)
  {
    critsec_Enter(*(_QWORD **)(a4[1] + 16));
    v8 = a4[1];
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(_QWORD *)(v8 + 64);
    if (v10)
    {
      v11 = a3 * a2;
      if (*(_DWORD *)(v10 + 48) < v11 || (v12 = a4[6], *(_DWORD *)(v12 + 40) != 1))
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v9 + 24))(a4[3], *((unsigned int *)a4 + 8), 0, 1) & 0x80000000) != 0)v16 = 0;
        else
          v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, _QWORD))(v9 + 16))(a1, 1, v11, a4[3]);
        v21 = a4[4] + v11;
LABEL_19:
        a4[4] = v21;
        goto LABEL_20;
      }
      v13 = *(uint64_t **)(v10 + 16);
      if (*((_DWORD *)v13 + 4) != -1)
      {
        v14 = 0;
        v15 = *(_DWORD *)(v12 + 16);
        v16 = v11;
        while (1)
        {
          if (*((_DWORD *)v13 + 4) == v15)
          {
            v17 = a4[4];
            v18 = v13[4];
            v19 = v17 >= v18;
            v20 = v17 - v18;
            if (v19 && v20 + v11 <= *(unsigned int *)(v10 + 44))
              break;
          }
          v13 = (uint64_t *)*v13;
          --v14;
          if (!v13)
            goto LABEL_12;
        }
        memcpy(a1, (const void *)(v13[3] + v20), v11);
        if (v14)
        {
          v23 = (uint64_t *)*v13;
          if (*v13)
          {
            v23[1] = v13[1];
            *(_QWORD *)v13[1] = v23;
            v24 = *(_QWORD *)(v10 + 16);
          }
          else
          {
            v24 = *(_QWORD *)(v10 + 16);
            v25 = *(_QWORD **)(*(_QWORD *)(v10 + 8) + 8);
            *(_QWORD *)(v10 + 8) = v25;
            *v25 = 0;
          }
          *(_QWORD *)(v24 + 8) = v13;
          *v13 = v24;
          v13[1] = 0;
          *(_QWORD *)(v10 + 16) = v13;
        }
        v21 = a4[4] + v11;
        goto LABEL_19;
      }
LABEL_12:
      v16 = AddCacheData(a4, v11, a1);
    }
    else
    {
      v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, _QWORD))(v9 + 16))(a1, a2, a3, a4[3]);
    }
LABEL_20:
    critsec_Leave(*(_QWORD **)(a4[1] + 16));
    return v16;
  }
  return 0;
}

uint64_t cache_datastream_Seek(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = 2153783303;
  if (a1)
  {
    critsec_Enter(*(_QWORD **)(a1[1] + 16));
    v9 = a1[1];
    v10 = *(_QWORD *)(v9 + 24);
    if (!*(_QWORD *)(v9 + 64))
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
LABEL_17:
      v4 = v11;
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1[6] + 40))
      v11 = 0;
    else
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
    switch((_DWORD)a3)
    {
      case 2:
        v12 = a1[5];
        break;
      case 1:
        if ((_DWORD)a4 == 1)
        {
          v12 = a1[4] + a2;
        }
        else
        {
          if ((_DWORD)a4 != -1)
            goto LABEL_18;
          v12 = a1[4] - a2;
        }
        break;
      case 0:
        a1[4] = a2;
        goto LABEL_17;
      default:
LABEL_18:
        critsec_Leave(*(_QWORD **)(a1[1] + 16));
        return v4;
    }
    a1[4] = v12;
    goto LABEL_17;
  }
  return v4;
}

uint64_t cache_datastream_GetSize(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16));
  v2 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 32))(*(_QWORD *)(a1 + 24));
  critsec_Leave(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 16));
  return v2;
}

uint64_t cache_datastream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (!a4)
    return 0;
  critsec_Enter(*(_QWORD **)(*(_QWORD *)(a4 + 8) + 16));
  v8 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 48))(a1, a2, a3, *(_QWORD *)(a4 + 24));
  critsec_Leave(*(_QWORD **)(*(_QWORD *)(a4 + 8) + 16));
  return v8;
}

uint64_t cache_datastream_DataOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t *v14;

  v4 = 2153783303;
  if (a1 && a4)
  {
    v9 = a1[3].i64[0];
    v10 = *(_QWORD *)(v9 + 24);
    v11 = (int8x16_t *)heap_Calloc(*(_QWORD **)(v9 + 8), 1, 32);
    v12 = (uint64_t)v11;
    if (v11)
    {
      v13 = a1[3];
      *v11 = vextq_s8(v13, v13, 8uLL);
      v11[1].i64[1] = *(_QWORD *)(v13.i64[0] + 8);
      v11[1].i64[0] = 0;
      v14 = v11 + 1;
      v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int8x16_t *))(v10 + 80))(a1[2].i64[1], a2, a3, v11 + 1);
      if (!v14->i64[0])
      {
        heap_Free(*(_QWORD **)(a1[3].i64[0] + 8), v12);
        v12 = 0;
      }
    }
    else
    {
      v4 = 2153783306;
    }
    *a4 = v12;
  }
  return v4;
}

uint64_t cache_datastream_DataClose(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 2153783303;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 96))(*(_QWORD *)(a1 + 16));
  heap_Free(*(_QWORD **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a3 && a4)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 104))(*(_QWORD *)(a1 + 16));
  else
    return 2153783303;
}

uint64_t cache_datastream_DataUnmap(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 112))(*(_QWORD *)(a1 + 16));
  else
    return 2153783303;
}

uint64_t cache_datastream_DataFreeze(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 120))(*(_QWORD *)(a1 + 16));
  else
    return 2153783303;
}

uint64_t cache_datastream_DynModOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;

  v5 = 2153783303;
  if (a1 && a5)
  {
    v11 = a1[3].i64[0];
    v12 = *(_QWORD *)(v11 + 24);
    v13 = (int8x16_t *)heap_Calloc(*(_QWORD **)(v11 + 8), 1, 32);
    v14 = (uint64_t)v13;
    if (v13)
    {
      v15 = a1[3];
      *v13 = vextq_s8(v15, v15, 8uLL);
      v13[1].i64[1] = *(_QWORD *)(v15.i64[0] + 8);
      v13[1].i64[0] = 0;
      v16 = v13 + 1;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *))(v12 + 176))(a1[2].i64[1], a2, a3, a4, v13 + 1);
      if (!v16->i64[0])
      {
        heap_Free(*(_QWORD **)(a1[3].i64[0] + 8), v14);
        v14 = 0;
      }
    }
    else
    {
      v5 = 2153783306;
    }
    *a5 = v14;
  }
  return v5;
}

uint64_t cache_datastream_DynModClose(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 2153783303;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 184))(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  heap_Free(*(_QWORD **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DynModObjLoad(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 192))(*(_QWORD *)(a1 + 16));
  else
    return 2153783303;
}

uint64_t cache_datastream_DynModObjUnload()
{
  return 0;
}

uint64_t AddCacheData(_QWORD *a1, unsigned int a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 64);
  if (!v5)
    return a2;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_DWORD *)(a1[6] + 16);
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *(_QWORD **)(v10 + 8);
  *(_QWORD *)(v5 + 8) = v11;
  *v11 = 0;
  *(_DWORD *)(v10 + 16) = v9;
  v13 = a1 + 3;
  v12 = a1[3];
  *(_QWORD *)(v10 + 32) = v13[1];
  if (((*(uint64_t (**)(uint64_t))(v8 + 24))(v12) & 0x80000000) != 0
    || (*(unsigned int (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(v10 + 24), 1, *(unsigned int *)(v5 + 44), a1[3]) < a2)
  {
    return 0;
  }
  v14 = a2;
  memcpy(a3, *(const void **)(v10 + 24), a2);
  a1[4] += a2;
  v15 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v15 + 8) = v10;
  *(_QWORD *)v10 = v15;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v5 + 16) = v10;
  return v14;
}

uint64_t osspi_cb_cache_ClassOpen(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v6;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD **v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v6 = 2153783303;
  if (a4 && a6)
  {
    v13 = (uint64_t *)heap_Calloc(a1, 1, 96);
    *a6 = v13;
    if (!v13)
      return 2153783306;
    *v13 = (uint64_t)a1;
    (*a6)[1] = a2;
    (*a6)[10] = 0;
    (*a6)[11] = 0;
    (*a6)[2] = heap_Calloc(a1, 1, 224);
    v14 = *a6;
    v15 = (_QWORD *)(*a6)[2];
    if (v15)
    {
      *v15 = cache_datastream_Open;
      *(_QWORD *)((*a6)[2] + 8) = cache_datastream_Close;
      *(_QWORD *)((*a6)[2] + 16) = cache_datastream_Read;
      *(_QWORD *)((*a6)[2] + 24) = cache_datastream_Seek;
      *(_QWORD *)((*a6)[2] + 32) = cache_datastream_GetSize;
      *(_QWORD *)((*a6)[2] + 48) = cache_datastream_Write;
      if (*(_QWORD *)(a4 + 80))
      {
        *(_QWORD *)((*a6)[2] + 80) = cache_datastream_DataOpen;
        *(_QWORD *)((*a6)[2] + 96) = cache_datastream_DataClose;
        *(_QWORD *)((*a6)[2] + 104) = cache_datastream_DataMap;
        *(_QWORD *)((*a6)[2] + 112) = cache_datastream_DataUnmap;
        *(_QWORD *)((*a6)[2] + 120) = cache_datastream_DataFreeze;
      }
      if (*(_QWORD *)(a4 + 176))
      {
        *(_QWORD *)((*a6)[2] + 176) = cache_datastream_DynModOpen;
        *(_QWORD *)((*a6)[2] + 184) = cache_datastream_DynModClose;
        *(_QWORD *)((*a6)[2] + 192) = cache_datastream_DynModObjLoad;
        *(_QWORD *)((*a6)[2] + 200) = cache_datastream_DynModObjUnload;
      }
      (*a6)[4] = a4;
      (*a6)[5] = a5;
      v16 = cache_ClassOpen(a1, a3, a4, a5, &v22);
      if ((v16 & 0x80000000) != 0)
      {
        v6 = v16;
      }
      else
      {
        v17 = v22;
        (*a6)[7] = v22;
        v6 = cache_ObjOpen(v17, 0x10u, 0x200u, 0x100u, &v21);
        if ((v6 & 0x80000000) == 0)
        {
          (*a6)[6] = v21;
          (*a6)[3] = (uint64_t)*a6;
          return v6;
        }
      }
      v14 = *a6;
      if (!*a6)
        return v6;
    }
    else
    {
      v6 = 2153783306;
    }
    v18 = (_QWORD *)v14[6];
    if (v18)
    {
      cache_ObjClose(v18);
      v14 = *a6;
    }
    v19 = (_QWORD **)v14[7];
    if (v19)
    {
      cache_ClassClose(v19);
      v14 = *a6;
    }
    if (v14[2])
    {
      heap_Free(a1, v14[2]);
      v14 = *a6;
    }
    heap_Free(a1, (uint64_t)v14);
    *a6 = 0;
  }
  return v6;
}

uint64_t osspi_cb_cache_SetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    return cache_ObjSetLog(*(_QWORD *)(a1 + 48), a2, a3);
  else
    return 2153783303;
}

uint64_t osspi_cb_cache_ClassClose(_QWORD **a1)
{
  if (!a1)
    return 2153783303;
  cache_ObjClose(a1[6]);
  a1[6] = 0;
  cache_ClassClose((_QWORD **)a1[7]);
  a1[7] = 0;
  heap_Free(*a1, (uint64_t)a1[2]);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a1 + 2);
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t osspi_DynModOpen(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v11;

  v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (*(_QWORD *)(a1[2] + 176))
    {
      v11 = (_QWORD *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        *v11 = a1;
        *(_QWORD *)(*a5 + 8) = a2;
        v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a1[2] + 176))(a1[3], a1[1], a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t osspi_DynModClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD);

  v1 = 2153783297;
  if (!a1)
    return 2153783303;
  v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 184);
  if (v3)
  {
    v1 = v3(*(_QWORD *)(a1 + 16));
    if ((v1 & 0x80000000) == 0)
      heap_Free(*(_QWORD **)(a1 + 8), a1);
  }
  return v1;
}

uint64_t osspi_DynModObjLoad(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v5)(_QWORD);

  result = 2153783303;
  if (a1 && a2 && a3)
  {
    v5 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 192);
    if (v5)
      return v5(a1[2]);
    else
      return 2153783297;
  }
  return result;
}

uint64_t osspi_DynModObjUnload(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  v2 = 2153783303;
  if (a1 && a2)
  {
    v3 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 200);
    if (v3)
      return v3(a1[2]);
    return 2153783297;
  }
  return v2;
}

uint64_t osspi_DataOpen(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  safeh_GetNullHandle();
  return osspi_DataOpenEx(a1, a2, v8, v9, v10, a3, a4);
}

uint64_t osspi_DataOpenEx(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t);

  v7 = 2153783303;
  if (!a6 || !a1 || !a2 || !a7)
    return v7;
  v12 = (_QWORD *)heap_Calloc(a2, 1, 56);
  *a7 = (uint64_t)v12;
  if (!v12)
    return 2153783306;
  *v12 = a1;
  *(_QWORD *)(*a7 + 8) = a2;
  v13 = a1[2];
  v14 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v13 + 80);
  if (v14)
  {
    v7 = v14(a1[3], a1[1], a6, *a7 + 24);
    if ((v7 & 0x1FFF) != 1)
      goto LABEL_10;
    v13 = a1[2];
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, uint64_t))v13)(a1[3], a1[1], a6, "rb", *a7 + 32);
LABEL_10:
  if ((v7 & 0x80000000) != 0)
  {
    heap_Free(a2, *a7);
    *a7 = 0;
  }
  return v7;
}

uint64_t osspi_DataClose(uint64_t a1)
{
  uint64_t (**v2)(void);
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v2 = (uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 96);
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (v4)
        heap_Free(*(_QWORD **)(a1 + 8), v4);
      if (!*(_QWORD *)(a1 + 32))
      {
        v3 = 0;
LABEL_12:
        heap_Free(*(_QWORD **)(a1 + 8), a1);
        return v3;
      }
      v2 = (uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
    }
    v3 = (*v2)();
    if ((v3 & 0x80000000) != 0)
      return v3;
    goto LABEL_12;
  }
  return 2153783303;
}

uint64_t osspi_DataReplace(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t (*v5)(_QWORD, _QWORD);

  result = 2153783303;
  if (a1 && a2 && a3)
  {
    v5 = *(uint64_t (**)(_QWORD, _QWORD))(a1[2] + 128);
    if (v5)
      return v5(a1[3], a1[1]);
    else
      return 2153783297;
  }
  return result;
}

uint64_t osspi_DataMap(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = 2153783303;
  if (a1 && a3 && a4)
  {
    if (*(_DWORD *)(a1 + 16))
      return 2153783313;
    *a4 = 0;
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v16 = *a3;
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD *))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 104))(v9, a2, &v16, a4);
      *a3 = v16;
      v4 = v10;
      if ((v10 & 0x80000000) != 0)
        return v4;
      goto LABEL_8;
    }
    v4 = 2153783300;
    if (!*a3)
    {
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32))(*(_QWORD *)(a1 + 32));
      *a3 = v12;
      if (v12 <= a2)
        return v4;
      *a3 = v12 - a2;
    }
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24))(*(_QWORD *)(a1 + 32), a2, 0, 1);
    if ((v10 & 0x80000000) != 0)
      return v10;
    v13 = *a3;
    if (*(_DWORD *)(a1 + 48) >= v13)
    {
      v14 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v14 = heap_Realloc(*(uint64_t **)(a1 + 8), *(_QWORD *)(a1 + 40), v13);
      if (!v14)
        return 2153783306;
      *(_QWORD *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 48) = *a3;
      v13 = *a3;
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16))(v14, 1, v13, *(_QWORD *)(a1 + 32));
    if (v15 + 1 >= 2)
    {
      *a3 = v15;
      *a4 = *(_QWORD *)(a1 + 40);
LABEL_8:
      *(_DWORD *)(a1 + 16) = 1;
      return v10;
    }
  }
  return v4;
}

uint64_t osspi_DataUnmap(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 2153783303;
  if (a1 && a2)
  {
    if (!*(_DWORD *)(a1 + 16))
      return 2153783313;
    if (*(_QWORD *)(a1 + 24))
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 112))();
      if ((result & 0x80000000) != 0)
        return result;
    }
    else if (*(_DWORD *)(a1 + 48) < 0x401u)
    {
      result = 0;
    }
    else
    {
      heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 40));
      result = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t osspi_DataFreeze(_QWORD *a1)
{
  uint64_t (*v2)(void);
  uint64_t result;

  if (!a1)
    return 2153783303;
  if (a1[3])
  {
    v2 = *(uint64_t (**)(void))(*(_QWORD *)(*a1 + 16) + 120);
    if (v2)
      return v2();
    else
      return 0;
  }
  else
  {
    result = a1[4];
    if (result)
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(*a1 + 16) + 8))();
      a1[4] = 0;
    }
  }
  return result;
}

uint64_t osspi_FindOpen(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  _QWORD *v13;

  v6 = 2153783303;
  if (a5 && a3 && a1 && a2 && a6)
  {
    if (*(_QWORD *)(a1[2] + 152))
    {
      v13 = (_QWORD *)heap_Calloc(a2, 1, 24);
      *a6 = (uint64_t)v13;
      if (v13)
      {
        *v13 = a1;
        *(_QWORD *)(*a6 + 8) = a2;
        v6 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1[2] + 152))(a1[3], a1[1], a3, a4, a5, *a6 + 16);
        if ((v6 & 0x80000000) != 0)
        {
          heap_Free(a2, *a6);
          *a6 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v6;
}

uint64_t osspi_FindNext(_QWORD *a1, uint64_t a2)
{
  if (a1 && a2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1 + 16) + 160))(a1[2]);
  else
    return 2153783303;
}

uint64_t osspi_FindClose(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 2153783303;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
  if ((v2 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(a1 + 8), a1);
  return v2;
}

uint64_t osspi_time(uint64_t result, uint64_t *a2)
{
  uint64_t (*v3)(_QWORD, uint64_t *);
  void (*v4)(_QWORD, uint64_t *);
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = 0;
  if (!result)
  {
LABEL_7:
    if (!a2)
      return result;
    goto LABEL_8;
  }
  v3 = *(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)(result + 16) + 136);
  if (v3)
  {
    result = v3(*(_QWORD *)(result + 24), &v7);
    if (!a2)
      return result;
    goto LABEL_8;
  }
  v4 = *(void (**)(_QWORD, uint64_t *))(result + 88);
  if (v4)
  {
    v6 = 0;
    v5 = 0;
    v4(*(_QWORD *)(result + 80), &v5);
    result = v5;
    goto LABEL_7;
  }
  result = 0;
  if (!a2)
    return result;
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t osspi_ctime(_QWORD *a1, _QWORD *a2, int a3, char *a4)
{
  uint64_t result;
  uint64_t (*v6)(_QWORD);

  result = 2153783303;
  if (a3 && a1 && a2 && a4)
  {
    v6 = *(uint64_t (**)(_QWORD))(a1[2] + 144);
    if (v6)
    {
      return v6(a1[3]);
    }
    else if (*a2)
    {
      result = 2153783297;
      if (a1[11])
      {
        LH_itoa(*a2, a4, 0xAu);
        return 0;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_ClcDataOpen(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[2];
  int v5;

  v5 = 0;
  v4[0] = xmmword_1EA93C158;
  v4[1] = *(_OWORD *)off_1EA93C168;
  result = 2153783303;
  if (a1)
  {
    if (a2)
      return clcarchive_Parse(a2, v4, a1, &v5, 0);
  }
  return result;
}

size_t osspi_ClcDataRead(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const void *v7;
  int v8;
  const void *v10;
  size_t v11;

  v6 = *(_QWORD *)(a4 + 24);
  if (!v6)
    return (*(unsigned int (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)a4 + 16) + 16))(a1, a2, a3, *(_QWORD *)(a4 + 32));
  v10 = 0;
  v11 = a3 * a2;
  if (((*(uint64_t (**)(uint64_t, _QWORD, size_t *, const void **))(*(_QWORD *)(*(_QWORD *)a4 + 16) + 104))(v6, *(unsigned int *)(a4 + 52), &v11, &v10) & 0x80000000) != 0)return 0;
  v7 = v10;
  v8 = v11;
  memcpy(a1, v10, v11);
  *(_DWORD *)(a4 + 52) += v8;
  if ((*(int (**)(_QWORD, const void *))(*(_QWORD *)(*(_QWORD *)a4 + 16) + 112))(*(_QWORD *)(a4 + 24), v7) >= 0)return v11;
  else
    return 0;
}

uint64_t osspi_ClcDataSeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_QWORD *)(a1 + 24))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24))(*(_QWORD *)(a1 + 32), a2, a3, 1);
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t osspi_ClcDataError()
{
  return 0;
}

uint64_t osspi_ClcDataFinished()
{
  return 0;
}

uint64_t osspi_ClcDataClose(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (a2)
    v2 = a1 == 0;
  else
    v2 = 1;
  if (v2)
    return 2153783303;
  else
    return 0;
}

uint64_t safeh_HandleCheck(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v4;

  if (a1)
    v4 = 0;
  else
    v4 = -2123341816;
  if (!a4)
    v4 = 0;
  if (a2 == a3)
    return v4;
  else
    return 2171625480;
}

BOOL safeh_HandlesEqual(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t safeh_GetNullHandle()
{
  return 0;
}

_WORD *LH_wcscpy(_WORD *result, unsigned __int16 *a2)
{
  int v2;
  _WORD *v3;
  unsigned __int16 *v4;
  int v5;

  v2 = *a2;
  *result = v2;
  if (v2)
  {
    v3 = result + 1;
    v4 = a2 + 1;
    do
    {
      v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t LH_wcschr(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;

  v2 = a1 - 2;
  do
  {
    v4 = *(unsigned __int16 *)(v2 + 2);
    v2 += 2;
    v3 = v4;
    if (v4)
      v5 = v3 == a2;
    else
      v5 = 1;
  }
  while (!v5);
  if (v3 == a2)
    return v2;
  else
    return 0;
}

uint64_t LH_wcscmp(_WORD *a1, unsigned __int16 *a2)
{
  int v2;
  unsigned __int16 *v3;
  int v4;

  v2 = (unsigned __int16)*a1;
  if (*a1)
  {
    v3 = a1 + 1;
    do
    {
      if (v2 != *a2)
        break;
      ++a2;
      v4 = *v3++;
      v2 = v4;
    }
    while (v4);
  }
  return v2 - *a2;
}

uint64_t LH_wcslen(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = 0;
  do
  {
    v2 = *(unsigned __int16 *)(a1 + v1);
    v1 += 2;
  }
  while (v2);
  return (v1 >> 1) - 1;
}

uint64_t LH_wcsncpy(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  size_t v5;
  _WORD *i;
  int v7;

  if (a3)
  {
    v5 = 2 * a3 - 2;
    for (i = (_WORD *)(a1 + 2); ; ++i)
    {
      v7 = *a2;
      *(i - 1) = v7;
      if (!v7)
        break;
      ++a2;
      v5 -= 2;
      if (!--a3)
        return a1;
    }
    if (a3 != 1)
      bzero(i, v5);
  }
  return a1;
}

uint64_t ssftstring_ObjOpen(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v2 = 2319458311;
  if (a2)
  {
    v5 = (_QWORD *)heap_Calloc(a1, 1, 24);
    *a2 = v5;
    if (v5)
    {
      v2 = 0;
      *v5 = a1;
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_ObjClone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = 2319458311;
  if (a1 && a2)
  {
    v5 = (_QWORD *)heap_Calloc(*(_QWORD **)a1, 1, 24);
    *a2 = (uint64_t)v5;
    if (v5)
    {
      *v5 = *(_QWORD *)a1;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = v6 != 0;
      v8 = v6 - 1;
      if (v7)
        v9 = v8;
      else
        v9 = 0;
      v10 = ssftstring_Reserve(*a2, v9);
      if ((v10 & 0x80000000) != 0)
      {
        v2 = v10;
        heap_Free(*(_QWORD **)a1, *a2);
        *a2 = 0;
      }
      else
      {
        strcpy(*(char **)(*a2 + 16), *(const char **)(a1 + 16));
        v2 = 0;
        *(_DWORD *)(*a2 + 12) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_Reserve(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _BYTE *v7;

  v2 = 2319458314;
  if (!a1)
    return 2319458311;
  v4 = (a2 + 1);
  if (*(_DWORD *)(a1 + 8) >= v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t **)a1;
  if (v5)
  {
    v7 = (_BYTE *)heap_Realloc(v6, v5, v4);
    if (!v7)
      return v2;
    goto LABEL_10;
  }
  v7 = (_BYTE *)heap_Alloc((uint64_t)v6, v4);
  if (v7)
  {
    *v7 = 0;
LABEL_10:
    v2 = 0;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return v2;
}

uint64_t ssftstring_AssignCStr(uint64_t a1, char *__s)
{
  int v4;
  uint64_t result;
  char *v6;

  if (__s)
  {
    v4 = strlen(__s);
    if (a1)
      goto LABEL_3;
    return 2319458311;
  }
  v4 = 0;
  if (!a1)
    return 2319458311;
LABEL_3:
  result = ssftstring_Reserve(a1, v4);
  if ((result & 0x80000000) == 0)
  {
    v6 = *(char **)(a1 + 16);
    if (__s)
    {
      strcpy(v6, __s);
    }
    else
    {
      v4 = 0;
      *v6 = 0;
    }
    result = 0;
    *(_DWORD *)(a1 + 12) = v4;
  }
  return result;
}

uint64_t ssftstring_ObjClose(_QWORD **a1)
{
  uint64_t v2;

  if (!a1)
    return 2319458311;
  v2 = (uint64_t)a1[2];
  if (v2)
    heap_Free(*a1, v2);
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t ssftstring_CStr(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t ssftstring_CStrDetach(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 16);
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t ssftstring_Size(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t ssftstring_Assign(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  char *v6;
  int v7;

  result = 2319458311;
  if (a1)
  {
    if (a2)
    {
      result = ssftstring_Reserve(a1, *(_DWORD *)(a2 + 12));
      if ((result & 0x80000000) == 0)
      {
        v5 = *(const char **)(a2 + 16);
        v6 = *(char **)(a1 + 16);
        if (v5)
        {
          strcpy(v6, v5);
          v7 = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v7 = 0;
          *v6 = 0;
        }
        result = 0;
        *(_DWORD *)(a1 + 12) = v7;
      }
    }
  }
  return result;
}

uint64_t ssftstring_AppendChar(uint64_t a1, char a2)
{
  uint64_t result;
  unsigned int v5;

  if (!a1)
    return 2319458311;
  result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + 1);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 12)) = a2;
    v5 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v5;
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + v5) = 0;
  }
  return result;
}

uint64_t ssftstring_AppendCStr(uint64_t a1, char *__s)
{
  unsigned int v4;

  if (!a1 || !__s)
    return 2319458311;
  v4 = strlen(__s);
  return ssftstring_AppendCStrN(a1, __s, v4);
}

uint64_t ssftstring_AppendCStrN(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;

  result = 2319458311;
  if (a1 && a2)
  {
    result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + a3);
    if ((result & 0x80000000) == 0)
    {
      strncpy((char *)(*(_QWORD *)(a1 + 16) + *(unsigned int *)(a1 + 12)), a2, a3);
      result = 0;
      v7 = *(_DWORD *)(a1 + 12) + a3;
      *(_DWORD *)(a1 + 12) = v7;
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + v7) = 0;
    }
  }
  return result;
}

uint64_t ssftstring_Clear(uint64_t a1)
{
  _BYTE *v2;
  uint64_t result;

  if (!a1)
    return 2319458311;
  v2 = *(_BYTE **)(a1 + 16);
  result = 0;
  if (v2)
  {
    *v2 = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t ssftstring_ReplaceAllCStrByCStr(uint64_t a1, char *__s2, char *a3)
{
  uint64_t v3;
  char *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t appended;
  int v15[2];

  v3 = 2319458311;
  *(_QWORD *)v15 = 0;
  if (!a1 || !__s2 || !*__s2)
    return v3;
  v6 = *(char **)(a1 + 16);
  if (!v6 || (v8 = strstr(*(char **)(a1 + 16), __s2)) == 0)
  {
    v3 = 0;
LABEL_17:
    if (*(_QWORD *)v15)
      ssftstring_ObjClose(*(_QWORD ***)v15);
    return v3;
  }
  v9 = v8;
  v10 = ssftstring_ObjClone(a1, (uint64_t *)v15);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
  {
    v12 = *(_BYTE **)(*(_QWORD *)v15 + 16);
    if (v12)
    {
      *v12 = 0;
      *(_DWORD *)(v11 + 12) = 0;
    }
    while (1)
    {
      appended = ssftstring_AppendCStrN(*(uint64_t *)v15, v6, (int)v9 - (int)v6);
      if ((appended & 0x80000000) != 0)
        break;
      appended = ssftstring_AppendCStr(*(uint64_t *)v15, a3);
      if ((appended & 0x80000000) != 0)
        break;
      v6 = &v9[strlen(__s2)];
      v9 = strstr(v6, __s2);
      if (!v9)
      {
        appended = ssftstring_AppendCStr(*(uint64_t *)v15, v6);
        if ((appended & 0x80000000) == 0)
          appended = ssftstring_Assign(a1, *(uint64_t *)v15);
        break;
      }
    }
    v3 = appended;
    goto LABEL_17;
  }
  return v3;
}

uint64_t ssftstring_ReplaceAllBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
    return ssftstring_ReplaceAllCStrByCStr(a1, *(char **)(a2 + 16), *(char **)(a3 + 16));
  else
    return 2319458311;
}

uint64_t vector_ObjOpen(_QWORD *a1, __int128 *a2, __int16 a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v8 = *((_QWORD *)a2 + 2);
  result = 0;
  if (*((_QWORD *)a2 + 1))
  {
    if (!a4 || !v8)
      return result;
LABEL_7:
    result = heap_Calloc(a1, 1, 64);
    *a4 = result;
    if (result)
    {
      *(_QWORD *)result = 0;
      v10 = *a4;
      *(_QWORD *)(v10 + 32) = 0;
      v11 = *a2;
      *(_QWORD *)(v10 + 24) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v10 + 8) = v11;
      v12 = *a4;
      *(_WORD *)(v12 + 40) = a3;
      *(_QWORD *)(v12 + 48) = a1;
      *(_DWORD *)(*a4 + 56) = 0;
      return 1;
    }
    return result;
  }
  if (a4 && !v8)
    goto LABEL_7;
  return result;
}

uint64_t vector_ObjClone(__int128 *a1, uint64_t **a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  void *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v14;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      result = heap_Calloc(*((_QWORD **)a1 + 6), 1, 64);
      *a2 = (uint64_t *)result;
      if (result)
      {
        v5 = *a1;
        v6 = a1[1];
        v7 = a1[3];
        *(_OWORD *)(result + 32) = a1[2];
        *(_OWORD *)(result + 48) = v7;
        *(_OWORD *)result = v5;
        *(_OWORD *)(result + 16) = v6;
        **a2 = heap_Alloc((*a2)[6], *((_DWORD *)*a2 + 8) * *((unsigned __int16 *)*a2 + 4));
        v8 = *a2;
        v9 = (void *)**a2;
        if (!v9)
        {
LABEL_24:
          heap_Free((_QWORD *)v8[6], (uint64_t)v8);
          result = 0;
          *a2 = 0;
          return result;
        }
        memcpy(v9, *(const void **)a1, *((_DWORD *)v8 + 9) * *((unsigned __int16 *)v8 + 4));
        if (!(*a2)[2])
          return 1;
        v10 = 0;
        v11 = 0;
        result = 1;
        while ((_DWORD)result == 1)
        {
          if (v10 >= *((_DWORD *)*a2 + 9))
            return 1;
          result = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))(*a2)[2])(*(_QWORD *)a1 + v10 * *((unsigned __int16 *)a1 + 4), (*a2)[6], **a2 + v10 * *((unsigned __int16 *)*a2 + 4));
          if ((_DWORD)result == 1)
            ++v11;
          ++v10;
        }
        if (!(_DWORD)result)
        {
          v8 = *a2;
          if (!*a2)
            return 0;
          v12 = *v8;
          if (*v8)
          {
            if (v8[3])
              v13 = v11 == 0;
            else
              v13 = 1;
            if (!v13)
            {
              v14 = 0;
              do
              {
                ((void (*)(uint64_t, uint64_t))(*a2)[3])(**a2 + v14 * *((unsigned __int16 *)*a2 + 4), (*a2)[6]);
                ++v14;
              }
              while (v11 != v14);
              v8 = *a2;
              v12 = **a2;
            }
            heap_Free((_QWORD *)v8[6], v12);
            v8 = *a2;
          }
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

uint64_t vector_ObjClose(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      if (*(_QWORD *)(result + 24) && *(_DWORD *)(result + 36))
      {
        v3 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD))(v1 + 24))(*(_QWORD *)v1 + v3 * *(unsigned __int16 *)(v1 + 8), *(_QWORD *)(v1 + 48));
          ++v3;
        }
        while (v3 < *(_DWORD *)(v1 + 36));
        v2 = *(_QWORD *)v1;
      }
      heap_Free(*(_QWORD **)(v1 + 48), v2);
    }
    heap_Free(*(_QWORD **)(v1 + 48), v1);
    return 1;
  }
  return result;
}

uint64_t vector_AddGet(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;

  result = 0;
  if (a1 && a2)
  {
    v5 = *(_DWORD *)(a1 + 36);
    v6 = v5 + 1;
    v7 = *(_QWORD *)a1;
    if (*(_DWORD *)(a1 + 32) < v5 + 1)
    {
      v8 = *(unsigned __int16 *)(a1 + 40) + *(unsigned __int16 *)(a1 + 40) * (v5 / *(unsigned __int16 *)(a1 + 40));
      v9 = *(uint64_t **)(a1 + 48);
      v10 = v8 * *(unsigned __int16 *)(a1 + 8);
      if (v7)
      {
        result = heap_Realloc(v9, v7, v10);
        if (!result)
          return result;
        v7 = result;
        *(_QWORD *)a1 = result;
      }
      else
      {
        result = heap_Calloc(v9, 1, v10);
        v7 = result;
        *(_QWORD *)a1 = result;
        if (!result)
          return result;
      }
      *(_DWORD *)(a1 + 32) = v8;
      v5 = *(_DWORD *)(a1 + 36);
      v6 = v5 + 1;
    }
    *a2 = v7 + v5 * *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)(a1 + 36) = v6;
    return 1;
  }
  return result;
}

uint64_t vector_Add(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t (*v5)(const void *, _QWORD, void *);
  void *__dst;

  __dst = 0;
  result = vector_AddGet(a1, &__dst);
  if ((_DWORD)result)
  {
    memcpy(__dst, a2, *(unsigned __int16 *)(a1 + 8));
    if (*(_DWORD *)(a1 + 56))
      return 1;
    v5 = *(uint64_t (**)(const void *, _QWORD, void *))(a1 + 16);
    if (!v5)
      return 1;
    result = v5(a2, *(_QWORD *)(a1 + 48), __dst);
    if ((_DWORD)result)
      return 1;
    else
      --*(_DWORD *)(a1 + 36);
  }
  return result;
}

uint64_t vector_AddElemAt(uint64_t a1, unsigned int a2, const void *a3)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int (*v11)(const void *, _QWORD, void *);
  uint64_t v12;
  void *__dst;

  __dst = 0;
  result = vector_AddGet(a1, &__dst);
  if ((_DWORD)result)
  {
    v7 = *(_DWORD *)(a1 + 36);
    v8 = v7 - 1;
    if (v7 - 1 > a2)
    {
      v9 = *(_QWORD *)a1;
      v10 = *(unsigned __int16 *)(a1 + 8);
      __dst = (void *)(*(_QWORD *)a1 + v10 * a2);
      memmove((void *)(v9 + (a2 + 1) * v10), __dst, (v7 - (a2 + 1)) * v10);
      v8 = a2;
    }
    memcpy(__dst, a3, *(unsigned __int16 *)(a1 + 8));
    if (*(_DWORD *)(a1 + 56))
      return 1;
    v11 = *(unsigned int (**)(const void *, _QWORD, void *))(a1 + 16);
    if (!v11 || v11(a3, *(_QWORD *)(a1 + 48), __dst))
    {
      return 1;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      vector_Remove(a1, v8);
      result = 0;
      *(_QWORD *)(a1 + 24) = v12;
    }
  }
  return result;
}

uint64_t vector_Remove(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  void (*v5)(_QWORD, _QWORD);

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 36);
    if (v4 <= a2)
    {
      return 0;
    }
    else
    {
      if (!*(_DWORD *)(result + 56))
      {
        v5 = *(void (**)(_QWORD, _QWORD))(result + 24);
        if (v5)
        {
          v5(*(_QWORD *)result + *(unsigned __int16 *)(result + 8) * a2, *(_QWORD *)(result + 48));
          v4 = *(_DWORD *)(v3 + 36);
        }
      }
      if (v4 + ~a2)
      {
        memmove((void *)(*(_QWORD *)v3 + *(unsigned __int16 *)(v3 + 8) * a2), (const void *)(*(_QWORD *)v3 + *(unsigned __int16 *)(v3 + 8) + *(unsigned __int16 *)(v3 + 8) * a2), (v4 + ~a2) * *(unsigned __int16 *)(v3 + 8));
        v4 = *(_DWORD *)(v3 + 36);
      }
      *(_DWORD *)(v3 + 36) = v4 - 1;
      return 1;
    }
  }
  return result;
}

uint64_t vector_RemoveAddress(uint64_t result, char *__dst)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  void (*v7)(char *, _QWORD);

  if (result)
  {
    v3 = result;
    result = 0;
    if (__dst)
    {
      v4 = *(unsigned __int16 *)(v3 + 8);
      v5 = *(_QWORD *)v3 + (*(_DWORD *)(v3 + 36) * v4);
      if (*(_QWORD *)v3 <= (unint64_t)__dst && v5 >= (unint64_t)__dst)
      {
        if (!*(_DWORD *)(v3 + 56))
        {
          v7 = *(void (**)(char *, _QWORD))(v3 + 24);
          if (v7)
          {
            v7(__dst, *(_QWORD *)(v3 + 48));
            v4 = *(unsigned __int16 *)(v3 + 8);
          }
        }
        memmove(__dst, &__dst[v4], (v5 - ((_DWORD)__dst + v4)));
        --*(_DWORD *)(v3 + 36);
        return 1;
      }
    }
  }
  return result;
}

uint64_t vector_Clear(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  if (result)
  {
    v1 = result;
    if (!*(_DWORD *)(result + 56) && *(_QWORD *)(result + 24) && *(_DWORD *)(result + 36))
    {
      v2 = 0;
      do
      {
        (*(void (**)(_QWORD, _QWORD))(v1 + 24))(*(_QWORD *)v1 + v2 * *(unsigned __int16 *)(v1 + 8), *(_QWORD *)(v1 + 48));
        ++v2;
      }
      while (v2 < *(_DWORD *)(v1 + 36));
    }
    *(_DWORD *)(v1 + 36) = 0;
    return 1;
  }
  return result;
}

uint64_t vector_GetSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 36);
  return result;
}

uint64_t vector_GetElemAt(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;

  result = 0;
  if (a1 && a3)
  {
    if (*(_DWORD *)(a1 + 36) <= a2)
    {
      return 0;
    }
    else
    {
      *a3 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) * a2;
      return 1;
    }
  }
  return result;
}

uint64_t vector_StackPop(uint64_t a1)
{
  int v1;

  if (a1 && (v1 = *(_DWORD *)(a1 + 36)) != 0)
    return vector_Remove(a1, v1 - 1);
  else
    return 0;
}

uint64_t vector_StackTop(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  int v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_DWORD *)(a1 + 36);
    if (v4)
    {
      *a2 = *(_QWORD *)a1 + (v4 - 1) * *(unsigned __int16 *)(a1 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double XmlPrologStateInit(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = prolog0;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(a1 + 16) = 0x100000000;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t prolog0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void *v7;

  result = 0;
  v7 = prolog1;
  switch(a2)
  {
    case 11:
      result = 55;
      goto LABEL_14;
    case 12:
      result = 1;
      goto LABEL_14;
    case 13:
      result = 56;
      goto LABEL_14;
    case 14:
      return result;
    case 15:
      goto LABEL_14;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_12;
      result = 3;
      v7 = doctype0;
      goto LABEL_14;
    default:
      if (a2 == 29)
      {
        result = 2;
      }
      else
      {
        if (a2 == 28 && !*(_DWORD *)(a1 + 20))
          return 59;
LABEL_12:
        result = 0xFFFFFFFFLL;
      }
      v7 = error;
LABEL_14:
      *(_QWORD *)a1 = v7;
      return result;
  }
}

uint64_t prolog1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 11:
      return 55;
    case 12:
      goto LABEL_5;
    case 13:
      return 56;
    case 14:
    case 15:
      return result;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_11;
      *(_QWORD *)a1 = doctype0;
      result = 3;
      break;
    default:
      if (a2 == 29)
      {
        *(_QWORD *)a1 = error;
        result = 2;
      }
      else
      {
LABEL_5:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
LABEL_11:
          *(_QWORD *)a1 = error;
          result = 0xFFFFFFFFLL;
        }
        else
        {
          result = 59;
        }
      }
      break;
  }
  return result;
}

uint64_t doctype0(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 3;
  result = 4;
  v4 = doctype1;
  if (a2 != 18 && a2 != 41)
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t error()
{
  return 0;
}

uint64_t doctype1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void *v7;

  if (a2 > 17)
  {
    if (a2 == 18)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        result = 3;
        v7 = doctype3;
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        result = 3;
        v7 = doctype2;
        goto LABEL_17;
      }
LABEL_16:
      result = 0xFFFFFFFFLL;
      v7 = error;
      goto LABEL_17;
    }
    if (a2 == 25)
    {
      result = 7;
      v7 = internalSubset;
      goto LABEL_17;
    }
LABEL_11:
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
    goto LABEL_16;
  }
  if (a2 == 15)
    return 3;
  if (a2 != 17)
    goto LABEL_11;
  result = 8;
  v7 = prolog2;
LABEL_17:
  *(_QWORD *)a1 = v7;
  return result;
}

void internalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  uint64_t v4;
  uint64_t v6;

  if ((int)name > 25)
  {
    if ((_DWORD)name == 26)
    {
      *(_QWORD *)ctx = doctype5;
    }
    else if ((_DWORD)name != 28)
    {
LABEL_17:
      *(_QWORD *)ctx = error;
    }
  }
  else
  {
    switch((int)name)
    {
      case 11:
      case 13:
      case 15:
        return;
      case 12:
      case 14:
        goto LABEL_17;
      case 16:
        v6 = v4;
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v4 + 48))(v4, &ExternalID[2 * *(int *)(v4 + 128)], SystemID, "ENTITY"))
        {
          *(_QWORD *)ctx = entity0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ATTLIST"))
        {
          *(_QWORD *)ctx = attlist0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ELEMENT"))
        {
          *(_QWORD *)ctx = element0;
          return;
        }
        if (!(*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "NOTATION"))goto LABEL_17;
        *(_QWORD *)ctx = notation0;
        break;
      default:
        if ((_DWORD)name != -4)
          goto LABEL_17;
        return;
    }
  }
}

uint64_t prolog2(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t result;

  HIDWORD(v3) = a2 - 11;
  LODWORD(v3) = a2 - 11;
  result = 0;
  switch((v3 >> 1))
  {
    case 0u:
      result = 55;
      break;
    case 1u:
      result = 56;
      break;
    case 2u:
      return result;
    case 9u:
      *(_QWORD *)a1 = error;
      result = 2;
      break;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(_QWORD *)a1 = error;
        result = 0xFFFFFFFFLL;
      }
      else
      {
        result = 59;
      }
      break;
  }
  return result;
}

uint64_t doctype3(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 3;
  if (a2 == 27)
  {
    result = 5;
    v4 = doctype4;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t doctype2(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 3;
  if (a2 == 27)
  {
    result = 6;
    v4 = doctype3;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity0(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  result = 11;
  if (a2 != 15)
  {
    if (a2 == 22)
    {
      v4 = entity1;
      goto LABEL_10;
    }
    if (a2 == 18)
    {
      result = 9;
      v4 = entity2;
LABEL_10:
      *(_QWORD *)a1 = v4;
      return result;
    }
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20))
      goto LABEL_10;
    return 59;
  }
  return result;
}

uint64_t attlist0(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 33;
  result = 34;
  v4 = attlist1;
  if (a2 != 18 && a2 != 41)
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t element0(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 39;
  result = 40;
  v4 = element1;
  if (a2 != 18 && a2 != 41)
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t notation0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t result;

  if ((_DWORD)a2 == 15)
    return 17;
  if ((_DWORD)a2 == 18)
  {
    v3 = notation1;
    result = a2;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v3 = error;
    if ((_DWORD)a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v3;
  return result;
}

uint64_t doctype5(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 3;
  if (a2 == 17)
  {
    result = 8;
    v4 = prolog2;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity1(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 11;
  if (a2 == 18)
  {
    result = 10;
    v4 = entity7;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, int);

  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        v9 = entity4;
LABEL_13:
        *(_QWORD *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        v9 = entity3;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20))
        return 59;
      break;
  }
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity7(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, int);

  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        v9 = entity9;
LABEL_13:
        *(_QWORD *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        v9 = entity8;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20))
        return 59;
      break;
  }
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity9(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 11;
  if (a2 == 27)
  {
    result = 13;
    v4 = entity10;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity8(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 11;
  if (a2 == 27)
  {
    result = 14;
    v4 = entity9;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t declClose(uint64_t a1, int a2)
{
  void *v3;

  if (a2 == 17)
  {
    if (*(_DWORD *)(a1 + 20))
      v3 = internalSubset;
    else
      v3 = externalSubset1;
    *(_QWORD *)a1 = v3;
    return *(unsigned int *)(a1 + 12);
  }
  if (a2 == 15)
    return *(unsigned int *)(a1 + 12);
  if (a2 == 28 && !*(_DWORD *)(a1 + 20))
    return 59;
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity10(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;

  if (a2 == 15)
    return 11;
  if (a2 == 17)
  {
    if (*(_DWORD *)(a1 + 20))
      v2 = internalSubset;
    else
      v2 = externalSubset1;
    v3 = 15;
    goto LABEL_11;
  }
  v3 = 0xFFFFFFFFLL;
  v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_11:
    *(_QWORD *)a1 = v2;
    return v3;
  }
  return 59;
}

void externalSubset1(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  int v4;

  if ((int)a2 > 25)
  {
    if ((_DWORD)a2 != 26)
    {
      if ((_DWORD)a2 != 34)
      {
        if ((_DWORD)a2 == 33)
        {
          *(_QWORD *)a1 = condSect0;
          return;
        }
        goto LABEL_14;
      }
      v4 = a1[4];
      if (v4)
      {
        a1[4] = v4 - 1;
        return;
      }
    }
LABEL_12:
    *(_QWORD *)a1 = error;
    return;
  }
  if ((_DWORD)a2 == -4)
  {
    if (!a1[4])
      return;
    goto LABEL_12;
  }
  if ((_DWORD)a2 != 15)
LABEL_14:
    internalSubset(a1, a2, a3, a4);
}

uint64_t condSect0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void *v10;

  if (a2 == 15)
    return 0;
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "INCLUDE"))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "IGNORE"))
    {
      result = 0;
      v10 = condSect2;
      goto LABEL_12;
    }
LABEL_11:
    result = 0xFFFFFFFFLL;
    v10 = error;
    goto LABEL_12;
  }
  result = 0;
  v10 = condSect1;
LABEL_12:
  *(_QWORD *)a1 = v10;
  return result;
}

uint64_t condSect1(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2 == 15)
    return 0;
  if (a2 == 25)
  {
    v2 = 0;
    *(_QWORD *)a1 = externalSubset1;
    ++*(_DWORD *)(a1 + 16);
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(_QWORD *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
  return v2;
}

uint64_t condSect2(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t (*v4)();

  if (a2 == 15)
    return 0;
  if (a2 == 25)
  {
    result = 58;
    v4 = externalSubset1;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity4(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 11;
  if (a2 == 27)
  {
    result = 13;
    v4 = entity5;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity3(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 11;
  if (a2 == 27)
  {
    result = 14;
    v4 = entity4;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t entity5(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t result;

  if (a2 == 15)
    return 11;
  if (a2 != 18)
  {
    if (a2 == 17)
    {
      v6 = internalSubset;
      if (!*(_DWORD *)(a1 + 20))
        v6 = externalSubset1;
      result = 15;
      goto LABEL_14;
    }
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
    goto LABEL_13;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NDATA"))
  {
LABEL_13:
    result = 0xFFFFFFFFLL;
    v6 = error;
    goto LABEL_14;
  }
  result = 11;
  v6 = entity6;
LABEL_14:
  *(_QWORD *)a1 = v6;
  return result;
}

uint64_t entity6(uint64_t a1, int a2)
{
  if (a2 == 15)
    return 11;
  if (a2 == 18)
  {
    *(_QWORD *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 11;
    return 16;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(_QWORD *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t attlist1(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;

  if (a2 > 17)
  {
    v3 = 22;
    v2 = attlist2;
    if (a2 == 18 || a2 == 41)
      goto LABEL_13;
  }
  else
  {
    if (a2 == 15)
      return 33;
    if (a2 == 17)
    {
      if (*(_DWORD *)(a1 + 20))
        v2 = internalSubset;
      else
        v2 = externalSubset1;
      v3 = 33;
      goto LABEL_13;
    }
  }
  v3 = 0xFFFFFFFFLL;
  v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_13:
    *(_QWORD *)a1 = v2;
    return v3;
  }
  return 59;
}

uint64_t attlist2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t (*v11)(uint64_t, int);

  switch(a2)
  {
    case 15:
      return 33;
    case 23:
      v11 = attlist3;
LABEL_14:
      *(_QWORD *)a1 = v11;
      return 33;
    case 18:
      for (i = 0; i != 8; ++i)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(a5 + 48))(a5, a3, a4, attlist2_types[i]))
        {
          *(_QWORD *)a1 = attlist8;
          return (i + 23);
        }
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NOTATION"))
        break;
      v11 = attlist5;
      goto LABEL_14;
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20))
    return 59;
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t attlist8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)();

  if (a2 == 15)
    return 33;
  if (a2 == 27)
  {
    result = 37;
    goto LABEL_8;
  }
  if (a2 != 20)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
    goto LABEL_16;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "IMPLIED"))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "REQUIRED"))
    {
      result = 36;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "FIXED"))
    {
      result = 33;
      v10 = (uint64_t (*)())attlist9;
      goto LABEL_17;
    }
LABEL_16:
    result = 0xFFFFFFFFLL;
    v10 = error;
    goto LABEL_17;
  }
  result = 35;
LABEL_8:
  v10 = attlist1;
LABEL_17:
  *(_QWORD *)a1 = v10;
  return result;
}

uint64_t attlist5(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  result = 33;
  if (a2 != 15)
  {
    if (a2 == 23)
    {
      v4 = attlist6;
LABEL_8:
      *(_QWORD *)a1 = v4;
      return result;
    }
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20))
      goto LABEL_8;
    return 59;
  }
  return result;
}

uint64_t attlist3(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  result = 31;
  v4 = attlist4;
  if ((a2 - 18) < 2)
  {
LABEL_7:
    *(_QWORD *)a1 = v4;
    return result;
  }
  if (a2 != 15)
  {
    if (a2 != 41)
    {
      result = 0xFFFFFFFFLL;
      v4 = error;
      if (a2 == 28 && !*(_DWORD *)(a1 + 20))
        return 59;
    }
    goto LABEL_7;
  }
  return 33;
}

uint64_t attlist9(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t (*v4)();

  if (a2 == 15)
    return 33;
  if (a2 == 27)
  {
    result = 38;
    v4 = attlist1;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t attlist6(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 33;
  if (a2 == 18)
  {
    result = 32;
    v4 = attlist7;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t attlist7(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t (*v4)();

  result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
      v4 = (uint64_t (*)())attlist8;
      goto LABEL_10;
    }
    if (a2 == 21)
    {
      v4 = attlist6;
LABEL_10:
      *(_QWORD *)a1 = v4;
      return result;
    }
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20))
      goto LABEL_10;
    return 59;
  }
  return result;
}

uint64_t attlist4(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t (*v4)();

  result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
      v4 = (uint64_t (*)())attlist8;
      goto LABEL_10;
    }
    if (a2 == 21)
    {
      v4 = attlist3;
LABEL_10:
      *(_QWORD *)a1 = v4;
      return result;
    }
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20))
      goto LABEL_10;
    return 59;
  }
  return result;
}

uint64_t element1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 23:
      *(_QWORD *)a1 = element2;
      *(_DWORD *)(a1 + 8) = 1;
      return 44;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "EMPTY"))
      {
        *(_QWORD *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 42;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "ANY"))
      {
        *(_QWORD *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 41;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20))
        return 59;
      break;
  }
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void *v7;

  result = 51;
  v7 = element7;
  switch(a2)
  {
    case 18:
      goto LABEL_14;
    case 19:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_6;
    case 20:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "PCDATA"))goto LABEL_13;
      result = 43;
      v7 = element3;
      goto LABEL_14;
    case 23:
      *(_DWORD *)(a1 + 8) = 2;
      result = 44;
      v7 = element6;
      goto LABEL_14;
    case 30:
      result = 53;
      goto LABEL_14;
    case 31:
      result = 52;
      goto LABEL_14;
    case 32:
      result = 54;
      goto LABEL_14;
    default:
      if (a2 == 15)
        return 39;
      if (a2 != 41)
      {
LABEL_6:
        if (a2 == 28 && !*(_DWORD *)(a1 + 20))
          return 59;
LABEL_13:
        result = 0xFFFFFFFFLL;
        v7 = error;
      }
LABEL_14:
      *(_QWORD *)a1 = v7;
      return result;
  }
}

uint64_t element3(uint64_t a1, int a2)
{
  if (a2 > 23)
  {
    if (a2 == 36)
    {
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    }
    if (a2 == 24)
    {
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 45;
    }
  }
  else
  {
    if (a2 == 15)
      return 39;
    if (a2 == 21)
    {
      *(_QWORD *)a1 = element4;
      return 39;
    }
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20))
    return 59;
  *(_QWORD *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element6(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 <= 22)
  {
    if (a2 == 15)
    {
      return 39;
    }
    else if (a2 == 18)
    {
LABEL_6:
      *(_QWORD *)a1 = element7;
      return 51;
    }
    else
    {
LABEL_8:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(_QWORD *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 23:
        ++*(_DWORD *)(a1 + 8);
        result = 44;
        break;
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_8;
      case 30:
        *(_QWORD *)a1 = element7;
        result = 53;
        break;
      case 31:
        *(_QWORD *)a1 = element7;
        result = 52;
        break;
      case 32:
        *(_QWORD *)a1 = element7;
        result = 54;
        break;
      default:
        if (a2 != 41)
          goto LABEL_8;
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t element7(uint64_t a1, int a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  if (a2 <= 34)
  {
    switch(a2)
    {
      case 15:
        return 39;
      case 21:
        *(_QWORD *)a1 = element6;
        return 49;
      case 24:
        v4 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
        if (!v4)
        {
          *(_QWORD *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        return 45;
      default:
LABEL_21:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
          *(_QWORD *)a1 = error;
          return 0xFFFFFFFFLL;
        }
        else
        {
          return 59;
        }
    }
  }
  else
  {
    switch(a2)
    {
      case '#':
        v2 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
        if (!v2)
        {
          *(_QWORD *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        result = 47;
        break;
      case '$':
        v5 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v5;
        if (!v5)
        {
          *(_QWORD *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        result = 46;
        break;
      case '%':
        v6 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v6;
        if (!v6)
        {
          *(_QWORD *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        result = 48;
        break;
      case '&':
        *(_QWORD *)a1 = element6;
        result = 50;
        break;
      default:
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t element4(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 39;
  result = 51;
  v4 = element5;
  if (a2 != 18 && a2 != 41)
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t element5(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 21:
      *(_QWORD *)a1 = element4;
      return 39;
    case 36:
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(_QWORD *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t notation1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  void *v10;

  if (a2 == 15)
    return 17;
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
    {
      result = 17;
      v10 = notation2;
      goto LABEL_12;
    }
LABEL_11:
    result = 0xFFFFFFFFLL;
    v10 = error;
    goto LABEL_12;
  }
  result = 17;
  v10 = notation3;
LABEL_12:
  *(_QWORD *)a1 = v10;
  return result;
}

uint64_t notation3(uint64_t a1, int a2)
{
  if (a2 == 15)
    return 17;
  if (a2 == 27)
  {
    *(_QWORD *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 17;
    return 19;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(_QWORD *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t notation2(uint64_t a1, int a2)
{
  uint64_t result;
  void *v4;

  if (a2 == 15)
    return 17;
  if (a2 == 27)
  {
    result = 21;
    v4 = notation4;
  }
  else
  {
    result = 0xFFFFFFFFLL;
    v4 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20))
      return 59;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t notation4(uint64_t a1, int a2)
{
  void *v3;

  switch(a2)
  {
    case 15:
      return 17;
    case 17:
      if (*(_DWORD *)(a1 + 20))
        v3 = internalSubset;
      else
        v3 = externalSubset1;
      *(_QWORD *)a1 = v3;
      return 20;
    case 27:
      *(_QWORD *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 17;
      return 19;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(_QWORD *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t doctype4(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;

  switch(a2)
  {
    case 15:
      return 3;
    case 25:
      v2 = 7;
      v3 = internalSubset;
      goto LABEL_10;
    case 17:
      v2 = 8;
      v3 = prolog2;
LABEL_10:
      *(_QWORD *)a1 = v3;
      return v2;
  }
  v2 = 0xFFFFFFFFLL;
  v3 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
    goto LABEL_10;
  return 59;
}

XML_Parser XML_ParserCreate_MM(const XML_Char *encoding, const XML_Memory_Handling_Suite *memsuite, const XML_Char *namespaceSeparator)
{
  return (XML_Parser)parserCreate((unsigned __int8 *)encoding, (uint64_t)memsuite, namespaceSeparator, 0);
}

uint64_t parserCreate(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 0;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 8))(*(_QWORD *)a2, 984);
  if (!v8)
    return v8;
  *(_QWORD *)(v8 + 24) = *(_QWORD *)a2;
  v9 = v8 + 24;
  v10 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 728) = 16;
  v11 = ((uint64_t (*)(void))v10)();
  *(_QWORD *)(v8 + 744) = v11;
  v12 = *(_QWORD *)(v8 + 24);
  if (!v11)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v12, v8);
    return 0;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v12, 1024);
  *(_QWORD *)(v8 + 96) = v13;
  if (!v13)
  {
LABEL_18:
    (*(void (**)(_QWORD, _QWORD))(v8 + 48))(*(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 744));
    (*(void (**)(_QWORD, uint64_t))(v8 + 48))(*(_QWORD *)(v8 + 24), v8);
    return 0;
  }
  *(_QWORD *)(v8 + 104) = v13 + 1024;
  v14 = a4;
  if (!a4)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(v8 + 32))(*(_QWORD *)(v8 + 24), 360);
    if (v14)
    {
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(_QWORD *)(v14 + 192) = 0;
      *(_QWORD *)(v14 + 200) = v9;
      *(_OWORD *)(v14 + 208) = 0u;
      *(_OWORD *)(v14 + 224) = 0u;
      *(_QWORD *)(v14 + 240) = 0;
      *(_QWORD *)(v14 + 248) = v9;
      *(_BYTE *)(v14 + 8) = 0;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_BYTE *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_QWORD *)(v14 + 64) = 0;
      *(_BYTE *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 72) = v9;
      *(_QWORD *)(v14 + 80) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      *(_QWORD *)(v14 + 104) = 0;
      *(_BYTE *)(v14 + 128) = 0;
      *(_QWORD *)(v14 + 112) = v9;
      *(_QWORD *)(v14 + 120) = 0;
      *(_QWORD *)(v14 + 136) = 0;
      *(_QWORD *)(v14 + 144) = 0;
      *(_QWORD *)(v14 + 152) = v9;
      *(_BYTE *)(v14 + 272) = 0;
      *(_QWORD *)(v14 + 264) = 0;
      *(_QWORD *)(v14 + 280) = 0;
      *(_QWORD *)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = v9;
      *(_QWORD *)(v14 + 304) = 0;
      *(_QWORD *)(v14 + 312) = 0;
      *(_BYTE *)(v14 + 320) = 0;
      *(_OWORD *)(v14 + 328) = 0u;
      *(_OWORD *)(v14 + 344) = 0u;
      *(_DWORD *)(v14 + 256) = 1;
      goto LABEL_8;
    }
    *(_QWORD *)(v8 + 680) = 0;
    (*(void (**)(_QWORD, _QWORD))(v8 + 48))(*(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 96));
    goto LABEL_18;
  }
LABEL_8:
  *(_QWORD *)(v8 + 680) = v14;
  *(_QWORD *)(v8 + 720) = 0;
  *(_QWORD *)(v8 + 704) = 0;
  *(_QWORD *)(v8 + 584) = 0;
  *(_DWORD *)(v8 + 896) = 0;
  *(_QWORD *)(v8 + 888) = 0;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 488) = 0;
  *(_BYTE *)(v8 + 900) = 33;
  *(_WORD *)(v8 + 464) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_QWORD *)(v8 + 824) = 0;
  *(_OWORD *)(v8 + 792) = 0u;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 752) = 0u;
  *(_BYTE *)(v8 + 768) = 0;
  *(_QWORD *)(v8 + 832) = v9;
  *(_QWORD *)(v8 + 872) = 0;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_QWORD *)(v8 + 880) = v9;
  parserInit(v8, a1);
  if (a1 && !*(_QWORD *)(v8 + 456))
  {
    if (a4)
      *(_QWORD *)(v8 + 680) = 0;
    XML_ParserFree((XML_Parser)v8);
    return 0;
  }
  if (a3)
  {
    *(_BYTE *)(v8 + 464) = 1;
    *(_QWORD *)(v8 + 448) = XmlGetUtf8InternalEncodingNS();
    *(_BYTE *)(v8 + 900) = *a3;
  }
  else
  {
    *(_QWORD *)(v8 + 448) = XmlGetUtf8InternalEncoding();
  }
  return v8;
}

XML_Bool XML_ParserReset(XML_Parser parser, const XML_Char *encoding)
{
  XML_Parser v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  if (parser)
  {
    v2 = parser;
    if (*((_QWORD *)parser + 113))
    {
      LOBYTE(parser) = 0;
      return parser;
    }
    v4 = (_QWORD *)*((_QWORD *)parser + 87);
    if (v4)
    {
      v5 = (_QWORD *)*((_QWORD *)parser + 88);
      do
      {
        v6 = v4;
        v4 = (_QWORD *)*v4;
        *v6 = v5;
        v7 = v6[10];
        if (v7)
        {
          v8 = *((_QWORD *)parser + 90);
          do
          {
            v9 = v7;
            v7 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v9 + 8) = v8;
            v8 = v9;
          }
          while (v7);
          *((_QWORD *)parser + 90) = v9;
        }
        v6[10] = 0;
        v5 = v6;
      }
      while (v4);
      *((_QWORD *)parser + 88) = v6;
    }
    v10 = *((_QWORD *)parser + 72);
    if (v10)
    {
      v11 = *((_QWORD *)parser + 73);
      do
      {
        v12 = v10;
        v10 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(v12 + 16) = v11;
        v11 = v12;
      }
      while (v10);
      *((_QWORD *)parser + 73) = v12;
    }
    v13 = *((_QWORD *)parser + 89);
    if (v13)
    {
      v14 = *((_QWORD *)parser + 90);
      do
      {
        v15 = v13;
        v13 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v15 + 8) = v14;
        v14 = v15;
      }
      while (v13);
      *((_QWORD *)parser + 90) = v15;
    }
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 59));
    v16 = (void (*)(_QWORD))*((_QWORD *)v2 + 62);
    if (v16)
      v16(*((_QWORD *)v2 + 60));
    v17 = (_QWORD *)*((_QWORD *)v2 + 100);
    v18 = (_QWORD *)*((_QWORD *)v2 + 99);
    if (v17)
    {
      if (!v18)
        goto LABEL_28;
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
        *v19 = v17;
        v17 = v19;
      }
      while (v18);
    }
    else
    {
      v19 = (_QWORD *)*((_QWORD *)v2 + 99);
    }
    *((_QWORD *)v2 + 100) = v19;
LABEL_28:
    *((_QWORD *)v2 + 99) = 0;
    *((_QWORD *)v2 + 101) = 0;
    *((_QWORD *)v2 + 103) = 0;
    *((_QWORD *)v2 + 102) = 0;
    v20 = (_QWORD *)*((_QWORD *)v2 + 106);
    v21 = (_QWORD *)*((_QWORD *)v2 + 105);
    if (v20)
    {
      if (!v21)
        goto LABEL_34;
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
        *v22 = v20;
        v20 = v22;
      }
      while (v21);
    }
    else
    {
      v22 = (_QWORD *)*((_QWORD *)v2 + 105);
    }
    *((_QWORD *)v2 + 106) = v22;
LABEL_34:
    *((_QWORD *)v2 + 105) = 0;
    *((_QWORD *)v2 + 107) = 0;
    *((_QWORD *)v2 + 109) = 0;
    *((_QWORD *)v2 + 108) = 0;
    (*((void (**)(_QWORD, _QWORD))v2 + 6))(*((_QWORD *)v2 + 3), *((_QWORD *)v2 + 57));
    *((_QWORD *)v2 + 57) = 0;
    parserInit((uint64_t)v2, (unsigned __int8 *)encoding);
    v23 = *((_QWORD *)v2 + 85);
    v24 = *(uint64_t **)(v23 + 40);
    if (v24)
      v25 = &v24[*(_QWORD *)(v23 + 56)];
    else
      v25 = 0;
    while (v24 != v25)
    {
      v27 = *v24++;
      v26 = v27;
      if (v27 && *(_DWORD *)(v26 + 28))
        (*((void (**)(_QWORD, _QWORD))v2 + 6))(*((_QWORD *)v2 + 3), *(_QWORD *)(v26 + 32));
    }
    hashTableClear(v23);
    *(_BYTE *)(v23 + 259) = 0;
    hashTableClear(v23 + 264);
    hashTableClear(v23 + 40);
    hashTableClear(v23 + 80);
    hashTableClear(v23 + 120);
    v29 = *(_QWORD **)(v23 + 160);
    v28 = *(_QWORD **)(v23 + 168);
    if (v28)
    {
      if (!v29)
        goto LABEL_47;
      do
      {
        v30 = v29;
        v29 = (_QWORD *)*v29;
        *v30 = v28;
        v28 = v30;
      }
      while (v29);
    }
    else
    {
      v30 = *(_QWORD **)(v23 + 160);
    }
    *(_QWORD *)(v23 + 168) = v30;
LABEL_47:
    *(_QWORD *)(v23 + 160) = 0;
    *(_QWORD *)(v23 + 184) = 0;
    *(_QWORD *)(v23 + 192) = 0;
    *(_QWORD *)(v23 + 176) = 0;
    v32 = *(_QWORD **)(v23 + 208);
    v31 = *(_QWORD **)(v23 + 216);
    if (v31)
    {
      if (!v32)
      {
LABEL_53:
        *(_QWORD *)(v23 + 208) = 0;
        *(_QWORD *)(v23 + 232) = 0;
        *(_QWORD *)(v23 + 240) = 0;
        *(_QWORD *)(v23 + 224) = 0;
        *(_QWORD *)(v23 + 304) = 0;
        *(_QWORD *)(v23 + 312) = 0;
        *(_BYTE *)(v23 + 320) = 0;
        (*((void (**)(_QWORD, _QWORD))v2 + 6))(*((_QWORD *)v2 + 3), *(_QWORD *)(v23 + 352));
        *(_QWORD *)(v23 + 352) = 0;
        (*((void (**)(_QWORD, _QWORD))v2 + 6))(*((_QWORD *)v2 + 3), *(_QWORD *)(v23 + 328));
        *(_QWORD *)(v23 + 328) = 0;
        *(_QWORD *)(v23 + 336) = 0;
        *(_QWORD *)(v23 + 344) = 0;
        LOBYTE(parser) = 1;
        *(_WORD *)(v23 + 256) = 1;
        *(_BYTE *)(v23 + 258) = 0;
        return parser;
      }
      do
      {
        v33 = v32;
        v32 = (_QWORD *)*v32;
        *v33 = v31;
        v31 = v33;
      }
      while (v32);
    }
    else
    {
      v33 = *(_QWORD **)(v23 + 208);
    }
    *(_QWORD *)(v23 + 216) = v33;
    goto LABEL_53;
  }
  return parser;
}

char *parserInit(uint64_t a1, unsigned __int8 *a2)
{
  __n128 v4;
  size_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  char *result;

  *(_QWORD *)(a1 + 536) = prologInitProcessor;
  v4.n128_f64[0] = XmlPrologStateInit(a1 + 504);
  if (a2)
  {
    v5 = 0;
    while (a2[v5++])
      ;
    v7 = (void *)(*(uint64_t (**)(_QWORD, size_t, __n128))(a1 + 32))(*(_QWORD *)(a1 + 24), v5, v4);
    v8 = v7;
    if (v7)
      memcpy(v7, a2, v5);
    *(_QWORD *)(a1 + 456) = v8;
  }
  *(_QWORD *)(a1 + 688) = 0;
  XmlInitEncoding(a1 + 304, (_QWORD *)(a1 + 296), 0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = a1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 658) = 0u;
  *(_BYTE *)(a1 + 592) = 1;
  *(_DWORD *)(a1 + 596) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 732) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_WORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 952) = getDebugLevel("EXPAT_ACCOUNTING_DEBUG");
  *(_DWORD *)(a1 + 956) = 1120403456;
  *(_QWORD *)(a1 + 960) = 0x800000;
  *(_OWORD *)(a1 + 968) = 0u;
  result = getDebugLevel("EXPAT_ENTITY_DEBUG");
  *(_DWORD *)(a1 + 980) = (_DWORD)result;
  return result;
}

XML_Status XML_SetEncoding(XML_Parser parser, const XML_Char *encoding)
{
  XML_Parser v2;
  size_t v4;
  XML_Parser v6;

  if (parser)
  {
    v2 = parser;
    if ((*((_DWORD *)parser + 228) | 2) == 3)
    {
      LODWORD(parser) = 0;
      return parser;
    }
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 57));
    if (encoding)
    {
      v4 = 0;
      while (encoding[v4++])
        ;
      parser = (XML_Parser)(*((uint64_t (**)(_QWORD, size_t))v2 + 4))(*((_QWORD *)v2 + 3), v4);
      v6 = parser;
      if (!parser)
        goto LABEL_11;
      memcpy(parser, encoding, v4);
    }
    else
    {
      v6 = 0;
    }
    LODWORD(parser) = 1;
LABEL_11:
    *((_QWORD *)v2 + 57) = v6;
  }
  return parser;
}

uint64_t setContext(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _BYTE *v8;
  int v9;
  _BYTE *v10;
  _OWORD *v11;
  _BYTE *v12;
  _QWORD *v13;
  char **v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  _BYTE *v21;
  _BYTE *v22;

  v2 = 1;
  if (*a2)
  {
    v3 = a2;
    v5 = (uint64_t *)(a1 + 792);
    v6 = *(uint64_t **)(a1 + 680);
    v7 = (uint64_t *)(a1 + 712);
    v8 = a2;
    while (1)
    {
      v9 = *v3;
      if (!*v3)
        break;
      if (v9 == 61)
      {
        v12 = *(_BYTE **)(a1 + 816);
        v13 = v6 + 38;
        if (v12 == *(_BYTE **)(a1 + 824))
          goto LABEL_28;
        if (v12 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow(v5))
            return 0;
          v12 = *(_BYTE **)(a1 + 816);
        }
        *(_QWORD *)(a1 + 816) = v12 + 1;
        *v12 = 0;
        v14 = (char **)lookup(a1, v6 + 15, *(char **)(a1 + 824), 0x10uLL);
        if (!v14)
          return 0;
        v13 = v14;
        v15 = *(char **)(a1 + 824);
        if (*v14 == v15)
        {
          v16 = poolCopyString(v6 + 20, *v14);
          *v13 = v16;
          if (!v16)
            return 0;
          v15 = *(char **)(a1 + 824);
        }
        *(_QWORD *)(a1 + 816) = v15;
LABEL_28:
        while (1)
        {
          v19 = *++v3;
          v18 = v19;
          if (!v19 || v18 == 12)
            break;
          v17 = *(_BYTE **)(a1 + 816);
          if (v17 == *(_BYTE **)(a1 + 808))
          {
            if (!poolGrow(v5))
              return 0;
            LOBYTE(v18) = *v3;
            v17 = *(_BYTE **)(a1 + 816);
          }
          *(_QWORD *)(a1 + 816) = v17 + 1;
          *v17 = v18;
        }
        v21 = *(_BYTE **)(a1 + 816);
        if (v21 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow(v5))
            return 0;
          v21 = *(_BYTE **)(a1 + 816);
        }
        *(_QWORD *)(a1 + 816) = v21 + 1;
        *v21 = 0;
        if (addBinding(a1, v13, 0, *(unsigned __int8 **)(a1 + 824), v7))
          return 0;
        *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 824);
        if (*v3)
          v8 = v3 + 1;
        else
          v8 = v3;
        goto LABEL_40;
      }
      if (v9 == 12)
        break;
      v22 = *(_BYTE **)(a1 + 816);
      if (v22 == *(_BYTE **)(a1 + 808))
      {
        if (!poolGrow(v5))
          return 0;
        LOBYTE(v9) = *v3;
        v22 = *(_BYTE **)(a1 + 816);
      }
      *(_QWORD *)(a1 + 816) = v22 + 1;
      *v22 = v9;
      ++v3;
LABEL_45:
      if (!*v8)
        return 1;
    }
    v10 = *(_BYTE **)(a1 + 816);
    if (v10 == *(_BYTE **)(a1 + 808))
    {
      if (!poolGrow(v5))
        return 0;
      v10 = *(_BYTE **)(a1 + 816);
    }
    *(_QWORD *)(a1 + 816) = v10 + 1;
    *v10 = 0;
    v11 = lookup(a1, v6, *(char **)(a1 + 824), 0);
    if (v11)
      *((_BYTE *)v11 + 56) = 1;
    if (*v3)
      v8 = v3 + 1;
    else
      v8 = v3;
    *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 824);
LABEL_40:
    v3 = v8;
    goto LABEL_45;
  }
  return v2;
}

void XML_ParserFree(XML_Parser parser)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD);

  if (parser)
  {
    v2 = (_QWORD *)*((_QWORD *)parser + 87);
    if (v2)
      goto LABEL_5;
    while (1)
    {
      v2 = (_QWORD *)*((_QWORD *)parser + 88);
      if (!v2)
        break;
      *((_QWORD *)parser + 88) = 0;
      do
      {
LABEL_5:
        v3 = (_QWORD *)*v2;
        (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), v2[8]);
        v4 = v2[10];
        if (v4)
        {
          do
          {
            v5 = *(_QWORD *)(v4 + 8);
            (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v4 + 32));
            (*((void (**)(_QWORD, uint64_t))parser + 6))(*((_QWORD *)parser + 3), v4);
            v4 = v5;
          }
          while (v5);
        }
        (*((void (**)(_QWORD, _QWORD *))parser + 6))(*((_QWORD *)parser + 3), v2);
        v2 = v3;
      }
      while (v3);
    }
    v6 = *((_QWORD *)parser + 72);
    if (v6)
      goto LABEL_12;
    while (1)
    {
      v6 = *((_QWORD *)parser + 73);
      if (!v6)
        break;
      *((_QWORD *)parser + 73) = 0;
      do
      {
LABEL_12:
        v7 = *(_QWORD *)(v6 + 16);
        (*((void (**)(_QWORD))parser + 6))(*((_QWORD *)parser + 3));
        v6 = v7;
      }
      while (v7);
    }
    v8 = *((_QWORD *)parser + 90);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(v8 + 8);
        (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v8 + 32));
        (*((void (**)(_QWORD, uint64_t))parser + 6))(*((_QWORD *)parser + 3), v8);
        v8 = v9;
      }
      while (v9);
    }
    v10 = *((_QWORD *)parser + 89);
    if (v10)
    {
      do
      {
        v11 = *(_QWORD *)(v10 + 8);
        (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v10 + 32));
        (*((void (**)(_QWORD, uint64_t))parser + 6))(*((_QWORD *)parser + 3), v10);
        v10 = v11;
      }
      while (v11);
    }
    poolDestroy((_QWORD **)parser + 99);
    poolDestroy((_QWORD **)parser + 105);
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 57));
    if (!*((_BYTE *)parser + 920))
    {
      v12 = *((_QWORD *)parser + 85);
      if (v12)
      {
        v13 = *(uint64_t **)(v12 + 40);
        if (v13)
          v14 = &v13[*(_QWORD *)(v12 + 56)];
        else
          v14 = 0;
        v15 = *((_QWORD *)parser + 113);
        while (v13 != v14)
        {
          v17 = *v13++;
          v16 = v17;
          if (v17 && *(_DWORD *)(v16 + 28))
            (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v16 + 32));
        }
        hashTableDestroy((_QWORD *)v12);
        hashTableDestroy((_QWORD *)(v12 + 264));
        hashTableDestroy((_QWORD *)(v12 + 40));
        hashTableDestroy((_QWORD *)(v12 + 80));
        hashTableDestroy((_QWORD *)(v12 + 120));
        poolDestroy((_QWORD **)(v12 + 160));
        poolDestroy((_QWORD **)(v12 + 208));
        if (!v15)
        {
          (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v12 + 352));
          (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *(_QWORD *)(v12 + 328));
        }
        (*((void (**)(_QWORD, uint64_t))parser + 6))(*((_QWORD *)parser + 3), v12);
      }
    }
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 93));
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 111));
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 2));
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 12));
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 94));
    (*((void (**)(_QWORD, _QWORD))parser + 6))(*((_QWORD *)parser + 3), *((_QWORD *)parser + 59));
    v18 = (void (*)(_QWORD))*((_QWORD *)parser + 62);
    if (v18)
      v18(*((_QWORD *)parser + 60));
    (*((void (**)(_QWORD, XML_Parser))parser + 6))(*((_QWORD *)parser + 3), parser);
  }
}

_QWORD **poolDestroy(_QWORD **result)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = result;
  v2 = *result;
  if (*result)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      result = (_QWORD **)((uint64_t (*)(_QWORD))v1[5][3])(*v1[5]);
      v2 = v3;
    }
    while (v3);
  }
  v4 = v1[1];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      result = (_QWORD **)((uint64_t (*)(_QWORD))v1[5][3])(*v1[5]);
      v4 = v5;
    }
    while (v5);
  }
  return result;
}

void XML_SetUserData(XML_Parser parser, void *userData)
{
  uint64_t v2;
  uint64_t v3;

  if (parser)
  {
    v3 = *(_QWORD *)parser;
    v2 = *((_QWORD *)parser + 1);
    *(_QWORD *)parser = userData;
    if (v2 == v3)
      *((_QWORD *)parser + 1) = userData;
  }
}

uint64_t poolCopyString(uint64_t *a1, char *a2)
{
  _BYTE *v4;
  char v5;
  uint64_t result;

  while (1)
  {
    v4 = (_BYTE *)a1[3];
    if (v4 == (_BYTE *)a1[2])
      break;
LABEL_4:
    v5 = *a2;
    a1[3] = (uint64_t)(v4 + 1);
    *v4 = v5;
    if (!*a2++)
    {
      result = a1[4];
      a1[4] = a1[3];
      return result;
    }
  }
  if (poolGrow(a1))
  {
    v4 = (_BYTE *)a1[3];
    goto LABEL_4;
  }
  return 0;
}

void XML_SetElementHandler(XML_Parser parser, XML_StartElementHandler start, XML_EndElementHandler end)
{
  if (parser)
  {
    *((_QWORD *)parser + 14) = start;
    *((_QWORD *)parser + 15) = end;
  }
}

void XML_SetCharacterDataHandler(XML_Parser parser, XML_CharacterDataHandler handler)
{
  if (parser)
    *((_QWORD *)parser + 16) = handler;
}

void XML_SetNamespaceDeclHandler(XML_Parser parser, XML_StartNamespaceDeclHandler start, XML_EndNamespaceDeclHandler end)
{
  if (parser)
  {
    *((_QWORD *)parser + 26) = start;
    *((_QWORD *)parser + 27) = end;
  }
}

void XML_SetUnknownEncodingHandler(XML_Parser parser, XML_UnknownEncodingHandler handler, void *encodingHandlerData)
{
  if (parser)
  {
    *((_QWORD *)parser + 32) = handler;
    *((_QWORD *)parser + 61) = encodingHandlerData;
  }
}

void XML_SetXmlDeclHandler(XML_Parser parser, XML_XmlDeclHandler xmldecl)
{
  if (parser)
    *((_QWORD *)parser + 36) = xmldecl;
}

XML_Status XML_Parse(XML_Parser parser, const char *s, int len, int isFinal)
{
  int v8;
  void *Buffer;
  int v10;
  int v11;
  unsigned int v12;

  if (!parser || len < 0)
  {
    if (!parser)
    {
      LODWORD(Buffer) = 0;
      return Buffer;
    }
    goto LABEL_10;
  }
  if (!s && len)
  {
LABEL_10:
    LODWORD(Buffer) = 0;
    v10 = 41;
    goto LABEL_11;
  }
  v8 = *((_DWORD *)parser + 228);
  if (v8)
  {
    if (v8 == 2)
    {
      LODWORD(Buffer) = 0;
      v10 = 36;
      goto LABEL_11;
    }
    if (v8 == 3)
    {
      LODWORD(Buffer) = 0;
      v10 = 33;
LABEL_11:
      *((_DWORD *)parser + 136) = v10;
      return Buffer;
    }
  }
  else if (!*((_QWORD *)parser + 113))
  {
    LODWORD(Buffer) = startParsing((uint64_t)parser);
    if (!(_DWORD)Buffer)
    {
      v10 = 1;
      goto LABEL_11;
    }
  }
  *((_DWORD *)parser + 228) = 1;
  if (!len)
  {
    *((_BYTE *)parser + 916) = isFinal;
    if (isFinal)
    {
      *((_QWORD *)parser + 71) = *((_QWORD *)parser + 7);
      *((_QWORD *)parser + 11) = *((_QWORD *)parser + 8);
      v11 = (*((uint64_t (**)(XML_Parser))parser + 67))(parser);
      *((_DWORD *)parser + 136) = v11;
      if (v11)
      {
        LODWORD(Buffer) = 0;
        *((_QWORD *)parser + 70) = *((_QWORD *)parser + 69);
        *((_QWORD *)parser + 67) = errorProcessor;
        return Buffer;
      }
      v12 = *((_DWORD *)parser + 228);
      if (v12 >= 2)
      {
        if (v12 == 3)
        {
          (*(void (**)(void))(*((_QWORD *)parser + 37) + 96))();
          *((_QWORD *)parser + 71) = *((_QWORD *)parser + 7);
          LODWORD(Buffer) = 2;
          return Buffer;
        }
      }
      else
      {
        *((_DWORD *)parser + 228) = 2;
      }
    }
    LODWORD(Buffer) = 1;
    return Buffer;
  }
  Buffer = XML_GetBuffer(parser, len);
  if (Buffer)
  {
    memcpy(Buffer, s, len);
    LODWORD(Buffer) = XML_ParseBuffer(parser, len, isFinal);
  }
  return Buffer;
}

uint64_t startParsing(uint64_t a1)
{
  uint64_t __buf;

  if (!*(_QWORD *)(a1 + 928))
  {
    __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    *(_QWORD *)(a1 + 928) = __buf;
  }
  if (*(_BYTE *)(a1 + 464))
    return setContext(a1, "xml=http://www.w3.org/XML/1998/namespace");
  else
    return 1;
}

uint64_t errorProcessor(uint64_t a1)
{
  return *(unsigned int *)(a1 + 544);
}

void *__cdecl XML_GetBuffer(void *parser, int len)
{
  char *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (parser)
  {
    v2 = (char *)parser;
    if (len < 0)
    {
LABEL_28:
      parser = 0;
LABEL_29:
      v4 = 1;
      goto LABEL_30;
    }
    v3 = *((_DWORD *)parser + 228);
    if (v3 == 2)
    {
      parser = 0;
      v4 = 36;
      goto LABEL_30;
    }
    if (v3 == 3)
    {
      parser = 0;
      v4 = 33;
LABEL_30:
      *((_DWORD *)v2 + 136) = v4;
      return parser;
    }
    v5 = *((_QWORD *)parser + 9);
    if (v5)
    {
      v6 = *((_QWORD *)parser + 8);
      v7 = v6 ? v5 - v6 : 0;
    }
    else
    {
      v7 = 0;
    }
    parser = (void *)*((_QWORD *)parser + 8);
    if (v7 < len)
    {
      if (parser)
      {
        v8 = *((_QWORD *)v2 + 7);
        if (v8)
          v9 = (_DWORD)parser - v8;
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 + len;
      if (v9 + len < 0)
        goto LABEL_28;
      v11 = *((_QWORD *)v2 + 7);
      if (v11)
      {
        v12 = *((_QWORD *)v2 + 2);
        v13 = v12 ? v11 - v12 : 0;
      }
      else
      {
        v13 = 0;
      }
      v14 = v13 >= 1024 ? 1024 : v13;
      if (v14 > (v10 ^ 0x7FFFFFFF))
        goto LABEL_28;
      v15 = v14 + v10;
      if (v5)
      {
        v16 = *((_QWORD *)v2 + 2);
        if (v16)
          v17 = v5 - v16;
        else
          v17 = 0;
        if (v17 < v15)
        {
          if (v11)
          {
            LODWORD(v18) = v5 - v11;
            if ((_DWORD)v5 != (_DWORD)v11)
            {
              do
LABEL_42:
                v18 = (2 * v18);
              while ((int)v18 < v15 && (int)v18 > 0);
              if ((int)v18 <= 0)
                goto LABEL_28;
              parser = (void *)(*((uint64_t (**)(_QWORD, uint64_t))v2 + 4))(*((_QWORD *)v2 + 3), v18);
              if (!parser)
                goto LABEL_29;
              v20 = (char *)parser;
              *((_QWORD *)v2 + 9) = (char *)parser + v18;
              v21 = *((_QWORD *)v2 + 7);
              if (v21)
              {
                v22 = (const void *)(v21 - v14);
                v23 = *((_QWORD *)v2 + 8);
                v24 = v23 - v21;
                if (!v23)
                  v24 = 0;
                memcpy(parser, v22, v24 + v14);
                (*((void (**)(_QWORD, _QWORD))v2 + 6))(*((_QWORD *)v2 + 3), *((_QWORD *)v2 + 2));
                *((_QWORD *)v2 + 2) = v20;
                v25 = *((_QWORD *)v2 + 8);
                if (v25)
                {
                  v26 = *((_QWORD *)v2 + 7);
                  v25 -= v26;
                  if (!v26)
                    v25 = 0;
                }
                v20 += v14;
                parser = &v20[v25];
                *((_QWORD *)v2 + 8) = &v20[v25];
              }
              else
              {
                *((_QWORD *)v2 + 8) = parser;
                *((_QWORD *)v2 + 2) = parser;
              }
              goto LABEL_68;
            }
          }
LABEL_41:
          LODWORD(v18) = 1024;
          goto LABEL_42;
        }
      }
      else if (v15 > 0)
      {
        goto LABEL_41;
      }
      if (v11)
      {
        v27 = (char *)*((_QWORD *)v2 + 2);
        v28 = v11 - (_DWORD)v27;
        if (v27)
          v29 = v11 - (_QWORD)v27;
        else
          v29 = 0;
        if (v29 <= v14)
          goto LABEL_69;
        if (!v27)
          v28 = 0;
      }
      else
      {
        if ((v14 & 0x80000000) == 0)
        {
LABEL_69:
          *((_QWORD *)v2 + 71) = 0;
          *(_OWORD *)(v2 + 552) = 0u;
          return parser;
        }
        v11 = 0;
        v28 = 0;
        v27 = (char *)*((_QWORD *)v2 + 2);
      }
      v30 = v28 - (uint64_t)v14;
      memmove(v27, &v27[v30], (size_t)parser + v14 - v11);
      v31 = *((_QWORD *)v2 + 7);
      parser = (void *)(*((_QWORD *)v2 + 8) - v30);
      *((_QWORD *)v2 + 8) = parser;
      v20 = (char *)(v31 - v30);
LABEL_68:
      *((_QWORD *)v2 + 7) = v20;
      goto LABEL_69;
    }
  }
  return parser;
}

XML_Status XML_ParseBuffer(XML_Parser parser, int len, int isFinal)
{
  int v6;
  XML_Status v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  if (parser)
  {
    v6 = *((_DWORD *)parser + 228);
    if (v6)
    {
      if (v6 == 2)
      {
        v7 = XML_STATUS_ERROR;
        v8 = 36;
        goto LABEL_22;
      }
      if (v6 == 3)
      {
        v7 = XML_STATUS_ERROR;
        v8 = 33;
LABEL_22:
        *((_DWORD *)parser + 136) = v8;
        return v7;
      }
    }
    else
    {
      if (!*((_QWORD *)parser + 7))
      {
        v7 = XML_STATUS_ERROR;
        v8 = 42;
        goto LABEL_22;
      }
      if (!*((_QWORD *)parser + 113) && !startParsing((uint64_t)parser))
      {
        v7 = XML_STATUS_ERROR;
        v8 = 1;
        goto LABEL_22;
      }
    }
    *((_DWORD *)parser + 228) = 1;
    *((_QWORD *)parser + 71) = *((_QWORD *)parser + 7);
    v9 = *((_QWORD *)parser + 8) + len;
    *((_QWORD *)parser + 8) = v9;
    *((_QWORD *)parser + 10) += len;
    *((_QWORD *)parser + 11) = v9;
    *((_BYTE *)parser + 916) = isFinal;
    v10 = (*((uint64_t (**)(XML_Parser))parser + 67))(parser);
    *((_DWORD *)parser + 136) = v10;
    if (v10)
    {
      v7 = XML_STATUS_ERROR;
      *((_QWORD *)parser + 70) = *((_QWORD *)parser + 69);
      *((_QWORD *)parser + 67) = errorProcessor;
      return v7;
    }
    v11 = *((_DWORD *)parser + 228);
    if (v11 >= 2)
    {
      if (v11 == 3)
      {
        v7 = XML_STATUS_SUSPENDED;
LABEL_20:
        (*(void (**)(void))(*((_QWORD *)parser + 37) + 96))();
        *((_QWORD *)parser + 71) = *((_QWORD *)parser + 7);
        return v7;
      }
    }
    else if (isFinal)
    {
      *((_DWORD *)parser + 228) = 2;
      return 1;
    }
    v7 = XML_STATUS_OK;
    goto LABEL_20;
  }
  return 0;
}

XML_Error XML_GetErrorCode(XML_Parser parser)
{
  if (parser)
    return *((_DWORD *)parser + 136);
  else
    return 41;
}

XML_Index XML_GetCurrentByteIndex(XML_Parser parser)
{
  uint64_t v1;

  if (parser && (v1 = *((_QWORD *)parser + 69)) != 0)
    return *((_QWORD *)parser + 10) + v1 - *((_QWORD *)parser + 11);
  else
    return -1;
}

XML_Size XML_GetCurrentLineNumber(XML_Size parser)
{
  _QWORD *v1;
  unint64_t v2;

  if (parser)
  {
    v1 = (_QWORD *)parser;
    v2 = *(_QWORD *)(parser + 552);
    if (v2)
    {
      if (v2 >= *(_QWORD *)(parser + 568))
      {
        (*(void (**)(void))(*(_QWORD *)(parser + 296) + 96))();
        v1[71] = v1[69];
      }
    }
    return v1[97] + 1;
  }
  return parser;
}

uint64_t reportDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a3;
  if (*(_BYTE *)(a2 + 132))
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 168))(*(_QWORD *)(a1 + 8), a3, (a4 - a3));
  if (*(_QWORD *)(a1 + 296) == a2)
  {
    v8 = (_QWORD *)(a1 + 552);
    v9 = (_QWORD *)(a1 + 560);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 576);
    v9 = v8 + 1;
  }
  do
  {
    v10 = *(_QWORD *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 96);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v13, a4, &v12, v10);
    *v9 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 168))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 96), v12 - *(_QWORD *)(a1 + 96));
    *v8 = v13;
  }
  while (v11 > 1);
  return result;
}

const XML_LChar *__cdecl XML_ErrorString(XML_Error code)
{
  if (code - 1 > 0x2A)
    return 0;
  else
    return off_1EA93C1B8[code - 1];
}

uint64_t prologInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = initializeEncoding(a1);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 536) = prologProcessor;
    return prologProcessor(a1, a2, a3, a4);
  }
  return result;
}

char *getDebugLevel(const char *a1)
{
  char *v1;
  char *__endptr;

  v1 = getenv(a1);
  if (v1)
  {
    *__error() = 0;
    __endptr = v1;
    v1 = (char *)strtoul(v1, &__endptr, 10);
    if (*__error() || *__endptr)
    {
      v1 = 0;
      *__error() = 0;
    }
  }
  return v1;
}

uint64_t initializeEncoding(uint64_t a1)
{
  unsigned __int8 *v2;
  int inited;

  v2 = *(unsigned __int8 **)(a1 + 456);
  if (*(_BYTE *)(a1 + 464))
    inited = XmlInitEncodingNS(a1 + 304, (_QWORD *)(a1 + 296), v2);
  else
    inited = XmlInitEncoding(a1 + 304, (_QWORD *)(a1 + 296), v2);
  if (inited)
    return 0;
  else
    return handleUnknownEncoding(a1, *(_QWORD *)(a1 + 456));
}

uint64_t prologProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v8 = (**(uint64_t (***)(void))(a1 + 296))();
  return doProlog((_QWORD *)a1, *(_QWORD *)(a1 + 296), a2, a3, v8, v10, a4, *(_BYTE *)(a1 + 916) == 0, 1, 0);
}

uint64_t handleUnknownEncoding(uint64_t a1, uint64_t a2)
{
  unsigned int (*v2)(_QWORD, uint64_t, _BYTE *);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);
  int v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BYTE __b[1024];
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);

  v2 = *(unsigned int (**)(_QWORD, uint64_t, _BYTE *))(a1 + 256);
  if (!v2)
    return 18;
  memset(__b, 255, sizeof(__b));
  v14 = 0;
  v16 = 0;
  v15 = 0;
  if (!v2(*(_QWORD *)(a1 + 488), a2, __b))
  {
LABEL_9:
    if (v16)
      v16(v14);
    return 18;
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 32);
  v7 = XmlSizeOfUnknownEncoding();
  v8 = v6(v5, v7);
  *(_QWORD *)(a1 + 472) = v8;
  if (v8)
  {
    if (*(_BYTE *)(a1 + 464))
      v9 = (uint64_t (*)(void))XmlInitUnknownEncodingNS;
    else
      v9 = (uint64_t (*)(void))XmlInitUnknownEncoding;
    v10 = v9();
    if (v10)
    {
      v11 = v10;
      result = 0;
      *(_QWORD *)(a1 + 480) = v14;
      *(_QWORD *)(a1 + 496) = v16;
      *(_QWORD *)(a1 + 296) = v11;
      return result;
    }
    goto LABEL_9;
  }
  if (v16)
    v16(v14);
  return 1;
}

uint64_t doProlog(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, char a9, int a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int (**v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  const char *v24;
  const char *v25;
  char v26;
  unsigned __int8 *v27;
  char *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  _OWORD *v50;
  _OWORD *v51;
  void (*v52)(_QWORD, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  void (*v63)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  _OWORD *v71;
  BOOL v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _BYTE *v83;
  _BYTE *v84;
  _OWORD *AttributeId;
  const char *v86;
  _OWORD *ElementType;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v113;
  int v114;
  unsigned int v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  _DWORD *v127;
  _OWORD *v128;
  unint64_t v129;
  uint64_t v130;
  int v132;
  int v133;
  unsigned int (*v134)(_QWORD);
  unsigned int (*v135)(_QWORD);
  _OWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v140;
  _DWORD *v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  unsigned int ScaffoldPart;
  unsigned int (*v154)(_QWORD);
  void (*v155)(_QWORD);
  int v156;
  uint64_t v157;
  unsigned int v158;
  char v159;
  _OWORD *v160;
  unsigned int (*v161)(_QWORD);
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;

  v13 = a2;
  v14 = (uint64_t)a1;
  v172 = a6;
  v15 = a1[85];
  if (a1[37] == a2)
  {
    v170 = a1 + 69;
    v16 = a1 + 70;
  }
  else
  {
    v170 = (uint64_t *)a1[72];
    v16 = v170 + 1;
  }
  v171 = v16;
  v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 63);
  v166 = (uint64_t *)(v15 + 160);
  v163 = (uint64_t *)(v15 + 264);
  v164 = a1 + 80;
  v167 = a1 + 101;
  v168 = a1 + 99;
  while (2)
  {
    *v170 = a3;
    v18 = v172;
    *v171 = v172;
    if ((int)a5 <= 0)
    {
      if (a8 && (_DWORD)a5)
      {
LABEL_358:
        v19 = 0;
        *a7 = a3;
        return v19;
      }
      if ((_DWORD)a5 != -15)
      {
        v19 = 5;
        switch((int)a5)
        {
          case -4:
            if (v13 == *(_QWORD *)(v14 + 296))
            {
              if (!*(_BYTE *)(v14 + 920))
                return 3;
            }
            else if (!*(_BYTE *)(*(_QWORD *)(v14 + 576) + 36))
            {
              goto LABEL_358;
            }
            if ((*v17)(v14 + 504, 4294967292, a4, a4, v13) != -1)
              goto LABEL_358;
            v19 = 29;
            break;
          case -2:
            return 6;
          case -1:
            return v19;
          case 0:
            *v170 = v18;
            return 4;
          default:
            a5 = -(int)a5;
            v172 = a4;
            v18 = a4;
            goto LABEL_12;
        }
        return v19;
      }
      a5 = 15;
    }
LABEL_12:
    v20 = (*v17)(v14 + 504, a5, a3, v18, v13);
    v21 = v20 > 0x39 || ((1 << v20) & 0x200000000000006) == 0;
    if (v21 && !accountingDiffTolerated(v14, a5, a3, v172, a10))
      return 43;
    v22 = 0;
    v23 = 1;
    switch(v20)
    {
      case 0xFFFFFFFF:
        if ((_DWORD)a5 == 12)
          v158 = 17;
        else
          v158 = 2;
        if ((_DWORD)a5 == 28)
          return 10;
        else
          return v158;
      case 0u:
        if ((_DWORD)a5 != 14)
          goto LABEL_341;
        goto LABEL_343;
      case 1u:
        v53 = v172;
        v54 = v14;
        v55 = 0;
        goto LABEL_255;
      case 2u:
        if (!*(_BYTE *)(v14 + 921))
          goto LABEL_390;
        v159 = *(_BYTE *)(v15 + 257);
        *(_BYTE *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924) || !*(_QWORD *)(v14 + 232))
          goto LABEL_390;
        v160 = lookup(v14, v163, "#", 0x40uLL);
        if (!v160)
          return 1;
        *((_QWORD *)v160 + 4) = *(_QWORD *)(v14 + 688);
        *(_BYTE *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(v14 + 232))(*(_QWORD *)(v14 + 240), 0))
          return 21;
        if (*(_BYTE *)(v15 + 259))
        {
          if (!*(_BYTE *)(v15 + 258))
          {
            v161 = *(unsigned int (**)(_QWORD))(v14 + 224);
            if (v161)
            {
              if (!v161(*(_QWORD *)(v14 + 8)))
                return 22;
            }
          }
        }
        else
        {
          *(_BYTE *)(v15 + 257) = v159;
        }
LABEL_390:
        *(_QWORD *)(v14 + 536) = contentProcessor;
        return contentProcessor(v14, a3, a4, a7);
      case 3u:
        if (!*(_QWORD *)(v14 + 176))
          goto LABEL_341;
        goto LABEL_343;
      case 4u:
        if (!*(_QWORD *)(v14 + 176))
          goto LABEL_98;
        v56 = poolStoreString(v168, v13, a3, v172);
        *(_QWORD *)(v14 + 608) = v56;
        if (!v56)
          return 1;
        v23 = 0;
        *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
        *(_QWORD *)(v14 + 624) = 0;
LABEL_98:
        *(_QWORD *)(v14 + 616) = 0;
        goto LABEL_340;
      case 5u:
        *(_BYTE *)(v14 + 921) = 0;
        *(_BYTE *)(v15 + 257) = 1;
        if (*(_QWORD *)(v14 + 176))
        {
          v57 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          *(_QWORD *)(v14 + 616) = v57;
          if (!v57)
            return 1;
          v23 = 0;
          *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
        }
        else
        {
          *(_QWORD *)(v14 + 616) = "#";
        }
        if (!*(_BYTE *)(v15 + 258) && !*(_DWORD *)(v14 + 924))
        {
          v135 = *(unsigned int (**)(_QWORD))(v14 + 224);
          if (v135)
          {
            if (!v135(*(_QWORD *)(v14 + 8)))
              return 22;
          }
        }
        if (*(_QWORD *)(v14 + 600))
          goto LABEL_277;
        v136 = lookup(v14, v163, "#", 0x40uLL);
        *(_QWORD *)(v14 + 600) = v136;
        if (!v136)
          return 1;
        *((_QWORD *)v136 + 5) = 0;
LABEL_277:
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 600))
          goto LABEL_340;
        v137 = poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        v138 = *(_QWORD *)(v14 + 600);
        *(_QWORD *)(v138 + 24) = v137;
        if (!v137)
          return 1;
        *(_QWORD *)(v138 + 32) = *(_QWORD *)(v14 + 688);
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        if (v20 == 13)
          goto LABEL_281;
        goto LABEL_340;
      case 6u:
        *(_BYTE *)(v14 + 921) = 0;
        v58 = lookup(v14, v163, "#", 0x40uLL);
        *(_QWORD *)(v14 + 600) = v58;
        v19 = 1;
        if (!v58)
          return v19;
        *(_BYTE *)(v15 + 257) = 1;
        if (*(_QWORD *)(v14 + 176))
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170))
            return 32;
          v59 = (_BYTE *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          if (!v59)
            return v19;
          v60 = v59;
          normalizePublicId(v59);
          v23 = 0;
          *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
          *(_QWORD *)(v14 + 624) = v60;
        }
        else
        {
LABEL_107:
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170))
            return 32;
        }
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 600))
          goto LABEL_340;
        v61 = (_BYTE *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v61)
          return 1;
        v62 = v61;
        normalizePublicId(v61);
        *(_QWORD *)(*(_QWORD *)(v14 + 600) + 40) = v62;
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        if (v20 != 14)
          goto LABEL_340;
LABEL_281:
        if (!*(_QWORD *)(v14 + 280))
          goto LABEL_340;
        goto LABEL_343;
      case 7u:
        v63 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v14 + 176);
        if (!v63)
          goto LABEL_341;
        v63(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 608), *(_QWORD *)(v14 + 616), *(_QWORD *)(v14 + 624), 1);
        *(_QWORD *)(v14 + 608) = 0;
        v64 = *(_QWORD **)(v14 + 800);
        v44 = *(_QWORD **)(v14 + 792);
        if (!v64)
          goto LABEL_266;
        if (!v44)
          goto LABEL_268;
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
          *v45 = v64;
          v64 = v45;
        }
        while (v44);
        goto LABEL_267;
      case 8u:
        if (a9 != 1)
          return 4;
        v65 = *(_QWORD *)(v14 + 608);
        if (!v65)
          goto LABEL_306;
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v14 + 176))(*(_QWORD *)(v14 + 8), v65, *(_QWORD *)(v14 + 616), *(_QWORD *)(v14 + 624), 0);
        v66 = *(_QWORD **)(v14 + 800);
        v67 = *(_QWORD **)(v14 + 792);
        if (v66)
        {
          if (!v67)
            goto LABEL_305;
          do
          {
            v68 = v67;
            v67 = (_QWORD *)*v67;
            *v68 = v66;
            v66 = v68;
          }
          while (v67);
        }
        else
        {
          v68 = *(_QWORD **)(v14 + 792);
        }
        *(_QWORD *)(v14 + 800) = v68;
LABEL_305:
        v23 = 0;
        *v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *v167 = 0;
LABEL_306:
        if (!*(_QWORD *)(v14 + 616) && !*(_BYTE *)(v14 + 921))
          goto LABEL_338;
        v147 = *(_BYTE *)(v15 + 257);
        *(_BYTE *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924) || !*(_QWORD *)(v14 + 232))
          goto LABEL_337;
        v148 = lookup(v14, v163, "#", 0x40uLL);
        if (!v148)
          return 1;
        if (*(_BYTE *)(v14 + 921))
        {
          v149 = *(_QWORD *)(v14 + 688);
          v148[4] = v149;
        }
        else
        {
          v149 = v148[4];
        }
        *(_BYTE *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(v14 + 232))(*(_QWORD *)(v14 + 240), 0, v149, v148[3], v148[5]))return 21;
        if (*(_BYTE *)(v15 + 259))
        {
          if (!*(_BYTE *)(v15 + 258))
          {
            v154 = *(unsigned int (**)(_QWORD))(v14 + 224);
            if (v154)
            {
              if (!v154(*(_QWORD *)(v14 + 8)))
                return 22;
            }
          }
        }
        else if (!*(_QWORD *)(v14 + 616))
        {
          *(_BYTE *)(v15 + 257) = v147;
        }
LABEL_337:
        *(_BYTE *)(v14 + 921) = 0;
LABEL_338:
        v155 = *(void (**)(_QWORD))(v14 + 184);
        if (!v155)
          goto LABEL_340;
        v155(*(_QWORD *)(v14 + 8));
        goto LABEL_343;
      case 9u:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 88))(v13, a3, v172))
          goto LABEL_136;
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_135;
        v69 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v69)
          return 1;
        v70 = v69;
        v71 = lookup(v14, (uint64_t *)v15, v69, 0x40uLL);
        *(_QWORD *)(v14 + 600) = v71;
        if (!v71)
          return 1;
        if (*(char **)v71 != v70)
        {
LABEL_135:
          *(_QWORD *)(v15 + 184) = *(_QWORD *)(v15 + 192);
LABEL_136:
          *(_QWORD *)(v14 + 600) = 0;
          goto LABEL_341;
        }
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        *((_QWORD *)v71 + 5) = 0;
        *((_BYTE *)v71 + 57) = 0;
        if (*(_QWORD *)(v14 + 904))
          v72 = 1;
        else
LABEL_314:
          v72 = *(_QWORD *)(v14 + 576) != 0;
LABEL_315:
        *((_BYTE *)v71 + 58) = !v72;
LABEL_316:
        if (!*(_QWORD *)(v14 + 280))
          goto LABEL_341;
        goto LABEL_343;
      case 0xAu:
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_135;
        v73 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v73)
          return 1;
        v74 = v73;
        v71 = lookup(v14, v163, v73, 0x40uLL);
        *(_QWORD *)(v14 + 600) = v71;
        if (!v71)
          return 1;
        if (*(char **)v71 != v74)
          goto LABEL_135;
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        *((_QWORD *)v71 + 5) = 0;
        v72 = 1;
        *((_BYTE *)v71 + 57) = 1;
        if (!*(_QWORD *)(v14 + 904))
          goto LABEL_314;
        goto LABEL_315;
      case 0xBu:
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_341;
        goto LABEL_316;
      case 0xCu:
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_341;
        v19 = storeEntityValue(v14, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), 2);
        v75 = *(_QWORD *)(v14 + 600);
        v76 = *(_QWORD *)(v15 + 240);
        if (v75)
        {
          *(_QWORD *)(v75 + 8) = v76;
          v77 = *(_QWORD *)(v15 + 232);
          *(_DWORD *)(v75 + 16) = v77 - v76;
          *(_QWORD *)(v15 + 240) = v77;
          if (*(_QWORD *)(v14 + 280))
          {
            *v171 = a3;
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 280))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 600), *(unsigned __int8 *)(*(_QWORD *)(v14 + 600) + 57), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 8), *(unsigned int *)(*(_QWORD *)(v14 + 600) + 16), *(_QWORD *)(v14 + 688), 0, 0, 0);
            v23 = 0;
          }
        }
        else
        {
          *(_QWORD *)(v15 + 232) = v76;
        }
        if ((_DWORD)v19)
          return v19;
        goto LABEL_340;
      case 0xDu:
        goto LABEL_277;
      case 0xEu:
        goto LABEL_107;
      case 0xFu:
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 600) || !*(_QWORD *)(v14 + 280))
          goto LABEL_341;
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 280))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 600), *(unsigned __int8 *)(*(_QWORD *)(v14 + 600) + 57), 0, 0, *(_QWORD *)(*(_QWORD *)(v14 + 600) + 32), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 24), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 40), 0);
        goto LABEL_343;
      case 0x10u:
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 600))
          goto LABEL_341;
        v78 = poolStoreString(v166, v13, a3, v172);
        *(_QWORD *)(*(_QWORD *)(v14 + 600) + 48) = v78;
        if (!v78)
          return 1;
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        if (*(_QWORD *)(v14 + 192))
        {
          *v171 = a3;
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 192))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 600), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 32), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 24), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 40), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 48));
          goto LABEL_343;
        }
        if (!*(_QWORD *)(v14 + 280))
          goto LABEL_341;
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 280))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 600), 0, 0, 0, *(_QWORD *)(*(_QWORD *)(v14 + 600) + 32), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 24), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 40), *(_QWORD *)(*(_QWORD *)(v14 + 600) + 48));
        goto LABEL_343;
      case 0x11u:
        if (!*(_QWORD *)(v14 + 200))
          goto LABEL_341;
        goto LABEL_343;
      case 0x12u:
        *v164 = 0;
        v164[1] = 0;
        if (!*(_QWORD *)(v14 + 200))
          goto LABEL_341;
        v79 = poolStoreString(v168, v13, a3, v172);
        *v164 = v79;
        if (!v79)
          return 1;
        goto LABEL_179;
      case 0x13u:
        if (!*v164 || !*(_QWORD *)(v14 + 200))
          goto LABEL_161;
        v80 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v80)
          return 1;
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(v14 + 200))(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 640), *(_QWORD *)(v14 + 688), v80, *(_QWORD *)(v14 + 648));
        v23 = 0;
LABEL_161:
        v81 = *(_QWORD **)(v14 + 800);
        v35 = *(_QWORD **)(v14 + 792);
        if (!v81)
          goto LABEL_172;
        if (!v35)
          goto LABEL_174;
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
          *v36 = v81;
          v81 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x14u:
        if (*(_QWORD *)(v14 + 648) && *(_QWORD *)(v14 + 200))
        {
          *v171 = a3;
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 200))(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 640), *(_QWORD *)(v14 + 688), 0, *(_QWORD *)(v14 + 648));
          v23 = 0;
        }
        v82 = *(_QWORD **)(v14 + 800);
        v35 = *(_QWORD **)(v14 + 792);
        if (!v82)
          goto LABEL_172;
        if (!v35)
          goto LABEL_174;
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
          *v36 = v82;
          v82 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x15u:
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170))
          return 32;
        if (!*v164)
          goto LABEL_341;
        v83 = (_BYTE *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v83)
          return 1;
        v84 = v83;
        normalizePublicId(v83);
        *(_QWORD *)(v14 + 648) = v84;
LABEL_179:
        *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
        goto LABEL_343;
      case 0x16u:
        AttributeId = getAttributeId(v14, v13, a3, v172);
        *(_QWORD *)(v14 + 664) = AttributeId;
        if (!AttributeId)
          return 1;
        *(_WORD *)(v14 + 672) = 0;
        *(_QWORD *)(v14 + 632) = 0;
        goto LABEL_191;
      case 0x17u:
        *(_BYTE *)(v14 + 672) = 1;
        v86 = "CDATA";
        goto LABEL_190;
      case 0x18u:
        *(_BYTE *)(v14 + 673) = 1;
        v86 = "ID";
        goto LABEL_190;
      case 0x19u:
        v86 = "IDREF";
        goto LABEL_190;
      case 0x1Au:
        v86 = "IDREFS";
        goto LABEL_190;
      case 0x1Bu:
        v86 = "ENTITY";
        goto LABEL_190;
      case 0x1Cu:
        v86 = "ENTITIES";
        goto LABEL_190;
      case 0x1Du:
        v86 = "NMTOKEN";
        goto LABEL_190;
      case 0x1Eu:
        v86 = "NMTOKENS";
LABEL_190:
        *(_QWORD *)(v14 + 632) = v86;
        goto LABEL_191;
      case 0x1Fu:
      case 0x20u:
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 272))
          goto LABEL_341;
        v24 = "(";
        if (v20 == 32)
          v24 = "NOTATION(";
        if (*(_QWORD *)(v14 + 632))
          v25 = "|";
        else
          v25 = v24;
        v26 = *v25;
        if (!*v25)
          goto LABEL_32;
        v27 = (unsigned __int8 *)(v25 + 1);
        do
        {
          v28 = *(char **)(v14 + 816);
          if (v28 == *(char **)(v14 + 808))
          {
            if (!poolGrow(v168))
              return 1;
            v28 = *(char **)(v14 + 816);
          }
          *(_QWORD *)(v14 + 816) = v28 + 1;
          *v28 = v26;
          v29 = *v27++;
          v26 = v29;
        }
        while (v29);
LABEL_32:
        if (!*(_QWORD *)(v14 + 824) || !poolAppend(v168, v13, a3, v172))
          return 1;
        *(_QWORD *)(v14 + 632) = *(_QWORD *)(v14 + 824);
        goto LABEL_343;
      case 0x21u:
        goto LABEL_191;
      case 0x22u:
        ElementType = getElementType(v14, v13, a3, v172);
        *(_QWORD *)(v14 + 656) = ElementType;
        if (!ElementType)
          return 1;
LABEL_191:
        if (!*(_BYTE *)(v15 + 256) || !*(_QWORD *)(v14 + 272))
          goto LABEL_341;
        goto LABEL_343;
      case 0x23u:
      case 0x24u:
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_50;
        if (!defineAttribute(*(_QWORD *)(v14 + 656), *(_QWORD *)(v14 + 664), *(unsigned __int8 *)(v14 + 672), *(unsigned __int8 *)(v14 + 673), 0, v14))return 1;
        if (!*(_QWORD *)(v14 + 272))
          goto LABEL_50;
        v30 = *(unsigned __int8 **)(v14 + 632);
        if (!v30)
          goto LABEL_50;
        v31 = *v30;
        if (v31 != 40 && (v31 != 78 || v30[1] != 79))
          goto LABEL_49;
        v32 = *(_BYTE **)(v14 + 816);
        if (v32 != *(_BYTE **)(v14 + 808))
          goto LABEL_45;
        if (!poolGrow(v168))
          return 1;
        v32 = *(_BYTE **)(v14 + 816);
LABEL_45:
        *(_QWORD *)(v14 + 816) = v32 + 1;
        *v32 = 41;
        v33 = *(_BYTE **)(v14 + 816);
        if (v33 != *(_BYTE **)(v14 + 808))
          goto LABEL_48;
        if (!poolGrow(v168))
          return 1;
        v33 = *(_BYTE **)(v14 + 816);
LABEL_48:
        *(_QWORD *)(v14 + 816) = v33 + 1;
        *v33 = 0;
        *(_QWORD *)(v14 + 632) = *(_QWORD *)(v14 + 824);
        *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
LABEL_49:
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, BOOL))(v14 + 272))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 656), **(_QWORD **)(v14 + 664), *(_QWORD *)(v14 + 632), 0, v20 == 36);
        v23 = 0;
LABEL_50:
        v34 = *(_QWORD **)(v14 + 800);
        v35 = *(_QWORD **)(v14 + 792);
        if (v34)
        {
          if (!v35)
            goto LABEL_174;
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
            *v36 = v34;
            v34 = v36;
          }
          while (v35);
        }
        else
        {
LABEL_172:
          v36 = v35;
        }
LABEL_173:
        *(_QWORD *)(v14 + 800) = v36;
LABEL_174:
        *v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *v167 = 0;
        goto LABEL_340;
      case 0x25u:
      case 0x26u:
        if (!*(_BYTE *)(v15 + 256))
          goto LABEL_341;
        v37 = storeAttributeValue(v14, v13, *(unsigned __int8 *)(v14 + 672), a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), v166, 2);
        if ((_DWORD)v37)
          return v37;
        v38 = *(_QWORD *)(v15 + 192);
        *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
        if (!defineAttribute(*(_QWORD *)(v14 + 656), *(_QWORD *)(v14 + 664), *(unsigned __int8 *)(v14 + 672), 0, v38, v14))return 1;
        if (!*(_QWORD *)(v14 + 272))
          goto LABEL_341;
        v39 = *(unsigned __int8 **)(v14 + 632);
        if (!v39)
          goto LABEL_341;
        v40 = *v39;
        if (v40 != 40 && (v40 != 78 || v39[1] != 79))
          goto LABEL_69;
        v41 = *(_BYTE **)(v14 + 816);
        if (v41 != *(_BYTE **)(v14 + 808))
          goto LABEL_65;
        if (!poolGrow(v168))
          return 1;
        v41 = *(_BYTE **)(v14 + 816);
LABEL_65:
        *(_QWORD *)(v14 + 816) = v41 + 1;
        *v41 = 41;
        v42 = *(_BYTE **)(v14 + 816);
        if (v42 != *(_BYTE **)(v14 + 808))
          goto LABEL_68;
        if (!poolGrow(v168))
          return 1;
        v42 = *(_BYTE **)(v14 + 816);
LABEL_68:
        *(_QWORD *)(v14 + 816) = v42 + 1;
        *v42 = 0;
        *(_QWORD *)(v14 + 632) = *(_QWORD *)(v14 + 824);
        *(_QWORD *)(v14 + 824) = *(_QWORD *)(v14 + 816);
LABEL_69:
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, BOOL))(v14 + 272))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 656), **(_QWORD **)(v14 + 664), *(_QWORD *)(v14 + 632), v38, v20 == 38);
        v43 = *(_QWORD **)(v14 + 800);
        v44 = *(_QWORD **)(v14 + 792);
        if (v43)
        {
          if (!v44)
            goto LABEL_268;
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
            *v45 = v43;
            v43 = v45;
          }
          while (v44);
        }
        else
        {
LABEL_266:
          v45 = v44;
        }
LABEL_267:
        *(_QWORD *)(v14 + 800) = v45;
LABEL_268:
        *v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *v167 = 0;
        goto LABEL_343;
      case 0x27u:
        goto LABEL_323;
      case 0x28u:
        if (!*(_QWORD *)(v14 + 264))
          goto LABEL_341;
        v88 = getElementType(v14, v13, a3, v172);
        *(_QWORD *)(v14 + 656) = v88;
        v19 = 1;
        if (!v88)
          return v19;
        *(_QWORD *)(v15 + 344) = 0;
        *(_BYTE *)(v15 + 320) = 1;
        goto LABEL_343;
      case 0x29u:
      case 0x2Au:
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        if (!*(_QWORD *)(v14 + 264))
          goto LABEL_80;
        v46 = (*(uint64_t (**)(_QWORD, uint64_t))(v14 + 32))(*(_QWORD *)(v14 + 24), 32);
        v19 = 1;
        if (!v46)
          return v19;
        *(_QWORD *)(v46 + 24) = 0;
        if (v20 == 41)
          v47 = 2;
        else
          v47 = 1;
        *(_QWORD *)(v46 + 12) = 0;
        *(_QWORD *)(v46 + 4) = 0;
        *(_DWORD *)v46 = v47;
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, uint64_t))(v14 + 264))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 656), v46);
        v23 = 0;
LABEL_80:
        *(_BYTE *)(v15 + 320) = 0;
        goto LABEL_340;
      case 0x2Bu:
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        v89 = *(_QWORD *)(v15 + 328);
        v90 = 32 * *(int *)(*(_QWORD *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4);
        v91 = 3;
        goto LABEL_322;
      case 0x2Cu:
        v92 = *(_DWORD *)(v14 + 896);
        if (*(_DWORD *)(v14 + 512) < v92)
          goto LABEL_319;
        if (v92)
        {
          if ((v92 & 0x80000000) != 0)
            return 1;
          v93 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 40);
          v94 = *(_QWORD *)(v14 + 24);
          v95 = *(_QWORD *)(v14 + 888);
          *(_DWORD *)(v14 + 896) = 2 * v92;
          v96 = v93(v94, v95);
          if (!v96)
          {
            *(_DWORD *)(v14 + 896) >>= 1;
            return 1;
          }
          *(_QWORD *)(v14 + 888) = v96;
          v97 = *(_QWORD *)(v15 + 352);
          if (v97)
          {
            v98 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v14 + 40))(*(_QWORD *)(v14 + 24), v97, 4 * *(unsigned int *)(v14 + 896));
            if (!v98)
              return 1;
            *(_QWORD *)(v15 + 352) = v98;
          }
          goto LABEL_319;
        }
        v150 = *(_QWORD *)(v14 + 24);
        v151 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
        *(_DWORD *)(v14 + 896) = 32;
        v152 = v151(v150, 32);
        *(_QWORD *)(v14 + 888) = v152;
        if (v152)
        {
LABEL_319:
          *(_BYTE *)(*(_QWORD *)(v14 + 888) + *(unsigned int *)(v14 + 512)) = 0;
          if (!*(_BYTE *)(v15 + 320))
            goto LABEL_341;
          ScaffoldPart = nextScaffoldPart(v14);
          if ((ScaffoldPart & 0x80000000) != 0)
            return 1;
          *(_DWORD *)(*(_QWORD *)(v15 + 352) + 4 * (int)(*(_DWORD *)(v15 + 348))++) = ScaffoldPart;
          v89 = *(_QWORD *)(v15 + 328);
          v90 = 32 * ScaffoldPart;
          v91 = 6;
LABEL_322:
          *(_DWORD *)(v89 + v90) = v91;
LABEL_323:
          if (!*(_QWORD *)(v14 + 264))
          {
LABEL_341:
            if (*(_QWORD *)(v14 + 168))
              reportDefault(v14, v13, a3, v172);
          }
LABEL_343:
          v156 = *(_DWORD *)(v14 + 912);
          if (v156 == 2)
            return 35;
          if (v156 == 3)
          {
            v19 = 0;
            *a7 = v172;
            return v19;
          }
          a3 = v172;
          a5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))v13)(v13, v172, a4, &v172);
          continue;
        }
        *(_DWORD *)(v14 + 896) = 0;
        return 1;
      case 0x2Du:
        goto LABEL_211;
      case 0x2Eu:
        v22 = 2;
        goto LABEL_211;
      case 0x2Fu:
        v22 = 1;
        goto LABEL_211;
      case 0x30u:
        v22 = 3;
LABEL_211:
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        v99 = *(_QWORD *)(v14 + 264);
        v23 = v99 == 0;
        v100 = *(int *)(v15 + 348) - 1;
        *(_DWORD *)(v15 + 348) = v100;
        *(_DWORD *)(*(_QWORD *)(v15 + 328) + 32 * *(int *)(*(_QWORD *)(v15 + 352) + 4 * v100) + 4) = v22;
        if ((_DWORD)v100)
          goto LABEL_340;
        if (!v99)
          goto LABEL_226;
        v101 = *(_QWORD *)(v14 + 680);
        v102 = (*(uint64_t (**)(_QWORD, uint64_t))(v14 + 32))(*(_QWORD *)(v14 + 24), *(unsigned int *)(v101 + 336) + 32 * *(unsigned int *)(v101 + 344));
        if (!v102)
          return 1;
        v103 = *(unsigned int *)(v101 + 344);
        *(_DWORD *)(v102 + 16) = 0;
        if ((_DWORD)v103)
        {
          v104 = (_BYTE *)(v102 + 32 * v103);
          v105 = v102 + 32;
          v106 = v102;
          v107 = v104;
          do
          {
            v108 = *(int *)(v106 + 16);
            v109 = *(_QWORD *)(v101 + 328);
            v110 = *(_QWORD *)(v109 + 32 * v108);
            *(_QWORD *)v106 = v110;
            if ((_DWORD)v110 == 4)
            {
              *(_QWORD *)(v106 + 8) = v107;
              v111 = *(_BYTE **)(v109 + 32 * v108 + 8);
              do
                *v107++ = *v111;
              while (*v111++);
              *(_DWORD *)(v106 + 16) = 0;
              *(_QWORD *)(v106 + 24) = 0;
            }
            else
            {
              *(_QWORD *)(v106 + 8) = 0;
              v113 = v109 + 32 * v108;
              v114 = *(_DWORD *)(v113 + 24);
              *(_DWORD *)(v106 + 16) = v114;
              *(_QWORD *)(v106 + 24) = v105;
              if (v114)
              {
                v115 = 0;
                v116 = (int *)(v113 + 16);
                do
                {
                  v117 = *v116;
                  *(_DWORD *)(v105 + 16) = v117;
                  v105 += 32;
                  ++v115;
                  v116 = (int *)(v109 + 32 * v117 + 28);
                }
                while (v115 < *(_DWORD *)(v106 + 16));
              }
            }
            v106 += 32;
          }
          while (v106 < (unint64_t)v104);
        }
        *v171 = a3;
        (*(void (**)(_QWORD, _QWORD, uint64_t))(v14 + 264))(*(_QWORD *)(v14 + 8), **(_QWORD **)(v14 + 656), v102);
LABEL_226:
        *(_BYTE *)(v15 + 320) = 0;
        *(_DWORD *)(v15 + 336) = 0;
        goto LABEL_340;
      case 0x31u:
        v118 = *(_QWORD *)(v14 + 888);
        v119 = *(unsigned int *)(v14 + 512);
        if (*(_BYTE *)(v118 + v119) == 44)
          return 2;
        if (*(_BYTE *)(v118 + v119))
          v120 = 1;
        else
          v120 = *(_BYTE *)(v15 + 320) == 0;
        if (!v120)
        {
          v121 = (_DWORD *)(*(_QWORD *)(v15 + 328)
                          + 32 * *(int *)(*(_QWORD *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4));
          if (*v121 != 3)
          {
            *v121 = 5;
            v23 = *(_QWORD *)(v14 + 264) == 0;
          }
        }
        *(_BYTE *)(v118 + v119) = 124;
        goto LABEL_340;
      case 0x32u:
        v122 = *(_QWORD *)(v14 + 888);
        v123 = *(unsigned int *)(v14 + 512);
        if (*(_BYTE *)(v122 + v123) == 124)
          return 2;
        *(_BYTE *)(v122 + v123) = 44;
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        goto LABEL_323;
      case 0x33u:
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        v23 = 0;
        v124 = v172;
        goto LABEL_244;
      case 0x34u:
        v23 = 2;
        goto LABEL_242;
      case 0x35u:
        goto LABEL_242;
      case 0x36u:
        v23 = 3;
LABEL_242:
        if (!*(_BYTE *)(v15 + 320))
          goto LABEL_341;
        v124 = v172 - *(int *)(v13 + 128);
LABEL_244:
        v125 = nextScaffoldPart(v14);
        if ((v125 & 0x80000000) != 0)
          return 1;
        v126 = v125;
        v127 = (_DWORD *)(*(_QWORD *)(v15 + 328) + 32 * v125);
        *v127 = 4;
        v127[1] = v23;
        v128 = getElementType(v14, v13, a3, v124);
        if (!v128)
          return 1;
        v129 = 0;
        v130 = *(_QWORD *)v128;
        *(_QWORD *)(*(_QWORD *)(v15 + 328) + 32 * v126 + 8) = *(_QWORD *)v128;
        while (*(unsigned __int8 *)(v130 + v129++))
          ;
        v132 = *(_DWORD *)(v15 + 336);
        if (v129 > ~v132)
          return 1;
        *(_DWORD *)(v15 + 336) = v132 + v129;
        goto LABEL_323;
      case 0x37u:
        if (!reportProcessingInstruction(v14, v13, a3, v172))
          return 1;
        goto LABEL_343;
      case 0x38u:
        if (!reportComment(v14, v13, a3, v172))
          return 1;
        goto LABEL_343;
      case 0x39u:
        v53 = v172;
        v54 = v14;
        v55 = 1;
LABEL_255:
        v37 = processXmlDecl(v54, v55, a3, v53);
        if ((_DWORD)v37)
          return v37;
        v13 = *(_QWORD *)(v14 + 296);
        goto LABEL_343;
      case 0x3Au:
        if (*(_QWORD *)(v14 + 168))
          reportDefault(v14, v13, a3, v172);
        v37 = doIgnoreSection(v14, v13, &v172, a4, a7, a8);
        if ((_DWORD)v37)
          return v37;
        if (v172)
          goto LABEL_343;
        v19 = 0;
        *(_QWORD *)(v14 + 536) = ignoreSectionProcessor;
        return v19;
      case 0x3Bu:
      case 0x3Cu:
        *(_BYTE *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 924))
        {
          v133 = *(unsigned __int8 *)(v15 + 258);
          *(_BYTE *)(v15 + 256) = v133;
          if (v133)
            goto LABEL_340;
LABEL_263:
          v134 = *(unsigned int (**)(_QWORD))(v14 + 224);
          if (v134 && !v134(*(_QWORD *)(v14 + 8)))
            return 22;
          goto LABEL_340;
        }
        v48 = (char *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v48)
          return 1;
        v49 = v48;
        v50 = lookup(v14, v163, v48, 0);
        v51 = v50;
        *(_QWORD *)(v15 + 184) = *(_QWORD *)(v15 + 192);
        if (!*(_DWORD *)(v14 + 524))
          goto LABEL_86;
        if (*(_BYTE *)(v15 + 258))
        {
          if (!*(_QWORD *)(v14 + 576))
            goto LABEL_284;
        }
        else if (!*(_BYTE *)(v15 + 257))
        {
LABEL_284:
          if (!v50)
            return 11;
          if (!*((_BYTE *)v50 + 58))
            return 24;
          goto LABEL_286;
        }
LABEL_86:
        if (!v50)
        {
          *(_BYTE *)(v15 + 256) = *(_BYTE *)(v15 + 258);
          if (v20 == 60)
          {
            v52 = *(void (**)(_QWORD, char *, uint64_t))(v14 + 248);
            if (v52)
            {
              v52(*(_QWORD *)(v14 + 8), v49, 1);
              goto LABEL_343;
            }
          }
          goto LABEL_341;
        }
LABEL_286:
        if (*((_BYTE *)v50 + 56))
          return 12;
        if (*((_QWORD *)v50 + 1))
        {
          v37 = processInternalEntity(v14, (uint64_t)v50, v20 == 60);
          if ((_DWORD)v37)
            return v37;
          goto LABEL_343;
        }
        v139 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v14 + 232);
        if (!v139)
        {
          *(_BYTE *)(v15 + 256) = *(_BYTE *)(v15 + 258);
          goto LABEL_341;
        }
        *(_BYTE *)(v15 + 259) = 0;
        *((_BYTE *)v50 + 56) = 1;
        v140 = v14;
        do
        {
          v141 = (_DWORD *)v140;
          v140 = *(_QWORD *)(v140 + 904);
        }
        while (v140);
        ++v141[242];
        v142 = v141[243] + 1;
        v141[243] = v142;
        v143 = v141[244];
        if (v142 > v143)
          v141[244] = v143 + 1;
        v144 = v139(*(_QWORD *)(v14 + 240), 0, *((_QWORD *)v50 + 4), *((_QWORD *)v50 + 3), *((_QWORD *)v50 + 5));
        v145 = v14;
        if (!v144)
        {
          do
          {
            v157 = v14;
            v14 = *(_QWORD *)(v14 + 904);
          }
          while (v14);
          --*(_DWORD *)(v157 + 972);
          *((_BYTE *)v51 + 56) = 0;
          return 21;
        }
        do
        {
          v146 = v145;
          v145 = *(_QWORD *)(v145 + 904);
        }
        while (v145);
        --*(_DWORD *)(v146 + 972);
        *((_BYTE *)v51 + 56) = 0;
        if (!*(_BYTE *)(v15 + 259))
        {
          *(_BYTE *)(v15 + 256) = *(_BYTE *)(v15 + 258);
          goto LABEL_343;
        }
        v23 = 0;
        if (!*(_BYTE *)(v15 + 258))
          goto LABEL_263;
LABEL_340:
        if (!v23)
          goto LABEL_343;
        goto LABEL_341;
      default:
        goto LABEL_341;
    }
  }
}

BOOL accountingDiffTolerated(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;

  if ((a2 + 4) >= 5)
  {
    if (a5 == 2)
      return 1;
    goto LABEL_6;
  }
  v5 = 1;
  if (((0x1Du >> (a2 + 4)) & 1) == 0 && a5 != 2)
  {
LABEL_6:
    v6 = a1;
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 904);
    }
    while (v6);
    v8 = a4 - a3;
    v9 = (unint64_t *)(v7 + 936);
    v10 = 936;
    if (a5 == 0 && v7 == a1)
    {
      v11 = (_QWORD *)(v7 + 936);
    }
    else
    {
      v10 = 944;
      v11 = (_QWORD *)(v7 + 944);
    }
    v12 = *(_QWORD *)(v7 + v10);
    if (__CFADD__(v8, v12))
      return 0;
    *v11 = v12 + v8;
    v13 = *v9;
    v14 = *(_QWORD *)(v7 + 944) + *v9;
    if (v13)
      v15 = (float)v14 / (float)v13;
    else
      v15 = 1.0;
    if (v14 >= *(_QWORD *)(v7 + 960))
      return v15 <= *(float *)(v7 + 956);
    return 1;
  }
  return v5;
}

uint64_t processXmlDecl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(int, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, int *);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v27 = -1;
  if (!accountingDiffTolerated(a1, 12, a3, a4, 0))
    return 43;
  if (*(_BYTE *)(a1 + 464))
    v8 = XmlParseXmlDeclNS;
  else
    v8 = XmlParseXmlDecl;
  v9 = (uint64_t *)(a1 + 552);
  if (!v8(a2, *(_QWORD *)(a1 + 296), a3, a4, (uint64_t *)(a1 + 552), &v29, &v28, &v31, &v30, (int *)&v27))
  {
    if ((_DWORD)a2)
      return 31;
    else
      return 30;
  }
  if (!(_DWORD)a2 && v27 == 1)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 680) + 258) = 1;
    if (*(_DWORD *)(a1 + 924) == 1)
      *(_DWORD *)(a1 + 924) = 0;
  }
  if (*(_QWORD *)(a1 + 288))
  {
    v10 = v31;
    if (v31)
    {
      v11 = *(_QWORD *)(a1 + 296);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v11, v31);
      v13 = poolStoreString((uint64_t *)(a1 + 840), v11, v10, v10 + v12);
      if (!v13)
        return 1;
      v10 = v13;
      *(_QWORD *)(a1 + 872) = *(_QWORD *)(a1 + 864);
    }
    if (v29)
    {
      v14 = poolStoreString((uint64_t *)(a1 + 840), *(_QWORD *)(a1 + 296), v29, v28 - *(int *)(*(_QWORD *)(a1 + 296) + 128));
      if (!v14)
        return 1;
    }
    else
    {
      v14 = 0;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(a1 + 288))(*(_QWORD *)(a1 + 8), v14, v10, v27);
  }
  else
  {
    if (*(_QWORD *)(a1 + 168))
      reportDefault(a1, *(_QWORD *)(a1 + 296), a3, a4);
    v10 = 0;
    v14 = 0;
  }
  if (*(_QWORD *)(a1 + 456))
    goto LABEL_27;
  if (v30)
  {
    v19 = *(_DWORD *)(v30 + 128);
    v20 = *(_QWORD *)(a1 + 296);
    if (v19 != *(_DWORD *)(v20 + 128) || v19 == 2 && v30 != v20)
    {
      *v9 = v31;
      return 19;
    }
    *(_QWORD *)(a1 + 296) = v30;
LABEL_27:
    if (!(v10 | v14))
      return 0;
    v16 = *(_QWORD **)(a1 + 848);
    v17 = *(_QWORD **)(a1 + 840);
    if (v16)
    {
      if (!v17)
      {
LABEL_47:
        result = 0;
        *(_QWORD *)(a1 + 840) = 0;
        *(_QWORD *)(a1 + 856) = 0;
        *(_QWORD *)(a1 + 872) = 0;
        *(_QWORD *)(a1 + 864) = 0;
        return result;
      }
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
        *v18 = v16;
        v16 = v18;
      }
      while (v17);
    }
    else
    {
      v18 = *(_QWORD **)(a1 + 840);
    }
    *(_QWORD *)(a1 + 848) = v18;
    goto LABEL_47;
  }
  v21 = v31;
  if (!v31)
    goto LABEL_27;
  if (!v10)
  {
    v22 = *(_QWORD *)(a1 + 296);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v22, v31);
    v10 = poolStoreString((uint64_t *)(a1 + 840), v22, v21, v21 + v23);
    if (!v10)
      return 1;
  }
  result = handleUnknownEncoding(a1, v10);
  v24 = *(_QWORD **)(a1 + 848);
  v25 = *(_QWORD **)(a1 + 840);
  if (v24)
  {
    if (!v25)
      goto LABEL_52;
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
      *v26 = v24;
      v24 = v26;
    }
    while (v25);
  }
  else
  {
    v26 = *(_QWORD **)(a1 + 840);
  }
  *(_QWORD *)(a1 + 848) = v26;
LABEL_52:
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  if ((_DWORD)result == 18)
    *v9 = v31;
  return result;
}

uint64_t poolStoreString(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _BYTE *v6;

  result = poolAppend(a1, a2, a3, a4);
  if (result)
  {
    v6 = (_BYTE *)a1[3];
    if (v6 == (_BYTE *)a1[2])
    {
      if (!poolGrow(a1))
        return 0;
      v6 = (_BYTE *)a1[3];
    }
    a1[3] = (uint64_t)(v6 + 1);
    *v6 = 0;
    return a1[4];
  }
  return result;
}

_OWORD *lookup(uint64_t a1, uint64_t *a2, char *a3, size_t a4)
{
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *result;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t i;
  char **v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  if (!a2[2])
  {
    if (a4)
    {
      *((_BYTE *)a2 + 8) = 6;
      a2[2] = 64;
      result = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(a2[4] + 8))(*(_QWORD *)a2[4], 512);
      *a2 = (uint64_t)result;
      if (!result)
      {
        a2[2] = 0;
        return result;
      }
      result[30] = 0u;
      result[31] = 0u;
      result[28] = 0u;
      result[29] = 0u;
      result[26] = 0u;
      result[27] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[22] = 0u;
      result[23] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[14] = 0u;
      result[15] = 0u;
      result[12] = 0u;
      result[13] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *result = 0u;
      result[1] = 0u;
      v8.n128_u64[0] = (unint64_t)hash(a1, a3);
      v12 = (a2[2] - 1) & v40;
      goto LABEL_45;
    }
    return 0;
  }
  v8.n128_u64[0] = (unint64_t)hash(a1, a3);
  v10 = v9;
  v11 = a2[2];
  v12 = (v11 - 1) & v9;
  result = *(_OWORD **)(*a2 + 8 * v12);
  if (!result)
  {
LABEL_14:
    if (a4)
    {
      v22 = *((_BYTE *)a2 + 8);
      if (!((unint64_t)a2[3] >> (v22 - 1)))
      {
LABEL_45:
        *(_QWORD *)(*a2 + 8 * v12) = (*(uint64_t (**)(_QWORD, size_t, __n128))(a2[4] + 8))(*(_QWORD *)a2[4], a4, v8);
        result = *(_OWORD **)(*a2 + 8 * v12);
        if (result)
        {
          bzero(result, a4);
          v41 = *a2;
          **(_QWORD **)(*a2 + 8 * v12) = a3;
          ++a2[3];
          return *(_OWORD **)(v41 + 8 * v12);
        }
        return result;
      }
      v23 = v22 + 1;
      v24 = (v22 + 1);
      if (v24 <= 0x3C)
      {
        result = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t, __n128))(a2[4] + 8))(*(_QWORD *)a2[4], 8 << v23, v8);
        if (!result)
          return result;
        v25 = result;
        v42 = v24;
        v26 = 1 << v23;
        v27 = (1 << v23) - 1;
        bzero(result, 8 << v23);
        v28 = a2[2];
        if (v28)
        {
          for (i = 0; i < v28; ++i)
          {
            v30 = *(char ***)(*a2 + 8 * i);
            if (v30)
            {
              hash(a1, *v30);
              v32 = v31 & v27;
              if (*((_QWORD *)v25 + (v31 & v27)))
              {
                LODWORD(v33) = 0;
                do
                {
                  if ((_DWORD)v33)
                    v33 = v33;
                  else
                    v33 = ((v31 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
                  v34 = v32 >= v33;
                  v35 = v32 - v33;
                  if (v34)
                    v36 = 0;
                  else
                    v36 = 1 << v23;
                  v32 = v35 + v36;
                }
                while (*((_QWORD *)v25 + v32));
              }
              *((_QWORD *)v25 + v32) = *(_QWORD *)(*a2 + 8 * i);
              v28 = a2[2];
            }
          }
        }
        (*(void (**)(_QWORD, _QWORD))(a2[4] + 24))(*(_QWORD *)a2[4], *a2);
        *a2 = (uint64_t)v25;
        *((_BYTE *)a2 + 8) = v23;
        a2[2] = v26;
        v12 = v27 & v10;
        if (*((_QWORD *)v25 + (v27 & v10)))
        {
          LODWORD(v37) = 0;
          do
          {
            if ((_DWORD)v37)
              v37 = v37;
            else
              v37 = ((v10 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
            v38 = v12 - v37;
            if (v12 >= v37)
              v39 = 0;
            else
              v39 = 1 << v23;
            v12 = v38 + v39;
          }
          while (*((_QWORD *)v25 + v38 + v39));
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  v14 = 0;
  while (*a3 != **(_BYTE **)result)
  {
LABEL_8:
    if (!v14)
      v14 = ((v10 & (unint64_t)-v11) >> (*((_BYTE *)a2 + 8) - 1)) & ((unint64_t)(v11 - 1) >> 2) | 1;
    v20 = v12 - v14;
    if (v12 >= v14)
      v21 = 0;
    else
      v21 = a2[2];
    v12 = v20 + v21;
    result = *(_OWORD **)(*a2 + 8 * (v20 + v21));
    if (!result)
      goto LABEL_14;
  }
  v15 = (unsigned __int8 *)(*(_QWORD *)result + 1);
  v16 = (unsigned __int8 *)(a3 + 1);
  v17 = *a3;
  while (v17)
  {
    v18 = *v16++;
    v17 = v18;
    v19 = *v15++;
    if (v17 != v19)
      goto LABEL_8;
  }
  return result;
}

_BYTE *normalizePublicId(_BYTE *result)
{
  int v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;

  LOBYTE(v1) = *result;
  if (!*result)
    goto LABEL_15;
  v2 = 1;
  v3 = result;
  do
  {
    v4 = v3;
    if ((char)v1 > 0x20 || ((1 << v1) & 0x100002400) == 0)
      goto LABEL_8;
    v3 = result;
    if (v4 == result)
      goto LABEL_10;
    if (*(v4 - 1) != 32)
    {
      LOBYTE(v1) = 32;
LABEL_8:
      *v4++ = v1;
    }
    v3 = v4;
LABEL_10:
    v1 = result[v2++];
  }
  while (v1);
  if (v3 != result)
  {
    if (*(v3 - 1) == 32)
      result = v3 - 1;
    else
      result = v3;
  }
LABEL_15:
  *result = 0;
  return result;
}

uint64_t contentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  v5 = doContent(a1, 0, *(_QWORD *)(a1 + 296), a2, a3, a4, *(_BYTE *)(a1 + 916) == 0, 0);
  if (!(_DWORD)v5 && !storeRawNames(a1))
    return 1;
  return v5;
}

_OWORD *getElementType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  char *v6;
  char *v7;
  _OWORD *v8;
  _OWORD *v9;

  v5 = *(uint64_t **)(a1 + 680);
  v6 = (char *)poolStoreString(v5 + 20, a2, a3, a4);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = lookup(a1, v5 + 5, v6, 0x28uLL);
  v9 = v8;
  if (v8)
  {
    if (*(char **)v8 != v7)
    {
      v5[23] = v5[24];
      return v9;
    }
    v5[24] = v5[23];
    if (setElementTypePrefix(a1, (uint64_t)v8))
      return v9;
    return 0;
  }
  return v9;
}

_OWORD *getAttributeId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t i;
  _BYTE *v21;
  char v22;
  _OWORD *v23;

  v8 = *(_QWORD *)(a1 + 680);
  v9 = *(_BYTE **)(v8 + 184);
  if (v9 == *(_BYTE **)(v8 + 176))
  {
    if (!poolGrow((uint64_t *)(v8 + 160)))
      return 0;
    v9 = *(_BYTE **)(v8 + 184);
  }
  *(_QWORD *)(v8 + 184) = v9 + 1;
  *v9 = 0;
  v10 = poolStoreString((uint64_t *)(v8 + 160), a2, a3, a4);
  if (!v10)
    return 0;
  v11 = (_BYTE *)v10;
  v12 = (_BYTE *)(v10 + 1);
  v13 = lookup(a1, (uint64_t *)(v8 + 80), (char *)(v10 + 1), 0x18uLL);
  v14 = v13;
  if (v13)
  {
    if (*(_BYTE **)v13 != v12)
    {
      v15 = *(_QWORD *)(v8 + 192);
LABEL_8:
      *(_QWORD *)(v8 + 184) = v15;
      return v14;
    }
    v16 = *(_BYTE **)(v8 + 184);
    *(_QWORD *)(v8 + 192) = v16;
    if (!*(_BYTE *)(a1 + 464))
      return v14;
    v17 = *v12;
    if (v17 == 120 && v11[2] == 109 && v11[3] == 108 && v11[4] == 110 && v11[5] == 115)
    {
      if (v11[6] == 58)
      {
        v18 = lookup(a1, (uint64_t *)(v8 + 120), v11 + 7, 0x10uLL);
        goto LABEL_38;
      }
      if (!v11[6])
      {
        v18 = (_OWORD *)(v8 + 304);
LABEL_38:
        *((_QWORD *)v14 + 1) = v18;
        *((_BYTE *)v14 + 17) = 1;
        return v14;
      }
    }
    v19 = 0;
    if (!*v12)
      return v14;
    while (v17 != 58)
    {
      v17 = v11[v19++ + 2];
      if (!v17)
        return v14;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v21 = *(_BYTE **)(v8 + 184);
        if (v21 == *(_BYTE **)(v8 + 176))
        {
          if (!poolGrow((uint64_t *)(v8 + 160)))
            return 0;
          v21 = *(_BYTE **)(v8 + 184);
        }
        v22 = v12[i];
        *(_QWORD *)(v8 + 184) = v21 + 1;
        *v21 = v22;
      }
      v16 = *(_BYTE **)(v8 + 184);
    }
    if (v16 == *(_BYTE **)(v8 + 176))
    {
      if (!poolGrow((uint64_t *)(v8 + 160)))
        return 0;
      v16 = *(_BYTE **)(v8 + 184);
    }
    *(_QWORD *)(v8 + 184) = v16 + 1;
    *v16 = 0;
    v23 = lookup(a1, (uint64_t *)(v8 + 120), *(char **)(v8 + 192), 0x10uLL);
    *((_QWORD *)v14 + 1) = v23;
    if (v23)
    {
      v15 = *(_QWORD *)(v8 + 192);
      if (*(_QWORD *)v23 == v15)
      {
        *(_QWORD *)(v8 + 192) = *(_QWORD *)(v8 + 184);
        return v14;
      }
      goto LABEL_8;
    }
    return 0;
  }
  return v14;
}

uint64_t poolAppend(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v9;

  v9 = a3;
  v7 = a1 + 3;
  if (a1[3])
    goto LABEL_3;
  while (poolGrow(a1))
  {
LABEL_3:
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v9, a4, v7, a1[2]) < 2)return a1[4];
  }
  return 0;
}

uint64_t defineAttribute(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v16;

  v10 = *(_DWORD *)(a1 + 24);
  if (a4 || a5)
  {
    if (v10 >= 1)
    {
      v11 = *(_QWORD **)(a1 + 32);
      v12 = *(unsigned int *)(a1 + 24);
      while (*v11 != a2)
      {
        v11 += 3;
        if (!--v12)
          goto LABEL_7;
      }
      return 1;
    }
LABEL_7:
    if (a4 && !*(_QWORD *)(a1 + 16) && !*(_BYTE *)(a2 + 17))
      *(_QWORD *)(a1 + 16) = a2;
  }
  if (v10 != *(_DWORD *)(a1 + 28))
  {
    result = *(_QWORD *)(a1 + 32);
LABEL_16:
    v15 = *(_DWORD *)(a1 + 24);
    v16 = result + 24 * v15;
    *(_QWORD *)v16 = a2;
    *(_QWORD *)(v16 + 16) = a5;
    *(_BYTE *)(v16 + 8) = a3;
    if (!a3)
      *(_BYTE *)(a2 + 16) = 1;
    *(_DWORD *)(a1 + 24) = v15 + 1;
    return 1;
  }
  v13 = v10;
  if (!v10)
  {
    *(_DWORD *)(a1 + 28) = 8;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(a6 + 32))(*(_QWORD *)(a6 + 24), 192);
    *(_QWORD *)(a1 + 32) = result;
    if (!result)
    {
      *(_DWORD *)(a1 + 28) = 0;
      return result;
    }
    goto LABEL_16;
  }
  if (v10 > 0x3FFFFFFF)
    return 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a6 + 40))(*(_QWORD *)(a6 + 24), *(_QWORD *)(a1 + 32), 48 * v10);
  if (result)
  {
    *(_DWORD *)(a1 + 28) = 2 * v13;
    *(_QWORD *)(a1 + 32) = result;
    goto LABEL_16;
  }
  return result;
}

uint64_t poolGrow(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;

  v2 = a1[1];
  if (!v2)
    goto LABEL_5;
  v3 = (const void *)a1[4];
  if (!v3)
  {
    v20 = *(_QWORD *)v2;
    *a1 = v2;
    a1[1] = v20;
    *(_QWORD *)v2 = 0;
    a1[4] = v2 + 12;
    a1[2] = v2 + 12 + *(int *)(v2 + 8);
    a1[3] = v2 + 12;
    return 1;
  }
  v4 = a1[2] - (_QWORD)v3;
  if (v4 >= *(int *)(v2 + 8))
  {
LABEL_5:
    v9 = a1[4];
    v10 = *((_DWORD *)a1 + 4) - v9;
    if (*a1)
      v11 = v9 == *a1 + 12;
    else
      v11 = 0;
    if (v11)
    {
      v14 = 2 * v10;
      if (((2 * v10) & 0x80000000) == 0 && v14 && (int)(v14 + 12) >= 1)
      {
        v16 = a1[3];
        result = (*(uint64_t (**)(_QWORD))(a1[5] + 16))(*(_QWORD *)a1[5]);
        if (!result)
          return result;
        *a1 = result;
        *(_DWORD *)(result + 8) = v14;
        v18 = result + 12 + v16 - v9;
        a1[4] = result + 12;
        v19 = result + 12 + v14;
LABEL_28:
        a1[2] = v19;
        a1[3] = v18;
        return 1;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      if (v10 < 0x400)
      {
        v12 = 1024;
        v13 = 1036;
LABEL_23:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 8))(*(_QWORD *)a1[5], v13);
        if (!result)
          return result;
        v21 = result;
        *(_DWORD *)(result + 8) = v12;
        *(_QWORD *)result = *a1;
        *a1 = result;
        v23 = (_BYTE *)a1[3];
        v22 = (_BYTE *)a1[4];
        if (v23 == v22)
        {
          v24 = a1[3];
        }
        else
        {
          memcpy((void *)(result + 12), v22, v23 - v22);
          v24 = a1[3];
          v23 = (_BYTE *)a1[4];
        }
        v18 = v21 + 12 + v24 - (_QWORD)v23;
        a1[4] = v21 + 12;
        v19 = v21 + 12 + v12;
        goto LABEL_28;
      }
      if (v10 <= 0x3FFFFFF9)
      {
        v12 = 2 * v10;
        v13 = 2 * v10 + 12;
        goto LABEL_23;
      }
    }
    return 0;
  }
  v5 = *(_QWORD *)v2;
  *(_QWORD *)v2 = *a1;
  *a1 = v2;
  a1[1] = v5;
  memcpy((void *)(v2 + 12), v3, v4);
  v6 = *a1;
  v7 = *a1 + 12;
  v8 = v7 + a1[3] - a1[4];
  a1[4] = v7;
  a1[2] = v7 + *(int *)(v6 + 8);
  a1[3] = v8;
  return 1;
}

uint64_t storeAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  int v8;
  uint64_t result;
  _BYTE *v10;

  v8 = a3;
  result = appendAttributeValue(a1, a2, a3, a4, a5, a6, a7);
  if (!(_DWORD)result)
  {
    v10 = (_BYTE *)a6[3];
    if (!v8 && v10 != (_BYTE *)a6[4] && *(v10 - 1) == 32)
      a6[3] = (uint64_t)--v10;
    if (v10 == (_BYTE *)a6[2])
    {
      if (!poolGrow(a6))
        return 1;
      v10 = (_BYTE *)a6[3];
    }
    result = 0;
    a6[3] = (uint64_t)(v10 + 1);
    *v10 = 0;
  }
  return result;
}

uint64_t storeEntityValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[4];
  uint64_t v42;

  v10 = *(_QWORD *)(a1 + 680);
  v12 = *(_QWORD *)(v10 + 208);
  v11 = (uint64_t *)(v10 + 208);
  v13 = *(_DWORD *)(a1 + 528);
  *(_DWORD *)(a1 + 528) = 1;
  if (!v12 && !poolGrow(v11))
    return 1;
  v42 = a3;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, a3, a4, &v42);
  if (!accountingDiffTolerated(a1, v14, a3, v42, a5))
  {
LABEL_46:
    result = 43;
    goto LABEL_48;
  }
  while (2)
  {
    result = 0;
    switch(v14)
    {
      case -4:
        goto LABEL_48;
      case -3:
        v42 = a3 + *(int *)(a2 + 128);
        goto LABEL_24;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_50;
      case -1:
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = a3;
        goto LABEL_57;
      case 0:
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = v42;
LABEL_57:
        result = 4;
        goto LABEL_48;
      case 6:
      case 9:
        if (!poolAppend(v11, a2, a3, v42))
          goto LABEL_47;
        goto LABEL_28;
      case 7:
LABEL_24:
        v26 = *(_BYTE **)(v10 + 232);
        if (*(_BYTE **)(v10 + 224) != v26)
          goto LABEL_27;
        if (!poolGrow(v11))
          goto LABEL_47;
        v26 = *(_BYTE **)(v10 + 232);
LABEL_27:
        *(_QWORD *)(v10 + 232) = v26 + 1;
        *v26 = 10;
        goto LABEL_28;
      case 10:
        v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, a3);
        if ((v27 & 0x80000000) != 0)
        {
          if (*(_QWORD *)(a1 + 296) == a2)
            *(_QWORD *)(a1 + 552) = a3;
          result = 14;
          goto LABEL_48;
        }
        v28 = XmlUtf8Encode(v27, v41);
        if (v28 >= 1)
        {
          v29 = v28;
          v30 = v41;
          do
          {
            v31 = *(_BYTE **)(v10 + 232);
            if (*(_BYTE **)(v10 + 224) == v31)
            {
              if (!poolGrow(v11))
                goto LABEL_47;
              v31 = *(_BYTE **)(v10 + 232);
            }
            v32 = *v30++;
            *(_QWORD *)(v10 + 232) = v31 + 1;
            *v31 = v32;
            --v29;
          }
          while (v29);
        }
        goto LABEL_28;
      default:
        if (v14 != 28)
        {
LABEL_50:
          if (*(_QWORD *)(a1 + 296) == a2)
            *(_QWORD *)(a1 + 552) = a3;
          result = 23;
          goto LABEL_48;
        }
        if (!*(_BYTE *)(a1 + 920) && *(_QWORD *)(a1 + 296) == a2)
        {
          *(_QWORD *)(a1 + 552) = a3;
          result = 10;
          goto LABEL_48;
        }
        v16 = (char *)poolStoreString((uint64_t *)(a1 + 792), a2, a3 + *(int *)(a2 + 128), v42 - *(int *)(a2 + 128));
        if (!v16)
        {
LABEL_47:
          result = 1;
          goto LABEL_48;
        }
        result = (uint64_t)lookup(a1, (uint64_t *)(v10 + 264), v16, 0);
        *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 824);
        if (!result)
        {
          *(_BYTE *)(v10 + 256) = *(_BYTE *)(v10 + 258);
          goto LABEL_48;
        }
        v17 = result;
        if (!*(_BYTE *)(result + 56))
        {
          if (*(_QWORD *)(result + 24))
          {
            v18 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 232);
            if (!v18)
              goto LABEL_22;
            *(_BYTE *)(v10 + 259) = 0;
            *(_BYTE *)(result + 56) = 1;
            v19 = a1;
            do
            {
              v20 = (_DWORD *)v19;
              v19 = *(_QWORD *)(v19 + 904);
            }
            while (v19);
            ++v20[242];
            v21 = v20[243] + 1;
            v20[243] = v21;
            v22 = v20[244];
            if (v21 > v22)
              v20[244] = v22 + 1;
            v23 = v18(*(_QWORD *)(a1 + 240), 0, *(_QWORD *)(result + 32));
            v24 = a1;
            if (!v23)
            {
              v39 = a1;
              do
              {
                v40 = v39;
                v39 = *(_QWORD *)(v39 + 904);
              }
              while (v39);
              --*(_DWORD *)(v40 + 972);
              *(_BYTE *)(v17 + 56) = 0;
              result = 21;
              goto LABEL_48;
            }
            do
            {
              v25 = v24;
              v24 = *(_QWORD *)(v24 + 904);
            }
            while (v24);
            --*(_DWORD *)(v25 + 972);
            *(_BYTE *)(v17 + 56) = 0;
            if (!*(_BYTE *)(v10 + 259))
LABEL_22:
              *(_BYTE *)(v10 + 256) = *(_BYTE *)(v10 + 258);
          }
          else
          {
            *(_BYTE *)(result + 56) = 1;
            v33 = a1;
            do
            {
              v34 = (_DWORD *)v33;
              v33 = *(_QWORD *)(v33 + 904);
            }
            while (v33);
            ++v34[242];
            v35 = v34[243] + 1;
            v34[243] = v35;
            v36 = v34[244];
            if (v35 > v36)
              v34[244] = v36 + 1;
            result = storeEntityValue(a1, *(_QWORD *)(a1 + 448), *(_QWORD *)(result + 8), *(_QWORD *)(result + 8) + *(int *)(result + 16), 1);
            v37 = a1;
            do
            {
              v38 = v37;
              v37 = *(_QWORD *)(v37 + 904);
            }
            while (v37);
            --*(_DWORD *)(v38 + 972);
            *(_BYTE *)(v17 + 56) = 0;
            if ((_DWORD)result)
              goto LABEL_48;
          }
LABEL_28:
          a3 = v42;
          v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, v42, a4, &v42);
          if (!accountingDiffTolerated(a1, v14, a3, v42, a5))
            goto LABEL_46;
          continue;
        }
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = a3;
        result = 12;
LABEL_48:
        *(_DWORD *)(a1 + 528) = v13;
        return result;
    }
  }
}

uint64_t doIgnoreSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v11 = *a3;
  v17 = *a3;
  if (*(_QWORD *)(a1 + 296) == a2)
  {
    v12 = (uint64_t *)(a1 + 552);
    *(_QWORD *)(a1 + 552) = v11;
    v13 = (_QWORD *)(a1 + 560);
  }
  else
  {
    v12 = *(uint64_t **)(a1 + 576);
    v13 = v12 + 1;
  }
  *v12 = v11;
  *a3 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 24))(a2, v11, a4, &v17);
  if (!accountingDiffTolerated(a1, v14, v11, v17, 0))
    return 43;
  v15 = v17;
  *v13 = v17;
  switch(v14)
  {
    case -4:
    case -1:
      if (a6)
        goto LABEL_17;
      result = 2;
      break;
    case -3:
      goto LABEL_15;
    case -2:
      if (a6)
      {
LABEL_17:
        result = 0;
        *a5 = v11;
      }
      else
      {
        result = 6;
      }
      break;
    case 0:
      *v12 = v15;
      result = 4;
      break;
    default:
      if (v14 == 42)
      {
        if (*(_QWORD *)(a1 + 168))
        {
          reportDefault(a1, a2, v11, v15);
          v15 = v17;
        }
        *a3 = v15;
        *a5 = v15;
        if (*(_DWORD *)(a1 + 912) == 2)
          result = 35;
        else
          result = 0;
      }
      else
      {
LABEL_15:
        *v12 = v15;
        result = 23;
      }
      break;
  }
  return result;
}

uint64_t ignoreSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  result = doIgnoreSection(a1, *(_QWORD *)(a1 + 296), &v9, a3, a4, *(_BYTE *)(a1 + 916) == 0);
  if (!(_DWORD)result)
  {
    v8 = v9;
    if (v9)
    {
      *(_QWORD *)(a1 + 536) = prologProcessor;
      return prologProcessor(a1, v8, a3, a4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t nextScaffoldPart(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 680);
  if (!*(_QWORD *)(v2 + 352))
  {
    v3 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 4 * *(unsigned int *)(a1 + 896));
    *(_QWORD *)(v2 + 352) = v3;
    if (!v3)
      return 0xFFFFFFFFLL;
    *v3 = 0;
  }
  result = *(unsigned int *)(v2 + 344);
  v5 = *(_DWORD *)(v2 + 340);
  v6 = *(_QWORD *)(v2 + 328);
  if (result >= v5)
  {
    if (v6)
    {
      if ((v5 & 0x80000000) == 0)
      {
        v7 = (*(uint64_t (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 24));
        if (v7)
        {
          v6 = v7;
          v8 = 2 * *(_DWORD *)(v2 + 340);
LABEL_11:
          *(_DWORD *)(v2 + 340) = v8;
          *(_QWORD *)(v2 + 328) = v6;
          result = *(unsigned int *)(v2 + 344);
          goto LABEL_12;
        }
      }
    }
    else
    {
      v9 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 1024);
      if (v9)
      {
        v6 = v9;
        v8 = 32;
        goto LABEL_11;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  *(_DWORD *)(v2 + 344) = result + 1;
  v10 = *(_DWORD *)(v2 + 348);
  if (v10)
  {
    v11 = *(int *)(*(_QWORD *)(v2 + 352) + 4 * (v10 - 1));
    v12 = v6 + 32 * v11;
    v13 = (_DWORD *)(v12 + 20);
    v14 = *(int *)(v12 + 20);
    if ((_DWORD)v14)
      *(_DWORD *)(v6 + 32 * v14 + 28) = result;
    v17 = *(_DWORD *)(v12 + 24);
    v15 = (_DWORD *)(v12 + 24);
    v16 = v17;
    if (!v17)
      *(_DWORD *)(v6 + 32 * v11 + 16) = result;
    *v13 = result;
    *v15 = v16 + 1;
  }
  v18 = v6 + 32 * (int)result;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  return result;
}

uint64_t processInternalEntity(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(_QWORD, uint64_t, uint64_t, uint64_t *);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 584);
  if (v6)
  {
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(v6 + 16);
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 40);
    if (!v6)
      return 1;
  }
  *(_BYTE *)(a2 + 56) = 1;
  v7 = a1;
  do
  {
    v8 = (_DWORD *)v7;
    v7 = *(_QWORD *)(v7 + 904);
  }
  while (v7);
  ++v8[242];
  v9 = v8[243] + 1;
  v8[243] = v9;
  v10 = v8[244];
  if (v9 > v10)
    v8[244] = v10 + 1;
  *(_DWORD *)(a2 + 20) = 0;
  v11 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v6;
  *(_QWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 24) = a2;
  v12 = *(unsigned int *)(a1 + 596);
  *(_DWORD *)(v6 + 32) = v12;
  *(_BYTE *)(v6 + 36) = a3;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = v13 + *(int *)(a2 + 16);
  v20 = v13;
  v15 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t *))(a1 + 448);
  if (*(_BYTE *)(a2 + 57))
  {
    v16 = (*v15)(*(_QWORD *)(a1 + 448), v13, v14, &v20);
    result = doProlog(a1, *(_QWORD *)(a1 + 448), v13, v14, v16, v20, &v20, 0, 0);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = doContent(a1, v12, v15, v13, v14, &v20, 0, 1);
    if ((_DWORD)result)
      return result;
  }
  v18 = a1;
  if (v14 == v20 || (v18 = a1, *(_DWORD *)(a1 + 912) != 3))
  {
    do
    {
      v19 = v18;
      v18 = *(_QWORD *)(v18 + 904);
    }
    while (v18);
    result = 0;
    --*(_DWORD *)(v19 + 972);
    *(_BYTE *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 584) = v6;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a2 + 20) = v20 - v13;
    *(_QWORD *)(a1 + 536) = internalEntityProcessor;
  }
  return result;
}

uint64_t reportProcessingInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(_QWORD *)(a1 + 136))
  {
    v7 = a3 + 2 * *(int *)(a2 + 128);
    v8 = v7 + (*(int (**)(uint64_t, uint64_t))(a2 + 56))(a2, v7);
    result = poolStoreString((uint64_t *)(a1 + 792), a2, v7, v8);
    if (result)
    {
      v10 = result;
      *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 816);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a2, v8);
      result = poolStoreString((uint64_t *)(a1 + 792), a2, v11, a4 - 2 * *(int *)(a2 + 128));
      if (result)
      {
        v12 = result;
        normalizeLines((_BYTE *)result);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 136))(*(_QWORD *)(a1 + 8), v10, v12);
        v13 = *(_QWORD **)(a1 + 800);
        v14 = *(_QWORD **)(a1 + 792);
        if (v13)
        {
          if (!v14)
          {
LABEL_13:
            *(_QWORD *)(a1 + 792) = 0;
            *(_QWORD *)(a1 + 808) = 0;
            *(_QWORD *)(a1 + 824) = 0;
            result = 1;
            *(_QWORD *)(a1 + 816) = 0;
            return result;
          }
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
            *v15 = v13;
            v13 = v15;
          }
          while (v14);
        }
        else
        {
          v15 = *(_QWORD **)(a1 + 792);
        }
        *(_QWORD *)(a1 + 800) = v15;
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 168))
      reportDefault(a1, a2, a3, a4);
    return 1;
  }
  return result;
}

uint64_t reportComment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_QWORD *)(a1 + 144))
  {
    result = poolStoreString((uint64_t *)(a1 + 792), a2, a3 + 4 * *(int *)(a2 + 128), a4 - 3 * *(int *)(a2 + 128));
    if (!result)
      return result;
    v6 = result;
    normalizeLines((_BYTE *)result);
    (*(void (**)(_QWORD, uint64_t))(a1 + 144))(*(_QWORD *)(a1 + 8), v6);
    v7 = *(_QWORD **)(a1 + 800);
    v8 = *(_QWORD **)(a1 + 792);
    if (v7)
    {
      if (!v8)
      {
LABEL_12:
        *(_QWORD *)(a1 + 792) = 0;
        *(_QWORD *)(a1 + 808) = 0;
        *(_QWORD *)(a1 + 824) = 0;
        result = 1;
        *(_QWORD *)(a1 + 816) = 0;
        return result;
      }
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
        *v9 = v7;
        v7 = v9;
      }
      while (v8);
    }
    else
    {
      v9 = *(_QWORD **)(a1 + 792);
    }
    *(_QWORD *)(a1 + 800) = v9;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 168))
    reportDefault(a1, a2, a3, a4);
  return 1;
}

int8x8_t hash(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = a1;
    a1 = *(_QWORD *)(a1 + 904);
  }
  while (a1);
  v3 = *(_QWORD *)(v2 + 928);
  v8.i64[0] = 0x736F6D6570736575;
  v8.i64[1] = v3 ^ 0x646F72616E646F6DLL;
  v9 = 0x6C7967656E657261;
  v10 = v3 ^ 0x7465646279746573;
  v11[1] = v11;
  v11[2] = 0;
  if (*a2)
  {
    v4 = 0;
    do
      v5 = v4 + 1;
    while (a2[++v4]);
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 0;
  sip24_update(v8.i64, a2, v5);
  return sip24_final(&v8);
}

uint64_t *sip24_update(uint64_t *a1, char *a2, uint64_t a3)
{
  char *v3;
  unint64_t v5;
  _BYTE **v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a2;
  v5 = (unint64_t)&a2[a3];
  v6 = (_BYTE **)(a1 + 5);
  v7 = a1 + 4;
  v8 = (uint64_t)&a2[a3 - 1];
  do
  {
    if ((unint64_t)v3 >= v5)
    {
      v13 = 0;
    }
    else
    {
      v9 = *v6;
      if (*v6 >= (_BYTE *)v6)
      {
        v13 = 1;
      }
      else
      {
        v10 = v8 - (_QWORD)v3;
        while (1)
        {
          v11 = v3;
          v12 = *v3++;
          *v6 = v9 + 1;
          *v9 = v12;
          if (!v10)
            break;
          v9 = *v6;
          --v10;
          if (*v6 >= (_BYTE *)v6)
            goto LABEL_11;
        }
        v3 = (char *)v5;
LABEL_11:
        v13 = (unint64_t)(v11 + 1) < v5;
      }
    }
    if (*v6 < (_BYTE *)v6)
      break;
    v14 = a1[4];
    a1[3] ^= v14;
    sip_round(a1, 2);
    *a1 ^= v14;
    v15 = a1[6] + 8;
    a1[5] = (uint64_t)v7;
    a1[6] = v15;
  }
  while (v13);
  return a1;
}

int8x8_t sip24_final(int8x16_t *a1)
{
  __int32 v2;
  unint64_t v3;
  int8x16_t v4;

  v2 = a1[2].i32[2] - ((_DWORD)a1 + 32);
  v3 = (unint64_t)(v2 + a1[3].i32[0]) << 56;
  switch((char)v2)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      v3 |= (unint64_t)a1[2].u8[6] << 48;
LABEL_3:
      v3 |= (unint64_t)a1[2].u8[5] << 40;
LABEL_4:
      v3 |= (unint64_t)a1[2].u8[4] << 32;
LABEL_5:
      v3 |= (unint64_t)a1[2].u8[3] << 24;
LABEL_6:
      v3 |= (unint64_t)a1[2].u8[2] << 16;
LABEL_7:
      v3 |= (unint64_t)a1[2].u8[1] << 8;
LABEL_8:
      v3 |= a1[2].u8[0];
      break;
    default:
      break;
  }
  a1[1].i64[1] ^= v3;
  sip_round(a1->i64, 2);
  a1->i64[0] ^= v3;
  a1[1].i64[0] ^= 0xFFuLL;
  sip_round(a1->i64, 4);
  v4 = veorq_s8(*a1, a1[1]);
  return veor_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
}

uint64_t *sip_round(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 1)
  {
    v2 = *result;
    v3 = result[1];
    v5 = result[2];
    v4 = result[3];
    do
    {
      v6 = v2 + v3;
      v7 = v6 ^ __ROR8__(v3, 51);
      v8 = v5 + v4;
      v9 = __ROR8__(v4, 48);
      v2 = (v8 ^ v9) + __ROR8__(v6, 32);
      v4 = v2 ^ __ROR8__(v8 ^ v9, 43);
      v10 = v8 + v7;
      v3 = v10 ^ __ROR8__(v7, 47);
      v5 = __ROR8__(v10, 32);
      --a2;
    }
    while (a2);
    *result = v2;
    result[1] = v3;
    result[2] = v5;
    result[3] = v4;
  }
  return result;
}

uint64_t doContent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, int a8)
{
  int v8;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void (*v28)(_QWORD, char *, _QWORD);
  void (*v29)(_QWORD, char *);
  uint64_t v30;
  char *v31;
  int v32;
  void (*v33)(_QWORD, _QWORD);
  _BYTE *v34;
  _BYTE *v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  _BYTE *v39;
  BOOL v40;
  char v41;
  unsigned __int8 *v42;
  int v43;
  void (*v44)(uint64_t, char **, uint64_t);
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void (*v50)(_QWORD, char **, uint64_t);
  void (*v51)(_QWORD);
  void (*v52)(uint64_t, char **, uint64_t);
  uint64_t v53;
  char **v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  _OWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t Context;
  void (*v92)(_QWORD, char *, _QWORD);
  int v93;
  uint64_t v94;
  int v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD, char **, uint64_t);
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  _QWORD *v107;
  uint64_t *v108;
  char *v111;
  __int128 v112;
  __int128 v113;
  unint64_t v114;
  char **v115;
  char **v116;

  v8 = a7;
  v116 = (char **)a4;
  v14 = *(_QWORD *)(a1 + 680);
  if (*(_QWORD *)(a1 + 296) == a3)
  {
    v15 = (uint64_t *)(a1 + 552);
    v16 = (uint64_t *)(a1 + 560);
  }
  else
  {
    v15 = *(uint64_t **)(a1 + 576);
    v16 = v15 + 1;
  }
  *v15 = a4;
  v107 = (_QWORD *)(a1 + 808);
  v108 = (uint64_t *)(a1 + 792);
  v104 = v14;
  v105 = (uint64_t *)(v14 + 160);
  while (2)
  {
    v115 = v116;
    v17 = (*(uint64_t (**)(uint64_t))(a3 + 8))(a3);
    v18 = v17;
    if (v17 == -3 || v17 == -5)
    {
      v20 = (uint64_t)v116;
      if (v8)
        v21 = (uint64_t)v116;
      else
        v21 = a5;
    }
    else
    {
      v21 = (uint64_t)v115;
      v20 = (uint64_t)v116;
    }
    if (!accountingDiffTolerated(a1, v17, v20, v21, a8))
      return 43;
    v22 = (uint64_t)v115;
    *v16 = (uint64_t)v115;
    v23 = 17;
    switch(v18)
    {
      case -5:
        if (v8)
          goto LABEL_166;
        v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
        if (v96)
        {
          if (*(_BYTE *)(a3 + 132))
          {
            v97 = *(_QWORD *)(a1 + 8);
            v98 = (uint64_t)v116;
            v99 = (a5 - (_DWORD)v116);
          }
          else
          {
            v102 = *(_QWORD *)(a1 + 104);
            v111 = *(char **)(a1 + 96);
            (*(void (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, a5, &v111, v102);
            v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
            v97 = *(_QWORD *)(a1 + 8);
            v98 = *(_QWORD *)(a1 + 96);
            v99 = ((_DWORD)v111 - v98);
          }
          v96(v97, v98, v99);
        }
        else if (*(_QWORD *)(a1 + 168))
        {
          reportDefault(a1, a3, (uint64_t)v116, a5);
        }
        if (!a2)
        {
          *v15 = a5;
          return 3;
        }
        if (*(_DWORD *)(a1 + 596) == a2)
          goto LABEL_193;
        *v15 = a5;
        return 13;
      case -4:
        if (v8)
          goto LABEL_166;
        if (a2 < 1)
          return 3;
        if (*(_DWORD *)(a1 + 596) != a2)
          return 13;
LABEL_166:
        v23 = 0;
        v94 = (uint64_t)v116;
        goto LABEL_167;
      case -3:
        if (v8)
          goto LABEL_166;
        *v16 = a5;
        v100 = *(void (**)(_QWORD, char **, uint64_t))(a1 + 128);
        if (v100)
        {
          LOBYTE(v111) = 10;
          v100(*(_QWORD *)(a1 + 8), &v111, 1);
        }
        else if (*(_QWORD *)(a1 + 168))
        {
          reportDefault(a1, a3, (uint64_t)v116, a5);
        }
        if (!a2)
          return 3;
        if (*(_DWORD *)(a1 + 596) != a2)
          return 13;
LABEL_193:
        v23 = 0;
        *a6 = a5;
        return v23;
      case -2:
        if (v8)
          goto LABEL_166;
        return 6;
      case -1:
        if (v8)
          goto LABEL_166;
        return 5;
      case 0:
        *v15 = v22;
        return 4;
      case 1:
      case 2:
        v111 = 0;
        v24 = *(_QWORD *)(a1 + 704);
        v106 = a2;
        if (v24)
        {
          *(_QWORD *)(a1 + 704) = *(_QWORD *)v24;
LABEL_69:
          *(_QWORD *)(v24 + 80) = 0;
          *(_QWORD *)v24 = *(_QWORD *)(a1 + 696);
          *(_QWORD *)(a1 + 696) = v24;
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = 0;
          *(_QWORD *)(v24 + 8) = (char *)v116 + *(int *)(a3 + 128);
          v60 = (*(uint64_t (**)(uint64_t))(a3 + 56))(a3);
          *(_DWORD *)(v24 + 16) = v60;
          ++*(_DWORD *)(a1 + 596);
          v61 = *(_QWORD *)(v24 + 8) + v60;
          v114 = *(_QWORD *)(v24 + 8);
          v62 = *(_QWORD *)(v24 + 72);
          v111 = *(char **)(v24 + 64);
          v63 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v62 - 1);
          v64 = v111;
          v65 = *(_QWORD *)(v24 + 64);
          v66 = (_DWORD)v111 - v65;
          if (v114 < v61 && v63 != 1)
          {
            v103 = a6;
            do
            {
              v67 = 2 * (*(_DWORD *)(v24 + 72) - (int)v65);
              v68 = (*(uint64_t (**)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 24));
              if (!v68)
                return 1;
              *(_QWORD *)(v24 + 64) = v68;
              *(_QWORD *)(v24 + 72) = v68 + v67;
              v111 = (char *)(v68 + v66);
              v69 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v68 + v67 - 1);
              v64 = v111;
              v65 = *(_QWORD *)(v24 + 64);
              v66 = (_DWORD)v111 - v65;
            }
            while (v114 < v61 && v69 != 1);
            a6 = v103;
          }
          *(_DWORD *)(v24 + 48) = v66;
          *(_QWORD *)(v24 + 24) = v65;
          *v64 = 0;
          v71 = storeAtts(a1, a3, (uint64_t)v116, (char **)(v24 + 24), (uint64_t *)(v24 + 80), a8);
          if ((_DWORD)v71)
            return v71;
          v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 112);
          if (v72)
          {
            v72(*(_QWORD *)(a1 + 8), *(_QWORD *)(v24 + 24), *(_QWORD *)(a1 + 744));
            a2 = v106;
            v8 = a7;
          }
          else
          {
            a2 = v106;
            v8 = a7;
            if (*(_QWORD *)(a1 + 168))
              reportDefault(a1, a3, (uint64_t)v116, (uint64_t)v115);
          }
          v76 = *(_QWORD **)(a1 + 800);
          v77 = *(_QWORD **)(a1 + 792);
          if (v76)
          {
            if (!v77)
            {
LABEL_100:
              *v108 = 0;
              v107[1] = 0;
              v107[2] = 0;
              *v107 = 0;
              goto LABEL_143;
            }
            do
            {
              v78 = v77;
              v77 = (_QWORD *)*v77;
              *v78 = v76;
              v76 = v78;
            }
            while (v77);
          }
          else
          {
            v78 = *(_QWORD **)(a1 + 792);
          }
          *(_QWORD *)(a1 + 800) = v78;
          goto LABEL_100;
        }
        v58 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 88);
        if (!v58)
          return 1;
        v24 = v58;
        v59 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 32);
        *(_QWORD *)(v24 + 64) = v59;
        if (v59)
        {
          *(_QWORD *)(v24 + 72) = v59 + 32;
          goto LABEL_69;
        }
        (*(void (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 24), v24);
        return 1;
      case 3:
      case 4:
        v25 = (uint64_t)v116 + *(int *)(a3 + 128);
        v114 = 0;
        v112 = 0u;
        v113 = 0u;
        v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a3, v25);
        v111 = (char *)poolStoreString(v108, a3, v25, v25 + v26);
        if (!v111)
          return 1;
        *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 816);
        v27 = storeAtts(a1, a3, (uint64_t)v116, &v111, (uint64_t *)&v114, 2);
        if ((_DWORD)v27)
        {
          v23 = v27;
          freeBindings(a1, v114);
          return v23;
        }
        *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 816);
        v28 = *(void (**)(_QWORD, char *, _QWORD))(a1 + 112);
        if (v28)
        {
          v28(*(_QWORD *)(a1 + 8), v111, *(_QWORD *)(a1 + 744));
          v29 = *(void (**)(_QWORD, char *))(a1 + 120);
          if (!v29)
            goto LABEL_84;
          if (*(_QWORD *)(a1 + 112))
          {
            *v15 = *v16;
            (*(void (**)(_QWORD, char *))(a1 + 120))(*(_QWORD *)(a1 + 8), v111);
            goto LABEL_84;
          }
LABEL_83:
          v29(*(_QWORD *)(a1 + 8), v111);
          goto LABEL_84;
        }
        v29 = *(void (**)(_QWORD, char *))(a1 + 120);
        if (v29)
          goto LABEL_83;
        if (*(_QWORD *)(a1 + 168))
          reportDefault(a1, a3, (uint64_t)v116, (uint64_t)v115);
LABEL_84:
        v73 = *(_QWORD **)(a1 + 800);
        v74 = *(_QWORD **)(a1 + 792);
        if (v73)
        {
          if (!v74)
            goto LABEL_90;
          do
          {
            v75 = v74;
            v74 = (_QWORD *)*v74;
            *v75 = v73;
            v73 = v75;
          }
          while (v74);
        }
        else
        {
          v75 = *(_QWORD **)(a1 + 792);
        }
        *(_QWORD *)(a1 + 800) = v75;
LABEL_90:
        *(_QWORD *)(a1 + 792) = 0;
        v107[1] = 0;
        v107[2] = 0;
        *v107 = 0;
        freeBindings(a1, v114);
        if (!*(_DWORD *)(a1 + 596))
          goto LABEL_147;
        goto LABEL_143;
      case 5:
        if (*(_DWORD *)(a1 + 596) == a2)
          return 13;
        v30 = *(_QWORD *)(a1 + 696);
        v31 = (char *)v116 + 2 * *(int *)(a3 + 128);
        v32 = (*(uint64_t (**)(uint64_t, char *))(a3 + 56))(a3, v31);
        if (v32 != *(_DWORD *)(v30 + 16) || memcmp(*(const void **)(v30 + 8), v31, v32))
        {
          *v15 = (uint64_t)v31;
          return 7;
        }
        *(_QWORD *)(a1 + 696) = *(_QWORD *)v30;
        *(_QWORD *)v30 = *(_QWORD *)(a1 + 704);
        *(_QWORD *)(a1 + 704) = v30;
        --*(_DWORD *)(a1 + 596);
        v33 = *(void (**)(_QWORD, _QWORD))(a1 + 120);
        if (v33)
        {
          if (*(_BYTE *)(a1 + 464))
          {
            v34 = *(_BYTE **)(v30 + 32);
            if (v34)
            {
              v35 = (_BYTE *)(*(_QWORD *)(v30 + 24) + *(int *)(v30 + 52));
              v36 = *v34;
              if (*v34)
              {
                v37 = v34 + 1;
                do
                {
                  *v35++ = v36;
                  v38 = *v37++;
                  v36 = v38;
                }
                while (v38);
              }
              v39 = *(_BYTE **)(v30 + 40);
              if (*(_BYTE *)(a1 + 465))
                v40 = v39 == 0;
              else
                v40 = 1;
              if (!v40)
              {
                *v35++ = *(_BYTE *)(a1 + 900);
                v41 = *v39;
                if (*v39)
                {
                  v42 = v39 + 1;
                  do
                  {
                    *v35++ = v41;
                    v43 = *v42++;
                    v41 = v43;
                  }
                  while (v43);
                }
              }
              *v35 = 0;
              v33 = *(void (**)(_QWORD, _QWORD))(a1 + 120);
            }
          }
          v33(*(_QWORD *)(a1 + 8), *(_QWORD *)(v30 + 24));
        }
        else if (*(_QWORD *)(a1 + 168))
        {
          reportDefault(a1, a3, (uint64_t)v116, (uint64_t)v115);
        }
        v87 = *(_QWORD *)(v30 + 80);
        if (v87)
        {
          do
          {
            v88 = *(void (**)(_QWORD, _QWORD))(a1 + 216);
            v89 = v87;
            if (v88)
            {
              v88(*(_QWORD *)(a1 + 8), **(_QWORD **)v87);
              v89 = *(_QWORD *)(v30 + 80);
            }
            v90 = *(_QWORD *)(v89 + 8);
            *(_QWORD *)(v30 + 80) = v90;
            *(_QWORD *)(v87 + 8) = *(_QWORD *)(a1 + 720);
            *(_QWORD *)(a1 + 720) = v87;
            *(_QWORD *)(*(_QWORD *)v87 + 8) = *(_QWORD *)(v87 + 16);
            v87 = v90;
          }
          while (v90);
        }
        v8 = a7;
        if (*(_DWORD *)(a1 + 596))
          goto LABEL_143;
LABEL_147:
        v95 = *(_DWORD *)(a1 + 912);
        if (v95 == 2)
        {
          *v15 = (uint64_t)v115;
          return 35;
        }
        else if (v95 == 3)
        {
          *(_QWORD *)(a1 + 536) = epilogProcessor;
          *v15 = (uint64_t)v115;
LABEL_145:
          v23 = 0;
          v94 = (uint64_t)v115;
LABEL_167:
          *a6 = v94;
        }
        else
        {
          return epilogProcessor(a1, (uint64_t)v115, a5, a6);
        }
        return v23;
      case 6:
        v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
        if (v44)
        {
          if (*(_BYTE *)(a3 + 132))
          {
            v45 = *(_QWORD *)(a1 + 8);
            v46 = v116;
            v47 = (v22 - (_DWORD)v116);
            goto LABEL_60;
          }
          while (1)
          {
            v48 = *(_QWORD *)(a1 + 104);
            v111 = *(char **)(a1 + 96);
            v49 = (*(uint64_t (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, v22, &v111, v48);
            *v16 = (uint64_t)v116;
            v44(*(_QWORD *)(a1 + 8), *(char ***)(a1 + 96), v111 - *(_QWORD *)(a1 + 96));
            if (v49 <= 1)
              break;
            *v15 = (uint64_t)v116;
            v22 = (uint64_t)v115;
          }
          goto LABEL_61;
        }
        v8 = a7;
        if (!*(_QWORD *)(a1 + 168))
          goto LABEL_143;
LABEL_102:
        v79 = (uint64_t)v116;
        v80 = a1;
        v81 = a3;
        v82 = v22;
        goto LABEL_142;
      case 7:
        v50 = *(void (**)(_QWORD, char **, uint64_t))(a1 + 128);
        if (!v50)
          goto LABEL_49;
        LOBYTE(v111) = 10;
        v50(*(_QWORD *)(a1 + 8), &v111, 1);
        goto LABEL_143;
      case 8:
        v51 = *(void (**)(_QWORD))(a1 + 152);
        if (v51)
        {
          v51(*(_QWORD *)(a1 + 8));
        }
        else if (*(_QWORD *)(a1 + 168))
        {
          reportDefault(a1, a3, (uint64_t)v116, v22);
        }
        v71 = doCdataSection(a1, a3, (uint64_t *)&v115, a5, a6, v8, a8);
        if ((_DWORD)v71)
          return v71;
        if (v115)
          goto LABEL_143;
        v23 = 0;
        *(_QWORD *)(a1 + 536) = cdataSectionProcessor;
        return v23;
      case 9:
        LOBYTE(v111) = 0;
        LOBYTE(v111) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(a3, (uint64_t)v116 + *(int *)(a3 + 128), v22 - *(int *)(a3 + 128));
        if ((_BYTE)v111)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v111, (uint64_t)&v111 + 1, 1);
          v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
          if (v52)
          {
            v53 = *(_QWORD *)(a1 + 8);
            v54 = &v111;
            v55 = 1;
LABEL_56:
            v52(v53, v54, v55);
            goto LABEL_143;
          }
LABEL_140:
          if (!*(_QWORD *)(a1 + 168))
            goto LABEL_143;
LABEL_141:
          v82 = (uint64_t)v115;
          v79 = (uint64_t)v116;
          v80 = a1;
          v81 = a3;
LABEL_142:
          reportDefault(v80, v81, v79, v82);
          goto LABEL_143;
        }
        v83 = (char *)poolStoreString(v105, a3, (uint64_t)v116 + *(int *)(a3 + 128), (uint64_t)v115 - *(int *)(a3 + 128));
        if (!v83)
          return 1;
        v84 = v83;
        v85 = lookup(a1, (uint64_t *)v104, v83, 0);
        v86 = v85;
        *(_QWORD *)(v104 + 184) = *(_QWORD *)(v104 + 192);
        if (!*(_BYTE *)(v104 + 257) || *(_BYTE *)(v104 + 258))
        {
          if (!v85)
            return 11;
          if (!*((_BYTE *)v85 + 58))
            return 24;
LABEL_113:
          if (*((_BYTE *)v85 + 56))
            return 12;
          if (*((_QWORD *)v85 + 6))
            return 15;
          if (*((_QWORD *)v85 + 1))
          {
            if (*(_BYTE *)(a1 + 592))
            {
              v71 = processInternalEntity(a1, (uint64_t)v85, 0);
              v8 = a7;
              if ((_DWORD)v71)
                return v71;
              goto LABEL_143;
            }
            v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 248);
            v8 = a7;
            if (v52)
            {
              v53 = *(_QWORD *)(a1 + 8);
              v54 = *(char ***)v86;
              v55 = 0;
              goto LABEL_56;
            }
            goto LABEL_140;
          }
          if (!*(_QWORD *)(a1 + 232))
            goto LABEL_136;
          v23 = 1;
          *((_BYTE *)v85 + 56) = 1;
          Context = getContext(a1);
          *((_BYTE *)v86 + 56) = 0;
          v8 = a7;
          if (!Context)
            return v23;
          if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 232))(*(_QWORD *)(a1 + 240), Context, *((_QWORD *)v86 + 4), *((_QWORD *)v86 + 3), *((_QWORD *)v86 + 5)))return 21;
          *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 824);
          goto LABEL_143;
        }
        if (v85)
          goto LABEL_113;
        v92 = *(void (**)(_QWORD, char *, _QWORD))(a1 + 248);
        if (!v92)
        {
LABEL_136:
          v8 = a7;
          if (!*(_QWORD *)(a1 + 168))
            goto LABEL_143;
          goto LABEL_141;
        }
        v92(*(_QWORD *)(a1 + 8), v84, 0);
LABEL_61:
        v8 = a7;
LABEL_143:
        v93 = *(_DWORD *)(a1 + 912);
        v116 = v115;
        *v15 = (uint64_t)v115;
        if (v93 == 2)
          return 35;
        if (v93 == 3)
          goto LABEL_145;
        continue;
      case 10:
        v56 = (*(uint64_t (**)(uint64_t, char **))(a3 + 80))(a3, v116);
        if ((v56 & 0x80000000) != 0)
          return 14;
        v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 128);
        if (!v44)
          goto LABEL_136;
        v57 = *(_QWORD *)(a1 + 8);
        v47 = XmlUtf8Encode(v56, &v111);
        v46 = &v111;
        v45 = v57;
LABEL_60:
        v44(v45, v46, v47);
        goto LABEL_61;
      case 11:
        if (!reportProcessingInstruction(a1, a3, (uint64_t)v116, v22))
          return 1;
        goto LABEL_143;
      case 12:
        return v23;
      case 13:
        if (!reportComment(a1, a3, (uint64_t)v116, v22))
          return 1;
        goto LABEL_143;
      default:
LABEL_49:
        if (!*(_QWORD *)(a1 + 168))
          goto LABEL_143;
        goto LABEL_102;
    }
  }
}

uint64_t storeRawNames(uint64_t a1)
{
  uint64_t **i;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;

  for (i = *(uint64_t ***)(a1 + 696); i; i = (uint64_t **)*i)
  {
    v3 = *((int *)i + 12) + 1;
    v4 = i[8];
    v5 = (char *)v4 + v3;
    v6 = i[1];
    if (v6 == (uint64_t *)((char *)v4 + v3))
      break;
    v7 = *((int *)i + 4);
    if (2147483646 - *((int *)i + 12) < v7)
      return 0;
    v8 = v7 + v3;
    if ((char *)i[9] - (char *)v4 < (int)v7 + (int)v3)
    {
      v9 = v8;
      result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 24), i[8], v8);
      if (!result)
        return result;
      v11 = i[8];
      if (i[3] == v11)
        i[3] = (uint64_t *)result;
      v12 = i[4];
      if (v12)
        i[4] = (uint64_t *)(result + (char *)v12 - (char *)v11);
      i[8] = (uint64_t *)result;
      i[9] = (uint64_t *)(result + v9);
      v5 = (char *)(result + v3);
      v6 = i[1];
      v7 = *((int *)i + 4);
    }
    memcpy(v5, v6, v7);
    i[1] = (uint64_t *)v5;
  }
  return 1;
}

uint64_t getContext(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t i;
  _BYTE *v7;
  char v8;
  char ***v9;
  char ***v10;
  char ***v11;
  char **v12;
  char **v13;
  _BYTE *v14;
  char v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  _BYTE *v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  char v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  int v32;
  _BYTE *v33;

  v2 = *(_QWORD *)(a1 + 680);
  v3 = *(_BYTE **)(v2 + 312);
  if (v3)
  {
    v4 = *(_BYTE **)(a1 + 816);
    if (v4 == *(_BYTE **)(a1 + 808))
    {
      if (!poolGrow((uint64_t *)(a1 + 792)))
        return 0;
      v4 = *(_BYTE **)(a1 + 816);
    }
    *(_QWORD *)(a1 + 816) = v4 + 1;
    *v4 = 61;
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 312) + 40) - (*(_BYTE *)(a1 + 900) != 0);
    if ((int)v5 >= 1)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(_BYTE **)(a1 + 816);
        if (v7 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792)))
            return 0;
          v7 = *(_BYTE **)(a1 + 816);
        }
        v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 312) + 32) + i);
        *(_QWORD *)(a1 + 816) = v7 + 1;
        *v7 = v8;
      }
    }
    LODWORD(v3) = 1;
  }
  v9 = *(char ****)(v2 + 120);
  if (v9)
    v10 = &v9[*(_QWORD *)(v2 + 136)];
  else
    v10 = 0;
  while (v9 != v10)
  {
    v11 = v9;
    v13 = *v9++;
    v12 = v13;
    if (v13 && v12[1])
    {
      if ((_DWORD)v3)
      {
        v14 = *(_BYTE **)(a1 + 816);
        if (v14 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792)))
            return 0;
          v14 = *(_BYTE **)(a1 + 816);
        }
        *(_QWORD *)(a1 + 816) = v14 + 1;
        *v14 = 12;
      }
      v15 = **v12;
      if (v15)
      {
        v16 = (unsigned __int8 *)(*v12 + 1);
        do
        {
          v17 = *(_BYTE **)(a1 + 816);
          if (v17 == *(_BYTE **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792)))
              return 0;
            v15 = *(v16 - 1);
            v17 = *(_BYTE **)(a1 + 816);
          }
          *(_QWORD *)(a1 + 816) = v17 + 1;
          *v17 = v15;
          v18 = *v16++;
          v15 = v18;
        }
        while (v18);
      }
      v3 = *(_BYTE **)(a1 + 816);
      if (v3 == *(_BYTE **)(a1 + 808))
      {
        if (!poolGrow((uint64_t *)(a1 + 792)))
          return 0;
        v3 = *(_BYTE **)(a1 + 816);
      }
      v9 = v11 + 1;
      *(_QWORD *)(a1 + 816) = v3 + 1;
      *v3 = 61;
      v19 = *((_DWORD *)v12[1] + 10) - (*(_BYTE *)(a1 + 900) != 0);
      LODWORD(v3) = 1;
      if ((int)v19 >= 1)
      {
        for (j = 0; j != v19; ++j)
        {
          v21 = *(_BYTE **)(a1 + 816);
          if (v21 == *(_BYTE **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792)))
              return 0;
            v21 = *(_BYTE **)(a1 + 816);
          }
          v22 = *(_BYTE *)(*((_QWORD *)v12[1] + 4) + j);
          *(_QWORD *)(a1 + 816) = v21 + 1;
          *v21 = v22;
        }
        LODWORD(v3) = 1;
      }
    }
  }
  v23 = *(_QWORD **)v2;
  if (*(_QWORD *)v2)
    v24 = &v23[*(_QWORD *)(v2 + 16)];
  else
    v24 = 0;
  while (v23 != v24)
  {
    v25 = v23;
    v27 = (_BYTE *)*v23++;
    v26 = v27;
    if (v27 && v26[56])
    {
      if ((_DWORD)v3)
      {
        v28 = *(_BYTE **)(a1 + 816);
        if (v28 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792)))
            return 0;
          v28 = *(_BYTE **)(a1 + 816);
        }
        *(_QWORD *)(a1 + 816) = v28 + 1;
        *v28 = 12;
      }
      v23 = v25 + 1;
      v29 = **(_BYTE **)v26;
      LODWORD(v3) = 1;
      if (v29)
      {
        v30 = (unsigned __int8 *)(*(_QWORD *)v26 + 1);
        do
        {
          v31 = *(_BYTE **)(a1 + 816);
          if (v31 == *(_BYTE **)(a1 + 808))
          {
            if (!poolGrow((uint64_t *)(a1 + 792)))
              return 0;
            v29 = *(v30 - 1);
            v31 = *(_BYTE **)(a1 + 816);
          }
          *(_QWORD *)(a1 + 816) = v31 + 1;
          *v31 = v29;
          v32 = *v30++;
          v29 = v32;
        }
        while (v32);
        LODWORD(v3) = 1;
      }
    }
  }
  v33 = *(_BYTE **)(a1 + 816);
  if (v33 != *(_BYTE **)(a1 + 808))
    goto LABEL_60;
  if (poolGrow((uint64_t *)(a1 + 792)))
  {
    v33 = *(_BYTE **)(a1 + 816);
LABEL_60:
    *(_QWORD *)(a1 + 816) = v33 + 1;
    *v33 = 0;
    return *(_QWORD *)(a1 + 824);
  }
  return 0;
}

uint64_t storeAtts(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t *a5, int a6)
{
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD *AttributeId;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  char *v38;
  _OWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t k;
  char v78;
  _BYTE *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  unsigned __int8 *v94;
  BOOL v95;
  BOOL v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  int v105;
  int v106;
  char *v107;
  _BYTE *v108;
  char v109;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t i;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int v118;
  char *v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v123;
  signed int v124;
  int v126;
  int v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  uint64_t j;
  char *v132;
  uint64_t v133;
  int v134;
  uint64_t *v135;
  int v136;
  char **v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v144;
  int8x16_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[5];

  v148[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 680);
  v12 = lookup(a1, (uint64_t *)(v11 + 40), *a4, 0);
  if (!v12)
  {
    v38 = (char *)poolCopyString((uint64_t *)(v11 + 160), *a4);
    if (!v38)
      return 1;
    v39 = lookup(a1, (uint64_t *)(v11 + 40), v38, 0x28uLL);
    if (!v39)
      return 1;
    v12 = v39;
    if (*(_BYTE *)(a1 + 464))
    {
      if (!setElementTypePrefix(a1, (uint64_t)v39))
        return 1;
    }
  }
  v13 = *((unsigned int *)v12 + 6);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 72))(a2, a3, *(unsigned int *)(a1 + 728), *(_QWORD *)(a1 + 744));
  if ((int)v14 > (int)(v13 ^ 0x7FFFFFFF))
    return 1;
  v15 = v14;
  v16 = *(_DWORD *)(a1 + 728);
  if ((int)v14 + (int)v13 > v16)
  {
    if ((int)v13 > 2147483631 || (int)v14 > 2147483631 - (int)v13)
      return 1;
    v18 = v14 + v13 + 16;
    *(_DWORD *)(a1 + 728) = v18;
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 744), 32 * v18);
    if (!v19)
    {
      *(_DWORD *)(a1 + 728) = v16;
      return 1;
    }
    *(_QWORD *)(a1 + 744) = v19;
    if ((int)v15 > v16)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 72))(a2, a3, v15, v19);
  }
  v137 = a4;
  v138 = v11;
  v144 = *(_QWORD *)(a1 + 744);
  if ((int)v15 >= 1)
  {
    v139 = a6;
    v20 = 0;
    v141 = 0;
    v21 = 0;
    v22 = v15;
    while (1)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 32 * v20);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a2, v23);
      AttributeId = getAttributeId(a1, a2, v23, v23 + v24);
      if (!AttributeId)
        return 1;
      v26 = (uint64_t)AttributeId;
      if (*(_BYTE *)(*(_QWORD *)AttributeId - 1))
      {
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 32 * v20);
        return 8;
      }
      *(_BYTE *)(*(_QWORD *)AttributeId - 1) = 1;
      v27 = v21 + 1;
      *(_QWORD *)(v144 + 8 * v21) = *(_QWORD *)AttributeId;
      v28 = *(_QWORD *)(a1 + 744);
      v29 = v28 + 32 * v20;
      if (*(_BYTE *)(v29 + 24))
      {
        v30 = poolStoreString((uint64_t *)(a1 + 792), a2, *(_QWORD *)(v29 + 8), *(_QWORD *)(v29 + 16));
        v31 = v144;
        *(_QWORD *)(v144 + 8 * (int)v27) = v30;
        if (!v30)
          return 1;
      }
      else
      {
        if (*((_BYTE *)AttributeId + 16))
          v32 = (int)v13 < 1;
        else
          v32 = 1;
        if (v32)
        {
LABEL_26:
          v35 = 1;
        }
        else
        {
          v33 = (unsigned __int8 *)(*((_QWORD *)v12 + 4) + 8);
          v34 = v13;
          while (AttributeId != *((_OWORD **)v33 - 1))
          {
            v33 += 24;
            if (!--v34)
              goto LABEL_26;
          }
          v35 = *v33;
        }
        result = storeAttributeValue(a1, a2, v35, *(_QWORD *)(v28 + 32 * v20 + 8), *(_QWORD *)(v28 + 32 * v20 + 16), (uint64_t *)(a1 + 792), v139);
        if ((_DWORD)result)
          return result;
        v31 = v144;
        *(_QWORD *)(v144 + 8 * v27) = *(_QWORD *)(a1 + 824);
      }
      *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 816);
      v37 = *(_QWORD **)(v26 + 8);
      if (v37)
      {
        if (*(_BYTE *)(v26 + 17))
        {
          result = addBinding(a1, v37, v26, *(unsigned __int8 **)(v31 + 8 * (int)v27), a5);
          if ((_DWORD)result)
            return result;
        }
        else
        {
          v21 += 2;
          ++v141;
          *(_BYTE *)(*(_QWORD *)v26 - 1) = 2;
        }
      }
      else
      {
        v21 += 2;
      }
      if (++v20 == v22)
        goto LABEL_44;
    }
  }
  v21 = 0;
  v141 = 0;
LABEL_44:
  *(_DWORD *)(a1 + 732) = v21;
  v40 = (uint64_t *)*((_QWORD *)v12 + 2);
  if (v40)
  {
    v41 = *v40;
    v42 = v144;
    v43 = v141;
    if (*(_BYTE *)(*v40 - 1))
    {
      v44 = v138;
      if (v21 < 1)
        goto LABEL_58;
      v45 = 0;
      while (*(_QWORD *)(v144 + 8 * v45) != v41)
      {
        v45 += 2;
        if (v21 <= (int)v45)
          goto LABEL_58;
      }
    }
    else
    {
      LODWORD(v45) = -1;
      v44 = v138;
    }
  }
  else
  {
    LODWORD(v45) = -1;
    v44 = v138;
    v42 = v144;
    v43 = v141;
  }
  *(_DWORD *)(a1 + 736) = v45;
LABEL_58:
  if ((int)v13 >= 1)
  {
    v46 = 0;
    v47 = 24 * v13;
    do
    {
      v48 = *((_QWORD *)v12 + 4);
      v49 = *(_QWORD *)(v48 + v46);
      v50 = *(_QWORD *)v49;
      if (!*(_BYTE *)(*(_QWORD *)v49 - 1))
      {
        v51 = *(unsigned __int8 **)(v48 + v46 + 16);
        if (v51)
        {
          v52 = *(_QWORD **)(v49 + 8);
          if (v52)
          {
            if (*(_BYTE *)(v49 + 17))
            {
              result = addBinding(a1, v52, v49, v51, a5);
              v42 = v144;
              if ((_DWORD)result)
                return result;
              goto LABEL_61;
            }
            *(_BYTE *)(v50 - 1) = 2;
            ++v43;
          }
          else
          {
            *(_BYTE *)(v50 - 1) = 1;
          }
          v53 = (_QWORD *)(v42 + 8 * v21);
          *v53 = **(_QWORD **)(v48 + v46);
          v21 += 2;
          v53[1] = *(_QWORD *)(v48 + v46 + 16);
        }
      }
LABEL_61:
      v46 += 24;
    }
    while (v47 != v46);
  }
  v54 = v21;
  *(_QWORD *)(v42 + 8 * v21) = 0;
  if (!v43)
  {
LABEL_143:
    LODWORD(v65) = 0;
LABEL_144:
    if ((int)v65 < (int)v54)
    {
      v113 = (int)v65;
      do
      {
        *(_BYTE *)(*(_QWORD *)(v42 + 8 * v113) - 1) = 0;
        v113 += 2;
      }
      while (v113 < v54);
    }
    for (i = *a5; i; i = *(_QWORD *)(i + 8))
      *(_BYTE *)(**(_QWORD **)(i + 24) - 1) = 0;
    if (*(_BYTE *)(a1 + 464))
    {
      v115 = *((_QWORD *)v12 + 1);
      if (v115)
      {
        v116 = *(_QWORD *)(v115 + 8);
        if (!v116)
          return 27;
        v117 = *v137;
        do
          v118 = *v117++;
        while (v118 != 58);
LABEL_157:
        v119 = **(char ***)v116;
        if (*(_BYTE *)(a1 + 465))
          v120 = v119 == 0;
        else
          v120 = 1;
        if (v120)
        {
          LODWORD(v121) = 0;
        }
        else
        {
          v121 = 0;
          while (v119[v121++])
            ;
        }
        v123 = 0;
        v137[1] = v117;
        v124 = *(_DWORD *)(v116 + 40);
        v137[2] = v119;
        *((_DWORD *)v137 + 7) = v124;
        *((_DWORD *)v137 + 8) = v121;
        while (v117[v123++])
          ;
        if (v124 > (int)(v121 ^ 0x7FFFFFFF) || (int)((v121 + v124) ^ 0x7FFFFFFF) <= (int)v123 - 1)
          return 1;
        v126 = v123 + v121 + v124;
        if (v126 <= *(_DWORD *)(v116 + 44))
        {
          v129 = *(char **)(v116 + 32);
        }
        else
        {
          if (v126 > 2147483623)
            return 1;
          v127 = v126 + 24;
          v128 = (char *)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), v126 + 24);
          if (!v128)
            return 1;
          v129 = v128;
          *(_DWORD *)(v116 + 44) = v127;
          memcpy(v128, *(const void **)(v116 + 32), *(int *)(v116 + 40));
          v130 = *(_QWORD **)(a1 + 696);
          for (j = *(_QWORD *)(v116 + 32); v130; v130 = (_QWORD *)*v130)
          {
            if (v130[3] == j)
              v130[3] = v129;
          }
          (*(void (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 24), j);
          *(_QWORD *)(v116 + 32) = v129;
          v124 = *(_DWORD *)(v116 + 40);
        }
        v132 = &v129[v124];
        memcpy(v132, v117, v123);
        if ((_DWORD)v121)
        {
          v132[v123 - 1] = *(_BYTE *)(a1 + 900);
          memcpy(&v132[v123], **(const void ***)v116, (int)v121);
        }
        result = 0;
        *v137 = *(char **)(v116 + 32);
        return result;
      }
      v116 = *(_QWORD *)(v44 + 312);
      if (v116)
      {
        v117 = *v137;
        goto LABEL_157;
      }
    }
    return 0;
  }
  v55 = *(unsigned __int8 *)(a1 + 768);
  if (v55 > 0x1F)
    return 1;
  if (!((2 * v43) >> v55))
  {
    v58 = *(_QWORD *)(a1 + 760);
    v59 = 1 << v55;
    if (v58)
      goto LABEL_85;
    goto LABEL_83;
  }
  v56 = *(_BYTE *)(a1 + 768);
  while (v43 >> v56++)
    ;
  *(_BYTE *)(a1 + 768) = v56;
  if (v56 > 2u)
  {
    if (v56 >= 0x20u)
    {
LABEL_164:
      *(_BYTE *)(a1 + 768) = v55;
      return 1;
    }
  }
  else
  {
    v56 = 3;
    *(_BYTE *)(a1 + 768) = 3;
  }
  v60 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 752), 24 << v56);
  if (!v60)
    goto LABEL_164;
  *(_QWORD *)(a1 + 752) = v60;
  v59 = 1 << v56;
  v42 = v144;
LABEL_83:
  v61 = v59 - 1;
  v62 = (_QWORD *)(*(_QWORD *)(a1 + 752) + 24 * v59 - 24);
  v58 = 0xFFFFFFFFLL;
  do
  {
    *v62 = 0xFFFFFFFFLL;
    v62 -= 3;
  }
  while ((_DWORD)v61--);
LABEL_85:
  v64 = v58 - 1;
  *(_QWORD *)(a1 + 760) = v58 - 1;
  if ((int)v54 < 1)
    goto LABEL_143;
  v65 = 0;
  v66 = (uint64_t *)(v44 + 80);
  v67 = (v59 - 1);
  v133 = ~v67;
  v134 = v59;
  v136 = v59 - 1;
  v140 = v67 >> 2;
  v142 = v64;
  v135 = (uint64_t *)(v44 + 80);
  while (1)
  {
    v68 = *(char **)(v42 + 8 * v65);
    if (*(v68 - 1) != 2)
    {
      *(v68 - 1) = 0;
      goto LABEL_141;
    }
    v148[0] = 0;
    v69 = a1;
    do
    {
      v70 = v69;
      v69 = *(_QWORD *)(v69 + 904);
    }
    while (v69);
    v71 = *(_QWORD *)(v70 + 928);
    v145.i64[0] = 0x736F6D6570736575;
    v145.i64[1] = v71 ^ 0x646F72616E646F6DLL;
    v146 = 0x6C7967656E657261;
    v147 = v71 ^ 0x7465646279746573;
    v148[1] = v148;
    v148[2] = 0;
    *(v68 - 1) = 0;
    v72 = lookup(a1, v66, v68, 0);
    if (!v72)
      return 1;
    v73 = *((_QWORD *)v72 + 1);
    if (!v73)
      return 1;
    v74 = *(_QWORD *)(v73 + 8);
    if (!v74)
      return 27;
    v75 = *(int *)(v74 + 40);
    if ((int)v75 > 0)
    {
      v76 = v43;
      for (k = 0; k < v75; ++k)
      {
        v78 = *(_BYTE *)(*(_QWORD *)(v74 + 32) + k);
        v79 = *(_BYTE **)(a1 + 816);
        if (v79 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792)))
            return 1;
          v79 = *(_BYTE **)(a1 + 816);
        }
        *(_QWORD *)(a1 + 816) = v79 + 1;
        *v79 = v78;
        v75 = *(int *)(v74 + 40);
      }
      v43 = v76;
      v44 = v138;
    }
    sip24_update(v145.i64, *(char **)(v74 + 32), v75);
    do
      v80 = *v68++;
    while (v80 != 58);
    if (*v68)
    {
      v81 = 0;
      do
        v82 = &v68[v81++];
      while (v82[1]);
    }
    else
    {
      v81 = 0;
    }
    sip24_update(v145.i64, v68, v81);
    do
    {
      v83 = *(char **)(a1 + 816);
      if (v83 == *(char **)(a1 + 808))
      {
        if (!poolGrow((uint64_t *)(a1 + 792)))
          return 1;
        v83 = *(char **)(a1 + 816);
      }
      v84 = *v68;
      *(_QWORD *)(a1 + 816) = v83 + 1;
      *v83 = v84;
    }
    while (*v68++);
    sip24_final(&v145);
    v87 = v86;
    v88 = v136 & v86;
    v89 = *(_QWORD *)(a1 + 752);
    v90 = (int)(v136 & v86);
    v91 = v142;
    if (*(_QWORD *)(v89 + 24 * v90) == v142)
      break;
LABEL_133:
    v42 = v144;
    if (*(_BYTE *)(a1 + 465))
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 816) - 1) = *(_BYTE *)(a1 + 900);
      v107 = **(char ***)v74;
      do
      {
        v108 = *(_BYTE **)(a1 + 816);
        if (v108 == *(_BYTE **)(a1 + 808))
        {
          if (!poolGrow((uint64_t *)(a1 + 792)))
            return 1;
          v108 = *(_BYTE **)(a1 + 816);
          v42 = v144;
          v91 = v142;
        }
        v109 = *v107;
        *(_QWORD *)(a1 + 816) = v108 + 1;
        *v108 = v109;
      }
      while (*v107++);
    }
    v111 = *(_QWORD *)(a1 + 824);
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a1 + 816);
    *(_QWORD *)(v42 + 8 * v65) = v111;
    v112 = (uint64_t *)(*(_QWORD *)(a1 + 752) + 24 * (int)v90);
    *v112 = v91;
    v112[1] = v87;
    v112[2] = v111;
    if (!--v43)
    {
      LODWORD(v65) = v65 + 2;
      goto LABEL_144;
    }
    v66 = v135;
LABEL_141:
    v65 += 2;
    if ((int)v54 <= (int)v65)
      goto LABEL_144;
  }
  v92 = 0;
  while (1)
  {
    if (v87 == *(_QWORD *)(v89 + 24 * v90 + 8))
    {
      v93 = *(_BYTE **)(a1 + 824);
      v94 = *(unsigned __int8 **)(v89 + 24 * v90 + 16);
      v95 = *v93 == 0;
      if (*v93)
        v96 = *v93 == *v94;
      else
        v96 = 0;
      if (v96)
      {
        v97 = v94 + 1;
        v98 = v93 + 1;
        do
        {
          v100 = *v98++;
          v99 = v100;
          v95 = v100 == 0;
          v102 = *v97++;
          v101 = v102;
          if (v99)
            v103 = v99 == v101;
          else
            v103 = 0;
        }
        while (v103);
      }
      if (v95)
        return 8;
    }
    if (!v92)
      v92 = ((v87 & (unint64_t)v133) >> (*(_BYTE *)(a1 + 768) - 1)) & v140 | 1;
    v104 = __OFSUB__(v88, v92);
    v105 = v88 - v92;
    if (v105 < 0 != v104)
      v106 = v134;
    else
      v106 = 0;
    v88 = v105 + v106;
    v90 = v88;
    if (*(_QWORD *)(v89 + 24 * v88) != v142)
      goto LABEL_133;
  }
}

uint64_t freeBindings(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = a2;
    v3 = (_QWORD *)result;
    do
    {
      v4 = (uint64_t (*)(_QWORD, _QWORD))v3[27];
      if (v4)
        result = v4(v3[1], **(_QWORD **)v2);
      v6 = *(_QWORD **)v2;
      v5 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = v3[90];
      v3[90] = v2;
      v6[1] = *(_QWORD *)(v2 + 16);
      v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t epilogProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v7;
  uint64_t result;
  int v9;

  v5 = a2;
  *(_QWORD *)(a1 + 536) = epilogProcessor;
  *(_QWORD *)(a1 + 552) = a2;
  while (1)
  {
    v7 = (**(uint64_t (***)(void))(a1 + 296))();
    if (!accountingDiffTolerated(a1, v7, v5, 0, 0))
      return 43;
    *(_QWORD *)(a1 + 560) = 0;
    result = 9;
    if (v7 > 12)
    {
      if (v7 == 13)
      {
        if (!reportComment(a1, *(_QWORD *)(a1 + 296), v5, 0))
          return 1;
      }
      else
      {
        if (v7 != 15)
          return result;
        if (*(_QWORD *)(a1 + 168))
          reportDefault(a1, *(_QWORD *)(a1 + 296), v5, 0);
      }
      goto LABEL_12;
    }
    if (v7 != 11)
      break;
    if (!reportProcessingInstruction(a1, *(_QWORD *)(a1 + 296), v5, 0))
      return 1;
LABEL_12:
    v5 = 0;
    *(_QWORD *)(a1 + 552) = 0;
    v9 = *(_DWORD *)(a1 + 912);
    if (v9 == 2)
      return 35;
    if (v9 == 3)
    {
LABEL_26:
      result = 0;
      *a4 = v5;
      return result;
    }
  }
  switch(v7)
  {
    case -4:
      goto LABEL_26;
    case -3:
      return result;
    case -2:
      if (!*(_BYTE *)(a1 + 916))
        goto LABEL_26;
      return 6;
    case -1:
      if (!*(_BYTE *)(a1 + 916))
        goto LABEL_26;
      return 5;
    case 0:
      *(_QWORD *)(a1 + 552) = 0;
      return 4;
    default:
      if (v7 != -15)
        return result;
      if (*(_QWORD *)(a1 + 168))
      {
        reportDefault(a1, *(_QWORD *)(a1 + 296), v5, 0);
        if (*(_DWORD *)(a1 + 912) == 2)
          return 35;
      }
      result = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t doCdataSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  void (*v16)(_QWORD, uint64_t, _QWORD);
  uint64_t v17;
  unsigned int v18;
  void (*v19)(_QWORD, uint64_t *, uint64_t);
  int v20;
  uint64_t result;
  void (*v22)(_QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v11 = *a3;
  v29 = *a3;
  if (*(_QWORD *)(a1 + 296) == a2)
  {
    v12 = (uint64_t *)(a1 + 552);
    *(_QWORD *)(a1 + 552) = v11;
    v13 = (_QWORD *)(a1 + 560);
  }
  else
  {
    v12 = *(uint64_t **)(a1 + 576);
    v13 = v12 + 1;
  }
  *v12 = v11;
  *a3 = 0;
  while (2)
  {
    v28 = v11;
    v14 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    if (!accountingDiffTolerated(a1, v14, v29, v28, a7))
      return 43;
    v15 = v28;
    *v13 = v28;
    switch(v14)
    {
      case -4:
      case -1:
        if (a6)
          goto LABEL_29;
        return 20;
      case -3:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        goto LABEL_27;
      case -2:
        if (!a6)
          return 6;
LABEL_29:
        result = 0;
        *a5 = v29;
        return result;
      case 0:
        *v12 = v15;
        return 4;
      case 6:
        v16 = *(void (**)(_QWORD, uint64_t, _QWORD))(a1 + 128);
        if (!v16)
          goto LABEL_15;
        if (*(_BYTE *)(a2 + 132))
        {
          v16(*(_QWORD *)(a1 + 8), v29, (v15 - v29));
        }
        else
        {
          while (1)
          {
            v17 = *(_QWORD *)(a1 + 104);
            v27 = *(_QWORD *)(a1 + 96);
            v18 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v29, v15, &v27, v17);
            *v13 = v28;
            v16(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 96), v27 - *(_QWORD *)(a1 + 96));
            if (v18 <= 1)
              break;
            *v12 = v29;
            v15 = v28;
          }
        }
        goto LABEL_17;
      case 7:
        v19 = *(void (**)(_QWORD, uint64_t *, uint64_t))(a1 + 128);
        if (v19)
        {
          LOBYTE(v27) = 10;
          v19(*(_QWORD *)(a1 + 8), &v27, 1);
        }
        else
        {
LABEL_15:
          if (*(_QWORD *)(a1 + 168))
            reportDefault(a1, a2, v29, v15);
        }
LABEL_17:
        v11 = v28;
        v29 = v28;
        *v12 = v28;
        v20 = *(_DWORD *)(a1 + 912);
        if (v20 != 2)
        {
          if (v20 == 3)
          {
            result = 0;
            *a5 = v11;
            return result;
          }
          continue;
        }
        return 35;
      default:
        if (v14 == 40)
        {
          v22 = *(void (**)(_QWORD))(a1 + 160);
          if (v22)
          {
            v22(*(_QWORD *)(a1 + 8));
            v23 = a5;
          }
          else
          {
            v23 = a5;
            if (*(_QWORD *)(a1 + 168))
              reportDefault(a1, a2, v29, v15);
          }
          v24 = v28;
          *a3 = v28;
          *v23 = v24;
          if (*(_DWORD *)(a1 + 912) == 2)
            return 35;
          else
            return 0;
        }
        else
        {
LABEL_27:
          *v12 = v15;
          return 23;
        }
    }
  }
}

uint64_t cdataSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  result = doCdataSection(a1, *(_QWORD *)(a1 + 296), &v9, a3, a4, *(_BYTE *)(a1 + 916) == 0, 0);
  if (!(_DWORD)result)
  {
    v8 = v9;
    if (v9)
    {
      if (*(_QWORD *)(a1 + 904))
      {
        *(_QWORD *)(a1 + 536) = externalEntityContentProcessor;
        return externalEntityContentProcessor(a1, v8, a3, (uint64_t)a4);
      }
      else
      {
        *(_QWORD *)(a1 + 536) = contentProcessor;
        return contentProcessor(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t setElementTypePrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t result;
  char v9;
  _BYTE *v10;
  uint64_t v11;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 680);
  v6 = *(char **)a2;
  while (1)
  {
    if (!v6[v4])
      return 1;
    if (v6[v4] == 58)
      break;
    ++v4;
  }
  for (; v4; --v4)
  {
    v7 = *(_BYTE **)(v5 + 184);
    if (v7 == *(_BYTE **)(v5 + 176))
    {
      result = poolGrow((uint64_t *)(v5 + 160));
      if (!(_DWORD)result)
        return result;
      v7 = *(_BYTE **)(v5 + 184);
    }
    v9 = *v6++;
    *(_QWORD *)(v5 + 184) = v7 + 1;
    *v7 = v9;
  }
  v10 = *(_BYTE **)(v5 + 184);
  if (v10 == *(_BYTE **)(v5 + 176))
  {
    result = poolGrow((uint64_t *)(v5 + 160));
    if (!(_DWORD)result)
      return result;
    v10 = *(_BYTE **)(v5 + 184);
  }
  *(_QWORD *)(v5 + 184) = v10 + 1;
  *v10 = 0;
  result = (uint64_t)lookup(a1, (uint64_t *)(v5 + 120), *(char **)(v5 + 192), 0x10uLL);
  if (result)
  {
    v11 = *(_QWORD *)(v5 + 192);
    if (*(_QWORD *)result == v11)
      *(_QWORD *)(v5 + 192) = *(_QWORD *)(v5 + 184);
    else
      *(_QWORD *)(v5 + 184) = v11;
    *(_QWORD *)(a2 + 8) = result;
    return 1;
  }
  return result;
}

uint64_t addBinding(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  unsigned __int8 v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  size_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, unsigned __int8 *);
  unsigned __int8 *v26;

  v10 = *a4;
  v11 = (_BYTE *)*a2;
  if (*a4)
  {
    if (v11)
    {
      if (*v11 == 120 && v11[1] == 109 && v11[2] == 108)
      {
        v12 = v11[3];
        if (!v11[3])
        {
          LODWORD(v11) = 1;
          result = 38;
LABEL_12:
          v14 = 0;
          v15 = 1;
          v16 = 1;
          while (1)
          {
            v17 = v14;
            if (v16 && (v14 > 0x24 || addBinding_xmlNamespace[v14] != v10))
              v16 = 0;
            if (v15)
              v18 = v12;
            else
              v18 = 0;
            if (v18 == 1 && (v17 > 0x1D || addBinding_xmlnsNamespace[v17] != v10))
              v15 = 0;
            if (*(_BYTE *)(a1 + 464) && *(unsigned __int8 *)(a1 + 900) == v10)
              break;
LABEL_27:
            v14 = v17 + 1;
            v10 = a4[v17 + 1];
            if (!v10)
              goto LABEL_28;
          }
          switch(v10)
          {
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '=':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case ']':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '~':
              goto LABEL_27;
            default:
              result = 2;
              break;
          }
          return result;
        }
        if (v12 == 110 && v11[4] == 115 && !v11[5])
          return 39;
      }
      LODWORD(v11) = 0;
    }
    v12 = 1;
    result = 40;
    goto LABEL_12;
  }
  if (v11)
    return 28;
  LODWORD(v14) = 0;
  v16 = 1;
  result = 40;
  v15 = 1;
LABEL_28:
  if (v16)
    v19 = (_DWORD)v14 == 36;
  else
    v19 = 0;
  v20 = v19;
  if ((_DWORD)v11 == v20)
  {
    if (v15 && (_DWORD)v14 == 29)
      return 40;
    if (*(_BYTE *)(a1 + 900))
      v21 = (v14 + 1);
    else
      v21 = v14;
    v22 = *(_QWORD *)(a1 + 720);
    if (v22)
    {
      if ((int)v21 <= *(_DWORD *)(v22 + 44))
      {
        v23 = *(void **)(v22 + 32);
        goto LABEL_54;
      }
      if (v21 <= 0x7FFFFFE7)
      {
        v23 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)(v22 + 32), (v21 + 24));
        if (v23)
        {
          *(_QWORD *)(v22 + 32) = v23;
          *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_54:
          *(_QWORD *)(a1 + 720) = *(_QWORD *)(v22 + 8);
          goto LABEL_55;
        }
      }
    }
    else
    {
      v22 = (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 24), 48);
      result = 1;
      if (!v22 || v21 > 0x7FFFFFE7)
        return result;
      v23 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24), (v21 + 24));
      *(_QWORD *)(v22 + 32) = v23;
      if (v23)
      {
        *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_55:
        *(_DWORD *)(v22 + 40) = v21;
        memcpy(v23, a4, v21);
        if (*(_BYTE *)(a1 + 900))
          *(_BYTE *)(*(_QWORD *)(v22 + 32) + (int)v21 - 1) = *(_BYTE *)(a1 + 900);
        *(_QWORD *)v22 = a2;
        *(_QWORD *)(v22 + 16) = a2[1];
        *(_QWORD *)(v22 + 24) = a3;
        if (!*a4 && (_QWORD *)(*(_QWORD *)(a1 + 680) + 304) == a2)
          v24 = 0;
        else
          v24 = v22;
        a2[1] = v24;
        *(_QWORD *)(v22 + 8) = *a5;
        *a5 = v22;
        if (a3)
        {
          v25 = *(void (**)(_QWORD, _QWORD, unsigned __int8 *))(a1 + 208);
          if (v25)
          {
            if (a2[1])
              v26 = a4;
            else
              v26 = 0;
            v25(*(_QWORD *)(a1 + 8), *a2, v26);
          }
        }
        return 0;
      }
      (*(void (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 24), v22);
    }
    return 1;
  }
  return result;
}

uint64_t externalEntityContentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = doContent(a1, 1, *(_QWORD *)(a1 + 296), a2, a3, a4, *(_BYTE *)(a1 + 916) == 0, 1);
  if (!(_DWORD)v5 && !storeRawNames(a1))
    return 1;
  return v5;
}

uint64_t appendAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v10;
  uint64_t v14;
  int v15;
  uint64_t result;
  char *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char v25;
  char *v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE v39[4];
  uint64_t v40;

  v10 = a4;
  v14 = *(_QWORD *)(a1 + 680);
  v40 = a4;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, a4, a5, &v40);
  if (!accountingDiffTolerated(a1, v15, v10, v40, a7))
    return 43;
  while (2)
  {
    result = 0;
    switch(v15)
    {
      case -4:
        return result;
      case -3:
        v40 = v10 + *(int *)(a2 + 128);
        goto LABEL_5;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_61;
      case -1:
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = v10;
        return 4;
      case 0:
        if (*(_QWORD *)(a1 + 296) == a2)
          *(_QWORD *)(a1 + 552) = v40;
        return 4;
      case 6:
        if (!poolAppend(a6, a2, v10, v40))
          return 1;
        goto LABEL_21;
      case 7:
        goto LABEL_5;
      case 9:
        v38 = 0;
        v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 88))(a2, v10 + *(int *)(a2 + 128), v40 - *(int *)(a2 + 128));
        if (v38)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v38, (uint64_t)v39, 1);
          v17 = (char *)a6[3];
          if (v17 == (char *)a6[2])
          {
            if (!poolGrow(a6))
              return 1;
            v17 = (char *)a6[3];
          }
          v18 = v38;
          a6[3] = (uint64_t)(v17 + 1);
LABEL_20:
          *v17 = v18;
LABEL_21:
          v10 = v40;
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, v40, a5, &v40);
          if (!accountingDiffTolerated(a1, v15, v10, v40, a7))
            return 43;
          continue;
        }
        v26 = (char *)poolStoreString((uint64_t *)(a1 + 840), a2, v10 + *(int *)(a2 + 128), v40 - *(int *)(a2 + 128));
        if (!v26)
          return 1;
        v27 = lookup(a1, (uint64_t *)v14, v26, 0);
        v28 = v27;
        *(_QWORD *)(a1 + 864) = *(_QWORD *)(a1 + 872);
        if ((uint64_t *)(v14 + 160) == a6)
        {
          if (*(_DWORD *)(a1 + 524))
          {
            if (*(_BYTE *)(v14 + 258))
            {
              if (!*(_QWORD *)(a1 + 576))
                goto LABEL_39;
            }
            else if (!*(_BYTE *)(v14 + 257))
            {
              goto LABEL_39;
            }
          }
        }
        else if (!*(_BYTE *)(v14 + 257) || *(_BYTE *)(v14 + 258))
        {
LABEL_39:
          if (!v27)
            return 11;
          if (!*((_BYTE *)v27 + 58))
            return 24;
          goto LABEL_48;
        }
        if (!v27)
          goto LABEL_21;
LABEL_48:
        if (!*((_BYTE *)v27 + 56))
        {
          if (*((_QWORD *)v27 + 6))
          {
            v37 = *(_QWORD *)(a1 + 296);
            result = 15;
            goto LABEL_75;
          }
          v29 = *((_QWORD *)v27 + 1);
          if (!v29)
          {
            v37 = *(_QWORD *)(a1 + 296);
            result = 16;
            goto LABEL_75;
          }
          v30 = *((int *)v27 + 4);
          *((_BYTE *)v27 + 56) = 1;
          v31 = a1;
          do
          {
            v32 = (_DWORD *)v31;
            v31 = *(_QWORD *)(v31 + 904);
          }
          while (v31);
          ++v32[242];
          v33 = v32[243] + 1;
          v32[243] = v33;
          v34 = v32[244];
          if (v33 > v34)
            v32[244] = v34 + 1;
          result = appendAttributeValue(a1, *(_QWORD *)(a1 + 448), a3, v29, v29 + v30, a6, 1);
          v35 = a1;
          do
          {
            v36 = v35;
            v35 = *(_QWORD *)(v35 + 904);
          }
          while (v35);
          --*(_DWORD *)(v36 + 972);
          *((_BYTE *)v28 + 56) = 0;
          if ((_DWORD)result)
            return result;
          goto LABEL_21;
        }
        v37 = *(_QWORD *)(a1 + 296);
        result = 12;
LABEL_75:
        if (v37 == a2)
          *(_QWORD *)(a1 + 552) = v10;
        return result;
      case 10:
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, v10);
        if ((v19 & 0x80000000) != 0)
        {
          if (*(_QWORD *)(a1 + 296) == a2)
            *(_QWORD *)(a1 + 552) = v10;
          return 14;
        }
        if ((_DWORD)a3 || v19 != 32 || (v20 = a6[3], v20 != a6[4]) && *(_BYTE *)(v20 - 1) != 32)
        {
          v21 = XmlUtf8Encode(v19, v39);
          if (v21 >= 1)
          {
            v22 = v21;
            v23 = v39;
            do
            {
              v24 = (_BYTE *)a6[3];
              if (v24 == (_BYTE *)a6[2])
              {
                if (!poolGrow(a6))
                  return 1;
                v24 = (_BYTE *)a6[3];
              }
              v25 = *v23++;
              a6[3] = (uint64_t)(v24 + 1);
              *v24 = v25;
              --v22;
            }
            while (v22);
          }
        }
        goto LABEL_21;
      default:
        if (v15 != 39)
        {
LABEL_61:
          if (*(_QWORD *)(a1 + 296) == a2)
            *(_QWORD *)(a1 + 552) = v10;
          return 23;
        }
LABEL_5:
        v17 = (char *)a6[3];
        if (!(_DWORD)a3 && (v17 == (char *)a6[4] || *(v17 - 1) == 32))
          goto LABEL_21;
        if (v17 == (char *)a6[2])
        {
          if (!poolGrow(a6))
            return 1;
          v17 = (char *)a6[3];
        }
        a6[3] = (uint64_t)(v17 + 1);
        v18 = 32;
        goto LABEL_20;
    }
  }
}

uint64_t internalEntityProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 576);
  if (!v4)
    return 23;
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = v10 + *(int *)(v9 + 20);
  v12 = v10 + *(int *)(v9 + 16);
  v22 = v11;
  if (*(_BYTE *)(v9 + 57))
  {
    v13 = (**(uint64_t (***)(void))(a1 + 448))();
    v14 = doProlog(a1, *(_QWORD *)(a1 + 448), v11, v12, v13, v22, &v22, 0, 1);
  }
  else
  {
    v14 = doContent(a1, *(unsigned int *)(v4 + 32), *(_QWORD *)(a1 + 448), v11, v12, &v22, 0, 1);
  }
  v15 = v14;
  if (!(_DWORD)v14)
  {
    v17 = a1;
    if (v12 == v22 || (v17 = a1, *(_DWORD *)(a1 + 912) != 3))
    {
      do
      {
        v18 = v17;
        v17 = *(_QWORD *)(v17 + 904);
      }
      while (v17);
      --*(_DWORD *)(v18 + 972);
      *(_BYTE *)(v9 + 56) = 0;
      v19 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(a1 + 576) = v19;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 584);
      *(_QWORD *)(a1 + 584) = v4;
      if (v19 && *(_DWORD *)(a1 + 912) == 3)
      {
        return 0;
      }
      else if (*(_BYTE *)(v9 + 57))
      {
        *(_QWORD *)(a1 + 536) = prologProcessor;
        v20 = (**(uint64_t (***)(void))(a1 + 296))();
        LOBYTE(v21) = 1;
        return doProlog(a1, *(_QWORD *)(a1 + 296), a2, a3, v20, v22, a4, *(_BYTE *)(a1 + 916) == 0, v21);
      }
      else
      {
        *(_QWORD *)(a1 + 536) = contentProcessor;
        v15 = doContent(a1, *(_QWORD *)(a1 + 904) != 0, *(_QWORD *)(a1 + 296), a2, a3, a4, *(_BYTE *)(a1 + 916) == 0, 0);
        if (!(_DWORD)v15 && !storeRawNames(a1))
          return 1;
      }
    }
    else
    {
      v15 = 0;
      *(_DWORD *)(v9 + 20) = v22 - *(_DWORD *)(v9 + 8);
    }
  }
  return v15;
}

_BYTE *normalizeLines(_BYTE *result)
{
  int v1;
  _BYTE *v2;
  int v3;

  while (1)
  {
    v1 = *result;
    if (!*result)
      break;
    if (v1 == 13)
    {
      v2 = result;
      do
      {
        if (v1 == 13)
        {
          *v2 = 10;
          v3 = *++result;
          if (v3 == 10)
            ++result;
        }
        else
        {
          ++result;
          *v2 = v1;
        }
        ++v2;
        v1 = *result;
      }
      while (*result);
      *v2 = 0;
      return result;
    }
    ++result;
  }
  return result;
}

uint64_t hashTableClear(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(result + 16))
  {
    v2 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(v1[4] + 24))(*(_QWORD *)v1[4], *(_QWORD *)(*v1 + 8 * v2));
      *(_QWORD *)(*v1 + 8 * v2++) = 0;
    }
    while (v2 < v1[2]);
  }
  v1[3] = 0;
  return result;
}

uint64_t hashTableDestroy(_QWORD *a1)
{
  unint64_t v2;

  if (a1[2])
  {
    v2 = 0;
    do
      (*(void (**)(_QWORD, _QWORD))(a1[4] + 24))(*(_QWORD *)a1[4], *(_QWORD *)(*a1 + 8 * v2++));
    while (v2 < a1[2]);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1[4] + 24))(*(_QWORD *)a1[4], *a1);
}

unint64_t _INTERNAL_trim_to_complete_utf8_characters(unint64_t result, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;

  v2 = *a2;
  if (*a2 > result)
  {
    v3 = 0;
    v4 = *a2;
    while (1)
    {
      v6 = *(_BYTE *)--v4;
      v5 = v6;
      if ((v6 & 0xF8) == 0xF0)
      {
        if ((unint64_t)(v3 - 3) <= 0xFFFFFFFFFFFFFFFBLL)
        {
          v2 += 3;
          break;
        }
      }
      else if ((v5 & 0xF0) == 0xE0)
      {
        if ((unint64_t)(v3 - 2) <= 0xFFFFFFFFFFFFFFFCLL)
        {
          v2 += 2;
          break;
        }
      }
      else
      {
        if ((v5 & 0xE0) != 0xC0)
        {
          if ((v5 & 0x80) == 0)
            break;
          goto LABEL_12;
        }
        if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          ++v2;
          break;
        }
      }
      v3 = 0;
LABEL_12:
      ++v3;
      v2 = v4;
      if (v4 <= result)
      {
        v2 = result;
        break;
      }
    }
  }
  *a2 = v2;
  return result;
}

uint64_t XmlUtf8Encode(unsigned int a1, _BYTE *a2)
{
  if ((a1 & 0x80000000) != 0)
    return 0;
  if (a1 <= 0x7F)
  {
    *a2 = a1;
    return 1;
  }
  if (a1 <= 0x7FF)
  {
    *a2 = (a1 >> 6) | 0xC0;
    a2[1] = a1 & 0x3F | 0x80;
    return 2;
  }
  if (!HIWORD(a1))
  {
    *a2 = (a1 >> 12) | 0xE0;
    a2[1] = (a1 >> 6) & 0x3F | 0x80;
    a2[2] = a1 & 0x3F | 0x80;
    return 3;
  }
  if (HIWORD(a1) > 0x10u)
    return 0;
  *a2 = (a1 >> 18) | 0xF0;
  a2[1] = (a1 >> 12) & 0x3F | 0x80;
  a2[2] = (a1 >> 6) & 0x3F | 0x80;
  a2[3] = a1 & 0x3F | 0x80;
  return 4;
}

uint64_t XmlSizeOfUnknownEncoding()
{
  return 2016;
}

_QWORD *XmlInitUnknownEncoding(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  _BYTE *v16;
  __int16 v17;
  _QWORD *result;
  int v19;
  char *v20;
  char v21;

  memcpy(a1, latin1_encoding, 0x1D0uLL);
  for (i = 0; i != 128; ++i)
  {
    if (*((_BYTE *)&latin1_encoding[17] + i))
      v9 = *((_BYTE *)&latin1_encoding[17] + i) == 28;
    else
      v9 = 1;
    if (!v9 && i != *(_DWORD *)(a2 + 4 * i))
      return 0;
  }
  v10 = 0;
  v11 = 993;
  do
  {
    v12 = *(unsigned int *)(a2 + 4 * v10);
    if ((_DWORD)v12 == -1)
    {
      *((_BYTE *)a1 + v10 + 136) = 1;
      goto LABEL_25;
    }
    if ((v12 & 0x80000000) != 0)
    {
      result = 0;
      if (!a3 || v12 < 0xFFFFFFFC)
        return result;
      *((_BYTE *)a1 + v10 + 136) = 3 - v12;
      *((_BYTE *)a1 + v11 - 1) = 0;
      *((_WORD *)a1 + v10 + 240) = 0;
      goto LABEL_38;
    }
    if (v12 > 0x7F)
    {
      if ((checkCharRefNumber(*(unsigned int *)(a2 + 4 * v10)) & 0x80000000) == 0)
      {
        if (WORD1(v12))
          return 0;
        v19 = v12 >> 5;
        if ((namingBitmap[v19 | (8 * nmstrtPages[v12 >> 8])] & (1 << v12)) != 0)
        {
          v20 = (char *)a1 + v10;
          v21 = 22;
        }
        else
        {
          v20 = (char *)a1 + v10;
          if ((namingBitmap[v19 | (8 * namePages[v12 >> 8])] & (1 << v12)) != 0)
            v21 = 26;
          else
            v21 = 28;
        }
        v20[136] = v21;
        *((_BYTE *)a1 + v11 - 1) = XmlUtf8Encode(v12, (_BYTE *)a1 + v11);
        *((_WORD *)a1 + v10 + 240) = v12;
        goto LABEL_38;
      }
      *((_BYTE *)a1 + v10 + 136) = 0;
LABEL_25:
      *((_WORD *)a1 + v10 + 240) = -1;
      *(_WORD *)((char *)a1 + v11 - 1) = 1;
      goto LABEL_38;
    }
    v13 = *((unsigned __int8 *)&latin1_encoding[17] + v12);
    if (*((_BYTE *)&latin1_encoding[17] + v12))
      v14 = v13 == 28;
    else
      v14 = 1;
    if (!v14 && v10 != v12)
      return 0;
    *((_BYTE *)a1 + v10 + 136) = v13;
    v16 = (char *)a1 + v11;
    *(v16 - 1) = 1;
    *v16 = v12;
    if ((_DWORD)v12)
      v17 = v12;
    else
      v17 = -1;
    *((_WORD *)a1 + v10 + 240) = v17;
LABEL_38:
    ++v10;
    v11 += 4;
  }
  while (v10 != 256);
  a1[58] = a3;
  a1[59] = a4;
  if (a3)
  {
    a1[49] = unknown_isName;
    a1[50] = unknown_isName;
    a1[51] = unknown_isName;
    a1[52] = unknown_isNmstrt;
    a1[53] = unknown_isNmstrt;
    a1[54] = unknown_isNmstrt;
    a1[55] = unknown_isInvalid;
    a1[56] = unknown_isInvalid;
    a1[57] = unknown_isInvalid;
  }
  a1[14] = unknown_toUtf8;
  a1[15] = unknown_toUtf16;
  return a1;
}

uint64_t checkCharRefNumber(uint64_t result)
{
  int v1;

  v1 = (int)result >> 8;
  if ((((int)result >> 8) - 216) < 8)
    return 0xFFFFFFFFLL;
  if (v1 == 255)
  {
    if (result >> 1 == 0x7FFF)
      return 0xFFFFFFFFLL;
  }
  else if (!v1 && !*((_BYTE *)&latin1_encoding[17] + (int)result))
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t unknown_isName(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(_QWORD))(a1 + 464))(*(_QWORD *)(a1 + 472));
  if (HIWORD(v1))
    return 0;
  else
    return namingBitmap[(v1 >> 5) | (8 * namePages[(unint64_t)v1 >> 8])] & (1 << v1);
}

uint64_t unknown_isNmstrt(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(uint64_t (**)(_QWORD))(a1 + 464))(*(_QWORD *)(a1 + 472));
  if (HIWORD(v1))
    return 0;
  else
    return namingBitmap[(v1 >> 5) | (8 * nmstrtPages[(unint64_t)v1 >> 8])] & (1 << v1);
}

uint64_t unknown_isInvalid(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD))(a1 + 464))(*(_QWORD *)(a1 + 472));
  if (WORD1(v1))
    return 1;
  else
    return checkCharRefNumber(v1) >> 31;
}

uint64_t unknown_toUtf8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, void **a4, uint64_t a5)
{
  unsigned __int8 *v6;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE v18[4];

  v6 = (unsigned __int8 *)*a2;
  if (v6 == a3)
    return 0;
  while (1)
  {
    v11 = a1 + 4 * *v6;
    v12 = *(char *)(v11 + 992);
    if (!*(_BYTE *)(v11 + 992))
      break;
    if (a5 - (uint64_t)*a4 < *(char *)(v11 + 992))
      return 2;
    v13 = (_BYTE *)(v11 + 993);
    v14 = (uint64_t)(v6 + 1);
LABEL_7:
    *a2 = v14;
    memcpy(*a4, v13, (int)v12);
    *a4 = (char *)*a4 + (int)v12;
    v6 = (unsigned __int8 *)*a2;
    if ((unsigned __int8 *)*a2 == a3)
      return 0;
  }
  v15 = (*(uint64_t (**)(_QWORD))(a1 + 464))(*(_QWORD *)(a1 + 472));
  v16 = XmlUtf8Encode(v15, v18);
  if (a5 - (uint64_t)*a4 >= v16)
  {
    v12 = v16;
    v14 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    v13 = v18;
    goto LABEL_7;
  }
  return 2;
}

uint64_t unknown_toUtf16(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, _WORD *a5)
{
  unsigned __int8 *v6;
  _WORD *v11;
  __int16 v12;
  uint64_t v13;
  _WORD *v14;

  v6 = (unsigned __int8 *)*a2;
  if ((unint64_t)v6 >= a3)
    return 0;
  v11 = (_WORD *)*a4;
  while (v11 < a5)
  {
    v12 = *(_WORD *)(a1 + 2 * *v6 + 480);
    if (v12)
    {
      v13 = (uint64_t)(v6 + 1);
    }
    else
    {
      v12 = (*(uint64_t (**)(_QWORD))(a1 + 464))(*(_QWORD *)(a1 + 472));
      v13 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    }
    *a2 = v13;
    v14 = (_WORD *)*a4;
    *v14 = v12;
    v11 = v14 + 1;
    *a4 = v11;
    v6 = (unsigned __int8 *)*a2;
    if (*a2 >= a3)
      return 0;
  }
  if (v11 == a5)
    return 2;
  else
    return 0;
}

uint64_t (**XmlGetUtf8InternalEncoding())()
{
  return internal_utf8_encoding;
}

uint64_t XmlInitEncoding(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  int EncodingIndex;

  EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1)
    return 0;
  *(_BYTE *)(a1 + 133) = EncodingIndex;
  *(_QWORD *)a1 = initScanProlog;
  *(_QWORD *)(a1 + 8) = initScanContent;
  *(_QWORD *)(a1 + 96) = initUpdatePosition;
  *(_QWORD *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t getEncodingIndex(unsigned __int8 *a1)
{
  uint64_t v2;

  if (!a1)
    return 6;
  v2 = 0;
  while (!streqci(a1, (unsigned __int8 *)getEncodingIndex_encodingNames[v2]))
  {
    if (++v2 == 6)
      return 0xFFFFFFFFLL;
  }
  return v2;
}

uint64_t initScanProlog(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  return initScan(encodings, a1, 0, a2, a3, a4);
}

uint64_t initScanContent(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  return initScan(encodings, a1, 1, a2, a3, a4);
}

uint64_t initUpdatePosition(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  return normal_updatePosition((uint64_t)utf8_encoding, a2, a3, a4);
}

uint64_t XmlParseXmlDecl(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t *a8, _QWORD *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncoding, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t doParseXmlDecl(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, uint64_t *a9, _QWORD *a10, int *a11)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t i;
  BOOL v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;

  v35 = 0;
  v36 = 0;
  v34 = 0;
  v17 = *(int *)(a3 + 128);
  v37 = a4 + 5 * v17;
  v18 = a5 - 2 * v17;
  v19 = parsePseudoAttribute(a3, v37, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37);
  i = v35;
  if (v19)
    v21 = v35 == 0;
  else
    v21 = 1;
  if (v21)
    goto LABEL_6;
  v23 = v34;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v35, v34, "version"))
  {
    if (a7)
      *a7 = v36;
    v25 = v37;
    if (a8)
      *a8 = v37;
    if (!parsePseudoAttribute(a3, v25, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37))
      goto LABEL_6;
    i = v35;
    if (!v35)
    {
      if (!a2)
        return 1;
LABEL_6:
      i = v37;
      goto LABEL_7;
    }
    v23 = v34;
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "encoding"))
  {
LABEL_27:
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "standalone");
    if (a2 || !v27)
      goto LABEL_7;
    i = v36;
    v28 = v37;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v36, v37 - *(int *)(a3 + 128), "yes"))
    {
      if (!a11)
      {
LABEL_38:
        for (i = v28; ; i += *(int *)(a3 + 128))
        {
          v40 = i;
          v38 = &v39;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
          v30 = v38 == &v39 ? -1 : v39;
          v31 = v30 > 0x20;
          v32 = (1 << v30) & 0x100002600;
          if (v31 || v32 == 0)
            break;
        }
        if (i == v18)
          return 1;
LABEL_7:
        result = 0;
        *a6 = i;
        return result;
      }
      v29 = 1;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v28 - *(int *)(a3 + 128), "no"))goto LABEL_7;
      if (!a11)
        goto LABEL_38;
      v29 = 0;
    }
    *a11 = v29;
    goto LABEL_38;
  }
  i = v36;
  v40 = v36;
  v38 = &v39;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
  if (v38 == &v39 || (v39 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_7;
  if (a9)
    *a9 = i;
  v26 = v37;
  if (a10)
    *a10 = a1(a3, i, v37 - *(int *)(a3 + 128));
  if (!parsePseudoAttribute(a3, v26, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37))
    goto LABEL_6;
  i = v35;
  if (v35)
  {
    v23 = v34;
    goto LABEL_27;
  }
  return 1;
}

uint64_t (**findEncoding(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _OWORD v9[7];
  __int128 v10;
  uint64_t v11;

  v4 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _BYTE **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3)
    return 0;
  *v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6)
        return 0;
    }
    if (v6 != 0xFFFFFFFFLL)
      return encodings[v6];
    return 0;
  }
  return (uint64_t (**)())v4;
}

uint64_t (**XmlGetUtf8InternalEncodingNS())()
{
  return internal_utf8_encoding_ns;
}

uint64_t XmlInitEncodingNS(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  int EncodingIndex;

  EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1)
    return 0;
  *(_BYTE *)(a1 + 133) = EncodingIndex;
  *(_QWORD *)a1 = initScanPrologNS;
  *(_QWORD *)(a1 + 8) = initScanContentNS;
  *(_QWORD *)(a1 + 96) = initUpdatePosition;
  *(_QWORD *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t initScanPrologNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  return initScan(encodingsNS, a1, 0, a2, a3, a4);
}

uint64_t initScanContentNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  return initScan(encodingsNS, a1, 1, a2, a3, a4);
}

uint64_t XmlParseXmlDeclNS(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t *a8, _QWORD *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncodingNS, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t (**findEncodingNS(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _OWORD v9[7];
  __int128 v10;
  uint64_t v11;

  v4 = a1;
  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _BYTE **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3)
    return 0;
  *v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6)
        return 0;
    }
    if (v6 != 0xFFFFFFFFLL)
      return encodingsNS[v6];
    return 0;
  }
  return (uint64_t (**)())v4;
}

_QWORD *XmlInitUnknownEncodingNS(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = XmlInitUnknownEncoding(a1, a2, a3, a4);
  if (result)
    *((_BYTE *)result + 194) = 23;
  return result;
}

uint64_t normal_prologTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char **a4)
{
  unsigned __int8 *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned int v13;
  char *v16;
  int v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;

  if ((unint64_t)a2 < a3)
  {
    v5 = a2;
    v8 = 18;
    v9 = 1;
    switch(*(_BYTE *)(a1 + *a2 + 136))
    {
      case 2:
        v16 = (char *)(a2 + 1);
        if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
          return 0xFFFFFFFFLL;
        v17 = *(unsigned __int8 *)(a1 + *v16 + 136);
        switch(*(_BYTE *)(a1 + *v16 + 136))
        {
          case 0xF:
            return normal_scanPi((_BYTE *)a1, (char *)a2 + 2, a3, a4);
          case 0x10:
            return normal_scanDecl((_BYTE *)a1, a2 + 2, a3, (unsigned __int8 **)a4);
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x17:
            goto LABEL_154;
          case 0x16:
          case 0x18:
            goto LABEL_141;
          default:
            if ((v17 - 5) >= 3 && v17 != 29)
              goto LABEL_154;
LABEL_141:
            *a4 = (char *)a2;
            v8 = 29;
            break;
        }
        return v8;
      case 4:
        v19 = (char *)(a2 + 1);
        v20 = a3 - (_QWORD)(a2 + 1);
        if (v20 < 1)
          return 4294967270;
        if (*v19 != 93)
          goto LABEL_136;
        if ((unint64_t)v20 < 2)
          return 0xFFFFFFFFLL;
        if (a2[2] == 62)
        {
          *a4 = (char *)(a2 + 3);
          return 34;
        }
        else
        {
LABEL_136:
          *a4 = v19;
          return 26;
        }
      case 5:
        if ((uint64_t)(a3 - (_QWORD)a2) < 2)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2))
          goto LABEL_134;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5))
          goto LABEL_70;
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
          goto LABEL_134;
        v8 = 19;
LABEL_70:
        v9 = 2;
        goto LABEL_4;
      case 6:
        if ((uint64_t)(a3 - (_QWORD)a2) < 3)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2))
          goto LABEL_134;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5))
          goto LABEL_76;
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
          goto LABEL_134;
        v8 = 19;
LABEL_76:
        v9 = 3;
        goto LABEL_4;
      case 7:
        if ((uint64_t)(a3 - (_QWORD)a2) < 4)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
          goto LABEL_134;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5))
          goto LABEL_153;
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
          goto LABEL_134;
        v8 = 19;
LABEL_153:
        v9 = 4;
LABEL_4:
        v5 += v9;
        v10 = a3 - (_QWORD)v5;
        if ((uint64_t)(a3 - (_QWORD)v5) < 1)
          return -(int)v8;
        while (2)
        {
          switch(*(_BYTE *)(a1 + *v5 + 136))
          {
            case 5:
              if (v10 < 2)
                return 4294967294;
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
              {
                goto LABEL_134;
              }
              v11 = (char *)(v5 + 2);
              goto LABEL_7;
            case 6:
              if (v10 < 3)
                return 4294967294;
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
              {
                goto LABEL_134;
              }
              v11 = (char *)(v5 + 3);
              goto LABEL_7;
            case 7:
              if (v10 < 4)
                return 4294967294;
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
              {
                goto LABEL_134;
              }
              v11 = (char *)(v5 + 4);
              goto LABEL_7;
            case 9:
            case 0xA:
            case 0xB:
            case 0x14:
            case 0x15:
            case 0x1E:
            case 0x20:
            case 0x23:
            case 0x24:
              goto LABEL_135;
            case 0xF:
              if ((_DWORD)v8 == 19)
                goto LABEL_134;
              *a4 = (char *)(v5 + 1);
              return 30;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              v11 = (char *)(v5 + 1);
              goto LABEL_7;
            case 0x17:
              v11 = (char *)(v5 + 1);
              if ((_DWORD)v8 == 41)
              {
                v8 = 19;
                goto LABEL_7;
              }
              if ((_DWORD)v8 != 18)
                goto LABEL_7;
              v12 = a3 - (_QWORD)v11;
              if ((uint64_t)(a3 - (_QWORD)v11) < 1)
                return 0xFFFFFFFFLL;
              v13 = *(unsigned __int8 *)(a1 + *v11 + 136);
              v8 = 19;
              if (v13 > 0x15)
              {
                if (v13 - 24 >= 4 && v13 != 22)
                {
                  if (v13 == 29)
                    goto LABEL_49;
LABEL_7:
                  v10 = a3 - (_QWORD)v11;
                  v5 = (unsigned __int8 *)v11;
                  if ((uint64_t)(a3 - (_QWORD)v11) <= 0)
                    return -(int)v8;
                  continue;
                }
                v11 = (char *)(v5 + 2);
LABEL_47:
                v8 = 41;
                goto LABEL_7;
              }
              if (v13 == 5)
              {
                if (v12 < 2)
                  return 4294967294;
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                v11 = (char *)(v5 + 3);
                goto LABEL_47;
              }
              if (v13 != 6)
              {
                if (v13 != 7)
                  goto LABEL_7;
                if (v12 < 4)
                  return 4294967294;
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                v11 = (char *)(v5 + 5);
                goto LABEL_47;
              }
              if (v12 < 3)
                return 4294967294;
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5 + 1)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5 + 1))
              {
                v11 = (char *)(v5 + 4);
                goto LABEL_47;
              }
LABEL_49:
              v8 = 0;
              *a4 = v11;
              break;
            case 0x21:
              if ((_DWORD)v8 == 19)
                goto LABEL_134;
              *a4 = (char *)(v5 + 1);
              return 31;
            case 0x22:
              if ((_DWORD)v8 == 19)
                goto LABEL_134;
              *a4 = (char *)(v5 + 1);
              return 32;
            default:
              goto LABEL_134;
          }
          return v8;
        }
      case 9:
        if (a2 + 1 != (unsigned __int8 *)a3)
          goto LABEL_80;
        *a4 = (char *)a3;
        return 4294967281;
      case 0xA:
      case 0x15:
LABEL_80:
        v21 = (char *)(a2 + 1);
        v22 = a3 - (_QWORD)(a2 + 1);
        if (v22 < 1)
          goto LABEL_91;
        do
        {
          v23 = *(unsigned __int8 *)(a1 + *v21 + 136);
          if (v23 != 21 && v23 != 10 && (v23 != 9 || v21 + 1 == (char *)a3))
            goto LABEL_91;
          ++v21;
          --v22;
        }
        while (v22 > 0);
        v21 = (char *)a3;
LABEL_91:
        *a4 = v21;
        return 15;
      case 0xB:
        *a4 = (char *)(a2 + 1);
        return 17;
      case 0xC:
        v26 = a2 + 1;
        v27 = 12;
        return normal_scanLit(v27, (_BYTE *)a1, v26, a3, (unsigned __int8 **)a4);
      case 0xD:
        v26 = a2 + 1;
        v27 = 13;
        return normal_scanLit(v27, (_BYTE *)a1, v26, a3, (unsigned __int8 **)a4);
      case 0x13:
        v5 = a2 + 1;
        v28 = a3 - (_QWORD)(a2 + 1);
        if ((uint64_t)v28 < 1)
          return 0xFFFFFFFFLL;
        v8 = 0;
        v29 = *(unsigned __int8 *)(a1 + *v5 + 136);
        if (v29 <= 6)
        {
          if (v29 == 5)
          {
            if (v28 >= 2)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5))
              {
                v31 = 2;
                goto LABEL_105;
              }
              goto LABEL_134;
            }
          }
          else
          {
            if (v29 != 6)
              goto LABEL_135;
            if (v28 >= 3)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5))
              {
                v31 = 3;
                goto LABEL_105;
              }
LABEL_134:
              v8 = 0;
LABEL_135:
              *a4 = (char *)v5;
              return v8;
            }
          }
        }
        else
        {
          if (v29 != 7)
          {
            if (v29 != 22 && v29 != 24)
              goto LABEL_135;
            v31 = 1;
LABEL_105:
            v5 += v31;
            v32 = a3 - (_QWORD)v5;
            if ((uint64_t)(a3 - (_QWORD)v5) < 1)
              return 4294967276;
            do
            {
              v8 = 0;
              v33 = 1;
              switch(*(_BYTE *)(a1 + *v5 + 136))
              {
                case 5:
                  if (v32 < 2)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
                  {
                    goto LABEL_134;
                  }
                  v33 = 2;
                  break;
                case 6:
                  if (v32 < 3)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
                  {
                    goto LABEL_134;
                  }
                  v33 = 3;
                  break;
                case 7:
                  if (v32 < 4)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
                  {
                    goto LABEL_134;
                  }
                  v33 = 4;
                  break;
                case 9:
                case 0xA:
                case 0xB:
                case 0x15:
                case 0x1E:
                case 0x20:
                case 0x24:
                  v8 = 20;
                  goto LABEL_135;
                case 0x16:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  break;
                default:
                  goto LABEL_135;
              }
              v5 += v33;
              v32 = a3 - (_QWORD)v5;
              v8 = 4294967276;
            }
            while ((uint64_t)(a3 - (_QWORD)v5) > 0);
            return v8;
          }
          if (v28 >= 4)
          {
            if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
              && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5))
            {
              v31 = 4;
              goto LABEL_105;
            }
            goto LABEL_134;
          }
        }
        return 4294967294;
      case 0x14:
        *a4 = (char *)(a2 + 1);
        return 25;
      case 0x16:
      case 0x18:
        goto LABEL_4;
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
        v8 = 19;
        v9 = 1;
        goto LABEL_4;
      case 0x1E:
        return normal_scanPercent(a1, a2 + 1, a3, (unsigned __int8 **)a4);
      case 0x1F:
        *a4 = (char *)(a2 + 1);
        return 23;
      case 0x20:
        v16 = (char *)(a2 + 1);
        if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
          return 4294967272;
        v34 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if (v34 > 0x1F)
        {
          switch(*(_BYTE *)(a1 + *v16 + 136))
          {
            case ' ':
            case '#':
            case '$':
              goto LABEL_143;
            case '!':
              *a4 = (char *)(a2 + 2);
              v8 = 36;
              break;
            case '"':
              *a4 = (char *)(a2 + 2);
              v8 = 37;
              break;
            default:
              goto LABEL_154;
          }
          return v8;
        }
        if (v34 - 9 < 3)
          goto LABEL_143;
        if (v34 == 15)
        {
          *a4 = (char *)(a2 + 2);
          return 35;
        }
        else
        {
          if (v34 == 21)
          {
LABEL_143:
            *a4 = v16;
            return 24;
          }
LABEL_154:
          v8 = 0;
          *a4 = v16;
        }
        return v8;
      case 0x23:
        *a4 = (char *)(a2 + 1);
        return 38;
      case 0x24:
        *a4 = (char *)(a2 + 1);
        return 21;
      default:
        goto LABEL_134;
    }
  }
  return 4294967292;
}

uint64_t normal_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v35;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v6 = a2;
  switch(*(_BYTE *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_3;
    case 2:
      v10 = a2 + 1;
      v11 = a3 - (_QWORD)(a2 + 1);
      if ((uint64_t)v11 < 1)
        return 0xFFFFFFFFLL;
      v12 = 1;
      switch(*(_BYTE *)(a1 + *v10 + 136))
      {
        case 5:
          if (v11 < 2)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
          {
            goto LABEL_98;
          }
          v12 = 2;
          goto LABEL_9;
        case 6:
          if (v11 < 3)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
          {
            goto LABEL_98;
          }
          v12 = 3;
          goto LABEL_9;
        case 7:
          if (v11 < 4)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
          {
            goto LABEL_98;
          }
          v12 = 4;
LABEL_9:
          v6 = &v10[v12];
          v13 = a3 - (_QWORD)&v10[v12];
          if ((uint64_t)v13 < 1)
            return 0xFFFFFFFFLL;
          v14 = 0;
          while (2)
          {
            v15 = 1;
            switch(*(_BYTE *)(a1 + *v6 + 136))
            {
              case 5:
                if (v13 < 2)
                  return 4294967294;
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6))
                {
                  goto LABEL_3;
                }
                goto LABEL_40;
              case 6:
                if (v13 < 3)
                  return 4294967294;
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6))
                {
                  goto LABEL_19;
                }
                goto LABEL_3;
              case 7:
                if (v13 < 4)
                  return 4294967294;
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6))
                {
                  goto LABEL_23;
                }
                goto LABEL_3;
              case 9:
              case 0xA:
              case 0x15:
                v31 = a3 - (_QWORD)++v6;
                if ((uint64_t)(a3 - (_QWORD)v6) < 1)
                  return 0xFFFFFFFFLL;
                result = 0xFFFFFFFFLL;
                while (2)
                {
                  switch(*(_BYTE *)(a1 + *v6 + 136))
                  {
                    case 5:
                      if (v31 < 2)
                        return 4294967294;
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      v35 = 3;
                      break;
                    case 6:
                      if (v31 < 3)
                        return 4294967294;
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      v35 = 4;
                      break;
                    case 7:
                      if (v31 < 4)
                        return 4294967294;
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      v35 = 5;
                      break;
                    case 9:
                    case 0xA:
                    case 0x15:
                      ++v6;
                      if ((uint64_t)--v31 > 0)
                        continue;
                      return result;
                    case 0xB:
                      goto LABEL_162;
                    case 0x11:
                      goto LABEL_163;
                    case 0x16:
                    case 0x18:
                      v35 = 2;
                      return normal_scanAtts(a1, &v6[v35 - 1], a3, a4);
                    default:
                      goto LABEL_3;
                  }
                  return normal_scanAtts(a1, &v6[v35 - 1], a3, a4);
                }
              case 0xB:
LABEL_162:
                *a4 = v6 + 1;
                return 2;
              case 0x11:
LABEL_163:
                v19 = v6 + 1;
                if ((uint64_t)(a3 - (_QWORD)(v6 + 1)) < 1)
                  return 0xFFFFFFFFLL;
                if (*v19 != 62)
                  goto LABEL_56;
                *a4 = v6 + 2;
                return 4;
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
                goto LABEL_41;
              case 0x17:
                if (v14)
                  goto LABEL_3;
                v10 = v6 + 1;
                v16 = a3 - (_QWORD)(v6 + 1);
                if ((uint64_t)v16 < 1)
                  return 0xFFFFFFFFLL;
                v17 = *(unsigned __int8 *)(a1 + *v10 + 136);
                if (v17 > 0x15)
                {
                  if (v17 != 22 && v17 != 24)
                    goto LABEL_98;
                  v14 = 1;
LABEL_40:
                  v15 = 2;
                }
                else
                {
                  switch(v17)
                  {
                    case 5u:
                      if (v16 < 2)
                        return 4294967294;
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
                      {
                        goto LABEL_98;
                      }
                      v14 = 1;
LABEL_19:
                      v15 = 3;
                      break;
                    case 6u:
                      if (v16 < 3)
                        return 4294967294;
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
                      {
                        goto LABEL_98;
                      }
                      v14 = 1;
LABEL_23:
                      v15 = 4;
                      break;
                    case 7u:
                      if (v16 >= 4)
                      {
                        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6 + 1)
                          && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
                        {
                          v14 = 1;
                          v15 = 5;
                          break;
                        }
LABEL_98:
                        result = 0;
                        *a4 = v10;
                        return result;
                      }
                      return 4294967294;
                    default:
                      goto LABEL_98;
                  }
                }
LABEL_41:
                v6 += v15;
                v13 = a3 - (_QWORD)v6;
                result = 0xFFFFFFFFLL;
                if ((uint64_t)(a3 - (_QWORD)v6) <= 0)
                  return result;
                continue;
              default:
                goto LABEL_3;
            }
          }
        case 0xF:
          return normal_scanPi((_BYTE *)a1, (char *)a2 + 2, a3, (char **)a4);
        case 0x10:
          v19 = a2 + 2;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 1)
            return 0xFFFFFFFFLL;
          v23 = *(unsigned __int8 *)(a1 + *v19 + 136);
          if (v23 != 20)
          {
            if (v23 != 27)
              goto LABEL_56;
            return normal_scanComment((_BYTE *)a1, a2 + 3, a3, a4);
          }
          v29 = a2 + 3;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 3)) < 6)
            return 0xFFFFFFFFLL;
          v30 = 0;
          v19 = a2 + 9;
          while (v29[v30] == big2_scanCdataSection_CDATA_LSQB[v30])
          {
            if (++v30 == 6)
            {
              result = 8;
              goto LABEL_137;
            }
          }
          result = 0;
          v19 = &v29[v30];
          goto LABEL_137;
        case 0x11:
          v6 = a2 + 2;
          v24 = a3 - (_QWORD)(a2 + 2);
          if ((uint64_t)v24 < 1)
            return 0xFFFFFFFFLL;
          result = 0;
          v25 = *(unsigned __int8 *)(a1 + *v6 + 136);
          if (v25 > 6)
          {
            if (v25 == 7)
            {
              if (v24 < 4)
                return 4294967294;
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 2))
                goto LABEL_3;
              result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
              if (!(_DWORD)result)
                goto LABEL_4;
              v26 = 4;
            }
            else
            {
              v26 = 1;
              if (v25 != 22 && v25 != 24)
                goto LABEL_4;
            }
            goto LABEL_121;
          }
          if (v25 == 5)
          {
            if (v24 < 2)
              return 4294967294;
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 2))
              goto LABEL_3;
            result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
            if (!(_DWORD)result)
              goto LABEL_4;
            v26 = 2;
            goto LABEL_121;
          }
          if (v25 != 6)
            goto LABEL_4;
          if (v24 < 3)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 2))
            goto LABEL_3;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
          if ((_DWORD)result)
          {
            v26 = 3;
LABEL_121:
            v6 += v26;
            v27 = a3 - (_QWORD)v6;
            if ((uint64_t)(a3 - (_QWORD)v6) < 1)
              return 0xFFFFFFFFLL;
            while (2)
            {
              result = 0;
              v28 = 1;
              switch(*(_BYTE *)(a1 + *v6 + 136))
              {
                case 5:
                  if (v27 < 2)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6))
                    goto LABEL_3;
                  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
                  if (!(_DWORD)result)
                    goto LABEL_4;
                  v28 = 2;
                  goto LABEL_123;
                case 6:
                  if (v27 < 3)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6))
                    goto LABEL_3;
                  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
                  if (!(_DWORD)result)
                    goto LABEL_4;
                  v28 = 3;
                  goto LABEL_123;
                case 7:
                  if (v27 < 4)
                    return 4294967294;
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6))
                    goto LABEL_3;
                  result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
                  if (!(_DWORD)result)
                    goto LABEL_4;
                  v28 = 4;
LABEL_123:
                  v6 += v28;
                  v27 = a3 - (_QWORD)v6;
                  result = 0xFFFFFFFFLL;
                  if ((uint64_t)(a3 - (_QWORD)v6) <= 0)
                    return result;
                  continue;
                case 9:
                case 0xA:
                case 0x15:
                  v32 = a3 - (_QWORD)++v6;
                  if ((uint64_t)(a3 - (_QWORD)v6) < 1)
                    return 0xFFFFFFFFLL;
                  result = 0xFFFFFFFFLL;
                  break;
                case 0xB:
                  goto LABEL_192;
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  goto LABEL_123;
                default:
                  goto LABEL_4;
              }
              break;
            }
            while (1)
            {
              v33 = *(unsigned __int8 *)(a1 + *v6 + 136);
              if ((v33 - 9) >= 2 && v33 != 21)
                break;
              ++v6;
              if ((uint64_t)--v32 <= 0)
                return result;
            }
            if (v33 == 11)
            {
LABEL_192:
              ++v6;
              result = 5;
              goto LABEL_4;
            }
            goto LABEL_3;
          }
          break;
        case 0x16:
        case 0x18:
          goto LABEL_9;
        default:
          goto LABEL_98;
      }
      goto LABEL_4;
    case 3:
      return normal_scanRef(a1, a2 + 1, a3, a4);
    case 4:
      v9 = a2 + 1;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
        return 4294967291;
      if (*v9 != 93)
        goto LABEL_73;
      v19 = a2 + 2;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 1)
        return 4294967291;
      if (*v19 == 62)
      {
LABEL_56:
        result = 0;
        goto LABEL_137;
      }
      goto LABEL_73;
    case 5:
      if ((uint64_t)(a3 - (_QWORD)a2) < 2)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2))
        goto LABEL_3;
      v9 = v6 + 2;
      goto LABEL_73;
    case 6:
      if ((uint64_t)(a3 - (_QWORD)a2) < 3)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2))
        goto LABEL_3;
      v9 = v6 + 3;
      goto LABEL_73;
    case 7:
      if ((uint64_t)(a3 - (_QWORD)a2) < 4)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
      {
LABEL_3:
        result = 0;
LABEL_4:
        *a4 = v6;
        return result;
      }
      v9 = v6 + 4;
LABEL_73:
      v21 = a3 - (_QWORD)v9;
      if ((uint64_t)(a3 - (_QWORD)v9) < 1)
      {
        v22 = v9;
LABEL_94:
        *a4 = v22;
        return 6;
      }
      break;
    case 9:
      v20 = a2 + 1;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
        return 4294967293;
      if (*(_BYTE *)(a1 + a2[1] + 136) == 10)
        v20 = a2 + 2;
LABEL_70:
      *a4 = v20;
      return 7;
    case 0xA:
      v20 = a2 + 1;
      goto LABEL_70;
    default:
      v9 = a2 + 1;
      goto LABEL_73;
  }
  while (2)
  {
    switch(*(_BYTE *)(a1 + *v9 + 136))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_92;
      case 4:
        if (v21 < 2)
          goto LABEL_92;
        v22 = v9 + 1;
        if (v9[1] != 93)
          goto LABEL_90;
        if (v21 < 3)
        {
LABEL_92:
          *a4 = v9;
          return 6;
        }
        if (v9[2] != 62)
        {
LABEL_90:
          v21 = a3 - (_QWORD)v22;
          v9 = v22;
          if ((uint64_t)(a3 - (_QWORD)v22) <= 0)
            goto LABEL_94;
          continue;
        }
        result = 0;
        v19 = v9 + 2;
LABEL_137:
        *a4 = v19;
        return result;
      case 5:
        if (v21 < 2 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v9))
          goto LABEL_92;
        v22 = v9 + 2;
        goto LABEL_90;
      case 6:
        if (v21 < 3 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v9))
          goto LABEL_92;
        v22 = v9 + 3;
        goto LABEL_90;
      case 7:
        if (v21 < 4 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v9))
          goto LABEL_92;
        v22 = v9 + 4;
        goto LABEL_90;
      default:
        v22 = v9 + 1;
        goto LABEL_90;
    }
  }
}

uint64_t normal_cdataSectionTok(_BYTE *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v6;
  int v8;
  uint64_t result;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v6 = a2;
  v8 = a1[*a2 + 136];
  result = 0;
  switch(v8)
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_42;
    case 4:
      v10 = a2 + 1;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
        return 0xFFFFFFFFLL;
      if (*v10 != 93)
        goto LABEL_10;
      if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 1)
        return 0xFFFFFFFFLL;
      if (a2[2] != 62)
        goto LABEL_10;
      v6 = a2 + 3;
      result = 40;
      goto LABEL_42;
    case 5:
      if ((uint64_t)(a3 - (_QWORD)a2) < 2)
        goto LABEL_31;
      if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 55))(a1, a2))
        goto LABEL_41;
      v10 = v6 + 2;
      goto LABEL_10;
    case 6:
      if ((uint64_t)(a3 - (_QWORD)a2) < 3)
        goto LABEL_31;
      if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 56))(a1, a2))
        goto LABEL_41;
      v10 = v6 + 3;
      goto LABEL_10;
    case 7:
      if ((uint64_t)(a3 - (_QWORD)a2) >= 4)
      {
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 57))(a1, a2))
        {
LABEL_41:
          result = 0;
        }
        else
        {
          v10 = v6 + 4;
LABEL_10:
          v11 = a3 - (_QWORD)v10;
          if ((uint64_t)(a3 - (_QWORD)v10) < 1)
          {
            result = 6;
            v6 = v10;
          }
          else
          {
            v6 = v10;
            while (2)
            {
              v12 = 1;
              result = 6;
              switch(a1[*v6 + 136])
              {
                case 0:
                case 1:
                case 4:
                case 8:
                case 9:
                case 0xA:
                  break;
                case 5:
                  if (v11 >= 2)
                  {
                    if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 55))(a1, v6))
                      goto LABEL_23;
                    v12 = 2;
                    goto LABEL_22;
                  }
                  break;
                case 6:
                  if (v11 >= 3)
                  {
                    if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 56))(a1, v6))
                      goto LABEL_23;
                    v12 = 3;
                    goto LABEL_22;
                  }
                  break;
                case 7:
                  if (v11 >= 4)
                  {
                    if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 57))(a1, v6))
                      goto LABEL_23;
                    v12 = 4;
                    goto LABEL_22;
                  }
                  break;
                default:
LABEL_22:
                  v6 += v12;
                  v11 = a3 - (_QWORD)v6;
                  if ((uint64_t)(a3 - (_QWORD)v6) > 0)
                    continue;
LABEL_23:
                  result = 6;
                  break;
              }
              break;
            }
          }
        }
LABEL_42:
        *a4 = v6;
      }
      else
      {
LABEL_31:
        result = 4294967294;
      }
      break;
    case 9:
      if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
        return 0xFFFFFFFFLL;
      if (a1[a2[1] + 136] == 10)
        v6 = a2 + 2;
      else
        v6 = a2 + 1;
LABEL_37:
      result = 7;
      goto LABEL_42;
    case 10:
      v6 = a2 + 1;
      goto LABEL_37;
    default:
      v10 = a2 + 1;
      goto LABEL_10;
  }
  return result;
}

uint64_t normal_ignoreSectionTok(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  int v9;
  uint64_t result;
  unsigned __int8 *v11;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v7 = a2;
  v9 = 0;
  while (2)
  {
    result = 0;
    switch(a1[*v7 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_31;
      case 2:
        v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1)
          return 0xFFFFFFFFLL;
        if (*v11 != 33)
          goto LABEL_26;
        v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1)
          return 0xFFFFFFFFLL;
        if (*v11 == 91)
        {
          v11 = v7 + 3;
          ++v9;
        }
        goto LABEL_26;
      case 4:
        v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1)
          return 0xFFFFFFFFLL;
        if (*v11 != 93)
          goto LABEL_26;
        v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1)
          return 0xFFFFFFFFLL;
        if (*v11 != 62)
          goto LABEL_26;
        v11 = v7 + 3;
        if (v9)
        {
          --v9;
LABEL_26:
          v4 = a3 - (_QWORD)v11;
          v7 = v11;
          if (a3 - (uint64_t)v11 <= 0)
            return 0xFFFFFFFFLL;
          continue;
        }
        result = 42;
        v7 += 3;
LABEL_31:
        *a4 = v7;
        return result;
      case 5:
        if (v4 < 2)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 55))(a1, v7))
          goto LABEL_30;
        v11 = v7 + 2;
        goto LABEL_26;
      case 6:
        if (v4 < 3)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 56))(a1, v7))
          goto LABEL_30;
        v11 = v7 + 3;
        goto LABEL_26;
      case 7:
        if (v4 < 4)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 57))(a1, v7))
        {
LABEL_30:
          result = 0;
          goto LABEL_31;
        }
        v11 = v7 + 4;
        goto LABEL_26;
      default:
        v11 = v7 + 1;
        goto LABEL_26;
    }
  }
}

uint64_t normal_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 1)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (2)
  {
    v5 = 2;
    switch(*(_BYTE *)(a1 + *v4 + 136))
    {
      case 2:
        result = 0;
        *a4 = v4;
        return result;
      case 3:
        if (v4 != a2)
          goto LABEL_9;
        return normal_scanRef(a1, a2 + 1, a3, a4);
      case 5:
        goto LABEL_8;
      case 6:
        v5 = 3;
        goto LABEL_8;
      case 7:
        v5 = 4;
        goto LABEL_8;
      case 9:
        if (v4 != a2)
          goto LABEL_9;
        v7 = a2 + 1;
        if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
        {
          result = 4294967293;
        }
        else
        {
          if (*(_BYTE *)(a1 + a2[1] + 136) == 10)
            v7 = a2 + 2;
LABEL_22:
          *a4 = v7;
          result = 7;
        }
        break;
      case 0xA:
        if (v4 != a2)
          goto LABEL_9;
        v7 = a2 + 1;
        goto LABEL_22;
      case 0x15:
        if (v4 != a2)
          goto LABEL_9;
        *a4 = a2 + 1;
        return 39;
      default:
        v5 = 1;
LABEL_8:
        v4 += v5;
        if ((uint64_t)(a3 - (_QWORD)v4) > 0)
          continue;
LABEL_9:
        *a4 = v4;
        result = 6;
        break;
    }
    return result;
  }
}

uint64_t normal_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  if ((uint64_t)(a3 - (_QWORD)a2) < 1)
    return 0xFFFFFFFFLL;
  v4 = a2;
  while (2)
  {
    v5 = 2;
    switch(*(_BYTE *)(a1 + *v4 + 136))
    {
      case 3:
        if (v4 != a2)
          goto LABEL_10;
        return normal_scanRef(a1, a2 + 1, a3, a4);
      case 4:
      case 8:
        goto LABEL_8;
      case 5:
        goto LABEL_9;
      case 6:
        v5 = 3;
        goto LABEL_9;
      case 7:
        v5 = 4;
        goto LABEL_9;
      case 9:
        if (v4 != a2)
          goto LABEL_10;
        v7 = a2 + 1;
        if ((uint64_t)(a3 - (_QWORD)(a2 + 1)) < 1)
          return 4294967293;
        if (*(_BYTE *)(a1 + a2[1] + 136) == 10)
          v7 = a2 + 2;
LABEL_23:
        *a4 = v7;
        return 7;
      case 0xA:
        if (v4 != a2)
          goto LABEL_10;
        v7 = a2 + 1;
        goto LABEL_23;
      default:
        if (*(_BYTE *)(a1 + *v4 + 136) != 30)
        {
LABEL_8:
          v5 = 1;
LABEL_9:
          v4 += v5;
          if ((uint64_t)(a3 - (_QWORD)v4) <= 0)
            goto LABEL_10;
          continue;
        }
        if (v4 == a2)
        {
          LODWORD(result) = normal_scanPercent(a1, a2 + 1, a3, a4);
          if ((_DWORD)result == 22)
            return 0;
          else
            return result;
        }
        else
        {
LABEL_10:
          *a4 = v4;
          return 6;
        }
    }
  }
}

BOOL normal_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  int v8;

  v4 = *a4;
  if (!*a4)
    return a2 == a3;
  v5 = a4 + 1;
  v6 = a3 - a2;
  while (1)
  {
    v7 = v6-- < 1;
    if (v7 || *a2 != v4)
      break;
    ++a2;
    v8 = *v5++;
    v4 = v8;
    if (!v8)
      return a2 == a3;
  }
  return 0;
}

uint64_t normal_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *i;
  unsigned int v3;

  for (i = a2; ; i += qword_1DEC5E678[(char)v3])
  {
    v3 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
    if (v3 >= 0x19 || ((0x17E0007u >> v3) & 1) == 0)
      break;
  }
  return ((_DWORD)i - (_DWORD)a2);
}

unsigned __int8 *normal_skipS(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  while (1)
  {
    v2 = *(unsigned __int8 *)(a1 + *a2 + 136);
    v3 = v2 > 0x15;
    v4 = (1 << v2) & 0x200600;
    if (v3 || v4 == 0)
      break;
    ++a2;
  }
  return a2;
}

uint64_t normal_getAtts(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  int v20;

  result = 0;
  v6 = 0;
  v7 = 1;
  while (2)
  {
    v8 = a2;
    v10 = *(unsigned __int8 *)++a2;
    v9 = v10;
    v11 = v7;
    switch(*(_BYTE *)(a1 + v10 + 136))
    {
      case 3:
        if ((int)result < a3)
          *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
        continue;
      case 5:
        if (!(_DWORD)v7)
        {
          v11 = 1;
          if ((int)result < a3)
          {
            v13 = a4 + 32 * (int)result;
            *(_QWORD *)v13 = a2;
            *(_BYTE *)(v13 + 24) = 1;
          }
        }
        a2 = v8 + 2;
        v7 = v11;
        continue;
      case 6:
        if (!(_DWORD)v7)
        {
          v11 = 1;
          if ((int)result < a3)
          {
            v14 = a4 + 32 * (int)result;
            *(_QWORD *)v14 = a2;
            *(_BYTE *)(v14 + 24) = 1;
          }
        }
        a2 = v8 + 3;
        v7 = v11;
        continue;
      case 7:
        if (!(_DWORD)v7)
        {
          v11 = 1;
          if ((int)result < a3)
          {
            v15 = a4 + 32 * (int)result;
            *(_QWORD *)v15 = a2;
            *(_BYTE *)(v15 + 24) = 1;
          }
        }
        a2 = v8 + 4;
        v7 = v11;
        continue;
      case 9:
      case 0xA:
        v7 = 0;
        if ((_DWORD)v11 != 1)
        {
          v7 = v11;
          if ((_DWORD)v11 == 2 && (int)result < a3)
          {
            *(_BYTE *)(a4 + 32 * (int)result + 24) = 0;
            v7 = 2;
          }
        }
        continue;
      case 0xB:
      case 0x11:
        v7 = 2;
        if ((_DWORD)v11 == 2)
          continue;
        return result;
      case 0xC:
        if ((_DWORD)v7 == 2)
        {
          v7 = 2;
          if (v6 == 12)
          {
            if ((int)result < a3)
              *(_QWORD *)(a4 + 32 * (int)result + 16) = a2;
            v7 = 0;
            result = (result + 1);
            v6 = 12;
          }
        }
        else
        {
          v6 = 12;
          v7 = 2;
          if ((int)result < a3)
          {
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v8 + 2;
            v6 = 12;
            v7 = 2;
          }
        }
        continue;
      case 0xD:
        if ((_DWORD)v7 == 2)
        {
          v7 = 2;
          if (v6 == 13)
          {
            if ((int)result < a3)
              *(_QWORD *)(a4 + 32 * (int)result + 16) = a2;
            v7 = 0;
            result = (result + 1);
            v6 = 13;
          }
        }
        else
        {
          v6 = 13;
          v7 = 2;
          if ((int)result < a3)
          {
            *(_QWORD *)(a4 + 32 * (int)result + 8) = v8 + 2;
            v6 = 13;
            v7 = 2;
          }
        }
        continue;
      case 0x15:
        v7 = 0;
        if ((_DWORD)v11 != 1)
        {
          v7 = v11;
          if ((_DWORD)v11 == 2 && (int)result < a3)
          {
            v16 = a4 + 32 * (int)result;
            v18 = *(unsigned __int8 *)(v16 + 24);
            v17 = (_BYTE *)(v16 + 24);
            v7 = 2;
            if (v18)
            {
              if (v9 != 32
                || a2 == *(_QWORD *)(a4 + 32 * (int)result + 8)
                || (v19 = *(unsigned __int8 *)(v8 + 2), v19 == 32)
                || (v20 = *(unsigned __int8 *)(a1 + v19 + 136), v7 = 2, v6 == v20))
              {
                *v17 = 0;
                v7 = 2;
              }
            }
          }
        }
        continue;
      case 0x16:
      case 0x18:
      case 0x1D:
        if (!(_DWORD)v7)
        {
          v7 = 1;
          if ((int)result < a3)
          {
            v12 = a4 + 32 * (int)result;
            *(_QWORD *)v12 = a2;
            *(_BYTE *)(v12 + 24) = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t normal_charRefNumber(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;

  v2 = a2[2];
  if (v2 == 59)
  {
LABEL_4:
    v4 = 0;
    return checkCharRefNumber(v4);
  }
  if (v2 == 120)
  {
    v3 = a2[3];
    if (v3 == 59)
      goto LABEL_4;
    v4 = 0;
    v7 = a2 + 4;
    while (1)
    {
      v8 = (char)v3 - 48;
      if (v8 <= 0x36)
      {
        if (((1 << v8) & 0x3FF) != 0)
        {
          v4 = v8 | (16 * (_DWORD)v4);
          goto LABEL_18;
        }
        if (((1 << v8) & 0x7E0000) != 0)
        {
          v4 = ((char)v3 + 16 * v4 - 55);
LABEL_18:
          if ((int)v4 >= 1114112)
            return 0xFFFFFFFFLL;
          goto LABEL_19;
        }
        if (((1 << v8) & 0x7E000000000000) != 0)
        {
          v4 = ((char)v3 + 16 * v4 - 87);
          goto LABEL_18;
        }
      }
LABEL_19:
      v9 = *v7++;
      LOBYTE(v3) = v9;
      if (v9 == 59)
        return checkCharRefNumber(v4);
    }
  }
  LODWORD(v4) = 0;
  v5 = a2 + 3;
  while (1)
  {
    v4 = (10 * v4 + (char)v2 - 48);
    if ((int)v4 >= 1114112)
      break;
    v6 = *v5++;
    LOBYTE(v2) = v6;
    if (v6 == 59)
      return checkCharRefNumber(v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v7;

  v3 = a3 - (_QWORD)a2;
  if (a3 - (_QWORD)a2 == 4)
  {
    v7 = (char)*a2;
    if (v7 == 97)
    {
      if (a2[1] == 112 && a2[2] == 111 && a2[3] == 115)
        return 39;
    }
    else if (v7 == 113 && a2[1] == 117 && a2[2] == 111 && a2[3] == 116)
    {
      return 34;
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (*a2 == 97 && a2[1] == 109 && a2[2] == 112)
      return 38;
    return 0;
  }
  if (v3 != 2 || a2[1] != 116)
    return 0;
  v4 = *a2;
  if (v4 == 103)
    v5 = 62;
  else
    v5 = 0;
  if (v4 == 108)
    return 60;
  else
    return v5;
}

uint64_t normal_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  if (a3 - (uint64_t)a2 >= 1)
  {
    while (2)
    {
      switch(*(_BYTE *)(result + *a2 + 136))
      {
        case 5:
          a2 += 2;
          goto LABEL_7;
        case 6:
          a2 += 3;
          goto LABEL_7;
        case 7:
          a2 += 4;
          goto LABEL_7;
        case 9:
          ++*a4;
          if (a3 - (uint64_t)(a2 + 1) < 1)
          {
            ++a2;
          }
          else if (*(_BYTE *)(result + a2[1] + 136) == 10)
          {
            a2 += 2;
          }
          else
          {
            ++a2;
          }
          a4[1] = 0;
          goto LABEL_8;
        case 0xA:
          ++*a4;
          a4[1] = 0;
          ++a2;
          goto LABEL_8;
        default:
          ++a2;
LABEL_7:
          ++a4[1];
LABEL_8:
          if (a3 - (uint64_t)a2 <= 0)
            return result;
          continue;
      }
    }
  }
  return result;
}

uint64_t normal_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v4 = (unsigned __int8 *)(a2 + 1);
  v5 = ~(a2 + 1) + a3;
  if (v5 >= 1)
  {
    do
    {
      v6 = *v4;
      v7 = (char)v6;
      v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0)
          goto LABEL_4;
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0)
            goto LABEL_4;
        }
        else if (v8 == 21)
        {
          if (v7 == 9)
            goto LABEL_14;
          goto LABEL_4;
        }
      }
      if (v7 != 64 && v7 != 36)
      {
LABEL_14:
        result = 0;
        *a4 = v4;
        return result;
      }
LABEL_4:
      ++v4;
      --v5;
    }
    while (v5 > 0);
  }
  return 1;
}

uint64_t latin1_toUtf8(uint64_t a1, char **a2, char *a3, _BYTE **a4, _BYTE *a5)
{
  char *i;
  int v6;
  _BYTE *v7;
  char v8;
  _BYTE *v9;
  char v10;
  char *v11;

  while (2)
  {
    for (i = *a2; ; *a2 = i)
    {
      if (i == a3)
        return 0;
      v6 = *i;
      v7 = *a4;
      if ((v6 & 0x80000000) == 0)
        break;
      if (a5 - v7 < 2)
        return 2;
      *a4 = v7 + 1;
      *v7 = (v6 >> 6) | 0xC0;
      v8 = v6 & 0x3F | 0x80;
      v9 = (*a4)++;
      *v9 = v8;
      i = *a2 + 1;
    }
    if (v7 != a5)
    {
      *a2 = i + 1;
      v10 = *i;
      v11 = (*a4)++;
      *v11 = v10;
      continue;
    }
    break;
  }
  return 2;
}

uint64_t latin1_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, _QWORD *a4, _WORD *a5)
{
  unsigned __int8 *v5;
  _WORD *v6;
  _WORD *v7;

  v5 = (unsigned __int8 *)*a2;
  if (*a2 >= a3)
    return 0;
  v6 = (_WORD *)*a4;
  while (v6 < a5)
  {
    *a2 = (unint64_t)(v5 + 1);
    v7 = (_WORD *)*a4;
    *v7 = *v5;
    v6 = v7 + 1;
    *a4 = v6;
    v5 = (unsigned __int8 *)*a2;
    if (*a2 >= a3)
      return 0;
  }
  if (v6 == a5)
    return 2;
  else
    return 0;
}

uint64_t normal_scanLit(int a1, _BYTE *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5;
  unsigned __int8 *v8;
  int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  int v15;

  v5 = a4 - (_QWORD)a3;
  if (a4 - (uint64_t)a3 < 1)
    return 0xFFFFFFFFLL;
  v8 = a3;
  while (2)
  {
    v11 = a2[*v8 + 136];
    switch(a2[*v8 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_19;
      case 5:
        if (v5 < 2)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a2 + 55))(a2, v8))
          goto LABEL_19;
        v8 += 2;
        goto LABEL_16;
      case 6:
        if (v5 < 3)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a2 + 56))(a2, v8))
          goto LABEL_19;
        v8 += 3;
        goto LABEL_16;
      case 7:
        if (v5 >= 4)
        {
          if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a2 + 57))(a2, v8))
          {
LABEL_19:
            result = 0;
            *a5 = v8;
            return result;
          }
          v8 += 4;
LABEL_16:
          v5 = a4 - (_QWORD)v8;
          if (a4 - (uint64_t)v8 <= 0)
            return 0xFFFFFFFFLL;
          continue;
        }
        return 4294967294;
      case 0xC:
      case 0xD:
        ++v8;
        if (v11 != a1)
          goto LABEL_16;
        if (a4 - (uint64_t)v8 < 1)
          return 4294967269;
        *a5 = v8;
        v13 = a2[*v8 + 136];
        v14 = v13 > 0x1E;
        v15 = (1 << v13) & 0x40300E00;
        if (v14 || v15 == 0)
          return 0;
        else
          return 27;
      default:
        ++v8;
        goto LABEL_16;
    }
  }
}

uint64_t normal_scanDecl(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  int v9;

  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  switch(a1[*a2 + 136])
  {
    case 0x14:
      *a4 = a2 + 1;
      result = 33;
      break;
    case 0x16:
    case 0x18:
      v4 = a2 + 1;
      v5 = a3 - (_QWORD)(a2 + 1);
      if (v5 < 1)
        return 0xFFFFFFFFLL;
      while (2)
      {
        switch(a1[*v4 + 136])
        {
          case 0x15:
            goto LABEL_11;
          case 0x16:
          case 0x18:
            ++v4;
            if (--v5 <= 0)
              return 0xFFFFFFFFLL;
            continue;
          case 0x17:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
            goto LABEL_17;
          case 0x1E:
            if ((unint64_t)v5 < 2)
              return 0xFFFFFFFFLL;
            v7 = a1[v4[1] + 136];
            v8 = v7 > 0x1E;
            v9 = (1 << v7) & 0x40200600;
            if (!v8 && v9 != 0)
              goto LABEL_17;
            goto LABEL_11;
          default:
            if (a1[*v4 + 136] - 9 >= 2)
            {
LABEL_17:
              result = 0;
              *a4 = v4;
            }
            else
            {
LABEL_11:
              *a4 = v4;
              result = 16;
            }
            break;
        }
        break;
      }
      break;
    case 0x1B:
      result = normal_scanComment(a1, a2 + 1, a3, a4);
      break;
    default:
      result = 0;
      *a4 = a2;
      break;
  }
  return result;
}

uint64_t normal_scanPi(_BYTE *a1, char *a2, uint64_t a3, char **a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v23 = v4;
  v24 = v5;
  v9 = a2;
  v11 = a1[*a2 + 136];
  if (v11 > 0x15)
  {
    if (v11 != 22 && v11 != 24)
      goto LABEL_34;
    v12 = 1;
  }
  else
  {
    switch(v11)
    {
      case 5u:
        if (v6 < 2)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, char *))a1 + 55))(a1, a2)
          || !(*((unsigned int (**)(_BYTE *, char *))a1 + 52))(a1, v9))
        {
          goto LABEL_34;
        }
        v12 = 2;
        break;
      case 6u:
        if (v6 < 3)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, char *))a1 + 56))(a1, a2)
          || !(*((unsigned int (**)(_BYTE *, char *))a1 + 53))(a1, v9))
        {
          goto LABEL_34;
        }
        v12 = 3;
        break;
      case 7u:
        if (v6 >= 4)
        {
          if (!(*((unsigned int (**)(_BYTE *, char *))a1 + 57))(a1, a2)
            && (*((unsigned int (**)(_BYTE *, char *))a1 + 54))(a1, v9))
          {
            v12 = 4;
            break;
          }
LABEL_34:
          result = 0;
          *a4 = v9;
          return result;
        }
        return 4294967294;
      default:
        goto LABEL_34;
    }
  }
  v15 = &v9[v12];
  v16 = a3 - (_QWORD)&v9[v12];
  if ((uint64_t)v16 < 1)
    return 0xFFFFFFFFLL;
  v22 = 0;
  while (2)
  {
    v17 = 1;
    switch(a1[*v15 + 136])
    {
      case 5:
        if (v16 < 2)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, char *))a1 + 55))(a1, v15)
          || !(*((unsigned int (**)(_BYTE *, char *))a1 + 49))(a1, v15))
        {
          goto LABEL_44;
        }
        v17 = 2;
        goto LABEL_20;
      case 6:
        if (v16 < 3)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, char *))a1 + 56))(a1, v15)
          || !(*((unsigned int (**)(_BYTE *, char *))a1 + 50))(a1, v15))
        {
          goto LABEL_44;
        }
        v17 = 3;
        goto LABEL_20;
      case 7:
        if (v16 < 4)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, char *))a1 + 57))(a1, v15)
          || !(*((unsigned int (**)(_BYTE *, char *))a1 + 51))(a1, v15))
        {
          goto LABEL_44;
        }
        v17 = 4;
LABEL_20:
        v15 += v17;
        v16 = a3 - (_QWORD)v15;
        if (a3 - (uint64_t)v15 <= 0)
          return 0xFFFFFFFFLL;
        continue;
      case 9:
      case 0xA:
      case 0x15:
        result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!(_DWORD)result)
          goto LABEL_45;
        v9 = v15 + 1;
        v18 = a3 - (_QWORD)(v15 + 1);
        if ((uint64_t)v18 >= 1)
        {
          while (2)
          {
            switch(a1[*v9 + 136])
            {
              case 0:
              case 1:
              case 8:
                goto LABEL_34;
              case 5:
                if (v18 < 2)
                  return 4294967294;
                if ((*((unsigned int (**)(_BYTE *, char *))a1 + 55))(a1, v9))
                  goto LABEL_34;
                v19 = v9 + 2;
                goto LABEL_61;
              case 6:
                if (v18 < 3)
                  return 4294967294;
                if ((*((unsigned int (**)(_BYTE *, char *))a1 + 56))(a1, v9))
                  goto LABEL_34;
                v19 = v9 + 3;
                goto LABEL_61;
              case 7:
                if (v18 < 4)
                  return 4294967294;
                if ((*((unsigned int (**)(_BYTE *, char *))a1 + 57))(a1, v9))
                  goto LABEL_34;
                v19 = v9 + 4;
LABEL_61:
                v18 = a3 - (_QWORD)v19;
                result = 0xFFFFFFFFLL;
                v9 = v19;
                if (a3 - (uint64_t)v19 <= 0)
                  return result;
                continue;
              case 0xF:
                v19 = v9 + 1;
                if (a3 - (uint64_t)(v9 + 1) < 1)
                  return 0xFFFFFFFFLL;
                if (*v19 != 62)
                  goto LABEL_61;
                v21 = (unsigned __int8 *)(v9 + 2);
                goto LABEL_72;
              default:
                v19 = v9 + 1;
                goto LABEL_61;
            }
          }
        }
        return 0xFFFFFFFFLL;
      case 0xF:
        result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!(_DWORD)result)
          goto LABEL_45;
        v20 = v15 + 1;
        if (a3 - (uint64_t)(v15 + 1) < 1)
          return 0xFFFFFFFFLL;
        if (*v20 == 62)
        {
          v21 = (unsigned __int8 *)(v15 + 2);
LABEL_72:
          *a4 = (char *)v21;
          result = v22;
        }
        else
        {
LABEL_64:
          result = 0;
          *a4 = v20;
        }
        break;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_20;
      case 0x1D:
LABEL_44:
        result = 0;
LABEL_45:
        *a4 = v15;
        return result;
      default:
        v20 = v15;
        goto LABEL_64;
    }
    return result;
  }
}

uint64_t normal_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v6 = a2;
  result = 0;
  v10 = 1;
  switch(*(_BYTE *)(a1 + *a2 + 136))
  {
    case 5:
      if (v4 < 2)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2))
        goto LABEL_16;
      result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
      if (!(_DWORD)result)
        goto LABEL_17;
      v10 = 2;
      break;
    case 6:
      if (v4 < 3)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2))
        goto LABEL_16;
      result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
      if (!(_DWORD)result)
        goto LABEL_17;
      v10 = 3;
      break;
    case 7:
      if (v4 < 4)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
        goto LABEL_16;
      result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
      if (!(_DWORD)result)
        goto LABEL_17;
      v10 = 4;
      break;
    case 9:
    case 0xA:
    case 0x15:
      result = 22;
      goto LABEL_17;
    case 0x16:
    case 0x18:
      break;
    default:
      goto LABEL_17;
  }
  v6 += v10;
  v11 = a3 - (_QWORD)v6;
  if (a3 - (uint64_t)v6 < 1)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v12 = *(unsigned __int8 *)(a1 + *v6 + 136);
    if (v12 > 0x11)
      break;
    switch(v12)
    {
      case 5u:
        if (v11 < 2)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6))
          goto LABEL_16;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
        if (!(_DWORD)result)
          goto LABEL_17;
        v13 = 2;
        break;
      case 6u:
        if (v11 < 3)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6))
          goto LABEL_16;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
        if (!(_DWORD)result)
          goto LABEL_17;
        v13 = 3;
        break;
      case 7u:
        if (v11 < 4)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6))
          goto LABEL_16;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
        if (!(_DWORD)result)
          goto LABEL_17;
        v13 = 4;
        break;
      default:
        goto LABEL_16;
    }
LABEL_44:
    v6 += v13;
    v11 = a3 - (_QWORD)v6;
    if (a3 - (uint64_t)v6 <= 0)
      return 0xFFFFFFFFLL;
  }
  if (v12 - 24 < 4 || v12 == 22)
  {
    v13 = 1;
    goto LABEL_44;
  }
  if (v12 != 18)
  {
LABEL_16:
    result = 0;
    goto LABEL_17;
  }
  ++v6;
  result = 28;
LABEL_17:
  *a4 = v6;
  return result;
}

uint64_t normal_scanComment(_BYTE *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v5;
  unint64_t v7;
  uint64_t result;
  unsigned __int8 *v10;
  int v11;

  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v5 = a2;
  if (*a2 != 45)
  {
LABEL_22:
    result = 0;
    goto LABEL_23;
  }
  v5 = a2 + 1;
  v7 = a3 - (_QWORD)(a2 + 1);
  if ((uint64_t)v7 < 1)
    return 0xFFFFFFFFLL;
  while (2)
  {
    result = 0;
    switch(a1[*v5 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_23;
      case 2:
      case 3:
      case 4:
        goto LABEL_12;
      case 5:
        if (v7 < 2)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 55))(a1, v5))
          goto LABEL_22;
        v10 = v5 + 2;
        goto LABEL_19;
      case 6:
        if (v7 < 3)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 56))(a1, v5))
          goto LABEL_22;
        v10 = v5 + 3;
        goto LABEL_19;
      case 7:
        if (v7 < 4)
          return 4294967294;
        if ((*((unsigned int (**)(_BYTE *, unsigned __int8 *))a1 + 57))(a1, v5))
          goto LABEL_22;
        v10 = v5 + 4;
        goto LABEL_19;
      default:
        if (a1[*v5 + 136] != 27)
        {
LABEL_12:
          v10 = v5 + 1;
LABEL_19:
          v7 = a3 - (_QWORD)v10;
          v5 = v10;
          if (a3 - (uint64_t)v10 <= 0)
            return 0xFFFFFFFFLL;
          continue;
        }
        v10 = v5 + 1;
        if (a3 - (uint64_t)(v5 + 1) < 1)
          return 0xFFFFFFFFLL;
        if (*v10 != 45)
          goto LABEL_19;
        if (a3 - (uint64_t)(v5 + 2) < 1)
          return 0xFFFFFFFFLL;
        v11 = v5[2];
        if (v11 == 62)
          v5 += 3;
        else
          v5 += 2;
        if (v11 == 62)
          result = 13;
        else
          result = 0;
LABEL_23:
        *a4 = v5;
        return result;
    }
  }
}

BOOL normal_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  *a3 = 11;
  if (a2 - (_QWORD)a1 != 3)
    return 1;
  v3 = *a1;
  if (v3 == 120)
  {
    v4 = 0;
  }
  else
  {
    if (v3 != 88)
      return 1;
    v4 = 1;
  }
  v5 = a1[1];
  if (v5 != 109)
  {
    if (v5 != 77)
      return 1;
    v4 = 1;
  }
  v6 = a1[2];
  if (v6 != 108)
    return v6 != 76;
  if (v4)
    return 0;
  *a3 = 12;
  return 1;
}

uint64_t normal_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v22;
  int v23;

  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v7 = a2;
  result = 0;
  v10 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v10 <= 0x12)
  {
    switch(v10)
    {
      case 5u:
        if (v4 >= 2)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2))
            goto LABEL_59;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7);
          if (!(_DWORD)result)
            goto LABEL_60;
          v11 = 2;
          goto LABEL_18;
        }
        break;
      case 6u:
        if (v4 >= 3)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2))
            goto LABEL_59;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7);
          if (!(_DWORD)result)
            goto LABEL_60;
          v11 = 3;
          goto LABEL_18;
        }
        break;
      case 7u:
        if (v4 >= 4)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
            goto LABEL_59;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7);
          if (!(_DWORD)result)
            goto LABEL_60;
          v11 = 4;
LABEL_18:
          v7 += v11;
          v13 = a3 - (_QWORD)v7;
          if (a3 - (uint64_t)v7 >= 1)
          {
            while (1)
            {
              v14 = *(unsigned __int8 *)(a1 + *v7 + 136);
              if (v14 > 0x11)
              {
                if (v14 - 24 >= 4 && v14 != 22)
                {
                  if (v14 == 18)
                  {
                    ++v7;
                    result = 9;
                    goto LABEL_60;
                  }
LABEL_59:
                  result = 0;
                  goto LABEL_60;
                }
                v15 = 1;
              }
              else
              {
                switch(v14)
                {
                  case 5u:
                    if (v13 < 2)
                      return 4294967294;
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7))
                      goto LABEL_59;
                    result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
                    if (!(_DWORD)result)
                      goto LABEL_60;
                    v15 = 2;
                    break;
                  case 6u:
                    if (v13 < 3)
                      return 4294967294;
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7))
                      goto LABEL_59;
                    result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
                    if (!(_DWORD)result)
                      goto LABEL_60;
                    v15 = 3;
                    break;
                  case 7u:
                    if (v13 < 4)
                      return 4294967294;
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7))
                      goto LABEL_59;
                    result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
                    if (!(_DWORD)result)
                      goto LABEL_60;
                    v15 = 4;
                    break;
                  default:
                    goto LABEL_59;
                }
              }
              v7 += v15;
              v13 = a3 - (_QWORD)v7;
              if (a3 - (uint64_t)v7 <= 0)
                return 0xFFFFFFFFLL;
            }
          }
          return 0xFFFFFFFFLL;
        }
        break;
      default:
        goto LABEL_60;
    }
    return 4294967294;
  }
  if (v10 != 19)
  {
    if (v10 == 22 || v10 == 24)
    {
      v11 = 1;
      goto LABEL_18;
    }
LABEL_60:
    *a4 = v7;
    return result;
  }
  if (a3 - (uint64_t)(a2 + 1) >= 1)
  {
    v17 = a2[1];
    if (v17 != 120)
    {
      if (*(_BYTE *)(a1 + v17 + 136) != 25)
      {
        result = 0;
        v7 = a2 + 1;
        goto LABEL_60;
      }
      v7 = a2 + 2;
      v20 = v4 - 2;
      while (v20-- >= 1)
      {
        v22 = *v7++;
        v23 = *(unsigned __int8 *)(a1 + v22 + 136);
        if (v23 != 25)
        {
          if (v23 != 18)
          {
            result = 0;
            --v7;
            goto LABEL_60;
          }
          goto LABEL_77;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (a3 - (uint64_t)(a2 + 2) >= 1)
    {
      if ((*(_BYTE *)(a1 + a2[2] + 136) & 0xFE) != 0x18)
      {
        result = 0;
        v7 = a2 + 2;
        goto LABEL_60;
      }
      v7 = a2 + 3;
      v18 = a3 - (_QWORD)(a2 + 3);
      if (v18 >= 1)
      {
        result = 0xFFFFFFFFLL;
        while (1)
        {
          v19 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v19 - 24) >= 2)
            break;
          ++v7;
          if (--v18 <= 0)
            return result;
        }
        if (v19 != 18)
          goto LABEL_59;
        ++v7;
LABEL_77:
        result = 10;
        goto LABEL_60;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  int v9;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;

  v26 = a2;
  v4 = a3 - (_QWORD)a2;
  if (a3 - (uint64_t)a2 < 1)
    return 0xFFFFFFFFLL;
  v7 = a2;
  v9 = 0;
  v25 = a3 - 2;
  while (1)
  {
    result = 0;
    v11 = v7;
    switch(*(_BYTE *)(a1 + *v7 + 136))
    {
      case 5:
        if (v4 < 2)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7))
          goto LABEL_103;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
        if (!(_DWORD)result)
          goto LABEL_104;
        v7 += 2;
        goto LABEL_5;
      case 6:
        if (v4 < 3)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7))
          goto LABEL_103;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
        if (!(_DWORD)result)
          goto LABEL_104;
        v7 += 3;
        goto LABEL_5;
      case 7:
        if (v4 < 4)
          return 4294967294;
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7))
          goto LABEL_103;
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
        if (!(_DWORD)result)
          goto LABEL_104;
        v7 += 4;
        goto LABEL_5;
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        goto LABEL_105;
      case 9:
      case 0xA:
      case 0x15:
        v12 = a3 - (_QWORD)++v7;
        if (a3 - (uint64_t)v7 < 1)
          return 0xFFFFFFFFLL;
        while (1)
        {
          v13 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v13 - 9) >= 2 && v13 != 21)
            break;
          ++v7;
          if (--v12 <= 0)
            return 0xFFFFFFFFLL;
        }
        if (v13 != 14)
          goto LABEL_103;
        v26 = v7;
LABEL_18:
        v15 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1)
          return 0xFFFFFFFFLL;
        v16 = *(unsigned __int8 *)(a1 + *v15 + 136);
        if ((v16 & 0xFE) != 0xC)
        {
          v17 = v25 - (_QWORD)v7;
          while (1)
          {
            v7 = v15;
            if (v16 > 0x15 || ((1 << v16) & 0x200600) == 0)
              break;
            if (v17 <= 0)
              return 0xFFFFFFFFLL;
            ++v15;
            v16 = *(unsigned __int8 *)(a1 + v7[1] + 136);
            --v17;
            if ((v16 & 0xFE) == 0xC)
              goto LABEL_25;
          }
LABEL_103:
          result = 0;
LABEL_104:
          v11 = v7;
LABEL_105:
          *a4 = v11;
          return result;
        }
LABEL_25:
        v7 += 2;
        v26 = v7;
        v18 = a3 - (_QWORD)v7;
        if (a3 - (uint64_t)v7 < 1)
          return 0xFFFFFFFFLL;
        break;
      case 0xE:
        goto LABEL_18;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        ++v7;
        goto LABEL_5;
      case 0x17:
        if (v9)
          goto LABEL_103;
        v11 = v7 + 1;
        v26 = v7 + 1;
        v19 = a3 - (_QWORD)(v7 + 1);
        if ((uint64_t)v19 < 1)
          return 0xFFFFFFFFLL;
        result = 0;
        v20 = *(unsigned __int8 *)(a1 + *v11 + 136);
        if (v20 <= 6)
        {
          if (v20 == 5)
          {
            if (v19 < 2)
              return 4294967294;
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 + 1))
            {
LABEL_122:
              result = 0;
              goto LABEL_105;
            }
            result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 + 1);
            if (!(_DWORD)result)
              goto LABEL_105;
            v7 += 3;
          }
          else
          {
            if (v20 != 6)
              goto LABEL_105;
            if (v19 < 3)
              return 4294967294;
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 + 1))
              goto LABEL_122;
            result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 + 1);
            if (!(_DWORD)result)
              goto LABEL_105;
            v7 += 4;
          }
        }
        else if (v20 == 7)
        {
          if (v19 < 4)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 + 1))
            goto LABEL_122;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 + 1);
          if (!(_DWORD)result)
            goto LABEL_105;
          v7 += 5;
        }
        else
        {
          if (v20 != 24 && v20 != 22)
            goto LABEL_105;
          v7 += 2;
        }
        v26 = v7;
        v9 = 1;
        goto LABEL_6;
      default:
        goto LABEL_104;
    }
LABEL_26:
    if (*(unsigned __int8 *)(a1 + *v7 + 136) != v16)
      break;
    v11 = v7 + 1;
    v26 = v7 + 1;
    if (a3 - (uint64_t)(v7 + 1) < 1)
      return 0xFFFFFFFFLL;
    result = 0;
    v22 = *(unsigned __int8 *)(a1 + *v11 + 136);
    if (v22 > 0xA)
    {
      if (v22 != 21)
      {
        if (v22 == 11)
        {
LABEL_111:
          ++v11;
          result = 1;
          goto LABEL_105;
        }
        if (v22 != 17)
          goto LABEL_105;
LABEL_113:
        v26 = v11 + 1;
        if (a3 - (uint64_t)(v11 + 1) >= 1)
        {
          v24 = v11[1];
          if (v24 == 62)
            v11 += 2;
          else
            ++v11;
          if (v24 == 62)
            result = 3;
          else
            result = 0;
          goto LABEL_105;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else if (v22 - 9 >= 2)
    {
      goto LABEL_105;
    }
    v11 = v7 + 2;
    v23 = a3 - (_QWORD)(v7 + 2);
    if (v23 < 1)
      return 0xFFFFFFFFLL;
    v7 += 6;
    while (2)
    {
      switch(*(_BYTE *)(a1 + *(v7 - 4) + 136))
      {
        case 5:
          if ((unint64_t)v23 < 2)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 - 4))
            goto LABEL_122;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 - 4);
          if (!(_DWORD)result)
            goto LABEL_105;
          v9 = 0;
          v7 -= 2;
          goto LABEL_5;
        case 6:
          if ((unint64_t)v23 < 3)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 - 4))
            goto LABEL_122;
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 - 4);
          if (!(_DWORD)result)
            goto LABEL_105;
          v9 = 0;
          --v7;
          goto LABEL_5;
        case 7:
          if ((unint64_t)v23 < 4)
            return 4294967294;
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 - 4))
          {
            result = 0;
            v11 = v7 - 4;
            goto LABEL_105;
          }
          result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 - 4);
          if (!(_DWORD)result)
            goto LABEL_105;
          v9 = 0;
LABEL_5:
          v26 = v7;
          break;
        case 9:
        case 0xA:
        case 0x15:
          ++v11;
          --v23;
          ++v7;
          result = 0xFFFFFFFFLL;
          if (v23 <= 0)
            return result;
          continue;
        case 0xB:
          v11 = v7 - 4;
          goto LABEL_111;
        case 0x11:
          v11 = v7 - 4;
          goto LABEL_113;
        case 0x16:
        case 0x18:
          v9 = 0;
          v7 -= 3;
          goto LABEL_5;
        default:
          result = 0;
          v11 = v7 - 4;
          goto LABEL_105;
      }
      break;
    }
LABEL_6:
    v4 = a3 - (_QWORD)v7;
    if (a3 - (uint64_t)v7 <= 0)
      return 0xFFFFFFFFLL;
  }
  result = 0;
  v11 = v7;
  switch(*(_BYTE *)(a1 + *v7 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 8:
      goto LABEL_105;
    case 3:
      result = normal_scanRef(a1, v7 + 1, a3, &v26);
      if ((int)result >= 1)
      {
        v7 = v26;
LABEL_41:
        v18 = a3 - (_QWORD)v7;
        if (a3 - (uint64_t)v7 <= 0)
          return 0xFFFFFFFFLL;
        goto LABEL_26;
      }
      if (!(_DWORD)result)
      {
        v11 = v26;
        goto LABEL_105;
      }
      return result;
    case 5:
      if (v18 < 2)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7))
        goto LABEL_103;
      v7 += 2;
      goto LABEL_40;
    case 6:
      if (v18 < 3)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7))
        goto LABEL_103;
      v7 += 3;
      goto LABEL_40;
    case 7:
      if (v18 < 4)
        return 4294967294;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7))
        goto LABEL_103;
      v7 += 4;
LABEL_40:
      v26 = v7;
      goto LABEL_41;
    default:
      ++v7;
      goto LABEL_40;
  }
}

uint64_t utf8_toUtf8(uint64_t a1, const void **a2, unint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v6;
  const void *v8;
  int64_t v9;
  int64_t v10;
  _BOOL4 v11;
  size_t v12;
  unint64_t v14;

  v6 = a3;
  v14 = a3;
  v8 = *a2;
  v9 = a3 - (_QWORD)*a2;
  v10 = a5 - (_QWORD)*a4;
  if (v9 > v10)
  {
    v6 = (unint64_t)v8 + v10;
    v14 = (unint64_t)v8 + v10;
  }
  _INTERNAL_trim_to_complete_utf8_characters((unint64_t)v8, &v14);
  v11 = v14 < v6;
  v12 = v14 - (_QWORD)*a2;
  memcpy(*a4, *a2, v12);
  *a2 = (char *)*a2 + v12;
  *a4 = (char *)*a4 + v12;
  if (v9 <= v10)
    return v11;
  else
    return 2;
}

uint64_t utf8_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, _WORD **a4, unint64_t a5)
{
  _WORD *v5;
  unsigned __int8 *v6;
  _BOOL4 v7;
  uint64_t result;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  __int16 v13;

  v5 = *a4;
  v6 = (unsigned __int8 *)*a2;
  v7 = *a2 < a3;
  if (*a2 < a3 && (unint64_t)v5 < a5)
  {
    do
    {
      v10 = *v6;
      v11 = *(unsigned __int8 *)(a1 + v10 + 136);
      switch(v11)
      {
        case 7:
          if ((uint64_t)(a5 - (_QWORD)v5) < 4)
          {
            result = 2;
            goto LABEL_25;
          }
          if ((uint64_t)(a3 - (_QWORD)v6) < 4)
          {
LABEL_23:
            result = 1;
            goto LABEL_25;
          }
          v12 = v6[2];
          v13 = v6[3] & 0x3F;
          *v5 = (((((v6[1] & 0x3F) << 12) & 0xFFE3F03F | ((*v6 & 7) << 18) | ((v12 & 0x3F) << 6)) + 16711680) >> 10) | 0xD800;
          v5[1] = v13 & 0xF03F | ((v12 & 0x3F) << 6) | 0xDC00;
          v5 += 2;
          v6 += 4;
          break;
        case 6:
          if ((uint64_t)(a3 - (_QWORD)v6) < 3)
            goto LABEL_23;
          *v5++ = ((_WORD)v10 << 12) | ((v6[1] & 0x3F) << 6) | v6[2] & 0x3F;
          v6 += 3;
          break;
        case 5:
          if ((uint64_t)(a3 - (_QWORD)v6) < 2)
            goto LABEL_23;
          *v5++ = v6[1] & 0x3F | ((v10 & 0x1F) << 6);
          v6 += 2;
          break;
        default:
          ++v6;
          *v5++ = (char)v10;
          break;
      }
      v7 = (unint64_t)v6 < a3;
    }
    while ((unint64_t)v6 < a3 && (unint64_t)v5 < a5);
  }
  if (v7)
    result = 2;
  else
    result = 0;
LABEL_25:
  *a2 = (unint64_t)v6;
  *a4 = v5;
  return result;
}

uint64_t utf8_isName2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8 * namePages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isName3(uint64_t a1, _BYTE *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * namePages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

uint64_t isNever()
{
  return 0;
}

uint64_t utf8_isNmstrt2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8
                                                                    * nmstrtPages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isNmstrt3(uint64_t a1, _BYTE *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * nmstrtPages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

BOOL utf8_isInvalid2(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 < 0xC2u)
    return 1;
  if ((a2[1] & 0x80u) != 0)
    return a2[1] > 0xBFu;
  return 1;
}

BOOL utf8_isInvalid3(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (((char)a2[2] & 0x80000000) == 0)
    return 1;
  v3 = a2[2];
  v4 = *a2;
  if (v4 != 239)
  {
    if (v3 > 0xBF)
      return 1;
    v5 = a2[1];
    if (v4 == 224)
      return (v5 + 64) < 0xE0u;
    goto LABEL_11;
  }
  v5 = a2[1];
  if (v5 != 191)
  {
    if (v3 > 0xBF)
      return 1;
LABEL_11:
    if ((v5 & 0x80) != 0)
      goto LABEL_12;
    return 1;
  }
  if (v3 > 0xBD)
    return 1;
  v5 = 191;
LABEL_12:
  if (v4 == 237)
    v6 = 159;
  else
    v6 = 191;
  return v5 > v6;
}

uint64_t utf8_isInvalid4(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;

  if ((char)a2[3] > -65 || (char)a2[2] > -65)
    return 1;
  v3 = *a2;
  v4 = a2[1];
  if (v3 == 240)
    return (v4 + 64) < 0xD0u;
  if (v3 == 244)
    v5 = 143;
  else
    v5 = 191;
  v6 = v4 > v5;
  return (v4 & 0x80) == 0 || v6;
}

uint64_t little2_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4)
{
  char v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v44;

  if ((unint64_t)a2 >= a3)
    return 4294967292;
  v4 = a3 - (_BYTE)a2;
  v5 = (a3 - (_QWORD)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
    v6 = ((a3 - (_QWORD)a2) & 1) == 0;
  else
    v6 = 1;
  if (!v6)
    a3 = (unint64_t)&a2[v5];
  if ((v4 & 1) != 0 && !v5)
    return 0xFFFFFFFFLL;
  v9 = a2[1];
  if (v9 > 0xDB)
  {
    if (v9 - 220 < 4 || v9 == 255 && *a2 > 0xFDu)
    {
LABEL_17:
      v7 = 0;
      *a4 = (uint64_t)a2;
      return v7;
    }
  }
  else
  {
    if (v9 - 216 < 4)
    {
LABEL_14:
      if ((uint64_t)(a3 - (_QWORD)a2) < 4)
        return 4294967294;
      v10 = a2 + 4;
      goto LABEL_29;
    }
    if (!a2[1])
    {
      switch(*(_BYTE *)(a1 + *a2 + 136))
      {
        case 0:
        case 1:
        case 8:
          goto LABEL_17;
        case 2:
          v11 = a2 + 2;
          v12 = a3 - (_QWORD)(a2 + 2);
          if (v12 < 2)
            return 0xFFFFFFFFLL;
          v13 = a2[3];
          if (a2[3] > 0xDBu)
          {
            if ((v13 - 220) < 4)
              goto LABEL_78;
            if ((_DWORD)v13 == 255)
            {
              LODWORD(v19) = *v11;
              if (v19 > 0xFD)
                goto LABEL_78;
              goto LABEL_88;
            }
          }
          else
          {
            if ((v13 - 216) < 4)
            {
LABEL_24:
              if ((unint64_t)v12 < 4)
                return 4294967294;
LABEL_78:
              v7 = 0;
              goto LABEL_79;
            }
            if (!a2[3])
            {
              v19 = *v11;
              switch(*(_BYTE *)(a1 + v19 + 136))
              {
                case 5:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x17:
                  goto LABEL_78;
                case 6:
                  if ((unint64_t)v12 >= 3)
                    goto LABEL_78;
                  return 4294967294;
                case 7:
                  goto LABEL_24;
                case 0xF:
                  return little2_scanPi(a1, (char *)a2 + 4, a3, a4);
                case 0x10:
                  v11 = a2 + 4;
                  if ((uint64_t)(a3 - (_QWORD)(a2 + 4)) < 2)
                    return 0xFFFFFFFFLL;
                  if (a2[5])
                    goto LABEL_78;
                  v31 = *(unsigned __int8 *)(a1 + *v11 + 136);
                  if (v31 != 20)
                  {
                    if (v31 != 27)
                      goto LABEL_78;
                    return little2_scanComment(a1, a2 + 6, a3, a4);
                  }
                  v11 = a2 + 6;
                  if ((uint64_t)(a3 - (_QWORD)(a2 + 6)) < 12)
                    return 0xFFFFFFFFLL;
                  v38 = 0;
                  while (!v11[1] && *v11 == big2_scanCdataSection_CDATA_LSQB[v38])
                  {
                    ++v38;
                    v11 += 2;
                    if (v38 == 6)
                    {
                      v7 = 8;
                      v11 = a2 + 18;
                      goto LABEL_79;
                    }
                  }
                  goto LABEL_78;
                case 0x11:
                  v11 = a2 + 4;
                  v32 = a3 - (_QWORD)(a2 + 4);
                  if (v32 < 2)
                    return 0xFFFFFFFFLL;
                  v33 = a2[5];
                  if (a2[5] > 0xDBu)
                  {
                    if ((v33 - 220) < 4)
                      goto LABEL_78;
                    if ((_DWORD)v33 == 255)
                    {
                      LODWORD(v34) = *v11;
                      if (v34 > 0xFD)
                        goto LABEL_78;
                      goto LABEL_181;
                    }
                  }
                  else
                  {
                    if ((v33 - 216) < 4)
                      goto LABEL_138;
                    if (!a2[5])
                    {
                      v7 = 0;
                      v34 = *v11;
                      v37 = *(unsigned __int8 *)(a1 + v34 + 136);
                      if (v37 <= 0x15)
                      {
                        if (v37 == 6)
                        {
LABEL_203:
                          if ((unint64_t)v32 < 3)
                            return 4294967294;
                          goto LABEL_78;
                        }
                        if (v37 != 7)
                          goto LABEL_79;
LABEL_138:
                        if ((unint64_t)v32 < 4)
                          return 4294967294;
                        goto LABEL_78;
                      }
                      if (v37 == 22 || v37 == 24)
                        goto LABEL_182;
                      if (v37 != 29)
                        goto LABEL_79;
LABEL_181:
                      if (((namingBitmap[(v34 >> 5) | (8 * nmstrtPages[v33])] >> v34) & 1) == 0)
                        goto LABEL_78;
LABEL_182:
                      v11 = a2 + 6;
                      if ((uint64_t)(a3 - (_QWORD)(a2 + 6)) < 2)
                        return 0xFFFFFFFFLL;
                      for (i = a3 - (_QWORD)a2 - 8; ; i -= 2)
                      {
                        v40 = v11[1];
                        if (v11[1] > 0xDBu)
                          break;
                        if (v11[1])
                        {
                          if ((v40 - 216) < 4)
                          {
LABEL_209:
                            if ((unint64_t)(i + 2) < 4)
                              return 4294967294;
                            goto LABEL_78;
                          }
LABEL_195:
                          LODWORD(v41) = *v11;
                          goto LABEL_196;
                        }
                        v41 = *v11;
                        v42 = *(unsigned __int8 *)(a1 + v41 + 136);
                        if ((v42 - 22) >= 6)
                        {
                          if (v42 != 29)
                          {
                            v7 = 0;
                            switch(*(_BYTE *)(a1 + v41 + 136))
                            {
                              case 6:
                                if ((unint64_t)(i + 2) >= 3)
                                  goto LABEL_78;
                                return 4294967294;
                              case 7:
                                goto LABEL_209;
                              case 8:
                                goto LABEL_79;
                              case 9:
                              case 0xA:
                                goto LABEL_215;
                              case 0xB:
                                goto LABEL_226;
                              default:
                                if (v42 != 21)
                                  goto LABEL_79;
LABEL_215:
                                if (i < 2)
                                  return 0xFFFFFFFFLL;
                                v11 += 2;
                                break;
                            }
                            while (1)
                            {
                              if (v11[1])
                                goto LABEL_78;
                              v44 = *(unsigned __int8 *)(a1 + *v11 + 136);
                              if ((v44 - 9) >= 2 && v44 != 21)
                                break;
                              v11 += 2;
                              i -= 2;
                              v7 = 0xFFFFFFFFLL;
                              if (i <= 1)
                                return v7;
                            }
                            if (v44 == 11)
                            {
LABEL_226:
                              v11 += 2;
                              v7 = 5;
                              goto LABEL_79;
                            }
                            goto LABEL_78;
                          }
                          goto LABEL_196;
                        }
LABEL_197:
                        v11 += 2;
                        v7 = 0xFFFFFFFFLL;
                        if (i <= 1)
                          return v7;
                      }
                      if ((_DWORD)v40 != 255)
                      {
                        if ((v40 - 220) < 4)
                          goto LABEL_78;
                        goto LABEL_195;
                      }
                      LODWORD(v41) = *v11;
                      if (v41 > 0xFD)
                        goto LABEL_78;
LABEL_196:
                      if (((namingBitmap[(v41 >> 5) | (8 * namePages[v40])] >> v41) & 1) == 0)
                        goto LABEL_78;
                      goto LABEL_197;
                    }
                  }
                  LODWORD(v34) = *v11;
                  goto LABEL_181;
                case 0x16:
                case 0x18:
                  goto LABEL_89;
                default:
                  if (*(_BYTE *)(a1 + v19 + 136) != 29)
                    goto LABEL_78;
                  goto LABEL_88;
              }
            }
          }
          LODWORD(v19) = *v11;
LABEL_88:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v13])] >> v19) & 1) == 0)
            goto LABEL_78;
LABEL_89:
          v11 = a2 + 4;
          v20 = a3 - (_QWORD)(a2 + 4);
          if (v20 < 2)
            return 0xFFFFFFFFLL;
          v21 = 0;
          while (1)
          {
            v22 = v11[1];
            if (v11[1] > 0xDBu)
            {
              if ((_DWORD)v22 == 255)
              {
                LODWORD(v23) = *v11;
                if (v23 > 0xFD)
                  goto LABEL_78;
                goto LABEL_112;
              }
              if ((v22 - 220) < 4)
                goto LABEL_78;
            }
            else
            {
              if (!v11[1])
              {
                v23 = *v11;
                v24 = 2;
                switch(*(_BYTE *)(a1 + v23 + 136))
                {
                  case 6:
                    if ((unint64_t)v20 >= 3)
                      goto LABEL_78;
                    return 4294967294;
                  case 7:
                    goto LABEL_125;
                  case 9:
                  case 0xA:
                  case 0x15:
                    v11 += 2;
                    v32 = a3 - (_QWORD)v11;
                    if ((uint64_t)(a3 - (_QWORD)v11) < 2)
                      return 0xFFFFFFFFLL;
                    while (2)
                    {
                      v35 = v11[1];
                      if (!v11[1])
                      {
                        v36 = *v11;
                        switch(*(_BYTE *)(a1 + v36 + 136))
                        {
                          case 6:
                            goto LABEL_203;
                          case 7:
                            goto LABEL_138;
                          case 9:
                          case 0xA:
                          case 0x15:
                            v11 += 2;
                            v32 -= 2;
                            v7 = 0xFFFFFFFFLL;
                            if (v32 <= 1)
                              return v7;
                            continue;
                          case 0xB:
                            goto LABEL_171;
                          case 0x11:
                            goto LABEL_172;
                          case 0x16:
                          case 0x18:
                            return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                          case 0x1D:
                            v35 = 0;
                            goto LABEL_212;
                          default:
                            goto LABEL_78;
                        }
                      }
                      break;
                    }
                    if ((v35 - 216) < 4)
                      goto LABEL_138;
                    if ((v35 - 220) < 4)
                      goto LABEL_78;
                    if ((_DWORD)v35 == 255)
                    {
                      LODWORD(v36) = *v11;
                      if (v36 > 0xFD)
                        goto LABEL_78;
                      v35 = 0xFFu;
                    }
                    else
                    {
                      LODWORD(v36) = *v11;
                    }
LABEL_212:
                    if (((namingBitmap[(v36 >> 5) | (8 * nmstrtPages[v35])] >> v36) & 1) == 0)
                      goto LABEL_78;
                    return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                  case 0xB:
LABEL_171:
                    *a4 = (uint64_t)(v11 + 2);
                    return 2;
                  case 0x11:
LABEL_172:
                    v17 = v11 + 2;
                    if ((uint64_t)(a3 - (_QWORD)(v11 + 2)) < 2)
                      return 0xFFFFFFFFLL;
                    if (v11[3] || *v17 != 62)
                      goto LABEL_63;
                    *a4 = (uint64_t)(v11 + 4);
                    return 4;
                  case 0x16:
                  case 0x18:
                  case 0x19:
                  case 0x1A:
                  case 0x1B:
                    goto LABEL_114;
                  case 0x17:
                    if (v21)
                      goto LABEL_78;
                    v25 = v11 + 2;
                    v26 = a3 - (_QWORD)(v11 + 2);
                    if (v26 < 2)
                      return 0xFFFFFFFFLL;
                    v27 = v11[3];
                    if (v11[3] > 0xDBu)
                    {
                      if ((_DWORD)v27 == 255)
                      {
                        LODWORD(v28) = *v25;
                        if (v28 > 0xFD)
                          goto LABEL_179;
                        goto LABEL_123;
                      }
                      if ((v27 - 220) < 4)
                        goto LABEL_179;
                    }
                    else
                    {
                      if (!v11[3])
                      {
                        v28 = *v25;
                        v29 = *(unsigned __int8 *)(a1 + v28 + 136);
                        if (v29 <= 0x15)
                        {
                          if (v29 != 5)
                          {
                            if (v29 == 6)
                            {
                              if ((unint64_t)v26 < 3)
                                return 4294967294;
                            }
                            else if (v29 == 7)
                            {
LABEL_147:
                              if ((unint64_t)v26 < 4)
                                return 4294967294;
                            }
                          }
LABEL_179:
                          v7 = 0;
                          *a4 = (uint64_t)v25;
                          return v7;
                        }
                        if (v29 == 22 || v29 == 24)
                          goto LABEL_124;
                        if (v29 != 29)
                          goto LABEL_179;
LABEL_123:
                        if (((namingBitmap[(v28 >> 5) | (8 * nmstrtPages[v27])] >> v28) & 1) == 0)
                          goto LABEL_179;
LABEL_124:
                        v21 = 1;
                        v24 = 4;
                        goto LABEL_114;
                      }
                      if ((v27 - 216) < 4)
                        goto LABEL_147;
                    }
                    LODWORD(v28) = *v25;
                    goto LABEL_123;
                  case 0x1D:
                    goto LABEL_112;
                  default:
                    goto LABEL_78;
                }
              }
              if ((v22 - 216) < 4)
              {
LABEL_125:
                if ((unint64_t)v20 >= 4)
                  goto LABEL_78;
                return 4294967294;
              }
            }
            LODWORD(v23) = *v11;
LABEL_112:
            if (((namingBitmap[(v23 >> 5) | (8 * namePages[v22])] >> v23) & 1) == 0)
              goto LABEL_78;
            v24 = 2;
LABEL_114:
            v11 += v24;
            v20 = a3 - (_QWORD)v11;
            v7 = 0xFFFFFFFFLL;
            if ((uint64_t)(a3 - (_QWORD)v11) <= 1)
              return v7;
          }
        case 3:
          return little2_scanRef(a1, a2 + 2, a3, a4);
        case 4:
          v10 = a2 + 2;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
            return 4294967291;
          if (a2[3] || *v10 != 93)
            goto LABEL_29;
          v17 = a2 + 4;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 4)) < 2)
            return 4294967291;
          if (!a2[5] && *v17 == 62)
          {
LABEL_63:
            v7 = 0;
            *a4 = (uint64_t)v17;
            return v7;
          }
          goto LABEL_29;
        case 5:
          if ((uint64_t)(a3 - (_QWORD)a2) >= 2)
            break;
          return 4294967294;
        case 6:
          if ((uint64_t)(a3 - (_QWORD)a2) < 3)
            return 4294967294;
          v10 = a2 + 3;
          goto LABEL_29;
        case 7:
          goto LABEL_14;
        case 9:
          v18 = a2 + 2;
          if ((uint64_t)(a3 - (_QWORD)(a2 + 2)) < 2)
            return 4294967293;
          if (!a2[3] && *(_BYTE *)(a1 + a2[2] + 136) == 10)
            v18 = a2 + 4;
LABEL_74:
          *a4 = (uint64_t)v18;
          return 7;
        case 0xA:
          v18 = a2 + 2;
          goto LABEL_74;
        default:
          break;
      }
    }
  }
  v10 = a2 + 2;
LABEL_29:
  v14 = a3 - (_QWORD)v10;
  if ((uint64_t)(a3 - (_QWORD)v10) < 2)
  {
    v16 = v10;
LABEL_53:
    *a4 = (uint64_t)v16;
    return 6;
  }
  while (1)
  {
    v15 = v10[1];
    if (v15 > 0xDB)
    {
      if (v15 == 255)
      {
        if (*v10 > 0xFDu)
          goto LABEL_54;
      }
      else if (v15 - 220 < 4)
      {
LABEL_54:
        *a4 = (uint64_t)v10;
        return 6;
      }
      goto LABEL_47;
    }
    if (v15 - 216 >= 4)
      break;
LABEL_32:
    if (v14 <= 3)
      goto LABEL_54;
    v16 = v10 + 4;
LABEL_48:
    v14 = a3 - (_QWORD)v16;
    v10 = v16;
    if ((uint64_t)(a3 - (_QWORD)v16) <= 1)
      goto LABEL_53;
  }
  if (v10[1])
  {
LABEL_47:
    v16 = v10 + 2;
    goto LABEL_48;
  }
  switch(*(_BYTE *)(a1 + *v10 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 0xA:
      goto LABEL_54;
    case 4:
      if (v14 < 4)
        goto LABEL_54;
      v16 = v10 + 2;
      if (v10[3] || *v16 != 93)
        goto LABEL_48;
      if (v14 < 6)
        goto LABEL_54;
      if (v10[5] || v10[4] != 62)
        goto LABEL_48;
      v7 = 0;
      v11 = v10 + 4;
      break;
    case 6:
      if (v14 <= 2)
        goto LABEL_54;
      v16 = v10 + 3;
      goto LABEL_48;
    case 7:
      goto LABEL_32;
    default:
      goto LABEL_47;
  }
LABEL_79:
  *a4 = (uint64_t)v11;
  return v7;
}

